//
// AUTO-GENERATED - DO NOT MODIFY
//
// To contribute to this file, see the adjacent codegen package.
// https://github.com/AndrewBrownK/projective_ga/
//

struct Scalar {
    // 1
     g0: f32,
}

struct AntiScalar {
    // e1234
     g0: f32,
}

struct Magnitude {
    // 1, e1234
     g0: vec2<f32>,
}

struct Point {
    // e1, e2, e3, e4
     g0: vec4<f32>,
}

struct Origin {
    // e4
     g0: f32,
}

struct PointAtInfinity {
    // e1, e2, e3
     g0: vec3<f32>,
}

struct Line {
    // -e14, -e24, -e34
     g0: vec3<f32>,
    // e23, -e13, e12
     g1: vec3<f32>,
}

struct LineAtOrigin {
    // -e14, -e24, -e34
     g0: vec3<f32>,
}

struct LineAtInfinity {
    // e23, -e13, e12
     g0: vec3<f32>,
}

struct Plane {
    // e234, -e134, e124, -e123
     g0: vec4<f32>,
}

struct PlaneAtOrigin {
    // e234, -e134, e124
     g0: vec3<f32>,
}

struct Horizon {
    // -e123
     g0: f32,
}

struct Motor {
    // -e14, -e24, -e34, e1234
     g0: vec4<f32>,
    // e23, -e13, e12
     g1: vec3<f32>,
}

struct Rotor {
    // -e14, -e24, -e34, e1234
     g0: vec4<f32>,
}

struct Translator {
    // e23, -e13, e12, e1234
     g0: vec4<f32>,
}

struct Flector {
    // e1, e2, e3, e4
     g0: vec4<f32>,
    // e234, -e134, e124, -e123
     g1: vec4<f32>,
}

struct Transflector {
    // e1, e2, e3
     g0: vec3<f32>,
    // e234, -e134, e124, -e123
     g1: vec4<f32>,
}

struct FlectorAtInfinity {
    // e1, e2, e3, -e123
     g0: vec4<f32>,
}

struct MultiVector {
    // 1, e1234
     g0: vec2<f32>,
    // e1, e2, e3, e4
     g1: vec4<f32>,
    // -e14, -e24, -e34
     g2: vec3<f32>,
    // e23, -e13, e12
     g3: vec3<f32>,
    // e234, -e134, e124, -e123
     g4: vec4<f32>,
}

struct MultiVectorAtOrigin {
    // e4, e1234
     g0: vec2<f32>,
    // -e14, -e24, -e34
     g1: vec3<f32>,
    // e234, -e134, e124
     g2: vec3<f32>,
}

struct MultiVectorAtInfinity {
    // 1, -e123
     g0: vec2<f32>,
    // e1, e2, e3
     g1: vec3<f32>,
    // e23, -e13, e12
     g2: vec3<f32>,
}

fn anti_scalar__one() -> AntiScalar {
    return AntiScalar(0.0);
}

fn flector__one() -> Flector {
    return Flector(vec4<f32>(0.0), vec4<f32>(0.0));
}

fn flector_at_infinity__one() -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(0.0));
}

fn horizon__one() -> Horizon {
    return Horizon(0.0);
}

fn line__one() -> Line {
    return Line(vec3<f32>(0.0), vec3<f32>(0.0));
}

fn line_at_infinity__one() -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(0.0));
}

fn line_at_origin__one() -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(0.0));
}

fn magnitude__one() -> Magnitude {
    return Magnitude(vec2<f32>(1.0, 0.0));
}

fn motor__one() -> Motor {
    return Motor(vec4<f32>(0.0), vec3<f32>(0.0));
}

fn multi_vector__one() -> MultiVector {
    return MultiVector(vec2<f32>(1.0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn multi_vector_at_infinity__one() -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(1.0, 0.0), vec3<f32>(0.0), vec3<f32>(0.0));
}

fn multi_vector_at_origin__one() -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0));
}

fn origin__one() -> Origin {
    return Origin(0.0);
}

fn plane__one() -> Plane {
    return Plane(vec4<f32>(0.0));
}

fn plane_at_origin__one() -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(0.0));
}

fn point__one() -> Point {
    return Point(vec4<f32>(0.0));
}

fn point_at_infinity__one() -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(0.0));
}

fn rotor__one() -> Rotor {
    return Rotor(vec4<f32>(0.0));
}

fn scalar__one() -> Scalar {
    return Scalar(1.0);
}

fn transflector__one() -> Transflector {
    return Transflector(vec3<f32>(0.0), vec4<f32>(0.0));
}

fn translator__one() -> Translator {
    return Translator(vec4<f32>(0.0));
}

fn anti_scalar__zero() -> AntiScalar {
    return AntiScalar(0.0);
}

fn flector__zero() -> Flector {
    return Flector(vec4<f32>(0.0), vec4<f32>(0.0));
}

fn flector_at_infinity__zero() -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(0.0));
}

fn horizon__zero() -> Horizon {
    return Horizon(0.0);
}

fn line__zero() -> Line {
    return Line(vec3<f32>(0.0), vec3<f32>(0.0));
}

fn line_at_infinity__zero() -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(0.0));
}

fn line_at_origin__zero() -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(0.0));
}

fn magnitude__zero() -> Magnitude {
    return Magnitude(vec2<f32>(0.0));
}

fn motor__zero() -> Motor {
    return Motor(vec4<f32>(0.0), vec3<f32>(0.0));
}

fn multi_vector__zero() -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn multi_vector_at_infinity__zero() -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0));
}

fn multi_vector_at_origin__zero() -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0));
}

fn origin__zero() -> Origin {
    return Origin(0.0);
}

fn plane__zero() -> Plane {
    return Plane(vec4<f32>(0.0));
}

fn plane_at_origin__zero() -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(0.0));
}

fn point__zero() -> Point {
    return Point(vec4<f32>(0.0));
}

fn point_at_infinity__zero() -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(0.0));
}

fn rotor__zero() -> Rotor {
    return Rotor(vec4<f32>(0.0));
}

fn scalar__zero() -> Scalar {
    return Scalar(0.0);
}

fn transflector__zero() -> Transflector {
    return Transflector(vec3<f32>(0.0), vec4<f32>(0.0));
}

fn translator__zero() -> Translator {
    return Translator(vec4<f32>(0.0));
}

fn anti_scalar__neg(self_: AntiScalar) -> AntiScalar {
    return AntiScalar(-self_.g0);
}

fn flector__neg(self_: Flector) -> Flector {
    return Flector(self_.g0 * vec4<f32>(-1.0), self_.g1 * vec4<f32>(1.0, -1.0, 1.0, -1.0));
}

fn flector_at_infinity__neg(self_: FlectorAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(self_.g0 * vec4<f32>(-1.0));
}

fn horizon__neg(self_: Horizon) -> Horizon {
    return Horizon(-self_.g0);
}

fn line__neg(self_: Line) -> Line {
    return Line(self_.g0 * vec3<f32>(-1.0, 1.0, -1.0), self_.g1 * vec3<f32>(-1.0));
}

fn line_at_infinity__neg(self_: LineAtInfinity) -> LineAtInfinity {
    return LineAtInfinity(self_.g0 * vec3<f32>(-1.0));
}

fn line_at_origin__neg(self_: LineAtOrigin) -> LineAtOrigin {
    return LineAtOrigin(self_.g0 * vec3<f32>(-1.0, 1.0, -1.0));
}

fn magnitude__neg(self_: Magnitude) -> Magnitude {
    return Magnitude(self_.g0 * vec2<f32>(-1.0));
}

fn motor__neg(self_: Motor) -> Motor {
    return Motor(self_.g0 * vec4<f32>(-1.0, 1.0, -1.0, -1.0), self_.g1 * vec3<f32>(-1.0));
}

fn multi_vector__neg(self_: MultiVector) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(-1.0), self_.g1 * vec4<f32>(-1.0), self_.g2 * vec3<f32>(-1.0, 1.0, -1.0), self_.g3 * vec3<f32>(-1.0), self_.g4 * vec4<f32>(1.0, -1.0, 1.0, -1.0));
}

fn multi_vector_at_infinity__neg(self_: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0 * vec2<f32>(-1.0), self_.g1 * vec3<f32>(-1.0), self_.g2 * vec3<f32>(-1.0));
}

fn multi_vector_at_origin__neg(self_: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0 * vec2<f32>(-1.0), self_.g1 * vec3<f32>(-1.0, 1.0, -1.0), self_.g2 * vec3<f32>(1.0, -1.0, 1.0));
}

fn origin__neg(self_: Origin) -> Origin {
    return Origin(-self_.g0);
}

fn plane__neg(self_: Plane) -> Plane {
    return Plane(self_.g0 * vec4<f32>(1.0, -1.0, 1.0, -1.0));
}

fn plane_at_origin__neg(self_: PlaneAtOrigin) -> PlaneAtOrigin {
    return PlaneAtOrigin(self_.g0 * vec3<f32>(1.0, -1.0, 1.0));
}

fn point__neg(self_: Point) -> Point {
    return Point(self_.g0 * vec4<f32>(-1.0));
}

fn point_at_infinity__neg(self_: PointAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(self_.g0 * vec3<f32>(-1.0));
}

fn rotor__neg(self_: Rotor) -> Rotor {
    return Rotor(self_.g0 * vec4<f32>(-1.0, 1.0, -1.0, -1.0));
}

fn scalar__neg(self_: Scalar) -> Scalar {
    return Scalar(-self_.g0);
}

fn transflector__neg(self_: Transflector) -> Transflector {
    return Transflector(self_.g0 * vec3<f32>(-1.0), self_.g1 * vec4<f32>(1.0, -1.0, 1.0, -1.0));
}

fn translator__neg(self_: Translator) -> Translator {
    return Translator(self_.g0 * vec4<f32>(-1.0));
}

fn anti_scalar__add__anti_scalar(self_: AntiScalar, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0 + other.g0);
}

fn anti_scalar__add__flector(self_: AntiScalar, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0), other.g0, vec3<f32>(0.0), vec3<f32>(0.0), other.g1);
}

fn anti_scalar__add__flector_at_infinity(self_: AntiScalar, other: FlectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0), vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn anti_scalar__add__horizon(self_: AntiScalar, other: Horizon) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn anti_scalar__add__line(self_: AntiScalar, other: Line) -> Motor {
    return Motor(vec4<f32>(0.0, 0.0, 0.0, self_.g0) + vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), other.g1);
}

fn anti_scalar__add__line_at_infinity(self_: AntiScalar, other: LineAtInfinity) -> Translator {
    return Translator(vec4<f32>(0.0, 0.0, 0.0, self_.g0) + vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn anti_scalar__add__line_at_origin(self_: AntiScalar, other: LineAtOrigin) -> Rotor {
    return Rotor(vec4<f32>(0.0, 0.0, 0.0, self_.g0) + vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn anti_scalar__add__magnitude(self_: AntiScalar, other: Magnitude) -> Magnitude {
    return Magnitude(vec2<f32>(0.0, self_.g0) + other.g0);
}

fn anti_scalar__add__motor(self_: AntiScalar, other: Motor) -> Motor {
    return Motor(vec4<f32>(0.0, 0.0, 0.0, self_.g0) + other.g0, other.g1);
}

fn anti_scalar__add__multi_vector(self_: AntiScalar, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0) + other.g0, other.g1, other.g2, other.g3, other.g4);
}

fn anti_scalar__add__multi_vector_at_infinity(self_: AntiScalar, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0) + vec2<f32>(other.g0.x, 0.0), vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec3<f32>(0.0), other.g2, vec4<f32>(0.0, 0.0, 0.0, other.g0.y));
}

fn anti_scalar__add__multi_vector_at_origin(self_: AntiScalar, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(0.0, self_.g0) + other.g0, other.g1, other.g2);
}

fn anti_scalar__add__origin(self_: AntiScalar, other: Origin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(0.0, self_.g0) + vec2<f32>(other.g0, 0.0), vec3<f32>(0.0), vec3<f32>(0.0));
}

fn anti_scalar__add__plane(self_: AntiScalar, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g0);
}

fn anti_scalar__add__plane_at_origin(self_: AntiScalar, other: PlaneAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(0.0, self_.g0), vec3<f32>(0.0), other.g0);
}

fn anti_scalar__add__point(self_: AntiScalar, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0), other.g0, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn anti_scalar__add__point_at_infinity(self_: AntiScalar, other: PointAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0), vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn anti_scalar__add__rotor(self_: AntiScalar, other: Rotor) -> Rotor {
    return Rotor(vec4<f32>(0.0, 0.0, 0.0, self_.g0) + other.g0);
}

fn anti_scalar__add__scalar(self_: AntiScalar, other: Scalar) -> Magnitude {
    return Magnitude(vec2<f32>(0.0, self_.g0) + vec2<f32>(other.g0, 0.0));
}

fn anti_scalar__add__transflector(self_: AntiScalar, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0), vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g1);
}

fn anti_scalar__add__translator(self_: AntiScalar, other: Translator) -> Translator {
    return Translator(vec4<f32>(0.0, 0.0, 0.0, self_.g0) + other.g0);
}

fn flector__add__anti_scalar(self_: Flector, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0), self_.g0, vec3<f32>(0.0), vec3<f32>(0.0), self_.g1);
}

fn flector__add__flector(self_: Flector, other: Flector) -> Flector {
    return Flector(self_.g0 + other.g0, self_.g1 + other.g1);
}

fn flector__add__flector_at_infinity(self_: Flector, other: FlectorAtInfinity) -> Flector {
    return Flector(self_.g0 + vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g1 + vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn flector__add__horizon(self_: Flector, other: Horizon) -> Flector {
    return Flector(self_.g0, self_.g1 + vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn flector__add__line(self_: Flector, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0, other.g0, other.g1, self_.g1);
}

fn flector__add__line_at_infinity(self_: Flector, other: LineAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0, vec3<f32>(0.0), other.g0, self_.g1);
}

fn flector__add__line_at_origin(self_: Flector, other: LineAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0, other.g0, vec3<f32>(0.0), self_.g1);
}

fn flector__add__magnitude(self_: Flector, other: Magnitude) -> MultiVector {
    return MultiVector(other.g0, self_.g0, vec3<f32>(0.0), vec3<f32>(0.0), self_.g1);
}

fn flector__add__motor(self_: Flector, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.w), self_.g0, vec3<f32>(other.g0.x, other.g0.y, other.g0.z), other.g1, self_.g1);
}

fn flector__add__multi_vector(self_: Flector, other: MultiVector) -> MultiVector {
    return MultiVector(other.g0, self_.g0 + other.g1, other.g2, other.g3, self_.g1 + other.g4);
}

fn flector__add__multi_vector_at_infinity(self_: Flector, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(other.g0.x, 0.0), self_.g0 + vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec3<f32>(0.0), other.g2, self_.g1 + vec4<f32>(0.0, 0.0, 0.0, other.g0.y));
}

fn flector__add__multi_vector_at_origin(self_: Flector, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.y), self_.g0 + vec4<f32>(0.0, 0.0, 0.0, other.g0.x), other.g1, vec3<f32>(0.0), self_.g1 + vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0));
}

fn flector__add__origin(self_: Flector, other: Origin) -> Flector {
    return Flector(self_.g0 + vec4<f32>(0.0, 0.0, 0.0, other.g0), self_.g1);
}

fn flector__add__plane(self_: Flector, other: Plane) -> Flector {
    return Flector(self_.g0, self_.g1 + other.g0);
}

fn flector__add__plane_at_origin(self_: Flector, other: PlaneAtOrigin) -> Flector {
    return Flector(self_.g0, self_.g1 + vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn flector__add__point(self_: Flector, other: Point) -> Flector {
    return Flector(self_.g0 + other.g0, self_.g1);
}

fn flector__add__point_at_infinity(self_: Flector, other: PointAtInfinity) -> Flector {
    return Flector(self_.g0 + vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g1);
}

fn flector__add__rotor(self_: Flector, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.w), self_.g0, vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), self_.g1);
}

fn flector__add__scalar(self_: Flector, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(other.g0, 0.0), self_.g0, vec3<f32>(0.0), vec3<f32>(0.0), self_.g1);
}

fn flector__add__transflector(self_: Flector, other: Transflector) -> Flector {
    return Flector(self_.g0 + vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g1 + other.g1);
}

fn flector__add__translator(self_: Flector, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.w), self_.g0, vec3<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g1);
}

fn flector_at_infinity__add__anti_scalar(self_: FlectorAtInfinity, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0, 0.0, 0.0, self_.g0.w));
}

fn flector_at_infinity__add__flector(self_: FlectorAtInfinity, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) + other.g0, vec4<f32>(0.0, 0.0, 0.0, self_.g0.w) + other.g1);
}

fn flector_at_infinity__add__flector_at_infinity(self_: FlectorAtInfinity, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(self_.g0 + other.g0);
}

fn flector_at_infinity__add__horizon(self_: FlectorAtInfinity, other: Horizon) -> FlectorAtInfinity {
    return FlectorAtInfinity(self_.g0 + vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn flector_at_infinity__add__line(self_: FlectorAtInfinity, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), other.g0, other.g1, vec4<f32>(0.0, 0.0, 0.0, self_.g0.w));
}

fn flector_at_infinity__add__line_at_infinity(self_: FlectorAtInfinity, other: LineAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(0.0, self_.g0.w), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), other.g0);
}

fn flector_at_infinity__add__line_at_origin(self_: FlectorAtInfinity, other: LineAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), other.g0, vec3<f32>(0.0), vec4<f32>(0.0, 0.0, 0.0, self_.g0.w));
}

fn flector_at_infinity__add__magnitude(self_: FlectorAtInfinity, other: Magnitude) -> MultiVector {
    return MultiVector(other.g0, vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0, 0.0, 0.0, self_.g0.w));
}

fn flector_at_infinity__add__motor(self_: FlectorAtInfinity, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.w), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), other.g1, vec4<f32>(0.0, 0.0, 0.0, self_.g0.w));
}

fn flector_at_infinity__add__multi_vector(self_: FlectorAtInfinity, other: MultiVector) -> MultiVector {
    return MultiVector(other.g0, vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) + other.g1, other.g2, other.g3, vec4<f32>(0.0, 0.0, 0.0, self_.g0.w) + other.g4);
}

fn flector_at_infinity__add__multi_vector_at_infinity(self_: FlectorAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(0.0, self_.g0.w) + other.g0, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) + other.g1, other.g2);
}

fn flector_at_infinity__add__multi_vector_at_origin(self_: FlectorAtInfinity, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.y), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) + vec4<f32>(0.0, 0.0, 0.0, other.g0.x), other.g1, vec3<f32>(0.0), vec4<f32>(0.0, 0.0, 0.0, self_.g0.w) + vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0));
}

fn flector_at_infinity__add__origin(self_: FlectorAtInfinity, other: Origin) -> Flector {
    return Flector(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) + vec4<f32>(0.0, 0.0, 0.0, other.g0), vec4<f32>(0.0, 0.0, 0.0, self_.g0.w));
}

fn flector_at_infinity__add__plane(self_: FlectorAtInfinity, other: Plane) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec4<f32>(0.0, 0.0, 0.0, self_.g0.w) + other.g0);
}

fn flector_at_infinity__add__plane_at_origin(self_: FlectorAtInfinity, other: PlaneAtOrigin) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec4<f32>(0.0, 0.0, 0.0, self_.g0.w) + vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn flector_at_infinity__add__point(self_: FlectorAtInfinity, other: Point) -> Flector {
    return Flector(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) + other.g0, vec4<f32>(0.0, 0.0, 0.0, self_.g0.w));
}

fn flector_at_infinity__add__point_at_infinity(self_: FlectorAtInfinity, other: PointAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(self_.g0 + vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn flector_at_infinity__add__rotor(self_: FlectorAtInfinity, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.w), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec4<f32>(0.0, 0.0, 0.0, self_.g0.w));
}

fn flector_at_infinity__add__scalar(self_: FlectorAtInfinity, other: Scalar) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(0.0, self_.g0.w) + vec2<f32>(other.g0, 0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0));
}

fn flector_at_infinity__add__transflector(self_: FlectorAtInfinity, other: Transflector) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) + other.g0, vec4<f32>(0.0, 0.0, 0.0, self_.g0.w) + other.g1);
}

fn flector_at_infinity__add__translator(self_: FlectorAtInfinity, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.w), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0, 0.0, 0.0, self_.g0.w));
}

fn horizon__add__anti_scalar(self_: Horizon, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0, 0.0, 0.0, self_.g0));
}

fn horizon__add__flector(self_: Horizon, other: Flector) -> Flector {
    return Flector(other.g0, vec4<f32>(0.0, 0.0, 0.0, self_.g0) + other.g1);
}

fn horizon__add__flector_at_infinity(self_: Horizon, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(0.0, 0.0, 0.0, self_.g0) + other.g0);
}

fn horizon__add__horizon(self_: Horizon, other: Horizon) -> Horizon {
    return Horizon(self_.g0 + other.g0);
}

fn horizon__add__line(self_: Horizon, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0), other.g0, other.g1, vec4<f32>(0.0, 0.0, 0.0, self_.g0));
}

fn horizon__add__line_at_infinity(self_: Horizon, other: LineAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(0.0, self_.g0), vec3<f32>(0.0), other.g0);
}

fn horizon__add__line_at_origin(self_: Horizon, other: LineAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0), other.g0, vec3<f32>(0.0), vec4<f32>(0.0, 0.0, 0.0, self_.g0));
}

fn horizon__add__magnitude(self_: Horizon, other: Magnitude) -> MultiVector {
    return MultiVector(other.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0, 0.0, 0.0, self_.g0));
}

fn horizon__add__motor(self_: Horizon, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.w), vec4<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), other.g1, vec4<f32>(0.0, 0.0, 0.0, self_.g0));
}

fn horizon__add__multi_vector(self_: Horizon, other: MultiVector) -> MultiVector {
    return MultiVector(other.g0, other.g1, other.g2, other.g3, vec4<f32>(0.0, 0.0, 0.0, self_.g0) + other.g4);
}

fn horizon__add__multi_vector_at_infinity(self_: Horizon, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(0.0, self_.g0) + other.g0, other.g1, other.g2);
}

fn horizon__add__multi_vector_at_origin(self_: Horizon, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.y), vec4<f32>(0.0, 0.0, 0.0, other.g0.x), other.g1, vec3<f32>(0.0), vec4<f32>(0.0, 0.0, 0.0, self_.g0) + vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0));
}

fn horizon__add__origin(self_: Horizon, other: Origin) -> Flector {
    return Flector(vec4<f32>(0.0, 0.0, 0.0, other.g0), vec4<f32>(0.0, 0.0, 0.0, self_.g0));
}

fn horizon__add__plane(self_: Horizon, other: Plane) -> Plane {
    return Plane(vec4<f32>(0.0, 0.0, 0.0, self_.g0) + other.g0);
}

fn horizon__add__plane_at_origin(self_: Horizon, other: PlaneAtOrigin) -> Plane {
    return Plane(vec4<f32>(0.0, 0.0, 0.0, self_.g0) + vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn horizon__add__point(self_: Horizon, other: Point) -> Flector {
    return Flector(other.g0, vec4<f32>(0.0, 0.0, 0.0, self_.g0));
}

fn horizon__add__point_at_infinity(self_: Horizon, other: PointAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(0.0, 0.0, 0.0, self_.g0) + vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn horizon__add__rotor(self_: Horizon, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.w), vec4<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec4<f32>(0.0, 0.0, 0.0, self_.g0));
}

fn horizon__add__scalar(self_: Horizon, other: Scalar) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(0.0, self_.g0) + vec2<f32>(other.g0, 0.0), vec3<f32>(0.0), vec3<f32>(0.0));
}

fn horizon__add__transflector(self_: Horizon, other: Transflector) -> Transflector {
    return Transflector(other.g0, vec4<f32>(0.0, 0.0, 0.0, self_.g0) + other.g1);
}

fn horizon__add__translator(self_: Horizon, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.w), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0, 0.0, 0.0, self_.g0));
}

fn line__add__anti_scalar(self_: Line, other: AntiScalar) -> Motor {
    return Motor(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) + vec4<f32>(0.0, 0.0, 0.0, other.g0), self_.g1);
}

fn line__add__flector(self_: Line, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), other.g0, self_.g0, self_.g1, other.g1);
}

fn line__add__flector_at_infinity(self_: Line, other: FlectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g0, self_.g1, vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn line__add__horizon(self_: Line, other: Horizon) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0), self_.g0, self_.g1, vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn line__add__line(self_: Line, other: Line) -> Line {
    return Line(self_.g0 + other.g0, self_.g1 + other.g1);
}

fn line__add__line_at_infinity(self_: Line, other: LineAtInfinity) -> Line {
    return Line(self_.g0, self_.g1 + other.g0);
}

fn line__add__line_at_origin(self_: Line, other: LineAtOrigin) -> Line {
    return Line(self_.g0 + other.g0, self_.g1);
}

fn line__add__magnitude(self_: Line, other: Magnitude) -> MultiVector {
    return MultiVector(other.g0, vec4<f32>(0.0), self_.g0, self_.g1, vec4<f32>(0.0));
}

fn line__add__motor(self_: Line, other: Motor) -> Motor {
    return Motor(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) + other.g0, self_.g1 + other.g1);
}

fn line__add__multi_vector(self_: Line, other: MultiVector) -> MultiVector {
    return MultiVector(other.g0, other.g1, self_.g0 + other.g2, self_.g1 + other.g3, other.g4);
}

fn line__add__multi_vector_at_infinity(self_: Line, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(other.g0.x, 0.0), vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), self_.g0, self_.g1 + other.g2, vec4<f32>(0.0, 0.0, 0.0, other.g0.y));
}

fn line__add__multi_vector_at_origin(self_: Line, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.y), vec4<f32>(0.0, 0.0, 0.0, other.g0.x), self_.g0 + other.g1, self_.g1, vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0));
}

fn line__add__origin(self_: Line, other: Origin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0, 0.0, 0.0, other.g0), self_.g0, self_.g1, vec4<f32>(0.0));
}

fn line__add__plane(self_: Line, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0), self_.g0, self_.g1, other.g0);
}

fn line__add__plane_at_origin(self_: Line, other: PlaneAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0), self_.g0, self_.g1, vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn line__add__point(self_: Line, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), other.g0, self_.g0, self_.g1, vec4<f32>(0.0));
}

fn line__add__point_at_infinity(self_: Line, other: PointAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g0, self_.g1, vec4<f32>(0.0));
}

fn line__add__rotor(self_: Line, other: Rotor) -> Motor {
    return Motor(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) + other.g0, self_.g1);
}

fn line__add__scalar(self_: Line, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(other.g0, 0.0), vec4<f32>(0.0), self_.g0, self_.g1, vec4<f32>(0.0));
}

fn line__add__transflector(self_: Line, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g0, self_.g1, other.g1);
}

fn line__add__translator(self_: Line, other: Translator) -> Motor {
    return Motor(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) + vec4<f32>(0.0, 0.0, 0.0, other.g0.w), self_.g1 + vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn line_at_infinity__add__anti_scalar(self_: LineAtInfinity, other: AntiScalar) -> Translator {
    return Translator(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) + vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn line_at_infinity__add__flector(self_: LineAtInfinity, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), other.g0, vec3<f32>(0.0), self_.g0, other.g1);
}

fn line_at_infinity__add__flector_at_infinity(self_: LineAtInfinity, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(0.0, other.g0.w), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g0);
}

fn line_at_infinity__add__horizon(self_: LineAtInfinity, other: Horizon) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(0.0, other.g0), vec3<f32>(0.0), self_.g0);
}

fn line_at_infinity__add__line(self_: LineAtInfinity, other: Line) -> Line {
    return Line(other.g0, self_.g0 + other.g1);
}

fn line_at_infinity__add__line_at_infinity(self_: LineAtInfinity, other: LineAtInfinity) -> LineAtInfinity {
    return LineAtInfinity(self_.g0 + other.g0);
}

fn line_at_infinity__add__line_at_origin(self_: LineAtInfinity, other: LineAtOrigin) -> Line {
    return Line(other.g0, self_.g0);
}

fn line_at_infinity__add__magnitude(self_: LineAtInfinity, other: Magnitude) -> MultiVector {
    return MultiVector(other.g0, vec4<f32>(0.0), vec3<f32>(0.0), self_.g0, vec4<f32>(0.0));
}

fn line_at_infinity__add__motor(self_: LineAtInfinity, other: Motor) -> Motor {
    return Motor(other.g0, self_.g0 + other.g1);
}

fn line_at_infinity__add__multi_vector(self_: LineAtInfinity, other: MultiVector) -> MultiVector {
    return MultiVector(other.g0, other.g1, other.g2, self_.g0 + other.g3, other.g4);
}

fn line_at_infinity__add__multi_vector_at_infinity(self_: LineAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(other.g0, other.g1, self_.g0 + other.g2);
}

fn line_at_infinity__add__multi_vector_at_origin(self_: LineAtInfinity, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.y), vec4<f32>(0.0, 0.0, 0.0, other.g0.x), other.g1, self_.g0, vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0));
}

fn line_at_infinity__add__origin(self_: LineAtInfinity, other: Origin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0, 0.0, 0.0, other.g0), vec3<f32>(0.0), self_.g0, vec4<f32>(0.0));
}

fn line_at_infinity__add__plane(self_: LineAtInfinity, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), self_.g0, other.g0);
}

fn line_at_infinity__add__plane_at_origin(self_: LineAtInfinity, other: PlaneAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), self_.g0, vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn line_at_infinity__add__point(self_: LineAtInfinity, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), other.g0, vec3<f32>(0.0), self_.g0, vec4<f32>(0.0));
}

fn line_at_infinity__add__point_at_infinity(self_: LineAtInfinity, other: PointAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(0.0), other.g0, self_.g0);
}

fn line_at_infinity__add__rotor(self_: LineAtInfinity, other: Rotor) -> Motor {
    return Motor(other.g0, self_.g0);
}

fn line_at_infinity__add__scalar(self_: LineAtInfinity, other: Scalar) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(other.g0, 0.0), vec3<f32>(0.0), self_.g0);
}

fn line_at_infinity__add__transflector(self_: LineAtInfinity, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(0.0), self_.g0, other.g1);
}

fn line_at_infinity__add__translator(self_: LineAtInfinity, other: Translator) -> Translator {
    return Translator(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) + other.g0);
}

fn line_at_origin__add__anti_scalar(self_: LineAtOrigin, other: AntiScalar) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) + vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn line_at_origin__add__flector(self_: LineAtOrigin, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), other.g0, self_.g0, vec3<f32>(0.0), other.g1);
}

fn line_at_origin__add__flector_at_infinity(self_: LineAtOrigin, other: FlectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g0, vec3<f32>(0.0), vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn line_at_origin__add__horizon(self_: LineAtOrigin, other: Horizon) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0), self_.g0, vec3<f32>(0.0), vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn line_at_origin__add__line(self_: LineAtOrigin, other: Line) -> Line {
    return Line(self_.g0 + other.g0, other.g1);
}

fn line_at_origin__add__line_at_infinity(self_: LineAtOrigin, other: LineAtInfinity) -> Line {
    return Line(self_.g0, other.g0);
}

fn line_at_origin__add__line_at_origin(self_: LineAtOrigin, other: LineAtOrigin) -> LineAtOrigin {
    return LineAtOrigin(self_.g0 + other.g0);
}

fn line_at_origin__add__magnitude(self_: LineAtOrigin, other: Magnitude) -> MultiVector {
    return MultiVector(other.g0, vec4<f32>(0.0), self_.g0, vec3<f32>(0.0), vec4<f32>(0.0));
}

fn line_at_origin__add__motor(self_: LineAtOrigin, other: Motor) -> Motor {
    return Motor(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) + other.g0, other.g1);
}

fn line_at_origin__add__multi_vector(self_: LineAtOrigin, other: MultiVector) -> MultiVector {
    return MultiVector(other.g0, other.g1, self_.g0 + other.g2, other.g3, other.g4);
}

fn line_at_origin__add__multi_vector_at_infinity(self_: LineAtOrigin, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(other.g0.x, 0.0), vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), self_.g0, other.g2, vec4<f32>(0.0, 0.0, 0.0, other.g0.y));
}

fn line_at_origin__add__multi_vector_at_origin(self_: LineAtOrigin, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(other.g0, self_.g0 + other.g1, other.g2);
}

fn line_at_origin__add__origin(self_: LineAtOrigin, other: Origin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(other.g0, 0.0), self_.g0, vec3<f32>(0.0));
}

fn line_at_origin__add__plane(self_: LineAtOrigin, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0), self_.g0, vec3<f32>(0.0), other.g0);
}

fn line_at_origin__add__plane_at_origin(self_: LineAtOrigin, other: PlaneAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(0.0), self_.g0, other.g0);
}

fn line_at_origin__add__point(self_: LineAtOrigin, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), other.g0, self_.g0, vec3<f32>(0.0), vec4<f32>(0.0));
}

fn line_at_origin__add__point_at_infinity(self_: LineAtOrigin, other: PointAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g0, vec3<f32>(0.0), vec4<f32>(0.0));
}

fn line_at_origin__add__rotor(self_: LineAtOrigin, other: Rotor) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) + other.g0);
}

fn line_at_origin__add__scalar(self_: LineAtOrigin, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(other.g0, 0.0), vec4<f32>(0.0), self_.g0, vec3<f32>(0.0), vec4<f32>(0.0));
}

fn line_at_origin__add__transflector(self_: LineAtOrigin, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g0, vec3<f32>(0.0), other.g1);
}

fn line_at_origin__add__translator(self_: LineAtOrigin, other: Translator) -> Motor {
    return Motor(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) + vec4<f32>(0.0, 0.0, 0.0, other.g0.w), vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn magnitude__add__anti_scalar(self_: Magnitude, other: AntiScalar) -> Magnitude {
    return Magnitude(self_.g0 + vec2<f32>(0.0, other.g0));
}

fn magnitude__add__flector(self_: Magnitude, other: Flector) -> MultiVector {
    return MultiVector(self_.g0, other.g0, vec3<f32>(0.0), vec3<f32>(0.0), other.g1);
}

fn magnitude__add__flector_at_infinity(self_: Magnitude, other: FlectorAtInfinity) -> MultiVector {
    return MultiVector(self_.g0, vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn magnitude__add__horizon(self_: Magnitude, other: Horizon) -> MultiVector {
    return MultiVector(self_.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn magnitude__add__line(self_: Magnitude, other: Line) -> MultiVector {
    return MultiVector(self_.g0, vec4<f32>(0.0), other.g0, other.g1, vec4<f32>(0.0));
}

fn magnitude__add__line_at_infinity(self_: Magnitude, other: LineAtInfinity) -> MultiVector {
    return MultiVector(self_.g0, vec4<f32>(0.0), vec3<f32>(0.0), other.g0, vec4<f32>(0.0));
}

fn magnitude__add__line_at_origin(self_: Magnitude, other: LineAtOrigin) -> MultiVector {
    return MultiVector(self_.g0, vec4<f32>(0.0), other.g0, vec3<f32>(0.0), vec4<f32>(0.0));
}

fn magnitude__add__magnitude(self_: Magnitude, other: Magnitude) -> Magnitude {
    return Magnitude(self_.g0 + other.g0);
}

fn magnitude__add__motor(self_: Magnitude, other: Motor) -> MultiVector {
    return MultiVector(self_.g0 + vec2<f32>(0.0, other.g0.w), vec4<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), other.g1, vec4<f32>(0.0));
}

fn magnitude__add__multi_vector(self_: Magnitude, other: MultiVector) -> MultiVector {
    return MultiVector(self_.g0 + other.g0, other.g1, other.g2, other.g3, other.g4);
}

fn magnitude__add__multi_vector_at_infinity(self_: Magnitude, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(self_.g0 + vec2<f32>(other.g0.x, 0.0), vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec3<f32>(0.0), other.g2, vec4<f32>(0.0, 0.0, 0.0, other.g0.y));
}

fn magnitude__add__multi_vector_at_origin(self_: Magnitude, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(self_.g0 + vec2<f32>(0.0, other.g0.y), vec4<f32>(0.0, 0.0, 0.0, other.g0.x), other.g1, vec3<f32>(0.0), vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0));
}

fn magnitude__add__origin(self_: Magnitude, other: Origin) -> MultiVector {
    return MultiVector(self_.g0, vec4<f32>(0.0, 0.0, 0.0, other.g0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn magnitude__add__plane(self_: Magnitude, other: Plane) -> MultiVector {
    return MultiVector(self_.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g0);
}

fn magnitude__add__plane_at_origin(self_: Magnitude, other: PlaneAtOrigin) -> MultiVector {
    return MultiVector(self_.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn magnitude__add__point(self_: Magnitude, other: Point) -> MultiVector {
    return MultiVector(self_.g0, other.g0, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn magnitude__add__point_at_infinity(self_: Magnitude, other: PointAtInfinity) -> MultiVector {
    return MultiVector(self_.g0, vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn magnitude__add__rotor(self_: Magnitude, other: Rotor) -> MultiVector {
    return MultiVector(self_.g0 + vec2<f32>(0.0, other.g0.w), vec4<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn magnitude__add__scalar(self_: Magnitude, other: Scalar) -> Magnitude {
    return Magnitude(self_.g0 + vec2<f32>(other.g0, 0.0));
}

fn magnitude__add__transflector(self_: Magnitude, other: Transflector) -> MultiVector {
    return MultiVector(self_.g0, vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g1);
}

fn magnitude__add__translator(self_: Magnitude, other: Translator) -> MultiVector {
    return MultiVector(self_.g0 + vec2<f32>(0.0, other.g0.w), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn motor__add__anti_scalar(self_: Motor, other: AntiScalar) -> Motor {
    return Motor(self_.g0 + vec4<f32>(0.0, 0.0, 0.0, other.g0), self_.g1);
}

fn motor__add__flector(self_: Motor, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), other.g0, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), self_.g1, other.g1);
}

fn motor__add__flector_at_infinity(self_: Motor, other: FlectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), self_.g1, vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn motor__add__horizon(self_: Motor, other: Horizon) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), self_.g1, vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn motor__add__line(self_: Motor, other: Line) -> Motor {
    return Motor(self_.g0 + vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g1 + other.g1);
}

fn motor__add__line_at_infinity(self_: Motor, other: LineAtInfinity) -> Motor {
    return Motor(self_.g0, self_.g1 + other.g0);
}

fn motor__add__line_at_origin(self_: Motor, other: LineAtOrigin) -> Motor {
    return Motor(self_.g0 + vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g1);
}

fn motor__add__magnitude(self_: Motor, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w) + other.g0, vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), self_.g1, vec4<f32>(0.0));
}

fn motor__add__motor(self_: Motor, other: Motor) -> Motor {
    return Motor(self_.g0 + other.g0, self_.g1 + other.g1);
}

fn motor__add__multi_vector(self_: Motor, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w) + other.g0, other.g1, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) + other.g2, self_.g1 + other.g3, other.g4);
}

fn motor__add__multi_vector_at_infinity(self_: Motor, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w) + vec2<f32>(other.g0.x, 0.0), vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), self_.g1 + other.g2, vec4<f32>(0.0, 0.0, 0.0, other.g0.y));
}

fn motor__add__multi_vector_at_origin(self_: Motor, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w) + vec2<f32>(0.0, other.g0.y), vec4<f32>(0.0, 0.0, 0.0, other.g0.x), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) + other.g1, self_.g1, vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0));
}

fn motor__add__origin(self_: Motor, other: Origin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec4<f32>(0.0, 0.0, 0.0, other.g0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), self_.g1, vec4<f32>(0.0));
}

fn motor__add__plane(self_: Motor, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), self_.g1, other.g0);
}

fn motor__add__plane_at_origin(self_: Motor, other: PlaneAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), self_.g1, vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn motor__add__point(self_: Motor, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), other.g0, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), self_.g1, vec4<f32>(0.0));
}

fn motor__add__point_at_infinity(self_: Motor, other: PointAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), self_.g1, vec4<f32>(0.0));
}

fn motor__add__rotor(self_: Motor, other: Rotor) -> Motor {
    return Motor(self_.g0 + other.g0, self_.g1);
}

fn motor__add__scalar(self_: Motor, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w) + vec2<f32>(other.g0, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), self_.g1, vec4<f32>(0.0));
}

fn motor__add__transflector(self_: Motor, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), self_.g1, other.g1);
}

fn motor__add__translator(self_: Motor, other: Translator) -> Motor {
    return Motor(self_.g0 + vec4<f32>(0.0, 0.0, 0.0, other.g0.w), self_.g1 + vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn multi_vector__add__anti_scalar(self_: MultiVector, other: AntiScalar) -> MultiVector {
    return MultiVector(self_.g0 + vec2<f32>(0.0, other.g0), self_.g1, self_.g2, self_.g3, self_.g4);
}

fn multi_vector__add__flector(self_: MultiVector, other: Flector) -> MultiVector {
    return MultiVector(self_.g0, self_.g1 + other.g0, self_.g2, self_.g3, self_.g4 + other.g1);
}

fn multi_vector__add__flector_at_infinity(self_: MultiVector, other: FlectorAtInfinity) -> MultiVector {
    return MultiVector(self_.g0, self_.g1 + vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g2, self_.g3, self_.g4 + vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn multi_vector__add__horizon(self_: MultiVector, other: Horizon) -> MultiVector {
    return MultiVector(self_.g0, self_.g1, self_.g2, self_.g3, self_.g4 + vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn multi_vector__add__line(self_: MultiVector, other: Line) -> MultiVector {
    return MultiVector(self_.g0, self_.g1, self_.g2 + other.g0, self_.g3 + other.g1, self_.g4);
}

fn multi_vector__add__line_at_infinity(self_: MultiVector, other: LineAtInfinity) -> MultiVector {
    return MultiVector(self_.g0, self_.g1, self_.g2, self_.g3 + other.g0, self_.g4);
}

fn multi_vector__add__line_at_origin(self_: MultiVector, other: LineAtOrigin) -> MultiVector {
    return MultiVector(self_.g0, self_.g1, self_.g2 + other.g0, self_.g3, self_.g4);
}

fn multi_vector__add__magnitude(self_: MultiVector, other: Magnitude) -> MultiVector {
    return MultiVector(self_.g0 + other.g0, self_.g1, self_.g2, self_.g3, self_.g4);
}

fn multi_vector__add__motor(self_: MultiVector, other: Motor) -> MultiVector {
    return MultiVector(self_.g0 + vec2<f32>(0.0, other.g0.w), self_.g1, self_.g2 + vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g3 + other.g1, self_.g4);
}

fn multi_vector__add__multi_vector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return MultiVector(self_.g0 + other.g0, self_.g1 + other.g1, self_.g2 + other.g2, self_.g3 + other.g3, self_.g4 + other.g4);
}

fn multi_vector__add__multi_vector_at_infinity(self_: MultiVector, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(self_.g0 + vec2<f32>(other.g0.x, 0.0), self_.g1 + vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), self_.g2, self_.g3 + other.g2, self_.g4 + vec4<f32>(0.0, 0.0, 0.0, other.g0.y));
}

fn multi_vector__add__multi_vector_at_origin(self_: MultiVector, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(self_.g0 + vec2<f32>(0.0, other.g0.y), self_.g1 + vec4<f32>(0.0, 0.0, 0.0, other.g0.x), self_.g2 + other.g1, self_.g3, self_.g4 + vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0));
}

fn multi_vector__add__origin(self_: MultiVector, other: Origin) -> MultiVector {
    return MultiVector(self_.g0, self_.g1 + vec4<f32>(0.0, 0.0, 0.0, other.g0), self_.g2, self_.g3, self_.g4);
}

fn multi_vector__add__plane(self_: MultiVector, other: Plane) -> MultiVector {
    return MultiVector(self_.g0, self_.g1, self_.g2, self_.g3, self_.g4 + other.g0);
}

fn multi_vector__add__plane_at_origin(self_: MultiVector, other: PlaneAtOrigin) -> MultiVector {
    return MultiVector(self_.g0, self_.g1, self_.g2, self_.g3, self_.g4 + vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn multi_vector__add__point(self_: MultiVector, other: Point) -> MultiVector {
    return MultiVector(self_.g0, self_.g1 + other.g0, self_.g2, self_.g3, self_.g4);
}

fn multi_vector__add__point_at_infinity(self_: MultiVector, other: PointAtInfinity) -> MultiVector {
    return MultiVector(self_.g0, self_.g1 + vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g2, self_.g3, self_.g4);
}

fn multi_vector__add__rotor(self_: MultiVector, other: Rotor) -> MultiVector {
    return MultiVector(self_.g0 + vec2<f32>(0.0, other.g0.w), self_.g1, self_.g2 + vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g3, self_.g4);
}

fn multi_vector__add__scalar(self_: MultiVector, other: Scalar) -> MultiVector {
    return MultiVector(self_.g0 + vec2<f32>(other.g0, 0.0), self_.g1, self_.g2, self_.g3, self_.g4);
}

fn multi_vector__add__transflector(self_: MultiVector, other: Transflector) -> MultiVector {
    return MultiVector(self_.g0, self_.g1 + vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g2, self_.g3, self_.g4 + other.g1);
}

fn multi_vector__add__translator(self_: MultiVector, other: Translator) -> MultiVector {
    return MultiVector(self_.g0 + vec2<f32>(0.0, other.g0.w), self_.g1, self_.g2, self_.g3 + vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g4);
}

fn multi_vector_at_infinity__add__anti_scalar(self_: MultiVectorAtInfinity, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x, 0.0) + vec2<f32>(0.0, other.g0), vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, 0.0), vec3<f32>(0.0), self_.g2, vec4<f32>(0.0, 0.0, 0.0, self_.g0.y));
}

fn multi_vector_at_infinity__add__flector(self_: MultiVectorAtInfinity, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x, 0.0), vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, 0.0) + other.g0, vec3<f32>(0.0), self_.g2, vec4<f32>(0.0, 0.0, 0.0, self_.g0.y) + other.g1);
}

fn multi_vector_at_infinity__add__flector_at_infinity(self_: MultiVectorAtInfinity, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0 + vec2<f32>(0.0, other.g0.w), self_.g1 + vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g2);
}

fn multi_vector_at_infinity__add__horizon(self_: MultiVectorAtInfinity, other: Horizon) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0 + vec2<f32>(0.0, other.g0), self_.g1, self_.g2);
}

fn multi_vector_at_infinity__add__line(self_: MultiVectorAtInfinity, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x, 0.0), vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, 0.0), other.g0, self_.g2 + other.g1, vec4<f32>(0.0, 0.0, 0.0, self_.g0.y));
}

fn multi_vector_at_infinity__add__line_at_infinity(self_: MultiVectorAtInfinity, other: LineAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0, self_.g1, self_.g2 + other.g0);
}

fn multi_vector_at_infinity__add__line_at_origin(self_: MultiVectorAtInfinity, other: LineAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x, 0.0), vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, 0.0), other.g0, self_.g2, vec4<f32>(0.0, 0.0, 0.0, self_.g0.y));
}

fn multi_vector_at_infinity__add__magnitude(self_: MultiVectorAtInfinity, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x, 0.0) + other.g0, vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, 0.0), vec3<f32>(0.0), self_.g2, vec4<f32>(0.0, 0.0, 0.0, self_.g0.y));
}

fn multi_vector_at_infinity__add__motor(self_: MultiVectorAtInfinity, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x, 0.0) + vec2<f32>(0.0, other.g0.w), vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, 0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g2 + other.g1, vec4<f32>(0.0, 0.0, 0.0, self_.g0.y));
}

fn multi_vector_at_infinity__add__multi_vector(self_: MultiVectorAtInfinity, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x, 0.0) + other.g0, vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, 0.0) + other.g1, other.g2, self_.g2 + other.g3, vec4<f32>(0.0, 0.0, 0.0, self_.g0.y) + other.g4);
}

fn multi_vector_at_infinity__add__multi_vector_at_infinity(self_: MultiVectorAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0 + other.g0, self_.g1 + other.g1, self_.g2 + other.g2);
}

fn multi_vector_at_infinity__add__multi_vector_at_origin(self_: MultiVectorAtInfinity, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x, 0.0) + vec2<f32>(0.0, other.g0.y), vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, 0.0) + vec4<f32>(0.0, 0.0, 0.0, other.g0.x), other.g1, self_.g2, vec4<f32>(0.0, 0.0, 0.0, self_.g0.y) + vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0));
}

fn multi_vector_at_infinity__add__origin(self_: MultiVectorAtInfinity, other: Origin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x, 0.0), vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, 0.0) + vec4<f32>(0.0, 0.0, 0.0, other.g0), vec3<f32>(0.0), self_.g2, vec4<f32>(0.0, 0.0, 0.0, self_.g0.y));
}

fn multi_vector_at_infinity__add__plane(self_: MultiVectorAtInfinity, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x, 0.0), vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, 0.0), vec3<f32>(0.0), self_.g2, vec4<f32>(0.0, 0.0, 0.0, self_.g0.y) + other.g0);
}

fn multi_vector_at_infinity__add__plane_at_origin(self_: MultiVectorAtInfinity, other: PlaneAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x, 0.0), vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, 0.0), vec3<f32>(0.0), self_.g2, vec4<f32>(0.0, 0.0, 0.0, self_.g0.y) + vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn multi_vector_at_infinity__add__point(self_: MultiVectorAtInfinity, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x, 0.0), vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, 0.0) + other.g0, vec3<f32>(0.0), self_.g2, vec4<f32>(0.0, 0.0, 0.0, self_.g0.y));
}

fn multi_vector_at_infinity__add__point_at_infinity(self_: MultiVectorAtInfinity, other: PointAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0, self_.g1 + other.g0, self_.g2);
}

fn multi_vector_at_infinity__add__rotor(self_: MultiVectorAtInfinity, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x, 0.0) + vec2<f32>(0.0, other.g0.w), vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, 0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g2, vec4<f32>(0.0, 0.0, 0.0, self_.g0.y));
}

fn multi_vector_at_infinity__add__scalar(self_: MultiVectorAtInfinity, other: Scalar) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0 + vec2<f32>(other.g0, 0.0), self_.g1, self_.g2);
}

fn multi_vector_at_infinity__add__transflector(self_: MultiVectorAtInfinity, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x, 0.0), vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, 0.0) + vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(0.0), self_.g2, vec4<f32>(0.0, 0.0, 0.0, self_.g0.y) + other.g1);
}

fn multi_vector_at_infinity__add__translator(self_: MultiVectorAtInfinity, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x, 0.0) + vec2<f32>(0.0, other.g0.w), vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, 0.0), vec3<f32>(0.0), self_.g2 + vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0, 0.0, 0.0, self_.g0.y));
}

fn multi_vector_at_origin__add__anti_scalar(self_: MultiVectorAtOrigin, other: AntiScalar) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0 + vec2<f32>(0.0, other.g0), self_.g1, self_.g2);
}

fn multi_vector_at_origin__add__flector(self_: MultiVectorAtOrigin, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.y), vec4<f32>(0.0, 0.0, 0.0, self_.g0.x) + other.g0, self_.g1, vec3<f32>(0.0), vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, 0.0) + other.g1);
}

fn multi_vector_at_origin__add__flector_at_infinity(self_: MultiVectorAtOrigin, other: FlectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.y), vec4<f32>(0.0, 0.0, 0.0, self_.g0.x) + vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g1, vec3<f32>(0.0), vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, 0.0) + vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn multi_vector_at_origin__add__horizon(self_: MultiVectorAtOrigin, other: Horizon) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.y), vec4<f32>(0.0, 0.0, 0.0, self_.g0.x), self_.g1, vec3<f32>(0.0), vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, 0.0) + vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn multi_vector_at_origin__add__line(self_: MultiVectorAtOrigin, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.y), vec4<f32>(0.0, 0.0, 0.0, self_.g0.x), self_.g1 + other.g0, other.g1, vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, 0.0));
}

fn multi_vector_at_origin__add__line_at_infinity(self_: MultiVectorAtOrigin, other: LineAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.y), vec4<f32>(0.0, 0.0, 0.0, self_.g0.x), self_.g1, other.g0, vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, 0.0));
}

fn multi_vector_at_origin__add__line_at_origin(self_: MultiVectorAtOrigin, other: LineAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0, self_.g1 + other.g0, self_.g2);
}

fn multi_vector_at_origin__add__magnitude(self_: MultiVectorAtOrigin, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.y) + other.g0, vec4<f32>(0.0, 0.0, 0.0, self_.g0.x), self_.g1, vec3<f32>(0.0), vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, 0.0));
}

fn multi_vector_at_origin__add__motor(self_: MultiVectorAtOrigin, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.y) + vec2<f32>(0.0, other.g0.w), vec4<f32>(0.0, 0.0, 0.0, self_.g0.x), self_.g1 + vec3<f32>(other.g0.x, other.g0.y, other.g0.z), other.g1, vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, 0.0));
}

fn multi_vector_at_origin__add__multi_vector(self_: MultiVectorAtOrigin, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.y) + other.g0, vec4<f32>(0.0, 0.0, 0.0, self_.g0.x) + other.g1, self_.g1 + other.g2, other.g3, vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, 0.0) + other.g4);
}

fn multi_vector_at_origin__add__multi_vector_at_infinity(self_: MultiVectorAtOrigin, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.y) + vec2<f32>(other.g0.x, 0.0), vec4<f32>(0.0, 0.0, 0.0, self_.g0.x) + vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), self_.g1, other.g2, vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, 0.0) + vec4<f32>(0.0, 0.0, 0.0, other.g0.y));
}

fn multi_vector_at_origin__add__multi_vector_at_origin(self_: MultiVectorAtOrigin, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0 + other.g0, self_.g1 + other.g1, self_.g2 + other.g2);
}

fn multi_vector_at_origin__add__origin(self_: MultiVectorAtOrigin, other: Origin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0 + vec2<f32>(other.g0, 0.0), self_.g1, self_.g2);
}

fn multi_vector_at_origin__add__plane(self_: MultiVectorAtOrigin, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.y), vec4<f32>(0.0, 0.0, 0.0, self_.g0.x), self_.g1, vec3<f32>(0.0), vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, 0.0) + other.g0);
}

fn multi_vector_at_origin__add__plane_at_origin(self_: MultiVectorAtOrigin, other: PlaneAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0, self_.g1, self_.g2 + other.g0);
}

fn multi_vector_at_origin__add__point(self_: MultiVectorAtOrigin, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.y), vec4<f32>(0.0, 0.0, 0.0, self_.g0.x) + other.g0, self_.g1, vec3<f32>(0.0), vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, 0.0));
}

fn multi_vector_at_origin__add__point_at_infinity(self_: MultiVectorAtOrigin, other: PointAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.y), vec4<f32>(0.0, 0.0, 0.0, self_.g0.x) + vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g1, vec3<f32>(0.0), vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, 0.0));
}

fn multi_vector_at_origin__add__rotor(self_: MultiVectorAtOrigin, other: Rotor) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0 + vec2<f32>(0.0, other.g0.w), self_.g1 + vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g2);
}

fn multi_vector_at_origin__add__scalar(self_: MultiVectorAtOrigin, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.y) + vec2<f32>(other.g0, 0.0), vec4<f32>(0.0, 0.0, 0.0, self_.g0.x), self_.g1, vec3<f32>(0.0), vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, 0.0));
}

fn multi_vector_at_origin__add__transflector(self_: MultiVectorAtOrigin, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.y), vec4<f32>(0.0, 0.0, 0.0, self_.g0.x) + vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g1, vec3<f32>(0.0), vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, 0.0) + other.g1);
}

fn multi_vector_at_origin__add__translator(self_: MultiVectorAtOrigin, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.y) + vec2<f32>(0.0, other.g0.w), vec4<f32>(0.0, 0.0, 0.0, self_.g0.x), self_.g1, vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, 0.0));
}

fn origin__add__anti_scalar(self_: Origin, other: AntiScalar) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0, 0.0) + vec2<f32>(0.0, other.g0), vec3<f32>(0.0), vec3<f32>(0.0));
}

fn origin__add__flector(self_: Origin, other: Flector) -> Flector {
    return Flector(vec4<f32>(0.0, 0.0, 0.0, self_.g0) + other.g0, other.g1);
}

fn origin__add__flector_at_infinity(self_: Origin, other: FlectorAtInfinity) -> Flector {
    return Flector(vec4<f32>(0.0, 0.0, 0.0, self_.g0) + vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn origin__add__horizon(self_: Origin, other: Horizon) -> Flector {
    return Flector(vec4<f32>(0.0, 0.0, 0.0, self_.g0), vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn origin__add__line(self_: Origin, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0, 0.0, 0.0, self_.g0), other.g0, other.g1, vec4<f32>(0.0));
}

fn origin__add__line_at_infinity(self_: Origin, other: LineAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0, 0.0, 0.0, self_.g0), vec3<f32>(0.0), other.g0, vec4<f32>(0.0));
}

fn origin__add__line_at_origin(self_: Origin, other: LineAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0, 0.0), other.g0, vec3<f32>(0.0));
}

fn origin__add__magnitude(self_: Origin, other: Magnitude) -> MultiVector {
    return MultiVector(other.g0, vec4<f32>(0.0, 0.0, 0.0, self_.g0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn origin__add__motor(self_: Origin, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.w), vec4<f32>(0.0, 0.0, 0.0, self_.g0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), other.g1, vec4<f32>(0.0));
}

fn origin__add__multi_vector(self_: Origin, other: MultiVector) -> MultiVector {
    return MultiVector(other.g0, vec4<f32>(0.0, 0.0, 0.0, self_.g0) + other.g1, other.g2, other.g3, other.g4);
}

fn origin__add__multi_vector_at_infinity(self_: Origin, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(other.g0.x, 0.0), vec4<f32>(0.0, 0.0, 0.0, self_.g0) + vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec3<f32>(0.0), other.g2, vec4<f32>(0.0, 0.0, 0.0, other.g0.y));
}

fn origin__add__multi_vector_at_origin(self_: Origin, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0, 0.0) + other.g0, other.g1, other.g2);
}

fn origin__add__origin(self_: Origin, other: Origin) -> Origin {
    return Origin(self_.g0 + other.g0);
}

fn origin__add__plane(self_: Origin, other: Plane) -> Flector {
    return Flector(vec4<f32>(0.0, 0.0, 0.0, self_.g0), other.g0);
}

fn origin__add__plane_at_origin(self_: Origin, other: PlaneAtOrigin) -> Flector {
    return Flector(vec4<f32>(0.0, 0.0, 0.0, self_.g0), vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn origin__add__point(self_: Origin, other: Point) -> Point {
    return Point(vec4<f32>(0.0, 0.0, 0.0, self_.g0) + other.g0);
}

fn origin__add__point_at_infinity(self_: Origin, other: PointAtInfinity) -> Point {
    return Point(vec4<f32>(0.0, 0.0, 0.0, self_.g0) + vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn origin__add__rotor(self_: Origin, other: Rotor) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0, 0.0) + vec2<f32>(0.0, other.g0.w), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0));
}

fn origin__add__scalar(self_: Origin, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(other.g0, 0.0), vec4<f32>(0.0, 0.0, 0.0, self_.g0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn origin__add__transflector(self_: Origin, other: Transflector) -> Flector {
    return Flector(vec4<f32>(0.0, 0.0, 0.0, self_.g0) + vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), other.g1);
}

fn origin__add__translator(self_: Origin, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.w), vec4<f32>(0.0, 0.0, 0.0, self_.g0), vec3<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn plane__add__anti_scalar(self_: Plane, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0);
}

fn plane__add__flector(self_: Plane, other: Flector) -> Flector {
    return Flector(other.g0, self_.g0 + other.g1);
}

fn plane__add__flector_at_infinity(self_: Plane, other: FlectorAtInfinity) -> Transflector {
    return Transflector(vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g0 + vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn plane__add__horizon(self_: Plane, other: Horizon) -> Plane {
    return Plane(self_.g0 + vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn plane__add__line(self_: Plane, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0), other.g0, other.g1, self_.g0);
}

fn plane__add__line_at_infinity(self_: Plane, other: LineAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), other.g0, self_.g0);
}

fn plane__add__line_at_origin(self_: Plane, other: LineAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0), other.g0, vec3<f32>(0.0), self_.g0);
}

fn plane__add__magnitude(self_: Plane, other: Magnitude) -> MultiVector {
    return MultiVector(other.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0);
}

fn plane__add__motor(self_: Plane, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.w), vec4<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), other.g1, self_.g0);
}

fn plane__add__multi_vector(self_: Plane, other: MultiVector) -> MultiVector {
    return MultiVector(other.g0, other.g1, other.g2, other.g3, self_.g0 + other.g4);
}

fn plane__add__multi_vector_at_infinity(self_: Plane, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(other.g0.x, 0.0), vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec3<f32>(0.0), other.g2, self_.g0 + vec4<f32>(0.0, 0.0, 0.0, other.g0.y));
}

fn plane__add__multi_vector_at_origin(self_: Plane, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.y), vec4<f32>(0.0, 0.0, 0.0, other.g0.x), other.g1, vec3<f32>(0.0), self_.g0 + vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0));
}

fn plane__add__origin(self_: Plane, other: Origin) -> Flector {
    return Flector(vec4<f32>(0.0, 0.0, 0.0, other.g0), self_.g0);
}

fn plane__add__plane(self_: Plane, other: Plane) -> Plane {
    return Plane(self_.g0 + other.g0);
}

fn plane__add__plane_at_origin(self_: Plane, other: PlaneAtOrigin) -> Plane {
    return Plane(self_.g0 + vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn plane__add__point(self_: Plane, other: Point) -> Flector {
    return Flector(other.g0, self_.g0);
}

fn plane__add__point_at_infinity(self_: Plane, other: PointAtInfinity) -> Transflector {
    return Transflector(other.g0, self_.g0);
}

fn plane__add__rotor(self_: Plane, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.w), vec4<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), self_.g0);
}

fn plane__add__scalar(self_: Plane, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(other.g0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0);
}

fn plane__add__transflector(self_: Plane, other: Transflector) -> Transflector {
    return Transflector(other.g0, self_.g0 + other.g1);
}

fn plane__add__translator(self_: Plane, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.w), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g0);
}

fn plane_at_origin__add__anti_scalar(self_: PlaneAtOrigin, other: AntiScalar) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(0.0, other.g0), vec3<f32>(0.0), self_.g0);
}

fn plane_at_origin__add__flector(self_: PlaneAtOrigin, other: Flector) -> Flector {
    return Flector(other.g0, vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) + other.g1);
}

fn plane_at_origin__add__flector_at_infinity(self_: PlaneAtOrigin, other: FlectorAtInfinity) -> Transflector {
    return Transflector(vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) + vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn plane_at_origin__add__horizon(self_: PlaneAtOrigin, other: Horizon) -> Plane {
    return Plane(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) + vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn plane_at_origin__add__line(self_: PlaneAtOrigin, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0), other.g0, other.g1, vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0));
}

fn plane_at_origin__add__line_at_infinity(self_: PlaneAtOrigin, other: LineAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), other.g0, vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0));
}

fn plane_at_origin__add__line_at_origin(self_: PlaneAtOrigin, other: LineAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(0.0), other.g0, self_.g0);
}

fn plane_at_origin__add__magnitude(self_: PlaneAtOrigin, other: Magnitude) -> MultiVector {
    return MultiVector(other.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0));
}

fn plane_at_origin__add__motor(self_: PlaneAtOrigin, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.w), vec4<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), other.g1, vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0));
}

fn plane_at_origin__add__multi_vector(self_: PlaneAtOrigin, other: MultiVector) -> MultiVector {
    return MultiVector(other.g0, other.g1, other.g2, other.g3, vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) + other.g4);
}

fn plane_at_origin__add__multi_vector_at_infinity(self_: PlaneAtOrigin, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(other.g0.x, 0.0), vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec3<f32>(0.0), other.g2, vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) + vec4<f32>(0.0, 0.0, 0.0, other.g0.y));
}

fn plane_at_origin__add__multi_vector_at_origin(self_: PlaneAtOrigin, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(other.g0, other.g1, self_.g0 + other.g2);
}

fn plane_at_origin__add__origin(self_: PlaneAtOrigin, other: Origin) -> Flector {
    return Flector(vec4<f32>(0.0, 0.0, 0.0, other.g0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0));
}

fn plane_at_origin__add__plane(self_: PlaneAtOrigin, other: Plane) -> Plane {
    return Plane(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) + other.g0);
}

fn plane_at_origin__add__plane_at_origin(self_: PlaneAtOrigin, other: PlaneAtOrigin) -> PlaneAtOrigin {
    return PlaneAtOrigin(self_.g0 + other.g0);
}

fn plane_at_origin__add__point(self_: PlaneAtOrigin, other: Point) -> Flector {
    return Flector(other.g0, vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0));
}

fn plane_at_origin__add__point_at_infinity(self_: PlaneAtOrigin, other: PointAtInfinity) -> Transflector {
    return Transflector(other.g0, vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0));
}

fn plane_at_origin__add__rotor(self_: PlaneAtOrigin, other: Rotor) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(0.0, other.g0.w), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g0);
}

fn plane_at_origin__add__scalar(self_: PlaneAtOrigin, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(other.g0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0));
}

fn plane_at_origin__add__transflector(self_: PlaneAtOrigin, other: Transflector) -> Transflector {
    return Transflector(other.g0, vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) + other.g1);
}

fn plane_at_origin__add__translator(self_: PlaneAtOrigin, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.w), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0));
}

fn point__add__anti_scalar(self_: Point, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0), self_.g0, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn point__add__flector(self_: Point, other: Flector) -> Flector {
    return Flector(self_.g0 + other.g0, other.g1);
}

fn point__add__flector_at_infinity(self_: Point, other: FlectorAtInfinity) -> Flector {
    return Flector(self_.g0 + vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn point__add__horizon(self_: Point, other: Horizon) -> Flector {
    return Flector(self_.g0, vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn point__add__line(self_: Point, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0, other.g0, other.g1, vec4<f32>(0.0));
}

fn point__add__line_at_infinity(self_: Point, other: LineAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0, vec3<f32>(0.0), other.g0, vec4<f32>(0.0));
}

fn point__add__line_at_origin(self_: Point, other: LineAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0, other.g0, vec3<f32>(0.0), vec4<f32>(0.0));
}

fn point__add__magnitude(self_: Point, other: Magnitude) -> MultiVector {
    return MultiVector(other.g0, self_.g0, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn point__add__motor(self_: Point, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.w), self_.g0, vec3<f32>(other.g0.x, other.g0.y, other.g0.z), other.g1, vec4<f32>(0.0));
}

fn point__add__multi_vector(self_: Point, other: MultiVector) -> MultiVector {
    return MultiVector(other.g0, self_.g0 + other.g1, other.g2, other.g3, other.g4);
}

fn point__add__multi_vector_at_infinity(self_: Point, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(other.g0.x, 0.0), self_.g0 + vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec3<f32>(0.0), other.g2, vec4<f32>(0.0, 0.0, 0.0, other.g0.y));
}

fn point__add__multi_vector_at_origin(self_: Point, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.y), self_.g0 + vec4<f32>(0.0, 0.0, 0.0, other.g0.x), other.g1, vec3<f32>(0.0), vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0));
}

fn point__add__origin(self_: Point, other: Origin) -> Point {
    return Point(self_.g0 + vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn point__add__plane(self_: Point, other: Plane) -> Flector {
    return Flector(self_.g0, other.g0);
}

fn point__add__plane_at_origin(self_: Point, other: PlaneAtOrigin) -> Flector {
    return Flector(self_.g0, vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn point__add__point(self_: Point, other: Point) -> Point {
    return Point(self_.g0 + other.g0);
}

fn point__add__point_at_infinity(self_: Point, other: PointAtInfinity) -> Point {
    return Point(self_.g0 + vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn point__add__rotor(self_: Point, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.w), self_.g0, vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn point__add__scalar(self_: Point, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(other.g0, 0.0), self_.g0, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn point__add__transflector(self_: Point, other: Transflector) -> Flector {
    return Flector(self_.g0 + vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), other.g1);
}

fn point__add__translator(self_: Point, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.w), self_.g0, vec3<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn point_at_infinity__add__anti_scalar(self_: PointAtInfinity, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn point_at_infinity__add__flector(self_: PointAtInfinity, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) + other.g0, other.g1);
}

fn point_at_infinity__add__flector_at_infinity(self_: PointAtInfinity, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) + other.g0);
}

fn point_at_infinity__add__horizon(self_: PointAtInfinity, other: Horizon) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) + vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn point_at_infinity__add__line(self_: PointAtInfinity, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), other.g0, other.g1, vec4<f32>(0.0));
}

fn point_at_infinity__add__line_at_infinity(self_: PointAtInfinity, other: LineAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(0.0), self_.g0, other.g0);
}

fn point_at_infinity__add__line_at_origin(self_: PointAtInfinity, other: LineAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), other.g0, vec3<f32>(0.0), vec4<f32>(0.0));
}

fn point_at_infinity__add__magnitude(self_: PointAtInfinity, other: Magnitude) -> MultiVector {
    return MultiVector(other.g0, vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn point_at_infinity__add__motor(self_: PointAtInfinity, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.w), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), other.g1, vec4<f32>(0.0));
}

fn point_at_infinity__add__multi_vector(self_: PointAtInfinity, other: MultiVector) -> MultiVector {
    return MultiVector(other.g0, vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) + other.g1, other.g2, other.g3, other.g4);
}

fn point_at_infinity__add__multi_vector_at_infinity(self_: PointAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(other.g0, self_.g0 + other.g1, other.g2);
}

fn point_at_infinity__add__multi_vector_at_origin(self_: PointAtInfinity, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.y), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) + vec4<f32>(0.0, 0.0, 0.0, other.g0.x), other.g1, vec3<f32>(0.0), vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0));
}

fn point_at_infinity__add__origin(self_: PointAtInfinity, other: Origin) -> Point {
    return Point(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) + vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn point_at_infinity__add__plane(self_: PointAtInfinity, other: Plane) -> Transflector {
    return Transflector(self_.g0, other.g0);
}

fn point_at_infinity__add__plane_at_origin(self_: PointAtInfinity, other: PlaneAtOrigin) -> Transflector {
    return Transflector(self_.g0, vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn point_at_infinity__add__point(self_: PointAtInfinity, other: Point) -> Point {
    return Point(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) + other.g0);
}

fn point_at_infinity__add__point_at_infinity(self_: PointAtInfinity, other: PointAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(self_.g0 + other.g0);
}

fn point_at_infinity__add__rotor(self_: PointAtInfinity, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.w), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn point_at_infinity__add__scalar(self_: PointAtInfinity, other: Scalar) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(other.g0, 0.0), self_.g0, vec3<f32>(0.0));
}

fn point_at_infinity__add__transflector(self_: PointAtInfinity, other: Transflector) -> Transflector {
    return Transflector(self_.g0 + other.g0, other.g1);
}

fn point_at_infinity__add__translator(self_: PointAtInfinity, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.w), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn rotor__add__anti_scalar(self_: Rotor, other: AntiScalar) -> Rotor {
    return Rotor(self_.g0 + vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn rotor__add__flector(self_: Rotor, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), other.g0, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), other.g1);
}

fn rotor__add__flector_at_infinity(self_: Rotor, other: FlectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn rotor__add__horizon(self_: Rotor, other: Horizon) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn rotor__add__line(self_: Rotor, other: Line) -> Motor {
    return Motor(self_.g0 + vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), other.g1);
}

fn rotor__add__line_at_infinity(self_: Rotor, other: LineAtInfinity) -> Motor {
    return Motor(self_.g0, other.g0);
}

fn rotor__add__line_at_origin(self_: Rotor, other: LineAtOrigin) -> Rotor {
    return Rotor(self_.g0 + vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn rotor__add__magnitude(self_: Rotor, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w) + other.g0, vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn rotor__add__motor(self_: Rotor, other: Motor) -> Motor {
    return Motor(self_.g0 + other.g0, other.g1);
}

fn rotor__add__multi_vector(self_: Rotor, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w) + other.g0, other.g1, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) + other.g2, other.g3, other.g4);
}

fn rotor__add__multi_vector_at_infinity(self_: Rotor, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w) + vec2<f32>(other.g0.x, 0.0), vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), other.g2, vec4<f32>(0.0, 0.0, 0.0, other.g0.y));
}

fn rotor__add__multi_vector_at_origin(self_: Rotor, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(0.0, self_.g0.w) + other.g0, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) + other.g1, other.g2);
}

fn rotor__add__origin(self_: Rotor, other: Origin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(0.0, self_.g0.w) + vec2<f32>(other.g0, 0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0));
}

fn rotor__add__plane(self_: Rotor, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), other.g0);
}

fn rotor__add__plane_at_origin(self_: Rotor, other: PlaneAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(0.0, self_.g0.w), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), other.g0);
}

fn rotor__add__point(self_: Rotor, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), other.g0, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn rotor__add__point_at_infinity(self_: Rotor, other: PointAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn rotor__add__rotor(self_: Rotor, other: Rotor) -> Rotor {
    return Rotor(self_.g0 + other.g0);
}

fn rotor__add__scalar(self_: Rotor, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w) + vec2<f32>(other.g0, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn rotor__add__transflector(self_: Rotor, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), other.g1);
}

fn rotor__add__translator(self_: Rotor, other: Translator) -> Motor {
    return Motor(self_.g0 + vec4<f32>(0.0, 0.0, 0.0, other.g0.w), vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn scalar__add__anti_scalar(self_: Scalar, other: AntiScalar) -> Magnitude {
    return Magnitude(vec2<f32>(self_.g0, 0.0) + vec2<f32>(0.0, other.g0));
}

fn scalar__add__flector(self_: Scalar, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0), other.g0, vec3<f32>(0.0), vec3<f32>(0.0), other.g1);
}

fn scalar__add__flector_at_infinity(self_: Scalar, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0, 0.0) + vec2<f32>(0.0, other.g0.w), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0));
}

fn scalar__add__horizon(self_: Scalar, other: Horizon) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0, 0.0) + vec2<f32>(0.0, other.g0), vec3<f32>(0.0), vec3<f32>(0.0));
}

fn scalar__add__line(self_: Scalar, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0), vec4<f32>(0.0), other.g0, other.g1, vec4<f32>(0.0));
}

fn scalar__add__line_at_infinity(self_: Scalar, other: LineAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0, 0.0), vec3<f32>(0.0), other.g0);
}

fn scalar__add__line_at_origin(self_: Scalar, other: LineAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0), vec4<f32>(0.0), other.g0, vec3<f32>(0.0), vec4<f32>(0.0));
}

fn scalar__add__magnitude(self_: Scalar, other: Magnitude) -> Magnitude {
    return Magnitude(vec2<f32>(self_.g0, 0.0) + other.g0);
}

fn scalar__add__motor(self_: Scalar, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0) + vec2<f32>(0.0, other.g0.w), vec4<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), other.g1, vec4<f32>(0.0));
}

fn scalar__add__multi_vector(self_: Scalar, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0) + other.g0, other.g1, other.g2, other.g3, other.g4);
}

fn scalar__add__multi_vector_at_infinity(self_: Scalar, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0, 0.0) + other.g0, other.g1, other.g2);
}

fn scalar__add__multi_vector_at_origin(self_: Scalar, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0) + vec2<f32>(0.0, other.g0.y), vec4<f32>(0.0, 0.0, 0.0, other.g0.x), other.g1, vec3<f32>(0.0), vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0));
}

fn scalar__add__origin(self_: Scalar, other: Origin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0), vec4<f32>(0.0, 0.0, 0.0, other.g0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn scalar__add__plane(self_: Scalar, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g0);
}

fn scalar__add__plane_at_origin(self_: Scalar, other: PlaneAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn scalar__add__point(self_: Scalar, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0), other.g0, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn scalar__add__point_at_infinity(self_: Scalar, other: PointAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0, 0.0), other.g0, vec3<f32>(0.0));
}

fn scalar__add__rotor(self_: Scalar, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0) + vec2<f32>(0.0, other.g0.w), vec4<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn scalar__add__scalar(self_: Scalar, other: Scalar) -> Scalar {
    return Scalar(self_.g0 + other.g0);
}

fn scalar__add__transflector(self_: Scalar, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0), vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0), other.g1);
}

fn scalar__add__translator(self_: Scalar, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0) + vec2<f32>(0.0, other.g0.w), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn transflector__add__anti_scalar(self_: Transflector, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g1);
}

fn transflector__add__flector(self_: Transflector, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) + other.g0, self_.g1 + other.g1);
}

fn transflector__add__flector_at_infinity(self_: Transflector, other: FlectorAtInfinity) -> Transflector {
    return Transflector(self_.g0 + vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g1 + vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn transflector__add__horizon(self_: Transflector, other: Horizon) -> Transflector {
    return Transflector(self_.g0, self_.g1 + vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn transflector__add__line(self_: Transflector, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), other.g0, other.g1, self_.g1);
}

fn transflector__add__line_at_infinity(self_: Transflector, other: LineAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec3<f32>(0.0), other.g0, self_.g1);
}

fn transflector__add__line_at_origin(self_: Transflector, other: LineAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), other.g0, vec3<f32>(0.0), self_.g1);
}

fn transflector__add__magnitude(self_: Transflector, other: Magnitude) -> MultiVector {
    return MultiVector(other.g0, vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g1);
}

fn transflector__add__motor(self_: Transflector, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.w), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), other.g1, self_.g1);
}

fn transflector__add__multi_vector(self_: Transflector, other: MultiVector) -> MultiVector {
    return MultiVector(other.g0, vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) + other.g1, other.g2, other.g3, self_.g1 + other.g4);
}

fn transflector__add__multi_vector_at_infinity(self_: Transflector, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(other.g0.x, 0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) + vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec3<f32>(0.0), other.g2, self_.g1 + vec4<f32>(0.0, 0.0, 0.0, other.g0.y));
}

fn transflector__add__multi_vector_at_origin(self_: Transflector, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.y), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) + vec4<f32>(0.0, 0.0, 0.0, other.g0.x), other.g1, vec3<f32>(0.0), self_.g1 + vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0));
}

fn transflector__add__origin(self_: Transflector, other: Origin) -> Flector {
    return Flector(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) + vec4<f32>(0.0, 0.0, 0.0, other.g0), self_.g1);
}

fn transflector__add__plane(self_: Transflector, other: Plane) -> Transflector {
    return Transflector(self_.g0, self_.g1 + other.g0);
}

fn transflector__add__plane_at_origin(self_: Transflector, other: PlaneAtOrigin) -> Transflector {
    return Transflector(self_.g0, self_.g1 + vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn transflector__add__point(self_: Transflector, other: Point) -> Flector {
    return Flector(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) + other.g0, self_.g1);
}

fn transflector__add__point_at_infinity(self_: Transflector, other: PointAtInfinity) -> Transflector {
    return Transflector(self_.g0 + other.g0, self_.g1);
}

fn transflector__add__rotor(self_: Transflector, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.w), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), self_.g1);
}

fn transflector__add__scalar(self_: Transflector, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(other.g0, 0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g1);
}

fn transflector__add__transflector(self_: Transflector, other: Transflector) -> Transflector {
    return Transflector(self_.g0 + other.g0, self_.g1 + other.g1);
}

fn transflector__add__translator(self_: Transflector, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, other.g0.w), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g1);
}

fn translator__add__anti_scalar(self_: Translator, other: AntiScalar) -> Translator {
    return Translator(self_.g0 + vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn translator__add__flector(self_: Translator, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), other.g0, vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), other.g1);
}

fn translator__add__flector_at_infinity(self_: Translator, other: FlectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn translator__add__horizon(self_: Translator, other: Horizon) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn translator__add__line(self_: Translator, other: Line) -> Motor {
    return Motor(vec4<f32>(0.0, 0.0, 0.0, self_.g0.w) + vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) + other.g1);
}

fn translator__add__line_at_infinity(self_: Translator, other: LineAtInfinity) -> Translator {
    return Translator(self_.g0 + vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn translator__add__line_at_origin(self_: Translator, other: LineAtOrigin) -> Motor {
    return Motor(vec4<f32>(0.0, 0.0, 0.0, self_.g0.w) + vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z));
}

fn translator__add__magnitude(self_: Translator, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w) + other.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec4<f32>(0.0));
}

fn translator__add__motor(self_: Translator, other: Motor) -> Motor {
    return Motor(vec4<f32>(0.0, 0.0, 0.0, self_.g0.w) + other.g0, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) + other.g1);
}

fn translator__add__multi_vector(self_: Translator, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w) + other.g0, other.g1, other.g2, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) + other.g3, other.g4);
}

fn translator__add__multi_vector_at_infinity(self_: Translator, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w) + vec2<f32>(other.g0.x, 0.0), vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) + other.g2, vec4<f32>(0.0, 0.0, 0.0, other.g0.y));
}

fn translator__add__multi_vector_at_origin(self_: Translator, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w) + vec2<f32>(0.0, other.g0.y), vec4<f32>(0.0, 0.0, 0.0, other.g0.x), other.g1, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0));
}

fn translator__add__origin(self_: Translator, other: Origin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec4<f32>(0.0, 0.0, 0.0, other.g0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec4<f32>(0.0));
}

fn translator__add__plane(self_: Translator, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), other.g0);
}

fn translator__add__plane_at_origin(self_: Translator, other: PlaneAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn translator__add__point(self_: Translator, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), other.g0, vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec4<f32>(0.0));
}

fn translator__add__point_at_infinity(self_: Translator, other: PointAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec4<f32>(0.0));
}

fn translator__add__rotor(self_: Translator, other: Rotor) -> Motor {
    return Motor(vec4<f32>(0.0, 0.0, 0.0, self_.g0.w) + other.g0, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z));
}

fn translator__add__scalar(self_: Translator, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w) + vec2<f32>(other.g0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec4<f32>(0.0));
}

fn translator__add__transflector(self_: Translator, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), other.g1);
}

fn translator__add__translator(self_: Translator, other: Translator) -> Translator {
    return Translator(self_.g0 + other.g0);
}

fn anti_scalar__div__anti_scalar(self_: AntiScalar, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0 * 1.0 / other.g0 * 1.0);
}

fn flector__div__flector(self_: Flector, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0) / vec4<f32>(other.g0.x, other.g0.y, other.g0.z, other.g0.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0), vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, self_.g1.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0) / vec4<f32>(other.g1.x, other.g1.y, other.g1.z, other.g1.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0));
}

fn flector_at_infinity__div__flector_at_infinity(self_: FlectorAtInfinity, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0) / vec4<f32>(other.g0.x, other.g0.y, other.g0.z, other.g0.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0));
}

fn horizon__div__horizon(self_: Horizon, other: Horizon) -> Horizon {
    return Horizon(self_.g0 * 1.0 / other.g0 * 1.0);
}

fn line__div__line(self_: Line, other: Line) -> Line {
    return Line(vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(1.0, 1.0, 1.0) / vec3<f32>(other.g0.x, other.g0.y, other.g0.z) * vec3<f32>(1.0, 1.0, 1.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(1.0, 1.0, 1.0) / vec3<f32>(other.g1.x, other.g1.y, other.g1.z) * vec3<f32>(1.0, 1.0, 1.0));
}

fn line_at_infinity__div__line_at_infinity(self_: LineAtInfinity, other: LineAtInfinity) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(1.0, 1.0, 1.0) / vec3<f32>(other.g0.x, other.g0.y, other.g0.z) * vec3<f32>(1.0, 1.0, 1.0));
}

fn line_at_origin__div__line_at_origin(self_: LineAtOrigin, other: LineAtOrigin) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(1.0, 1.0, 1.0) / vec3<f32>(other.g0.x, other.g0.y, other.g0.z) * vec3<f32>(1.0, 1.0, 1.0));
}

fn magnitude__div__magnitude(self_: Magnitude, other: Magnitude) -> Magnitude {
    return Magnitude(vec2<f32>(self_.g0.x, self_.g0.y) * vec2<f32>(1.0, 1.0) / vec2<f32>(other.g0.x, other.g0.y) * vec2<f32>(1.0, 1.0));
}

fn motor__div__motor(self_: Motor, other: Motor) -> Motor {
    return Motor(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0) / vec4<f32>(other.g0.x, other.g0.y, other.g0.z, other.g0.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(1.0, 1.0, 1.0) / vec3<f32>(other.g1.x, other.g1.y, other.g1.z) * vec3<f32>(1.0, 1.0, 1.0));
}

fn multi_vector__div__multi_vector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x, self_.g0.y) * vec2<f32>(1.0, 1.0) / vec2<f32>(other.g0.x, other.g0.y) * vec2<f32>(1.0, 1.0), vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, self_.g1.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0) / vec4<f32>(other.g1.x, other.g1.y, other.g1.z, other.g1.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0), vec3<f32>(self_.g2.x, self_.g2.y, self_.g2.z) * vec3<f32>(1.0, 1.0, 1.0) / vec3<f32>(other.g2.x, other.g2.y, other.g2.z) * vec3<f32>(1.0, 1.0, 1.0), vec3<f32>(self_.g3.x, self_.g3.y, self_.g3.z) * vec3<f32>(1.0, 1.0, 1.0) / vec3<f32>(other.g3.x, other.g3.y, other.g3.z) * vec3<f32>(1.0, 1.0, 1.0), vec4<f32>(self_.g4.x, self_.g4.y, self_.g4.z, self_.g4.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0) / vec4<f32>(other.g4.x, other.g4.y, other.g4.z, other.g4.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0));
}

fn multi_vector_at_infinity__div__multi_vector_at_infinity(self_: MultiVectorAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x, self_.g0.y) * vec2<f32>(1.0, 1.0) / vec2<f32>(other.g0.x, other.g0.y) * vec2<f32>(1.0, 1.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(1.0, 1.0, 1.0) / vec3<f32>(other.g1.x, other.g1.y, other.g1.z) * vec3<f32>(1.0, 1.0, 1.0), vec3<f32>(self_.g2.x, self_.g2.y, self_.g2.z) * vec3<f32>(1.0, 1.0, 1.0) / vec3<f32>(other.g2.x, other.g2.y, other.g2.z) * vec3<f32>(1.0, 1.0, 1.0));
}

fn multi_vector_at_origin__div__multi_vector_at_origin(self_: MultiVectorAtOrigin, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x, self_.g0.y) * vec2<f32>(1.0, 1.0) / vec2<f32>(other.g0.x, other.g0.y) * vec2<f32>(1.0, 1.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(1.0, 1.0, 1.0) / vec3<f32>(other.g1.x, other.g1.y, other.g1.z) * vec3<f32>(1.0, 1.0, 1.0), vec3<f32>(self_.g2.x, self_.g2.y, self_.g2.z) * vec3<f32>(1.0, 1.0, 1.0) / vec3<f32>(other.g2.x, other.g2.y, other.g2.z) * vec3<f32>(1.0, 1.0, 1.0));
}

fn origin__div__origin(self_: Origin, other: Origin) -> Origin {
    return Origin(self_.g0 * 1.0 / other.g0 * 1.0);
}

fn plane__div__plane(self_: Plane, other: Plane) -> Plane {
    return Plane(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0) / vec4<f32>(other.g0.x, other.g0.y, other.g0.z, other.g0.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0));
}

fn plane_at_origin__div__plane_at_origin(self_: PlaneAtOrigin, other: PlaneAtOrigin) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(1.0, 1.0, 1.0) / vec3<f32>(other.g0.x, other.g0.y, other.g0.z) * vec3<f32>(1.0, 1.0, 1.0));
}

fn point__div__point(self_: Point, other: Point) -> Point {
    return Point(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0) / vec4<f32>(other.g0.x, other.g0.y, other.g0.z, other.g0.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0));
}

fn point_at_infinity__div__point_at_infinity(self_: PointAtInfinity, other: PointAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(1.0, 1.0, 1.0) / vec3<f32>(other.g0.x, other.g0.y, other.g0.z) * vec3<f32>(1.0, 1.0, 1.0));
}

fn rotor__div__rotor(self_: Rotor, other: Rotor) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0) / vec4<f32>(other.g0.x, other.g0.y, other.g0.z, other.g0.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0));
}

fn scalar__div__scalar(self_: Scalar, other: Scalar) -> Scalar {
    return Scalar(self_.g0 * 1.0 / other.g0 * 1.0);
}

fn transflector__div__transflector(self_: Transflector, other: Transflector) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(1.0, 1.0, 1.0) / vec3<f32>(other.g0.x, other.g0.y, other.g0.z) * vec3<f32>(1.0, 1.0, 1.0), vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, self_.g1.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0) / vec4<f32>(other.g1.x, other.g1.y, other.g1.z, other.g1.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0));
}

fn translator__div__translator(self_: Translator, other: Translator) -> Translator {
    return Translator(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0) / vec4<f32>(other.g0.x, other.g0.y, other.g0.z, other.g0.w) * vec4<f32>(1.0, 1.0, 1.0, 1.0));
}

fn flector__into__flector_at_infinity(self_: Flector) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g1.w));
}

fn flector__into__horizon(self_: Flector) -> Horizon {
    return Horizon(self_.g1.w);
}

fn flector__into__origin(self_: Flector) -> Origin {
    return Origin(self_.g0.w);
}

fn flector__into__plane(self_: Flector) -> Plane {
    return Plane(self_.g1);
}

fn flector__into__plane_at_origin(self_: Flector) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z));
}

fn flector__into__point(self_: Flector) -> Point {
    return Point(self_.g0);
}

fn flector__into__point_at_infinity(self_: Flector) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z));
}

fn flector__into__transflector(self_: Flector) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), self_.g1);
}

fn flector_at_infinity__into__horizon(self_: FlectorAtInfinity) -> Horizon {
    return Horizon(self_.g0.w);
}

fn flector_at_infinity__into__point_at_infinity(self_: FlectorAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z));
}

fn line__into__line_at_infinity(self_: Line) -> LineAtInfinity {
    return LineAtInfinity(self_.g1);
}

fn line__into__line_at_origin(self_: Line) -> LineAtOrigin {
    return LineAtOrigin(self_.g0);
}

fn magnitude__into__anti_scalar(self_: Magnitude) -> AntiScalar {
    return AntiScalar(self_.g0.y);
}

fn magnitude__into__scalar(self_: Magnitude) -> Scalar {
    return Scalar(self_.g0.x);
}

fn motor__into__anti_scalar(self_: Motor) -> AntiScalar {
    return AntiScalar(self_.g0.w);
}

fn motor__into__line(self_: Motor) -> Line {
    return Line(vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), self_.g1);
}

fn motor__into__line_at_infinity(self_: Motor) -> LineAtInfinity {
    return LineAtInfinity(self_.g1);
}

fn motor__into__line_at_origin(self_: Motor) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z));
}

fn motor__into__rotor(self_: Motor) -> Rotor {
    return Rotor(self_.g0);
}

fn motor__into__translator(self_: Motor) -> Translator {
    return Translator(vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, self_.g0.w));
}

fn multi_vector__into__anti_scalar(self_: MultiVector) -> AntiScalar {
    return AntiScalar(self_.g0.y);
}

fn multi_vector__into__flector(self_: MultiVector) -> Flector {
    return Flector(self_.g1, self_.g4);
}

fn multi_vector__into__flector_at_infinity(self_: MultiVector) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, self_.g4.w));
}

fn multi_vector__into__horizon(self_: MultiVector) -> Horizon {
    return Horizon(self_.g4.w);
}

fn multi_vector__into__line(self_: MultiVector) -> Line {
    return Line(self_.g2, self_.g3);
}

fn multi_vector__into__line_at_infinity(self_: MultiVector) -> LineAtInfinity {
    return LineAtInfinity(self_.g3);
}

fn multi_vector__into__line_at_origin(self_: MultiVector) -> LineAtOrigin {
    return LineAtOrigin(self_.g2);
}

fn multi_vector__into__magnitude(self_: MultiVector) -> Magnitude {
    return Magnitude(self_.g0);
}

fn multi_vector__into__motor(self_: MultiVector) -> Motor {
    return Motor(vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, self_.g0.y), self_.g3);
}

fn multi_vector__into__multi_vector_at_infinity(self_: MultiVector) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x, self_.g4.w), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z), self_.g3);
}

fn multi_vector__into__multi_vector_at_origin(self_: MultiVector) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g1.w, self_.g0.y), self_.g2, vec3<f32>(self_.g4.x, self_.g4.y, self_.g4.z));
}

fn multi_vector__into__origin(self_: MultiVector) -> Origin {
    return Origin(self_.g1.w);
}

fn multi_vector__into__plane(self_: MultiVector) -> Plane {
    return Plane(self_.g4);
}

fn multi_vector__into__plane_at_origin(self_: MultiVector) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g4.x, self_.g4.y, self_.g4.z));
}

fn multi_vector__into__point(self_: MultiVector) -> Point {
    return Point(self_.g1);
}

fn multi_vector__into__point_at_infinity(self_: MultiVector) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z));
}

fn multi_vector__into__rotor(self_: MultiVector) -> Rotor {
    return Rotor(vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, self_.g0.y));
}

fn multi_vector__into__scalar(self_: MultiVector) -> Scalar {
    return Scalar(self_.g0.x);
}

fn multi_vector__into__transflector(self_: MultiVector) -> Transflector {
    return Transflector(vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z), self_.g4);
}

fn multi_vector__into__translator(self_: MultiVector) -> Translator {
    return Translator(vec4<f32>(self_.g3.x, self_.g3.y, self_.g3.z, self_.g0.y));
}

fn multi_vector_at_infinity__into__flector_at_infinity(self_: MultiVectorAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, self_.g0.y));
}

fn multi_vector_at_infinity__into__horizon(self_: MultiVectorAtInfinity) -> Horizon {
    return Horizon(self_.g0.y);
}

fn multi_vector_at_infinity__into__line_at_infinity(self_: MultiVectorAtInfinity) -> LineAtInfinity {
    return LineAtInfinity(self_.g2);
}

fn multi_vector_at_infinity__into__point_at_infinity(self_: MultiVectorAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(self_.g1);
}

fn multi_vector_at_infinity__into__scalar(self_: MultiVectorAtInfinity) -> Scalar {
    return Scalar(self_.g0.x);
}

fn multi_vector_at_origin__into__anti_scalar(self_: MultiVectorAtOrigin) -> AntiScalar {
    return AntiScalar(self_.g0.y);
}

fn multi_vector_at_origin__into__line_at_origin(self_: MultiVectorAtOrigin) -> LineAtOrigin {
    return LineAtOrigin(self_.g1);
}

fn multi_vector_at_origin__into__origin(self_: MultiVectorAtOrigin) -> Origin {
    return Origin(self_.g0.x);
}

fn multi_vector_at_origin__into__plane_at_origin(self_: MultiVectorAtOrigin) -> PlaneAtOrigin {
    return PlaneAtOrigin(self_.g2);
}

fn multi_vector_at_origin__into__rotor(self_: MultiVectorAtOrigin) -> Rotor {
    return Rotor(vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, self_.g0.y));
}

fn plane__into__horizon(self_: Plane) -> Horizon {
    return Horizon(self_.g0.w);
}

fn plane__into__plane_at_origin(self_: Plane) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z));
}

fn point__into__origin(self_: Point) -> Origin {
    return Origin(self_.g0.w);
}

fn point__into__point_at_infinity(self_: Point) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z));
}

fn rotor__into__anti_scalar(self_: Rotor) -> AntiScalar {
    return AntiScalar(self_.g0.w);
}

fn rotor__into__line_at_origin(self_: Rotor) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z));
}

fn transflector__into__flector_at_infinity(self_: Transflector) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g1.w));
}

fn transflector__into__horizon(self_: Transflector) -> Horizon {
    return Horizon(self_.g1.w);
}

fn transflector__into__plane(self_: Transflector) -> Plane {
    return Plane(self_.g1);
}

fn transflector__into__plane_at_origin(self_: Transflector) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z));
}

fn transflector__into__point_at_infinity(self_: Transflector) -> PointAtInfinity {
    return PointAtInfinity(self_.g0);
}

fn translator__into__anti_scalar(self_: Translator) -> AntiScalar {
    return AntiScalar(self_.g0.w);
}

fn translator__into__line_at_infinity(self_: Translator) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z));
}

fn anti_scalar__mul__anti_scalar(self_: AntiScalar, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0);
}

fn flector__mul__flector(self_: Flector, other: Flector) -> Flector {
    return Flector(self_.g0 * other.g0, self_.g1 * other.g1);
}

fn flector_at_infinity__mul__flector_at_infinity(self_: FlectorAtInfinity, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(self_.g0 * other.g0);
}

fn horizon__mul__horizon(self_: Horizon, other: Horizon) -> Horizon {
    return Horizon(self_.g0 * other.g0);
}

fn line__mul__line(self_: Line, other: Line) -> Line {
    return Line(self_.g0 * other.g0, self_.g1 * other.g1);
}

fn line_at_infinity__mul__line_at_infinity(self_: LineAtInfinity, other: LineAtInfinity) -> LineAtInfinity {
    return LineAtInfinity(self_.g0 * other.g0);
}

fn line_at_origin__mul__line_at_origin(self_: LineAtOrigin, other: LineAtOrigin) -> LineAtOrigin {
    return LineAtOrigin(self_.g0 * other.g0);
}

fn magnitude__mul__magnitude(self_: Magnitude, other: Magnitude) -> Magnitude {
    return Magnitude(self_.g0 * other.g0);
}

fn motor__mul__motor(self_: Motor, other: Motor) -> Motor {
    return Motor(self_.g0 * other.g0, self_.g1 * other.g1);
}

fn multi_vector__mul__multi_vector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return MultiVector(self_.g0 * other.g0, self_.g1 * other.g1, self_.g2 * other.g2, self_.g3 * other.g3, self_.g4 * other.g4);
}

fn multi_vector_at_infinity__mul__multi_vector_at_infinity(self_: MultiVectorAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0 * other.g0, self_.g1 * other.g1, self_.g2 * other.g2);
}

fn multi_vector_at_origin__mul__multi_vector_at_origin(self_: MultiVectorAtOrigin, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0 * other.g0, self_.g1 * other.g1, self_.g2 * other.g2);
}

fn origin__mul__origin(self_: Origin, other: Origin) -> Origin {
    return Origin(self_.g0 * other.g0);
}

fn plane__mul__plane(self_: Plane, other: Plane) -> Plane {
    return Plane(self_.g0 * other.g0);
}

fn plane_at_origin__mul__plane_at_origin(self_: PlaneAtOrigin, other: PlaneAtOrigin) -> PlaneAtOrigin {
    return PlaneAtOrigin(self_.g0 * other.g0);
}

fn point__mul__point(self_: Point, other: Point) -> Point {
    return Point(self_.g0 * other.g0);
}

fn point_at_infinity__mul__point_at_infinity(self_: PointAtInfinity, other: PointAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(self_.g0 * other.g0);
}

fn rotor__mul__rotor(self_: Rotor, other: Rotor) -> Rotor {
    return Rotor(self_.g0 * other.g0);
}

fn scalar__mul__scalar(self_: Scalar, other: Scalar) -> Scalar {
    return Scalar(self_.g0 * other.g0);
}

fn transflector__mul__transflector(self_: Transflector, other: Transflector) -> Transflector {
    return Transflector(self_.g0 * other.g0, self_.g1 * other.g1);
}

fn translator__mul__translator(self_: Translator, other: Translator) -> Translator {
    return Translator(self_.g0 * other.g0);
}

fn anti_scalar__sub__anti_scalar(self_: AntiScalar, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0 - other.g0);
}

fn anti_scalar__sub__flector(self_: AntiScalar, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0), vec4<f32>(0.0) - other.g0, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - other.g1);
}

fn anti_scalar__sub__flector_at_infinity(self_: AntiScalar, other: FlectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0), vec4<f32>(0.0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn anti_scalar__sub__horizon(self_: AntiScalar, other: Horizon) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn anti_scalar__sub__line(self_: AntiScalar, other: Line) -> Motor {
    return Motor(vec4<f32>(0.0, 0.0, 0.0, self_.g0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(0.0) - other.g1);
}

fn anti_scalar__sub__line_at_infinity(self_: AntiScalar, other: LineAtInfinity) -> Translator {
    return Translator(vec4<f32>(0.0, 0.0, 0.0, self_.g0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn anti_scalar__sub__line_at_origin(self_: AntiScalar, other: LineAtOrigin) -> Rotor {
    return Rotor(vec4<f32>(0.0, 0.0, 0.0, self_.g0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn anti_scalar__sub__magnitude(self_: AntiScalar, other: Magnitude) -> Magnitude {
    return Magnitude(vec2<f32>(0.0, self_.g0) - other.g0);
}

fn anti_scalar__sub__motor(self_: AntiScalar, other: Motor) -> Motor {
    return Motor(vec4<f32>(0.0, 0.0, 0.0, self_.g0) - other.g0, vec3<f32>(0.0) - other.g1);
}

fn anti_scalar__sub__multi_vector(self_: AntiScalar, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0) - other.g0, vec4<f32>(0.0) - other.g1, vec3<f32>(0.0) - other.g2, vec3<f32>(0.0) - other.g3, vec4<f32>(0.0) - other.g4);
}

fn anti_scalar__sub__multi_vector_at_infinity(self_: AntiScalar, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0) - vec2<f32>(other.g0.x, 0.0), vec4<f32>(0.0) - vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0) - other.g2, vec4<f32>(0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0.y));
}

fn anti_scalar__sub__multi_vector_at_origin(self_: AntiScalar, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(0.0, self_.g0) - other.g0, vec3<f32>(0.0) - other.g1, vec3<f32>(0.0) - other.g2);
}

fn anti_scalar__sub__origin(self_: AntiScalar, other: Origin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(0.0, self_.g0) - vec2<f32>(other.g0, 0.0), vec3<f32>(0.0), vec3<f32>(0.0));
}

fn anti_scalar__sub__plane(self_: AntiScalar, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - other.g0);
}

fn anti_scalar__sub__plane_at_origin(self_: AntiScalar, other: PlaneAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(0.0, self_.g0), vec3<f32>(0.0), vec3<f32>(0.0) - other.g0);
}

fn anti_scalar__sub__point(self_: AntiScalar, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0), vec4<f32>(0.0) - other.g0, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn anti_scalar__sub__point_at_infinity(self_: AntiScalar, other: PointAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0), vec4<f32>(0.0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn anti_scalar__sub__rotor(self_: AntiScalar, other: Rotor) -> Rotor {
    return Rotor(vec4<f32>(0.0, 0.0, 0.0, self_.g0) - other.g0);
}

fn anti_scalar__sub__scalar(self_: AntiScalar, other: Scalar) -> Magnitude {
    return Magnitude(vec2<f32>(0.0, self_.g0) - vec2<f32>(other.g0, 0.0));
}

fn anti_scalar__sub__transflector(self_: AntiScalar, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0), vec4<f32>(0.0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - other.g1);
}

fn anti_scalar__sub__translator(self_: AntiScalar, other: Translator) -> Translator {
    return Translator(vec4<f32>(0.0, 0.0, 0.0, self_.g0) - other.g0);
}

fn flector__sub__anti_scalar(self_: Flector, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0), self_.g0, vec3<f32>(0.0), vec3<f32>(0.0), self_.g1);
}

fn flector__sub__flector(self_: Flector, other: Flector) -> Flector {
    return Flector(self_.g0 - other.g0, self_.g1 - other.g1);
}

fn flector__sub__flector_at_infinity(self_: Flector, other: FlectorAtInfinity) -> Flector {
    return Flector(self_.g0 - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g1 - vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn flector__sub__horizon(self_: Flector, other: Horizon) -> Flector {
    return Flector(self_.g0, self_.g1 - vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn flector__sub__line(self_: Flector, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0, vec3<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, self_.g1);
}

fn flector__sub__line_at_infinity(self_: Flector, other: LineAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0, vec3<f32>(0.0), vec3<f32>(0.0) - other.g0, self_.g1);
}

fn flector__sub__line_at_origin(self_: Flector, other: LineAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0, vec3<f32>(0.0) - other.g0, vec3<f32>(0.0), self_.g1);
}

fn flector__sub__magnitude(self_: Flector, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0, self_.g0, vec3<f32>(0.0), vec3<f32>(0.0), self_.g1);
}

fn flector__sub__motor(self_: Flector, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), self_.g0, vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0) - other.g1, self_.g1);
}

fn flector__sub__multi_vector(self_: Flector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0, self_.g0 - other.g1, vec3<f32>(0.0) - other.g2, vec3<f32>(0.0) - other.g3, self_.g1 - other.g4);
}

fn flector__sub__multi_vector_at_infinity(self_: Flector, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(other.g0.x, 0.0), self_.g0 - vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0) - other.g2, self_.g1 - vec4<f32>(0.0, 0.0, 0.0, other.g0.y));
}

fn flector__sub__multi_vector_at_origin(self_: Flector, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.y), self_.g0 - vec4<f32>(0.0, 0.0, 0.0, other.g0.x), vec3<f32>(0.0) - other.g1, vec3<f32>(0.0), self_.g1 - vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0));
}

fn flector__sub__origin(self_: Flector, other: Origin) -> Flector {
    return Flector(self_.g0 - vec4<f32>(0.0, 0.0, 0.0, other.g0), self_.g1);
}

fn flector__sub__plane(self_: Flector, other: Plane) -> Flector {
    return Flector(self_.g0, self_.g1 - other.g0);
}

fn flector__sub__plane_at_origin(self_: Flector, other: PlaneAtOrigin) -> Flector {
    return Flector(self_.g0, self_.g1 - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn flector__sub__point(self_: Flector, other: Point) -> Flector {
    return Flector(self_.g0 - other.g0, self_.g1);
}

fn flector__sub__point_at_infinity(self_: Flector, other: PointAtInfinity) -> Flector {
    return Flector(self_.g0 - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g1);
}

fn flector__sub__rotor(self_: Flector, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), self_.g0, vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), self_.g1);
}

fn flector__sub__scalar(self_: Flector, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(other.g0, 0.0), self_.g0, vec3<f32>(0.0), vec3<f32>(0.0), self_.g1);
}

fn flector__sub__transflector(self_: Flector, other: Transflector) -> Flector {
    return Flector(self_.g0 - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g1 - other.g1);
}

fn flector__sub__translator(self_: Flector, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), self_.g0, vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g1);
}

fn flector_at_infinity__sub__anti_scalar(self_: FlectorAtInfinity, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0, 0.0, 0.0, self_.g0.w));
}

fn flector_at_infinity__sub__flector(self_: FlectorAtInfinity, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) - other.g0, vec4<f32>(0.0, 0.0, 0.0, self_.g0.w) - other.g1);
}

fn flector_at_infinity__sub__flector_at_infinity(self_: FlectorAtInfinity, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(self_.g0 - other.g0);
}

fn flector_at_infinity__sub__horizon(self_: FlectorAtInfinity, other: Horizon) -> FlectorAtInfinity {
    return FlectorAtInfinity(self_.g0 - vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn flector_at_infinity__sub__line(self_: FlectorAtInfinity, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec3<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec4<f32>(0.0, 0.0, 0.0, self_.g0.w));
}

fn flector_at_infinity__sub__line_at_infinity(self_: FlectorAtInfinity, other: LineAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(0.0, self_.g0.w), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0) - other.g0);
}

fn flector_at_infinity__sub__line_at_origin(self_: FlectorAtInfinity, other: LineAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec3<f32>(0.0) - other.g0, vec3<f32>(0.0), vec4<f32>(0.0, 0.0, 0.0, self_.g0.w));
}

fn flector_at_infinity__sub__magnitude(self_: FlectorAtInfinity, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0, vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0, 0.0, 0.0, self_.g0.w));
}

fn flector_at_infinity__sub__motor(self_: FlectorAtInfinity, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0) - other.g1, vec4<f32>(0.0, 0.0, 0.0, self_.g0.w));
}

fn flector_at_infinity__sub__multi_vector(self_: FlectorAtInfinity, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0, vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) - other.g1, vec3<f32>(0.0) - other.g2, vec3<f32>(0.0) - other.g3, vec4<f32>(0.0, 0.0, 0.0, self_.g0.w) - other.g4);
}

fn flector_at_infinity__sub__multi_vector_at_infinity(self_: FlectorAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(0.0, self_.g0.w) - other.g0, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) - other.g1, vec3<f32>(0.0) - other.g2);
}

fn flector_at_infinity__sub__multi_vector_at_origin(self_: FlectorAtInfinity, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.y), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0.x), vec3<f32>(0.0) - other.g1, vec3<f32>(0.0), vec4<f32>(0.0, 0.0, 0.0, self_.g0.w) - vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0));
}

fn flector_at_infinity__sub__origin(self_: FlectorAtInfinity, other: Origin) -> Flector {
    return Flector(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0), vec4<f32>(0.0, 0.0, 0.0, self_.g0.w));
}

fn flector_at_infinity__sub__plane(self_: FlectorAtInfinity, other: Plane) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec4<f32>(0.0, 0.0, 0.0, self_.g0.w) - other.g0);
}

fn flector_at_infinity__sub__plane_at_origin(self_: FlectorAtInfinity, other: PlaneAtOrigin) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec4<f32>(0.0, 0.0, 0.0, self_.g0.w) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn flector_at_infinity__sub__point(self_: FlectorAtInfinity, other: Point) -> Flector {
    return Flector(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) - other.g0, vec4<f32>(0.0, 0.0, 0.0, self_.g0.w));
}

fn flector_at_infinity__sub__point_at_infinity(self_: FlectorAtInfinity, other: PointAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(self_.g0 - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn flector_at_infinity__sub__rotor(self_: FlectorAtInfinity, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec4<f32>(0.0, 0.0, 0.0, self_.g0.w));
}

fn flector_at_infinity__sub__scalar(self_: FlectorAtInfinity, other: Scalar) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(0.0, self_.g0.w) - vec2<f32>(other.g0, 0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0));
}

fn flector_at_infinity__sub__transflector(self_: FlectorAtInfinity, other: Transflector) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) - other.g0, vec4<f32>(0.0, 0.0, 0.0, self_.g0.w) - other.g1);
}

fn flector_at_infinity__sub__translator(self_: FlectorAtInfinity, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0, 0.0, 0.0, self_.g0.w));
}

fn horizon__sub__anti_scalar(self_: Horizon, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0, 0.0, 0.0, self_.g0));
}

fn horizon__sub__flector(self_: Horizon, other: Flector) -> Flector {
    return Flector(vec4<f32>(0.0) - other.g0, vec4<f32>(0.0, 0.0, 0.0, self_.g0) - other.g1);
}

fn horizon__sub__flector_at_infinity(self_: Horizon, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(0.0, 0.0, 0.0, self_.g0) - other.g0);
}

fn horizon__sub__horizon(self_: Horizon, other: Horizon) -> Horizon {
    return Horizon(self_.g0 - other.g0);
}

fn horizon__sub__line(self_: Horizon, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec4<f32>(0.0, 0.0, 0.0, self_.g0));
}

fn horizon__sub__line_at_infinity(self_: Horizon, other: LineAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(0.0, self_.g0), vec3<f32>(0.0), vec3<f32>(0.0) - other.g0);
}

fn horizon__sub__line_at_origin(self_: Horizon, other: LineAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - other.g0, vec3<f32>(0.0), vec4<f32>(0.0, 0.0, 0.0, self_.g0));
}

fn horizon__sub__magnitude(self_: Horizon, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0, 0.0, 0.0, self_.g0));
}

fn horizon__sub__motor(self_: Horizon, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0) - other.g1, vec4<f32>(0.0, 0.0, 0.0, self_.g0));
}

fn horizon__sub__multi_vector(self_: Horizon, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0, vec4<f32>(0.0) - other.g1, vec3<f32>(0.0) - other.g2, vec3<f32>(0.0) - other.g3, vec4<f32>(0.0, 0.0, 0.0, self_.g0) - other.g4);
}

fn horizon__sub__multi_vector_at_infinity(self_: Horizon, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(0.0, self_.g0) - other.g0, vec3<f32>(0.0) - other.g1, vec3<f32>(0.0) - other.g2);
}

fn horizon__sub__multi_vector_at_origin(self_: Horizon, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.y), vec4<f32>(0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0.x), vec3<f32>(0.0) - other.g1, vec3<f32>(0.0), vec4<f32>(0.0, 0.0, 0.0, self_.g0) - vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0));
}

fn horizon__sub__origin(self_: Horizon, other: Origin) -> Flector {
    return Flector(vec4<f32>(0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0), vec4<f32>(0.0, 0.0, 0.0, self_.g0));
}

fn horizon__sub__plane(self_: Horizon, other: Plane) -> Plane {
    return Plane(vec4<f32>(0.0, 0.0, 0.0, self_.g0) - other.g0);
}

fn horizon__sub__plane_at_origin(self_: Horizon, other: PlaneAtOrigin) -> Plane {
    return Plane(vec4<f32>(0.0, 0.0, 0.0, self_.g0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn horizon__sub__point(self_: Horizon, other: Point) -> Flector {
    return Flector(vec4<f32>(0.0) - other.g0, vec4<f32>(0.0, 0.0, 0.0, self_.g0));
}

fn horizon__sub__point_at_infinity(self_: Horizon, other: PointAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(0.0, 0.0, 0.0, self_.g0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn horizon__sub__rotor(self_: Horizon, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec4<f32>(0.0, 0.0, 0.0, self_.g0));
}

fn horizon__sub__scalar(self_: Horizon, other: Scalar) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(0.0, self_.g0) - vec2<f32>(other.g0, 0.0), vec3<f32>(0.0), vec3<f32>(0.0));
}

fn horizon__sub__transflector(self_: Horizon, other: Transflector) -> Transflector {
    return Transflector(vec3<f32>(0.0) - other.g0, vec4<f32>(0.0, 0.0, 0.0, self_.g0) - other.g1);
}

fn horizon__sub__translator(self_: Horizon, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0, 0.0, 0.0, self_.g0));
}

fn line__sub__anti_scalar(self_: Line, other: AntiScalar) -> Motor {
    return Motor(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0), self_.g1);
}

fn line__sub__flector(self_: Line, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0) - other.g0, self_.g0, self_.g1, vec4<f32>(0.0) - other.g1);
}

fn line__sub__flector_at_infinity(self_: Line, other: FlectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g0, self_.g1, vec4<f32>(0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn line__sub__horizon(self_: Line, other: Horizon) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0), self_.g0, self_.g1, vec4<f32>(0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn line__sub__line(self_: Line, other: Line) -> Line {
    return Line(self_.g0 - other.g0, self_.g1 - other.g1);
}

fn line__sub__line_at_infinity(self_: Line, other: LineAtInfinity) -> Line {
    return Line(self_.g0, self_.g1 - other.g0);
}

fn line__sub__line_at_origin(self_: Line, other: LineAtOrigin) -> Line {
    return Line(self_.g0 - other.g0, self_.g1);
}

fn line__sub__magnitude(self_: Line, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0, vec4<f32>(0.0), self_.g0, self_.g1, vec4<f32>(0.0));
}

fn line__sub__motor(self_: Line, other: Motor) -> Motor {
    return Motor(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) - other.g0, self_.g1 - other.g1);
}

fn line__sub__multi_vector(self_: Line, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0, vec4<f32>(0.0) - other.g1, self_.g0 - other.g2, self_.g1 - other.g3, vec4<f32>(0.0) - other.g4);
}

fn line__sub__multi_vector_at_infinity(self_: Line, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(other.g0.x, 0.0), vec4<f32>(0.0) - vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), self_.g0, self_.g1 - other.g2, vec4<f32>(0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0.y));
}

fn line__sub__multi_vector_at_origin(self_: Line, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.y), vec4<f32>(0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0.x), self_.g0 - other.g1, self_.g1, vec4<f32>(0.0) - vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0));
}

fn line__sub__origin(self_: Line, other: Origin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0), self_.g0, self_.g1, vec4<f32>(0.0));
}

fn line__sub__plane(self_: Line, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0), self_.g0, self_.g1, vec4<f32>(0.0) - other.g0);
}

fn line__sub__plane_at_origin(self_: Line, other: PlaneAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0), self_.g0, self_.g1, vec4<f32>(0.0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn line__sub__point(self_: Line, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0) - other.g0, self_.g0, self_.g1, vec4<f32>(0.0));
}

fn line__sub__point_at_infinity(self_: Line, other: PointAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g0, self_.g1, vec4<f32>(0.0));
}

fn line__sub__rotor(self_: Line, other: Rotor) -> Motor {
    return Motor(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) - other.g0, self_.g1);
}

fn line__sub__scalar(self_: Line, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(other.g0, 0.0), vec4<f32>(0.0), self_.g0, self_.g1, vec4<f32>(0.0));
}

fn line__sub__transflector(self_: Line, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g0, self_.g1, vec4<f32>(0.0) - other.g1);
}

fn line__sub__translator(self_: Line, other: Translator) -> Motor {
    return Motor(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0.w), self_.g1 - vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn line_at_infinity__sub__anti_scalar(self_: LineAtInfinity, other: AntiScalar) -> Translator {
    return Translator(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn line_at_infinity__sub__flector(self_: LineAtInfinity, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0) - other.g0, vec3<f32>(0.0), self_.g0, vec4<f32>(0.0) - other.g1);
}

fn line_at_infinity__sub__flector_at_infinity(self_: LineAtInfinity, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g0);
}

fn line_at_infinity__sub__horizon(self_: LineAtInfinity, other: Horizon) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0), vec3<f32>(0.0), self_.g0);
}

fn line_at_infinity__sub__line(self_: LineAtInfinity, other: Line) -> Line {
    return Line(vec3<f32>(0.0) - other.g0, self_.g0 - other.g1);
}

fn line_at_infinity__sub__line_at_infinity(self_: LineAtInfinity, other: LineAtInfinity) -> LineAtInfinity {
    return LineAtInfinity(self_.g0 - other.g0);
}

fn line_at_infinity__sub__line_at_origin(self_: LineAtInfinity, other: LineAtOrigin) -> Line {
    return Line(vec3<f32>(0.0) - other.g0, self_.g0);
}

fn line_at_infinity__sub__magnitude(self_: LineAtInfinity, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0, vec4<f32>(0.0), vec3<f32>(0.0), self_.g0, vec4<f32>(0.0));
}

fn line_at_infinity__sub__motor(self_: LineAtInfinity, other: Motor) -> Motor {
    return Motor(vec4<f32>(0.0) - other.g0, self_.g0 - other.g1);
}

fn line_at_infinity__sub__multi_vector(self_: LineAtInfinity, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0, vec4<f32>(0.0) - other.g1, vec3<f32>(0.0) - other.g2, self_.g0 - other.g3, vec4<f32>(0.0) - other.g4);
}

fn line_at_infinity__sub__multi_vector_at_infinity(self_: LineAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, self_.g0 - other.g2);
}

fn line_at_infinity__sub__multi_vector_at_origin(self_: LineAtInfinity, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.y), vec4<f32>(0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0.x), vec3<f32>(0.0) - other.g1, self_.g0, vec4<f32>(0.0) - vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0));
}

fn line_at_infinity__sub__origin(self_: LineAtInfinity, other: Origin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0), vec3<f32>(0.0), self_.g0, vec4<f32>(0.0));
}

fn line_at_infinity__sub__plane(self_: LineAtInfinity, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), self_.g0, vec4<f32>(0.0) - other.g0);
}

fn line_at_infinity__sub__plane_at_origin(self_: LineAtInfinity, other: PlaneAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), self_.g0, vec4<f32>(0.0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn line_at_infinity__sub__point(self_: LineAtInfinity, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0) - other.g0, vec3<f32>(0.0), self_.g0, vec4<f32>(0.0));
}

fn line_at_infinity__sub__point_at_infinity(self_: LineAtInfinity, other: PointAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(0.0), vec3<f32>(0.0) - other.g0, self_.g0);
}

fn line_at_infinity__sub__rotor(self_: LineAtInfinity, other: Rotor) -> Motor {
    return Motor(vec4<f32>(0.0) - other.g0, self_.g0);
}

fn line_at_infinity__sub__scalar(self_: LineAtInfinity, other: Scalar) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(0.0) - vec2<f32>(other.g0, 0.0), vec3<f32>(0.0), self_.g0);
}

fn line_at_infinity__sub__transflector(self_: LineAtInfinity, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(0.0), self_.g0, vec4<f32>(0.0) - other.g1);
}

fn line_at_infinity__sub__translator(self_: LineAtInfinity, other: Translator) -> Translator {
    return Translator(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) - other.g0);
}

fn line_at_origin__sub__anti_scalar(self_: LineAtOrigin, other: AntiScalar) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn line_at_origin__sub__flector(self_: LineAtOrigin, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0) - other.g0, self_.g0, vec3<f32>(0.0), vec4<f32>(0.0) - other.g1);
}

fn line_at_origin__sub__flector_at_infinity(self_: LineAtOrigin, other: FlectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g0, vec3<f32>(0.0), vec4<f32>(0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn line_at_origin__sub__horizon(self_: LineAtOrigin, other: Horizon) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0), self_.g0, vec3<f32>(0.0), vec4<f32>(0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn line_at_origin__sub__line(self_: LineAtOrigin, other: Line) -> Line {
    return Line(self_.g0 - other.g0, vec3<f32>(0.0) - other.g1);
}

fn line_at_origin__sub__line_at_infinity(self_: LineAtOrigin, other: LineAtInfinity) -> Line {
    return Line(self_.g0, vec3<f32>(0.0) - other.g0);
}

fn line_at_origin__sub__line_at_origin(self_: LineAtOrigin, other: LineAtOrigin) -> LineAtOrigin {
    return LineAtOrigin(self_.g0 - other.g0);
}

fn line_at_origin__sub__magnitude(self_: LineAtOrigin, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0, vec4<f32>(0.0), self_.g0, vec3<f32>(0.0), vec4<f32>(0.0));
}

fn line_at_origin__sub__motor(self_: LineAtOrigin, other: Motor) -> Motor {
    return Motor(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) - other.g0, vec3<f32>(0.0) - other.g1);
}

fn line_at_origin__sub__multi_vector(self_: LineAtOrigin, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0, vec4<f32>(0.0) - other.g1, self_.g0 - other.g2, vec3<f32>(0.0) - other.g3, vec4<f32>(0.0) - other.g4);
}

fn line_at_origin__sub__multi_vector_at_infinity(self_: LineAtOrigin, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(other.g0.x, 0.0), vec4<f32>(0.0) - vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), self_.g0, vec3<f32>(0.0) - other.g2, vec4<f32>(0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0.y));
}

fn line_at_origin__sub__multi_vector_at_origin(self_: LineAtOrigin, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(0.0) - other.g0, self_.g0 - other.g1, vec3<f32>(0.0) - other.g2);
}

fn line_at_origin__sub__origin(self_: LineAtOrigin, other: Origin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(0.0) - vec2<f32>(other.g0, 0.0), self_.g0, vec3<f32>(0.0));
}

fn line_at_origin__sub__plane(self_: LineAtOrigin, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0), self_.g0, vec3<f32>(0.0), vec4<f32>(0.0) - other.g0);
}

fn line_at_origin__sub__plane_at_origin(self_: LineAtOrigin, other: PlaneAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(0.0), self_.g0, vec3<f32>(0.0) - other.g0);
}

fn line_at_origin__sub__point(self_: LineAtOrigin, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0) - other.g0, self_.g0, vec3<f32>(0.0), vec4<f32>(0.0));
}

fn line_at_origin__sub__point_at_infinity(self_: LineAtOrigin, other: PointAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g0, vec3<f32>(0.0), vec4<f32>(0.0));
}

fn line_at_origin__sub__rotor(self_: LineAtOrigin, other: Rotor) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) - other.g0);
}

fn line_at_origin__sub__scalar(self_: LineAtOrigin, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(other.g0, 0.0), vec4<f32>(0.0), self_.g0, vec3<f32>(0.0), vec4<f32>(0.0));
}

fn line_at_origin__sub__transflector(self_: LineAtOrigin, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g0, vec3<f32>(0.0), vec4<f32>(0.0) - other.g1);
}

fn line_at_origin__sub__translator(self_: LineAtOrigin, other: Translator) -> Motor {
    return Motor(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0.w), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn magnitude__sub__anti_scalar(self_: Magnitude, other: AntiScalar) -> Magnitude {
    return Magnitude(self_.g0 - vec2<f32>(0.0, other.g0));
}

fn magnitude__sub__flector(self_: Magnitude, other: Flector) -> MultiVector {
    return MultiVector(self_.g0, vec4<f32>(0.0) - other.g0, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - other.g1);
}

fn magnitude__sub__flector_at_infinity(self_: Magnitude, other: FlectorAtInfinity) -> MultiVector {
    return MultiVector(self_.g0, vec4<f32>(0.0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn magnitude__sub__horizon(self_: Magnitude, other: Horizon) -> MultiVector {
    return MultiVector(self_.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn magnitude__sub__line(self_: Magnitude, other: Line) -> MultiVector {
    return MultiVector(self_.g0, vec4<f32>(0.0), vec3<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec4<f32>(0.0));
}

fn magnitude__sub__line_at_infinity(self_: Magnitude, other: LineAtInfinity) -> MultiVector {
    return MultiVector(self_.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - other.g0, vec4<f32>(0.0));
}

fn magnitude__sub__line_at_origin(self_: Magnitude, other: LineAtOrigin) -> MultiVector {
    return MultiVector(self_.g0, vec4<f32>(0.0), vec3<f32>(0.0) - other.g0, vec3<f32>(0.0), vec4<f32>(0.0));
}

fn magnitude__sub__magnitude(self_: Magnitude, other: Magnitude) -> Magnitude {
    return Magnitude(self_.g0 - other.g0);
}

fn magnitude__sub__motor(self_: Magnitude, other: Motor) -> MultiVector {
    return MultiVector(self_.g0 - vec2<f32>(0.0, other.g0.w), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0) - other.g1, vec4<f32>(0.0));
}

fn magnitude__sub__multi_vector(self_: Magnitude, other: MultiVector) -> MultiVector {
    return MultiVector(self_.g0 - other.g0, vec4<f32>(0.0) - other.g1, vec3<f32>(0.0) - other.g2, vec3<f32>(0.0) - other.g3, vec4<f32>(0.0) - other.g4);
}

fn magnitude__sub__multi_vector_at_infinity(self_: Magnitude, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(self_.g0 - vec2<f32>(other.g0.x, 0.0), vec4<f32>(0.0) - vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0) - other.g2, vec4<f32>(0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0.y));
}

fn magnitude__sub__multi_vector_at_origin(self_: Magnitude, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(self_.g0 - vec2<f32>(0.0, other.g0.y), vec4<f32>(0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0.x), vec3<f32>(0.0) - other.g1, vec3<f32>(0.0), vec4<f32>(0.0) - vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0));
}

fn magnitude__sub__origin(self_: Magnitude, other: Origin) -> MultiVector {
    return MultiVector(self_.g0, vec4<f32>(0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn magnitude__sub__plane(self_: Magnitude, other: Plane) -> MultiVector {
    return MultiVector(self_.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - other.g0);
}

fn magnitude__sub__plane_at_origin(self_: Magnitude, other: PlaneAtOrigin) -> MultiVector {
    return MultiVector(self_.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn magnitude__sub__point(self_: Magnitude, other: Point) -> MultiVector {
    return MultiVector(self_.g0, vec4<f32>(0.0) - other.g0, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn magnitude__sub__point_at_infinity(self_: Magnitude, other: PointAtInfinity) -> MultiVector {
    return MultiVector(self_.g0, vec4<f32>(0.0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn magnitude__sub__rotor(self_: Magnitude, other: Rotor) -> MultiVector {
    return MultiVector(self_.g0 - vec2<f32>(0.0, other.g0.w), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn magnitude__sub__scalar(self_: Magnitude, other: Scalar) -> Magnitude {
    return Magnitude(self_.g0 - vec2<f32>(other.g0, 0.0));
}

fn magnitude__sub__transflector(self_: Magnitude, other: Transflector) -> MultiVector {
    return MultiVector(self_.g0, vec4<f32>(0.0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - other.g1);
}

fn magnitude__sub__translator(self_: Magnitude, other: Translator) -> MultiVector {
    return MultiVector(self_.g0 - vec2<f32>(0.0, other.g0.w), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn motor__sub__anti_scalar(self_: Motor, other: AntiScalar) -> Motor {
    return Motor(self_.g0 - vec4<f32>(0.0, 0.0, 0.0, other.g0), self_.g1);
}

fn motor__sub__flector(self_: Motor, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec4<f32>(0.0) - other.g0, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), self_.g1, vec4<f32>(0.0) - other.g1);
}

fn motor__sub__flector_at_infinity(self_: Motor, other: FlectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec4<f32>(0.0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), self_.g1, vec4<f32>(0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn motor__sub__horizon(self_: Motor, other: Horizon) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), self_.g1, vec4<f32>(0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn motor__sub__line(self_: Motor, other: Line) -> Motor {
    return Motor(self_.g0 - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g1 - other.g1);
}

fn motor__sub__line_at_infinity(self_: Motor, other: LineAtInfinity) -> Motor {
    return Motor(self_.g0, self_.g1 - other.g0);
}

fn motor__sub__line_at_origin(self_: Motor, other: LineAtOrigin) -> Motor {
    return Motor(self_.g0 - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g1);
}

fn motor__sub__magnitude(self_: Motor, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w) - other.g0, vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), self_.g1, vec4<f32>(0.0));
}

fn motor__sub__motor(self_: Motor, other: Motor) -> Motor {
    return Motor(self_.g0 - other.g0, self_.g1 - other.g1);
}

fn motor__sub__multi_vector(self_: Motor, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w) - other.g0, vec4<f32>(0.0) - other.g1, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) - other.g2, self_.g1 - other.g3, vec4<f32>(0.0) - other.g4);
}

fn motor__sub__multi_vector_at_infinity(self_: Motor, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w) - vec2<f32>(other.g0.x, 0.0), vec4<f32>(0.0) - vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), self_.g1 - other.g2, vec4<f32>(0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0.y));
}

fn motor__sub__multi_vector_at_origin(self_: Motor, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w) - vec2<f32>(0.0, other.g0.y), vec4<f32>(0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0.x), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) - other.g1, self_.g1, vec4<f32>(0.0) - vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0));
}

fn motor__sub__origin(self_: Motor, other: Origin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec4<f32>(0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), self_.g1, vec4<f32>(0.0));
}

fn motor__sub__plane(self_: Motor, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), self_.g1, vec4<f32>(0.0) - other.g0);
}

fn motor__sub__plane_at_origin(self_: Motor, other: PlaneAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), self_.g1, vec4<f32>(0.0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn motor__sub__point(self_: Motor, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec4<f32>(0.0) - other.g0, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), self_.g1, vec4<f32>(0.0));
}

fn motor__sub__point_at_infinity(self_: Motor, other: PointAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec4<f32>(0.0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), self_.g1, vec4<f32>(0.0));
}

fn motor__sub__rotor(self_: Motor, other: Rotor) -> Motor {
    return Motor(self_.g0 - other.g0, self_.g1);
}

fn motor__sub__scalar(self_: Motor, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w) - vec2<f32>(other.g0, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), self_.g1, vec4<f32>(0.0));
}

fn motor__sub__transflector(self_: Motor, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec4<f32>(0.0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), self_.g1, vec4<f32>(0.0) - other.g1);
}

fn motor__sub__translator(self_: Motor, other: Translator) -> Motor {
    return Motor(self_.g0 - vec4<f32>(0.0, 0.0, 0.0, other.g0.w), self_.g1 - vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn multi_vector__sub__anti_scalar(self_: MultiVector, other: AntiScalar) -> MultiVector {
    return MultiVector(self_.g0 - vec2<f32>(0.0, other.g0), self_.g1, self_.g2, self_.g3, self_.g4);
}

fn multi_vector__sub__flector(self_: MultiVector, other: Flector) -> MultiVector {
    return MultiVector(self_.g0, self_.g1 - other.g0, self_.g2, self_.g3, self_.g4 - other.g1);
}

fn multi_vector__sub__flector_at_infinity(self_: MultiVector, other: FlectorAtInfinity) -> MultiVector {
    return MultiVector(self_.g0, self_.g1 - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g2, self_.g3, self_.g4 - vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn multi_vector__sub__horizon(self_: MultiVector, other: Horizon) -> MultiVector {
    return MultiVector(self_.g0, self_.g1, self_.g2, self_.g3, self_.g4 - vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn multi_vector__sub__line(self_: MultiVector, other: Line) -> MultiVector {
    return MultiVector(self_.g0, self_.g1, self_.g2 - other.g0, self_.g3 - other.g1, self_.g4);
}

fn multi_vector__sub__line_at_infinity(self_: MultiVector, other: LineAtInfinity) -> MultiVector {
    return MultiVector(self_.g0, self_.g1, self_.g2, self_.g3 - other.g0, self_.g4);
}

fn multi_vector__sub__line_at_origin(self_: MultiVector, other: LineAtOrigin) -> MultiVector {
    return MultiVector(self_.g0, self_.g1, self_.g2 - other.g0, self_.g3, self_.g4);
}

fn multi_vector__sub__magnitude(self_: MultiVector, other: Magnitude) -> MultiVector {
    return MultiVector(self_.g0 - other.g0, self_.g1, self_.g2, self_.g3, self_.g4);
}

fn multi_vector__sub__motor(self_: MultiVector, other: Motor) -> MultiVector {
    return MultiVector(self_.g0 - vec2<f32>(0.0, other.g0.w), self_.g1, self_.g2 - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g3 - other.g1, self_.g4);
}

fn multi_vector__sub__multi_vector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return MultiVector(self_.g0 - other.g0, self_.g1 - other.g1, self_.g2 - other.g2, self_.g3 - other.g3, self_.g4 - other.g4);
}

fn multi_vector__sub__multi_vector_at_infinity(self_: MultiVector, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(self_.g0 - vec2<f32>(other.g0.x, 0.0), self_.g1 - vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), self_.g2, self_.g3 - other.g2, self_.g4 - vec4<f32>(0.0, 0.0, 0.0, other.g0.y));
}

fn multi_vector__sub__multi_vector_at_origin(self_: MultiVector, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(self_.g0 - vec2<f32>(0.0, other.g0.y), self_.g1 - vec4<f32>(0.0, 0.0, 0.0, other.g0.x), self_.g2 - other.g1, self_.g3, self_.g4 - vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0));
}

fn multi_vector__sub__origin(self_: MultiVector, other: Origin) -> MultiVector {
    return MultiVector(self_.g0, self_.g1 - vec4<f32>(0.0, 0.0, 0.0, other.g0), self_.g2, self_.g3, self_.g4);
}

fn multi_vector__sub__plane(self_: MultiVector, other: Plane) -> MultiVector {
    return MultiVector(self_.g0, self_.g1, self_.g2, self_.g3, self_.g4 - other.g0);
}

fn multi_vector__sub__plane_at_origin(self_: MultiVector, other: PlaneAtOrigin) -> MultiVector {
    return MultiVector(self_.g0, self_.g1, self_.g2, self_.g3, self_.g4 - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn multi_vector__sub__point(self_: MultiVector, other: Point) -> MultiVector {
    return MultiVector(self_.g0, self_.g1 - other.g0, self_.g2, self_.g3, self_.g4);
}

fn multi_vector__sub__point_at_infinity(self_: MultiVector, other: PointAtInfinity) -> MultiVector {
    return MultiVector(self_.g0, self_.g1 - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g2, self_.g3, self_.g4);
}

fn multi_vector__sub__rotor(self_: MultiVector, other: Rotor) -> MultiVector {
    return MultiVector(self_.g0 - vec2<f32>(0.0, other.g0.w), self_.g1, self_.g2 - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g3, self_.g4);
}

fn multi_vector__sub__scalar(self_: MultiVector, other: Scalar) -> MultiVector {
    return MultiVector(self_.g0 - vec2<f32>(other.g0, 0.0), self_.g1, self_.g2, self_.g3, self_.g4);
}

fn multi_vector__sub__transflector(self_: MultiVector, other: Transflector) -> MultiVector {
    return MultiVector(self_.g0, self_.g1 - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g2, self_.g3, self_.g4 - other.g1);
}

fn multi_vector__sub__translator(self_: MultiVector, other: Translator) -> MultiVector {
    return MultiVector(self_.g0 - vec2<f32>(0.0, other.g0.w), self_.g1, self_.g2, self_.g3 - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g4);
}

fn multi_vector_at_infinity__sub__anti_scalar(self_: MultiVectorAtInfinity, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x, 0.0) - vec2<f32>(0.0, other.g0), vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, 0.0), vec3<f32>(0.0), self_.g2, vec4<f32>(0.0, 0.0, 0.0, self_.g0.y));
}

fn multi_vector_at_infinity__sub__flector(self_: MultiVectorAtInfinity, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x, 0.0), vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, 0.0) - other.g0, vec3<f32>(0.0), self_.g2, vec4<f32>(0.0, 0.0, 0.0, self_.g0.y) - other.g1);
}

fn multi_vector_at_infinity__sub__flector_at_infinity(self_: MultiVectorAtInfinity, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0 - vec2<f32>(0.0, other.g0.w), self_.g1 - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g2);
}

fn multi_vector_at_infinity__sub__horizon(self_: MultiVectorAtInfinity, other: Horizon) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0 - vec2<f32>(0.0, other.g0), self_.g1, self_.g2);
}

fn multi_vector_at_infinity__sub__line(self_: MultiVectorAtInfinity, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x, 0.0), vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, 0.0), vec3<f32>(0.0) - other.g0, self_.g2 - other.g1, vec4<f32>(0.0, 0.0, 0.0, self_.g0.y));
}

fn multi_vector_at_infinity__sub__line_at_infinity(self_: MultiVectorAtInfinity, other: LineAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0, self_.g1, self_.g2 - other.g0);
}

fn multi_vector_at_infinity__sub__line_at_origin(self_: MultiVectorAtInfinity, other: LineAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x, 0.0), vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, 0.0), vec3<f32>(0.0) - other.g0, self_.g2, vec4<f32>(0.0, 0.0, 0.0, self_.g0.y));
}

fn multi_vector_at_infinity__sub__magnitude(self_: MultiVectorAtInfinity, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x, 0.0) - other.g0, vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, 0.0), vec3<f32>(0.0), self_.g2, vec4<f32>(0.0, 0.0, 0.0, self_.g0.y));
}

fn multi_vector_at_infinity__sub__motor(self_: MultiVectorAtInfinity, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x, 0.0) - vec2<f32>(0.0, other.g0.w), vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, 0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g2 - other.g1, vec4<f32>(0.0, 0.0, 0.0, self_.g0.y));
}

fn multi_vector_at_infinity__sub__multi_vector(self_: MultiVectorAtInfinity, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x, 0.0) - other.g0, vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, 0.0) - other.g1, vec3<f32>(0.0) - other.g2, self_.g2 - other.g3, vec4<f32>(0.0, 0.0, 0.0, self_.g0.y) - other.g4);
}

fn multi_vector_at_infinity__sub__multi_vector_at_infinity(self_: MultiVectorAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0 - other.g0, self_.g1 - other.g1, self_.g2 - other.g2);
}

fn multi_vector_at_infinity__sub__multi_vector_at_origin(self_: MultiVectorAtInfinity, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x, 0.0) - vec2<f32>(0.0, other.g0.y), vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, 0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0.x), vec3<f32>(0.0) - other.g1, self_.g2, vec4<f32>(0.0, 0.0, 0.0, self_.g0.y) - vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0));
}

fn multi_vector_at_infinity__sub__origin(self_: MultiVectorAtInfinity, other: Origin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x, 0.0), vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, 0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0), vec3<f32>(0.0), self_.g2, vec4<f32>(0.0, 0.0, 0.0, self_.g0.y));
}

fn multi_vector_at_infinity__sub__plane(self_: MultiVectorAtInfinity, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x, 0.0), vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, 0.0), vec3<f32>(0.0), self_.g2, vec4<f32>(0.0, 0.0, 0.0, self_.g0.y) - other.g0);
}

fn multi_vector_at_infinity__sub__plane_at_origin(self_: MultiVectorAtInfinity, other: PlaneAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x, 0.0), vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, 0.0), vec3<f32>(0.0), self_.g2, vec4<f32>(0.0, 0.0, 0.0, self_.g0.y) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn multi_vector_at_infinity__sub__point(self_: MultiVectorAtInfinity, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x, 0.0), vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, 0.0) - other.g0, vec3<f32>(0.0), self_.g2, vec4<f32>(0.0, 0.0, 0.0, self_.g0.y));
}

fn multi_vector_at_infinity__sub__point_at_infinity(self_: MultiVectorAtInfinity, other: PointAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0, self_.g1 - other.g0, self_.g2);
}

fn multi_vector_at_infinity__sub__rotor(self_: MultiVectorAtInfinity, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x, 0.0) - vec2<f32>(0.0, other.g0.w), vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, 0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g2, vec4<f32>(0.0, 0.0, 0.0, self_.g0.y));
}

fn multi_vector_at_infinity__sub__scalar(self_: MultiVectorAtInfinity, other: Scalar) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0 - vec2<f32>(other.g0, 0.0), self_.g1, self_.g2);
}

fn multi_vector_at_infinity__sub__transflector(self_: MultiVectorAtInfinity, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x, 0.0), vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, 0.0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(0.0), self_.g2, vec4<f32>(0.0, 0.0, 0.0, self_.g0.y) - other.g1);
}

fn multi_vector_at_infinity__sub__translator(self_: MultiVectorAtInfinity, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x, 0.0) - vec2<f32>(0.0, other.g0.w), vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, 0.0), vec3<f32>(0.0), self_.g2 - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0, 0.0, 0.0, self_.g0.y));
}

fn multi_vector_at_origin__sub__anti_scalar(self_: MultiVectorAtOrigin, other: AntiScalar) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0 - vec2<f32>(0.0, other.g0), self_.g1, self_.g2);
}

fn multi_vector_at_origin__sub__flector(self_: MultiVectorAtOrigin, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.y), vec4<f32>(0.0, 0.0, 0.0, self_.g0.x) - other.g0, self_.g1, vec3<f32>(0.0), vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, 0.0) - other.g1);
}

fn multi_vector_at_origin__sub__flector_at_infinity(self_: MultiVectorAtOrigin, other: FlectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.y), vec4<f32>(0.0, 0.0, 0.0, self_.g0.x) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g1, vec3<f32>(0.0), vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, 0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn multi_vector_at_origin__sub__horizon(self_: MultiVectorAtOrigin, other: Horizon) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.y), vec4<f32>(0.0, 0.0, 0.0, self_.g0.x), self_.g1, vec3<f32>(0.0), vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, 0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn multi_vector_at_origin__sub__line(self_: MultiVectorAtOrigin, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.y), vec4<f32>(0.0, 0.0, 0.0, self_.g0.x), self_.g1 - other.g0, vec3<f32>(0.0) - other.g1, vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, 0.0));
}

fn multi_vector_at_origin__sub__line_at_infinity(self_: MultiVectorAtOrigin, other: LineAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.y), vec4<f32>(0.0, 0.0, 0.0, self_.g0.x), self_.g1, vec3<f32>(0.0) - other.g0, vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, 0.0));
}

fn multi_vector_at_origin__sub__line_at_origin(self_: MultiVectorAtOrigin, other: LineAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0, self_.g1 - other.g0, self_.g2);
}

fn multi_vector_at_origin__sub__magnitude(self_: MultiVectorAtOrigin, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.y) - other.g0, vec4<f32>(0.0, 0.0, 0.0, self_.g0.x), self_.g1, vec3<f32>(0.0), vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, 0.0));
}

fn multi_vector_at_origin__sub__motor(self_: MultiVectorAtOrigin, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.y) - vec2<f32>(0.0, other.g0.w), vec4<f32>(0.0, 0.0, 0.0, self_.g0.x), self_.g1 - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0) - other.g1, vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, 0.0));
}

fn multi_vector_at_origin__sub__multi_vector(self_: MultiVectorAtOrigin, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.y) - other.g0, vec4<f32>(0.0, 0.0, 0.0, self_.g0.x) - other.g1, self_.g1 - other.g2, vec3<f32>(0.0) - other.g3, vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, 0.0) - other.g4);
}

fn multi_vector_at_origin__sub__multi_vector_at_infinity(self_: MultiVectorAtOrigin, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.y) - vec2<f32>(other.g0.x, 0.0), vec4<f32>(0.0, 0.0, 0.0, self_.g0.x) - vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), self_.g1, vec3<f32>(0.0) - other.g2, vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, 0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0.y));
}

fn multi_vector_at_origin__sub__multi_vector_at_origin(self_: MultiVectorAtOrigin, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0 - other.g0, self_.g1 - other.g1, self_.g2 - other.g2);
}

fn multi_vector_at_origin__sub__origin(self_: MultiVectorAtOrigin, other: Origin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0 - vec2<f32>(other.g0, 0.0), self_.g1, self_.g2);
}

fn multi_vector_at_origin__sub__plane(self_: MultiVectorAtOrigin, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.y), vec4<f32>(0.0, 0.0, 0.0, self_.g0.x), self_.g1, vec3<f32>(0.0), vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, 0.0) - other.g0);
}

fn multi_vector_at_origin__sub__plane_at_origin(self_: MultiVectorAtOrigin, other: PlaneAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0, self_.g1, self_.g2 - other.g0);
}

fn multi_vector_at_origin__sub__point(self_: MultiVectorAtOrigin, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.y), vec4<f32>(0.0, 0.0, 0.0, self_.g0.x) - other.g0, self_.g1, vec3<f32>(0.0), vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, 0.0));
}

fn multi_vector_at_origin__sub__point_at_infinity(self_: MultiVectorAtOrigin, other: PointAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.y), vec4<f32>(0.0, 0.0, 0.0, self_.g0.x) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g1, vec3<f32>(0.0), vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, 0.0));
}

fn multi_vector_at_origin__sub__rotor(self_: MultiVectorAtOrigin, other: Rotor) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0 - vec2<f32>(0.0, other.g0.w), self_.g1 - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g2);
}

fn multi_vector_at_origin__sub__scalar(self_: MultiVectorAtOrigin, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.y) - vec2<f32>(other.g0, 0.0), vec4<f32>(0.0, 0.0, 0.0, self_.g0.x), self_.g1, vec3<f32>(0.0), vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, 0.0));
}

fn multi_vector_at_origin__sub__transflector(self_: MultiVectorAtOrigin, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.y), vec4<f32>(0.0, 0.0, 0.0, self_.g0.x) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g1, vec3<f32>(0.0), vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, 0.0) - other.g1);
}

fn multi_vector_at_origin__sub__translator(self_: MultiVectorAtOrigin, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.y) - vec2<f32>(0.0, other.g0.w), vec4<f32>(0.0, 0.0, 0.0, self_.g0.x), self_.g1, vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, 0.0));
}

fn origin__sub__anti_scalar(self_: Origin, other: AntiScalar) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0, 0.0) - vec2<f32>(0.0, other.g0), vec3<f32>(0.0), vec3<f32>(0.0));
}

fn origin__sub__flector(self_: Origin, other: Flector) -> Flector {
    return Flector(vec4<f32>(0.0, 0.0, 0.0, self_.g0) - other.g0, vec4<f32>(0.0) - other.g1);
}

fn origin__sub__flector_at_infinity(self_: Origin, other: FlectorAtInfinity) -> Flector {
    return Flector(vec4<f32>(0.0, 0.0, 0.0, self_.g0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn origin__sub__horizon(self_: Origin, other: Horizon) -> Flector {
    return Flector(vec4<f32>(0.0, 0.0, 0.0, self_.g0), vec4<f32>(0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn origin__sub__line(self_: Origin, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0, 0.0, 0.0, self_.g0), vec3<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec4<f32>(0.0));
}

fn origin__sub__line_at_infinity(self_: Origin, other: LineAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0, 0.0, 0.0, self_.g0), vec3<f32>(0.0), vec3<f32>(0.0) - other.g0, vec4<f32>(0.0));
}

fn origin__sub__line_at_origin(self_: Origin, other: LineAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0, 0.0), vec3<f32>(0.0) - other.g0, vec3<f32>(0.0));
}

fn origin__sub__magnitude(self_: Origin, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0, vec4<f32>(0.0, 0.0, 0.0, self_.g0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn origin__sub__motor(self_: Origin, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), vec4<f32>(0.0, 0.0, 0.0, self_.g0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0) - other.g1, vec4<f32>(0.0));
}

fn origin__sub__multi_vector(self_: Origin, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0, vec4<f32>(0.0, 0.0, 0.0, self_.g0) - other.g1, vec3<f32>(0.0) - other.g2, vec3<f32>(0.0) - other.g3, vec4<f32>(0.0) - other.g4);
}

fn origin__sub__multi_vector_at_infinity(self_: Origin, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(other.g0.x, 0.0), vec4<f32>(0.0, 0.0, 0.0, self_.g0) - vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0) - other.g2, vec4<f32>(0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0.y));
}

fn origin__sub__multi_vector_at_origin(self_: Origin, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0, 0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec3<f32>(0.0) - other.g2);
}

fn origin__sub__origin(self_: Origin, other: Origin) -> Origin {
    return Origin(self_.g0 - other.g0);
}

fn origin__sub__plane(self_: Origin, other: Plane) -> Flector {
    return Flector(vec4<f32>(0.0, 0.0, 0.0, self_.g0), vec4<f32>(0.0) - other.g0);
}

fn origin__sub__plane_at_origin(self_: Origin, other: PlaneAtOrigin) -> Flector {
    return Flector(vec4<f32>(0.0, 0.0, 0.0, self_.g0), vec4<f32>(0.0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn origin__sub__point(self_: Origin, other: Point) -> Point {
    return Point(vec4<f32>(0.0, 0.0, 0.0, self_.g0) - other.g0);
}

fn origin__sub__point_at_infinity(self_: Origin, other: PointAtInfinity) -> Point {
    return Point(vec4<f32>(0.0, 0.0, 0.0, self_.g0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn origin__sub__rotor(self_: Origin, other: Rotor) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0, 0.0) - vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0));
}

fn origin__sub__scalar(self_: Origin, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(other.g0, 0.0), vec4<f32>(0.0, 0.0, 0.0, self_.g0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn origin__sub__transflector(self_: Origin, other: Transflector) -> Flector {
    return Flector(vec4<f32>(0.0, 0.0, 0.0, self_.g0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(0.0) - other.g1);
}

fn origin__sub__translator(self_: Origin, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), vec4<f32>(0.0, 0.0, 0.0, self_.g0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn plane__sub__anti_scalar(self_: Plane, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0);
}

fn plane__sub__flector(self_: Plane, other: Flector) -> Flector {
    return Flector(vec4<f32>(0.0) - other.g0, self_.g0 - other.g1);
}

fn plane__sub__flector_at_infinity(self_: Plane, other: FlectorAtInfinity) -> Transflector {
    return Transflector(vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g0 - vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn plane__sub__horizon(self_: Plane, other: Horizon) -> Plane {
    return Plane(self_.g0 - vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn plane__sub__line(self_: Plane, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, self_.g0);
}

fn plane__sub__line_at_infinity(self_: Plane, other: LineAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - other.g0, self_.g0);
}

fn plane__sub__line_at_origin(self_: Plane, other: LineAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - other.g0, vec3<f32>(0.0), self_.g0);
}

fn plane__sub__magnitude(self_: Plane, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0);
}

fn plane__sub__motor(self_: Plane, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0) - other.g1, self_.g0);
}

fn plane__sub__multi_vector(self_: Plane, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0, vec4<f32>(0.0) - other.g1, vec3<f32>(0.0) - other.g2, vec3<f32>(0.0) - other.g3, self_.g0 - other.g4);
}

fn plane__sub__multi_vector_at_infinity(self_: Plane, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(other.g0.x, 0.0), vec4<f32>(0.0) - vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0) - other.g2, self_.g0 - vec4<f32>(0.0, 0.0, 0.0, other.g0.y));
}

fn plane__sub__multi_vector_at_origin(self_: Plane, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.y), vec4<f32>(0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0.x), vec3<f32>(0.0) - other.g1, vec3<f32>(0.0), self_.g0 - vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0));
}

fn plane__sub__origin(self_: Plane, other: Origin) -> Flector {
    return Flector(vec4<f32>(0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0), self_.g0);
}

fn plane__sub__plane(self_: Plane, other: Plane) -> Plane {
    return Plane(self_.g0 - other.g0);
}

fn plane__sub__plane_at_origin(self_: Plane, other: PlaneAtOrigin) -> Plane {
    return Plane(self_.g0 - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn plane__sub__point(self_: Plane, other: Point) -> Flector {
    return Flector(vec4<f32>(0.0) - other.g0, self_.g0);
}

fn plane__sub__point_at_infinity(self_: Plane, other: PointAtInfinity) -> Transflector {
    return Transflector(vec3<f32>(0.0) - other.g0, self_.g0);
}

fn plane__sub__rotor(self_: Plane, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), self_.g0);
}

fn plane__sub__scalar(self_: Plane, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(other.g0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0);
}

fn plane__sub__transflector(self_: Plane, other: Transflector) -> Transflector {
    return Transflector(vec3<f32>(0.0) - other.g0, self_.g0 - other.g1);
}

fn plane__sub__translator(self_: Plane, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g0);
}

fn plane_at_origin__sub__anti_scalar(self_: PlaneAtOrigin, other: AntiScalar) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0), vec3<f32>(0.0), self_.g0);
}

fn plane_at_origin__sub__flector(self_: PlaneAtOrigin, other: Flector) -> Flector {
    return Flector(vec4<f32>(0.0) - other.g0, vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) - other.g1);
}

fn plane_at_origin__sub__flector_at_infinity(self_: PlaneAtOrigin, other: FlectorAtInfinity) -> Transflector {
    return Transflector(vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn plane_at_origin__sub__horizon(self_: PlaneAtOrigin, other: Horizon) -> Plane {
    return Plane(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn plane_at_origin__sub__line(self_: PlaneAtOrigin, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0));
}

fn plane_at_origin__sub__line_at_infinity(self_: PlaneAtOrigin, other: LineAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - other.g0, vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0));
}

fn plane_at_origin__sub__line_at_origin(self_: PlaneAtOrigin, other: LineAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(0.0), vec3<f32>(0.0) - other.g0, self_.g0);
}

fn plane_at_origin__sub__magnitude(self_: PlaneAtOrigin, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0));
}

fn plane_at_origin__sub__motor(self_: PlaneAtOrigin, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0) - other.g1, vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0));
}

fn plane_at_origin__sub__multi_vector(self_: PlaneAtOrigin, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0, vec4<f32>(0.0) - other.g1, vec3<f32>(0.0) - other.g2, vec3<f32>(0.0) - other.g3, vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) - other.g4);
}

fn plane_at_origin__sub__multi_vector_at_infinity(self_: PlaneAtOrigin, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(other.g0.x, 0.0), vec4<f32>(0.0) - vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0) - other.g2, vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0.y));
}

fn plane_at_origin__sub__multi_vector_at_origin(self_: PlaneAtOrigin, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, self_.g0 - other.g2);
}

fn plane_at_origin__sub__origin(self_: PlaneAtOrigin, other: Origin) -> Flector {
    return Flector(vec4<f32>(0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0));
}

fn plane_at_origin__sub__plane(self_: PlaneAtOrigin, other: Plane) -> Plane {
    return Plane(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) - other.g0);
}

fn plane_at_origin__sub__plane_at_origin(self_: PlaneAtOrigin, other: PlaneAtOrigin) -> PlaneAtOrigin {
    return PlaneAtOrigin(self_.g0 - other.g0);
}

fn plane_at_origin__sub__point(self_: PlaneAtOrigin, other: Point) -> Flector {
    return Flector(vec4<f32>(0.0) - other.g0, vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0));
}

fn plane_at_origin__sub__point_at_infinity(self_: PlaneAtOrigin, other: PointAtInfinity) -> Transflector {
    return Transflector(vec3<f32>(0.0) - other.g0, vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0));
}

fn plane_at_origin__sub__rotor(self_: PlaneAtOrigin, other: Rotor) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g0);
}

fn plane_at_origin__sub__scalar(self_: PlaneAtOrigin, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(other.g0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0));
}

fn plane_at_origin__sub__transflector(self_: PlaneAtOrigin, other: Transflector) -> Transflector {
    return Transflector(vec3<f32>(0.0) - other.g0, vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) - other.g1);
}

fn plane_at_origin__sub__translator(self_: PlaneAtOrigin, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0));
}

fn point__sub__anti_scalar(self_: Point, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0), self_.g0, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn point__sub__flector(self_: Point, other: Flector) -> Flector {
    return Flector(self_.g0 - other.g0, vec4<f32>(0.0) - other.g1);
}

fn point__sub__flector_at_infinity(self_: Point, other: FlectorAtInfinity) -> Flector {
    return Flector(self_.g0 - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn point__sub__horizon(self_: Point, other: Horizon) -> Flector {
    return Flector(self_.g0, vec4<f32>(0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn point__sub__line(self_: Point, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0, vec3<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec4<f32>(0.0));
}

fn point__sub__line_at_infinity(self_: Point, other: LineAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0, vec3<f32>(0.0), vec3<f32>(0.0) - other.g0, vec4<f32>(0.0));
}

fn point__sub__line_at_origin(self_: Point, other: LineAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), self_.g0, vec3<f32>(0.0) - other.g0, vec3<f32>(0.0), vec4<f32>(0.0));
}

fn point__sub__magnitude(self_: Point, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0, self_.g0, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn point__sub__motor(self_: Point, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), self_.g0, vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0) - other.g1, vec4<f32>(0.0));
}

fn point__sub__multi_vector(self_: Point, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0, self_.g0 - other.g1, vec3<f32>(0.0) - other.g2, vec3<f32>(0.0) - other.g3, vec4<f32>(0.0) - other.g4);
}

fn point__sub__multi_vector_at_infinity(self_: Point, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(other.g0.x, 0.0), self_.g0 - vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0) - other.g2, vec4<f32>(0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0.y));
}

fn point__sub__multi_vector_at_origin(self_: Point, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.y), self_.g0 - vec4<f32>(0.0, 0.0, 0.0, other.g0.x), vec3<f32>(0.0) - other.g1, vec3<f32>(0.0), vec4<f32>(0.0) - vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0));
}

fn point__sub__origin(self_: Point, other: Origin) -> Point {
    return Point(self_.g0 - vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn point__sub__plane(self_: Point, other: Plane) -> Flector {
    return Flector(self_.g0, vec4<f32>(0.0) - other.g0);
}

fn point__sub__plane_at_origin(self_: Point, other: PlaneAtOrigin) -> Flector {
    return Flector(self_.g0, vec4<f32>(0.0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn point__sub__point(self_: Point, other: Point) -> Point {
    return Point(self_.g0 - other.g0);
}

fn point__sub__point_at_infinity(self_: Point, other: PointAtInfinity) -> Point {
    return Point(self_.g0 - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn point__sub__rotor(self_: Point, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), self_.g0, vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn point__sub__scalar(self_: Point, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(other.g0, 0.0), self_.g0, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn point__sub__transflector(self_: Point, other: Transflector) -> Flector {
    return Flector(self_.g0 - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(0.0) - other.g1);
}

fn point__sub__translator(self_: Point, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), self_.g0, vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn point_at_infinity__sub__anti_scalar(self_: PointAtInfinity, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn point_at_infinity__sub__flector(self_: PointAtInfinity, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) - other.g0, vec4<f32>(0.0) - other.g1);
}

fn point_at_infinity__sub__flector_at_infinity(self_: PointAtInfinity, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) - other.g0);
}

fn point_at_infinity__sub__horizon(self_: PointAtInfinity, other: Horizon) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn point_at_infinity__sub__line(self_: PointAtInfinity, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec3<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec4<f32>(0.0));
}

fn point_at_infinity__sub__line_at_infinity(self_: PointAtInfinity, other: LineAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(0.0), self_.g0, vec3<f32>(0.0) - other.g0);
}

fn point_at_infinity__sub__line_at_origin(self_: PointAtInfinity, other: LineAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec3<f32>(0.0) - other.g0, vec3<f32>(0.0), vec4<f32>(0.0));
}

fn point_at_infinity__sub__magnitude(self_: PointAtInfinity, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0, vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn point_at_infinity__sub__motor(self_: PointAtInfinity, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0) - other.g1, vec4<f32>(0.0));
}

fn point_at_infinity__sub__multi_vector(self_: PointAtInfinity, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0, vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) - other.g1, vec3<f32>(0.0) - other.g2, vec3<f32>(0.0) - other.g3, vec4<f32>(0.0) - other.g4);
}

fn point_at_infinity__sub__multi_vector_at_infinity(self_: PointAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(0.0) - other.g0, self_.g0 - other.g1, vec3<f32>(0.0) - other.g2);
}

fn point_at_infinity__sub__multi_vector_at_origin(self_: PointAtInfinity, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.y), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0.x), vec3<f32>(0.0) - other.g1, vec3<f32>(0.0), vec4<f32>(0.0) - vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0));
}

fn point_at_infinity__sub__origin(self_: PointAtInfinity, other: Origin) -> Point {
    return Point(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn point_at_infinity__sub__plane(self_: PointAtInfinity, other: Plane) -> Transflector {
    return Transflector(self_.g0, vec4<f32>(0.0) - other.g0);
}

fn point_at_infinity__sub__plane_at_origin(self_: PointAtInfinity, other: PlaneAtOrigin) -> Transflector {
    return Transflector(self_.g0, vec4<f32>(0.0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn point_at_infinity__sub__point(self_: PointAtInfinity, other: Point) -> Point {
    return Point(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) - other.g0);
}

fn point_at_infinity__sub__point_at_infinity(self_: PointAtInfinity, other: PointAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(self_.g0 - other.g0);
}

fn point_at_infinity__sub__rotor(self_: PointAtInfinity, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn point_at_infinity__sub__scalar(self_: PointAtInfinity, other: Scalar) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(0.0) - vec2<f32>(other.g0, 0.0), self_.g0, vec3<f32>(0.0));
}

fn point_at_infinity__sub__transflector(self_: PointAtInfinity, other: Transflector) -> Transflector {
    return Transflector(self_.g0 - other.g0, vec4<f32>(0.0) - other.g1);
}

fn point_at_infinity__sub__translator(self_: PointAtInfinity, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn rotor__sub__anti_scalar(self_: Rotor, other: AntiScalar) -> Rotor {
    return Rotor(self_.g0 - vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn rotor__sub__flector(self_: Rotor, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec4<f32>(0.0) - other.g0, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), vec4<f32>(0.0) - other.g1);
}

fn rotor__sub__flector_at_infinity(self_: Rotor, other: FlectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec4<f32>(0.0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), vec4<f32>(0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn rotor__sub__horizon(self_: Rotor, other: Horizon) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), vec4<f32>(0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn rotor__sub__line(self_: Rotor, other: Line) -> Motor {
    return Motor(self_.g0 - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(0.0) - other.g1);
}

fn rotor__sub__line_at_infinity(self_: Rotor, other: LineAtInfinity) -> Motor {
    return Motor(self_.g0, vec3<f32>(0.0) - other.g0);
}

fn rotor__sub__line_at_origin(self_: Rotor, other: LineAtOrigin) -> Rotor {
    return Rotor(self_.g0 - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn rotor__sub__magnitude(self_: Rotor, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w) - other.g0, vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn rotor__sub__motor(self_: Rotor, other: Motor) -> Motor {
    return Motor(self_.g0 - other.g0, vec3<f32>(0.0) - other.g1);
}

fn rotor__sub__multi_vector(self_: Rotor, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w) - other.g0, vec4<f32>(0.0) - other.g1, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) - other.g2, vec3<f32>(0.0) - other.g3, vec4<f32>(0.0) - other.g4);
}

fn rotor__sub__multi_vector_at_infinity(self_: Rotor, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w) - vec2<f32>(other.g0.x, 0.0), vec4<f32>(0.0) - vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0) - other.g2, vec4<f32>(0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0.y));
}

fn rotor__sub__multi_vector_at_origin(self_: Rotor, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(0.0, self_.g0.w) - other.g0, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) - other.g1, vec3<f32>(0.0) - other.g2);
}

fn rotor__sub__origin(self_: Rotor, other: Origin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(0.0, self_.g0.w) - vec2<f32>(other.g0, 0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0));
}

fn rotor__sub__plane(self_: Rotor, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), vec4<f32>(0.0) - other.g0);
}

fn rotor__sub__plane_at_origin(self_: Rotor, other: PlaneAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(0.0, self_.g0.w), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0) - other.g0);
}

fn rotor__sub__point(self_: Rotor, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec4<f32>(0.0) - other.g0, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn rotor__sub__point_at_infinity(self_: Rotor, other: PointAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec4<f32>(0.0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn rotor__sub__rotor(self_: Rotor, other: Rotor) -> Rotor {
    return Rotor(self_.g0 - other.g0);
}

fn rotor__sub__scalar(self_: Rotor, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w) - vec2<f32>(other.g0, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn rotor__sub__transflector(self_: Rotor, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec4<f32>(0.0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), vec4<f32>(0.0) - other.g1);
}

fn rotor__sub__translator(self_: Rotor, other: Translator) -> Motor {
    return Motor(self_.g0 - vec4<f32>(0.0, 0.0, 0.0, other.g0.w), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn scalar__sub__anti_scalar(self_: Scalar, other: AntiScalar) -> Magnitude {
    return Magnitude(vec2<f32>(self_.g0, 0.0) - vec2<f32>(0.0, other.g0));
}

fn scalar__sub__flector(self_: Scalar, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0), vec4<f32>(0.0) - other.g0, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - other.g1);
}

fn scalar__sub__flector_at_infinity(self_: Scalar, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0, 0.0) - vec2<f32>(0.0, other.g0.w), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0));
}

fn scalar__sub__horizon(self_: Scalar, other: Horizon) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0, 0.0) - vec2<f32>(0.0, other.g0), vec3<f32>(0.0), vec3<f32>(0.0));
}

fn scalar__sub__line(self_: Scalar, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec4<f32>(0.0));
}

fn scalar__sub__line_at_infinity(self_: Scalar, other: LineAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0, 0.0), vec3<f32>(0.0), vec3<f32>(0.0) - other.g0);
}

fn scalar__sub__line_at_origin(self_: Scalar, other: LineAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0) - other.g0, vec3<f32>(0.0), vec4<f32>(0.0));
}

fn scalar__sub__magnitude(self_: Scalar, other: Magnitude) -> Magnitude {
    return Magnitude(vec2<f32>(self_.g0, 0.0) - other.g0);
}

fn scalar__sub__motor(self_: Scalar, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0) - vec2<f32>(0.0, other.g0.w), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0) - other.g1, vec4<f32>(0.0));
}

fn scalar__sub__multi_vector(self_: Scalar, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0) - other.g0, vec4<f32>(0.0) - other.g1, vec3<f32>(0.0) - other.g2, vec3<f32>(0.0) - other.g3, vec4<f32>(0.0) - other.g4);
}

fn scalar__sub__multi_vector_at_infinity(self_: Scalar, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0, 0.0) - other.g0, vec3<f32>(0.0) - other.g1, vec3<f32>(0.0) - other.g2);
}

fn scalar__sub__multi_vector_at_origin(self_: Scalar, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0) - vec2<f32>(0.0, other.g0.y), vec4<f32>(0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0.x), vec3<f32>(0.0) - other.g1, vec3<f32>(0.0), vec4<f32>(0.0) - vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0));
}

fn scalar__sub__origin(self_: Scalar, other: Origin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0), vec4<f32>(0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn scalar__sub__plane(self_: Scalar, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - other.g0);
}

fn scalar__sub__plane_at_origin(self_: Scalar, other: PlaneAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn scalar__sub__point(self_: Scalar, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0), vec4<f32>(0.0) - other.g0, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn scalar__sub__point_at_infinity(self_: Scalar, other: PointAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0, 0.0), vec3<f32>(0.0) - other.g0, vec3<f32>(0.0));
}

fn scalar__sub__rotor(self_: Scalar, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0) - vec2<f32>(0.0, other.g0.w), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn scalar__sub__scalar(self_: Scalar, other: Scalar) -> Scalar {
    return Scalar(self_.g0 - other.g0);
}

fn scalar__sub__transflector(self_: Scalar, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0), vec4<f32>(0.0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0) - other.g1);
}

fn scalar__sub__translator(self_: Scalar, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0, 0.0) - vec2<f32>(0.0, other.g0.w), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn transflector__sub__anti_scalar(self_: Transflector, other: AntiScalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g1);
}

fn transflector__sub__flector(self_: Transflector, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) - other.g0, self_.g1 - other.g1);
}

fn transflector__sub__flector_at_infinity(self_: Transflector, other: FlectorAtInfinity) -> Transflector {
    return Transflector(self_.g0 - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g1 - vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn transflector__sub__horizon(self_: Transflector, other: Horizon) -> Transflector {
    return Transflector(self_.g0, self_.g1 - vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn transflector__sub__line(self_: Transflector, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec3<f32>(0.0) - other.g0, vec3<f32>(0.0) - other.g1, self_.g1);
}

fn transflector__sub__line_at_infinity(self_: Transflector, other: LineAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0) - other.g0, self_.g1);
}

fn transflector__sub__line_at_origin(self_: Transflector, other: LineAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec3<f32>(0.0) - other.g0, vec3<f32>(0.0), self_.g1);
}

fn transflector__sub__magnitude(self_: Transflector, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0, vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g1);
}

fn transflector__sub__motor(self_: Transflector, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0) - other.g1, self_.g1);
}

fn transflector__sub__multi_vector(self_: Transflector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - other.g0, vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) - other.g1, vec3<f32>(0.0) - other.g2, vec3<f32>(0.0) - other.g3, self_.g1 - other.g4);
}

fn transflector__sub__multi_vector_at_infinity(self_: Transflector, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(other.g0.x, 0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) - vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0) - other.g2, self_.g1 - vec4<f32>(0.0, 0.0, 0.0, other.g0.y));
}

fn transflector__sub__multi_vector_at_origin(self_: Transflector, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.y), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0.x), vec3<f32>(0.0) - other.g1, vec3<f32>(0.0), self_.g1 - vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0));
}

fn transflector__sub__origin(self_: Transflector, other: Origin) -> Flector {
    return Flector(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0), self_.g1);
}

fn transflector__sub__plane(self_: Transflector, other: Plane) -> Transflector {
    return Transflector(self_.g0, self_.g1 - other.g0);
}

fn transflector__sub__plane_at_origin(self_: Transflector, other: PlaneAtOrigin) -> Transflector {
    return Transflector(self_.g0, self_.g1 - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn transflector__sub__point(self_: Transflector, other: Point) -> Flector {
    return Flector(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0) - other.g0, self_.g1);
}

fn transflector__sub__point_at_infinity(self_: Transflector, other: PointAtInfinity) -> Transflector {
    return Transflector(self_.g0 - other.g0, self_.g1);
}

fn transflector__sub__rotor(self_: Transflector, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), self_.g1);
}

fn transflector__sub__scalar(self_: Transflector, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(other.g0, 0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g1);
}

fn transflector__sub__transflector(self_: Transflector, other: Transflector) -> Transflector {
    return Transflector(self_.g0 - other.g0, self_.g1 - other.g1);
}

fn transflector__sub__translator(self_: Transflector, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(0.0, other.g0.w), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g1);
}

fn translator__sub__anti_scalar(self_: Translator, other: AntiScalar) -> Translator {
    return Translator(self_.g0 - vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn translator__sub__flector(self_: Translator, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec4<f32>(0.0) - other.g0, vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec4<f32>(0.0) - other.g1);
}

fn translator__sub__flector_at_infinity(self_: Translator, other: FlectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec4<f32>(0.0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec4<f32>(0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn translator__sub__horizon(self_: Translator, other: Horizon) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec4<f32>(0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn translator__sub__line(self_: Translator, other: Line) -> Motor {
    return Motor(vec4<f32>(0.0, 0.0, 0.0, self_.g0.w) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) - other.g1);
}

fn translator__sub__line_at_infinity(self_: Translator, other: LineAtInfinity) -> Translator {
    return Translator(self_.g0 - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn translator__sub__line_at_origin(self_: Translator, other: LineAtOrigin) -> Motor {
    return Motor(vec4<f32>(0.0, 0.0, 0.0, self_.g0.w) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z));
}

fn translator__sub__magnitude(self_: Translator, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w) - other.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec4<f32>(0.0));
}

fn translator__sub__motor(self_: Translator, other: Motor) -> Motor {
    return Motor(vec4<f32>(0.0, 0.0, 0.0, self_.g0.w) - other.g0, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) - other.g1);
}

fn translator__sub__multi_vector(self_: Translator, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w) - other.g0, vec4<f32>(0.0) - other.g1, vec3<f32>(0.0) - other.g2, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) - other.g3, vec4<f32>(0.0) - other.g4);
}

fn translator__sub__multi_vector_at_infinity(self_: Translator, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w) - vec2<f32>(other.g0.x, 0.0), vec4<f32>(0.0) - vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) - other.g2, vec4<f32>(0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0.y));
}

fn translator__sub__multi_vector_at_origin(self_: Translator, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w) - vec2<f32>(0.0, other.g0.y), vec4<f32>(0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0.x), vec3<f32>(0.0) - other.g1, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec4<f32>(0.0) - vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0));
}

fn translator__sub__origin(self_: Translator, other: Origin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec4<f32>(0.0) - vec4<f32>(0.0, 0.0, 0.0, other.g0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec4<f32>(0.0));
}

fn translator__sub__plane(self_: Translator, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec4<f32>(0.0) - other.g0);
}

fn translator__sub__plane_at_origin(self_: Translator, other: PlaneAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec4<f32>(0.0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn translator__sub__point(self_: Translator, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec4<f32>(0.0) - other.g0, vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec4<f32>(0.0));
}

fn translator__sub__point_at_infinity(self_: Translator, other: PointAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec4<f32>(0.0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec4<f32>(0.0));
}

fn translator__sub__rotor(self_: Translator, other: Rotor) -> Motor {
    return Motor(vec4<f32>(0.0, 0.0, 0.0, self_.g0.w) - other.g0, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z));
}

fn translator__sub__scalar(self_: Translator, other: Scalar) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w) - vec2<f32>(other.g0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec4<f32>(0.0));
}

fn translator__sub__transflector(self_: Translator, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0, self_.g0.w), vec4<f32>(0.0) - vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z), vec4<f32>(0.0) - other.g1);
}

fn translator__sub__translator(self_: Translator, other: Translator) -> Translator {
    return Translator(self_.g0 - other.g0);
}

fn anti_scalar__anti_wedge_dot__anti_scalar(self_: AntiScalar, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0);
}

fn anti_scalar__anti_wedge_dot__flector(self_: AntiScalar, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0) * other.g0, vec4<f32>(self_.g0) * other.g1);
}

fn anti_scalar__anti_wedge_dot__flector_at_infinity(self_: AntiScalar, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0) * other.g0);
}

fn anti_scalar__anti_wedge_dot__horizon(self_: AntiScalar, other: Horizon) -> Horizon {
    return Horizon(self_.g0 * other.g0);
}

fn anti_scalar__anti_wedge_dot__line(self_: AntiScalar, other: Line) -> Line {
    return Line(vec3<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1);
}

fn anti_scalar__anti_wedge_dot__line_at_infinity(self_: AntiScalar, other: LineAtInfinity) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(self_.g0) * other.g0);
}

fn anti_scalar__anti_wedge_dot__line_at_origin(self_: AntiScalar, other: LineAtOrigin) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(self_.g0) * other.g0);
}

fn anti_scalar__anti_wedge_dot__magnitude(self_: AntiScalar, other: Magnitude) -> Magnitude {
    return Magnitude(vec2<f32>(self_.g0) * other.g0);
}

fn anti_scalar__anti_wedge_dot__motor(self_: AntiScalar, other: Motor) -> Motor {
    return Motor(vec4<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1);
}

fn anti_scalar__anti_wedge_dot__multi_vector(self_: AntiScalar, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0) * other.g0, vec4<f32>(self_.g0) * other.g1, vec3<f32>(self_.g0) * other.g2, vec3<f32>(self_.g0) * other.g3, vec4<f32>(self_.g0) * other.g4);
}

fn anti_scalar__anti_wedge_dot__multi_vector_at_infinity(self_: AntiScalar, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1, vec3<f32>(self_.g0) * other.g2);
}

fn anti_scalar__anti_wedge_dot__multi_vector_at_origin(self_: AntiScalar, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1, vec3<f32>(self_.g0) * other.g2);
}

fn anti_scalar__anti_wedge_dot__origin(self_: AntiScalar, other: Origin) -> Origin {
    return Origin(self_.g0 * other.g0);
}

fn anti_scalar__anti_wedge_dot__plane(self_: AntiScalar, other: Plane) -> Plane {
    return Plane(vec4<f32>(self_.g0) * other.g0);
}

fn anti_scalar__anti_wedge_dot__plane_at_origin(self_: AntiScalar, other: PlaneAtOrigin) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0) * other.g0);
}

fn anti_scalar__anti_wedge_dot__point(self_: AntiScalar, other: Point) -> Point {
    return Point(vec4<f32>(self_.g0) * other.g0);
}

fn anti_scalar__anti_wedge_dot__point_at_infinity(self_: AntiScalar, other: PointAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0) * other.g0);
}

fn anti_scalar__anti_wedge_dot__rotor(self_: AntiScalar, other: Rotor) -> Rotor {
    return Rotor(vec4<f32>(self_.g0) * other.g0);
}

fn anti_scalar__anti_wedge_dot__scalar(self_: AntiScalar, other: Scalar) -> Scalar {
    return Scalar(self_.g0 * other.g0);
}

fn anti_scalar__anti_wedge_dot__transflector(self_: AntiScalar, other: Transflector) -> Transflector {
    return Transflector(vec3<f32>(self_.g0) * other.g0, vec4<f32>(self_.g0) * other.g1);
}

fn anti_scalar__anti_wedge_dot__translator(self_: AntiScalar, other: Translator) -> Translator {
    return Translator(vec4<f32>(self_.g0) * other.g0);
}

fn flector__anti_wedge_dot__anti_scalar(self_: Flector, other: AntiScalar) -> Flector {
    return Flector(self_.g0 * vec4<f32>(other.g0), self_.g1 * vec4<f32>(other.g0));
}

fn flector__anti_wedge_dot__flector(self_: Flector, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) - vec2<f32>(self_.g0.w) * vec2<f32>(other.g1.w, other.g0.w) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, other.g1.z) + vec2<f32>(self_.g1.w) * vec2<f32>(other.g0.w, 0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, -other.g0.w, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.w, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(0.0));
}

fn flector__anti_wedge_dot__flector_at_infinity(self_: Flector, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.w) * vec2<f32>(-other.g0.w, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w));
}

fn flector__anti_wedge_dot__horizon(self_: Flector, other: Horizon) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.w) * vec2<f32>(-other.g0, 0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0));
}

fn flector__anti_wedge_dot__line(self_: Flector, other: Line) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g0.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z));
}

fn flector__anti_wedge_dot__line_at_infinity(self_: Flector, other: LineAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z));
}

fn flector__anti_wedge_dot__line_at_origin(self_: Flector, other: LineAtOrigin) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g1.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g0.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn flector__anti_wedge_dot__magnitude(self_: Flector, other: Magnitude) -> Flector {
    return Flector(self_.g0 * vec4<f32>(other.g0.y) + self_.g1.xyzx * vec4<f32>(other.g0.x, other.g0.x, other.g0.x, 0.0), vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + self_.g1 * vec4<f32>(other.g0.y));
}

fn flector__anti_wedge_dot__motor(self_: Flector, other: Motor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, other.g0.w) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g0.wwwz * other.g0.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, -other.g1.z) + vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn flector__anti_wedge_dot__multi_vector(self_: Flector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g4.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g4.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g4.z, 0.0) - vec2<f32>(self_.g0.w) * vec2<f32>(other.g4.w, other.g1.w) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, other.g4.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, other.g4.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g1.z, other.g4.z) + vec2<f32>(self_.g1.w) * vec2<f32>(other.g1.w, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.y, other.g2.z, -other.g2.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.z, other.g0.y, other.g2.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g2.y, -other.g2.x, other.g0.y, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g3.x, other.g3.y, other.g3.z, other.g0.y) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.x, other.g3.z, -other.g3.y, -other.g2.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g3.z, other.g0.x, other.g3.x, -other.g2.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g3.y, -other.g3.x, other.g0.x, -other.g2.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g1.w, -other.g4.z, other.g4.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g4.z, -other.g1.w, -other.g4.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g4.y, other.g4.x, -other.g1.w), vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.w, other.g4.z, -other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g4.z, other.g1.w, other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g4.y, -other.g4.x, other.g1.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g4.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, -other.g4.w, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g4.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, other.g0.x) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.y, other.g2.z, -other.g2.y, -other.g3.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g2.z, other.g0.y, other.g2.x, -other.g3.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g2.y, -other.g2.x, other.g0.y, -other.g3.z) + vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y));
}

fn flector__anti_wedge_dot__multi_vector_at_infinity(self_: Flector, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.w) * other.g0.yx * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, -other.g2.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, -other.g2.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g1.z, -other.g2.z), vec3<f32>(self_.g0.w) * other.g2 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.y, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, -other.g0.y, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.y));
}

fn flector__anti_wedge_dot__multi_vector_at_origin(self_: Flector, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g2.y, 0.0) - vec2<f32>(self_.g0.z, self_.g0.w) * vec2<f32>(other.g2.z, other.g0.x) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g2.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g2.y) + vec2<f32>(self_.g1.w, self_.g1.z) * vec2<f32>(other.g0.x, other.g2.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.y, other.g1.z, -other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, other.g0.y, other.g1.x, 0.0) + self_.g0.zzzw * vec4<f32>(other.g1.y, -other.g1.x, other.g0.y, other.g0.y) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + self_.g1.wwwz * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, -other.g1.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * other.g2 + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.x, -other.g2.z, other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g2.z, -other.g0.x, -other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g2.y, other.g2.x, -other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x) + vec3<f32>(self_.g1.w) * other.g2, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + self_.g0.wwwz * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, -other.g1.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.y, other.g1.z, -other.g1.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, other.g0.y, other.g1.x, 0.0) + self_.g1.zzzw * vec4<f32>(other.g1.y, -other.g1.x, other.g0.y, other.g0.y));
}

fn flector__anti_wedge_dot__origin(self_: Flector, other: Origin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(0.0, -other.g0) + vec2<f32>(self_.g1.w) * vec2<f32>(other.g0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0), vec4<f32>(0.0));
}

fn flector__anti_wedge_dot__plane(self_: Flector, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(-other.g0.w, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn flector__anti_wedge_dot__plane_at_origin(self_: Flector, other: PlaneAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g1.w) * other.g0, vec4<f32>(0.0));
}

fn flector__anti_wedge_dot__point(self_: Flector, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(0.0, -other.g0.w) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g1.w) * vec2<f32>(other.g0.w, 0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(0.0));
}

fn flector__anti_wedge_dot__point_at_infinity(self_: Flector, other: PointAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn flector__anti_wedge_dot__rotor(self_: Flector, other: Rotor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, 0.0) + self_.g0.zzzw * other.g0.yxww * vec4<f32>(1.0, -1.0, 1.0, 1.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g1.wwwz * other.g0.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g0.wwwz * other.g0.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, 0.0) + self_.g1.zzzw * other.g0.yxww * vec4<f32>(1.0, -1.0, 1.0, 1.0));
}

fn flector__anti_wedge_dot__scalar(self_: Flector, other: Scalar) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0) + self_.g1.xyzx * vec4<f32>(other.g0, other.g0, other.g0, 0.0));
}

fn flector__anti_wedge_dot__transflector(self_: Flector, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(-other.g1.w, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, other.g1.z), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) - vec3<f32>(self_.g0.w) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(0.0));
}

fn flector__anti_wedge_dot__translator(self_: Flector, other: Translator) -> Flector {
    return Flector(self_.g0.xyzx * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * other.g0 + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0), vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn flector_at_infinity__anti_wedge_dot__anti_scalar(self_: FlectorAtInfinity, other: AntiScalar) -> FlectorAtInfinity {
    return FlectorAtInfinity(self_.g0 * vec4<f32>(other.g0));
}

fn flector_at_infinity__anti_wedge_dot__flector(self_: FlectorAtInfinity, other: Flector) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(other.g0.w, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.w, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z));
}

fn flector_at_infinity__anti_wedge_dot__line(self_: FlectorAtInfinity, other: Line) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn flector_at_infinity__anti_wedge_dot__line_at_origin(self_: FlectorAtInfinity, other: LineAtOrigin) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn flector_at_infinity__anti_wedge_dot__magnitude(self_: FlectorAtInfinity, other: Magnitude) -> FlectorAtInfinity {
    return FlectorAtInfinity(self_.g0 * vec4<f32>(other.g0.y));
}

fn flector_at_infinity__anti_wedge_dot__motor(self_: FlectorAtInfinity, other: Motor) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * other.g0.wzyx * vec4<f32>(1.0, 1.0, -1.0, -1.0) + vec4<f32>(self_.g0.y) * other.g0.zwxy * vec4<f32>(-1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g0.z) * other.g0.yxwz * vec4<f32>(1.0, -1.0, 1.0, -1.0) + vec4<f32>(self_.g0.w) * other.g0);
}

fn flector_at_infinity__anti_wedge_dot__multi_vector(self_: FlectorAtInfinity, other: MultiVector) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g4.x, other.g2.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g4.y, other.g2.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g4.z, other.g2.z) + vec2<f32>(self_.g0.w) * vec2<f32>(other.g1.w, other.g0.y), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.y, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.y) + vec3<f32>(self_.g0.w) * other.g2, vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.w, other.g4.z, -other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g4.z, other.g1.w, other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g4.y, -other.g4.x, other.g1.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z));
}

fn flector_at_infinity__anti_wedge_dot__multi_vector_at_origin(self_: FlectorAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g2.x, other.g1.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g2.y, other.g1.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g2.z, other.g1.z) + vec2<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y) + vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x) + vec3<f32>(self_.g0.w) * other.g2);
}

fn flector_at_infinity__anti_wedge_dot__origin(self_: FlectorAtInfinity, other: Origin) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.w) * vec2<f32>(other.g0, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0));
}

fn flector_at_infinity__anti_wedge_dot__plane(self_: FlectorAtInfinity, other: Plane) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn flector_at_infinity__anti_wedge_dot__plane_at_origin(self_: FlectorAtInfinity, other: PlaneAtOrigin) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * other.g0);
}

fn flector_at_infinity__anti_wedge_dot__point(self_: FlectorAtInfinity, other: Point) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.w) * vec2<f32>(other.g0.w, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w));
}

fn flector_at_infinity__anti_wedge_dot__rotor(self_: FlectorAtInfinity, other: Rotor) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * other.g0.wzyx * vec4<f32>(1.0, 1.0, -1.0, -1.0) + vec4<f32>(self_.g0.y) * other.g0.zwxy * vec4<f32>(-1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g0.z) * other.g0.yxwz * vec4<f32>(1.0, -1.0, 1.0, -1.0) + vec4<f32>(self_.g0.w) * other.g0);
}

fn flector_at_infinity__anti_wedge_dot__transflector(self_: FlectorAtInfinity, other: Transflector) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z));
}

fn flector_at_infinity__anti_wedge_dot__translator(self_: FlectorAtInfinity, other: Translator) -> FlectorAtInfinity {
    return FlectorAtInfinity(self_.g0 * vec4<f32>(other.g0.w));
}

fn horizon__anti_wedge_dot__anti_scalar(self_: Horizon, other: AntiScalar) -> Horizon {
    return Horizon(self_.g0 * other.g0);
}

fn horizon__anti_wedge_dot__flector(self_: Horizon, other: Flector) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0) * vec2<f32>(other.g0.w, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z));
}

fn horizon__anti_wedge_dot__line(self_: Horizon, other: Line) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0) * other.g0);
}

fn horizon__anti_wedge_dot__line_at_origin(self_: Horizon, other: LineAtOrigin) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0) * other.g0);
}

fn horizon__anti_wedge_dot__magnitude(self_: Horizon, other: Magnitude) -> Horizon {
    return Horizon(self_.g0 * other.g0.y);
}

fn horizon__anti_wedge_dot__motor(self_: Horizon, other: Motor) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0) * other.g0);
}

fn horizon__anti_wedge_dot__multi_vector(self_: Horizon, other: MultiVector) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0) * vec2<f32>(other.g1.w, other.g0.y), vec3<f32>(self_.g0) * other.g2, vec3<f32>(self_.g0) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z));
}

fn horizon__anti_wedge_dot__multi_vector_at_origin(self_: Horizon, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1, vec3<f32>(self_.g0) * other.g2);
}

fn horizon__anti_wedge_dot__origin(self_: Horizon, other: Origin) -> Scalar {
    return Scalar(self_.g0 * other.g0);
}

fn horizon__anti_wedge_dot__plane(self_: Horizon, other: Plane) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(self_.g0) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn horizon__anti_wedge_dot__plane_at_origin(self_: Horizon, other: PlaneAtOrigin) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(self_.g0) * other.g0);
}

fn horizon__anti_wedge_dot__point(self_: Horizon, other: Point) -> Scalar {
    return Scalar(self_.g0 * other.g0.w);
}

fn horizon__anti_wedge_dot__rotor(self_: Horizon, other: Rotor) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0) * other.g0);
}

fn horizon__anti_wedge_dot__transflector(self_: Horizon, other: Transflector) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(self_.g0) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z));
}

fn horizon__anti_wedge_dot__translator(self_: Horizon, other: Translator) -> Horizon {
    return Horizon(self_.g0 * other.g0.w);
}

fn line__anti_wedge_dot__anti_scalar(self_: Line, other: AntiScalar) -> Line {
    return Line(self_.g0 * vec3<f32>(other.g0), self_.g1 * vec3<f32>(other.g0));
}

fn line__anti_wedge_dot__flector(self_: Line, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z) + vec4<f32>(self_.g1.x) * vec4<f32>(-other.g0.w, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g1.z, -other.g0.w, -other.g1.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g1.y, other.g1.x, -other.g0.w, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, other.g0.w, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g0.w, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, other.g1.z));
}

fn line__anti_wedge_dot__flector_at_infinity(self_: Line, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * other.g0.wzyx * vec4<f32>(1.0, 1.0, -1.0, -1.0) + vec4<f32>(self_.g0.y) * other.g0.zwxy * vec4<f32>(-1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g0.z) * other.g0.yxwz * vec4<f32>(1.0, -1.0, 1.0, -1.0));
}

fn line__anti_wedge_dot__horizon(self_: Line, other: Horizon) -> PointAtInfinity {
    return PointAtInfinity(self_.g0 * vec3<f32>(other.g0));
}

fn line__anti_wedge_dot__line(self_: Line, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, other.g0.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, other.g0.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, other.g0.z) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(0.0));
}

fn line__anti_wedge_dot__line_at_infinity(self_: Line, other: LineAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn line__anti_wedge_dot__line_at_origin(self_: Line, other: LineAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(0.0));
}

fn line__anti_wedge_dot__magnitude(self_: Line, other: Magnitude) -> Line {
    return Line(self_.g0 * vec3<f32>(other.g0.y), self_.g0 * vec3<f32>(other.g0.x) + self_.g1 * vec3<f32>(other.g0.y));
}

fn line__anti_wedge_dot__motor(self_: Line, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, other.g0.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, other.g0.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, other.g0.z) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec4<f32>(0.0));
}

fn line__anti_wedge_dot__multi_vector(self_: Line, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g3.x, other.g2.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g3.y, other.g2.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g3.z, other.g2.z) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g2.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g4.w, other.g1.z, -other.g1.y, -other.g4.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, other.g4.w, other.g1.x, -other.g4.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g4.w, -other.g4.z) + vec4<f32>(self_.g1.x) * vec4<f32>(-other.g1.w, -other.g4.z, other.g4.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g4.z, -other.g1.w, -other.g4.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g4.y, other.g4.x, -other.g1.w, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.y, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.y), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g3.z, other.g0.x, other.g3.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g0.x) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.y, other.g2.z, -other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g2.z, other.g0.y, other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.y), vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, other.g4.z, -other.g4.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g4.z, other.g1.w, other.g4.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g4.y, -other.g4.x, other.g1.w, -other.g1.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, other.g4.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, other.g4.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, other.g4.z));
}

fn line__anti_wedge_dot__multi_vector_at_infinity(self_: Line, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g2.x, other.g1.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g2.y, other.g1.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g2.z, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x));
}

fn line__anti_wedge_dot__multi_vector_at_origin(self_: Line, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g1.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.z) + vec4<f32>(self_.g1.x) * vec4<f32>(-other.g0.x, -other.g2.z, other.g2.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g2.z, -other.g0.x, -other.g2.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g2.y, other.g2.x, -other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g2.z, -other.g2.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.z, other.g0.x, other.g2.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g2.y, -other.g2.x, other.g0.x, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, other.g2.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, other.g2.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, other.g2.z));
}

fn line__anti_wedge_dot__origin(self_: Line, other: Origin) -> Transflector {
    return Transflector(vec3<f32>(0.0) - self_.g1 * vec3<f32>(other.g0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g0, other.g0, other.g0, 0.0));
}

fn line__anti_wedge_dot__plane(self_: Line, other: Plane) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z));
}

fn line__anti_wedge_dot__plane_at_origin(self_: Line, other: PlaneAtOrigin) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z));
}

fn line__anti_wedge_dot__point(self_: Line, other: Point) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) - self_.g1 * vec3<f32>(other.g0.w), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn line__anti_wedge_dot__point_at_infinity(self_: Line, other: PointAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z));
}

fn line__anti_wedge_dot__rotor(self_: Line, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec4<f32>(0.0));
}

fn line__anti_wedge_dot__scalar(self_: Line, other: Scalar) -> LineAtInfinity {
    return LineAtInfinity(self_.g0 * vec3<f32>(other.g0));
}

fn line__anti_wedge_dot__transflector(self_: Line, other: Transflector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, other.g1.z));
}

fn line__anti_wedge_dot__translator(self_: Line, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), self_.g0 * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + self_.g1 * vec3<f32>(other.g0.w), vec4<f32>(0.0));
}

fn line_at_infinity__anti_wedge_dot__anti_scalar(self_: LineAtInfinity, other: AntiScalar) -> LineAtInfinity {
    return LineAtInfinity(self_.g0 * vec3<f32>(other.g0));
}

fn line_at_infinity__anti_wedge_dot__flector(self_: LineAtInfinity, other: Flector) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * vec4<f32>(-other.g0.w, -other.g1.z, other.g1.y, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, -other.g0.w, -other.g1.x, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, -other.g0.w, other.g1.z));
}

fn line_at_infinity__anti_wedge_dot__line(self_: LineAtInfinity, other: Line) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn line_at_infinity__anti_wedge_dot__line_at_origin(self_: LineAtInfinity, other: LineAtOrigin) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn line_at_infinity__anti_wedge_dot__magnitude(self_: LineAtInfinity, other: Magnitude) -> LineAtInfinity {
    return LineAtInfinity(self_.g0 * vec3<f32>(other.g0.y));
}

fn line_at_infinity__anti_wedge_dot__motor(self_: LineAtInfinity, other: Motor) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w));
}

fn line_at_infinity__anti_wedge_dot__multi_vector(self_: LineAtInfinity, other: MultiVector) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g2.x, other.g4.x) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g2.y, other.g4.y) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g2.z, other.g4.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, -other.g4.z, other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g4.z, -other.g1.w, -other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g4.y, other.g4.x, -other.g1.w), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.y, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.y));
}

fn line_at_infinity__anti_wedge_dot__multi_vector_at_origin(self_: LineAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, other.g2.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.x, -other.g2.z, other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g2.z, -other.g0.x, -other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g2.y, other.g2.x, -other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y));
}

fn line_at_infinity__anti_wedge_dot__origin(self_: LineAtInfinity, other: Origin) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0));
}

fn line_at_infinity__anti_wedge_dot__plane(self_: LineAtInfinity, other: Plane) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, other.g0.z));
}

fn line_at_infinity__anti_wedge_dot__plane_at_origin(self_: LineAtInfinity, other: PlaneAtOrigin) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, other.g0.z));
}

fn line_at_infinity__anti_wedge_dot__point(self_: LineAtInfinity, other: Point) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0.w));
}

fn line_at_infinity__anti_wedge_dot__rotor(self_: LineAtInfinity, other: Rotor) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w));
}

fn line_at_infinity__anti_wedge_dot__transflector(self_: LineAtInfinity, other: Transflector) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, other.g1.z));
}

fn line_at_infinity__anti_wedge_dot__translator(self_: LineAtInfinity, other: Translator) -> LineAtInfinity {
    return LineAtInfinity(self_.g0 * vec3<f32>(other.g0.w));
}

fn line_at_origin__anti_wedge_dot__anti_scalar(self_: LineAtOrigin, other: AntiScalar) -> LineAtOrigin {
    return LineAtOrigin(self_.g0 * vec3<f32>(other.g0));
}

fn line_at_origin__anti_wedge_dot__flector(self_: LineAtOrigin, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, other.g0.w, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g0.w, -other.g0.z));
}

fn line_at_origin__anti_wedge_dot__flector_at_infinity(self_: LineAtOrigin, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * other.g0.wzyx * vec4<f32>(1.0, 1.0, -1.0, -1.0) + vec4<f32>(self_.g0.y) * other.g0.zwxy * vec4<f32>(-1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g0.z) * other.g0.yxwz * vec4<f32>(1.0, -1.0, 1.0, -1.0));
}

fn line_at_origin__anti_wedge_dot__horizon(self_: LineAtOrigin, other: Horizon) -> PointAtInfinity {
    return PointAtInfinity(self_.g0 * vec3<f32>(other.g0));
}

fn line_at_origin__anti_wedge_dot__line(self_: LineAtOrigin, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, other.g0.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, other.g0.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec4<f32>(0.0));
}

fn line_at_origin__anti_wedge_dot__line_at_infinity(self_: LineAtOrigin, other: LineAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn line_at_origin__anti_wedge_dot__line_at_origin(self_: LineAtOrigin, other: LineAtOrigin) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z));
}

fn line_at_origin__anti_wedge_dot__magnitude(self_: LineAtOrigin, other: Magnitude) -> Line {
    return Line(self_.g0 * vec3<f32>(other.g0.y), self_.g0 * vec3<f32>(other.g0.x));
}

fn line_at_origin__anti_wedge_dot__motor(self_: LineAtOrigin, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, other.g0.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, other.g0.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec4<f32>(0.0));
}

fn line_at_origin__anti_wedge_dot__multi_vector(self_: LineAtOrigin, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g3.x, other.g2.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g3.y, other.g2.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g3.z, other.g2.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g4.w, other.g1.z, -other.g1.y, -other.g4.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, other.g4.w, other.g1.x, -other.g4.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g4.w, -other.g4.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.y, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.y), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g3.z, other.g0.x, other.g3.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g0.x), vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, other.g4.z, -other.g4.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g4.z, other.g1.w, other.g4.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g4.y, -other.g4.x, other.g1.w, -other.g1.z));
}

fn line_at_origin__anti_wedge_dot__multi_vector_at_infinity(self_: LineAtOrigin, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g2.x, other.g1.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g2.y, other.g1.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g2.z, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x));
}

fn line_at_origin__anti_wedge_dot__multi_vector_at_origin(self_: LineAtOrigin, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g2.x, other.g1.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g2.y, other.g1.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g2.z, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x));
}

fn line_at_origin__anti_wedge_dot__origin(self_: LineAtOrigin, other: Origin) -> PlaneAtOrigin {
    return PlaneAtOrigin(self_.g0 * vec3<f32>(other.g0));
}

fn line_at_origin__anti_wedge_dot__plane(self_: LineAtOrigin, other: Plane) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn line_at_origin__anti_wedge_dot__plane_at_origin(self_: LineAtOrigin, other: PlaneAtOrigin) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn line_at_origin__anti_wedge_dot__point(self_: LineAtOrigin, other: Point) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn line_at_origin__anti_wedge_dot__point_at_infinity(self_: LineAtOrigin, other: PointAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z));
}

fn line_at_origin__anti_wedge_dot__rotor(self_: LineAtOrigin, other: Rotor) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * other.g0.wzyx * vec4<f32>(1.0, 1.0, -1.0, -1.0) + vec4<f32>(self_.g0.y) * other.g0.zwxy * vec4<f32>(-1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g0.z) * other.g0.yxwz * vec4<f32>(1.0, -1.0, 1.0, -1.0));
}

fn line_at_origin__anti_wedge_dot__scalar(self_: LineAtOrigin, other: Scalar) -> LineAtInfinity {
    return LineAtInfinity(self_.g0 * vec3<f32>(other.g0));
}

fn line_at_origin__anti_wedge_dot__transflector(self_: LineAtOrigin, other: Transflector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z));
}

fn line_at_origin__anti_wedge_dot__translator(self_: LineAtOrigin, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), self_.g0 * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(0.0));
}

fn magnitude__anti_wedge_dot__anti_scalar(self_: Magnitude, other: AntiScalar) -> Magnitude {
    return Magnitude(self_.g0 * vec2<f32>(other.g0));
}

fn magnitude__anti_wedge_dot__flector(self_: Magnitude, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0) + vec4<f32>(self_.g0.y) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w) + vec4<f32>(self_.g0.y) * other.g1);
}

fn magnitude__anti_wedge_dot__flector_at_infinity(self_: Magnitude, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.y) * other.g0);
}

fn magnitude__anti_wedge_dot__horizon(self_: Magnitude, other: Horizon) -> Horizon {
    return Horizon(self_.g0.y * other.g0);
}

fn magnitude__anti_wedge_dot__line(self_: Magnitude, other: Line) -> Line {
    return Line(vec3<f32>(self_.g0.y) * other.g0, vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g0.y) * other.g1);
}

fn magnitude__anti_wedge_dot__line_at_infinity(self_: Magnitude, other: LineAtInfinity) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(self_.g0.y) * other.g0);
}

fn magnitude__anti_wedge_dot__line_at_origin(self_: Magnitude, other: LineAtOrigin) -> Line {
    return Line(vec3<f32>(self_.g0.y) * other.g0, vec3<f32>(self_.g0.x) * other.g0);
}

fn magnitude__anti_wedge_dot__magnitude(self_: Magnitude, other: Magnitude) -> Magnitude {
    return Magnitude(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.y) * other.g0);
}

fn magnitude__anti_wedge_dot__motor(self_: Magnitude, other: Motor) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.w), vec4<f32>(0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g0.y) * other.g1, vec4<f32>(0.0));
}

fn magnitude__anti_wedge_dot__multi_vector(self_: Magnitude, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.y) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(-other.g4.x, -other.g4.y, -other.g4.z, 0.0) + vec4<f32>(self_.g0.y) * other.g1, vec3<f32>(self_.g0.y) * other.g2, vec3<f32>(self_.g0.x) * other.g2 + vec3<f32>(self_.g0.y) * other.g3, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.w) + vec4<f32>(self_.g0.y) * other.g4);
}

fn magnitude__anti_wedge_dot__multi_vector_at_infinity(self_: Magnitude, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.y) * other.g0, vec3<f32>(self_.g0.y) * other.g1, vec3<f32>(self_.g0.y) * other.g2);
}

fn magnitude__anti_wedge_dot__multi_vector_at_origin(self_: Magnitude, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.y), vec4<f32>(self_.g0.x, self_.g0.x, self_.g0.x, self_.g0.y) * vec4<f32>(-other.g2.x, -other.g2.y, -other.g2.z, other.g0.x), vec3<f32>(self_.g0.y) * other.g1, vec3<f32>(self_.g0.x) * other.g1, vec4<f32>(self_.g0.y, self_.g0.y, self_.g0.y, self_.g0.x) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, -other.g0.x));
}

fn magnitude__anti_wedge_dot__origin(self_: Magnitude, other: Origin) -> Flector {
    return Flector(vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0));
}

fn magnitude__anti_wedge_dot__plane(self_: Magnitude, other: Plane) -> Transflector {
    return Transflector(vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g0.y) * other.g0);
}

fn magnitude__anti_wedge_dot__plane_at_origin(self_: Magnitude, other: PlaneAtOrigin) -> Transflector {
    return Transflector(vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * other.g0, vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn magnitude__anti_wedge_dot__point(self_: Magnitude, other: Point) -> Flector {
    return Flector(vec4<f32>(self_.g0.y) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w));
}

fn magnitude__anti_wedge_dot__point_at_infinity(self_: Magnitude, other: PointAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0.y) * other.g0);
}

fn magnitude__anti_wedge_dot__rotor(self_: Magnitude, other: Rotor) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.w), vec4<f32>(0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn magnitude__anti_wedge_dot__scalar(self_: Magnitude, other: Scalar) -> Scalar {
    return Scalar(self_.g0.y * other.g0);
}

fn magnitude__anti_wedge_dot__transflector(self_: Magnitude, other: Transflector) -> Transflector {
    return Transflector(vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g0.y) * other.g0, vec4<f32>(self_.g0.y) * other.g1);
}

fn magnitude__anti_wedge_dot__translator(self_: Magnitude, other: Translator) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.w), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn motor__anti_wedge_dot__anti_scalar(self_: Motor, other: AntiScalar) -> Motor {
    return Motor(self_.g0 * vec4<f32>(other.g0), self_.g1 * vec3<f32>(other.g0));
}

fn motor__anti_wedge_dot__flector(self_: Motor, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z) + vec4<f32>(self_.g0.w) * other.g0 + vec4<f32>(self_.g1.x) * vec4<f32>(-other.g0.w, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g1.z, -other.g0.w, -other.g1.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g1.y, other.g1.x, -other.g0.w, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, other.g0.w, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g0.w, -other.g0.z) + vec4<f32>(self_.g0.w) * other.g1 + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, other.g1.z));
}

fn motor__anti_wedge_dot__flector_at_infinity(self_: Motor, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * other.g0.wzyx * vec4<f32>(1.0, 1.0, -1.0, -1.0) + vec4<f32>(self_.g0.y) * other.g0.zwxy * vec4<f32>(-1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g0.z) * other.g0.yxwz * vec4<f32>(1.0, -1.0, 1.0, -1.0) + vec4<f32>(self_.g0.w) * other.g0);
}

fn motor__anti_wedge_dot__horizon(self_: Motor, other: Horizon) -> FlectorAtInfinity {
    return FlectorAtInfinity(self_.g0 * vec4<f32>(other.g0));
}

fn motor__anti_wedge_dot__line(self_: Motor, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, other.g0.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, other.g0.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, other.g0.z) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g0.w) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(0.0));
}

fn motor__anti_wedge_dot__line_at_infinity(self_: Motor, other: LineAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * other.g0);
}

fn motor__anti_wedge_dot__line_at_origin(self_: Motor, other: LineAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(0.0));
}

fn motor__anti_wedge_dot__magnitude(self_: Motor, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * other.g0, vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.x) + self_.g1 * vec3<f32>(other.g0.y), vec4<f32>(0.0));
}

fn motor__anti_wedge_dot__motor(self_: Motor, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, other.g0.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, other.g0.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, other.g0.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g0.w) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec4<f32>(0.0));
}

fn motor__anti_wedge_dot__multi_vector(self_: Motor, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g3.x, other.g2.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g3.y, other.g2.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g3.z, other.g2.z) + vec2<f32>(self_.g0.w) * other.g0 + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g2.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g4.w, other.g1.z, -other.g1.y, -other.g4.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, other.g4.w, other.g1.x, -other.g4.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g4.w, -other.g4.z) + vec4<f32>(self_.g0.w) * other.g1 + vec4<f32>(self_.g1.x) * vec4<f32>(-other.g1.w, -other.g4.z, other.g4.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g4.z, -other.g1.w, -other.g4.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g4.y, other.g4.x, -other.g1.w, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.y, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.y) + vec3<f32>(self_.g0.w) * other.g2, vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g3.z, other.g0.x, other.g3.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g0.x) + vec3<f32>(self_.g0.w) * other.g3 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.y, other.g2.z, -other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g2.z, other.g0.y, other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.y), vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, other.g4.z, -other.g4.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g4.z, other.g1.w, other.g4.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g4.y, -other.g4.x, other.g1.w, -other.g1.z) + vec4<f32>(self_.g0.w) * other.g4 + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, other.g4.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, other.g4.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, other.g4.z));
}

fn motor__anti_wedge_dot__multi_vector_at_infinity(self_: Motor, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g2.x, other.g1.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g2.y, other.g1.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g2.z, other.g1.z) + vec2<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y) + vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x) + vec3<f32>(self_.g0.w) * other.g2);
}

fn motor__anti_wedge_dot__multi_vector_at_origin(self_: Motor, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g1.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g1.x) * vec4<f32>(-other.g0.x, -other.g2.z, other.g2.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g2.z, -other.g0.x, -other.g2.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g2.y, other.g2.x, -other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y) + vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g2.z, -other.g2.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.z, other.g0.x, other.g2.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g2.y, -other.g2.x, other.g0.x, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, other.g2.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, other.g2.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, other.g2.z));
}

fn motor__anti_wedge_dot__origin(self_: Motor, other: Origin) -> Flector {
    return Flector(vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0) + vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, self_.g1.x) * vec4<f32>(-other.g0, -other.g0, -other.g0, 0.0), self_.g0.xyzx * vec4<f32>(other.g0, other.g0, other.g0, 0.0));
}

fn motor__anti_wedge_dot__plane(self_: Motor, other: Plane) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * other.g0 + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z));
}

fn motor__anti_wedge_dot__plane_at_origin(self_: Motor, other: PlaneAtOrigin) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z));
}

fn motor__anti_wedge_dot__point(self_: Motor, other: Point) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * other.g0 + vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, self_.g1.x) * vec4<f32>(-other.g0.w, -other.g0.w, -other.g0.w, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn motor__anti_wedge_dot__point_at_infinity(self_: Motor, other: PointAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn motor__anti_wedge_dot__rotor(self_: Motor, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec4<f32>(0.0));
}

fn motor__anti_wedge_dot__scalar(self_: Motor, other: Scalar) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.w) * vec2<f32>(other.g0, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0));
}

fn motor__anti_wedge_dot__transflector(self_: Motor, other: Transflector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g0.w) * other.g1 + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, other.g1.z));
}

fn motor__anti_wedge_dot__translator(self_: Motor, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z, self_.g0.w) * vec2<f32>(-other.g0.z, other.g0.w), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + self_.g1 * vec3<f32>(other.g0.w), vec4<f32>(0.0));
}

fn multi_vector__anti_wedge_dot__anti_scalar(self_: MultiVector, other: AntiScalar) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0), self_.g1 * vec4<f32>(other.g0), self_.g2 * vec3<f32>(other.g0), self_.g3 * vec3<f32>(other.g0), self_.g4 * vec4<f32>(other.g0));
}

fn multi_vector__anti_wedge_dot__flector(self_: MultiVector, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g1.z, 0.0) - vec2<f32>(self_.g1.w) * vec2<f32>(other.g1.w, other.g0.w) + vec2<f32>(self_.g4.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g4.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g4.z) * vec2<f32>(other.g0.z, other.g1.z) + vec2<f32>(self_.g4.w) * vec2<f32>(other.g0.w, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0) + vec4<f32>(self_.g0.y) * other.g0 + vec4<f32>(self_.g2.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z) + vec4<f32>(self_.g3.x) * vec4<f32>(-other.g0.w, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g3.y) * vec4<f32>(other.g1.z, -other.g0.w, -other.g1.x, 0.0) + vec4<f32>(self_.g3.z) * vec4<f32>(-other.g1.y, other.g1.x, -other.g0.w, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g4.x) * vec3<f32>(-other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g1.z, -other.g0.w, -other.g1.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.w), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, other.g0.w, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.w) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g4.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w) + vec3<f32>(self_.g4.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w) + vec4<f32>(self_.g0.y) * other.g1 + vec4<f32>(self_.g2.x) * vec4<f32>(other.g0.w, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g1.z, other.g0.w, other.g1.x, -other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g0.w, -other.g0.z) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g3.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) + vec4<f32>(self_.g3.z) * vec4<f32>(0.0, 0.0, 0.0, other.g1.z));
}

fn multi_vector__anti_wedge_dot__flector_at_infinity(self_: MultiVector, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g1.w) * vec2<f32>(-other.g0.w, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g4.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g4.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g4.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(0.0) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g4.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w));
}

fn multi_vector__anti_wedge_dot__horizon(self_: MultiVector, other: Horizon) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0) + vec2<f32>(self_.g1.w) * vec2<f32>(-other.g0, 0.0), self_.g2 * vec3<f32>(other.g0), vec3<f32>(0.0) - vec3<f32>(self_.g4.x, self_.g4.y, self_.g4.z) * vec3<f32>(other.g0));
}

fn multi_vector__anti_wedge_dot__line(self_: MultiVector, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g2.x) * vec2<f32>(other.g1.x, other.g0.x) - vec2<f32>(self_.g2.y) * vec2<f32>(other.g1.y, other.g0.y) - vec2<f32>(self_.g2.z) * vec2<f32>(other.g1.z, other.g0.z) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g4.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g4.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g4.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(self_.g0.y) * other.g0 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g0.y) * other.g1 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g3.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g1.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g4.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g4.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z));
}

fn multi_vector__anti_wedge_dot__line_at_infinity(self_: MultiVector, other: LineAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g2.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g1.w) * other.g0 + vec3<f32>(self_.g4.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.y) * other.g0 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn multi_vector__anti_wedge_dot__line_at_origin(self_: MultiVector, other: LineAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g4.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g4.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z), vec3<f32>(self_.g0.y) * other.g0 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g3.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g1.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g4.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g4.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn multi_vector__anti_wedge_dot__magnitude(self_: MultiVector, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.y) * other.g0, self_.g1 * vec4<f32>(other.g0.y) + self_.g4.xyzx * vec4<f32>(other.g0.x, other.g0.x, other.g0.x, 0.0), self_.g2 * vec3<f32>(other.g0.y), self_.g2 * vec3<f32>(other.g0.x) + self_.g3 * vec3<f32>(other.g0.y), vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + self_.g4 * vec4<f32>(other.g0.y));
}

fn multi_vector__anti_wedge_dot__motor(self_: MultiVector, other: Motor) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.w) - vec2<f32>(self_.g2.x) * vec2<f32>(other.g1.x, other.g0.x) - vec2<f32>(self_.g2.y) * vec2<f32>(other.g1.y, other.g0.y) - vec2<f32>(self_.g2.z) * vec2<f32>(other.g1.z, other.g0.z) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, 0.0) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, other.g0.w) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g4.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g4.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g4.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g0.y) * other.g1 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g3.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g1.wwwz * other.g0.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g4.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g4.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g4.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, -other.g1.z) + vec4<f32>(self_.g4.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn multi_vector__anti_wedge_dot__multi_vector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.y) * other.g0 + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g4.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g4.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g4.z, 0.0) - vec2<f32>(self_.g1.w) * vec2<f32>(other.g4.w, other.g1.w) - vec2<f32>(self_.g2.x) * vec2<f32>(other.g3.x, other.g2.x) - vec2<f32>(self_.g2.y) * vec2<f32>(other.g3.y, other.g2.y) - vec2<f32>(self_.g2.z) * vec2<f32>(other.g3.z, other.g2.z) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g2.z, 0.0) + vec2<f32>(self_.g4.x) * vec2<f32>(other.g1.x, other.g4.x) + vec2<f32>(self_.g4.y) * vec2<f32>(other.g1.y, other.g4.y) + vec2<f32>(self_.g4.z) * vec2<f32>(other.g1.z, other.g4.z) + vec2<f32>(self_.g4.w) * vec2<f32>(other.g1.w, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g4.x, -other.g4.y, -other.g4.z, 0.0) + vec4<f32>(self_.g0.y) * other.g1 + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.y, other.g2.z, -other.g2.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g2.z, other.g0.y, other.g2.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g2.y, -other.g2.x, other.g0.y, 0.0) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g3.x, other.g3.y, other.g3.z, other.g0.y) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g4.w, other.g1.z, -other.g1.y, -other.g4.x) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g1.z, other.g4.w, other.g1.x, -other.g4.y) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g4.w, -other.g4.z) + vec4<f32>(self_.g3.x) * vec4<f32>(-other.g1.w, -other.g4.z, other.g4.y, 0.0) + vec4<f32>(self_.g3.y) * vec4<f32>(other.g4.z, -other.g1.w, -other.g4.x, 0.0) + vec4<f32>(self_.g3.z) * vec4<f32>(-other.g4.y, other.g4.x, -other.g1.w, 0.0) + vec4<f32>(self_.g4.x) * vec4<f32>(other.g0.x, other.g3.z, -other.g3.y, -other.g2.x) + vec4<f32>(self_.g4.y) * vec4<f32>(-other.g3.z, other.g0.x, other.g3.x, -other.g2.y) + vec4<f32>(self_.g4.z) * vec4<f32>(other.g3.y, -other.g3.x, other.g0.x, -other.g2.z) + vec4<f32>(self_.g4.w) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0), vec3<f32>(self_.g0.y) * other.g2 - vec3<f32>(self_.g1.w) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.y, other.g2.z, -other.g2.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g2.z, other.g0.y, other.g2.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.y) + vec3<f32>(self_.g4.x) * vec3<f32>(-other.g1.w, -other.g4.z, other.g4.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g4.z, -other.g1.w, -other.g4.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g4.y, other.g4.x, -other.g1.w), vec3<f32>(self_.g0.x) * other.g2 + vec3<f32>(self_.g0.y) * other.g3 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g1.w, other.g4.z, -other.g4.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g4.z, other.g1.w, other.g4.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g4.y, -other.g4.x, other.g1.w) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g3.z, other.g0.x, other.g3.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g0.x) + vec3<f32>(self_.g3.x) * vec3<f32>(other.g0.y, other.g2.z, -other.g2.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g2.z, other.g0.y, other.g2.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.y) + vec3<f32>(self_.g4.x) * vec3<f32>(-other.g4.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g1.z, -other.g4.w, -other.g1.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g4.w) + vec3<f32>(self_.g4.w) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.w) + vec4<f32>(self_.g0.y) * other.g4 + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, other.g0.x) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g1.w, other.g4.z, -other.g4.y, -other.g1.x) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g4.z, other.g1.w, other.g4.x, -other.g1.y) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g4.y, -other.g4.x, other.g1.w, -other.g1.z) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, 0.0, 0.0, other.g4.x) + vec4<f32>(self_.g3.y) * vec4<f32>(0.0, 0.0, 0.0, other.g4.y) + vec4<f32>(self_.g3.z) * vec4<f32>(0.0, 0.0, 0.0, other.g4.z) + vec4<f32>(self_.g4.x) * vec4<f32>(other.g0.y, other.g2.z, -other.g2.y, -other.g3.x) + vec4<f32>(self_.g4.y) * vec4<f32>(-other.g2.z, other.g0.y, other.g2.x, -other.g3.y) + vec4<f32>(self_.g4.z) * vec4<f32>(other.g2.y, -other.g2.x, other.g0.y, -other.g3.z) + vec4<f32>(self_.g4.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y));
}

fn multi_vector__anti_wedge_dot__multi_vector_at_infinity(self_: MultiVector, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.y) * other.g0 + vec2<f32>(self_.g1.w) * other.g0.yx * vec2<f32>(-1.0, 1.0) - vec2<f32>(self_.g2.x) * vec2<f32>(other.g2.x, other.g1.x) - vec2<f32>(self_.g2.y) * vec2<f32>(other.g2.y, other.g1.y) - vec2<f32>(self_.g2.z) * vec2<f32>(other.g2.z, other.g1.z) + vec2<f32>(self_.g4.x) * vec2<f32>(other.g1.x, -other.g2.x) + vec2<f32>(self_.g4.y) * vec2<f32>(other.g1.y, -other.g2.y) + vec2<f32>(self_.g4.z) * vec2<f32>(other.g1.z, -other.g2.z), vec3<f32>(self_.g0.y) * other.g1 + vec3<f32>(self_.g1.w) * other.g2 + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y) + vec3<f32>(self_.g4.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x), vec3<f32>(self_.g0.y) * other.g2 - vec3<f32>(self_.g1.w) * other.g1 + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x) + vec3<f32>(self_.g4.x) * vec3<f32>(-other.g0.y, -other.g1.z, other.g1.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g1.z, -other.g0.y, -other.g1.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.y));
}

fn multi_vector__anti_wedge_dot__multi_vector_at_origin(self_: MultiVector, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.y) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g2.y, 0.0) - vec2<f32>(self_.g1.z, self_.g1.w) * vec2<f32>(other.g2.z, other.g0.x) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, other.g2.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, other.g2.y) + vec2<f32>(self_.g4.w, self_.g4.z) * vec2<f32>(other.g0.x, other.g2.z), vec4<f32>(self_.g0.x, self_.g0.x, self_.g0.x, self_.g0.y) * vec4<f32>(-other.g2.x, -other.g2.y, -other.g2.z, other.g0.x) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.y, other.g1.z, -other.g1.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, other.g0.y, other.g1.x, 0.0) + self_.g1.zzzw * vec4<f32>(other.g1.y, -other.g1.x, other.g0.y, other.g0.y) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.z) + vec4<f32>(self_.g3.x) * vec4<f32>(-other.g0.x, -other.g2.z, other.g2.y, 0.0) + vec4<f32>(self_.g3.y) * vec4<f32>(other.g2.z, -other.g0.x, -other.g2.x, 0.0) + vec4<f32>(self_.g3.z) * vec4<f32>(-other.g2.y, other.g2.x, -other.g0.x, 0.0) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g4.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + self_.g4.wwwz * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, -other.g1.z), vec3<f32>(self_.g0.y) * other.g1 - vec3<f32>(self_.g1.w) * other.g2 + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y) + vec3<f32>(self_.g4.x) * vec3<f32>(-other.g0.x, -other.g2.z, other.g2.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g2.z, -other.g0.x, -other.g2.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g2.y, other.g2.x, -other.g0.x), vec3<f32>(self_.g0.x) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x) + vec3<f32>(self_.g3.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y) + vec3<f32>(self_.g4.w) * other.g2, vec4<f32>(self_.g0.y, self_.g0.y, self_.g0.y, self_.g0.x) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, -other.g0.x) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + self_.g1.wwwz * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, -other.g1.z) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g0.x, other.g2.z, -other.g2.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g2.z, other.g0.x, other.g2.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g2.y, -other.g2.x, other.g0.x, 0.0) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, 0.0, 0.0, other.g2.x) + vec4<f32>(self_.g3.y) * vec4<f32>(0.0, 0.0, 0.0, other.g2.y) + vec4<f32>(self_.g3.z) * vec4<f32>(0.0, 0.0, 0.0, other.g2.z) + vec4<f32>(self_.g4.x) * vec4<f32>(other.g0.y, other.g1.z, -other.g1.y, 0.0) + vec4<f32>(self_.g4.y) * vec4<f32>(-other.g1.z, other.g0.y, other.g1.x, 0.0) + self_.g4.zzzw * vec4<f32>(other.g1.y, -other.g1.x, other.g0.y, other.g0.y));
}

fn multi_vector__anti_wedge_dot__origin(self_: MultiVector, other: Origin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g0) + vec2<f32>(self_.g4.w) * vec2<f32>(other.g0, 0.0), vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0) + vec4<f32>(self_.g3.x, self_.g3.y, self_.g3.z, self_.g3.x) * vec4<f32>(-other.g0, -other.g0, -other.g0, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g4.x, self_.g4.y, self_.g4.z) * vec3<f32>(other.g0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0) + vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, self_.g2.x) * vec4<f32>(other.g0, other.g0, other.g0, 0.0));
}

fn multi_vector__anti_wedge_dot__plane(self_: MultiVector, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g1.w) * vec2<f32>(-other.g0.w, 0.0) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g3.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g3.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g4.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) - vec3<f32>(self_.g4.x, self_.g4.y, self_.g4.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g4.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g0.y) * other.g0 + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g3.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g3.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z));
}

fn multi_vector__anti_wedge_dot__plane_at_origin(self_: MultiVector, other: PlaneAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g3.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g3.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.w) * other.g0 + vec3<f32>(self_.g4.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g4.w) * other.g0, vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g3.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g3.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z));
}

fn multi_vector__anti_wedge_dot__point(self_: MultiVector, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g0.w) + vec2<f32>(self_.g4.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g4.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g4.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g4.w) * vec2<f32>(other.g0.w, 0.0), vec4<f32>(self_.g0.y) * other.g0 + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g3.x, self_.g3.y, self_.g3.z, self_.g3.x) * vec4<f32>(-other.g0.w, -other.g0.w, -other.g0.w, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g4.x, self_.g4.y, self_.g4.z) * vec3<f32>(other.g0.w), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.w) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g4.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn multi_vector__anti_wedge_dot__point_at_infinity(self_: MultiVector, other: PointAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g4.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g4.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g4.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(self_.g0.y) * other.g0 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.w) * other.g0 + vec3<f32>(self_.g4.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn multi_vector__anti_wedge_dot__rotor(self_: MultiVector, other: Rotor) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.w) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, 0.0) + self_.g1.zzzw * other.g0.yxww * vec4<f32>(1.0, -1.0, 1.0, 1.0) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g4.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g4.wwwz * other.g0.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g3.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g1.wwwz * other.g0.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g4.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g4.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, 0.0) + self_.g4.zzzw * other.g0.yxww * vec4<f32>(1.0, -1.0, 1.0, 1.0));
}

fn multi_vector__anti_wedge_dot__scalar(self_: MultiVector, other: Scalar) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.y) * vec2<f32>(other.g0, 0.0) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g0), vec3<f32>(self_.g4.x, self_.g4.y, self_.g4.z) * vec3<f32>(other.g0), self_.g2 * vec3<f32>(other.g0));
}

fn multi_vector__anti_wedge_dot__transflector(self_: MultiVector, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g1.w) * vec2<f32>(-other.g1.w, 0.0) + vec2<f32>(self_.g4.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g4.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g4.z) * vec2<f32>(other.g0.z, other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g3.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g3.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g4.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) - vec3<f32>(self_.g1.w) * other.g0 + vec3<f32>(self_.g4.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w) + vec3<f32>(self_.g4.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(self_.g0.y) * other.g1 + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g3.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) + vec4<f32>(self_.g3.z) * vec4<f32>(0.0, 0.0, 0.0, other.g1.z));
}

fn multi_vector__anti_wedge_dot__translator(self_: MultiVector, other: Translator) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.w) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g0.z, 0.0), self_.g1.xyzx * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0) + vec4<f32>(self_.g1.w) * other.g0 + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g4.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g4.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0), self_.g2 * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + self_.g3 * vec3<f32>(other.g0.w), vec4<f32>(self_.g4.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g4.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g4.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z) + vec4<f32>(self_.g4.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn multi_vector_at_infinity__anti_wedge_dot__anti_scalar(self_: MultiVectorAtInfinity, other: AntiScalar) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0 * vec2<f32>(other.g0), self_.g1 * vec3<f32>(other.g0), self_.g2 * vec3<f32>(other.g0));
}

fn multi_vector_at_infinity__anti_wedge_dot__flector(self_: MultiVectorAtInfinity, other: Flector) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0.yx * vec2<f32>(other.g0.w) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, other.g1.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g2.x) * vec3<f32>(-other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g1.z, -other.g0.w, -other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.w), vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, other.g0.w, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.w));
}

fn multi_vector_at_infinity__anti_wedge_dot__line(self_: MultiVectorAtInfinity, other: Line) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(self_.g0.y) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn multi_vector_at_infinity__anti_wedge_dot__line_at_origin(self_: MultiVectorAtInfinity, other: LineAtOrigin) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(self_.g0.y) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn multi_vector_at_infinity__anti_wedge_dot__magnitude(self_: MultiVectorAtInfinity, other: Magnitude) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0 * vec2<f32>(other.g0.y), self_.g1 * vec3<f32>(other.g0.y), self_.g2 * vec3<f32>(other.g0.y));
}

fn multi_vector_at_infinity__anti_wedge_dot__motor(self_: MultiVectorAtInfinity, other: Motor) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0 * vec2<f32>(other.g0.w) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w));
}

fn multi_vector_at_infinity__anti_wedge_dot__multi_vector(self_: MultiVectorAtInfinity, other: MultiVector) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.y, -other.g1.w) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.w, other.g0.y) - vec2<f32>(self_.g1.x) * vec2<f32>(other.g4.x, other.g2.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g4.y, other.g2.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g4.z, other.g2.z) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g2.x, other.g4.x) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g2.y, other.g4.y) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g2.z, other.g4.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z) + vec3<f32>(self_.g0.y) * other.g2 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.y, other.g2.z, -other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g2.z, other.g0.y, other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.y) + vec3<f32>(self_.g2.x) * vec3<f32>(-other.g1.w, -other.g4.z, other.g4.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g4.z, -other.g1.w, -other.g4.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g4.y, other.g4.x, -other.g1.w), vec3<f32>(self_.g0.x) * other.g2 + vec3<f32>(self_.g0.y) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g1.w, other.g4.z, -other.g4.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g4.z, other.g1.w, other.g4.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g4.y, -other.g4.x, other.g1.w) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.y, other.g2.z, -other.g2.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g2.z, other.g0.y, other.g2.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.y));
}

fn multi_vector_at_infinity__anti_wedge_dot__multi_vector_at_origin(self_: MultiVectorAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * other.g0.yx * vec2<f32>(1.0, -1.0) + vec2<f32>(self_.g0.y) * other.g0 - vec2<f32>(self_.g1.x) * vec2<f32>(other.g2.x, other.g1.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g2.y, other.g1.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g2.z, other.g1.z) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g1.x, other.g2.x) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g1.y, other.g2.y) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g1.z, other.g2.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * other.g2 + vec3<f32>(self_.g0.y) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y) + vec3<f32>(self_.g2.x) * vec3<f32>(-other.g0.x, -other.g2.z, other.g2.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g2.z, -other.g0.x, -other.g2.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g2.y, other.g2.x, -other.g0.x), vec3<f32>(self_.g0.x) * other.g1 + vec3<f32>(self_.g0.y) * other.g2 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y));
}

fn multi_vector_at_infinity__anti_wedge_dot__origin(self_: MultiVectorAtInfinity, other: Origin) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0.yx * vec2<f32>(other.g0), vec3<f32>(0.0) - self_.g2 * vec3<f32>(other.g0), self_.g1 * vec3<f32>(other.g0));
}

fn multi_vector_at_infinity__anti_wedge_dot__plane(self_: MultiVectorAtInfinity, other: Plane) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, other.g0.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn multi_vector_at_infinity__anti_wedge_dot__plane_at_origin(self_: MultiVectorAtInfinity, other: PlaneAtOrigin) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, other.g0.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.y) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn multi_vector_at_infinity__anti_wedge_dot__point(self_: MultiVectorAtInfinity, other: Point) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0.yx * vec2<f32>(other.g0.w), vec3<f32>(0.0) - self_.g2 * vec3<f32>(other.g0.w), self_.g1 * vec3<f32>(other.g0.w));
}

fn multi_vector_at_infinity__anti_wedge_dot__rotor(self_: MultiVectorAtInfinity, other: Rotor) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0 * vec2<f32>(other.g0.w) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w));
}

fn multi_vector_at_infinity__anti_wedge_dot__transflector(self_: MultiVectorAtInfinity, other: Transflector) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, other.g1.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0));
}

fn multi_vector_at_infinity__anti_wedge_dot__translator(self_: MultiVectorAtInfinity, other: Translator) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0 * vec2<f32>(other.g0.w), self_.g1 * vec3<f32>(other.g0.w), self_.g2 * vec3<f32>(other.g0.w));
}

fn multi_vector_at_origin__anti_wedge_dot__anti_scalar(self_: MultiVectorAtOrigin, other: AntiScalar) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0 * vec2<f32>(other.g0), self_.g1 * vec3<f32>(other.g0), self_.g2 * vec3<f32>(other.g0));
}

fn multi_vector_at_origin__anti_wedge_dot__flector(self_: MultiVectorAtOrigin, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.w, other.g0.w) + vec2<f32>(self_.g2.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(other.g0.z, other.g1.z), vec4<f32>(self_.g0.y) * other.g0 + vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g2.x) * vec3<f32>(-other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g1.z, -other.g0.w, -other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.w), vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g2.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w), vec4<f32>(self_.g0.y) * other.g1 + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, other.g0.w, other.g1.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g0.w, -other.g0.z));
}

fn multi_vector_at_origin__anti_wedge_dot__flector_at_infinity(self_: MultiVectorAtOrigin, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0 * vec2<f32>(-other.g0.w) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g2.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g2.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w));
}

fn multi_vector_at_origin__anti_wedge_dot__horizon(self_: MultiVectorAtOrigin, other: Horizon) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0 * vec2<f32>(-other.g0), self_.g1 * vec3<f32>(other.g0), vec3<f32>(0.0) - self_.g2 * vec3<f32>(other.g0));
}

fn multi_vector_at_origin__anti_wedge_dot__line(self_: MultiVectorAtOrigin, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, other.g0.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, other.g0.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g1.z, other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z), vec3<f32>(self_.g0.y) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.y) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z));
}

fn multi_vector_at_origin__anti_wedge_dot__line_at_infinity(self_: MultiVectorAtOrigin, other: LineAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.y) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn multi_vector_at_origin__anti_wedge_dot__line_at_origin(self_: MultiVectorAtOrigin, other: LineAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(self_.g0.y) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn multi_vector_at_origin__anti_wedge_dot__magnitude(self_: MultiVectorAtOrigin, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.y) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, self_.g2.x) * vec4<f32>(other.g0.x, other.g0.x, other.g0.x, 0.0), self_.g1 * vec3<f32>(other.g0.y), self_.g1 * vec3<f32>(other.g0.x), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, self_.g2.x) * vec4<f32>(other.g0.y, other.g0.y, other.g0.y, 0.0));
}

fn multi_vector_at_origin__anti_wedge_dot__motor(self_: MultiVectorAtOrigin, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.w) - vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, other.g0.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, other.g0.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g1.z, other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, other.g0.w) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(self_.g0.y) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, -other.g1.z));
}

fn multi_vector_at_origin__anti_wedge_dot__multi_vector(self_: MultiVectorAtOrigin, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g4.w, other.g1.w) + vec2<f32>(self_.g0.y) * other.g0 - vec2<f32>(self_.g1.x) * vec2<f32>(other.g3.x, other.g2.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g3.y, other.g2.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g3.z, other.g2.z) + vec2<f32>(self_.g2.x) * vec2<f32>(other.g1.x, other.g4.x) + vec2<f32>(self_.g2.y) * vec2<f32>(other.g1.y, other.g4.y) + vec2<f32>(self_.g2.z) * vec2<f32>(other.g1.z, other.g4.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g3.x, other.g3.y, other.g3.z, other.g0.y) + vec4<f32>(self_.g0.y) * other.g1 + vec4<f32>(self_.g1.x) * vec4<f32>(other.g4.w, other.g1.z, -other.g1.y, -other.g4.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, other.g4.w, other.g1.x, -other.g4.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g4.w, -other.g4.z) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g0.x, other.g3.z, -other.g3.y, -other.g2.x) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g3.z, other.g0.x, other.g3.x, -other.g2.y) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g3.y, -other.g3.x, other.g0.x, -other.g2.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z) + vec3<f32>(self_.g0.y) * other.g2 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.y, other.g2.z, -other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g2.z, other.g0.y, other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.y) + vec3<f32>(self_.g2.x) * vec3<f32>(-other.g1.w, -other.g4.z, other.g4.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g4.z, -other.g1.w, -other.g4.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g4.y, other.g4.x, -other.g1.w), vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g0.y) * other.g3 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g3.z, other.g0.x, other.g3.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g0.x) + vec3<f32>(self_.g2.x) * vec3<f32>(-other.g4.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g1.z, -other.g4.w, -other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g4.w), vec4<f32>(self_.g0.x) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, other.g0.x) + vec4<f32>(self_.g0.y) * other.g4 + vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.w, other.g4.z, -other.g4.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g4.z, other.g1.w, other.g4.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g4.y, -other.g4.x, other.g1.w, -other.g1.z) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g0.y, other.g2.z, -other.g2.y, -other.g3.x) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g2.z, other.g0.y, other.g2.x, -other.g3.y) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g2.y, -other.g2.x, other.g0.y, -other.g3.z));
}

fn multi_vector_at_origin__anti_wedge_dot__multi_vector_at_infinity(self_: MultiVectorAtOrigin, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * other.g0.yx * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g0.y) * other.g0 - vec2<f32>(self_.g1.x) * vec2<f32>(other.g2.x, other.g1.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g2.y, other.g1.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g2.z, other.g1.z) + vec2<f32>(self_.g2.x) * vec2<f32>(other.g1.x, -other.g2.x) + vec2<f32>(self_.g2.y) * vec2<f32>(other.g1.y, -other.g2.y) + vec2<f32>(self_.g2.z) * vec2<f32>(other.g1.z, -other.g2.z), vec3<f32>(self_.g0.x) * other.g2 + vec3<f32>(self_.g0.y) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x), vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * other.g1 + vec3<f32>(self_.g0.y) * other.g2 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x) + vec3<f32>(self_.g2.x) * vec3<f32>(-other.g0.y, -other.g1.z, other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g1.z, -other.g0.y, -other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.y));
}

fn multi_vector_at_origin__anti_wedge_dot__multi_vector_at_origin(self_: MultiVectorAtOrigin, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * other.g0.yx * vec2<f32>(1.0, -1.0) + vec2<f32>(self_.g0.y) * other.g0 - vec2<f32>(self_.g1.x) * vec2<f32>(other.g2.x, other.g1.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g2.y, other.g1.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g2.z, other.g1.z) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g1.x, other.g2.x) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g1.y, other.g2.y) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g1.z, other.g2.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * other.g2 + vec3<f32>(self_.g0.y) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y) + vec3<f32>(self_.g2.x) * vec3<f32>(-other.g0.x, -other.g2.z, other.g2.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g2.z, -other.g0.x, -other.g2.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g2.y, other.g2.x, -other.g0.x), vec3<f32>(self_.g0.x) * other.g1 + vec3<f32>(self_.g0.y) * other.g2 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y));
}

fn multi_vector_at_origin__anti_wedge_dot__origin(self_: MultiVectorAtOrigin, other: Origin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0.yx * vec2<f32>(other.g0), vec3<f32>(0.0) - self_.g2 * vec3<f32>(other.g0), self_.g1 * vec3<f32>(other.g0));
}

fn multi_vector_at_origin__anti_wedge_dot__plane(self_: MultiVectorAtOrigin, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.w, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, other.g0.z), vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(0.0) - self_.g2 * vec3<f32>(other.g0.w), vec4<f32>(self_.g0.y) * other.g0 + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn multi_vector_at_origin__anti_wedge_dot__plane_at_origin(self_: MultiVectorAtOrigin, other: PlaneAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, other.g0.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.y) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn multi_vector_at_origin__anti_wedge_dot__point(self_: MultiVectorAtOrigin, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.w) + vec2<f32>(self_.g2.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(other.g0.z, 0.0), vec4<f32>(self_.g0.y) * other.g0 + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0), vec3<f32>(0.0) - self_.g2 * vec3<f32>(other.g0.w), vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn multi_vector_at_origin__anti_wedge_dot__point_at_infinity(self_: MultiVectorAtOrigin, other: PointAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g2.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(self_.g0.y) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn multi_vector_at_origin__anti_wedge_dot__rotor(self_: MultiVectorAtOrigin, other: Rotor) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0 * vec2<f32>(other.g0.w) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w));
}

fn multi_vector_at_origin__anti_wedge_dot__scalar(self_: MultiVectorAtOrigin, other: Scalar) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0.yx * vec2<f32>(other.g0), self_.g2 * vec3<f32>(other.g0), self_.g1 * vec3<f32>(other.g0));
}

fn multi_vector_at_origin__anti_wedge_dot__transflector(self_: MultiVectorAtOrigin, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.w, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(other.g0.z, other.g1.z), vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g2.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w), vec4<f32>(self_.g0.y) * other.g1 + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z));
}

fn multi_vector_at_origin__anti_wedge_dot__translator(self_: MultiVectorAtOrigin, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(self_.g0.x) * other.g0 + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0), self_.g1 * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g2.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn origin__anti_wedge_dot__anti_scalar(self_: Origin, other: AntiScalar) -> Origin {
    return Origin(self_.g0 * other.g0);
}

fn origin__anti_wedge_dot__flector(self_: Origin, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0) * vec2<f32>(other.g1.w, other.g0.w), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(0.0) - vec3<f32>(self_.g0) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn origin__anti_wedge_dot__flector_at_infinity(self_: Origin, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0) * vec2<f32>(-other.g0.w, 0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn origin__anti_wedge_dot__horizon(self_: Origin, other: Horizon) -> Scalar {
    return Scalar(0.0 - self_.g0 * other.g0);
}

fn origin__anti_wedge_dot__line(self_: Origin, other: Line) -> Transflector {
    return Transflector(vec3<f32>(self_.g0) * other.g1, vec4<f32>(self_.g0) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn origin__anti_wedge_dot__line_at_infinity(self_: Origin, other: LineAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0) * other.g0);
}

fn origin__anti_wedge_dot__line_at_origin(self_: Origin, other: LineAtOrigin) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0) * other.g0);
}

fn origin__anti_wedge_dot__magnitude(self_: Origin, other: Magnitude) -> Flector {
    return Flector(vec4<f32>(self_.g0) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y), vec4<f32>(self_.g0) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x));
}

fn origin__anti_wedge_dot__motor(self_: Origin, other: Motor) -> Flector {
    return Flector(vec4<f32>(self_.g0) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, other.g0.w), vec4<f32>(self_.g0) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn origin__anti_wedge_dot__multi_vector(self_: Origin, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0) * vec2<f32>(other.g4.w, other.g1.w), vec4<f32>(self_.g0) * vec4<f32>(other.g3.x, other.g3.y, other.g3.z, other.g0.y), vec3<f32>(0.0) - vec3<f32>(self_.g0) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z), vec3<f32>(0.0) - vec3<f32>(self_.g0) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(self_.g0) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, other.g0.x));
}

fn origin__anti_wedge_dot__multi_vector_at_infinity(self_: Origin, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0) * other.g0.yx * vec2<f32>(-1.0, 1.0), vec3<f32>(self_.g0) * other.g2, vec3<f32>(0.0) - vec3<f32>(self_.g0) * other.g1);
}

fn origin__anti_wedge_dot__multi_vector_at_origin(self_: Origin, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0) * other.g0.yx * vec2<f32>(1.0, -1.0), vec3<f32>(0.0) - vec3<f32>(self_.g0) * other.g2, vec3<f32>(self_.g0) * other.g1);
}

fn origin__anti_wedge_dot__origin(self_: Origin, other: Origin) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0 * other.g0);
}

fn origin__anti_wedge_dot__plane(self_: Origin, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0) * vec2<f32>(-other.g0.w, 0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn origin__anti_wedge_dot__plane_at_origin(self_: Origin, other: PlaneAtOrigin) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(0.0) - vec3<f32>(self_.g0) * other.g0);
}

fn origin__anti_wedge_dot__point(self_: Origin, other: Point) -> Translator {
    return Translator(vec4<f32>(0.0) - vec4<f32>(self_.g0) * other.g0);
}

fn origin__anti_wedge_dot__point_at_infinity(self_: Origin, other: PointAtInfinity) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(0.0) - vec3<f32>(self_.g0) * other.g0);
}

fn origin__anti_wedge_dot__rotor(self_: Origin, other: Rotor) -> Flector {
    return Flector(vec4<f32>(self_.g0) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w), vec4<f32>(self_.g0) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn origin__anti_wedge_dot__scalar(self_: Origin, other: Scalar) -> Horizon {
    return Horizon(self_.g0 * other.g0);
}

fn origin__anti_wedge_dot__transflector(self_: Origin, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0) * vec2<f32>(-other.g1.w, 0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(0.0) - vec3<f32>(self_.g0) * other.g0, vec4<f32>(0.0));
}

fn origin__anti_wedge_dot__translator(self_: Origin, other: Translator) -> Point {
    return Point(vec4<f32>(self_.g0) * other.g0);
}

fn plane__anti_wedge_dot__anti_scalar(self_: Plane, other: AntiScalar) -> Plane {
    return Plane(self_.g0 * vec4<f32>(other.g0));
}

fn plane__anti_wedge_dot__flector(self_: Plane, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, other.g1.z) + vec2<f32>(self_.g0.w) * vec2<f32>(other.g0.w, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g0.w, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(0.0));
}

fn plane__anti_wedge_dot__flector_at_infinity(self_: Plane, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w));
}

fn plane__anti_wedge_dot__horizon(self_: Plane, other: Horizon) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0));
}

fn plane__anti_wedge_dot__line(self_: Plane, other: Line) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z));
}

fn plane__anti_wedge_dot__line_at_infinity(self_: Plane, other: LineAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z));
}

fn plane__anti_wedge_dot__line_at_origin(self_: Plane, other: LineAtOrigin) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g0.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn plane__anti_wedge_dot__magnitude(self_: Plane, other: Magnitude) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.x), self_.g0 * vec4<f32>(other.g0.y));
}

fn plane__anti_wedge_dot__motor(self_: Plane, other: Motor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn plane__anti_wedge_dot__multi_vector(self_: Plane, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, other.g4.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, other.g4.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, other.g4.z) + vec2<f32>(self_.g0.w) * vec2<f32>(other.g1.w, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g3.z, -other.g3.y, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g3.z, other.g0.x, other.g3.x, -other.g2.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g3.y, -other.g3.x, other.g0.x, -other.g2.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, -other.g4.z, other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g4.z, -other.g1.w, -other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g4.y, other.g4.x, -other.g1.w), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g4.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g4.w, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g4.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.y, other.g2.z, -other.g2.y, -other.g3.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.z, other.g0.y, other.g2.x, -other.g3.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g2.y, -other.g2.x, other.g0.y, -other.g3.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y));
}

fn plane__anti_wedge_dot__multi_vector_at_infinity(self_: Plane, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, -other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, -other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, -other.g2.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.y, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g0.y, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.y));
}

fn plane__anti_wedge_dot__multi_vector_at_origin(self_: Plane, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g2.y) + vec2<f32>(self_.g0.w, self_.g0.z) * vec2<f32>(other.g0.x, other.g2.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + self_.g0.wwwz * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, -other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.x, -other.g2.z, other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g2.z, -other.g0.x, -other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g2.y, other.g2.x, -other.g0.x), vec3<f32>(self_.g0.w) * other.g2, vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.y, other.g1.z, -other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, other.g0.y, other.g1.x, 0.0) + self_.g0.zzzw * vec4<f32>(other.g1.y, -other.g1.x, other.g0.y, other.g0.y));
}

fn plane__anti_wedge_dot__origin(self_: Plane, other: Origin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(other.g0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn plane__anti_wedge_dot__plane(self_: Plane, other: Plane) -> Motor {
    return Motor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, other.g0.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn plane__anti_wedge_dot__plane_at_origin(self_: Plane, other: PlaneAtOrigin) -> Motor {
    return Motor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, other.g0.z), vec3<f32>(self_.g0.w) * other.g0);
}

fn plane__anti_wedge_dot__point(self_: Plane, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(other.g0.w, 0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(0.0));
}

fn plane__anti_wedge_dot__point_at_infinity(self_: Plane, other: PointAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn plane__anti_wedge_dot__rotor(self_: Plane, other: Rotor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g0.wwwz * other.g0.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, 0.0) + self_.g0.zzzw * other.g0.yxww * vec4<f32>(1.0, -1.0, 1.0, 1.0));
}

fn plane__anti_wedge_dot__scalar(self_: Plane, other: Scalar) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0));
}

fn plane__anti_wedge_dot__transflector(self_: Plane, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, other.g1.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(0.0));
}

fn plane__anti_wedge_dot__translator(self_: Plane, other: Translator) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn plane_at_origin__anti_wedge_dot__anti_scalar(self_: PlaneAtOrigin, other: AntiScalar) -> PlaneAtOrigin {
    return PlaneAtOrigin(self_.g0 * vec3<f32>(other.g0));
}

fn plane_at_origin__anti_wedge_dot__flector(self_: PlaneAtOrigin, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, other.g1.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g0.w, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w), vec4<f32>(0.0));
}

fn plane_at_origin__anti_wedge_dot__flector_at_infinity(self_: PlaneAtOrigin, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w));
}

fn plane_at_origin__anti_wedge_dot__horizon(self_: PlaneAtOrigin, other: Horizon) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0));
}

fn plane_at_origin__anti_wedge_dot__line(self_: PlaneAtOrigin, other: Line) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z));
}

fn plane_at_origin__anti_wedge_dot__line_at_infinity(self_: PlaneAtOrigin, other: LineAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z));
}

fn plane_at_origin__anti_wedge_dot__line_at_origin(self_: PlaneAtOrigin, other: LineAtOrigin) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn plane_at_origin__anti_wedge_dot__magnitude(self_: PlaneAtOrigin, other: Magnitude) -> Transflector {
    return Transflector(self_.g0 * vec3<f32>(other.g0.x), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g0.y, other.g0.y, other.g0.y, 0.0));
}

fn plane_at_origin__anti_wedge_dot__motor(self_: PlaneAtOrigin, other: Motor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, -other.g1.z));
}

fn plane_at_origin__anti_wedge_dot__multi_vector(self_: PlaneAtOrigin, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, other.g4.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, other.g4.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, other.g4.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g3.z, -other.g3.y, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g3.z, other.g0.x, other.g3.x, -other.g2.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g3.y, -other.g3.x, other.g0.x, -other.g2.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, -other.g4.z, other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g4.z, -other.g1.w, -other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g4.y, other.g4.x, -other.g1.w), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g4.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g4.w, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g4.w), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.y, other.g2.z, -other.g2.y, -other.g3.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.z, other.g0.y, other.g2.x, -other.g3.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g2.y, -other.g2.x, other.g0.y, -other.g3.z));
}

fn plane_at_origin__anti_wedge_dot__multi_vector_at_infinity(self_: PlaneAtOrigin, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, -other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, -other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, -other.g2.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.y, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g0.y, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.y));
}

fn plane_at_origin__anti_wedge_dot__multi_vector_at_origin(self_: PlaneAtOrigin, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, other.g2.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.x, -other.g2.z, other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g2.z, -other.g0.x, -other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g2.y, other.g2.x, -other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y));
}

fn plane_at_origin__anti_wedge_dot__origin(self_: PlaneAtOrigin, other: Origin) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0));
}

fn plane_at_origin__anti_wedge_dot__plane(self_: PlaneAtOrigin, other: Plane) -> Motor {
    return Motor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, other.g0.z), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0.w));
}

fn plane_at_origin__anti_wedge_dot__plane_at_origin(self_: PlaneAtOrigin, other: PlaneAtOrigin) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, other.g0.z));
}

fn plane_at_origin__anti_wedge_dot__point(self_: PlaneAtOrigin, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(0.0));
}

fn plane_at_origin__anti_wedge_dot__point_at_infinity(self_: PlaneAtOrigin, other: PointAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn plane_at_origin__anti_wedge_dot__rotor(self_: PlaneAtOrigin, other: Rotor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, 0.0));
}

fn plane_at_origin__anti_wedge_dot__scalar(self_: PlaneAtOrigin, other: Scalar) -> PointAtInfinity {
    return PointAtInfinity(self_.g0 * vec3<f32>(other.g0));
}

fn plane_at_origin__anti_wedge_dot__transflector(self_: PlaneAtOrigin, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, other.g1.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w), vec4<f32>(0.0));
}

fn plane_at_origin__anti_wedge_dot__translator(self_: PlaneAtOrigin, other: Translator) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn point__anti_wedge_dot__anti_scalar(self_: Point, other: AntiScalar) -> Point {
    return Point(self_.g0 * vec4<f32>(other.g0));
}

fn point__anti_wedge_dot__flector(self_: Point, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) - vec2<f32>(self_.g0.w) * vec2<f32>(other.g1.w, other.g0.w), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.w, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn point__anti_wedge_dot__flector_at_infinity(self_: Point, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.w) * vec2<f32>(-other.g0.w, 0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn point__anti_wedge_dot__horizon(self_: Point, other: Horizon) -> Scalar {
    return Scalar(0.0 - self_.g0.w * other.g0);
}

fn point__anti_wedge_dot__line(self_: Point, other: Line) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * other.g1, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g0.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z));
}

fn point__anti_wedge_dot__line_at_infinity(self_: Point, other: LineAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0.w) * other.g0);
}

fn point__anti_wedge_dot__line_at_origin(self_: Point, other: LineAtOrigin) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g0.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z));
}

fn point__anti_wedge_dot__magnitude(self_: Point, other: Magnitude) -> Flector {
    return Flector(self_.g0 * vec4<f32>(other.g0.y), vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x));
}

fn point__anti_wedge_dot__motor(self_: Point, other: Motor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, other.g0.w), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g0.wwwz * other.g0.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0));
}

fn point__anti_wedge_dot__multi_vector(self_: Point, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g4.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g4.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g4.z, 0.0) - vec2<f32>(self_.g0.w) * vec2<f32>(other.g4.w, other.g1.w), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.y, other.g2.z, -other.g2.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.z, other.g0.y, other.g2.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g2.y, -other.g2.x, other.g0.y, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g3.x, other.g3.y, other.g3.z, other.g0.y), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.w, other.g4.z, -other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g4.z, other.g1.w, other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g4.y, -other.g4.x, other.g1.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, other.g0.x));
}

fn point__anti_wedge_dot__multi_vector_at_infinity(self_: Point, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.w) * other.g0.yx * vec2<f32>(-1.0, 1.0), vec3<f32>(self_.g0.w) * other.g2, vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * other.g1);
}

fn point__anti_wedge_dot__multi_vector_at_origin(self_: Point, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g2.y, 0.0) - vec2<f32>(self_.g0.z, self_.g0.w) * vec2<f32>(other.g2.z, other.g0.x), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.y, other.g1.z, -other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, other.g0.y, other.g1.x, 0.0) + self_.g0.zzzw * vec4<f32>(other.g1.y, -other.g1.x, other.g0.y, other.g0.y), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * other.g2, vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + self_.g0.wwwz * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, -other.g1.z));
}

fn point__anti_wedge_dot__origin(self_: Point, other: Origin) -> Translator {
    return Translator(self_.g0 * vec4<f32>(other.g0));
}

fn point__anti_wedge_dot__plane(self_: Point, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(-other.g0.w, 0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(0.0));
}

fn point__anti_wedge_dot__plane_at_origin(self_: Point, other: PlaneAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(0.0));
}

fn point__anti_wedge_dot__point(self_: Point, other: Point) -> Translator {
    return Translator(self_.g0.xyzx * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0) - vec4<f32>(self_.g0.w) * other.g0);
}

fn point__anti_wedge_dot__point_at_infinity(self_: Point, other: PointAtInfinity) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * other.g0);
}

fn point__anti_wedge_dot__rotor(self_: Point, other: Rotor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, 0.0) + self_.g0.zzzw * other.g0.yxww * vec4<f32>(1.0, -1.0, 1.0, 1.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g0.wwwz * other.g0.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0));
}

fn point__anti_wedge_dot__scalar(self_: Point, other: Scalar) -> Horizon {
    return Horizon(self_.g0.w * other.g0);
}

fn point__anti_wedge_dot__transflector(self_: Point, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(-other.g1.w, 0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) - vec3<f32>(self_.g0.w) * other.g0, vec4<f32>(0.0));
}

fn point__anti_wedge_dot__translator(self_: Point, other: Translator) -> Point {
    return Point(self_.g0.xyzx * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * other.g0);
}

fn point_at_infinity__anti_wedge_dot__anti_scalar(self_: PointAtInfinity, other: AntiScalar) -> PointAtInfinity {
    return PointAtInfinity(self_.g0 * vec3<f32>(other.g0));
}

fn point_at_infinity__anti_wedge_dot__flector(self_: PointAtInfinity, other: Flector) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.w, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.w));
}

fn point_at_infinity__anti_wedge_dot__line(self_: PointAtInfinity, other: Line) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z));
}

fn point_at_infinity__anti_wedge_dot__line_at_origin(self_: PointAtInfinity, other: LineAtOrigin) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z));
}

fn point_at_infinity__anti_wedge_dot__magnitude(self_: PointAtInfinity, other: Magnitude) -> PointAtInfinity {
    return PointAtInfinity(self_.g0 * vec3<f32>(other.g0.y));
}

fn point_at_infinity__anti_wedge_dot__motor(self_: PointAtInfinity, other: Motor) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * other.g0.wzyx * vec4<f32>(1.0, 1.0, -1.0, -1.0) + vec4<f32>(self_.g0.y) * other.g0.zwxy * vec4<f32>(-1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g0.z) * other.g0.yxwz * vec4<f32>(1.0, -1.0, 1.0, -1.0));
}

fn point_at_infinity__anti_wedge_dot__multi_vector(self_: PointAtInfinity, other: MultiVector) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g4.x, other.g2.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g4.y, other.g2.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g4.z, other.g2.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.y, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.y), vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.w, other.g4.z, -other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g4.z, other.g1.w, other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g4.y, -other.g4.x, other.g1.w));
}

fn point_at_infinity__anti_wedge_dot__multi_vector_at_origin(self_: PointAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g2.x, other.g1.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g2.y, other.g1.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g2.z, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x));
}

fn point_at_infinity__anti_wedge_dot__origin(self_: PointAtInfinity, other: Origin) -> LineAtInfinity {
    return LineAtInfinity(self_.g0 * vec3<f32>(other.g0));
}

fn point_at_infinity__anti_wedge_dot__plane(self_: PointAtInfinity, other: Plane) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn point_at_infinity__anti_wedge_dot__plane_at_origin(self_: PointAtInfinity, other: PlaneAtOrigin) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn point_at_infinity__anti_wedge_dot__point(self_: PointAtInfinity, other: Point) -> LineAtInfinity {
    return LineAtInfinity(self_.g0 * vec3<f32>(other.g0.w));
}

fn point_at_infinity__anti_wedge_dot__rotor(self_: PointAtInfinity, other: Rotor) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * other.g0.wzyx * vec4<f32>(1.0, 1.0, -1.0, -1.0) + vec4<f32>(self_.g0.y) * other.g0.zwxy * vec4<f32>(-1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g0.z) * other.g0.yxwz * vec4<f32>(1.0, -1.0, 1.0, -1.0));
}

fn point_at_infinity__anti_wedge_dot__transflector(self_: PointAtInfinity, other: Transflector) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0));
}

fn point_at_infinity__anti_wedge_dot__translator(self_: PointAtInfinity, other: Translator) -> PointAtInfinity {
    return PointAtInfinity(self_.g0 * vec3<f32>(other.g0.w));
}

fn rotor__anti_wedge_dot__anti_scalar(self_: Rotor, other: AntiScalar) -> Rotor {
    return Rotor(self_.g0 * vec4<f32>(other.g0));
}

fn rotor__anti_wedge_dot__flector(self_: Rotor, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z) + vec4<f32>(self_.g0.w) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, other.g0.w, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g0.w, -other.g0.z) + vec4<f32>(self_.g0.w) * other.g1);
}

fn rotor__anti_wedge_dot__flector_at_infinity(self_: Rotor, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * other.g0.wzyx * vec4<f32>(1.0, 1.0, -1.0, -1.0) + vec4<f32>(self_.g0.y) * other.g0.zwxy * vec4<f32>(-1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g0.z) * other.g0.yxwz * vec4<f32>(1.0, -1.0, 1.0, -1.0) + vec4<f32>(self_.g0.w) * other.g0);
}

fn rotor__anti_wedge_dot__horizon(self_: Rotor, other: Horizon) -> FlectorAtInfinity {
    return FlectorAtInfinity(self_.g0 * vec4<f32>(other.g0));
}

fn rotor__anti_wedge_dot__line(self_: Rotor, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, other.g0.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, other.g0.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g0.w) * other.g1, vec4<f32>(0.0));
}

fn rotor__anti_wedge_dot__line_at_infinity(self_: Rotor, other: LineAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * other.g0);
}

fn rotor__anti_wedge_dot__line_at_origin(self_: Rotor, other: LineAtOrigin) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn rotor__anti_wedge_dot__magnitude(self_: Rotor, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * other.g0, vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.x), vec4<f32>(0.0));
}

fn rotor__anti_wedge_dot__motor(self_: Rotor, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, other.g0.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, other.g0.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, other.g0.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.w), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g0.w) * other.g1, vec4<f32>(0.0));
}

fn rotor__anti_wedge_dot__multi_vector(self_: Rotor, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g3.x, other.g2.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g3.y, other.g2.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g3.z, other.g2.z) + vec2<f32>(self_.g0.w) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(other.g4.w, other.g1.z, -other.g1.y, -other.g4.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, other.g4.w, other.g1.x, -other.g4.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g4.w, -other.g4.z) + vec4<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.y, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.y) + vec3<f32>(self_.g0.w) * other.g2, vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g3.z, other.g0.x, other.g3.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g0.x) + vec3<f32>(self_.g0.w) * other.g3, vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, other.g4.z, -other.g4.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g4.z, other.g1.w, other.g4.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g4.y, -other.g4.x, other.g1.w, -other.g1.z) + vec4<f32>(self_.g0.w) * other.g4);
}

fn rotor__anti_wedge_dot__multi_vector_at_infinity(self_: Rotor, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g2.x, other.g1.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g2.y, other.g1.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g2.z, other.g1.z) + vec2<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y) + vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x) + vec3<f32>(self_.g0.w) * other.g2);
}

fn rotor__anti_wedge_dot__multi_vector_at_origin(self_: Rotor, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g2.x, other.g1.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g2.y, other.g1.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g2.z, other.g1.z) + vec2<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y) + vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x) + vec3<f32>(self_.g0.w) * other.g2);
}

fn rotor__anti_wedge_dot__origin(self_: Rotor, other: Origin) -> Flector {
    return Flector(vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0), self_.g0.xyzx * vec4<f32>(other.g0, other.g0, other.g0, 0.0));
}

fn rotor__anti_wedge_dot__plane(self_: Rotor, other: Plane) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * other.g0);
}

fn rotor__anti_wedge_dot__plane_at_origin(self_: Rotor, other: PlaneAtOrigin) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn rotor__anti_wedge_dot__point(self_: Rotor, other: Point) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn rotor__anti_wedge_dot__point_at_infinity(self_: Rotor, other: PointAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn rotor__anti_wedge_dot__rotor(self_: Rotor, other: Rotor) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * other.g0.wzyx * vec4<f32>(1.0, 1.0, -1.0, -1.0) + vec4<f32>(self_.g0.y) * other.g0.zwxy * vec4<f32>(-1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g0.z) * other.g0.yxwz * vec4<f32>(1.0, -1.0, 1.0, -1.0) + vec4<f32>(self_.g0.w) * other.g0);
}

fn rotor__anti_wedge_dot__scalar(self_: Rotor, other: Scalar) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.w) * vec2<f32>(other.g0, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0));
}

fn rotor__anti_wedge_dot__transflector(self_: Rotor, other: Transflector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g0.w) * other.g1);
}

fn rotor__anti_wedge_dot__translator(self_: Rotor, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z, self_.g0.w) * vec2<f32>(-other.g0.z, other.g0.w), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn scalar__anti_wedge_dot__anti_scalar(self_: Scalar, other: AntiScalar) -> Scalar {
    return Scalar(self_.g0 * other.g0);
}

fn scalar__anti_wedge_dot__flector(self_: Scalar, other: Flector) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(0.0) - vec4<f32>(self_.g0) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, other.g0.w));
}

fn scalar__anti_wedge_dot__line(self_: Scalar, other: Line) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(self_.g0) * other.g0);
}

fn scalar__anti_wedge_dot__line_at_origin(self_: Scalar, other: LineAtOrigin) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(self_.g0) * other.g0);
}

fn scalar__anti_wedge_dot__magnitude(self_: Scalar, other: Magnitude) -> Scalar {
    return Scalar(self_.g0 * other.g0.y);
}

fn scalar__anti_wedge_dot__motor(self_: Scalar, other: Motor) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0) * vec2<f32>(other.g0.w, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn scalar__anti_wedge_dot__multi_vector(self_: Scalar, other: MultiVector) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0) * vec2<f32>(other.g0.y, -other.g1.w), vec3<f32>(0.0) - vec3<f32>(self_.g0) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z), vec3<f32>(self_.g0) * other.g2);
}

fn scalar__anti_wedge_dot__multi_vector_at_origin(self_: Scalar, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0) * other.g0.yx * vec2<f32>(1.0, -1.0), vec3<f32>(0.0) - vec3<f32>(self_.g0) * other.g2, vec3<f32>(self_.g0) * other.g1);
}

fn scalar__anti_wedge_dot__origin(self_: Scalar, other: Origin) -> Horizon {
    return Horizon(0.0 - self_.g0 * other.g0);
}

fn scalar__anti_wedge_dot__plane(self_: Scalar, other: Plane) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(0.0) - vec3<f32>(self_.g0) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn scalar__anti_wedge_dot__plane_at_origin(self_: Scalar, other: PlaneAtOrigin) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(0.0) - vec3<f32>(self_.g0) * other.g0);
}

fn scalar__anti_wedge_dot__point(self_: Scalar, other: Point) -> Horizon {
    return Horizon(0.0 - self_.g0 * other.g0.w);
}

fn scalar__anti_wedge_dot__rotor(self_: Scalar, other: Rotor) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0) * vec2<f32>(other.g0.w, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn scalar__anti_wedge_dot__transflector(self_: Scalar, other: Transflector) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(0.0) - vec3<f32>(self_.g0) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z));
}

fn scalar__anti_wedge_dot__translator(self_: Scalar, other: Translator) -> Scalar {
    return Scalar(self_.g0 * other.g0.w);
}

fn transflector__anti_wedge_dot__anti_scalar(self_: Transflector, other: AntiScalar) -> Transflector {
    return Transflector(self_.g0 * vec3<f32>(other.g0), self_.g1 * vec4<f32>(other.g0));
}

fn transflector__anti_wedge_dot__flector(self_: Transflector, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, other.g1.z) + vec2<f32>(self_.g1.w) * vec2<f32>(other.g0.w, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, -other.g0.w, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.w, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.w) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(0.0));
}

fn transflector__anti_wedge_dot__flector_at_infinity(self_: Transflector, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w));
}

fn transflector__anti_wedge_dot__horizon(self_: Transflector, other: Horizon) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0));
}

fn transflector__anti_wedge_dot__line(self_: Transflector, other: Line) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z));
}

fn transflector__anti_wedge_dot__line_at_infinity(self_: Transflector, other: LineAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z));
}

fn transflector__anti_wedge_dot__line_at_origin(self_: Transflector, other: LineAtOrigin) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g1.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn transflector__anti_wedge_dot__magnitude(self_: Transflector, other: Magnitude) -> Transflector {
    return Transflector(self_.g0 * vec3<f32>(other.g0.y) + vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.x), self_.g1 * vec4<f32>(other.g0.y));
}

fn transflector__anti_wedge_dot__motor(self_: Transflector, other: Motor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, -other.g1.z) + vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn transflector__anti_wedge_dot__multi_vector(self_: Transflector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g4.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g4.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g4.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, other.g4.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, other.g4.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g1.z, other.g4.z) + vec2<f32>(self_.g1.w) * vec2<f32>(other.g1.w, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.y, other.g2.z, -other.g2.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.z, other.g0.y, other.g2.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g2.y, -other.g2.x, other.g0.y, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.x, other.g3.z, -other.g3.y, -other.g2.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g3.z, other.g0.x, other.g3.x, -other.g2.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g3.y, -other.g3.x, other.g0.x, -other.g2.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0), vec3<f32>(self_.g1.x) * vec3<f32>(-other.g1.w, -other.g4.z, other.g4.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g4.z, -other.g1.w, -other.g4.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g4.y, other.g4.x, -other.g1.w), vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.w, other.g4.z, -other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g4.z, other.g1.w, other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g4.y, -other.g4.x, other.g1.w) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g4.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, -other.g4.w, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g4.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.y, other.g2.z, -other.g2.y, -other.g3.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g2.z, other.g0.y, other.g2.x, -other.g3.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g2.y, -other.g2.x, other.g0.y, -other.g3.z) + vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y));
}

fn transflector__anti_wedge_dot__multi_vector_at_infinity(self_: Transflector, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, -other.g2.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, -other.g2.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g1.z, -other.g2.z), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x), vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.y, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, -other.g0.y, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.y));
}

fn transflector__anti_wedge_dot__multi_vector_at_origin(self_: Transflector, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g2.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g2.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g2.y) + vec2<f32>(self_.g1.w, self_.g1.z) * vec2<f32>(other.g0.x, other.g2.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.y, other.g1.z, -other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, other.g0.y, other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g0.y, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + self_.g1.wwwz * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, -other.g1.z), vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.x, -other.g2.z, other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g2.z, -other.g0.x, -other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g2.y, other.g2.x, -other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x) + vec3<f32>(self_.g1.w) * other.g2, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.y, other.g1.z, -other.g1.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, other.g0.y, other.g1.x, 0.0) + self_.g1.zzzw * vec4<f32>(other.g1.y, -other.g1.x, other.g0.y, other.g0.y));
}

fn transflector__anti_wedge_dot__origin(self_: Transflector, other: Origin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.w) * vec2<f32>(other.g0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0), self_.g0 * vec3<f32>(other.g0), vec4<f32>(0.0));
}

fn transflector__anti_wedge_dot__plane(self_: Transflector, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn transflector__anti_wedge_dot__plane_at_origin(self_: Transflector, other: PlaneAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g1.w) * other.g0, vec4<f32>(0.0));
}

fn transflector__anti_wedge_dot__point(self_: Transflector, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g1.w) * vec2<f32>(other.g0.w, 0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.w), self_.g0 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(0.0));
}

fn transflector__anti_wedge_dot__point_at_infinity(self_: Transflector, other: PointAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn transflector__anti_wedge_dot__rotor(self_: Transflector, other: Rotor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g1.wwwz * other.g0.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, 0.0) + self_.g1.zzzw * other.g0.yxww * vec4<f32>(1.0, -1.0, 1.0, 1.0));
}

fn transflector__anti_wedge_dot__scalar(self_: Transflector, other: Scalar) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0));
}

fn transflector__anti_wedge_dot__transflector(self_: Transflector, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, other.g1.z), vec4<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(0.0));
}

fn transflector__anti_wedge_dot__translator(self_: Transflector, other: Translator) -> Transflector {
    return Transflector(self_.g0 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn translator__anti_wedge_dot__anti_scalar(self_: Translator, other: AntiScalar) -> Translator {
    return Translator(self_.g0 * vec4<f32>(other.g0));
}

fn translator__anti_wedge_dot__flector(self_: Translator, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(-other.g0.w, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, -other.g0.w, -other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, -other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g1.z) + vec4<f32>(self_.g0.w) * other.g1);
}

fn translator__anti_wedge_dot__flector_at_infinity(self_: Translator, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.w) * other.g0);
}

fn translator__anti_wedge_dot__horizon(self_: Translator, other: Horizon) -> Horizon {
    return Horizon(self_.g0.w * other.g0);
}

fn translator__anti_wedge_dot__line(self_: Translator, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * other.g1, vec4<f32>(0.0));
}

fn translator__anti_wedge_dot__line_at_infinity(self_: Translator, other: LineAtInfinity) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(self_.g0.w) * other.g0);
}

fn translator__anti_wedge_dot__line_at_origin(self_: Translator, other: LineAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(0.0));
}

fn translator__anti_wedge_dot__magnitude(self_: Translator, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * other.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y), vec4<f32>(0.0));
}

fn translator__anti_wedge_dot__motor(self_: Translator, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z, self_.g0.w) * vec2<f32>(-other.g0.z, other.g0.w), vec4<f32>(0.0), vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w) + vec3<f32>(self_.g0.w) * other.g1, vec4<f32>(0.0));
}

fn translator__anti_wedge_dot__multi_vector(self_: Translator, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g2.z, 0.0) + vec2<f32>(self_.g0.w) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(-other.g1.w, -other.g4.z, other.g4.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g4.z, -other.g1.w, -other.g4.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g4.y, other.g4.x, -other.g1.w, 0.0) + vec4<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.w) * other.g2, vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.y, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.y) + vec3<f32>(self_.g0.w) * other.g3, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g4.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g4.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g4.z) + vec4<f32>(self_.g0.w) * other.g4);
}

fn translator__anti_wedge_dot__multi_vector_at_infinity(self_: Translator, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.w) * other.g2);
}

fn translator__anti_wedge_dot__multi_vector_at_origin(self_: Translator, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z, self_.g0.w) * vec2<f32>(-other.g1.z, other.g0.y), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g0.x, -other.g2.z, other.g2.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g2.z, -other.g0.x, -other.g2.x, 0.0) + self_.g0.zzzw * vec4<f32>(-other.g2.y, other.g2.x, -other.g0.x, other.g0.x), vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g2.y) + self_.g0.wwwz * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, other.g2.z));
}

fn translator__anti_wedge_dot__origin(self_: Translator, other: Origin) -> Point {
    return Point(self_.g0 * vec4<f32>(-other.g0));
}

fn translator__anti_wedge_dot__plane(self_: Translator, other: Plane) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g0.w) * other.g0);
}

fn translator__anti_wedge_dot__plane_at_origin(self_: Translator, other: PlaneAtOrigin) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + self_.g0.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, other.g0.z));
}

fn translator__anti_wedge_dot__point(self_: Translator, other: Point) -> Point {
    return Point(self_.g0.xyzx * vec4<f32>(-other.g0.w, -other.g0.w, -other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * other.g0);
}

fn translator__anti_wedge_dot__point_at_infinity(self_: Translator, other: PointAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0.w) * other.g0);
}

fn translator__anti_wedge_dot__rotor(self_: Translator, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z, self_.g0.w) * vec2<f32>(-other.g0.z, other.g0.w), vec4<f32>(0.0), vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec4<f32>(0.0));
}

fn translator__anti_wedge_dot__scalar(self_: Translator, other: Scalar) -> Scalar {
    return Scalar(self_.g0.w * other.g0);
}

fn translator__anti_wedge_dot__transflector(self_: Translator, other: Transflector) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g0.w) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g1.z) + vec4<f32>(self_.g0.w) * other.g1);
}

fn translator__anti_wedge_dot__translator(self_: Translator, other: Translator) -> Translator {
    return Translator(self_.g0.xyzx * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * other.g0);
}

fn anti_scalar__geometric_anti_product__anti_scalar(self_: AntiScalar, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0);
}

fn anti_scalar__geometric_anti_product__flector(self_: AntiScalar, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0) * other.g0, vec4<f32>(self_.g0) * other.g1);
}

fn anti_scalar__geometric_anti_product__flector_at_infinity(self_: AntiScalar, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0) * other.g0);
}

fn anti_scalar__geometric_anti_product__horizon(self_: AntiScalar, other: Horizon) -> Horizon {
    return Horizon(self_.g0 * other.g0);
}

fn anti_scalar__geometric_anti_product__line(self_: AntiScalar, other: Line) -> Line {
    return Line(vec3<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1);
}

fn anti_scalar__geometric_anti_product__line_at_infinity(self_: AntiScalar, other: LineAtInfinity) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(self_.g0) * other.g0);
}

fn anti_scalar__geometric_anti_product__line_at_origin(self_: AntiScalar, other: LineAtOrigin) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(self_.g0) * other.g0);
}

fn anti_scalar__geometric_anti_product__magnitude(self_: AntiScalar, other: Magnitude) -> Magnitude {
    return Magnitude(vec2<f32>(self_.g0) * other.g0);
}

fn anti_scalar__geometric_anti_product__motor(self_: AntiScalar, other: Motor) -> Motor {
    return Motor(vec4<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1);
}

fn anti_scalar__geometric_anti_product__multi_vector(self_: AntiScalar, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0) * other.g0, vec4<f32>(self_.g0) * other.g1, vec3<f32>(self_.g0) * other.g2, vec3<f32>(self_.g0) * other.g3, vec4<f32>(self_.g0) * other.g4);
}

fn anti_scalar__geometric_anti_product__multi_vector_at_infinity(self_: AntiScalar, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1, vec3<f32>(self_.g0) * other.g2);
}

fn anti_scalar__geometric_anti_product__multi_vector_at_origin(self_: AntiScalar, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1, vec3<f32>(self_.g0) * other.g2);
}

fn anti_scalar__geometric_anti_product__origin(self_: AntiScalar, other: Origin) -> Origin {
    return Origin(self_.g0 * other.g0);
}

fn anti_scalar__geometric_anti_product__plane(self_: AntiScalar, other: Plane) -> Plane {
    return Plane(vec4<f32>(self_.g0) * other.g0);
}

fn anti_scalar__geometric_anti_product__plane_at_origin(self_: AntiScalar, other: PlaneAtOrigin) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0) * other.g0);
}

fn anti_scalar__geometric_anti_product__point(self_: AntiScalar, other: Point) -> Point {
    return Point(vec4<f32>(self_.g0) * other.g0);
}

fn anti_scalar__geometric_anti_product__point_at_infinity(self_: AntiScalar, other: PointAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0) * other.g0);
}

fn anti_scalar__geometric_anti_product__rotor(self_: AntiScalar, other: Rotor) -> Rotor {
    return Rotor(vec4<f32>(self_.g0) * other.g0);
}

fn anti_scalar__geometric_anti_product__scalar(self_: AntiScalar, other: Scalar) -> Scalar {
    return Scalar(self_.g0 * other.g0);
}

fn anti_scalar__geometric_anti_product__transflector(self_: AntiScalar, other: Transflector) -> Transflector {
    return Transflector(vec3<f32>(self_.g0) * other.g0, vec4<f32>(self_.g0) * other.g1);
}

fn anti_scalar__geometric_anti_product__translator(self_: AntiScalar, other: Translator) -> Translator {
    return Translator(vec4<f32>(self_.g0) * other.g0);
}

fn flector__geometric_anti_product__anti_scalar(self_: Flector, other: AntiScalar) -> Flector {
    return Flector(self_.g0 * vec4<f32>(other.g0), self_.g1 * vec4<f32>(other.g0));
}

fn flector__geometric_anti_product__flector(self_: Flector, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) - vec2<f32>(self_.g0.w) * vec2<f32>(other.g1.w, other.g0.w) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, other.g1.z) + vec2<f32>(self_.g1.w) * vec2<f32>(other.g0.w, 0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, -other.g0.w, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.w, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(0.0));
}

fn flector__geometric_anti_product__flector_at_infinity(self_: Flector, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.w) * vec2<f32>(-other.g0.w, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w));
}

fn flector__geometric_anti_product__horizon(self_: Flector, other: Horizon) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.w) * vec2<f32>(-other.g0, 0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0));
}

fn flector__geometric_anti_product__line(self_: Flector, other: Line) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g0.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z));
}

fn flector__geometric_anti_product__line_at_infinity(self_: Flector, other: LineAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z));
}

fn flector__geometric_anti_product__line_at_origin(self_: Flector, other: LineAtOrigin) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g1.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g0.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn flector__geometric_anti_product__magnitude(self_: Flector, other: Magnitude) -> Flector {
    return Flector(self_.g0 * vec4<f32>(other.g0.y) + self_.g1.xyzx * vec4<f32>(other.g0.x, other.g0.x, other.g0.x, 0.0), vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + self_.g1 * vec4<f32>(other.g0.y));
}

fn flector__geometric_anti_product__motor(self_: Flector, other: Motor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, other.g0.w) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g0.wwwz * other.g0.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, -other.g1.z) + vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn flector__geometric_anti_product__multi_vector(self_: Flector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g4.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g4.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g4.z, 0.0) - vec2<f32>(self_.g0.w) * vec2<f32>(other.g4.w, other.g1.w) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, other.g4.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, other.g4.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g1.z, other.g4.z) + vec2<f32>(self_.g1.w) * vec2<f32>(other.g1.w, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.y, other.g2.z, -other.g2.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.z, other.g0.y, other.g2.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g2.y, -other.g2.x, other.g0.y, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g3.x, other.g3.y, other.g3.z, other.g0.y) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.x, other.g3.z, -other.g3.y, -other.g2.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g3.z, other.g0.x, other.g3.x, -other.g2.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g3.y, -other.g3.x, other.g0.x, -other.g2.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g1.w, -other.g4.z, other.g4.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g4.z, -other.g1.w, -other.g4.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g4.y, other.g4.x, -other.g1.w), vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.w, other.g4.z, -other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g4.z, other.g1.w, other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g4.y, -other.g4.x, other.g1.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g4.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, -other.g4.w, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g4.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, other.g0.x) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.y, other.g2.z, -other.g2.y, -other.g3.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g2.z, other.g0.y, other.g2.x, -other.g3.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g2.y, -other.g2.x, other.g0.y, -other.g3.z) + vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y));
}

fn flector__geometric_anti_product__multi_vector_at_infinity(self_: Flector, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.w) * other.g0.yx * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, -other.g2.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, -other.g2.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g1.z, -other.g2.z), vec3<f32>(self_.g0.w) * other.g2 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.y, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, -other.g0.y, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.y));
}

fn flector__geometric_anti_product__multi_vector_at_origin(self_: Flector, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g2.y, 0.0) - vec2<f32>(self_.g0.z, self_.g0.w) * vec2<f32>(other.g2.z, other.g0.x) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g2.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g2.y) + vec2<f32>(self_.g1.w, self_.g1.z) * vec2<f32>(other.g0.x, other.g2.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.y, other.g1.z, -other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, other.g0.y, other.g1.x, 0.0) + self_.g0.zzzw * vec4<f32>(other.g1.y, -other.g1.x, other.g0.y, other.g0.y) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + self_.g1.wwwz * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, -other.g1.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * other.g2 + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.x, -other.g2.z, other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g2.z, -other.g0.x, -other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g2.y, other.g2.x, -other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x) + vec3<f32>(self_.g1.w) * other.g2, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + self_.g0.wwwz * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, -other.g1.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.y, other.g1.z, -other.g1.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, other.g0.y, other.g1.x, 0.0) + self_.g1.zzzw * vec4<f32>(other.g1.y, -other.g1.x, other.g0.y, other.g0.y));
}

fn flector__geometric_anti_product__origin(self_: Flector, other: Origin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(0.0, -other.g0) + vec2<f32>(self_.g1.w) * vec2<f32>(other.g0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0), vec4<f32>(0.0));
}

fn flector__geometric_anti_product__plane(self_: Flector, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(-other.g0.w, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn flector__geometric_anti_product__plane_at_origin(self_: Flector, other: PlaneAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g1.w) * other.g0, vec4<f32>(0.0));
}

fn flector__geometric_anti_product__point(self_: Flector, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(0.0, -other.g0.w) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g1.w) * vec2<f32>(other.g0.w, 0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(0.0));
}

fn flector__geometric_anti_product__point_at_infinity(self_: Flector, other: PointAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn flector__geometric_anti_product__rotor(self_: Flector, other: Rotor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, 0.0) + self_.g0.zzzw * other.g0.yxww * vec4<f32>(1.0, -1.0, 1.0, 1.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g1.wwwz * other.g0.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g0.wwwz * other.g0.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, 0.0) + self_.g1.zzzw * other.g0.yxww * vec4<f32>(1.0, -1.0, 1.0, 1.0));
}

fn flector__geometric_anti_product__scalar(self_: Flector, other: Scalar) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0) + self_.g1.xyzx * vec4<f32>(other.g0, other.g0, other.g0, 0.0));
}

fn flector__geometric_anti_product__transflector(self_: Flector, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(-other.g1.w, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, other.g1.z), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) - vec3<f32>(self_.g0.w) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(0.0));
}

fn flector__geometric_anti_product__translator(self_: Flector, other: Translator) -> Flector {
    return Flector(self_.g0.xyzx * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * other.g0 + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0), vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn flector_at_infinity__geometric_anti_product__anti_scalar(self_: FlectorAtInfinity, other: AntiScalar) -> FlectorAtInfinity {
    return FlectorAtInfinity(self_.g0 * vec4<f32>(other.g0));
}

fn flector_at_infinity__geometric_anti_product__flector(self_: FlectorAtInfinity, other: Flector) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(other.g0.w, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.w, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z));
}

fn flector_at_infinity__geometric_anti_product__line(self_: FlectorAtInfinity, other: Line) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn flector_at_infinity__geometric_anti_product__line_at_origin(self_: FlectorAtInfinity, other: LineAtOrigin) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn flector_at_infinity__geometric_anti_product__magnitude(self_: FlectorAtInfinity, other: Magnitude) -> FlectorAtInfinity {
    return FlectorAtInfinity(self_.g0 * vec4<f32>(other.g0.y));
}

fn flector_at_infinity__geometric_anti_product__motor(self_: FlectorAtInfinity, other: Motor) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * other.g0.wzyx * vec4<f32>(1.0, 1.0, -1.0, -1.0) + vec4<f32>(self_.g0.y) * other.g0.zwxy * vec4<f32>(-1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g0.z) * other.g0.yxwz * vec4<f32>(1.0, -1.0, 1.0, -1.0) + vec4<f32>(self_.g0.w) * other.g0);
}

fn flector_at_infinity__geometric_anti_product__multi_vector(self_: FlectorAtInfinity, other: MultiVector) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g4.x, other.g2.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g4.y, other.g2.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g4.z, other.g2.z) + vec2<f32>(self_.g0.w) * vec2<f32>(other.g1.w, other.g0.y), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.y, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.y) + vec3<f32>(self_.g0.w) * other.g2, vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.w, other.g4.z, -other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g4.z, other.g1.w, other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g4.y, -other.g4.x, other.g1.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z));
}

fn flector_at_infinity__geometric_anti_product__multi_vector_at_origin(self_: FlectorAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g2.x, other.g1.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g2.y, other.g1.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g2.z, other.g1.z) + vec2<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y) + vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x) + vec3<f32>(self_.g0.w) * other.g2);
}

fn flector_at_infinity__geometric_anti_product__origin(self_: FlectorAtInfinity, other: Origin) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.w) * vec2<f32>(other.g0, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0));
}

fn flector_at_infinity__geometric_anti_product__plane(self_: FlectorAtInfinity, other: Plane) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn flector_at_infinity__geometric_anti_product__plane_at_origin(self_: FlectorAtInfinity, other: PlaneAtOrigin) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * other.g0);
}

fn flector_at_infinity__geometric_anti_product__point(self_: FlectorAtInfinity, other: Point) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.w) * vec2<f32>(other.g0.w, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w));
}

fn flector_at_infinity__geometric_anti_product__rotor(self_: FlectorAtInfinity, other: Rotor) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * other.g0.wzyx * vec4<f32>(1.0, 1.0, -1.0, -1.0) + vec4<f32>(self_.g0.y) * other.g0.zwxy * vec4<f32>(-1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g0.z) * other.g0.yxwz * vec4<f32>(1.0, -1.0, 1.0, -1.0) + vec4<f32>(self_.g0.w) * other.g0);
}

fn flector_at_infinity__geometric_anti_product__transflector(self_: FlectorAtInfinity, other: Transflector) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z));
}

fn flector_at_infinity__geometric_anti_product__translator(self_: FlectorAtInfinity, other: Translator) -> FlectorAtInfinity {
    return FlectorAtInfinity(self_.g0 * vec4<f32>(other.g0.w));
}

fn horizon__geometric_anti_product__anti_scalar(self_: Horizon, other: AntiScalar) -> Horizon {
    return Horizon(self_.g0 * other.g0);
}

fn horizon__geometric_anti_product__flector(self_: Horizon, other: Flector) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0) * vec2<f32>(other.g0.w, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z));
}

fn horizon__geometric_anti_product__line(self_: Horizon, other: Line) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0) * other.g0);
}

fn horizon__geometric_anti_product__line_at_origin(self_: Horizon, other: LineAtOrigin) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0) * other.g0);
}

fn horizon__geometric_anti_product__magnitude(self_: Horizon, other: Magnitude) -> Horizon {
    return Horizon(self_.g0 * other.g0.y);
}

fn horizon__geometric_anti_product__motor(self_: Horizon, other: Motor) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0) * other.g0);
}

fn horizon__geometric_anti_product__multi_vector(self_: Horizon, other: MultiVector) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0) * vec2<f32>(other.g1.w, other.g0.y), vec3<f32>(self_.g0) * other.g2, vec3<f32>(self_.g0) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z));
}

fn horizon__geometric_anti_product__multi_vector_at_origin(self_: Horizon, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1, vec3<f32>(self_.g0) * other.g2);
}

fn horizon__geometric_anti_product__origin(self_: Horizon, other: Origin) -> Scalar {
    return Scalar(self_.g0 * other.g0);
}

fn horizon__geometric_anti_product__plane(self_: Horizon, other: Plane) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(self_.g0) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn horizon__geometric_anti_product__plane_at_origin(self_: Horizon, other: PlaneAtOrigin) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(self_.g0) * other.g0);
}

fn horizon__geometric_anti_product__point(self_: Horizon, other: Point) -> Scalar {
    return Scalar(self_.g0 * other.g0.w);
}

fn horizon__geometric_anti_product__rotor(self_: Horizon, other: Rotor) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0) * other.g0);
}

fn horizon__geometric_anti_product__transflector(self_: Horizon, other: Transflector) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(self_.g0) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z));
}

fn horizon__geometric_anti_product__translator(self_: Horizon, other: Translator) -> Horizon {
    return Horizon(self_.g0 * other.g0.w);
}

fn line__geometric_anti_product__anti_scalar(self_: Line, other: AntiScalar) -> Line {
    return Line(self_.g0 * vec3<f32>(other.g0), self_.g1 * vec3<f32>(other.g0));
}

fn line__geometric_anti_product__flector(self_: Line, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z) + vec4<f32>(self_.g1.x) * vec4<f32>(-other.g0.w, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g1.z, -other.g0.w, -other.g1.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g1.y, other.g1.x, -other.g0.w, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, other.g0.w, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g0.w, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, other.g1.z));
}

fn line__geometric_anti_product__flector_at_infinity(self_: Line, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * other.g0.wzyx * vec4<f32>(1.0, 1.0, -1.0, -1.0) + vec4<f32>(self_.g0.y) * other.g0.zwxy * vec4<f32>(-1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g0.z) * other.g0.yxwz * vec4<f32>(1.0, -1.0, 1.0, -1.0));
}

fn line__geometric_anti_product__horizon(self_: Line, other: Horizon) -> PointAtInfinity {
    return PointAtInfinity(self_.g0 * vec3<f32>(other.g0));
}

fn line__geometric_anti_product__line(self_: Line, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, other.g0.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, other.g0.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, other.g0.z) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(0.0));
}

fn line__geometric_anti_product__line_at_infinity(self_: Line, other: LineAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn line__geometric_anti_product__line_at_origin(self_: Line, other: LineAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(0.0));
}

fn line__geometric_anti_product__magnitude(self_: Line, other: Magnitude) -> Line {
    return Line(self_.g0 * vec3<f32>(other.g0.y), self_.g0 * vec3<f32>(other.g0.x) + self_.g1 * vec3<f32>(other.g0.y));
}

fn line__geometric_anti_product__motor(self_: Line, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, other.g0.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, other.g0.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, other.g0.z) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec4<f32>(0.0));
}

fn line__geometric_anti_product__multi_vector(self_: Line, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g3.x, other.g2.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g3.y, other.g2.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g3.z, other.g2.z) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g2.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g4.w, other.g1.z, -other.g1.y, -other.g4.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, other.g4.w, other.g1.x, -other.g4.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g4.w, -other.g4.z) + vec4<f32>(self_.g1.x) * vec4<f32>(-other.g1.w, -other.g4.z, other.g4.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g4.z, -other.g1.w, -other.g4.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g4.y, other.g4.x, -other.g1.w, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.y, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.y), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g3.z, other.g0.x, other.g3.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g0.x) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.y, other.g2.z, -other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g2.z, other.g0.y, other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.y), vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, other.g4.z, -other.g4.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g4.z, other.g1.w, other.g4.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g4.y, -other.g4.x, other.g1.w, -other.g1.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, other.g4.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, other.g4.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, other.g4.z));
}

fn line__geometric_anti_product__multi_vector_at_infinity(self_: Line, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g2.x, other.g1.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g2.y, other.g1.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g2.z, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x));
}

fn line__geometric_anti_product__multi_vector_at_origin(self_: Line, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g1.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.z) + vec4<f32>(self_.g1.x) * vec4<f32>(-other.g0.x, -other.g2.z, other.g2.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g2.z, -other.g0.x, -other.g2.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g2.y, other.g2.x, -other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g2.z, -other.g2.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.z, other.g0.x, other.g2.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g2.y, -other.g2.x, other.g0.x, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, other.g2.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, other.g2.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, other.g2.z));
}

fn line__geometric_anti_product__origin(self_: Line, other: Origin) -> Transflector {
    return Transflector(vec3<f32>(0.0) - self_.g1 * vec3<f32>(other.g0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g0, other.g0, other.g0, 0.0));
}

fn line__geometric_anti_product__plane(self_: Line, other: Plane) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z));
}

fn line__geometric_anti_product__plane_at_origin(self_: Line, other: PlaneAtOrigin) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z));
}

fn line__geometric_anti_product__point(self_: Line, other: Point) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) - self_.g1 * vec3<f32>(other.g0.w), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn line__geometric_anti_product__point_at_infinity(self_: Line, other: PointAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z));
}

fn line__geometric_anti_product__rotor(self_: Line, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec4<f32>(0.0));
}

fn line__geometric_anti_product__scalar(self_: Line, other: Scalar) -> LineAtInfinity {
    return LineAtInfinity(self_.g0 * vec3<f32>(other.g0));
}

fn line__geometric_anti_product__transflector(self_: Line, other: Transflector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, other.g1.z));
}

fn line__geometric_anti_product__translator(self_: Line, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), self_.g0 * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + self_.g1 * vec3<f32>(other.g0.w), vec4<f32>(0.0));
}

fn line_at_infinity__geometric_anti_product__anti_scalar(self_: LineAtInfinity, other: AntiScalar) -> LineAtInfinity {
    return LineAtInfinity(self_.g0 * vec3<f32>(other.g0));
}

fn line_at_infinity__geometric_anti_product__flector(self_: LineAtInfinity, other: Flector) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * vec4<f32>(-other.g0.w, -other.g1.z, other.g1.y, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, -other.g0.w, -other.g1.x, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, -other.g0.w, other.g1.z));
}

fn line_at_infinity__geometric_anti_product__line(self_: LineAtInfinity, other: Line) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn line_at_infinity__geometric_anti_product__line_at_origin(self_: LineAtInfinity, other: LineAtOrigin) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn line_at_infinity__geometric_anti_product__magnitude(self_: LineAtInfinity, other: Magnitude) -> LineAtInfinity {
    return LineAtInfinity(self_.g0 * vec3<f32>(other.g0.y));
}

fn line_at_infinity__geometric_anti_product__motor(self_: LineAtInfinity, other: Motor) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w));
}

fn line_at_infinity__geometric_anti_product__multi_vector(self_: LineAtInfinity, other: MultiVector) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g2.x, other.g4.x) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g2.y, other.g4.y) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g2.z, other.g4.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, -other.g4.z, other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g4.z, -other.g1.w, -other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g4.y, other.g4.x, -other.g1.w), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.y, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.y));
}

fn line_at_infinity__geometric_anti_product__multi_vector_at_origin(self_: LineAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, other.g2.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.x, -other.g2.z, other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g2.z, -other.g0.x, -other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g2.y, other.g2.x, -other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y));
}

fn line_at_infinity__geometric_anti_product__origin(self_: LineAtInfinity, other: Origin) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0));
}

fn line_at_infinity__geometric_anti_product__plane(self_: LineAtInfinity, other: Plane) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, other.g0.z));
}

fn line_at_infinity__geometric_anti_product__plane_at_origin(self_: LineAtInfinity, other: PlaneAtOrigin) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, other.g0.z));
}

fn line_at_infinity__geometric_anti_product__point(self_: LineAtInfinity, other: Point) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0.w));
}

fn line_at_infinity__geometric_anti_product__rotor(self_: LineAtInfinity, other: Rotor) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w));
}

fn line_at_infinity__geometric_anti_product__transflector(self_: LineAtInfinity, other: Transflector) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, other.g1.z));
}

fn line_at_infinity__geometric_anti_product__translator(self_: LineAtInfinity, other: Translator) -> LineAtInfinity {
    return LineAtInfinity(self_.g0 * vec3<f32>(other.g0.w));
}

fn line_at_origin__geometric_anti_product__anti_scalar(self_: LineAtOrigin, other: AntiScalar) -> LineAtOrigin {
    return LineAtOrigin(self_.g0 * vec3<f32>(other.g0));
}

fn line_at_origin__geometric_anti_product__flector(self_: LineAtOrigin, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, other.g0.w, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g0.w, -other.g0.z));
}

fn line_at_origin__geometric_anti_product__flector_at_infinity(self_: LineAtOrigin, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * other.g0.wzyx * vec4<f32>(1.0, 1.0, -1.0, -1.0) + vec4<f32>(self_.g0.y) * other.g0.zwxy * vec4<f32>(-1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g0.z) * other.g0.yxwz * vec4<f32>(1.0, -1.0, 1.0, -1.0));
}

fn line_at_origin__geometric_anti_product__horizon(self_: LineAtOrigin, other: Horizon) -> PointAtInfinity {
    return PointAtInfinity(self_.g0 * vec3<f32>(other.g0));
}

fn line_at_origin__geometric_anti_product__line(self_: LineAtOrigin, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, other.g0.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, other.g0.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec4<f32>(0.0));
}

fn line_at_origin__geometric_anti_product__line_at_infinity(self_: LineAtOrigin, other: LineAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn line_at_origin__geometric_anti_product__line_at_origin(self_: LineAtOrigin, other: LineAtOrigin) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z));
}

fn line_at_origin__geometric_anti_product__magnitude(self_: LineAtOrigin, other: Magnitude) -> Line {
    return Line(self_.g0 * vec3<f32>(other.g0.y), self_.g0 * vec3<f32>(other.g0.x));
}

fn line_at_origin__geometric_anti_product__motor(self_: LineAtOrigin, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, other.g0.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, other.g0.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec4<f32>(0.0));
}

fn line_at_origin__geometric_anti_product__multi_vector(self_: LineAtOrigin, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g3.x, other.g2.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g3.y, other.g2.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g3.z, other.g2.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g4.w, other.g1.z, -other.g1.y, -other.g4.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, other.g4.w, other.g1.x, -other.g4.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g4.w, -other.g4.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.y, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.y), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g3.z, other.g0.x, other.g3.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g0.x), vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, other.g4.z, -other.g4.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g4.z, other.g1.w, other.g4.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g4.y, -other.g4.x, other.g1.w, -other.g1.z));
}

fn line_at_origin__geometric_anti_product__multi_vector_at_infinity(self_: LineAtOrigin, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g2.x, other.g1.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g2.y, other.g1.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g2.z, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x));
}

fn line_at_origin__geometric_anti_product__multi_vector_at_origin(self_: LineAtOrigin, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g2.x, other.g1.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g2.y, other.g1.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g2.z, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x));
}

fn line_at_origin__geometric_anti_product__origin(self_: LineAtOrigin, other: Origin) -> PlaneAtOrigin {
    return PlaneAtOrigin(self_.g0 * vec3<f32>(other.g0));
}

fn line_at_origin__geometric_anti_product__plane(self_: LineAtOrigin, other: Plane) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn line_at_origin__geometric_anti_product__plane_at_origin(self_: LineAtOrigin, other: PlaneAtOrigin) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn line_at_origin__geometric_anti_product__point(self_: LineAtOrigin, other: Point) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn line_at_origin__geometric_anti_product__point_at_infinity(self_: LineAtOrigin, other: PointAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z));
}

fn line_at_origin__geometric_anti_product__rotor(self_: LineAtOrigin, other: Rotor) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * other.g0.wzyx * vec4<f32>(1.0, 1.0, -1.0, -1.0) + vec4<f32>(self_.g0.y) * other.g0.zwxy * vec4<f32>(-1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g0.z) * other.g0.yxwz * vec4<f32>(1.0, -1.0, 1.0, -1.0));
}

fn line_at_origin__geometric_anti_product__scalar(self_: LineAtOrigin, other: Scalar) -> LineAtInfinity {
    return LineAtInfinity(self_.g0 * vec3<f32>(other.g0));
}

fn line_at_origin__geometric_anti_product__transflector(self_: LineAtOrigin, other: Transflector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z));
}

fn line_at_origin__geometric_anti_product__translator(self_: LineAtOrigin, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), self_.g0 * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(0.0));
}

fn magnitude__geometric_anti_product__anti_scalar(self_: Magnitude, other: AntiScalar) -> Magnitude {
    return Magnitude(self_.g0 * vec2<f32>(other.g0));
}

fn magnitude__geometric_anti_product__flector(self_: Magnitude, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0) + vec4<f32>(self_.g0.y) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w) + vec4<f32>(self_.g0.y) * other.g1);
}

fn magnitude__geometric_anti_product__flector_at_infinity(self_: Magnitude, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.y) * other.g0);
}

fn magnitude__geometric_anti_product__horizon(self_: Magnitude, other: Horizon) -> Horizon {
    return Horizon(self_.g0.y * other.g0);
}

fn magnitude__geometric_anti_product__line(self_: Magnitude, other: Line) -> Line {
    return Line(vec3<f32>(self_.g0.y) * other.g0, vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g0.y) * other.g1);
}

fn magnitude__geometric_anti_product__line_at_infinity(self_: Magnitude, other: LineAtInfinity) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(self_.g0.y) * other.g0);
}

fn magnitude__geometric_anti_product__line_at_origin(self_: Magnitude, other: LineAtOrigin) -> Line {
    return Line(vec3<f32>(self_.g0.y) * other.g0, vec3<f32>(self_.g0.x) * other.g0);
}

fn magnitude__geometric_anti_product__magnitude(self_: Magnitude, other: Magnitude) -> Magnitude {
    return Magnitude(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.y) * other.g0);
}

fn magnitude__geometric_anti_product__motor(self_: Magnitude, other: Motor) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.w), vec4<f32>(0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g0.y) * other.g1, vec4<f32>(0.0));
}

fn magnitude__geometric_anti_product__multi_vector(self_: Magnitude, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.y) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(-other.g4.x, -other.g4.y, -other.g4.z, 0.0) + vec4<f32>(self_.g0.y) * other.g1, vec3<f32>(self_.g0.y) * other.g2, vec3<f32>(self_.g0.x) * other.g2 + vec3<f32>(self_.g0.y) * other.g3, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.w) + vec4<f32>(self_.g0.y) * other.g4);
}

fn magnitude__geometric_anti_product__multi_vector_at_infinity(self_: Magnitude, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.y) * other.g0, vec3<f32>(self_.g0.y) * other.g1, vec3<f32>(self_.g0.y) * other.g2);
}

fn magnitude__geometric_anti_product__multi_vector_at_origin(self_: Magnitude, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.y), vec4<f32>(self_.g0.x, self_.g0.x, self_.g0.x, self_.g0.y) * vec4<f32>(-other.g2.x, -other.g2.y, -other.g2.z, other.g0.x), vec3<f32>(self_.g0.y) * other.g1, vec3<f32>(self_.g0.x) * other.g1, vec4<f32>(self_.g0.y, self_.g0.y, self_.g0.y, self_.g0.x) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, -other.g0.x));
}

fn magnitude__geometric_anti_product__origin(self_: Magnitude, other: Origin) -> Flector {
    return Flector(vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0));
}

fn magnitude__geometric_anti_product__plane(self_: Magnitude, other: Plane) -> Transflector {
    return Transflector(vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g0.y) * other.g0);
}

fn magnitude__geometric_anti_product__plane_at_origin(self_: Magnitude, other: PlaneAtOrigin) -> Transflector {
    return Transflector(vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * other.g0, vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn magnitude__geometric_anti_product__point(self_: Magnitude, other: Point) -> Flector {
    return Flector(vec4<f32>(self_.g0.y) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w));
}

fn magnitude__geometric_anti_product__point_at_infinity(self_: Magnitude, other: PointAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0.y) * other.g0);
}

fn magnitude__geometric_anti_product__rotor(self_: Magnitude, other: Rotor) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.w), vec4<f32>(0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn magnitude__geometric_anti_product__scalar(self_: Magnitude, other: Scalar) -> Scalar {
    return Scalar(self_.g0.y * other.g0);
}

fn magnitude__geometric_anti_product__transflector(self_: Magnitude, other: Transflector) -> Transflector {
    return Transflector(vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g0.y) * other.g0, vec4<f32>(self_.g0.y) * other.g1);
}

fn magnitude__geometric_anti_product__translator(self_: Magnitude, other: Translator) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.w), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn motor__geometric_anti_product__anti_scalar(self_: Motor, other: AntiScalar) -> Motor {
    return Motor(self_.g0 * vec4<f32>(other.g0), self_.g1 * vec3<f32>(other.g0));
}

fn motor__geometric_anti_product__flector(self_: Motor, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z) + vec4<f32>(self_.g0.w) * other.g0 + vec4<f32>(self_.g1.x) * vec4<f32>(-other.g0.w, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g1.z, -other.g0.w, -other.g1.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g1.y, other.g1.x, -other.g0.w, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, other.g0.w, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g0.w, -other.g0.z) + vec4<f32>(self_.g0.w) * other.g1 + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, other.g1.z));
}

fn motor__geometric_anti_product__flector_at_infinity(self_: Motor, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * other.g0.wzyx * vec4<f32>(1.0, 1.0, -1.0, -1.0) + vec4<f32>(self_.g0.y) * other.g0.zwxy * vec4<f32>(-1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g0.z) * other.g0.yxwz * vec4<f32>(1.0, -1.0, 1.0, -1.0) + vec4<f32>(self_.g0.w) * other.g0);
}

fn motor__geometric_anti_product__horizon(self_: Motor, other: Horizon) -> FlectorAtInfinity {
    return FlectorAtInfinity(self_.g0 * vec4<f32>(other.g0));
}

fn motor__geometric_anti_product__line(self_: Motor, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, other.g0.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, other.g0.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, other.g0.z) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g0.w) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(0.0));
}

fn motor__geometric_anti_product__line_at_infinity(self_: Motor, other: LineAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * other.g0);
}

fn motor__geometric_anti_product__line_at_origin(self_: Motor, other: LineAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(0.0));
}

fn motor__geometric_anti_product__magnitude(self_: Motor, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * other.g0, vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.x) + self_.g1 * vec3<f32>(other.g0.y), vec4<f32>(0.0));
}

fn motor__geometric_anti_product__motor(self_: Motor, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, other.g0.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, other.g0.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, other.g0.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g0.w) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec4<f32>(0.0));
}

fn motor__geometric_anti_product__multi_vector(self_: Motor, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g3.x, other.g2.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g3.y, other.g2.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g3.z, other.g2.z) + vec2<f32>(self_.g0.w) * other.g0 + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g2.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g4.w, other.g1.z, -other.g1.y, -other.g4.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, other.g4.w, other.g1.x, -other.g4.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g4.w, -other.g4.z) + vec4<f32>(self_.g0.w) * other.g1 + vec4<f32>(self_.g1.x) * vec4<f32>(-other.g1.w, -other.g4.z, other.g4.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g4.z, -other.g1.w, -other.g4.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g4.y, other.g4.x, -other.g1.w, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.y, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.y) + vec3<f32>(self_.g0.w) * other.g2, vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g3.z, other.g0.x, other.g3.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g0.x) + vec3<f32>(self_.g0.w) * other.g3 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.y, other.g2.z, -other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g2.z, other.g0.y, other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.y), vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, other.g4.z, -other.g4.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g4.z, other.g1.w, other.g4.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g4.y, -other.g4.x, other.g1.w, -other.g1.z) + vec4<f32>(self_.g0.w) * other.g4 + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, other.g4.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, other.g4.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, other.g4.z));
}

fn motor__geometric_anti_product__multi_vector_at_infinity(self_: Motor, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g2.x, other.g1.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g2.y, other.g1.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g2.z, other.g1.z) + vec2<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y) + vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x) + vec3<f32>(self_.g0.w) * other.g2);
}

fn motor__geometric_anti_product__multi_vector_at_origin(self_: Motor, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g1.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g1.x) * vec4<f32>(-other.g0.x, -other.g2.z, other.g2.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g2.z, -other.g0.x, -other.g2.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g2.y, other.g2.x, -other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y) + vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g2.z, -other.g2.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.z, other.g0.x, other.g2.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g2.y, -other.g2.x, other.g0.x, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, other.g2.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, other.g2.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, other.g2.z));
}

fn motor__geometric_anti_product__origin(self_: Motor, other: Origin) -> Flector {
    return Flector(vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0) + vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, self_.g1.x) * vec4<f32>(-other.g0, -other.g0, -other.g0, 0.0), self_.g0.xyzx * vec4<f32>(other.g0, other.g0, other.g0, 0.0));
}

fn motor__geometric_anti_product__plane(self_: Motor, other: Plane) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * other.g0 + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z));
}

fn motor__geometric_anti_product__plane_at_origin(self_: Motor, other: PlaneAtOrigin) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z));
}

fn motor__geometric_anti_product__point(self_: Motor, other: Point) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * other.g0 + vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, self_.g1.x) * vec4<f32>(-other.g0.w, -other.g0.w, -other.g0.w, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn motor__geometric_anti_product__point_at_infinity(self_: Motor, other: PointAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn motor__geometric_anti_product__rotor(self_: Motor, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec4<f32>(0.0));
}

fn motor__geometric_anti_product__scalar(self_: Motor, other: Scalar) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.w) * vec2<f32>(other.g0, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0));
}

fn motor__geometric_anti_product__transflector(self_: Motor, other: Transflector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g0.w) * other.g1 + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, other.g1.z));
}

fn motor__geometric_anti_product__translator(self_: Motor, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z, self_.g0.w) * vec2<f32>(-other.g0.z, other.g0.w), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + self_.g1 * vec3<f32>(other.g0.w), vec4<f32>(0.0));
}

fn multi_vector__geometric_anti_product__anti_scalar(self_: MultiVector, other: AntiScalar) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0), self_.g1 * vec4<f32>(other.g0), self_.g2 * vec3<f32>(other.g0), self_.g3 * vec3<f32>(other.g0), self_.g4 * vec4<f32>(other.g0));
}

fn multi_vector__geometric_anti_product__flector(self_: MultiVector, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g1.z, 0.0) - vec2<f32>(self_.g1.w) * vec2<f32>(other.g1.w, other.g0.w) + vec2<f32>(self_.g4.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g4.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g4.z) * vec2<f32>(other.g0.z, other.g1.z) + vec2<f32>(self_.g4.w) * vec2<f32>(other.g0.w, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0) + vec4<f32>(self_.g0.y) * other.g0 + vec4<f32>(self_.g2.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z) + vec4<f32>(self_.g3.x) * vec4<f32>(-other.g0.w, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g3.y) * vec4<f32>(other.g1.z, -other.g0.w, -other.g1.x, 0.0) + vec4<f32>(self_.g3.z) * vec4<f32>(-other.g1.y, other.g1.x, -other.g0.w, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g4.x) * vec3<f32>(-other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g1.z, -other.g0.w, -other.g1.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.w), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, other.g0.w, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.w) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g4.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w) + vec3<f32>(self_.g4.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w) + vec4<f32>(self_.g0.y) * other.g1 + vec4<f32>(self_.g2.x) * vec4<f32>(other.g0.w, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g1.z, other.g0.w, other.g1.x, -other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g0.w, -other.g0.z) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g3.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) + vec4<f32>(self_.g3.z) * vec4<f32>(0.0, 0.0, 0.0, other.g1.z));
}

fn multi_vector__geometric_anti_product__flector_at_infinity(self_: MultiVector, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g1.w) * vec2<f32>(-other.g0.w, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g4.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g4.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g4.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(0.0) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g4.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w));
}

fn multi_vector__geometric_anti_product__horizon(self_: MultiVector, other: Horizon) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0) + vec2<f32>(self_.g1.w) * vec2<f32>(-other.g0, 0.0), self_.g2 * vec3<f32>(other.g0), vec3<f32>(0.0) - vec3<f32>(self_.g4.x, self_.g4.y, self_.g4.z) * vec3<f32>(other.g0));
}

fn multi_vector__geometric_anti_product__line(self_: MultiVector, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g2.x) * vec2<f32>(other.g1.x, other.g0.x) - vec2<f32>(self_.g2.y) * vec2<f32>(other.g1.y, other.g0.y) - vec2<f32>(self_.g2.z) * vec2<f32>(other.g1.z, other.g0.z) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g4.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g4.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g4.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(self_.g0.y) * other.g0 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g0.y) * other.g1 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g3.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g1.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g4.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g4.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z));
}

fn multi_vector__geometric_anti_product__line_at_infinity(self_: MultiVector, other: LineAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g2.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g1.w) * other.g0 + vec3<f32>(self_.g4.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.y) * other.g0 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn multi_vector__geometric_anti_product__line_at_origin(self_: MultiVector, other: LineAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g4.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g4.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z), vec3<f32>(self_.g0.y) * other.g0 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g3.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g1.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g4.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g4.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn multi_vector__geometric_anti_product__magnitude(self_: MultiVector, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.y) * other.g0, self_.g1 * vec4<f32>(other.g0.y) + self_.g4.xyzx * vec4<f32>(other.g0.x, other.g0.x, other.g0.x, 0.0), self_.g2 * vec3<f32>(other.g0.y), self_.g2 * vec3<f32>(other.g0.x) + self_.g3 * vec3<f32>(other.g0.y), vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + self_.g4 * vec4<f32>(other.g0.y));
}

fn multi_vector__geometric_anti_product__motor(self_: MultiVector, other: Motor) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.w) - vec2<f32>(self_.g2.x) * vec2<f32>(other.g1.x, other.g0.x) - vec2<f32>(self_.g2.y) * vec2<f32>(other.g1.y, other.g0.y) - vec2<f32>(self_.g2.z) * vec2<f32>(other.g1.z, other.g0.z) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, 0.0) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, other.g0.w) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g4.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g4.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g4.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g0.y) * other.g1 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g3.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g1.wwwz * other.g0.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g4.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g4.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g4.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, -other.g1.z) + vec4<f32>(self_.g4.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn multi_vector__geometric_anti_product__multi_vector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.y) * other.g0 + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g4.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g4.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g4.z, 0.0) - vec2<f32>(self_.g1.w) * vec2<f32>(other.g4.w, other.g1.w) - vec2<f32>(self_.g2.x) * vec2<f32>(other.g3.x, other.g2.x) - vec2<f32>(self_.g2.y) * vec2<f32>(other.g3.y, other.g2.y) - vec2<f32>(self_.g2.z) * vec2<f32>(other.g3.z, other.g2.z) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g2.z, 0.0) + vec2<f32>(self_.g4.x) * vec2<f32>(other.g1.x, other.g4.x) + vec2<f32>(self_.g4.y) * vec2<f32>(other.g1.y, other.g4.y) + vec2<f32>(self_.g4.z) * vec2<f32>(other.g1.z, other.g4.z) + vec2<f32>(self_.g4.w) * vec2<f32>(other.g1.w, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g4.x, -other.g4.y, -other.g4.z, 0.0) + vec4<f32>(self_.g0.y) * other.g1 + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.y, other.g2.z, -other.g2.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g2.z, other.g0.y, other.g2.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g2.y, -other.g2.x, other.g0.y, 0.0) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g3.x, other.g3.y, other.g3.z, other.g0.y) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g4.w, other.g1.z, -other.g1.y, -other.g4.x) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g1.z, other.g4.w, other.g1.x, -other.g4.y) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g4.w, -other.g4.z) + vec4<f32>(self_.g3.x) * vec4<f32>(-other.g1.w, -other.g4.z, other.g4.y, 0.0) + vec4<f32>(self_.g3.y) * vec4<f32>(other.g4.z, -other.g1.w, -other.g4.x, 0.0) + vec4<f32>(self_.g3.z) * vec4<f32>(-other.g4.y, other.g4.x, -other.g1.w, 0.0) + vec4<f32>(self_.g4.x) * vec4<f32>(other.g0.x, other.g3.z, -other.g3.y, -other.g2.x) + vec4<f32>(self_.g4.y) * vec4<f32>(-other.g3.z, other.g0.x, other.g3.x, -other.g2.y) + vec4<f32>(self_.g4.z) * vec4<f32>(other.g3.y, -other.g3.x, other.g0.x, -other.g2.z) + vec4<f32>(self_.g4.w) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0), vec3<f32>(self_.g0.y) * other.g2 - vec3<f32>(self_.g1.w) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.y, other.g2.z, -other.g2.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g2.z, other.g0.y, other.g2.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.y) + vec3<f32>(self_.g4.x) * vec3<f32>(-other.g1.w, -other.g4.z, other.g4.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g4.z, -other.g1.w, -other.g4.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g4.y, other.g4.x, -other.g1.w), vec3<f32>(self_.g0.x) * other.g2 + vec3<f32>(self_.g0.y) * other.g3 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g1.w, other.g4.z, -other.g4.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g4.z, other.g1.w, other.g4.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g4.y, -other.g4.x, other.g1.w) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g3.z, other.g0.x, other.g3.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g0.x) + vec3<f32>(self_.g3.x) * vec3<f32>(other.g0.y, other.g2.z, -other.g2.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g2.z, other.g0.y, other.g2.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.y) + vec3<f32>(self_.g4.x) * vec3<f32>(-other.g4.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g1.z, -other.g4.w, -other.g1.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g4.w) + vec3<f32>(self_.g4.w) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.w) + vec4<f32>(self_.g0.y) * other.g4 + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, other.g0.x) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g1.w, other.g4.z, -other.g4.y, -other.g1.x) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g4.z, other.g1.w, other.g4.x, -other.g1.y) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g4.y, -other.g4.x, other.g1.w, -other.g1.z) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, 0.0, 0.0, other.g4.x) + vec4<f32>(self_.g3.y) * vec4<f32>(0.0, 0.0, 0.0, other.g4.y) + vec4<f32>(self_.g3.z) * vec4<f32>(0.0, 0.0, 0.0, other.g4.z) + vec4<f32>(self_.g4.x) * vec4<f32>(other.g0.y, other.g2.z, -other.g2.y, -other.g3.x) + vec4<f32>(self_.g4.y) * vec4<f32>(-other.g2.z, other.g0.y, other.g2.x, -other.g3.y) + vec4<f32>(self_.g4.z) * vec4<f32>(other.g2.y, -other.g2.x, other.g0.y, -other.g3.z) + vec4<f32>(self_.g4.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y));
}

fn multi_vector__geometric_anti_product__multi_vector_at_infinity(self_: MultiVector, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.y) * other.g0 + vec2<f32>(self_.g1.w) * other.g0.yx * vec2<f32>(-1.0, 1.0) - vec2<f32>(self_.g2.x) * vec2<f32>(other.g2.x, other.g1.x) - vec2<f32>(self_.g2.y) * vec2<f32>(other.g2.y, other.g1.y) - vec2<f32>(self_.g2.z) * vec2<f32>(other.g2.z, other.g1.z) + vec2<f32>(self_.g4.x) * vec2<f32>(other.g1.x, -other.g2.x) + vec2<f32>(self_.g4.y) * vec2<f32>(other.g1.y, -other.g2.y) + vec2<f32>(self_.g4.z) * vec2<f32>(other.g1.z, -other.g2.z), vec3<f32>(self_.g0.y) * other.g1 + vec3<f32>(self_.g1.w) * other.g2 + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y) + vec3<f32>(self_.g4.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x), vec3<f32>(self_.g0.y) * other.g2 - vec3<f32>(self_.g1.w) * other.g1 + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x) + vec3<f32>(self_.g4.x) * vec3<f32>(-other.g0.y, -other.g1.z, other.g1.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g1.z, -other.g0.y, -other.g1.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.y));
}

fn multi_vector__geometric_anti_product__multi_vector_at_origin(self_: MultiVector, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.y) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g2.y, 0.0) - vec2<f32>(self_.g1.z, self_.g1.w) * vec2<f32>(other.g2.z, other.g0.x) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, other.g2.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, other.g2.y) + vec2<f32>(self_.g4.w, self_.g4.z) * vec2<f32>(other.g0.x, other.g2.z), vec4<f32>(self_.g0.x, self_.g0.x, self_.g0.x, self_.g0.y) * vec4<f32>(-other.g2.x, -other.g2.y, -other.g2.z, other.g0.x) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.y, other.g1.z, -other.g1.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, other.g0.y, other.g1.x, 0.0) + self_.g1.zzzw * vec4<f32>(other.g1.y, -other.g1.x, other.g0.y, other.g0.y) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.z) + vec4<f32>(self_.g3.x) * vec4<f32>(-other.g0.x, -other.g2.z, other.g2.y, 0.0) + vec4<f32>(self_.g3.y) * vec4<f32>(other.g2.z, -other.g0.x, -other.g2.x, 0.0) + vec4<f32>(self_.g3.z) * vec4<f32>(-other.g2.y, other.g2.x, -other.g0.x, 0.0) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g4.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + self_.g4.wwwz * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, -other.g1.z), vec3<f32>(self_.g0.y) * other.g1 - vec3<f32>(self_.g1.w) * other.g2 + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y) + vec3<f32>(self_.g4.x) * vec3<f32>(-other.g0.x, -other.g2.z, other.g2.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g2.z, -other.g0.x, -other.g2.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g2.y, other.g2.x, -other.g0.x), vec3<f32>(self_.g0.x) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x) + vec3<f32>(self_.g3.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y) + vec3<f32>(self_.g4.w) * other.g2, vec4<f32>(self_.g0.y, self_.g0.y, self_.g0.y, self_.g0.x) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, -other.g0.x) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + self_.g1.wwwz * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, -other.g1.z) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g0.x, other.g2.z, -other.g2.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g2.z, other.g0.x, other.g2.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g2.y, -other.g2.x, other.g0.x, 0.0) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, 0.0, 0.0, other.g2.x) + vec4<f32>(self_.g3.y) * vec4<f32>(0.0, 0.0, 0.0, other.g2.y) + vec4<f32>(self_.g3.z) * vec4<f32>(0.0, 0.0, 0.0, other.g2.z) + vec4<f32>(self_.g4.x) * vec4<f32>(other.g0.y, other.g1.z, -other.g1.y, 0.0) + vec4<f32>(self_.g4.y) * vec4<f32>(-other.g1.z, other.g0.y, other.g1.x, 0.0) + self_.g4.zzzw * vec4<f32>(other.g1.y, -other.g1.x, other.g0.y, other.g0.y));
}

fn multi_vector__geometric_anti_product__origin(self_: MultiVector, other: Origin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g0) + vec2<f32>(self_.g4.w) * vec2<f32>(other.g0, 0.0), vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0) + vec4<f32>(self_.g3.x, self_.g3.y, self_.g3.z, self_.g3.x) * vec4<f32>(-other.g0, -other.g0, -other.g0, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g4.x, self_.g4.y, self_.g4.z) * vec3<f32>(other.g0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0) + vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, self_.g2.x) * vec4<f32>(other.g0, other.g0, other.g0, 0.0));
}

fn multi_vector__geometric_anti_product__plane(self_: MultiVector, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g1.w) * vec2<f32>(-other.g0.w, 0.0) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g3.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g3.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g4.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) - vec3<f32>(self_.g4.x, self_.g4.y, self_.g4.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g4.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g0.y) * other.g0 + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g3.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g3.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z));
}

fn multi_vector__geometric_anti_product__plane_at_origin(self_: MultiVector, other: PlaneAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g3.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g3.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.w) * other.g0 + vec3<f32>(self_.g4.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g4.w) * other.g0, vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g3.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g3.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z));
}

fn multi_vector__geometric_anti_product__point(self_: MultiVector, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g0.w) + vec2<f32>(self_.g4.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g4.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g4.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g4.w) * vec2<f32>(other.g0.w, 0.0), vec4<f32>(self_.g0.y) * other.g0 + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g3.x, self_.g3.y, self_.g3.z, self_.g3.x) * vec4<f32>(-other.g0.w, -other.g0.w, -other.g0.w, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g4.x, self_.g4.y, self_.g4.z) * vec3<f32>(other.g0.w), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.w) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g4.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn multi_vector__geometric_anti_product__point_at_infinity(self_: MultiVector, other: PointAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g4.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g4.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g4.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(self_.g0.y) * other.g0 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.w) * other.g0 + vec3<f32>(self_.g4.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn multi_vector__geometric_anti_product__rotor(self_: MultiVector, other: Rotor) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.w) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, 0.0) + self_.g1.zzzw * other.g0.yxww * vec4<f32>(1.0, -1.0, 1.0, 1.0) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g4.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g4.wwwz * other.g0.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g3.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g1.wwwz * other.g0.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g4.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g4.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, 0.0) + self_.g4.zzzw * other.g0.yxww * vec4<f32>(1.0, -1.0, 1.0, 1.0));
}

fn multi_vector__geometric_anti_product__scalar(self_: MultiVector, other: Scalar) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.y) * vec2<f32>(other.g0, 0.0) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g0), vec3<f32>(self_.g4.x, self_.g4.y, self_.g4.z) * vec3<f32>(other.g0), self_.g2 * vec3<f32>(other.g0));
}

fn multi_vector__geometric_anti_product__transflector(self_: MultiVector, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g1.w) * vec2<f32>(-other.g1.w, 0.0) + vec2<f32>(self_.g4.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g4.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g4.z) * vec2<f32>(other.g0.z, other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g3.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g3.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g4.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) - vec3<f32>(self_.g1.w) * other.g0 + vec3<f32>(self_.g4.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w) + vec3<f32>(self_.g4.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(self_.g0.y) * other.g1 + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g3.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) + vec4<f32>(self_.g3.z) * vec4<f32>(0.0, 0.0, 0.0, other.g1.z));
}

fn multi_vector__geometric_anti_product__translator(self_: MultiVector, other: Translator) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.w) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g0.z, 0.0), self_.g1.xyzx * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0) + vec4<f32>(self_.g1.w) * other.g0 + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g4.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g4.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0), self_.g2 * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + self_.g3 * vec3<f32>(other.g0.w), vec4<f32>(self_.g4.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g4.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g4.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z) + vec4<f32>(self_.g4.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn multi_vector_at_infinity__geometric_anti_product__anti_scalar(self_: MultiVectorAtInfinity, other: AntiScalar) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0 * vec2<f32>(other.g0), self_.g1 * vec3<f32>(other.g0), self_.g2 * vec3<f32>(other.g0));
}

fn multi_vector_at_infinity__geometric_anti_product__flector(self_: MultiVectorAtInfinity, other: Flector) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0.yx * vec2<f32>(other.g0.w) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, other.g1.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g2.x) * vec3<f32>(-other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g1.z, -other.g0.w, -other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.w), vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, other.g0.w, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.w));
}

fn multi_vector_at_infinity__geometric_anti_product__line(self_: MultiVectorAtInfinity, other: Line) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(self_.g0.y) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn multi_vector_at_infinity__geometric_anti_product__line_at_origin(self_: MultiVectorAtInfinity, other: LineAtOrigin) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(self_.g0.y) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn multi_vector_at_infinity__geometric_anti_product__magnitude(self_: MultiVectorAtInfinity, other: Magnitude) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0 * vec2<f32>(other.g0.y), self_.g1 * vec3<f32>(other.g0.y), self_.g2 * vec3<f32>(other.g0.y));
}

fn multi_vector_at_infinity__geometric_anti_product__motor(self_: MultiVectorAtInfinity, other: Motor) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0 * vec2<f32>(other.g0.w) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w));
}

fn multi_vector_at_infinity__geometric_anti_product__multi_vector(self_: MultiVectorAtInfinity, other: MultiVector) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.y, -other.g1.w) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.w, other.g0.y) - vec2<f32>(self_.g1.x) * vec2<f32>(other.g4.x, other.g2.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g4.y, other.g2.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g4.z, other.g2.z) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g2.x, other.g4.x) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g2.y, other.g4.y) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g2.z, other.g4.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z) + vec3<f32>(self_.g0.y) * other.g2 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.y, other.g2.z, -other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g2.z, other.g0.y, other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.y) + vec3<f32>(self_.g2.x) * vec3<f32>(-other.g1.w, -other.g4.z, other.g4.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g4.z, -other.g1.w, -other.g4.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g4.y, other.g4.x, -other.g1.w), vec3<f32>(self_.g0.x) * other.g2 + vec3<f32>(self_.g0.y) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g1.w, other.g4.z, -other.g4.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g4.z, other.g1.w, other.g4.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g4.y, -other.g4.x, other.g1.w) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.y, other.g2.z, -other.g2.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g2.z, other.g0.y, other.g2.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.y));
}

fn multi_vector_at_infinity__geometric_anti_product__multi_vector_at_origin(self_: MultiVectorAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * other.g0.yx * vec2<f32>(1.0, -1.0) + vec2<f32>(self_.g0.y) * other.g0 - vec2<f32>(self_.g1.x) * vec2<f32>(other.g2.x, other.g1.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g2.y, other.g1.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g2.z, other.g1.z) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g1.x, other.g2.x) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g1.y, other.g2.y) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g1.z, other.g2.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * other.g2 + vec3<f32>(self_.g0.y) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y) + vec3<f32>(self_.g2.x) * vec3<f32>(-other.g0.x, -other.g2.z, other.g2.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g2.z, -other.g0.x, -other.g2.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g2.y, other.g2.x, -other.g0.x), vec3<f32>(self_.g0.x) * other.g1 + vec3<f32>(self_.g0.y) * other.g2 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y));
}

fn multi_vector_at_infinity__geometric_anti_product__origin(self_: MultiVectorAtInfinity, other: Origin) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0.yx * vec2<f32>(other.g0), vec3<f32>(0.0) - self_.g2 * vec3<f32>(other.g0), self_.g1 * vec3<f32>(other.g0));
}

fn multi_vector_at_infinity__geometric_anti_product__plane(self_: MultiVectorAtInfinity, other: Plane) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, other.g0.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn multi_vector_at_infinity__geometric_anti_product__plane_at_origin(self_: MultiVectorAtInfinity, other: PlaneAtOrigin) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, other.g0.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.y) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn multi_vector_at_infinity__geometric_anti_product__point(self_: MultiVectorAtInfinity, other: Point) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0.yx * vec2<f32>(other.g0.w), vec3<f32>(0.0) - self_.g2 * vec3<f32>(other.g0.w), self_.g1 * vec3<f32>(other.g0.w));
}

fn multi_vector_at_infinity__geometric_anti_product__rotor(self_: MultiVectorAtInfinity, other: Rotor) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0 * vec2<f32>(other.g0.w) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w));
}

fn multi_vector_at_infinity__geometric_anti_product__transflector(self_: MultiVectorAtInfinity, other: Transflector) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, other.g1.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0));
}

fn multi_vector_at_infinity__geometric_anti_product__translator(self_: MultiVectorAtInfinity, other: Translator) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0 * vec2<f32>(other.g0.w), self_.g1 * vec3<f32>(other.g0.w), self_.g2 * vec3<f32>(other.g0.w));
}

fn multi_vector_at_origin__geometric_anti_product__anti_scalar(self_: MultiVectorAtOrigin, other: AntiScalar) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0 * vec2<f32>(other.g0), self_.g1 * vec3<f32>(other.g0), self_.g2 * vec3<f32>(other.g0));
}

fn multi_vector_at_origin__geometric_anti_product__flector(self_: MultiVectorAtOrigin, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.w, other.g0.w) + vec2<f32>(self_.g2.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(other.g0.z, other.g1.z), vec4<f32>(self_.g0.y) * other.g0 + vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g2.x) * vec3<f32>(-other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g1.z, -other.g0.w, -other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.w), vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g2.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w), vec4<f32>(self_.g0.y) * other.g1 + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, other.g0.w, other.g1.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g0.w, -other.g0.z));
}

fn multi_vector_at_origin__geometric_anti_product__flector_at_infinity(self_: MultiVectorAtOrigin, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0 * vec2<f32>(-other.g0.w) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g2.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g2.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w));
}

fn multi_vector_at_origin__geometric_anti_product__horizon(self_: MultiVectorAtOrigin, other: Horizon) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0 * vec2<f32>(-other.g0), self_.g1 * vec3<f32>(other.g0), vec3<f32>(0.0) - self_.g2 * vec3<f32>(other.g0));
}

fn multi_vector_at_origin__geometric_anti_product__line(self_: MultiVectorAtOrigin, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, other.g0.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, other.g0.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g1.z, other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z), vec3<f32>(self_.g0.y) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.y) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z));
}

fn multi_vector_at_origin__geometric_anti_product__line_at_infinity(self_: MultiVectorAtOrigin, other: LineAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.y) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn multi_vector_at_origin__geometric_anti_product__line_at_origin(self_: MultiVectorAtOrigin, other: LineAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(self_.g0.y) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn multi_vector_at_origin__geometric_anti_product__magnitude(self_: MultiVectorAtOrigin, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.y) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, self_.g2.x) * vec4<f32>(other.g0.x, other.g0.x, other.g0.x, 0.0), self_.g1 * vec3<f32>(other.g0.y), self_.g1 * vec3<f32>(other.g0.x), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, self_.g2.x) * vec4<f32>(other.g0.y, other.g0.y, other.g0.y, 0.0));
}

fn multi_vector_at_origin__geometric_anti_product__motor(self_: MultiVectorAtOrigin, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.w) - vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, other.g0.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, other.g0.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g1.z, other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, other.g0.w) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(self_.g0.y) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, -other.g1.z));
}

fn multi_vector_at_origin__geometric_anti_product__multi_vector(self_: MultiVectorAtOrigin, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g4.w, other.g1.w) + vec2<f32>(self_.g0.y) * other.g0 - vec2<f32>(self_.g1.x) * vec2<f32>(other.g3.x, other.g2.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g3.y, other.g2.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g3.z, other.g2.z) + vec2<f32>(self_.g2.x) * vec2<f32>(other.g1.x, other.g4.x) + vec2<f32>(self_.g2.y) * vec2<f32>(other.g1.y, other.g4.y) + vec2<f32>(self_.g2.z) * vec2<f32>(other.g1.z, other.g4.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g3.x, other.g3.y, other.g3.z, other.g0.y) + vec4<f32>(self_.g0.y) * other.g1 + vec4<f32>(self_.g1.x) * vec4<f32>(other.g4.w, other.g1.z, -other.g1.y, -other.g4.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, other.g4.w, other.g1.x, -other.g4.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g4.w, -other.g4.z) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g0.x, other.g3.z, -other.g3.y, -other.g2.x) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g3.z, other.g0.x, other.g3.x, -other.g2.y) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g3.y, -other.g3.x, other.g0.x, -other.g2.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z) + vec3<f32>(self_.g0.y) * other.g2 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.y, other.g2.z, -other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g2.z, other.g0.y, other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.y) + vec3<f32>(self_.g2.x) * vec3<f32>(-other.g1.w, -other.g4.z, other.g4.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g4.z, -other.g1.w, -other.g4.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g4.y, other.g4.x, -other.g1.w), vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g0.y) * other.g3 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g3.z, other.g0.x, other.g3.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g0.x) + vec3<f32>(self_.g2.x) * vec3<f32>(-other.g4.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g1.z, -other.g4.w, -other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g4.w), vec4<f32>(self_.g0.x) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, other.g0.x) + vec4<f32>(self_.g0.y) * other.g4 + vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.w, other.g4.z, -other.g4.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g4.z, other.g1.w, other.g4.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g4.y, -other.g4.x, other.g1.w, -other.g1.z) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g0.y, other.g2.z, -other.g2.y, -other.g3.x) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g2.z, other.g0.y, other.g2.x, -other.g3.y) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g2.y, -other.g2.x, other.g0.y, -other.g3.z));
}

fn multi_vector_at_origin__geometric_anti_product__multi_vector_at_infinity(self_: MultiVectorAtOrigin, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * other.g0.yx * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g0.y) * other.g0 - vec2<f32>(self_.g1.x) * vec2<f32>(other.g2.x, other.g1.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g2.y, other.g1.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g2.z, other.g1.z) + vec2<f32>(self_.g2.x) * vec2<f32>(other.g1.x, -other.g2.x) + vec2<f32>(self_.g2.y) * vec2<f32>(other.g1.y, -other.g2.y) + vec2<f32>(self_.g2.z) * vec2<f32>(other.g1.z, -other.g2.z), vec3<f32>(self_.g0.x) * other.g2 + vec3<f32>(self_.g0.y) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x), vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * other.g1 + vec3<f32>(self_.g0.y) * other.g2 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x) + vec3<f32>(self_.g2.x) * vec3<f32>(-other.g0.y, -other.g1.z, other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g1.z, -other.g0.y, -other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.y));
}

fn multi_vector_at_origin__geometric_anti_product__multi_vector_at_origin(self_: MultiVectorAtOrigin, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * other.g0.yx * vec2<f32>(1.0, -1.0) + vec2<f32>(self_.g0.y) * other.g0 - vec2<f32>(self_.g1.x) * vec2<f32>(other.g2.x, other.g1.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g2.y, other.g1.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g2.z, other.g1.z) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g1.x, other.g2.x) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g1.y, other.g2.y) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g1.z, other.g2.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * other.g2 + vec3<f32>(self_.g0.y) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y) + vec3<f32>(self_.g2.x) * vec3<f32>(-other.g0.x, -other.g2.z, other.g2.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g2.z, -other.g0.x, -other.g2.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g2.y, other.g2.x, -other.g0.x), vec3<f32>(self_.g0.x) * other.g1 + vec3<f32>(self_.g0.y) * other.g2 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y));
}

fn multi_vector_at_origin__geometric_anti_product__origin(self_: MultiVectorAtOrigin, other: Origin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0.yx * vec2<f32>(other.g0), vec3<f32>(0.0) - self_.g2 * vec3<f32>(other.g0), self_.g1 * vec3<f32>(other.g0));
}

fn multi_vector_at_origin__geometric_anti_product__plane(self_: MultiVectorAtOrigin, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.w, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, other.g0.z), vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(0.0) - self_.g2 * vec3<f32>(other.g0.w), vec4<f32>(self_.g0.y) * other.g0 + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn multi_vector_at_origin__geometric_anti_product__plane_at_origin(self_: MultiVectorAtOrigin, other: PlaneAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, other.g0.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.y) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn multi_vector_at_origin__geometric_anti_product__point(self_: MultiVectorAtOrigin, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.w) + vec2<f32>(self_.g2.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(other.g0.z, 0.0), vec4<f32>(self_.g0.y) * other.g0 + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0), vec3<f32>(0.0) - self_.g2 * vec3<f32>(other.g0.w), vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn multi_vector_at_origin__geometric_anti_product__point_at_infinity(self_: MultiVectorAtOrigin, other: PointAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g2.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(self_.g0.y) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn multi_vector_at_origin__geometric_anti_product__rotor(self_: MultiVectorAtOrigin, other: Rotor) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0 * vec2<f32>(other.g0.w) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w));
}

fn multi_vector_at_origin__geometric_anti_product__scalar(self_: MultiVectorAtOrigin, other: Scalar) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0.yx * vec2<f32>(other.g0), self_.g2 * vec3<f32>(other.g0), self_.g1 * vec3<f32>(other.g0));
}

fn multi_vector_at_origin__geometric_anti_product__transflector(self_: MultiVectorAtOrigin, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.w, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(other.g0.z, other.g1.z), vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g2.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w), vec4<f32>(self_.g0.y) * other.g1 + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z));
}

fn multi_vector_at_origin__geometric_anti_product__translator(self_: MultiVectorAtOrigin, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(self_.g0.x) * other.g0 + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0), self_.g1 * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g2.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn origin__geometric_anti_product__anti_scalar(self_: Origin, other: AntiScalar) -> Origin {
    return Origin(self_.g0 * other.g0);
}

fn origin__geometric_anti_product__flector(self_: Origin, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0) * vec2<f32>(other.g1.w, other.g0.w), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(0.0) - vec3<f32>(self_.g0) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn origin__geometric_anti_product__flector_at_infinity(self_: Origin, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0) * vec2<f32>(-other.g0.w, 0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn origin__geometric_anti_product__horizon(self_: Origin, other: Horizon) -> Scalar {
    return Scalar(0.0 - self_.g0 * other.g0);
}

fn origin__geometric_anti_product__line(self_: Origin, other: Line) -> Transflector {
    return Transflector(vec3<f32>(self_.g0) * other.g1, vec4<f32>(self_.g0) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn origin__geometric_anti_product__line_at_infinity(self_: Origin, other: LineAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0) * other.g0);
}

fn origin__geometric_anti_product__line_at_origin(self_: Origin, other: LineAtOrigin) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0) * other.g0);
}

fn origin__geometric_anti_product__magnitude(self_: Origin, other: Magnitude) -> Flector {
    return Flector(vec4<f32>(self_.g0) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y), vec4<f32>(self_.g0) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x));
}

fn origin__geometric_anti_product__motor(self_: Origin, other: Motor) -> Flector {
    return Flector(vec4<f32>(self_.g0) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, other.g0.w), vec4<f32>(self_.g0) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn origin__geometric_anti_product__multi_vector(self_: Origin, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0) * vec2<f32>(other.g4.w, other.g1.w), vec4<f32>(self_.g0) * vec4<f32>(other.g3.x, other.g3.y, other.g3.z, other.g0.y), vec3<f32>(0.0) - vec3<f32>(self_.g0) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z), vec3<f32>(0.0) - vec3<f32>(self_.g0) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(self_.g0) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, other.g0.x));
}

fn origin__geometric_anti_product__multi_vector_at_infinity(self_: Origin, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0) * other.g0.yx * vec2<f32>(-1.0, 1.0), vec3<f32>(self_.g0) * other.g2, vec3<f32>(0.0) - vec3<f32>(self_.g0) * other.g1);
}

fn origin__geometric_anti_product__multi_vector_at_origin(self_: Origin, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0) * other.g0.yx * vec2<f32>(1.0, -1.0), vec3<f32>(0.0) - vec3<f32>(self_.g0) * other.g2, vec3<f32>(self_.g0) * other.g1);
}

fn origin__geometric_anti_product__origin(self_: Origin, other: Origin) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0 * other.g0);
}

fn origin__geometric_anti_product__plane(self_: Origin, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0) * vec2<f32>(-other.g0.w, 0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn origin__geometric_anti_product__plane_at_origin(self_: Origin, other: PlaneAtOrigin) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(0.0) - vec3<f32>(self_.g0) * other.g0);
}

fn origin__geometric_anti_product__point(self_: Origin, other: Point) -> Translator {
    return Translator(vec4<f32>(0.0) - vec4<f32>(self_.g0) * other.g0);
}

fn origin__geometric_anti_product__point_at_infinity(self_: Origin, other: PointAtInfinity) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(0.0) - vec3<f32>(self_.g0) * other.g0);
}

fn origin__geometric_anti_product__rotor(self_: Origin, other: Rotor) -> Flector {
    return Flector(vec4<f32>(self_.g0) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w), vec4<f32>(self_.g0) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn origin__geometric_anti_product__scalar(self_: Origin, other: Scalar) -> Horizon {
    return Horizon(self_.g0 * other.g0);
}

fn origin__geometric_anti_product__transflector(self_: Origin, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0) * vec2<f32>(-other.g1.w, 0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(0.0) - vec3<f32>(self_.g0) * other.g0, vec4<f32>(0.0));
}

fn origin__geometric_anti_product__translator(self_: Origin, other: Translator) -> Point {
    return Point(vec4<f32>(self_.g0) * other.g0);
}

fn plane__geometric_anti_product__anti_scalar(self_: Plane, other: AntiScalar) -> Plane {
    return Plane(self_.g0 * vec4<f32>(other.g0));
}

fn plane__geometric_anti_product__flector(self_: Plane, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, other.g1.z) + vec2<f32>(self_.g0.w) * vec2<f32>(other.g0.w, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g0.w, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(0.0));
}

fn plane__geometric_anti_product__flector_at_infinity(self_: Plane, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w));
}

fn plane__geometric_anti_product__horizon(self_: Plane, other: Horizon) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0));
}

fn plane__geometric_anti_product__line(self_: Plane, other: Line) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z));
}

fn plane__geometric_anti_product__line_at_infinity(self_: Plane, other: LineAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z));
}

fn plane__geometric_anti_product__line_at_origin(self_: Plane, other: LineAtOrigin) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g0.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn plane__geometric_anti_product__magnitude(self_: Plane, other: Magnitude) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.x), self_.g0 * vec4<f32>(other.g0.y));
}

fn plane__geometric_anti_product__motor(self_: Plane, other: Motor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn plane__geometric_anti_product__multi_vector(self_: Plane, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, other.g4.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, other.g4.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, other.g4.z) + vec2<f32>(self_.g0.w) * vec2<f32>(other.g1.w, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g3.z, -other.g3.y, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g3.z, other.g0.x, other.g3.x, -other.g2.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g3.y, -other.g3.x, other.g0.x, -other.g2.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, -other.g4.z, other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g4.z, -other.g1.w, -other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g4.y, other.g4.x, -other.g1.w), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g4.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g4.w, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g4.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.y, other.g2.z, -other.g2.y, -other.g3.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.z, other.g0.y, other.g2.x, -other.g3.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g2.y, -other.g2.x, other.g0.y, -other.g3.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y));
}

fn plane__geometric_anti_product__multi_vector_at_infinity(self_: Plane, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, -other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, -other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, -other.g2.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.y, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g0.y, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.y));
}

fn plane__geometric_anti_product__multi_vector_at_origin(self_: Plane, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g2.y) + vec2<f32>(self_.g0.w, self_.g0.z) * vec2<f32>(other.g0.x, other.g2.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + self_.g0.wwwz * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, -other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.x, -other.g2.z, other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g2.z, -other.g0.x, -other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g2.y, other.g2.x, -other.g0.x), vec3<f32>(self_.g0.w) * other.g2, vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.y, other.g1.z, -other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, other.g0.y, other.g1.x, 0.0) + self_.g0.zzzw * vec4<f32>(other.g1.y, -other.g1.x, other.g0.y, other.g0.y));
}

fn plane__geometric_anti_product__origin(self_: Plane, other: Origin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(other.g0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn plane__geometric_anti_product__plane(self_: Plane, other: Plane) -> Motor {
    return Motor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, other.g0.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn plane__geometric_anti_product__plane_at_origin(self_: Plane, other: PlaneAtOrigin) -> Motor {
    return Motor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, other.g0.z), vec3<f32>(self_.g0.w) * other.g0);
}

fn plane__geometric_anti_product__point(self_: Plane, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(other.g0.w, 0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(0.0));
}

fn plane__geometric_anti_product__point_at_infinity(self_: Plane, other: PointAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn plane__geometric_anti_product__rotor(self_: Plane, other: Rotor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g0.wwwz * other.g0.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, 0.0) + self_.g0.zzzw * other.g0.yxww * vec4<f32>(1.0, -1.0, 1.0, 1.0));
}

fn plane__geometric_anti_product__scalar(self_: Plane, other: Scalar) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0));
}

fn plane__geometric_anti_product__transflector(self_: Plane, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, other.g1.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(0.0));
}

fn plane__geometric_anti_product__translator(self_: Plane, other: Translator) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn plane_at_origin__geometric_anti_product__anti_scalar(self_: PlaneAtOrigin, other: AntiScalar) -> PlaneAtOrigin {
    return PlaneAtOrigin(self_.g0 * vec3<f32>(other.g0));
}

fn plane_at_origin__geometric_anti_product__flector(self_: PlaneAtOrigin, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, other.g1.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g0.w, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w), vec4<f32>(0.0));
}

fn plane_at_origin__geometric_anti_product__flector_at_infinity(self_: PlaneAtOrigin, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w));
}

fn plane_at_origin__geometric_anti_product__horizon(self_: PlaneAtOrigin, other: Horizon) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0));
}

fn plane_at_origin__geometric_anti_product__line(self_: PlaneAtOrigin, other: Line) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z));
}

fn plane_at_origin__geometric_anti_product__line_at_infinity(self_: PlaneAtOrigin, other: LineAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z));
}

fn plane_at_origin__geometric_anti_product__line_at_origin(self_: PlaneAtOrigin, other: LineAtOrigin) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn plane_at_origin__geometric_anti_product__magnitude(self_: PlaneAtOrigin, other: Magnitude) -> Transflector {
    return Transflector(self_.g0 * vec3<f32>(other.g0.x), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g0.y, other.g0.y, other.g0.y, 0.0));
}

fn plane_at_origin__geometric_anti_product__motor(self_: PlaneAtOrigin, other: Motor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, -other.g1.z));
}

fn plane_at_origin__geometric_anti_product__multi_vector(self_: PlaneAtOrigin, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, other.g4.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, other.g4.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, other.g4.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g3.z, -other.g3.y, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g3.z, other.g0.x, other.g3.x, -other.g2.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g3.y, -other.g3.x, other.g0.x, -other.g2.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, -other.g4.z, other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g4.z, -other.g1.w, -other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g4.y, other.g4.x, -other.g1.w), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g4.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g4.w, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g4.w), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.y, other.g2.z, -other.g2.y, -other.g3.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.z, other.g0.y, other.g2.x, -other.g3.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g2.y, -other.g2.x, other.g0.y, -other.g3.z));
}

fn plane_at_origin__geometric_anti_product__multi_vector_at_infinity(self_: PlaneAtOrigin, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, -other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, -other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, -other.g2.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.y, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g0.y, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.y));
}

fn plane_at_origin__geometric_anti_product__multi_vector_at_origin(self_: PlaneAtOrigin, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, other.g2.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.x, -other.g2.z, other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g2.z, -other.g0.x, -other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g2.y, other.g2.x, -other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y));
}

fn plane_at_origin__geometric_anti_product__origin(self_: PlaneAtOrigin, other: Origin) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0));
}

fn plane_at_origin__geometric_anti_product__plane(self_: PlaneAtOrigin, other: Plane) -> Motor {
    return Motor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, other.g0.z), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0.w));
}

fn plane_at_origin__geometric_anti_product__plane_at_origin(self_: PlaneAtOrigin, other: PlaneAtOrigin) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, other.g0.z));
}

fn plane_at_origin__geometric_anti_product__point(self_: PlaneAtOrigin, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(0.0));
}

fn plane_at_origin__geometric_anti_product__point_at_infinity(self_: PlaneAtOrigin, other: PointAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn plane_at_origin__geometric_anti_product__rotor(self_: PlaneAtOrigin, other: Rotor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, 0.0));
}

fn plane_at_origin__geometric_anti_product__scalar(self_: PlaneAtOrigin, other: Scalar) -> PointAtInfinity {
    return PointAtInfinity(self_.g0 * vec3<f32>(other.g0));
}

fn plane_at_origin__geometric_anti_product__transflector(self_: PlaneAtOrigin, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, other.g1.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w), vec4<f32>(0.0));
}

fn plane_at_origin__geometric_anti_product__translator(self_: PlaneAtOrigin, other: Translator) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn point__geometric_anti_product__anti_scalar(self_: Point, other: AntiScalar) -> Point {
    return Point(self_.g0 * vec4<f32>(other.g0));
}

fn point__geometric_anti_product__flector(self_: Point, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) - vec2<f32>(self_.g0.w) * vec2<f32>(other.g1.w, other.g0.w), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.w, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn point__geometric_anti_product__flector_at_infinity(self_: Point, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.w) * vec2<f32>(-other.g0.w, 0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn point__geometric_anti_product__horizon(self_: Point, other: Horizon) -> Scalar {
    return Scalar(0.0 - self_.g0.w * other.g0);
}

fn point__geometric_anti_product__line(self_: Point, other: Line) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * other.g1, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g0.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z));
}

fn point__geometric_anti_product__line_at_infinity(self_: Point, other: LineAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0.w) * other.g0);
}

fn point__geometric_anti_product__line_at_origin(self_: Point, other: LineAtOrigin) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g0.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z));
}

fn point__geometric_anti_product__magnitude(self_: Point, other: Magnitude) -> Flector {
    return Flector(self_.g0 * vec4<f32>(other.g0.y), vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x));
}

fn point__geometric_anti_product__motor(self_: Point, other: Motor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, other.g0.w), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g0.wwwz * other.g0.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0));
}

fn point__geometric_anti_product__multi_vector(self_: Point, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g4.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g4.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g4.z, 0.0) - vec2<f32>(self_.g0.w) * vec2<f32>(other.g4.w, other.g1.w), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.y, other.g2.z, -other.g2.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.z, other.g0.y, other.g2.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g2.y, -other.g2.x, other.g0.y, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g3.x, other.g3.y, other.g3.z, other.g0.y), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.w, other.g4.z, -other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g4.z, other.g1.w, other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g4.y, -other.g4.x, other.g1.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, other.g0.x));
}

fn point__geometric_anti_product__multi_vector_at_infinity(self_: Point, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.w) * other.g0.yx * vec2<f32>(-1.0, 1.0), vec3<f32>(self_.g0.w) * other.g2, vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * other.g1);
}

fn point__geometric_anti_product__multi_vector_at_origin(self_: Point, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g2.y, 0.0) - vec2<f32>(self_.g0.z, self_.g0.w) * vec2<f32>(other.g2.z, other.g0.x), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.y, other.g1.z, -other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, other.g0.y, other.g1.x, 0.0) + self_.g0.zzzw * vec4<f32>(other.g1.y, -other.g1.x, other.g0.y, other.g0.y), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * other.g2, vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + self_.g0.wwwz * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, -other.g1.z));
}

fn point__geometric_anti_product__origin(self_: Point, other: Origin) -> Translator {
    return Translator(self_.g0 * vec4<f32>(other.g0));
}

fn point__geometric_anti_product__plane(self_: Point, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(-other.g0.w, 0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(0.0));
}

fn point__geometric_anti_product__plane_at_origin(self_: Point, other: PlaneAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(0.0));
}

fn point__geometric_anti_product__point(self_: Point, other: Point) -> Translator {
    return Translator(self_.g0.xyzx * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0) - vec4<f32>(self_.g0.w) * other.g0);
}

fn point__geometric_anti_product__point_at_infinity(self_: Point, other: PointAtInfinity) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * other.g0);
}

fn point__geometric_anti_product__rotor(self_: Point, other: Rotor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, 0.0) + self_.g0.zzzw * other.g0.yxww * vec4<f32>(1.0, -1.0, 1.0, 1.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g0.wwwz * other.g0.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0));
}

fn point__geometric_anti_product__scalar(self_: Point, other: Scalar) -> Horizon {
    return Horizon(self_.g0.w * other.g0);
}

fn point__geometric_anti_product__transflector(self_: Point, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(-other.g1.w, 0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) - vec3<f32>(self_.g0.w) * other.g0, vec4<f32>(0.0));
}

fn point__geometric_anti_product__translator(self_: Point, other: Translator) -> Point {
    return Point(self_.g0.xyzx * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * other.g0);
}

fn point_at_infinity__geometric_anti_product__anti_scalar(self_: PointAtInfinity, other: AntiScalar) -> PointAtInfinity {
    return PointAtInfinity(self_.g0 * vec3<f32>(other.g0));
}

fn point_at_infinity__geometric_anti_product__flector(self_: PointAtInfinity, other: Flector) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.w, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.w));
}

fn point_at_infinity__geometric_anti_product__line(self_: PointAtInfinity, other: Line) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z));
}

fn point_at_infinity__geometric_anti_product__line_at_origin(self_: PointAtInfinity, other: LineAtOrigin) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z));
}

fn point_at_infinity__geometric_anti_product__magnitude(self_: PointAtInfinity, other: Magnitude) -> PointAtInfinity {
    return PointAtInfinity(self_.g0 * vec3<f32>(other.g0.y));
}

fn point_at_infinity__geometric_anti_product__motor(self_: PointAtInfinity, other: Motor) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * other.g0.wzyx * vec4<f32>(1.0, 1.0, -1.0, -1.0) + vec4<f32>(self_.g0.y) * other.g0.zwxy * vec4<f32>(-1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g0.z) * other.g0.yxwz * vec4<f32>(1.0, -1.0, 1.0, -1.0));
}

fn point_at_infinity__geometric_anti_product__multi_vector(self_: PointAtInfinity, other: MultiVector) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g4.x, other.g2.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g4.y, other.g2.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g4.z, other.g2.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.y, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.y), vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.w, other.g4.z, -other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g4.z, other.g1.w, other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g4.y, -other.g4.x, other.g1.w));
}

fn point_at_infinity__geometric_anti_product__multi_vector_at_origin(self_: PointAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g2.x, other.g1.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g2.y, other.g1.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g2.z, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x));
}

fn point_at_infinity__geometric_anti_product__origin(self_: PointAtInfinity, other: Origin) -> LineAtInfinity {
    return LineAtInfinity(self_.g0 * vec3<f32>(other.g0));
}

fn point_at_infinity__geometric_anti_product__plane(self_: PointAtInfinity, other: Plane) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn point_at_infinity__geometric_anti_product__plane_at_origin(self_: PointAtInfinity, other: PlaneAtOrigin) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn point_at_infinity__geometric_anti_product__point(self_: PointAtInfinity, other: Point) -> LineAtInfinity {
    return LineAtInfinity(self_.g0 * vec3<f32>(other.g0.w));
}

fn point_at_infinity__geometric_anti_product__rotor(self_: PointAtInfinity, other: Rotor) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * other.g0.wzyx * vec4<f32>(1.0, 1.0, -1.0, -1.0) + vec4<f32>(self_.g0.y) * other.g0.zwxy * vec4<f32>(-1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g0.z) * other.g0.yxwz * vec4<f32>(1.0, -1.0, 1.0, -1.0));
}

fn point_at_infinity__geometric_anti_product__transflector(self_: PointAtInfinity, other: Transflector) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0));
}

fn point_at_infinity__geometric_anti_product__translator(self_: PointAtInfinity, other: Translator) -> PointAtInfinity {
    return PointAtInfinity(self_.g0 * vec3<f32>(other.g0.w));
}

fn rotor__geometric_anti_product__anti_scalar(self_: Rotor, other: AntiScalar) -> Rotor {
    return Rotor(self_.g0 * vec4<f32>(other.g0));
}

fn rotor__geometric_anti_product__flector(self_: Rotor, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z) + vec4<f32>(self_.g0.w) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, other.g0.w, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g0.w, -other.g0.z) + vec4<f32>(self_.g0.w) * other.g1);
}

fn rotor__geometric_anti_product__flector_at_infinity(self_: Rotor, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * other.g0.wzyx * vec4<f32>(1.0, 1.0, -1.0, -1.0) + vec4<f32>(self_.g0.y) * other.g0.zwxy * vec4<f32>(-1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g0.z) * other.g0.yxwz * vec4<f32>(1.0, -1.0, 1.0, -1.0) + vec4<f32>(self_.g0.w) * other.g0);
}

fn rotor__geometric_anti_product__horizon(self_: Rotor, other: Horizon) -> FlectorAtInfinity {
    return FlectorAtInfinity(self_.g0 * vec4<f32>(other.g0));
}

fn rotor__geometric_anti_product__line(self_: Rotor, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, other.g0.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, other.g0.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g0.w) * other.g1, vec4<f32>(0.0));
}

fn rotor__geometric_anti_product__line_at_infinity(self_: Rotor, other: LineAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * other.g0);
}

fn rotor__geometric_anti_product__line_at_origin(self_: Rotor, other: LineAtOrigin) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn rotor__geometric_anti_product__magnitude(self_: Rotor, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * other.g0, vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.x), vec4<f32>(0.0));
}

fn rotor__geometric_anti_product__motor(self_: Rotor, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, other.g0.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, other.g0.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, other.g0.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.w), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g0.w) * other.g1, vec4<f32>(0.0));
}

fn rotor__geometric_anti_product__multi_vector(self_: Rotor, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g3.x, other.g2.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g3.y, other.g2.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g3.z, other.g2.z) + vec2<f32>(self_.g0.w) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(other.g4.w, other.g1.z, -other.g1.y, -other.g4.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, other.g4.w, other.g1.x, -other.g4.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g4.w, -other.g4.z) + vec4<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.y, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.y) + vec3<f32>(self_.g0.w) * other.g2, vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g3.z, other.g0.x, other.g3.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g0.x) + vec3<f32>(self_.g0.w) * other.g3, vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, other.g4.z, -other.g4.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g4.z, other.g1.w, other.g4.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g4.y, -other.g4.x, other.g1.w, -other.g1.z) + vec4<f32>(self_.g0.w) * other.g4);
}

fn rotor__geometric_anti_product__multi_vector_at_infinity(self_: Rotor, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g2.x, other.g1.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g2.y, other.g1.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g2.z, other.g1.z) + vec2<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y) + vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x) + vec3<f32>(self_.g0.w) * other.g2);
}

fn rotor__geometric_anti_product__multi_vector_at_origin(self_: Rotor, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g2.x, other.g1.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g2.y, other.g1.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g2.z, other.g1.z) + vec2<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y) + vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x) + vec3<f32>(self_.g0.w) * other.g2);
}

fn rotor__geometric_anti_product__origin(self_: Rotor, other: Origin) -> Flector {
    return Flector(vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0), self_.g0.xyzx * vec4<f32>(other.g0, other.g0, other.g0, 0.0));
}

fn rotor__geometric_anti_product__plane(self_: Rotor, other: Plane) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * other.g0);
}

fn rotor__geometric_anti_product__plane_at_origin(self_: Rotor, other: PlaneAtOrigin) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn rotor__geometric_anti_product__point(self_: Rotor, other: Point) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn rotor__geometric_anti_product__point_at_infinity(self_: Rotor, other: PointAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn rotor__geometric_anti_product__rotor(self_: Rotor, other: Rotor) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * other.g0.wzyx * vec4<f32>(1.0, 1.0, -1.0, -1.0) + vec4<f32>(self_.g0.y) * other.g0.zwxy * vec4<f32>(-1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g0.z) * other.g0.yxwz * vec4<f32>(1.0, -1.0, 1.0, -1.0) + vec4<f32>(self_.g0.w) * other.g0);
}

fn rotor__geometric_anti_product__scalar(self_: Rotor, other: Scalar) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.w) * vec2<f32>(other.g0, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0));
}

fn rotor__geometric_anti_product__transflector(self_: Rotor, other: Transflector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g0.w) * other.g1);
}

fn rotor__geometric_anti_product__translator(self_: Rotor, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z, self_.g0.w) * vec2<f32>(-other.g0.z, other.g0.w), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn scalar__geometric_anti_product__anti_scalar(self_: Scalar, other: AntiScalar) -> Scalar {
    return Scalar(self_.g0 * other.g0);
}

fn scalar__geometric_anti_product__flector(self_: Scalar, other: Flector) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(0.0) - vec4<f32>(self_.g0) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, other.g0.w));
}

fn scalar__geometric_anti_product__line(self_: Scalar, other: Line) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(self_.g0) * other.g0);
}

fn scalar__geometric_anti_product__line_at_origin(self_: Scalar, other: LineAtOrigin) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(self_.g0) * other.g0);
}

fn scalar__geometric_anti_product__magnitude(self_: Scalar, other: Magnitude) -> Scalar {
    return Scalar(self_.g0 * other.g0.y);
}

fn scalar__geometric_anti_product__motor(self_: Scalar, other: Motor) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0) * vec2<f32>(other.g0.w, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn scalar__geometric_anti_product__multi_vector(self_: Scalar, other: MultiVector) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0) * vec2<f32>(other.g0.y, -other.g1.w), vec3<f32>(0.0) - vec3<f32>(self_.g0) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z), vec3<f32>(self_.g0) * other.g2);
}

fn scalar__geometric_anti_product__multi_vector_at_origin(self_: Scalar, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0) * other.g0.yx * vec2<f32>(1.0, -1.0), vec3<f32>(0.0) - vec3<f32>(self_.g0) * other.g2, vec3<f32>(self_.g0) * other.g1);
}

fn scalar__geometric_anti_product__origin(self_: Scalar, other: Origin) -> Horizon {
    return Horizon(0.0 - self_.g0 * other.g0);
}

fn scalar__geometric_anti_product__plane(self_: Scalar, other: Plane) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(0.0) - vec3<f32>(self_.g0) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn scalar__geometric_anti_product__plane_at_origin(self_: Scalar, other: PlaneAtOrigin) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(0.0) - vec3<f32>(self_.g0) * other.g0);
}

fn scalar__geometric_anti_product__point(self_: Scalar, other: Point) -> Horizon {
    return Horizon(0.0 - self_.g0 * other.g0.w);
}

fn scalar__geometric_anti_product__rotor(self_: Scalar, other: Rotor) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0) * vec2<f32>(other.g0.w, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn scalar__geometric_anti_product__transflector(self_: Scalar, other: Transflector) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(0.0) - vec3<f32>(self_.g0) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z));
}

fn scalar__geometric_anti_product__translator(self_: Scalar, other: Translator) -> Scalar {
    return Scalar(self_.g0 * other.g0.w);
}

fn transflector__geometric_anti_product__anti_scalar(self_: Transflector, other: AntiScalar) -> Transflector {
    return Transflector(self_.g0 * vec3<f32>(other.g0), self_.g1 * vec4<f32>(other.g0));
}

fn transflector__geometric_anti_product__flector(self_: Transflector, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, other.g1.z) + vec2<f32>(self_.g1.w) * vec2<f32>(other.g0.w, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, -other.g0.w, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.w, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.w) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(0.0));
}

fn transflector__geometric_anti_product__flector_at_infinity(self_: Transflector, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w));
}

fn transflector__geometric_anti_product__horizon(self_: Transflector, other: Horizon) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0));
}

fn transflector__geometric_anti_product__line(self_: Transflector, other: Line) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z));
}

fn transflector__geometric_anti_product__line_at_infinity(self_: Transflector, other: LineAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z));
}

fn transflector__geometric_anti_product__line_at_origin(self_: Transflector, other: LineAtOrigin) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g1.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn transflector__geometric_anti_product__magnitude(self_: Transflector, other: Magnitude) -> Transflector {
    return Transflector(self_.g0 * vec3<f32>(other.g0.y) + vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.x), self_.g1 * vec4<f32>(other.g0.y));
}

fn transflector__geometric_anti_product__motor(self_: Transflector, other: Motor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, -other.g1.z) + vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn transflector__geometric_anti_product__multi_vector(self_: Transflector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g4.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g4.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g4.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, other.g4.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, other.g4.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g1.z, other.g4.z) + vec2<f32>(self_.g1.w) * vec2<f32>(other.g1.w, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.y, other.g2.z, -other.g2.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.z, other.g0.y, other.g2.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g2.y, -other.g2.x, other.g0.y, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.x, other.g3.z, -other.g3.y, -other.g2.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g3.z, other.g0.x, other.g3.x, -other.g2.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g3.y, -other.g3.x, other.g0.x, -other.g2.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0), vec3<f32>(self_.g1.x) * vec3<f32>(-other.g1.w, -other.g4.z, other.g4.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g4.z, -other.g1.w, -other.g4.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g4.y, other.g4.x, -other.g1.w), vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.w, other.g4.z, -other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g4.z, other.g1.w, other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g4.y, -other.g4.x, other.g1.w) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g4.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, -other.g4.w, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g4.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.y, other.g2.z, -other.g2.y, -other.g3.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g2.z, other.g0.y, other.g2.x, -other.g3.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g2.y, -other.g2.x, other.g0.y, -other.g3.z) + vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y));
}

fn transflector__geometric_anti_product__multi_vector_at_infinity(self_: Transflector, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, -other.g2.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, -other.g2.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g1.z, -other.g2.z), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x), vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.y, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, -other.g0.y, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.y));
}

fn transflector__geometric_anti_product__multi_vector_at_origin(self_: Transflector, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g2.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g2.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g2.y) + vec2<f32>(self_.g1.w, self_.g1.z) * vec2<f32>(other.g0.x, other.g2.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.y, other.g1.z, -other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, other.g0.y, other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g0.y, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + self_.g1.wwwz * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, -other.g1.z), vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.x, -other.g2.z, other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g2.z, -other.g0.x, -other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g2.y, other.g2.x, -other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x) + vec3<f32>(self_.g1.w) * other.g2, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.y, other.g1.z, -other.g1.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, other.g0.y, other.g1.x, 0.0) + self_.g1.zzzw * vec4<f32>(other.g1.y, -other.g1.x, other.g0.y, other.g0.y));
}

fn transflector__geometric_anti_product__origin(self_: Transflector, other: Origin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.w) * vec2<f32>(other.g0, 0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0), self_.g0 * vec3<f32>(other.g0), vec4<f32>(0.0));
}

fn transflector__geometric_anti_product__plane(self_: Transflector, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn transflector__geometric_anti_product__plane_at_origin(self_: Transflector, other: PlaneAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g1.w) * other.g0, vec4<f32>(0.0));
}

fn transflector__geometric_anti_product__point(self_: Transflector, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g1.w) * vec2<f32>(other.g0.w, 0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.w), self_.g0 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(0.0));
}

fn transflector__geometric_anti_product__point_at_infinity(self_: Transflector, other: PointAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn transflector__geometric_anti_product__rotor(self_: Transflector, other: Rotor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g1.wwwz * other.g0.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, 0.0) + self_.g1.zzzw * other.g0.yxww * vec4<f32>(1.0, -1.0, 1.0, 1.0));
}

fn transflector__geometric_anti_product__scalar(self_: Transflector, other: Scalar) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0));
}

fn transflector__geometric_anti_product__transflector(self_: Transflector, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, other.g1.z), vec4<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(0.0));
}

fn transflector__geometric_anti_product__translator(self_: Transflector, other: Translator) -> Transflector {
    return Transflector(self_.g0 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w));
}

fn translator__geometric_anti_product__anti_scalar(self_: Translator, other: AntiScalar) -> Translator {
    return Translator(self_.g0 * vec4<f32>(other.g0));
}

fn translator__geometric_anti_product__flector(self_: Translator, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(-other.g0.w, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, -other.g0.w, -other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, -other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g1.z) + vec4<f32>(self_.g0.w) * other.g1);
}

fn translator__geometric_anti_product__flector_at_infinity(self_: Translator, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.w) * other.g0);
}

fn translator__geometric_anti_product__horizon(self_: Translator, other: Horizon) -> Horizon {
    return Horizon(self_.g0.w * other.g0);
}

fn translator__geometric_anti_product__line(self_: Translator, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * other.g1, vec4<f32>(0.0));
}

fn translator__geometric_anti_product__line_at_infinity(self_: Translator, other: LineAtInfinity) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(self_.g0.w) * other.g0);
}

fn translator__geometric_anti_product__line_at_origin(self_: Translator, other: LineAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(0.0));
}

fn translator__geometric_anti_product__magnitude(self_: Translator, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * other.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y), vec4<f32>(0.0));
}

fn translator__geometric_anti_product__motor(self_: Translator, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z, self_.g0.w) * vec2<f32>(-other.g0.z, other.g0.w), vec4<f32>(0.0), vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w) + vec3<f32>(self_.g0.w) * other.g1, vec4<f32>(0.0));
}

fn translator__geometric_anti_product__multi_vector(self_: Translator, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g2.z, 0.0) + vec2<f32>(self_.g0.w) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(-other.g1.w, -other.g4.z, other.g4.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g4.z, -other.g1.w, -other.g4.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g4.y, other.g4.x, -other.g1.w, 0.0) + vec4<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.w) * other.g2, vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.y, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.y) + vec3<f32>(self_.g0.w) * other.g3, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g4.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g4.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g4.z) + vec4<f32>(self_.g0.w) * other.g4);
}

fn translator__geometric_anti_product__multi_vector_at_infinity(self_: Translator, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.w) * other.g2);
}

fn translator__geometric_anti_product__multi_vector_at_origin(self_: Translator, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z, self_.g0.w) * vec2<f32>(-other.g1.z, other.g0.y), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g0.x, -other.g2.z, other.g2.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g2.z, -other.g0.x, -other.g2.x, 0.0) + self_.g0.zzzw * vec4<f32>(-other.g2.y, other.g2.x, -other.g0.x, other.g0.x), vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g2.y) + self_.g0.wwwz * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, other.g2.z));
}

fn translator__geometric_anti_product__origin(self_: Translator, other: Origin) -> Point {
    return Point(self_.g0 * vec4<f32>(-other.g0));
}

fn translator__geometric_anti_product__plane(self_: Translator, other: Plane) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g0.w) * other.g0);
}

fn translator__geometric_anti_product__plane_at_origin(self_: Translator, other: PlaneAtOrigin) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + self_.g0.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, other.g0.z));
}

fn translator__geometric_anti_product__point(self_: Translator, other: Point) -> Point {
    return Point(self_.g0.xyzx * vec4<f32>(-other.g0.w, -other.g0.w, -other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * other.g0);
}

fn translator__geometric_anti_product__point_at_infinity(self_: Translator, other: PointAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0.w) * other.g0);
}

fn translator__geometric_anti_product__rotor(self_: Translator, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z, self_.g0.w) * vec2<f32>(-other.g0.z, other.g0.w), vec4<f32>(0.0), vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec4<f32>(0.0));
}

fn translator__geometric_anti_product__scalar(self_: Translator, other: Scalar) -> Scalar {
    return Scalar(self_.g0.w * other.g0);
}

fn translator__geometric_anti_product__transflector(self_: Translator, other: Transflector) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g0.w) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g1.z) + vec4<f32>(self_.g0.w) * other.g1);
}

fn translator__geometric_anti_product__translator(self_: Translator, other: Translator) -> Translator {
    return Translator(self_.g0.xyzx * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * other.g0);
}

fn anti_scalar__geometric_product__flector(self_: AntiScalar, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.w), vec4<f32>(self_.g0) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0));
}

fn anti_scalar__geometric_product__flector_at_infinity(self_: AntiScalar, other: FlectorAtInfinity) -> Flector {
    return Flector(vec4<f32>(self_.g0) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w), vec4<f32>(self_.g0) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0));
}

fn anti_scalar__geometric_product__horizon(self_: AntiScalar, other: Horizon) -> Origin {
    return Origin(0.0 - self_.g0 * other.g0);
}

fn anti_scalar__geometric_product__line(self_: AntiScalar, other: Line) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(self_.g0) * other.g1);
}

fn anti_scalar__geometric_product__line_at_infinity(self_: AntiScalar, other: LineAtInfinity) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(self_.g0) * other.g0);
}

fn anti_scalar__geometric_product__magnitude(self_: AntiScalar, other: Magnitude) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0.x);
}

fn anti_scalar__geometric_product__motor(self_: AntiScalar, other: Motor) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(self_.g0) * other.g1);
}

fn anti_scalar__geometric_product__multi_vector(self_: AntiScalar, other: MultiVector) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0) * vec2<f32>(-other.g4.w, other.g0.x), vec3<f32>(self_.g0) * other.g3, vec3<f32>(0.0) - vec3<f32>(self_.g0) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z));
}

fn anti_scalar__geometric_product__multi_vector_at_infinity(self_: AntiScalar, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0) * other.g0.yx * vec2<f32>(-1.0, 1.0), vec3<f32>(self_.g0) * other.g2, vec3<f32>(0.0) - vec3<f32>(self_.g0) * other.g1);
}

fn anti_scalar__geometric_product__plane(self_: AntiScalar, other: Plane) -> Origin {
    return Origin(0.0 - self_.g0 * other.g0.w);
}

fn anti_scalar__geometric_product__point(self_: AntiScalar, other: Point) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(0.0) - vec3<f32>(self_.g0) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn anti_scalar__geometric_product__point_at_infinity(self_: AntiScalar, other: PointAtInfinity) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(0.0) - vec3<f32>(self_.g0) * other.g0);
}

fn anti_scalar__geometric_product__scalar(self_: AntiScalar, other: Scalar) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0);
}

fn anti_scalar__geometric_product__transflector(self_: AntiScalar, other: Transflector) -> Flector {
    return Flector(vec4<f32>(self_.g0) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.w), vec4<f32>(self_.g0) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0));
}

fn anti_scalar__geometric_product__translator(self_: AntiScalar, other: Translator) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(self_.g0) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn flector__geometric_product__anti_scalar(self_: Flector, other: AntiScalar) -> Flector {
    return Flector(vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0), self_.g0.xyzx * vec4<f32>(other.g0, other.g0, other.g0, 0.0));
}

fn flector__geometric_product__flector(self_: Flector, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, other.g1.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g1.w) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) - vec2<f32>(self_.g1.w) * vec2<f32>(other.g1.w, other.g0.w), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g0.w, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, other.g1.w, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g1.w) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn flector__geometric_product__flector_at_infinity(self_: Flector, other: FlectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z, self_.g0.w) * vec2<f32>(other.g0.z, other.g0.w) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) - vec2<f32>(self_.g1.w, self_.g1.z) * vec2<f32>(other.g0.w, other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn flector__geometric_product__horizon(self_: Flector, other: Horizon) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0) + vec2<f32>(self_.g1.w) * vec2<f32>(-other.g0, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0), vec4<f32>(0.0));
}

fn flector__geometric_product__line(self_: Flector, other: Line) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + self_.g1.wwwz * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, -other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn flector__geometric_product__line_at_infinity(self_: Flector, other: LineAtInfinity) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g1.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g0.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn flector__geometric_product__line_at_origin(self_: Flector, other: LineAtOrigin) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn flector__geometric_product__magnitude(self_: Flector, other: Magnitude) -> Flector {
    return Flector(self_.g0 * vec4<f32>(other.g0.x) + vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y), self_.g0.xyzx * vec4<f32>(other.g0.y, other.g0.y, other.g0.y, 0.0) + self_.g1 * vec4<f32>(other.g0.x));
}

fn flector__geometric_product__motor(self_: Flector, other: Motor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, other.g0.w), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn flector__geometric_product__multi_vector(self_: Flector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, other.g4.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, other.g4.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, other.g4.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g4.w) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z) - vec2<f32>(self_.g1.w) * vec2<f32>(other.g4.w, other.g1.w), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g3.z, -other.g3.y, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g3.z, other.g0.x, other.g3.x, -other.g2.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g3.y, -other.g3.x, other.g0.x, -other.g2.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g3.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g3.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g3.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g3.x, other.g3.y, other.g3.z, other.g0.y), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, -other.g4.z, other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g4.z, -other.g1.w, -other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g4.y, other.g4.x, -other.g1.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g4.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, other.g4.w, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g4.w) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g4.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g4.w, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g4.w) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.y, other.g2.z, -other.g2.y, -other.g3.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.z, other.g0.y, other.g2.x, -other.g3.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g2.y, -other.g2.x, other.g0.y, -other.g3.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g3.x, other.g3.y, other.g3.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.x, other.g3.z, -other.g3.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g3.z, other.g0.x, other.g3.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g3.y, -other.g3.x, other.g0.x, 0.0) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, other.g0.x));
}

fn flector__geometric_product__multi_vector_at_infinity(self_: Flector, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g0.z, self_.g0.w) * vec2<f32>(other.g1.z, other.g0.y) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) - vec2<f32>(self_.g1.w, self_.g1.z) * vec2<f32>(other.g0.y, other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g2.z, -other.g2.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.z, other.g0.x, other.g2.x, 0.0) + self_.g0.zzzw * vec4<f32>(other.g2.y, -other.g2.x, other.g0.x, other.g0.x) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + self_.g1.wwwz * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, -other.g2.z), vec3<f32>(self_.g0.w) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.y, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g0.y, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.y) - vec3<f32>(self_.g1.w) * other.g1, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + self_.g0.wwwz * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, -other.g2.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.x, other.g2.z, -other.g2.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g2.z, other.g0.x, other.g2.x, 0.0) + self_.g1.zzzw * vec4<f32>(other.g2.y, -other.g2.x, other.g0.x, other.g0.x));
}

fn flector__geometric_product__multi_vector_at_origin(self_: Flector, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, other.g2.z) + vec2<f32>(self_.g1.w) * other.g0.yx * vec2<f32>(1.0, -1.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.x, -other.g2.z, other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g2.z, -other.g0.x, -other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g2.y, other.g2.x, -other.g0.x) - vec3<f32>(self_.g1.w) * other.g2, vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y) + vec3<f32>(self_.g1.w) * other.g1);
}

fn flector__geometric_product__origin(self_: Flector, other: Origin) -> Rotor {
    return Rotor(self_.g0.xyzx * vec4<f32>(-other.g0, -other.g0, -other.g0, 0.0) + vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0));
}

fn flector__geometric_product__plane(self_: Flector, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g1.w) * vec2<f32>(-other.g0.w, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.w) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w), vec4<f32>(0.0));
}

fn flector__geometric_product__plane_at_origin(self_: Flector, other: PlaneAtOrigin) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0));
}

fn flector__geometric_product__point(self_: Flector, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g0.w), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn flector__geometric_product__point_at_infinity(self_: Flector, other: PointAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g0.w) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - vec3<f32>(self_.g1.w) * other.g0, vec4<f32>(0.0));
}

fn flector__geometric_product__rotor(self_: Flector, other: Rotor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, 0.0) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn flector__geometric_product__scalar(self_: Flector, other: Scalar) -> Flector {
    return Flector(self_.g0 * vec4<f32>(other.g0), self_.g1 * vec4<f32>(other.g0));
}

fn flector__geometric_product__transflector(self_: Flector, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, other.g1.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g1.w) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) - vec2<f32>(self_.g1.w, self_.g1.z) * vec2<f32>(other.g1.w, other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g0.w) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, other.g1.w, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g1.w) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w) - vec3<f32>(self_.g1.w) * other.g0, vec4<f32>(0.0));
}

fn flector__geometric_product__translator(self_: Flector, other: Translator) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g1.w) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn flector_at_infinity__geometric_product__anti_scalar(self_: FlectorAtInfinity, other: AntiScalar) -> Flector {
    return Flector(vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0), self_.g0.xyzx * vec4<f32>(other.g0, other.g0, other.g0, 0.0));
}

fn flector_at_infinity__geometric_product__flector(self_: FlectorAtInfinity, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, other.g1.z) - vec2<f32>(self_.g0.w) * vec2<f32>(other.g1.w, other.g0.w), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g0.w, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn flector_at_infinity__geometric_product__flector_at_infinity(self_: FlectorAtInfinity, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(-other.g0.w, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn flector_at_infinity__geometric_product__horizon(self_: FlectorAtInfinity, other: Horizon) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.w) * vec2<f32>(-other.g0, 0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0));
}

fn flector_at_infinity__geometric_product__line(self_: FlectorAtInfinity, other: Line) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn flector_at_infinity__geometric_product__line_at_infinity(self_: FlectorAtInfinity, other: LineAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn flector_at_infinity__geometric_product__line_at_origin(self_: FlectorAtInfinity, other: LineAtOrigin) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn flector_at_infinity__geometric_product__magnitude(self_: FlectorAtInfinity, other: Magnitude) -> Flector {
    return Flector(self_.g0 * vec4<f32>(other.g0.x, other.g0.x, other.g0.x, other.g0.y), self_.g0 * vec4<f32>(other.g0.y, other.g0.y, other.g0.y, other.g0.x));
}

fn flector_at_infinity__geometric_product__motor(self_: FlectorAtInfinity, other: Motor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, other.g0.w), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn flector_at_infinity__geometric_product__multi_vector(self_: FlectorAtInfinity, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, other.g4.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, other.g4.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, other.g4.z) - vec2<f32>(self_.g0.w) * vec2<f32>(other.g4.w, other.g1.w), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g3.z, -other.g3.y, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g3.z, other.g0.x, other.g3.x, -other.g2.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g3.y, -other.g3.x, other.g0.x, -other.g2.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g3.x, other.g3.y, other.g3.z, other.g0.y), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, -other.g4.z, other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g4.z, -other.g1.w, -other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g4.y, other.g4.x, -other.g1.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g4.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g4.w, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g4.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.y, other.g2.z, -other.g2.y, -other.g3.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.z, other.g0.y, other.g2.x, -other.g3.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g2.y, -other.g2.x, other.g0.y, -other.g3.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, other.g0.x));
}

fn flector_at_infinity__geometric_product__multi_vector_at_infinity(self_: FlectorAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, -other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, -other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, -other.g2.z) + vec2<f32>(self_.g0.w) * other.g0.yx * vec2<f32>(-1.0, 1.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x) + vec3<f32>(self_.g0.w) * other.g2, vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.y, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g0.y, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.y) - vec3<f32>(self_.g0.w) * other.g1);
}

fn flector_at_infinity__geometric_product__multi_vector_at_origin(self_: FlectorAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, other.g2.z) + vec2<f32>(self_.g0.w) * other.g0.yx * vec2<f32>(1.0, -1.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.x, -other.g2.z, other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g2.z, -other.g0.x, -other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g2.y, other.g2.x, -other.g0.x) - vec3<f32>(self_.g0.w) * other.g2, vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y) + vec3<f32>(self_.g0.w) * other.g1);
}

fn flector_at_infinity__geometric_product__origin(self_: FlectorAtInfinity, other: Origin) -> Rotor {
    return Rotor(vec4<f32>(0.0) - self_.g0 * vec4<f32>(other.g0));
}

fn flector_at_infinity__geometric_product__plane(self_: FlectorAtInfinity, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.w, self_.g0.z) * vec2<f32>(-other.g0.w, other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w), vec4<f32>(0.0));
}

fn flector_at_infinity__geometric_product__plane_at_origin(self_: FlectorAtInfinity, other: PlaneAtOrigin) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0));
}

fn flector_at_infinity__geometric_product__point(self_: FlectorAtInfinity, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z, self_.g0.w) * vec2<f32>(other.g0.z, -other.g0.w), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn flector_at_infinity__geometric_product__point_at_infinity(self_: FlectorAtInfinity, other: PointAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - vec3<f32>(self_.g0.w) * other.g0);
}

fn flector_at_infinity__geometric_product__rotor(self_: FlectorAtInfinity, other: Rotor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn flector_at_infinity__geometric_product__scalar(self_: FlectorAtInfinity, other: Scalar) -> FlectorAtInfinity {
    return FlectorAtInfinity(self_.g0 * vec4<f32>(other.g0));
}

fn flector_at_infinity__geometric_product__transflector(self_: FlectorAtInfinity, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, other.g1.z) + vec2<f32>(self_.g0.w) * vec2<f32>(-other.g1.w, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w) - vec3<f32>(self_.g0.w) * other.g0, vec4<f32>(0.0));
}

fn flector_at_infinity__geometric_product__translator(self_: FlectorAtInfinity, other: Translator) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn horizon__geometric_product__anti_scalar(self_: Horizon, other: AntiScalar) -> Origin {
    return Origin(self_.g0 * other.g0);
}

fn horizon__geometric_product__flector(self_: Horizon, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0) * vec2<f32>(other.g1.w, other.g0.w), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(0.0) - vec3<f32>(self_.g0) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn horizon__geometric_product__flector_at_infinity(self_: Horizon, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0) * vec2<f32>(-other.g0.w, 0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn horizon__geometric_product__horizon(self_: Horizon, other: Horizon) -> Scalar {
    return Scalar(0.0 - self_.g0 * other.g0);
}

fn horizon__geometric_product__line(self_: Horizon, other: Line) -> Transflector {
    return Transflector(vec3<f32>(self_.g0) * other.g1, vec4<f32>(self_.g0) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn horizon__geometric_product__line_at_infinity(self_: Horizon, other: LineAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0) * other.g0);
}

fn horizon__geometric_product__line_at_origin(self_: Horizon, other: LineAtOrigin) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0) * other.g0);
}

fn horizon__geometric_product__magnitude(self_: Horizon, other: Magnitude) -> Flector {
    return Flector(vec4<f32>(self_.g0) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y), vec4<f32>(self_.g0) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x));
}

fn horizon__geometric_product__motor(self_: Horizon, other: Motor) -> Flector {
    return Flector(vec4<f32>(self_.g0) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, other.g0.w), vec4<f32>(self_.g0) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn horizon__geometric_product__multi_vector(self_: Horizon, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0) * vec2<f32>(other.g4.w, other.g1.w), vec4<f32>(self_.g0) * vec4<f32>(other.g3.x, other.g3.y, other.g3.z, other.g0.y), vec3<f32>(0.0) - vec3<f32>(self_.g0) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z), vec3<f32>(0.0) - vec3<f32>(self_.g0) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(self_.g0) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, other.g0.x));
}

fn horizon__geometric_product__multi_vector_at_infinity(self_: Horizon, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0) * other.g0.yx * vec2<f32>(-1.0, 1.0), vec3<f32>(self_.g0) * other.g2, vec3<f32>(0.0) - vec3<f32>(self_.g0) * other.g1);
}

fn horizon__geometric_product__multi_vector_at_origin(self_: Horizon, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0) * other.g0.yx * vec2<f32>(1.0, -1.0), vec3<f32>(0.0) - vec3<f32>(self_.g0) * other.g2, vec3<f32>(self_.g0) * other.g1);
}

fn horizon__geometric_product__origin(self_: Horizon, other: Origin) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0 * other.g0);
}

fn horizon__geometric_product__plane(self_: Horizon, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0) * vec2<f32>(-other.g0.w, 0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn horizon__geometric_product__plane_at_origin(self_: Horizon, other: PlaneAtOrigin) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(0.0) - vec3<f32>(self_.g0) * other.g0);
}

fn horizon__geometric_product__point(self_: Horizon, other: Point) -> Translator {
    return Translator(vec4<f32>(0.0) - vec4<f32>(self_.g0) * other.g0);
}

fn horizon__geometric_product__point_at_infinity(self_: Horizon, other: PointAtInfinity) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(0.0) - vec3<f32>(self_.g0) * other.g0);
}

fn horizon__geometric_product__rotor(self_: Horizon, other: Rotor) -> Flector {
    return Flector(vec4<f32>(self_.g0) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w), vec4<f32>(self_.g0) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn horizon__geometric_product__scalar(self_: Horizon, other: Scalar) -> Horizon {
    return Horizon(self_.g0 * other.g0);
}

fn horizon__geometric_product__transflector(self_: Horizon, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0) * vec2<f32>(-other.g1.w, 0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(0.0) - vec3<f32>(self_.g0) * other.g0, vec4<f32>(0.0));
}

fn horizon__geometric_product__translator(self_: Horizon, other: Translator) -> Point {
    return Point(vec4<f32>(self_.g0) * other.g0);
}

fn line__geometric_product__anti_scalar(self_: Line, other: AntiScalar) -> LineAtOrigin {
    return LineAtOrigin(self_.g1 * vec3<f32>(other.g0));
}

fn line__geometric_product__flector(self_: Line, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g1.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, -other.g1.w, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, -other.g1.w, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, other.g0.w, other.g1.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g0.w, -other.g0.z));
}

fn line__geometric_product__flector_at_infinity(self_: Line, other: FlectorAtInfinity) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g0.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, -other.g0.w, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, -other.g0.w, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z));
}

fn line__geometric_product__horizon(self_: Line, other: Horizon) -> Transflector {
    return Transflector(self_.g1 * vec3<f32>(other.g0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(-other.g0, -other.g0, -other.g0, 0.0));
}

fn line__geometric_product__line(self_: Line, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z) - vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, other.g0.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, other.g0.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g1.z, other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec4<f32>(0.0));
}

fn line__geometric_product__line_at_infinity(self_: Line, other: LineAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(0.0));
}

fn line__geometric_product__line_at_origin(self_: Line, other: LineAtOrigin) -> Rotor {
    return Rotor(vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z));
}

fn line__geometric_product__magnitude(self_: Line, other: Magnitude) -> Line {
    return Line(self_.g0 * vec3<f32>(other.g0.x) + self_.g1 * vec3<f32>(other.g0.y), self_.g1 * vec3<f32>(other.g0.x));
}

fn line__geometric_product__motor(self_: Line, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z) - vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, other.g0.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, other.g0.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g1.z, other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec4<f32>(0.0));
}

fn line__geometric_product__multi_vector(self_: Line, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g3.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g3.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g3.z) - vec2<f32>(self_.g1.x) * vec2<f32>(other.g3.x, other.g2.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g3.y, other.g2.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g3.z, other.g2.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g1.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g4.w, other.g1.z, -other.g1.y, -other.g4.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, other.g4.w, other.g1.x, -other.g4.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g4.w, -other.g4.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g3.z, other.g0.x, other.g3.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g0.x) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.y, other.g2.z, -other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g2.z, other.g0.y, other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.y), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g3.z, other.g0.x, other.g3.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g0.x), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g4.w, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, -other.g4.w, -other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, -other.g4.w, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.w, other.g4.z, -other.g4.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g4.z, other.g1.w, other.g4.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g4.y, -other.g4.x, other.g1.w, -other.g1.z));
}

fn line__geometric_product__multi_vector_at_infinity(self_: Line, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g2.z) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g2.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g1.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.y, other.g1.z, -other.g1.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, other.g0.y, other.g1.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g0.y, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g0.y, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, -other.g0.y, -other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, -other.g0.y, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.z));
}

fn line__geometric_product__multi_vector_at_origin(self_: Line, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(0.0) - vec2<f32>(self_.g1.x) * vec2<f32>(other.g2.x, other.g1.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g2.y, other.g1.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g2.z, other.g1.z), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x));
}

fn line__geometric_product__origin(self_: Line, other: Origin) -> PlaneAtOrigin {
    return PlaneAtOrigin(self_.g1 * vec3<f32>(other.g0));
}

fn line__geometric_product__plane(self_: Line, other: Plane) -> Flector {
    return Flector(vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(-other.g0.w, -other.g0.w, -other.g0.w, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn line__geometric_product__plane_at_origin(self_: Line, other: PlaneAtOrigin) -> Flector {
    return Flector(vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z), vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn line__geometric_product__point(self_: Line, other: Point) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn line__geometric_product__point_at_infinity(self_: Line, other: PointAtInfinity) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z));
}

fn line__geometric_product__rotor(self_: Line, other: Rotor) -> Rotor {
    return Rotor(vec4<f32>(self_.g1.x) * other.g0.wzyx * vec4<f32>(1.0, 1.0, -1.0, -1.0) + vec4<f32>(self_.g1.y) * other.g0.zwxy * vec4<f32>(-1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g1.z) * other.g0.yxwz * vec4<f32>(1.0, -1.0, 1.0, -1.0));
}

fn line__geometric_product__scalar(self_: Line, other: Scalar) -> Line {
    return Line(self_.g0 * vec3<f32>(other.g0), self_.g1 * vec3<f32>(other.g0));
}

fn line__geometric_product__transflector(self_: Line, other: Transflector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g1.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, -other.g1.w, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, -other.g1.w, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z));
}

fn line__geometric_product__translator(self_: Line, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + self_.g1 * vec3<f32>(other.g0.w), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(0.0));
}

fn line_at_infinity__geometric_product__anti_scalar(self_: LineAtInfinity, other: AntiScalar) -> LineAtOrigin {
    return LineAtOrigin(self_.g0 * vec3<f32>(other.g0));
}

fn line_at_infinity__geometric_product__flector(self_: LineAtInfinity, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, other.g0.w, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g0.w, -other.g0.z));
}

fn line_at_infinity__geometric_product__flector_at_infinity(self_: LineAtInfinity, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * other.g0.wzyx * vec4<f32>(1.0, 1.0, -1.0, -1.0) + vec4<f32>(self_.g0.y) * other.g0.zwxy * vec4<f32>(-1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g0.z) * other.g0.yxwz * vec4<f32>(1.0, -1.0, 1.0, -1.0));
}

fn line_at_infinity__geometric_product__horizon(self_: LineAtInfinity, other: Horizon) -> PointAtInfinity {
    return PointAtInfinity(self_.g0 * vec3<f32>(other.g0));
}

fn line_at_infinity__geometric_product__line(self_: LineAtInfinity, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, other.g0.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, other.g0.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec4<f32>(0.0));
}

fn line_at_infinity__geometric_product__line_at_infinity(self_: LineAtInfinity, other: LineAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn line_at_infinity__geometric_product__line_at_origin(self_: LineAtInfinity, other: LineAtOrigin) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z));
}

fn line_at_infinity__geometric_product__magnitude(self_: LineAtInfinity, other: Magnitude) -> Line {
    return Line(self_.g0 * vec3<f32>(other.g0.y), self_.g0 * vec3<f32>(other.g0.x));
}

fn line_at_infinity__geometric_product__motor(self_: LineAtInfinity, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, other.g0.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, other.g0.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec4<f32>(0.0));
}

fn line_at_infinity__geometric_product__multi_vector(self_: LineAtInfinity, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g3.x, other.g2.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g3.y, other.g2.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g3.z, other.g2.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g4.w, other.g1.z, -other.g1.y, -other.g4.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, other.g4.w, other.g1.x, -other.g4.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g4.w, -other.g4.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.y, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.y), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g3.z, other.g0.x, other.g3.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g0.x), vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, other.g4.z, -other.g4.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g4.z, other.g1.w, other.g4.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g4.y, -other.g4.x, other.g1.w, -other.g1.z));
}

fn line_at_infinity__geometric_product__multi_vector_at_infinity(self_: LineAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g2.x, other.g1.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g2.y, other.g1.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g2.z, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x));
}

fn line_at_infinity__geometric_product__multi_vector_at_origin(self_: LineAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g2.x, other.g1.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g2.y, other.g1.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g2.z, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x));
}

fn line_at_infinity__geometric_product__origin(self_: LineAtInfinity, other: Origin) -> PlaneAtOrigin {
    return PlaneAtOrigin(self_.g0 * vec3<f32>(other.g0));
}

fn line_at_infinity__geometric_product__plane(self_: LineAtInfinity, other: Plane) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn line_at_infinity__geometric_product__plane_at_origin(self_: LineAtInfinity, other: PlaneAtOrigin) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn line_at_infinity__geometric_product__point(self_: LineAtInfinity, other: Point) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn line_at_infinity__geometric_product__point_at_infinity(self_: LineAtInfinity, other: PointAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z));
}

fn line_at_infinity__geometric_product__rotor(self_: LineAtInfinity, other: Rotor) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * other.g0.wzyx * vec4<f32>(1.0, 1.0, -1.0, -1.0) + vec4<f32>(self_.g0.y) * other.g0.zwxy * vec4<f32>(-1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g0.z) * other.g0.yxwz * vec4<f32>(1.0, -1.0, 1.0, -1.0));
}

fn line_at_infinity__geometric_product__scalar(self_: LineAtInfinity, other: Scalar) -> LineAtInfinity {
    return LineAtInfinity(self_.g0 * vec3<f32>(other.g0));
}

fn line_at_infinity__geometric_product__transflector(self_: LineAtInfinity, other: Transflector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z));
}

fn line_at_infinity__geometric_product__translator(self_: LineAtInfinity, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), self_.g0 * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(0.0));
}

fn line_at_origin__geometric_product__flector(self_: LineAtOrigin, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g1.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, -other.g1.w, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, -other.g1.w, 0.0));
}

fn line_at_origin__geometric_product__flector_at_infinity(self_: LineAtOrigin, other: FlectorAtInfinity) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g0.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, -other.g0.w, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, -other.g0.w, 0.0));
}

fn line_at_origin__geometric_product__horizon(self_: LineAtOrigin, other: Horizon) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0));
}

fn line_at_origin__geometric_product__line(self_: LineAtOrigin, other: Line) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g1.z));
}

fn line_at_origin__geometric_product__line_at_infinity(self_: LineAtOrigin, other: LineAtInfinity) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z));
}

fn line_at_origin__geometric_product__magnitude(self_: LineAtOrigin, other: Magnitude) -> LineAtOrigin {
    return LineAtOrigin(self_.g0 * vec3<f32>(other.g0.x));
}

fn line_at_origin__geometric_product__motor(self_: LineAtOrigin, other: Motor) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g1.z));
}

fn line_at_origin__geometric_product__multi_vector(self_: LineAtOrigin, other: MultiVector) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, -other.g3.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, -other.g3.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, -other.g3.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g3.z, other.g0.x, other.g3.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g4.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g4.w, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g4.w));
}

fn line_at_origin__geometric_product__multi_vector_at_infinity(self_: LineAtOrigin, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, -other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, -other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, -other.g2.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.y, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g0.y, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.y));
}

fn line_at_origin__geometric_product__plane(self_: LineAtOrigin, other: Plane) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0.w));
}

fn line_at_origin__geometric_product__point(self_: LineAtOrigin, other: Point) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0));
}

fn line_at_origin__geometric_product__point_at_infinity(self_: LineAtOrigin, other: PointAtInfinity) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0));
}

fn line_at_origin__geometric_product__scalar(self_: LineAtOrigin, other: Scalar) -> LineAtOrigin {
    return LineAtOrigin(self_.g0 * vec3<f32>(other.g0));
}

fn line_at_origin__geometric_product__transflector(self_: LineAtOrigin, other: Transflector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g1.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, -other.g1.w, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, -other.g1.w, 0.0));
}

fn line_at_origin__geometric_product__translator(self_: LineAtOrigin, other: Translator) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z));
}

fn magnitude__geometric_product__anti_scalar(self_: Magnitude, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0);
}

fn magnitude__geometric_product__flector(self_: Magnitude, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * other.g0 + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.w), vec4<f32>(self_.g0.x) * other.g1 + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0));
}

fn magnitude__geometric_product__flector_at_infinity(self_: Magnitude, other: FlectorAtInfinity) -> Flector {
    return Flector(vec4<f32>(self_.g0.x, self_.g0.x, self_.g0.x, self_.g0.y) * other.g0 * vec4<f32>(1.0, 1.0, 1.0, -1.0), vec4<f32>(self_.g0.y, self_.g0.y, self_.g0.y, self_.g0.x) * other.g0 * vec4<f32>(-1.0, -1.0, -1.0, 1.0));
}

fn magnitude__geometric_product__horizon(self_: Magnitude, other: Horizon) -> Flector {
    return Flector(vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn magnitude__geometric_product__line(self_: Magnitude, other: Line) -> Line {
    return Line(vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g0.y) * other.g1, vec3<f32>(self_.g0.x) * other.g1);
}

fn magnitude__geometric_product__line_at_infinity(self_: Magnitude, other: LineAtInfinity) -> Line {
    return Line(vec3<f32>(self_.g0.y) * other.g0, vec3<f32>(self_.g0.x) * other.g0);
}

fn magnitude__geometric_product__line_at_origin(self_: Magnitude, other: LineAtOrigin) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(self_.g0.x) * other.g0);
}

fn magnitude__geometric_product__magnitude(self_: Magnitude, other: Magnitude) -> Magnitude {
    return Magnitude(vec2<f32>(self_.g0.x) * other.g0 + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.x));
}

fn magnitude__geometric_product__motor(self_: Magnitude, other: Motor) -> Motor {
    return Motor(vec4<f32>(self_.g0.x) * other.g0 + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec3<f32>(self_.g0.x) * other.g1);
}

fn magnitude__geometric_product__multi_vector(self_: Magnitude, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * other.g0 + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.x), vec4<f32>(self_.g0.x) * other.g1 + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g4.w), vec3<f32>(self_.g0.x) * other.g2 + vec3<f32>(self_.g0.y) * other.g3, vec3<f32>(self_.g0.x) * other.g3, vec4<f32>(self_.g0.x) * other.g4 + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0));
}

fn magnitude__geometric_product__multi_vector_at_infinity(self_: Magnitude, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.x), vec4<f32>(self_.g0.x, self_.g0.x, self_.g0.x, self_.g0.y) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, -other.g0.y), vec3<f32>(self_.g0.y) * other.g2, vec3<f32>(self_.g0.x) * other.g2, vec4<f32>(self_.g0.y, self_.g0.y, self_.g0.y, self_.g0.x) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, other.g0.y));
}

fn magnitude__geometric_product__multi_vector_at_origin(self_: Magnitude, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * other.g0, vec3<f32>(self_.g0.x) * other.g1, vec3<f32>(self_.g0.x) * other.g2);
}

fn magnitude__geometric_product__origin(self_: Magnitude, other: Origin) -> Origin {
    return Origin(self_.g0.x * other.g0);
}

fn magnitude__geometric_product__plane(self_: Magnitude, other: Plane) -> Flector {
    return Flector(vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w), vec4<f32>(self_.g0.x) * other.g0);
}

fn magnitude__geometric_product__plane_at_origin(self_: Magnitude, other: PlaneAtOrigin) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x) * other.g0);
}

fn magnitude__geometric_product__point(self_: Magnitude, other: Point) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * other.g0, vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0));
}

fn magnitude__geometric_product__point_at_infinity(self_: Magnitude, other: PointAtInfinity) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * other.g0, vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0));
}

fn magnitude__geometric_product__rotor(self_: Magnitude, other: Rotor) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * other.g0);
}

fn magnitude__geometric_product__scalar(self_: Magnitude, other: Scalar) -> Magnitude {
    return Magnitude(self_.g0 * vec2<f32>(other.g0));
}

fn magnitude__geometric_product__transflector(self_: Magnitude, other: Transflector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x, self_.g0.x, self_.g0.x, self_.g0.y) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g1.w), vec4<f32>(self_.g0.x) * other.g1 + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0));
}

fn magnitude__geometric_product__translator(self_: Magnitude, other: Translator) -> Motor {
    return Motor(vec4<f32>(self_.g0.y, self_.g0.y, self_.g0.y, self_.g0.x) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn motor__geometric_product__anti_scalar(self_: Motor, other: AntiScalar) -> LineAtOrigin {
    return LineAtOrigin(self_.g1 * vec3<f32>(other.g0));
}

fn motor__geometric_product__flector(self_: Motor, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.w) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g1.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, -other.g1.w, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, -other.g1.w, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, other.g0.w, other.g1.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g0.w, -other.g0.z));
}

fn motor__geometric_product__flector_at_infinity(self_: Motor, other: FlectorAtInfinity) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g0.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, -other.g0.w, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, -other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z));
}

fn motor__geometric_product__horizon(self_: Motor, other: Horizon) -> Flector {
    return Flector(vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0) + vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, self_.g1.x) * vec4<f32>(other.g0, other.g0, other.g0, 0.0), self_.g0.xyzx * vec4<f32>(-other.g0, -other.g0, -other.g0, 0.0));
}

fn motor__geometric_product__line(self_: Motor, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z) - vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, other.g0.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, other.g0.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g1.z, other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g0.w) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec4<f32>(0.0));
}

fn motor__geometric_product__line_at_infinity(self_: Motor, other: LineAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(0.0));
}

fn motor__geometric_product__line_at_origin(self_: Motor, other: LineAtOrigin) -> Rotor {
    return Rotor(vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z));
}

fn motor__geometric_product__magnitude(self_: Motor, other: Magnitude) -> Motor {
    return Motor(self_.g0 * vec4<f32>(other.g0.x) + vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, self_.g1.x) * vec4<f32>(other.g0.y, other.g0.y, other.g0.y, 0.0), self_.g1 * vec3<f32>(other.g0.x));
}

fn motor__geometric_product__motor(self_: Motor, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z) - vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, other.g0.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, other.g0.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g1.z, other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g0.w) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec4<f32>(0.0));
}

fn motor__geometric_product__multi_vector(self_: Motor, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g3.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g3.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g3.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.x) - vec2<f32>(self_.g1.x) * vec2<f32>(other.g3.x, other.g2.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g3.y, other.g2.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g3.z, other.g2.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g4.w) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g4.w, other.g1.z, -other.g1.y, -other.g4.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, other.g4.w, other.g1.x, -other.g4.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g4.w, -other.g4.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g3.z, other.g0.x, other.g3.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g0.x) + vec3<f32>(self_.g0.w) * other.g3 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.y, other.g2.z, -other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g2.z, other.g0.y, other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.y), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g3.z, other.g0.x, other.g3.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g0.x), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g4.w, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, -other.g4.w, -other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, -other.g4.w, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.w, other.g4.z, -other.g4.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g4.z, other.g1.w, other.g4.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g4.y, -other.g4.x, other.g1.w, -other.g1.z));
}

fn motor__geometric_product__multi_vector_at_infinity(self_: Motor, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g2.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g2.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.y, other.g1.z, -other.g1.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, other.g0.y, other.g1.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g0.y, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x) + vec3<f32>(self_.g0.w) * other.g2, vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g0.y, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, -other.g0.y, -other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, -other.g0.y, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.z));
}

fn motor__geometric_product__multi_vector_at_origin(self_: Motor, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(0.0) - vec2<f32>(self_.g1.x) * vec2<f32>(other.g2.x, other.g1.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g2.y, other.g1.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g2.z, other.g1.z), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x));
}

fn motor__geometric_product__origin(self_: Motor, other: Origin) -> PlaneAtOrigin {
    return PlaneAtOrigin(self_.g1 * vec3<f32>(other.g0));
}

fn motor__geometric_product__plane(self_: Motor, other: Plane) -> Flector {
    return Flector(vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z), self_.g0.xyzx * vec4<f32>(-other.g0.w, -other.g0.w, -other.g0.w, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn motor__geometric_product__plane_at_origin(self_: Motor, other: PlaneAtOrigin) -> Flector {
    return Flector(vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z), vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn motor__geometric_product__point(self_: Motor, other: Point) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn motor__geometric_product__point_at_infinity(self_: Motor, other: PointAtInfinity) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z));
}

fn motor__geometric_product__rotor(self_: Motor, other: Rotor) -> Rotor {
    return Rotor(vec4<f32>(self_.g1.x) * other.g0.wzyx * vec4<f32>(1.0, 1.0, -1.0, -1.0) + vec4<f32>(self_.g1.y) * other.g0.zwxy * vec4<f32>(-1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g1.z) * other.g0.yxwz * vec4<f32>(1.0, -1.0, 1.0, -1.0));
}

fn motor__geometric_product__scalar(self_: Motor, other: Scalar) -> Motor {
    return Motor(self_.g0 * vec4<f32>(other.g0), self_.g1 * vec3<f32>(other.g0));
}

fn motor__geometric_product__transflector(self_: Motor, other: Transflector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.w) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g1.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, -other.g1.w, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, -other.g1.w, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z));
}

fn motor__geometric_product__translator(self_: Motor, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + self_.g1 * vec3<f32>(other.g0.w), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(0.0));
}

fn multi_vector__geometric_product__anti_scalar(self_: MultiVector, other: AntiScalar) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0) + vec2<f32>(self_.g4.w) * vec2<f32>(other.g0, 0.0), self_.g3 * vec3<f32>(other.g0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0));
}

fn multi_vector__geometric_product__flector(self_: MultiVector, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, other.g1.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g1.w) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, -other.g0.z) - vec2<f32>(self_.g4.w) * vec2<f32>(other.g1.w, other.g0.w), vec4<f32>(self_.g0.x) * other.g0 + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.w) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g3.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g3.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g3.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z), vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, -other.g0.w, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g4.x) * vec3<f32>(other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g0.z, other.g1.w, other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g1.w) - vec3<f32>(self_.g4.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(self_.g1.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w) - vec3<f32>(self_.g4.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g0.x) * other.g1 + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(-other.g1.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g0.z, -other.g1.w, -other.g0.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g0.y, other.g0.x, -other.g1.w, 0.0) + vec4<f32>(self_.g3.x) * vec4<f32>(other.g0.w, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g3.y) * vec4<f32>(-other.g1.z, other.g0.w, other.g1.x, -other.g0.y) + vec4<f32>(self_.g3.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g0.w, -other.g0.z));
}

fn multi_vector__geometric_product__flector_at_infinity(self_: MultiVector, other: FlectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z, self_.g1.w) * vec2<f32>(other.g0.z, other.g0.w) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g0.y) - vec2<f32>(self_.g4.w, self_.g4.z) * vec2<f32>(other.g0.w, other.g0.z), vec4<f32>(self_.g0.x, self_.g0.x, self_.g0.x, self_.g0.y) * other.g0 * vec4<f32>(1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g3.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g3.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, 0.0) + vec4<f32>(self_.g3.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, 0.0), vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g4.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w) - vec3<f32>(self_.g4.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g0.y, self_.g0.y, self_.g0.y, self_.g0.x) * other.g0 * vec4<f32>(-1.0, -1.0, -1.0, 1.0) + vec4<f32>(self_.g2.x) * vec4<f32>(-other.g0.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g0.z, -other.g0.w, -other.g0.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g0.y, other.g0.x, -other.g0.w, 0.0) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g3.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g3.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z));
}

fn multi_vector__geometric_product__horizon(self_: MultiVector, other: Horizon) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g0) + vec2<f32>(self_.g4.w) * vec2<f32>(-other.g0, 0.0), vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0) + vec4<f32>(self_.g3.x, self_.g3.y, self_.g3.z, self_.g3.x) * vec4<f32>(other.g0, other.g0, other.g0, 0.0), vec3<f32>(self_.g4.x, self_.g4.y, self_.g4.z) * vec3<f32>(other.g0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0) + vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, self_.g2.x) * vec4<f32>(-other.g0, -other.g0, -other.g0, 0.0));
}

fn multi_vector__geometric_product__line(self_: MultiVector, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g1.z) - vec2<f32>(self_.g3.x) * vec2<f32>(other.g1.x, other.g0.x) - vec2<f32>(self_.g3.y) * vec2<f32>(other.g1.y, other.g0.y) - vec2<f32>(self_.g3.z) * vec2<f32>(other.g1.z, other.g0.z), vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g4.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + self_.g4.wwwz * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, -other.g1.z), vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g0.y) * other.g1 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g3.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.x) * other.g1 + vec3<f32>(self_.g3.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, 0.0) + vec4<f32>(self_.g4.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, 0.0) + vec4<f32>(self_.g4.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g4.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn multi_vector__geometric_product__line_at_infinity(self_: MultiVector, other: LineAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g4.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g4.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z), vec3<f32>(self_.g0.y) * other.g0 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g3.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g1.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g4.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g4.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn multi_vector__geometric_product__line_at_origin(self_: MultiVector, other: LineAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g3.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g3.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g3.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g3.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g4.w) * other.g0);
}

fn multi_vector__geometric_product__magnitude(self_: MultiVector, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * other.g0 + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.x), self_.g1 * vec4<f32>(other.g0.x) + vec4<f32>(self_.g4.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y), self_.g2 * vec3<f32>(other.g0.x) + self_.g3 * vec3<f32>(other.g0.y), self_.g3 * vec3<f32>(other.g0.x), self_.g1.xyzx * vec4<f32>(other.g0.y, other.g0.y, other.g0.y, 0.0) + self_.g4 * vec4<f32>(other.g0.x));
}

fn multi_vector__geometric_product__motor(self_: MultiVector, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g1.z) - vec2<f32>(self_.g3.x) * vec2<f32>(other.g1.x, other.g0.x) - vec2<f32>(self_.g3.y) * vec2<f32>(other.g1.y, other.g0.y) - vec2<f32>(self_.g3.z) * vec2<f32>(other.g1.z, other.g0.z), vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g4.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + vec4<f32>(self_.g4.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.z) + vec4<f32>(self_.g4.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g0.y) * other.g1 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g3.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(self_.g0.x) * other.g1 + vec3<f32>(self_.g3.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, -other.g1.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, 0.0) + vec4<f32>(self_.g4.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, 0.0) + vec4<f32>(self_.g4.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g4.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn multi_vector__geometric_product__multi_vector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * other.g0 + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, other.g4.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, other.g4.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g1.z, other.g4.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g4.w) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g3.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g3.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g3.z) - vec2<f32>(self_.g3.x) * vec2<f32>(other.g3.x, other.g2.x) - vec2<f32>(self_.g3.y) * vec2<f32>(other.g3.y, other.g2.y) - vec2<f32>(self_.g3.z) * vec2<f32>(other.g3.z, other.g2.z) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, -other.g1.z) - vec2<f32>(self_.g4.w) * vec2<f32>(other.g4.w, other.g1.w), vec4<f32>(self_.g0.x) * other.g1 + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g4.w) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.x, other.g3.z, -other.g3.y, -other.g2.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g3.z, other.g0.x, other.g3.x, -other.g2.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g3.y, -other.g3.x, other.g0.x, -other.g2.z) + vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, 0.0, other.g1.z) + vec4<f32>(self_.g3.x) * vec4<f32>(other.g4.w, other.g1.z, -other.g1.y, -other.g4.x) + vec4<f32>(self_.g3.y) * vec4<f32>(-other.g1.z, other.g4.w, other.g1.x, -other.g4.y) + vec4<f32>(self_.g3.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g4.w, -other.g4.z) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g3.x) + vec4<f32>(self_.g4.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g3.y) + vec4<f32>(self_.g4.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g3.z) + vec4<f32>(self_.g4.w) * vec4<f32>(other.g3.x, other.g3.y, other.g3.z, other.g0.y), vec3<f32>(self_.g0.x) * other.g2 + vec3<f32>(self_.g0.y) * other.g3 + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g1.w, -other.g4.z, other.g4.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g4.z, -other.g1.w, -other.g4.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g4.y, other.g4.x, -other.g1.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g3.z, other.g0.x, other.g3.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g0.x) + vec3<f32>(self_.g3.x) * vec3<f32>(other.g0.y, other.g2.z, -other.g2.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g2.z, other.g0.y, other.g2.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.y) + vec3<f32>(self_.g4.x) * vec3<f32>(other.g4.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g1.z, other.g4.w, other.g1.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g4.w) - vec3<f32>(self_.g4.w) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z), vec3<f32>(self_.g0.x) * other.g3 + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g4.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, -other.g4.w, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g4.w) + vec3<f32>(self_.g3.x) * vec3<f32>(other.g0.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g3.z, other.g0.x, other.g3.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g0.x) - vec3<f32>(self_.g4.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(self_.g0.x) * other.g4 + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.y, other.g2.z, -other.g2.y, -other.g3.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g2.z, other.g0.y, other.g2.x, -other.g3.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g2.y, -other.g2.x, other.g0.y, -other.g3.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g3.x, other.g3.y, other.g3.z, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(-other.g4.w, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g1.z, -other.g4.w, -other.g1.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g1.y, other.g1.x, -other.g4.w, 0.0) + vec4<f32>(self_.g3.x) * vec4<f32>(other.g1.w, other.g4.z, -other.g4.y, -other.g1.x) + vec4<f32>(self_.g3.y) * vec4<f32>(-other.g4.z, other.g1.w, other.g4.x, -other.g1.y) + vec4<f32>(self_.g3.z) * vec4<f32>(other.g4.y, -other.g4.x, other.g1.w, -other.g1.z) + vec4<f32>(self_.g4.x) * vec4<f32>(other.g0.x, other.g3.z, -other.g3.y, 0.0) + vec4<f32>(self_.g4.y) * vec4<f32>(-other.g3.z, other.g0.x, other.g3.x, 0.0) + vec4<f32>(self_.g4.z) * vec4<f32>(other.g3.y, -other.g3.x, other.g0.x, 0.0) + vec4<f32>(self_.g4.w) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, other.g0.x));
}

fn multi_vector__geometric_product__multi_vector_at_infinity(self_: MultiVector, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.x) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g1.z, self_.g1.w) * vec2<f32>(other.g1.z, other.g0.y) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g2.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g2.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g2.z) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g2.z, 0.0) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g1.y) - vec2<f32>(self_.g4.w, self_.g4.z) * vec2<f32>(other.g0.y, other.g1.z), vec4<f32>(self_.g0.x, self_.g0.x, self_.g0.x, self_.g0.y) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, -other.g0.y) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.x, other.g2.z, -other.g2.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g2.z, other.g0.x, other.g2.x, 0.0) + self_.g1.zzzw * vec4<f32>(other.g2.y, -other.g2.x, other.g0.x, other.g0.x) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, 0.0, other.g1.z) + vec4<f32>(self_.g3.x) * vec4<f32>(other.g0.y, other.g1.z, -other.g1.y, 0.0) + vec4<f32>(self_.g3.y) * vec4<f32>(-other.g1.z, other.g0.y, other.g1.x, 0.0) + vec4<f32>(self_.g3.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g0.y, 0.0) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g4.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + self_.g4.wwwz * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, -other.g2.z), vec3<f32>(self_.g0.y) * other.g2 + vec3<f32>(self_.g1.w) * other.g1 + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x) + vec3<f32>(self_.g4.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y), vec3<f32>(self_.g0.x) * other.g2 + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.y, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, -other.g0.y, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.y) + vec3<f32>(self_.g3.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x) - vec3<f32>(self_.g4.w) * other.g1, vec4<f32>(self_.g0.y, self_.g0.y, self_.g0.y, self_.g0.x) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, other.g0.y) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + self_.g1.wwwz * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, -other.g2.z) + vec4<f32>(self_.g2.x) * vec4<f32>(-other.g0.y, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g1.z, -other.g0.y, -other.g1.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g1.y, other.g1.x, -other.g0.y, 0.0) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g3.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + vec4<f32>(self_.g3.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.z) + vec4<f32>(self_.g4.x) * vec4<f32>(other.g0.x, other.g2.z, -other.g2.y, 0.0) + vec4<f32>(self_.g4.y) * vec4<f32>(-other.g2.z, other.g0.x, other.g2.x, 0.0) + self_.g4.zzzw * vec4<f32>(other.g2.y, -other.g2.x, other.g0.x, other.g0.x));
}

fn multi_vector__geometric_product__multi_vector_at_origin(self_: MultiVector, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * other.g0 + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g1.x, other.g2.x) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g1.y, other.g2.y) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g1.z, other.g2.z) - vec2<f32>(self_.g3.x) * vec2<f32>(other.g2.x, other.g1.x) - vec2<f32>(self_.g3.y) * vec2<f32>(other.g2.y, other.g1.y) - vec2<f32>(self_.g3.z) * vec2<f32>(other.g2.z, other.g1.z) + vec2<f32>(self_.g4.w) * other.g0.yx * vec2<f32>(1.0, -1.0), vec3<f32>(self_.g0.x) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.x, -other.g2.z, other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g2.z, -other.g0.x, -other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g2.y, other.g2.x, -other.g0.x) + vec3<f32>(self_.g3.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y) - vec3<f32>(self_.g4.w) * other.g2, vec3<f32>(self_.g0.x) * other.g2 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y) + vec3<f32>(self_.g3.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x) + vec3<f32>(self_.g4.w) * other.g1);
}

fn multi_vector__geometric_product__origin(self_: MultiVector, other: Origin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0, 0.0) + vec2<f32>(self_.g4.w) * vec2<f32>(0.0, -other.g0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0), self_.g3 * vec3<f32>(other.g0));
}

fn multi_vector__geometric_product__plane(self_: MultiVector, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g4.w) * vec2<f32>(-other.g0.w, 0.0), vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w) + vec4<f32>(self_.g3.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g3.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g3.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + vec3<f32>(self_.g4.x, self_.g4.y, self_.g4.z) * vec3<f32>(other.g0.w) - vec3<f32>(self_.g4.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.w), vec4<f32>(self_.g0.x) * other.g0 + vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, self_.g2.x) * vec4<f32>(-other.g0.w, -other.g0.w, -other.g0.w, 0.0) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g3.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g3.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn multi_vector__geometric_product__plane_at_origin(self_: MultiVector, other: PlaneAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - vec3<f32>(self_.g4.w) * other.g0, vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g3.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn multi_vector__geometric_product__point(self_: MultiVector, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g4.w) * vec2<f32>(0.0, -other.g0.w), vec4<f32>(self_.g0.x) * other.g0 + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g3.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g3.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g4.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - vec3<f32>(self_.g4.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g3.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g3.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g3.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn multi_vector__geometric_product__point_at_infinity(self_: MultiVector, other: PointAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g3.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g3.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0), vec3<f32>(self_.g1.w) * other.g0 + vec3<f32>(self_.g4.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - vec3<f32>(self_.g4.w) * other.g0, vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g3.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g3.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z));
}

fn multi_vector__geometric_product__rotor(self_: MultiVector, other: Rotor) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g3.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g3.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g3.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g4.w) * vec2<f32>(other.g0.w, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g3.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w) + vec3<f32>(self_.g4.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn multi_vector__geometric_product__scalar(self_: MultiVector, other: Scalar) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0), self_.g1 * vec4<f32>(other.g0), self_.g2 * vec3<f32>(other.g0), self_.g3 * vec3<f32>(other.g0), self_.g4 * vec4<f32>(other.g0));
}

fn multi_vector__geometric_product__transflector(self_: MultiVector, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, other.g1.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g1.w) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g0.y) - vec2<f32>(self_.g4.w, self_.g4.z) * vec2<f32>(other.g1.w, other.g0.z), vec4<f32>(self_.g0.x, self_.g0.x, self_.g0.x, self_.g0.y) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g1.w) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g3.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g3.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g3.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g1.w) * other.g0 + vec3<f32>(self_.g4.x) * vec3<f32>(other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g0.z, other.g1.w, other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g1.w) - vec3<f32>(self_.g4.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(self_.g1.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w) - vec3<f32>(self_.g4.w) * other.g0, vec4<f32>(self_.g0.x) * other.g1 + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(-other.g1.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g0.z, -other.g1.w, -other.g0.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g0.y, other.g0.x, -other.g1.w, 0.0) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g3.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g3.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z));
}

fn multi_vector__geometric_product__translator(self_: MultiVector, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g4.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g4.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g4.w) * other.g0, vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + self_.g3 * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g3.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g4.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g4.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn multi_vector_at_infinity__geometric_product__anti_scalar(self_: MultiVectorAtInfinity, other: AntiScalar) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0.yx * vec2<f32>(other.g0), self_.g2 * vec3<f32>(other.g0), self_.g1 * vec3<f32>(other.g0));
}

fn multi_vector_at_infinity__geometric_product__flector(self_: MultiVectorAtInfinity, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.w, other.g0.w) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, other.g1.z), vec4<f32>(self_.g0.x) * other.g0 + vec4<f32>(self_.g2.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, -other.g0.w, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.w), vec3<f32>(0.0) - vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w), vec4<f32>(self_.g0.x) * other.g1 + vec4<f32>(self_.g2.x) * vec4<f32>(other.g0.w, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g1.z, other.g0.w, other.g1.x, -other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g0.w, -other.g0.z));
}

fn multi_vector_at_infinity__geometric_product__flector_at_infinity(self_: MultiVectorAtInfinity, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0.yx * vec2<f32>(-other.g0.w) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(0.0) - vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w));
}

fn multi_vector_at_infinity__geometric_product__horizon(self_: MultiVectorAtInfinity, other: Horizon) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0.yx * vec2<f32>(-other.g0), self_.g2 * vec3<f32>(other.g0), vec3<f32>(0.0) - self_.g1 * vec3<f32>(other.g0));
}

fn multi_vector_at_infinity__geometric_product__line(self_: MultiVectorAtInfinity, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g2.x) * vec2<f32>(other.g1.x, other.g0.x) - vec2<f32>(self_.g2.y) * vec2<f32>(other.g1.y, other.g0.y) - vec2<f32>(self_.g2.z) * vec2<f32>(other.g1.z, other.g0.z), vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z), vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.x) * other.g1 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z));
}

fn multi_vector_at_infinity__geometric_product__line_at_infinity(self_: MultiVectorAtInfinity, other: LineAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(self_.g0.y) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn multi_vector_at_infinity__geometric_product__line_at_origin(self_: MultiVectorAtInfinity, other: LineAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.y) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn multi_vector_at_infinity__geometric_product__magnitude(self_: MultiVectorAtInfinity, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * other.g0, vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, self_.g1.x) * vec4<f32>(other.g0.x, other.g0.x, other.g0.x, 0.0), self_.g2 * vec3<f32>(other.g0.y), self_.g2 * vec3<f32>(other.g0.x), vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, self_.g1.x) * vec4<f32>(other.g0.y, other.g0.y, other.g0.y, 0.0));
}

fn multi_vector_at_infinity__geometric_product__motor(self_: MultiVectorAtInfinity, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.w) - vec2<f32>(self_.g2.x) * vec2<f32>(other.g1.x, other.g0.x) - vec2<f32>(self_.g2.y) * vec2<f32>(other.g1.y, other.g0.y) - vec2<f32>(self_.g2.z) * vec2<f32>(other.g1.z, other.g0.z), vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, other.g0.w) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(self_.g0.x) * other.g1 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, -other.g1.z));
}

fn multi_vector_at_infinity__geometric_product__multi_vector(self_: MultiVectorAtInfinity, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * other.g0 - vec2<f32>(self_.g0.y) * vec2<f32>(other.g4.w, other.g1.w) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, other.g4.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, other.g4.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g1.z, other.g4.z) - vec2<f32>(self_.g2.x) * vec2<f32>(other.g3.x, other.g2.x) - vec2<f32>(self_.g2.y) * vec2<f32>(other.g3.y, other.g2.y) - vec2<f32>(self_.g2.z) * vec2<f32>(other.g3.z, other.g2.z), vec4<f32>(self_.g0.x) * other.g1 + vec4<f32>(self_.g0.y) * vec4<f32>(other.g3.x, other.g3.y, other.g3.z, other.g0.y) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.x, other.g3.z, -other.g3.y, -other.g2.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g3.z, other.g0.x, other.g3.x, -other.g2.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g3.y, -other.g3.x, other.g0.x, -other.g2.z) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g4.w, other.g1.z, -other.g1.y, -other.g4.x) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g1.z, other.g4.w, other.g1.x, -other.g4.y) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g4.w, -other.g4.z), vec3<f32>(self_.g0.x) * other.g2 - vec3<f32>(self_.g0.y) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g1.w, -other.g4.z, other.g4.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g4.z, -other.g1.w, -other.g4.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g4.y, other.g4.x, -other.g1.w) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.y, other.g2.z, -other.g2.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g2.z, other.g0.y, other.g2.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.y), vec3<f32>(self_.g0.x) * other.g3 - vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g4.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, -other.g4.w, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g4.w) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g3.z, other.g0.x, other.g3.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g0.x), vec4<f32>(self_.g0.x) * other.g4 + vec4<f32>(self_.g0.y) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, other.g0.x) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.y, other.g2.z, -other.g2.y, -other.g3.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g2.z, other.g0.y, other.g2.x, -other.g3.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g2.y, -other.g2.x, other.g0.y, -other.g3.z) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g1.w, other.g4.z, -other.g4.y, -other.g1.x) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g4.z, other.g1.w, other.g4.x, -other.g1.y) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g4.y, -other.g4.x, other.g1.w, -other.g1.z));
}

fn multi_vector_at_infinity__geometric_product__multi_vector_at_infinity(self_: MultiVectorAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * other.g0 + vec2<f32>(self_.g0.y) * other.g0.yx * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, -other.g2.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, -other.g2.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g1.z, -other.g2.z) - vec2<f32>(self_.g2.x) * vec2<f32>(other.g2.x, other.g1.x) - vec2<f32>(self_.g2.y) * vec2<f32>(other.g2.y, other.g1.y) - vec2<f32>(self_.g2.z) * vec2<f32>(other.g2.z, other.g1.z), vec3<f32>(self_.g0.x) * other.g1 + vec3<f32>(self_.g0.y) * other.g2 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y), vec3<f32>(self_.g0.x) * other.g2 - vec3<f32>(self_.g0.y) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.y, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, -other.g0.y, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.y) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x));
}

fn multi_vector_at_infinity__geometric_product__multi_vector_at_origin(self_: MultiVectorAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * other.g0 + vec2<f32>(self_.g0.y) * other.g0.yx * vec2<f32>(1.0, -1.0) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g1.x, other.g2.x) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g1.y, other.g2.y) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g1.z, other.g2.z) - vec2<f32>(self_.g2.x) * vec2<f32>(other.g2.x, other.g1.x) - vec2<f32>(self_.g2.y) * vec2<f32>(other.g2.y, other.g1.y) - vec2<f32>(self_.g2.z) * vec2<f32>(other.g2.z, other.g1.z), vec3<f32>(self_.g0.x) * other.g1 - vec3<f32>(self_.g0.y) * other.g2 + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.x, -other.g2.z, other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g2.z, -other.g0.x, -other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g2.y, other.g2.x, -other.g0.x) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y), vec3<f32>(self_.g0.x) * other.g2 + vec3<f32>(self_.g0.y) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x));
}

fn multi_vector_at_infinity__geometric_product__origin(self_: MultiVectorAtInfinity, other: Origin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0 * vec2<f32>(other.g0), vec3<f32>(0.0) - self_.g1 * vec3<f32>(other.g0), self_.g2 * vec3<f32>(other.g0));
}

fn multi_vector_at_infinity__geometric_product__plane(self_: MultiVectorAtInfinity, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.w, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z), vec4<f32>(self_.g2.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(0.0) - self_.g1 * vec3<f32>(other.g0.w), vec4<f32>(self_.g0.x) * other.g0 + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn multi_vector_at_infinity__geometric_product__plane_at_origin(self_: MultiVectorAtInfinity, other: PlaneAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.y) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn multi_vector_at_infinity__geometric_product__point(self_: MultiVectorAtInfinity, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.w) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0), vec4<f32>(self_.g0.x) * other.g0 + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0), vec3<f32>(0.0) - self_.g1 * vec3<f32>(other.g0.w), vec3<f32>(0.0) - vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g2.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn multi_vector_at_infinity__geometric_product__point_at_infinity(self_: MultiVectorAtInfinity, other: PointAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.y) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn multi_vector_at_infinity__geometric_product__rotor(self_: MultiVectorAtInfinity, other: Rotor) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0.yx * vec2<f32>(other.g0.w) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w));
}

fn multi_vector_at_infinity__geometric_product__scalar(self_: MultiVectorAtInfinity, other: Scalar) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0 * vec2<f32>(other.g0), self_.g1 * vec3<f32>(other.g0), self_.g2 * vec3<f32>(other.g0));
}

fn multi_vector_at_infinity__geometric_product__transflector(self_: MultiVectorAtInfinity, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.w, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.y) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w), vec4<f32>(self_.g0.x) * other.g1 + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z));
}

fn multi_vector_at_infinity__geometric_product__translator(self_: MultiVectorAtInfinity, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(self_.g0.y) * other.g0 + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0), self_.g2 * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn multi_vector_at_origin__geometric_product__flector(self_: MultiVectorAtOrigin, other: Flector) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0.yx * vec2<f32>(-other.g1.w) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, other.g1.w, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g1.w), vec3<f32>(0.0) - vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w));
}

fn multi_vector_at_origin__geometric_product__flector_at_infinity(self_: MultiVectorAtOrigin, other: FlectorAtInfinity) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0.yx * vec2<f32>(-other.g0.w) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(0.0) - vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w));
}

fn multi_vector_at_origin__geometric_product__horizon(self_: MultiVectorAtOrigin, other: Horizon) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0.yx * vec2<f32>(-other.g0), self_.g2 * vec3<f32>(other.g0), vec3<f32>(0.0) - self_.g1 * vec3<f32>(other.g0));
}

fn multi_vector_at_origin__geometric_product__line(self_: MultiVectorAtOrigin, other: Line) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g1.z, 0.0), vec3<f32>(self_.g0.y) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec3<f32>(self_.g0.x) * other.g1 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0));
}

fn multi_vector_at_origin__geometric_product__line_at_infinity(self_: MultiVectorAtOrigin, other: LineAtInfinity) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(self_.g0.y) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn multi_vector_at_origin__geometric_product__magnitude(self_: MultiVectorAtOrigin, other: Magnitude) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0 * vec2<f32>(other.g0.x), self_.g1 * vec3<f32>(other.g0.x), self_.g2 * vec3<f32>(other.g0.x));
}

fn multi_vector_at_origin__geometric_product__motor(self_: MultiVectorAtOrigin, other: Motor) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g1.z, 0.0), vec3<f32>(self_.g0.y) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec3<f32>(self_.g0.x) * other.g1 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0));
}

fn multi_vector_at_origin__geometric_product__multi_vector(self_: MultiVectorAtOrigin, other: MultiVector) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, other.g4.w) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g4.w, other.g0.x) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, -other.g3.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, -other.g3.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g1.z, -other.g3.z) - vec2<f32>(self_.g2.x) * vec2<f32>(other.g3.x, other.g1.x) - vec2<f32>(self_.g2.y) * vec2<f32>(other.g3.y, other.g1.y) - vec2<f32>(self_.g2.z) * vec2<f32>(other.g3.z, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g0.y) * other.g3 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g3.z, other.g0.x, other.g3.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g0.x) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g4.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g1.z, other.g4.w, other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g4.w), vec3<f32>(self_.g0.x) * other.g3 - vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g4.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, -other.g4.w, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g4.w) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g3.z, other.g0.x, other.g3.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g0.x));
}

fn multi_vector_at_origin__geometric_product__multi_vector_at_infinity(self_: MultiVectorAtOrigin, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * other.g0 + vec2<f32>(self_.g0.y) * other.g0.yx * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, -other.g2.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, -other.g2.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g1.z, -other.g2.z) - vec2<f32>(self_.g2.x) * vec2<f32>(other.g2.x, other.g1.x) - vec2<f32>(self_.g2.y) * vec2<f32>(other.g2.y, other.g1.y) - vec2<f32>(self_.g2.z) * vec2<f32>(other.g2.z, other.g1.z), vec3<f32>(self_.g0.x) * other.g1 + vec3<f32>(self_.g0.y) * other.g2 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y), vec3<f32>(self_.g0.x) * other.g2 - vec3<f32>(self_.g0.y) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.y, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, -other.g0.y, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.y) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x));
}

fn multi_vector_at_origin__geometric_product__plane(self_: MultiVectorAtOrigin, other: Plane) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0.yx * vec2<f32>(-other.g0.w), self_.g2 * vec3<f32>(other.g0.w), vec3<f32>(0.0) - self_.g1 * vec3<f32>(other.g0.w));
}

fn multi_vector_at_origin__geometric_product__point(self_: MultiVectorAtOrigin, other: Point) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn multi_vector_at_origin__geometric_product__point_at_infinity(self_: MultiVectorAtOrigin, other: PointAtInfinity) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.y) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn multi_vector_at_origin__geometric_product__scalar(self_: MultiVectorAtOrigin, other: Scalar) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0 * vec2<f32>(other.g0), self_.g1 * vec3<f32>(other.g0), self_.g2 * vec3<f32>(other.g0));
}

fn multi_vector_at_origin__geometric_product__transflector(self_: MultiVectorAtOrigin, other: Transflector) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0.yx * vec2<f32>(-other.g1.w) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g2.x) * vec3<f32>(other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, other.g1.w, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g1.w), vec3<f32>(0.0) - vec3<f32>(self_.g0.y) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w));
}

fn multi_vector_at_origin__geometric_product__translator(self_: MultiVectorAtOrigin, other: Translator) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn origin__geometric_product__flector(self_: Origin, other: Flector) -> Rotor {
    return Rotor(vec4<f32>(self_.g0) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, other.g1.w));
}

fn origin__geometric_product__flector_at_infinity(self_: Origin, other: FlectorAtInfinity) -> Rotor {
    return Rotor(vec4<f32>(self_.g0) * other.g0);
}

fn origin__geometric_product__horizon(self_: Origin, other: Horizon) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0);
}

fn origin__geometric_product__line(self_: Origin, other: Line) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0) * other.g1);
}

fn origin__geometric_product__line_at_infinity(self_: Origin, other: LineAtInfinity) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0) * other.g0);
}

fn origin__geometric_product__magnitude(self_: Origin, other: Magnitude) -> Origin {
    return Origin(self_.g0 * other.g0.x);
}

fn origin__geometric_product__motor(self_: Origin, other: Motor) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0) * other.g1);
}

fn origin__geometric_product__multi_vector(self_: Origin, other: MultiVector) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0) * vec2<f32>(other.g0.x, other.g4.w), vec3<f32>(self_.g0) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(self_.g0) * other.g3);
}

fn origin__geometric_product__multi_vector_at_infinity(self_: Origin, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1, vec3<f32>(self_.g0) * other.g2);
}

fn origin__geometric_product__plane(self_: Origin, other: Plane) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0.w);
}

fn origin__geometric_product__point(self_: Origin, other: Point) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(self_.g0) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn origin__geometric_product__point_at_infinity(self_: Origin, other: PointAtInfinity) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(self_.g0) * other.g0);
}

fn origin__geometric_product__scalar(self_: Origin, other: Scalar) -> Origin {
    return Origin(self_.g0 * other.g0);
}

fn origin__geometric_product__transflector(self_: Origin, other: Transflector) -> Rotor {
    return Rotor(vec4<f32>(self_.g0) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, other.g1.w));
}

fn origin__geometric_product__translator(self_: Origin, other: Translator) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn plane__geometric_product__anti_scalar(self_: Plane, other: AntiScalar) -> Origin {
    return Origin(self_.g0.w * other.g0);
}

fn plane__geometric_product__flector(self_: Plane, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) - vec2<f32>(self_.g0.w) * vec2<f32>(other.g1.w, other.g0.w), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g1.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g1.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn plane__geometric_product__flector_at_infinity(self_: Plane, other: FlectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) - vec2<f32>(self_.g0.w, self_.g0.z) * vec2<f32>(other.g0.w, other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn plane__geometric_product__horizon(self_: Plane, other: Horizon) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(-other.g0, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn plane__geometric_product__line(self_: Plane, other: Line) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + self_.g0.wwwz * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, -other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn plane__geometric_product__line_at_infinity(self_: Plane, other: LineAtInfinity) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g0.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn plane__geometric_product__line_at_origin(self_: Plane, other: LineAtOrigin) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.w) * other.g0);
}

fn plane__geometric_product__magnitude(self_: Plane, other: Magnitude) -> Flector {
    return Flector(vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y), self_.g0 * vec4<f32>(other.g0.x));
}

fn plane__geometric_product__motor(self_: Plane, other: Motor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, other.g0.w), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn plane__geometric_product__multi_vector(self_: Plane, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z) - vec2<f32>(self_.g0.w) * vec2<f32>(other.g4.w, other.g1.w), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g3.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g3.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g3.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g3.x, other.g3.y, other.g3.z, other.g0.y), vec3<f32>(self_.g0.x) * vec3<f32>(other.g4.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g4.w, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g4.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g3.z, -other.g3.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g3.z, other.g0.x, other.g3.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g3.y, -other.g3.x, other.g0.x, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, other.g0.x));
}

fn plane__geometric_product__multi_vector_at_infinity(self_: Plane, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) - vec2<f32>(self_.g0.w, self_.g0.z) * vec2<f32>(other.g0.y, other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + self_.g0.wwwz * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, -other.g2.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * other.g1, vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g2.z, -other.g2.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.z, other.g0.x, other.g2.x, 0.0) + self_.g0.zzzw * vec4<f32>(other.g2.y, -other.g2.x, other.g0.x, other.g0.x));
}

fn plane__geometric_product__multi_vector_at_origin(self_: Plane, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.w) * other.g0.yx * vec2<f32>(1.0, -1.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * other.g2, vec3<f32>(self_.g0.w) * other.g1);
}

fn plane__geometric_product__origin(self_: Plane, other: Origin) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.w * other.g0);
}

fn plane__geometric_product__plane(self_: Plane, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(-other.g0.w, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn plane__geometric_product__plane_at_origin(self_: Plane, other: PlaneAtOrigin) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * other.g0);
}

fn plane__geometric_product__point(self_: Plane, other: Point) -> Motor {
    return Motor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn plane__geometric_product__point_at_infinity(self_: Plane, other: PointAtInfinity) -> Motor {
    return Motor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * other.g0);
}

fn plane__geometric_product__rotor(self_: Plane, other: Rotor) -> Flector {
    return Flector(vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w), vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn plane__geometric_product__scalar(self_: Plane, other: Scalar) -> Plane {
    return Plane(self_.g0 * vec4<f32>(other.g0));
}

fn plane__geometric_product__transflector(self_: Plane, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) - vec2<f32>(self_.g0.w, self_.g0.z) * vec2<f32>(other.g1.w, other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g1.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g1.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * other.g0, vec4<f32>(0.0));
}

fn plane__geometric_product__translator(self_: Plane, other: Translator) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g0.w) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn plane_at_origin__geometric_product__flector(self_: PlaneAtOrigin, other: Flector) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g0.z));
}

fn plane_at_origin__geometric_product__flector_at_infinity(self_: PlaneAtOrigin, other: FlectorAtInfinity) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * other.g0.wzyx * vec4<f32>(1.0, 1.0, -1.0, -1.0) + vec4<f32>(self_.g0.y) * other.g0.zwxy * vec4<f32>(-1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g0.z) * other.g0.yxwz * vec4<f32>(1.0, -1.0, 1.0, -1.0));
}

fn plane_at_origin__geometric_product__horizon(self_: PlaneAtOrigin, other: Horizon) -> LineAtOrigin {
    return LineAtOrigin(self_.g0 * vec3<f32>(other.g0));
}

fn plane_at_origin__geometric_product__line(self_: PlaneAtOrigin, other: Line) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, 0.0));
}

fn plane_at_origin__geometric_product__line_at_infinity(self_: PlaneAtOrigin, other: LineAtInfinity) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn plane_at_origin__geometric_product__magnitude(self_: PlaneAtOrigin, other: Magnitude) -> PlaneAtOrigin {
    return PlaneAtOrigin(self_.g0 * vec3<f32>(other.g0.x));
}

fn plane_at_origin__geometric_product__motor(self_: PlaneAtOrigin, other: Motor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, 0.0));
}

fn plane_at_origin__geometric_product__multi_vector(self_: PlaneAtOrigin, other: MultiVector) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g3.x, other.g1.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g3.y, other.g1.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g3.z, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g4.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g4.w, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g4.w), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g3.z, other.g0.x, other.g3.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g0.x));
}

fn plane_at_origin__geometric_product__multi_vector_at_infinity(self_: PlaneAtOrigin, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g2.x, other.g1.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g2.y, other.g1.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g2.z, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x));
}

fn plane_at_origin__geometric_product__plane(self_: PlaneAtOrigin, other: Plane) -> LineAtOrigin {
    return LineAtOrigin(self_.g0 * vec3<f32>(other.g0.w));
}

fn plane_at_origin__geometric_product__point(self_: PlaneAtOrigin, other: Point) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z));
}

fn plane_at_origin__geometric_product__point_at_infinity(self_: PlaneAtOrigin, other: PointAtInfinity) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z));
}

fn plane_at_origin__geometric_product__scalar(self_: PlaneAtOrigin, other: Scalar) -> PlaneAtOrigin {
    return PlaneAtOrigin(self_.g0 * vec3<f32>(other.g0));
}

fn plane_at_origin__geometric_product__transflector(self_: PlaneAtOrigin, other: Transflector) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g0.z));
}

fn plane_at_origin__geometric_product__translator(self_: PlaneAtOrigin, other: Translator) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn point__geometric_product__anti_scalar(self_: Point, other: AntiScalar) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0));
}

fn point__geometric_product__flector(self_: Point, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, other.g1.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g1.w), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g0.w, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w), vec4<f32>(0.0));
}

fn point__geometric_product__flector_at_infinity(self_: Point, other: FlectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z, self_.g0.w) * vec2<f32>(other.g0.z, other.g0.w), vec4<f32>(0.0), vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w), vec4<f32>(0.0));
}

fn point__geometric_product__horizon(self_: Point, other: Horizon) -> Translator {
    return Translator(self_.g0 * vec4<f32>(-other.g0));
}

fn point__geometric_product__line(self_: Point, other: Line) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0));
}

fn point__geometric_product__line_at_infinity(self_: Point, other: LineAtInfinity) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g0.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z));
}

fn point__geometric_product__line_at_origin(self_: Point, other: LineAtOrigin) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn point__geometric_product__magnitude(self_: Point, other: Magnitude) -> Flector {
    return Flector(self_.g0 * vec4<f32>(other.g0.x), self_.g0.xyzx * vec4<f32>(other.g0.y, other.g0.y, other.g0.y, 0.0));
}

fn point__geometric_product__motor(self_: Point, other: Motor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0));
}

fn point__geometric_product__multi_vector(self_: Point, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, other.g4.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, other.g4.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, other.g4.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g4.w), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g3.z, -other.g3.y, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g3.z, other.g0.x, other.g3.x, -other.g2.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g3.y, -other.g3.x, other.g0.x, -other.g2.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, -other.g4.z, other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g4.z, -other.g1.w, -other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g4.y, other.g4.x, -other.g1.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g4.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g4.w, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g4.w), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.y, other.g2.z, -other.g2.y, -other.g3.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.z, other.g0.y, other.g2.x, -other.g3.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g2.y, -other.g2.x, other.g0.y, -other.g3.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g3.x, other.g3.y, other.g3.z, 0.0));
}

fn point__geometric_product__multi_vector_at_infinity(self_: Point, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g0.z, self_.g0.w) * vec2<f32>(other.g1.z, other.g0.y), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g2.z, -other.g2.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.z, other.g0.x, other.g2.x, 0.0) + self_.g0.zzzw * vec4<f32>(other.g2.y, -other.g2.x, other.g0.x, other.g0.x), vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.y, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g0.y, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.y), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + self_.g0.wwwz * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, -other.g2.z));
}

fn point__geometric_product__multi_vector_at_origin(self_: Point, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, other.g2.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.x, -other.g2.z, other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g2.z, -other.g0.x, -other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g2.y, other.g2.x, -other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y));
}

fn point__geometric_product__origin(self_: Point, other: Origin) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0));
}

fn point__geometric_product__plane(self_: Point, other: Plane) -> Motor {
    return Motor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w));
}

fn point__geometric_product__plane_at_origin(self_: Point, other: PlaneAtOrigin) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, other.g0.z));
}

fn point__geometric_product__point(self_: Point, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(0.0));
}

fn point__geometric_product__point_at_infinity(self_: Point, other: PointAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(0.0));
}

fn point__geometric_product__rotor(self_: Point, other: Rotor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, 0.0));
}

fn point__geometric_product__scalar(self_: Point, other: Scalar) -> Point {
    return Point(self_.g0 * vec4<f32>(other.g0));
}

fn point__geometric_product__transflector(self_: Point, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, other.g1.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g1.w), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w), vec4<f32>(0.0));
}

fn point__geometric_product__translator(self_: Point, other: Translator) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn point_at_infinity__geometric_product__anti_scalar(self_: PointAtInfinity, other: AntiScalar) -> PlaneAtOrigin {
    return PlaneAtOrigin(self_.g0 * vec3<f32>(other.g0));
}

fn point_at_infinity__geometric_product__flector(self_: PointAtInfinity, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, other.g1.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g0.w, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w), vec4<f32>(0.0));
}

fn point_at_infinity__geometric_product__flector_at_infinity(self_: PointAtInfinity, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w));
}

fn point_at_infinity__geometric_product__horizon(self_: PointAtInfinity, other: Horizon) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0));
}

fn point_at_infinity__geometric_product__line(self_: PointAtInfinity, other: Line) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z));
}

fn point_at_infinity__geometric_product__line_at_infinity(self_: PointAtInfinity, other: LineAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z));
}

fn point_at_infinity__geometric_product__line_at_origin(self_: PointAtInfinity, other: LineAtOrigin) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn point_at_infinity__geometric_product__magnitude(self_: PointAtInfinity, other: Magnitude) -> Transflector {
    return Transflector(self_.g0 * vec3<f32>(other.g0.x), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g0.y, other.g0.y, other.g0.y, 0.0));
}

fn point_at_infinity__geometric_product__motor(self_: PointAtInfinity, other: Motor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, -other.g1.z));
}

fn point_at_infinity__geometric_product__multi_vector(self_: PointAtInfinity, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, other.g4.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, other.g4.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, other.g4.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g3.z, -other.g3.y, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g3.z, other.g0.x, other.g3.x, -other.g2.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g3.y, -other.g3.x, other.g0.x, -other.g2.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, -other.g4.z, other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g4.z, -other.g1.w, -other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g4.y, other.g4.x, -other.g1.w), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g4.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g4.w, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g4.w), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.y, other.g2.z, -other.g2.y, -other.g3.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.z, other.g0.y, other.g2.x, -other.g3.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g2.y, -other.g2.x, other.g0.y, -other.g3.z));
}

fn point_at_infinity__geometric_product__multi_vector_at_infinity(self_: PointAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, -other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, -other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, -other.g2.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.y, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g0.y, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.y));
}

fn point_at_infinity__geometric_product__multi_vector_at_origin(self_: PointAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, other.g2.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.x, -other.g2.z, other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g2.z, -other.g0.x, -other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g2.y, other.g2.x, -other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y));
}

fn point_at_infinity__geometric_product__origin(self_: PointAtInfinity, other: Origin) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0));
}

fn point_at_infinity__geometric_product__plane(self_: PointAtInfinity, other: Plane) -> Motor {
    return Motor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, other.g0.z), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0.w));
}

fn point_at_infinity__geometric_product__plane_at_origin(self_: PointAtInfinity, other: PlaneAtOrigin) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, other.g0.z));
}

fn point_at_infinity__geometric_product__point(self_: PointAtInfinity, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(0.0));
}

fn point_at_infinity__geometric_product__point_at_infinity(self_: PointAtInfinity, other: PointAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn point_at_infinity__geometric_product__rotor(self_: PointAtInfinity, other: Rotor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, 0.0));
}

fn point_at_infinity__geometric_product__scalar(self_: PointAtInfinity, other: Scalar) -> PointAtInfinity {
    return PointAtInfinity(self_.g0 * vec3<f32>(other.g0));
}

fn point_at_infinity__geometric_product__transflector(self_: PointAtInfinity, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, other.g1.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w), vec4<f32>(0.0));
}

fn point_at_infinity__geometric_product__translator(self_: PointAtInfinity, other: Translator) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn rotor__geometric_product__flector(self_: Rotor, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.w), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g1.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, -other.g1.w, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, -other.g1.w, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0));
}

fn rotor__geometric_product__flector_at_infinity(self_: Rotor, other: FlectorAtInfinity) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g0.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, -other.g0.w, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, -other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0));
}

fn rotor__geometric_product__horizon(self_: Rotor, other: Horizon) -> Flector {
    return Flector(vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0), self_.g0.xyzx * vec4<f32>(-other.g0, -other.g0, -other.g0, 0.0));
}

fn rotor__geometric_product__line(self_: Rotor, other: Line) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0));
}

fn rotor__geometric_product__line_at_infinity(self_: Rotor, other: LineAtInfinity) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn rotor__geometric_product__magnitude(self_: Rotor, other: Magnitude) -> Rotor {
    return Rotor(self_.g0 * vec4<f32>(other.g0.x));
}

fn rotor__geometric_product__motor(self_: Rotor, other: Motor) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0));
}

fn rotor__geometric_product__multi_vector(self_: Rotor, other: MultiVector) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, -other.g3.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, -other.g3.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, -other.g3.z) + vec2<f32>(self_.g0.w) * vec2<f32>(-other.g4.w, other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g3.z, other.g0.x, other.g3.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g0.x) + vec3<f32>(self_.g0.w) * other.g3, vec3<f32>(self_.g0.x) * vec3<f32>(-other.g4.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g4.w, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g4.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z));
}

fn rotor__geometric_product__multi_vector_at_infinity(self_: Rotor, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, -other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, -other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, -other.g2.z) + vec2<f32>(self_.g0.w) * other.g0.yx * vec2<f32>(-1.0, 1.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x) + vec3<f32>(self_.g0.w) * other.g2, vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.y, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g0.y, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.y) - vec3<f32>(self_.g0.w) * other.g1);
}

fn rotor__geometric_product__plane(self_: Rotor, other: Plane) -> Flector {
    return Flector(vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w), self_.g0.xyzx * vec4<f32>(-other.g0.w, -other.g0.w, -other.g0.w, 0.0));
}

fn rotor__geometric_product__point(self_: Rotor, other: Point) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0));
}

fn rotor__geometric_product__point_at_infinity(self_: Rotor, other: PointAtInfinity) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0));
}

fn rotor__geometric_product__scalar(self_: Rotor, other: Scalar) -> Rotor {
    return Rotor(self_.g0 * vec4<f32>(other.g0));
}

fn rotor__geometric_product__transflector(self_: Rotor, other: Transflector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.w), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g1.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, -other.g1.w, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, -other.g1.w, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0));
}

fn rotor__geometric_product__translator(self_: Rotor, other: Translator) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn scalar__geometric_product__anti_scalar(self_: Scalar, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0);
}

fn scalar__geometric_product__flector(self_: Scalar, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0) * other.g0, vec4<f32>(self_.g0) * other.g1);
}

fn scalar__geometric_product__flector_at_infinity(self_: Scalar, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0) * other.g0);
}

fn scalar__geometric_product__horizon(self_: Scalar, other: Horizon) -> Horizon {
    return Horizon(self_.g0 * other.g0);
}

fn scalar__geometric_product__line(self_: Scalar, other: Line) -> Line {
    return Line(vec3<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1);
}

fn scalar__geometric_product__line_at_infinity(self_: Scalar, other: LineAtInfinity) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(self_.g0) * other.g0);
}

fn scalar__geometric_product__line_at_origin(self_: Scalar, other: LineAtOrigin) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(self_.g0) * other.g0);
}

fn scalar__geometric_product__magnitude(self_: Scalar, other: Magnitude) -> Magnitude {
    return Magnitude(vec2<f32>(self_.g0) * other.g0);
}

fn scalar__geometric_product__motor(self_: Scalar, other: Motor) -> Motor {
    return Motor(vec4<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1);
}

fn scalar__geometric_product__multi_vector(self_: Scalar, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0) * other.g0, vec4<f32>(self_.g0) * other.g1, vec3<f32>(self_.g0) * other.g2, vec3<f32>(self_.g0) * other.g3, vec4<f32>(self_.g0) * other.g4);
}

fn scalar__geometric_product__multi_vector_at_infinity(self_: Scalar, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1, vec3<f32>(self_.g0) * other.g2);
}

fn scalar__geometric_product__multi_vector_at_origin(self_: Scalar, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1, vec3<f32>(self_.g0) * other.g2);
}

fn scalar__geometric_product__origin(self_: Scalar, other: Origin) -> Origin {
    return Origin(self_.g0 * other.g0);
}

fn scalar__geometric_product__plane(self_: Scalar, other: Plane) -> Plane {
    return Plane(vec4<f32>(self_.g0) * other.g0);
}

fn scalar__geometric_product__plane_at_origin(self_: Scalar, other: PlaneAtOrigin) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0) * other.g0);
}

fn scalar__geometric_product__point(self_: Scalar, other: Point) -> Point {
    return Point(vec4<f32>(self_.g0) * other.g0);
}

fn scalar__geometric_product__point_at_infinity(self_: Scalar, other: PointAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0) * other.g0);
}

fn scalar__geometric_product__rotor(self_: Scalar, other: Rotor) -> Rotor {
    return Rotor(vec4<f32>(self_.g0) * other.g0);
}

fn scalar__geometric_product__scalar(self_: Scalar, other: Scalar) -> Scalar {
    return Scalar(self_.g0 * other.g0);
}

fn scalar__geometric_product__transflector(self_: Scalar, other: Transflector) -> Transflector {
    return Transflector(vec3<f32>(self_.g0) * other.g0, vec4<f32>(self_.g0) * other.g1);
}

fn scalar__geometric_product__translator(self_: Scalar, other: Translator) -> Translator {
    return Translator(vec4<f32>(self_.g0) * other.g0);
}

fn transflector__geometric_product__anti_scalar(self_: Transflector, other: AntiScalar) -> Flector {
    return Flector(vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g0, other.g0, other.g0, 0.0));
}

fn transflector__geometric_product__flector(self_: Transflector, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, other.g1.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) - vec2<f32>(self_.g1.w) * vec2<f32>(other.g1.w, other.g0.w), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g0.w, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.w) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, other.g1.w, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g1.w) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn transflector__geometric_product__flector_at_infinity(self_: Transflector, other: FlectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) - vec2<f32>(self_.g1.w, self_.g1.z) * vec2<f32>(other.g0.w, other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn transflector__geometric_product__horizon(self_: Transflector, other: Horizon) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.w) * vec2<f32>(-other.g0, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0), vec4<f32>(0.0));
}

fn transflector__geometric_product__line(self_: Transflector, other: Line) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + self_.g1.wwwz * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, -other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn transflector__geometric_product__line_at_infinity(self_: Transflector, other: LineAtInfinity) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g1.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn transflector__geometric_product__line_at_origin(self_: Transflector, other: LineAtOrigin) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn transflector__geometric_product__magnitude(self_: Transflector, other: Magnitude) -> Flector {
    return Flector(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g0.x, other.g0.x, other.g0.x, 0.0) + vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g0.y, other.g0.y, other.g0.y, 0.0) + self_.g1 * vec4<f32>(other.g0.x));
}

fn transflector__geometric_product__motor(self_: Transflector, other: Motor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, other.g0.w), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, -other.g1.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn transflector__geometric_product__multi_vector(self_: Transflector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, other.g4.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, other.g4.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, other.g4.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z) - vec2<f32>(self_.g1.w) * vec2<f32>(other.g4.w, other.g1.w), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g3.z, -other.g3.y, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g3.z, other.g0.x, other.g3.x, -other.g2.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g3.y, -other.g3.x, other.g0.x, -other.g2.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g3.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g3.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g3.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g3.x, other.g3.y, other.g3.z, other.g0.y), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, -other.g4.z, other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g4.z, -other.g1.w, -other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g4.y, other.g4.x, -other.g1.w) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g4.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, other.g4.w, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g4.w) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g4.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g4.w, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g4.w) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.y, other.g2.z, -other.g2.y, -other.g3.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.z, other.g0.y, other.g2.x, -other.g3.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g2.y, -other.g2.x, other.g0.y, -other.g3.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.x, other.g3.z, -other.g3.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g3.z, other.g0.x, other.g3.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g3.y, -other.g3.x, other.g0.x, 0.0) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, other.g0.x));
}

fn transflector__geometric_product__multi_vector_at_infinity(self_: Transflector, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) - vec2<f32>(self_.g1.w, self_.g1.z) * vec2<f32>(other.g0.y, other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g2.z, -other.g2.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.z, other.g0.x, other.g2.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g2.y, -other.g2.x, other.g0.x, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + self_.g1.wwwz * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, -other.g2.z), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.y, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g0.y, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.y) - vec3<f32>(self_.g1.w) * other.g1, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.x, other.g2.z, -other.g2.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g2.z, other.g0.x, other.g2.x, 0.0) + self_.g1.zzzw * vec4<f32>(other.g2.y, -other.g2.x, other.g0.x, other.g0.x));
}

fn transflector__geometric_product__multi_vector_at_origin(self_: Transflector, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, other.g2.z) + vec2<f32>(self_.g1.w) * other.g0.yx * vec2<f32>(1.0, -1.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.x, -other.g2.z, other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g2.z, -other.g0.x, -other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g2.y, other.g2.x, -other.g0.x) - vec3<f32>(self_.g1.w) * other.g2, vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y) + vec3<f32>(self_.g1.w) * other.g1);
}

fn transflector__geometric_product__origin(self_: Transflector, other: Origin) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(-other.g0, -other.g0, -other.g0, 0.0) + vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0));
}

fn transflector__geometric_product__plane(self_: Transflector, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g1.w) * vec2<f32>(-other.g0.w, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.w) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0.w), vec4<f32>(0.0));
}

fn transflector__geometric_product__plane_at_origin(self_: Transflector, other: PlaneAtOrigin) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0));
}

fn transflector__geometric_product__point(self_: Transflector, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g0.w), vec4<f32>(0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn transflector__geometric_product__point_at_infinity(self_: Transflector, other: PointAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - vec3<f32>(self_.g1.w) * other.g0, vec4<f32>(0.0));
}

fn transflector__geometric_product__rotor(self_: Transflector, other: Rotor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, 0.0) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn transflector__geometric_product__scalar(self_: Transflector, other: Scalar) -> Transflector {
    return Transflector(self_.g0 * vec3<f32>(other.g0), self_.g1 * vec4<f32>(other.g0));
}

fn transflector__geometric_product__transflector(self_: Transflector, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, other.g1.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) - vec2<f32>(self_.g1.w, self_.g1.z) * vec2<f32>(other.g1.w, other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, other.g1.w, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g1.w) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w) - vec3<f32>(self_.g1.w) * other.g0, vec4<f32>(0.0));
}

fn transflector__geometric_product__translator(self_: Transflector, other: Translator) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g1.w) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn translator__geometric_product__anti_scalar(self_: Translator, other: AntiScalar) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0));
}

fn translator__geometric_product__flector(self_: Translator, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.w), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, other.g0.w, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g0.w, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0));
}

fn translator__geometric_product__flector_at_infinity(self_: Translator, other: FlectorAtInfinity) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, 0.0) + self_.g0.zzzw * other.g0.yxww * vec4<f32>(1.0, -1.0, 1.0, -1.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) - self_.g0.wwwz * other.g0.xyzz);
}

fn translator__geometric_product__horizon(self_: Translator, other: Horizon) -> Point {
    return Point(self_.g0 * vec4<f32>(other.g0));
}

fn translator__geometric_product__line(self_: Translator, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, other.g0.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, other.g0.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec4<f32>(0.0));
}

fn translator__geometric_product__line_at_infinity(self_: Translator, other: LineAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(0.0));
}

fn translator__geometric_product__line_at_origin(self_: Translator, other: LineAtOrigin) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z));
}

fn translator__geometric_product__magnitude(self_: Translator, other: Magnitude) -> Motor {
    return Motor(self_.g0 * vec4<f32>(other.g0.y, other.g0.y, other.g0.y, other.g0.x), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.x));
}

fn translator__geometric_product__motor(self_: Translator, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, other.g0.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, other.g0.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w) + vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec4<f32>(0.0));
}

fn translator__geometric_product__multi_vector(self_: Translator, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g3.x, other.g2.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g3.y, other.g2.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g3.z, other.g2.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.x), vec4<f32>(self_.g0.x) * vec4<f32>(other.g4.w, other.g1.z, -other.g1.y, -other.g4.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, other.g4.w, other.g1.x, -other.g4.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g4.w, -other.g4.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g4.w), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.y, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.y) + vec3<f32>(self_.g0.w) * other.g3, vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g3.z, other.g0.x, other.g3.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g0.x), vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, other.g4.z, -other.g4.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g4.z, other.g1.w, other.g4.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g4.y, -other.g4.x, other.g1.w, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0));
}

fn translator__geometric_product__multi_vector_at_infinity(self_: Translator, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g0.z, self_.g0.w) * vec2<f32>(-other.g2.z, other.g0.x), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.y, other.g1.z, -other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, other.g0.y, other.g1.x, 0.0) + self_.g0.zzzw * vec4<f32>(other.g1.y, -other.g1.x, other.g0.y, -other.g0.y), vec3<f32>(self_.g0.w) * other.g2, vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) - self_.g0.wwwz * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, other.g1.z));
}

fn translator__geometric_product__multi_vector_at_origin(self_: Translator, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g2.x, other.g1.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g2.y, other.g1.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g2.z, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x));
}

fn translator__geometric_product__origin(self_: Translator, other: Origin) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0));
}

fn translator__geometric_product__plane(self_: Translator, other: Plane) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn translator__geometric_product__plane_at_origin(self_: Translator, other: PlaneAtOrigin) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn translator__geometric_product__point(self_: Translator, other: Point) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0));
}

fn translator__geometric_product__point_at_infinity(self_: Translator, other: PointAtInfinity) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) - self_.g0.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, other.g0.z));
}

fn translator__geometric_product__rotor(self_: Translator, other: Rotor) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * other.g0.wzyx * vec4<f32>(1.0, 1.0, -1.0, -1.0) + vec4<f32>(self_.g0.y) * other.g0.zwxy * vec4<f32>(-1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g0.z) * other.g0.yxwz * vec4<f32>(1.0, -1.0, 1.0, -1.0));
}

fn translator__geometric_product__scalar(self_: Translator, other: Scalar) -> Translator {
    return Translator(self_.g0 * vec4<f32>(other.g0));
}

fn translator__geometric_product__transflector(self_: Translator, other: Transflector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.w), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0));
}

fn translator__geometric_product__translator(self_: Translator, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(0.0));
}

fn anti_scalar__wedge_dot__flector(self_: AntiScalar, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.w), vec4<f32>(self_.g0) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0));
}

fn anti_scalar__wedge_dot__flector_at_infinity(self_: AntiScalar, other: FlectorAtInfinity) -> Flector {
    return Flector(vec4<f32>(self_.g0) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w), vec4<f32>(self_.g0) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0));
}

fn anti_scalar__wedge_dot__horizon(self_: AntiScalar, other: Horizon) -> Origin {
    return Origin(0.0 - self_.g0 * other.g0);
}

fn anti_scalar__wedge_dot__line(self_: AntiScalar, other: Line) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(self_.g0) * other.g1);
}

fn anti_scalar__wedge_dot__line_at_infinity(self_: AntiScalar, other: LineAtInfinity) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(self_.g0) * other.g0);
}

fn anti_scalar__wedge_dot__magnitude(self_: AntiScalar, other: Magnitude) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0.x);
}

fn anti_scalar__wedge_dot__motor(self_: AntiScalar, other: Motor) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(self_.g0) * other.g1);
}

fn anti_scalar__wedge_dot__multi_vector(self_: AntiScalar, other: MultiVector) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0) * vec2<f32>(-other.g4.w, other.g0.x), vec3<f32>(self_.g0) * other.g3, vec3<f32>(0.0) - vec3<f32>(self_.g0) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z));
}

fn anti_scalar__wedge_dot__multi_vector_at_infinity(self_: AntiScalar, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0) * other.g0.yx * vec2<f32>(-1.0, 1.0), vec3<f32>(self_.g0) * other.g2, vec3<f32>(0.0) - vec3<f32>(self_.g0) * other.g1);
}

fn anti_scalar__wedge_dot__plane(self_: AntiScalar, other: Plane) -> Origin {
    return Origin(0.0 - self_.g0 * other.g0.w);
}

fn anti_scalar__wedge_dot__point(self_: AntiScalar, other: Point) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(0.0) - vec3<f32>(self_.g0) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn anti_scalar__wedge_dot__point_at_infinity(self_: AntiScalar, other: PointAtInfinity) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(0.0) - vec3<f32>(self_.g0) * other.g0);
}

fn anti_scalar__wedge_dot__scalar(self_: AntiScalar, other: Scalar) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0);
}

fn anti_scalar__wedge_dot__transflector(self_: AntiScalar, other: Transflector) -> Flector {
    return Flector(vec4<f32>(self_.g0) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.w), vec4<f32>(self_.g0) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0));
}

fn anti_scalar__wedge_dot__translator(self_: AntiScalar, other: Translator) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(self_.g0) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn flector__wedge_dot__anti_scalar(self_: Flector, other: AntiScalar) -> Flector {
    return Flector(vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0), self_.g0.xyzx * vec4<f32>(other.g0, other.g0, other.g0, 0.0));
}

fn flector__wedge_dot__flector(self_: Flector, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, other.g1.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g1.w) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) - vec2<f32>(self_.g1.w) * vec2<f32>(other.g1.w, other.g0.w), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g0.w, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, other.g1.w, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g1.w) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn flector__wedge_dot__flector_at_infinity(self_: Flector, other: FlectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z, self_.g0.w) * vec2<f32>(other.g0.z, other.g0.w) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) - vec2<f32>(self_.g1.w, self_.g1.z) * vec2<f32>(other.g0.w, other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn flector__wedge_dot__horizon(self_: Flector, other: Horizon) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0) + vec2<f32>(self_.g1.w) * vec2<f32>(-other.g0, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0), vec4<f32>(0.0));
}

fn flector__wedge_dot__line(self_: Flector, other: Line) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + self_.g1.wwwz * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, -other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn flector__wedge_dot__line_at_infinity(self_: Flector, other: LineAtInfinity) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g1.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g0.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn flector__wedge_dot__line_at_origin(self_: Flector, other: LineAtOrigin) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn flector__wedge_dot__magnitude(self_: Flector, other: Magnitude) -> Flector {
    return Flector(self_.g0 * vec4<f32>(other.g0.x) + vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y), self_.g0.xyzx * vec4<f32>(other.g0.y, other.g0.y, other.g0.y, 0.0) + self_.g1 * vec4<f32>(other.g0.x));
}

fn flector__wedge_dot__motor(self_: Flector, other: Motor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, other.g0.w), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn flector__wedge_dot__multi_vector(self_: Flector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, other.g4.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, other.g4.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, other.g4.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g4.w) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z) - vec2<f32>(self_.g1.w) * vec2<f32>(other.g4.w, other.g1.w), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g3.z, -other.g3.y, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g3.z, other.g0.x, other.g3.x, -other.g2.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g3.y, -other.g3.x, other.g0.x, -other.g2.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g3.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g3.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g3.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g3.x, other.g3.y, other.g3.z, other.g0.y), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, -other.g4.z, other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g4.z, -other.g1.w, -other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g4.y, other.g4.x, -other.g1.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g4.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, other.g4.w, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g4.w) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g4.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g4.w, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g4.w) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.y, other.g2.z, -other.g2.y, -other.g3.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.z, other.g0.y, other.g2.x, -other.g3.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g2.y, -other.g2.x, other.g0.y, -other.g3.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g3.x, other.g3.y, other.g3.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.x, other.g3.z, -other.g3.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g3.z, other.g0.x, other.g3.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g3.y, -other.g3.x, other.g0.x, 0.0) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, other.g0.x));
}

fn flector__wedge_dot__multi_vector_at_infinity(self_: Flector, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g0.z, self_.g0.w) * vec2<f32>(other.g1.z, other.g0.y) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) - vec2<f32>(self_.g1.w, self_.g1.z) * vec2<f32>(other.g0.y, other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g2.z, -other.g2.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.z, other.g0.x, other.g2.x, 0.0) + self_.g0.zzzw * vec4<f32>(other.g2.y, -other.g2.x, other.g0.x, other.g0.x) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + self_.g1.wwwz * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, -other.g2.z), vec3<f32>(self_.g0.w) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.y, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g0.y, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.y) - vec3<f32>(self_.g1.w) * other.g1, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + self_.g0.wwwz * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, -other.g2.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.x, other.g2.z, -other.g2.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g2.z, other.g0.x, other.g2.x, 0.0) + self_.g1.zzzw * vec4<f32>(other.g2.y, -other.g2.x, other.g0.x, other.g0.x));
}

fn flector__wedge_dot__multi_vector_at_origin(self_: Flector, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, other.g2.z) + vec2<f32>(self_.g1.w) * other.g0.yx * vec2<f32>(1.0, -1.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.x, -other.g2.z, other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g2.z, -other.g0.x, -other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g2.y, other.g2.x, -other.g0.x) - vec3<f32>(self_.g1.w) * other.g2, vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y) + vec3<f32>(self_.g1.w) * other.g1);
}

fn flector__wedge_dot__origin(self_: Flector, other: Origin) -> Rotor {
    return Rotor(self_.g0.xyzx * vec4<f32>(-other.g0, -other.g0, -other.g0, 0.0) + vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0));
}

fn flector__wedge_dot__plane(self_: Flector, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g1.w) * vec2<f32>(-other.g0.w, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.w) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w), vec4<f32>(0.0));
}

fn flector__wedge_dot__plane_at_origin(self_: Flector, other: PlaneAtOrigin) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0));
}

fn flector__wedge_dot__point(self_: Flector, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g0.w), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn flector__wedge_dot__point_at_infinity(self_: Flector, other: PointAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g0.w) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - vec3<f32>(self_.g1.w) * other.g0, vec4<f32>(0.0));
}

fn flector__wedge_dot__rotor(self_: Flector, other: Rotor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, 0.0) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn flector__wedge_dot__scalar(self_: Flector, other: Scalar) -> Flector {
    return Flector(self_.g0 * vec4<f32>(other.g0), self_.g1 * vec4<f32>(other.g0));
}

fn flector__wedge_dot__transflector(self_: Flector, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, other.g1.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g1.w) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) - vec2<f32>(self_.g1.w, self_.g1.z) * vec2<f32>(other.g1.w, other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g0.w) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, other.g1.w, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g1.w) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w) - vec3<f32>(self_.g1.w) * other.g0, vec4<f32>(0.0));
}

fn flector__wedge_dot__translator(self_: Flector, other: Translator) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g1.w) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn flector_at_infinity__wedge_dot__anti_scalar(self_: FlectorAtInfinity, other: AntiScalar) -> Flector {
    return Flector(vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0), self_.g0.xyzx * vec4<f32>(other.g0, other.g0, other.g0, 0.0));
}

fn flector_at_infinity__wedge_dot__flector(self_: FlectorAtInfinity, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, other.g1.z) - vec2<f32>(self_.g0.w) * vec2<f32>(other.g1.w, other.g0.w), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g0.w, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn flector_at_infinity__wedge_dot__flector_at_infinity(self_: FlectorAtInfinity, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(-other.g0.w, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn flector_at_infinity__wedge_dot__horizon(self_: FlectorAtInfinity, other: Horizon) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.w) * vec2<f32>(-other.g0, 0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0));
}

fn flector_at_infinity__wedge_dot__line(self_: FlectorAtInfinity, other: Line) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn flector_at_infinity__wedge_dot__line_at_infinity(self_: FlectorAtInfinity, other: LineAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn flector_at_infinity__wedge_dot__line_at_origin(self_: FlectorAtInfinity, other: LineAtOrigin) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn flector_at_infinity__wedge_dot__magnitude(self_: FlectorAtInfinity, other: Magnitude) -> Flector {
    return Flector(self_.g0 * vec4<f32>(other.g0.x, other.g0.x, other.g0.x, other.g0.y), self_.g0 * vec4<f32>(other.g0.y, other.g0.y, other.g0.y, other.g0.x));
}

fn flector_at_infinity__wedge_dot__motor(self_: FlectorAtInfinity, other: Motor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, other.g0.w), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn flector_at_infinity__wedge_dot__multi_vector(self_: FlectorAtInfinity, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, other.g4.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, other.g4.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, other.g4.z) - vec2<f32>(self_.g0.w) * vec2<f32>(other.g4.w, other.g1.w), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g3.z, -other.g3.y, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g3.z, other.g0.x, other.g3.x, -other.g2.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g3.y, -other.g3.x, other.g0.x, -other.g2.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g3.x, other.g3.y, other.g3.z, other.g0.y), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, -other.g4.z, other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g4.z, -other.g1.w, -other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g4.y, other.g4.x, -other.g1.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g4.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g4.w, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g4.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.y, other.g2.z, -other.g2.y, -other.g3.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.z, other.g0.y, other.g2.x, -other.g3.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g2.y, -other.g2.x, other.g0.y, -other.g3.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, other.g0.x));
}

fn flector_at_infinity__wedge_dot__multi_vector_at_infinity(self_: FlectorAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, -other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, -other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, -other.g2.z) + vec2<f32>(self_.g0.w) * other.g0.yx * vec2<f32>(-1.0, 1.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x) + vec3<f32>(self_.g0.w) * other.g2, vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.y, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g0.y, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.y) - vec3<f32>(self_.g0.w) * other.g1);
}

fn flector_at_infinity__wedge_dot__multi_vector_at_origin(self_: FlectorAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, other.g2.z) + vec2<f32>(self_.g0.w) * other.g0.yx * vec2<f32>(1.0, -1.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.x, -other.g2.z, other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g2.z, -other.g0.x, -other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g2.y, other.g2.x, -other.g0.x) - vec3<f32>(self_.g0.w) * other.g2, vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y) + vec3<f32>(self_.g0.w) * other.g1);
}

fn flector_at_infinity__wedge_dot__origin(self_: FlectorAtInfinity, other: Origin) -> Rotor {
    return Rotor(vec4<f32>(0.0) - self_.g0 * vec4<f32>(other.g0));
}

fn flector_at_infinity__wedge_dot__plane(self_: FlectorAtInfinity, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.w, self_.g0.z) * vec2<f32>(-other.g0.w, other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w), vec4<f32>(0.0));
}

fn flector_at_infinity__wedge_dot__plane_at_origin(self_: FlectorAtInfinity, other: PlaneAtOrigin) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0));
}

fn flector_at_infinity__wedge_dot__point(self_: FlectorAtInfinity, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z, self_.g0.w) * vec2<f32>(other.g0.z, -other.g0.w), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn flector_at_infinity__wedge_dot__point_at_infinity(self_: FlectorAtInfinity, other: PointAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - vec3<f32>(self_.g0.w) * other.g0);
}

fn flector_at_infinity__wedge_dot__rotor(self_: FlectorAtInfinity, other: Rotor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn flector_at_infinity__wedge_dot__scalar(self_: FlectorAtInfinity, other: Scalar) -> FlectorAtInfinity {
    return FlectorAtInfinity(self_.g0 * vec4<f32>(other.g0));
}

fn flector_at_infinity__wedge_dot__transflector(self_: FlectorAtInfinity, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, other.g1.z) + vec2<f32>(self_.g0.w) * vec2<f32>(-other.g1.w, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w) - vec3<f32>(self_.g0.w) * other.g0, vec4<f32>(0.0));
}

fn flector_at_infinity__wedge_dot__translator(self_: FlectorAtInfinity, other: Translator) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn horizon__wedge_dot__anti_scalar(self_: Horizon, other: AntiScalar) -> Origin {
    return Origin(self_.g0 * other.g0);
}

fn horizon__wedge_dot__flector(self_: Horizon, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0) * vec2<f32>(other.g1.w, other.g0.w), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(0.0) - vec3<f32>(self_.g0) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn horizon__wedge_dot__flector_at_infinity(self_: Horizon, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0) * vec2<f32>(-other.g0.w, 0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn horizon__wedge_dot__horizon(self_: Horizon, other: Horizon) -> Scalar {
    return Scalar(0.0 - self_.g0 * other.g0);
}

fn horizon__wedge_dot__line(self_: Horizon, other: Line) -> Transflector {
    return Transflector(vec3<f32>(self_.g0) * other.g1, vec4<f32>(self_.g0) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn horizon__wedge_dot__line_at_infinity(self_: Horizon, other: LineAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0) * other.g0);
}

fn horizon__wedge_dot__line_at_origin(self_: Horizon, other: LineAtOrigin) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0) * other.g0);
}

fn horizon__wedge_dot__magnitude(self_: Horizon, other: Magnitude) -> Flector {
    return Flector(vec4<f32>(self_.g0) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y), vec4<f32>(self_.g0) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x));
}

fn horizon__wedge_dot__motor(self_: Horizon, other: Motor) -> Flector {
    return Flector(vec4<f32>(self_.g0) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, other.g0.w), vec4<f32>(self_.g0) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn horizon__wedge_dot__multi_vector(self_: Horizon, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0) * vec2<f32>(other.g4.w, other.g1.w), vec4<f32>(self_.g0) * vec4<f32>(other.g3.x, other.g3.y, other.g3.z, other.g0.y), vec3<f32>(0.0) - vec3<f32>(self_.g0) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z), vec3<f32>(0.0) - vec3<f32>(self_.g0) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(self_.g0) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, other.g0.x));
}

fn horizon__wedge_dot__multi_vector_at_infinity(self_: Horizon, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0) * other.g0.yx * vec2<f32>(-1.0, 1.0), vec3<f32>(self_.g0) * other.g2, vec3<f32>(0.0) - vec3<f32>(self_.g0) * other.g1);
}

fn horizon__wedge_dot__multi_vector_at_origin(self_: Horizon, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0) * other.g0.yx * vec2<f32>(1.0, -1.0), vec3<f32>(0.0) - vec3<f32>(self_.g0) * other.g2, vec3<f32>(self_.g0) * other.g1);
}

fn horizon__wedge_dot__origin(self_: Horizon, other: Origin) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0 * other.g0);
}

fn horizon__wedge_dot__plane(self_: Horizon, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0) * vec2<f32>(-other.g0.w, 0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn horizon__wedge_dot__plane_at_origin(self_: Horizon, other: PlaneAtOrigin) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(0.0) - vec3<f32>(self_.g0) * other.g0);
}

fn horizon__wedge_dot__point(self_: Horizon, other: Point) -> Translator {
    return Translator(vec4<f32>(0.0) - vec4<f32>(self_.g0) * other.g0);
}

fn horizon__wedge_dot__point_at_infinity(self_: Horizon, other: PointAtInfinity) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(0.0) - vec3<f32>(self_.g0) * other.g0);
}

fn horizon__wedge_dot__rotor(self_: Horizon, other: Rotor) -> Flector {
    return Flector(vec4<f32>(self_.g0) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w), vec4<f32>(self_.g0) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn horizon__wedge_dot__scalar(self_: Horizon, other: Scalar) -> Horizon {
    return Horizon(self_.g0 * other.g0);
}

fn horizon__wedge_dot__transflector(self_: Horizon, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0) * vec2<f32>(-other.g1.w, 0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(0.0) - vec3<f32>(self_.g0) * other.g0, vec4<f32>(0.0));
}

fn horizon__wedge_dot__translator(self_: Horizon, other: Translator) -> Point {
    return Point(vec4<f32>(self_.g0) * other.g0);
}

fn line__wedge_dot__anti_scalar(self_: Line, other: AntiScalar) -> LineAtOrigin {
    return LineAtOrigin(self_.g1 * vec3<f32>(other.g0));
}

fn line__wedge_dot__flector(self_: Line, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g1.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, -other.g1.w, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, -other.g1.w, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, other.g0.w, other.g1.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g0.w, -other.g0.z));
}

fn line__wedge_dot__flector_at_infinity(self_: Line, other: FlectorAtInfinity) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g0.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, -other.g0.w, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, -other.g0.w, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z));
}

fn line__wedge_dot__horizon(self_: Line, other: Horizon) -> Transflector {
    return Transflector(self_.g1 * vec3<f32>(other.g0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(-other.g0, -other.g0, -other.g0, 0.0));
}

fn line__wedge_dot__line(self_: Line, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z) - vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, other.g0.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, other.g0.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g1.z, other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec4<f32>(0.0));
}

fn line__wedge_dot__line_at_infinity(self_: Line, other: LineAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(0.0));
}

fn line__wedge_dot__line_at_origin(self_: Line, other: LineAtOrigin) -> Rotor {
    return Rotor(vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z));
}

fn line__wedge_dot__magnitude(self_: Line, other: Magnitude) -> Line {
    return Line(self_.g0 * vec3<f32>(other.g0.x) + self_.g1 * vec3<f32>(other.g0.y), self_.g1 * vec3<f32>(other.g0.x));
}

fn line__wedge_dot__motor(self_: Line, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z) - vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, other.g0.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, other.g0.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g1.z, other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec4<f32>(0.0));
}

fn line__wedge_dot__multi_vector(self_: Line, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g3.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g3.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g3.z) - vec2<f32>(self_.g1.x) * vec2<f32>(other.g3.x, other.g2.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g3.y, other.g2.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g3.z, other.g2.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g1.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g4.w, other.g1.z, -other.g1.y, -other.g4.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, other.g4.w, other.g1.x, -other.g4.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g4.w, -other.g4.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g3.z, other.g0.x, other.g3.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g0.x) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.y, other.g2.z, -other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g2.z, other.g0.y, other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.y), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g3.z, other.g0.x, other.g3.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g0.x), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g4.w, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, -other.g4.w, -other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, -other.g4.w, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.w, other.g4.z, -other.g4.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g4.z, other.g1.w, other.g4.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g4.y, -other.g4.x, other.g1.w, -other.g1.z));
}

fn line__wedge_dot__multi_vector_at_infinity(self_: Line, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g2.z) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g2.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g1.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.y, other.g1.z, -other.g1.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, other.g0.y, other.g1.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g0.y, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g0.y, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, -other.g0.y, -other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, -other.g0.y, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.z));
}

fn line__wedge_dot__multi_vector_at_origin(self_: Line, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(0.0) - vec2<f32>(self_.g1.x) * vec2<f32>(other.g2.x, other.g1.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g2.y, other.g1.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g2.z, other.g1.z), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x));
}

fn line__wedge_dot__origin(self_: Line, other: Origin) -> PlaneAtOrigin {
    return PlaneAtOrigin(self_.g1 * vec3<f32>(other.g0));
}

fn line__wedge_dot__plane(self_: Line, other: Plane) -> Flector {
    return Flector(vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(-other.g0.w, -other.g0.w, -other.g0.w, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn line__wedge_dot__plane_at_origin(self_: Line, other: PlaneAtOrigin) -> Flector {
    return Flector(vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z), vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn line__wedge_dot__point(self_: Line, other: Point) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn line__wedge_dot__point_at_infinity(self_: Line, other: PointAtInfinity) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z));
}

fn line__wedge_dot__rotor(self_: Line, other: Rotor) -> Rotor {
    return Rotor(vec4<f32>(self_.g1.x) * other.g0.wzyx * vec4<f32>(1.0, 1.0, -1.0, -1.0) + vec4<f32>(self_.g1.y) * other.g0.zwxy * vec4<f32>(-1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g1.z) * other.g0.yxwz * vec4<f32>(1.0, -1.0, 1.0, -1.0));
}

fn line__wedge_dot__scalar(self_: Line, other: Scalar) -> Line {
    return Line(self_.g0 * vec3<f32>(other.g0), self_.g1 * vec3<f32>(other.g0));
}

fn line__wedge_dot__transflector(self_: Line, other: Transflector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g1.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, -other.g1.w, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, -other.g1.w, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z));
}

fn line__wedge_dot__translator(self_: Line, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + self_.g1 * vec3<f32>(other.g0.w), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(0.0));
}

fn line_at_infinity__wedge_dot__anti_scalar(self_: LineAtInfinity, other: AntiScalar) -> LineAtOrigin {
    return LineAtOrigin(self_.g0 * vec3<f32>(other.g0));
}

fn line_at_infinity__wedge_dot__flector(self_: LineAtInfinity, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, other.g0.w, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g0.w, -other.g0.z));
}

fn line_at_infinity__wedge_dot__flector_at_infinity(self_: LineAtInfinity, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * other.g0.wzyx * vec4<f32>(1.0, 1.0, -1.0, -1.0) + vec4<f32>(self_.g0.y) * other.g0.zwxy * vec4<f32>(-1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g0.z) * other.g0.yxwz * vec4<f32>(1.0, -1.0, 1.0, -1.0));
}

fn line_at_infinity__wedge_dot__horizon(self_: LineAtInfinity, other: Horizon) -> PointAtInfinity {
    return PointAtInfinity(self_.g0 * vec3<f32>(other.g0));
}

fn line_at_infinity__wedge_dot__line(self_: LineAtInfinity, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, other.g0.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, other.g0.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec4<f32>(0.0));
}

fn line_at_infinity__wedge_dot__line_at_infinity(self_: LineAtInfinity, other: LineAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn line_at_infinity__wedge_dot__line_at_origin(self_: LineAtInfinity, other: LineAtOrigin) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z));
}

fn line_at_infinity__wedge_dot__magnitude(self_: LineAtInfinity, other: Magnitude) -> Line {
    return Line(self_.g0 * vec3<f32>(other.g0.y), self_.g0 * vec3<f32>(other.g0.x));
}

fn line_at_infinity__wedge_dot__motor(self_: LineAtInfinity, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, other.g0.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, other.g0.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec4<f32>(0.0));
}

fn line_at_infinity__wedge_dot__multi_vector(self_: LineAtInfinity, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g3.x, other.g2.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g3.y, other.g2.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g3.z, other.g2.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g4.w, other.g1.z, -other.g1.y, -other.g4.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, other.g4.w, other.g1.x, -other.g4.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g4.w, -other.g4.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.y, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.y), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g3.z, other.g0.x, other.g3.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g0.x), vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, other.g4.z, -other.g4.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g4.z, other.g1.w, other.g4.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g4.y, -other.g4.x, other.g1.w, -other.g1.z));
}

fn line_at_infinity__wedge_dot__multi_vector_at_infinity(self_: LineAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g2.x, other.g1.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g2.y, other.g1.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g2.z, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x));
}

fn line_at_infinity__wedge_dot__multi_vector_at_origin(self_: LineAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g2.x, other.g1.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g2.y, other.g1.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g2.z, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x));
}

fn line_at_infinity__wedge_dot__origin(self_: LineAtInfinity, other: Origin) -> PlaneAtOrigin {
    return PlaneAtOrigin(self_.g0 * vec3<f32>(other.g0));
}

fn line_at_infinity__wedge_dot__plane(self_: LineAtInfinity, other: Plane) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn line_at_infinity__wedge_dot__plane_at_origin(self_: LineAtInfinity, other: PlaneAtOrigin) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn line_at_infinity__wedge_dot__point(self_: LineAtInfinity, other: Point) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn line_at_infinity__wedge_dot__point_at_infinity(self_: LineAtInfinity, other: PointAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z));
}

fn line_at_infinity__wedge_dot__rotor(self_: LineAtInfinity, other: Rotor) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * other.g0.wzyx * vec4<f32>(1.0, 1.0, -1.0, -1.0) + vec4<f32>(self_.g0.y) * other.g0.zwxy * vec4<f32>(-1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g0.z) * other.g0.yxwz * vec4<f32>(1.0, -1.0, 1.0, -1.0));
}

fn line_at_infinity__wedge_dot__scalar(self_: LineAtInfinity, other: Scalar) -> LineAtInfinity {
    return LineAtInfinity(self_.g0 * vec3<f32>(other.g0));
}

fn line_at_infinity__wedge_dot__transflector(self_: LineAtInfinity, other: Transflector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z));
}

fn line_at_infinity__wedge_dot__translator(self_: LineAtInfinity, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), self_.g0 * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(0.0));
}

fn line_at_origin__wedge_dot__flector(self_: LineAtOrigin, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g1.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, -other.g1.w, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, -other.g1.w, 0.0));
}

fn line_at_origin__wedge_dot__flector_at_infinity(self_: LineAtOrigin, other: FlectorAtInfinity) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g0.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, -other.g0.w, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, -other.g0.w, 0.0));
}

fn line_at_origin__wedge_dot__horizon(self_: LineAtOrigin, other: Horizon) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0));
}

fn line_at_origin__wedge_dot__line(self_: LineAtOrigin, other: Line) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g1.z));
}

fn line_at_origin__wedge_dot__line_at_infinity(self_: LineAtOrigin, other: LineAtInfinity) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z));
}

fn line_at_origin__wedge_dot__magnitude(self_: LineAtOrigin, other: Magnitude) -> LineAtOrigin {
    return LineAtOrigin(self_.g0 * vec3<f32>(other.g0.x));
}

fn line_at_origin__wedge_dot__motor(self_: LineAtOrigin, other: Motor) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g1.z));
}

fn line_at_origin__wedge_dot__multi_vector(self_: LineAtOrigin, other: MultiVector) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, -other.g3.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, -other.g3.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, -other.g3.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g3.z, other.g0.x, other.g3.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g4.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g4.w, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g4.w));
}

fn line_at_origin__wedge_dot__multi_vector_at_infinity(self_: LineAtOrigin, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, -other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, -other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, -other.g2.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.y, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g0.y, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.y));
}

fn line_at_origin__wedge_dot__plane(self_: LineAtOrigin, other: Plane) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0.w));
}

fn line_at_origin__wedge_dot__point(self_: LineAtOrigin, other: Point) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0));
}

fn line_at_origin__wedge_dot__point_at_infinity(self_: LineAtOrigin, other: PointAtInfinity) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0));
}

fn line_at_origin__wedge_dot__scalar(self_: LineAtOrigin, other: Scalar) -> LineAtOrigin {
    return LineAtOrigin(self_.g0 * vec3<f32>(other.g0));
}

fn line_at_origin__wedge_dot__transflector(self_: LineAtOrigin, other: Transflector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g1.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, -other.g1.w, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, -other.g1.w, 0.0));
}

fn line_at_origin__wedge_dot__translator(self_: LineAtOrigin, other: Translator) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z));
}

fn magnitude__wedge_dot__anti_scalar(self_: Magnitude, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0);
}

fn magnitude__wedge_dot__flector(self_: Magnitude, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * other.g0 + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.w), vec4<f32>(self_.g0.x) * other.g1 + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0));
}

fn magnitude__wedge_dot__flector_at_infinity(self_: Magnitude, other: FlectorAtInfinity) -> Flector {
    return Flector(vec4<f32>(self_.g0.x, self_.g0.x, self_.g0.x, self_.g0.y) * other.g0 * vec4<f32>(1.0, 1.0, 1.0, -1.0), vec4<f32>(self_.g0.y, self_.g0.y, self_.g0.y, self_.g0.x) * other.g0 * vec4<f32>(-1.0, -1.0, -1.0, 1.0));
}

fn magnitude__wedge_dot__horizon(self_: Magnitude, other: Horizon) -> Flector {
    return Flector(vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn magnitude__wedge_dot__line(self_: Magnitude, other: Line) -> Line {
    return Line(vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g0.y) * other.g1, vec3<f32>(self_.g0.x) * other.g1);
}

fn magnitude__wedge_dot__line_at_infinity(self_: Magnitude, other: LineAtInfinity) -> Line {
    return Line(vec3<f32>(self_.g0.y) * other.g0, vec3<f32>(self_.g0.x) * other.g0);
}

fn magnitude__wedge_dot__line_at_origin(self_: Magnitude, other: LineAtOrigin) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(self_.g0.x) * other.g0);
}

fn magnitude__wedge_dot__magnitude(self_: Magnitude, other: Magnitude) -> Magnitude {
    return Magnitude(vec2<f32>(self_.g0.x) * other.g0 + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.x));
}

fn magnitude__wedge_dot__motor(self_: Magnitude, other: Motor) -> Motor {
    return Motor(vec4<f32>(self_.g0.x) * other.g0 + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec3<f32>(self_.g0.x) * other.g1);
}

fn magnitude__wedge_dot__multi_vector(self_: Magnitude, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * other.g0 + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.x), vec4<f32>(self_.g0.x) * other.g1 + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g4.w), vec3<f32>(self_.g0.x) * other.g2 + vec3<f32>(self_.g0.y) * other.g3, vec3<f32>(self_.g0.x) * other.g3, vec4<f32>(self_.g0.x) * other.g4 + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0));
}

fn magnitude__wedge_dot__multi_vector_at_infinity(self_: Magnitude, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.x), vec4<f32>(self_.g0.x, self_.g0.x, self_.g0.x, self_.g0.y) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, -other.g0.y), vec3<f32>(self_.g0.y) * other.g2, vec3<f32>(self_.g0.x) * other.g2, vec4<f32>(self_.g0.y, self_.g0.y, self_.g0.y, self_.g0.x) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, other.g0.y));
}

fn magnitude__wedge_dot__multi_vector_at_origin(self_: Magnitude, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * other.g0, vec3<f32>(self_.g0.x) * other.g1, vec3<f32>(self_.g0.x) * other.g2);
}

fn magnitude__wedge_dot__origin(self_: Magnitude, other: Origin) -> Origin {
    return Origin(self_.g0.x * other.g0);
}

fn magnitude__wedge_dot__plane(self_: Magnitude, other: Plane) -> Flector {
    return Flector(vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w), vec4<f32>(self_.g0.x) * other.g0);
}

fn magnitude__wedge_dot__plane_at_origin(self_: Magnitude, other: PlaneAtOrigin) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x) * other.g0);
}

fn magnitude__wedge_dot__point(self_: Magnitude, other: Point) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * other.g0, vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0));
}

fn magnitude__wedge_dot__point_at_infinity(self_: Magnitude, other: PointAtInfinity) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * other.g0, vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0));
}

fn magnitude__wedge_dot__rotor(self_: Magnitude, other: Rotor) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * other.g0);
}

fn magnitude__wedge_dot__scalar(self_: Magnitude, other: Scalar) -> Magnitude {
    return Magnitude(self_.g0 * vec2<f32>(other.g0));
}

fn magnitude__wedge_dot__transflector(self_: Magnitude, other: Transflector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x, self_.g0.x, self_.g0.x, self_.g0.y) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g1.w), vec4<f32>(self_.g0.x) * other.g1 + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0));
}

fn magnitude__wedge_dot__translator(self_: Magnitude, other: Translator) -> Motor {
    return Motor(vec4<f32>(self_.g0.y, self_.g0.y, self_.g0.y, self_.g0.x) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn motor__wedge_dot__anti_scalar(self_: Motor, other: AntiScalar) -> LineAtOrigin {
    return LineAtOrigin(self_.g1 * vec3<f32>(other.g0));
}

fn motor__wedge_dot__flector(self_: Motor, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.w) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g1.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, -other.g1.w, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, -other.g1.w, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, other.g0.w, other.g1.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g0.w, -other.g0.z));
}

fn motor__wedge_dot__flector_at_infinity(self_: Motor, other: FlectorAtInfinity) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g0.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, -other.g0.w, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, -other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z));
}

fn motor__wedge_dot__horizon(self_: Motor, other: Horizon) -> Flector {
    return Flector(vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0) + vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, self_.g1.x) * vec4<f32>(other.g0, other.g0, other.g0, 0.0), self_.g0.xyzx * vec4<f32>(-other.g0, -other.g0, -other.g0, 0.0));
}

fn motor__wedge_dot__line(self_: Motor, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z) - vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, other.g0.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, other.g0.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g1.z, other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g0.w) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec4<f32>(0.0));
}

fn motor__wedge_dot__line_at_infinity(self_: Motor, other: LineAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(0.0));
}

fn motor__wedge_dot__line_at_origin(self_: Motor, other: LineAtOrigin) -> Rotor {
    return Rotor(vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z));
}

fn motor__wedge_dot__magnitude(self_: Motor, other: Magnitude) -> Motor {
    return Motor(self_.g0 * vec4<f32>(other.g0.x) + vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, self_.g1.x) * vec4<f32>(other.g0.y, other.g0.y, other.g0.y, 0.0), self_.g1 * vec3<f32>(other.g0.x));
}

fn motor__wedge_dot__motor(self_: Motor, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z) - vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, other.g0.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, other.g0.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g1.z, other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g0.w) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec4<f32>(0.0));
}

fn motor__wedge_dot__multi_vector(self_: Motor, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g3.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g3.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g3.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.x) - vec2<f32>(self_.g1.x) * vec2<f32>(other.g3.x, other.g2.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g3.y, other.g2.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g3.z, other.g2.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g4.w) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g4.w, other.g1.z, -other.g1.y, -other.g4.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, other.g4.w, other.g1.x, -other.g4.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g4.w, -other.g4.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g3.z, other.g0.x, other.g3.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g0.x) + vec3<f32>(self_.g0.w) * other.g3 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.y, other.g2.z, -other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g2.z, other.g0.y, other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.y), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g3.z, other.g0.x, other.g3.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g0.x), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g4.w, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, -other.g4.w, -other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, -other.g4.w, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.w, other.g4.z, -other.g4.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g4.z, other.g1.w, other.g4.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g4.y, -other.g4.x, other.g1.w, -other.g1.z));
}

fn motor__wedge_dot__multi_vector_at_infinity(self_: Motor, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g2.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g2.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.y, other.g1.z, -other.g1.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, other.g0.y, other.g1.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g0.y, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x) + vec3<f32>(self_.g0.w) * other.g2, vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g0.y, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, -other.g0.y, -other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, -other.g0.y, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.z));
}

fn motor__wedge_dot__multi_vector_at_origin(self_: Motor, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(0.0) - vec2<f32>(self_.g1.x) * vec2<f32>(other.g2.x, other.g1.x) - vec2<f32>(self_.g1.y) * vec2<f32>(other.g2.y, other.g1.y) - vec2<f32>(self_.g1.z) * vec2<f32>(other.g2.z, other.g1.z), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x));
}

fn motor__wedge_dot__origin(self_: Motor, other: Origin) -> PlaneAtOrigin {
    return PlaneAtOrigin(self_.g1 * vec3<f32>(other.g0));
}

fn motor__wedge_dot__plane(self_: Motor, other: Plane) -> Flector {
    return Flector(vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z), self_.g0.xyzx * vec4<f32>(-other.g0.w, -other.g0.w, -other.g0.w, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn motor__wedge_dot__plane_at_origin(self_: Motor, other: PlaneAtOrigin) -> Flector {
    return Flector(vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z), vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn motor__wedge_dot__point(self_: Motor, other: Point) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn motor__wedge_dot__point_at_infinity(self_: Motor, other: PointAtInfinity) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z));
}

fn motor__wedge_dot__rotor(self_: Motor, other: Rotor) -> Rotor {
    return Rotor(vec4<f32>(self_.g1.x) * other.g0.wzyx * vec4<f32>(1.0, 1.0, -1.0, -1.0) + vec4<f32>(self_.g1.y) * other.g0.zwxy * vec4<f32>(-1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g1.z) * other.g0.yxwz * vec4<f32>(1.0, -1.0, 1.0, -1.0));
}

fn motor__wedge_dot__scalar(self_: Motor, other: Scalar) -> Motor {
    return Motor(self_.g0 * vec4<f32>(other.g0), self_.g1 * vec3<f32>(other.g0));
}

fn motor__wedge_dot__transflector(self_: Motor, other: Transflector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.w) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g1.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, -other.g1.w, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, -other.g1.w, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z));
}

fn motor__wedge_dot__translator(self_: Motor, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + self_.g1 * vec3<f32>(other.g0.w), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(0.0));
}

fn multi_vector__wedge_dot__anti_scalar(self_: MultiVector, other: AntiScalar) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0) + vec2<f32>(self_.g4.w) * vec2<f32>(other.g0, 0.0), self_.g3 * vec3<f32>(other.g0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0));
}

fn multi_vector__wedge_dot__flector(self_: MultiVector, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, other.g1.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g1.w) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, -other.g0.z) - vec2<f32>(self_.g4.w) * vec2<f32>(other.g1.w, other.g0.w), vec4<f32>(self_.g0.x) * other.g0 + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.w) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g3.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g3.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g3.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z), vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, -other.g0.w, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g4.x) * vec3<f32>(other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g0.z, other.g1.w, other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g1.w) - vec3<f32>(self_.g4.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(self_.g1.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w) - vec3<f32>(self_.g4.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g0.x) * other.g1 + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(-other.g1.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g0.z, -other.g1.w, -other.g0.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g0.y, other.g0.x, -other.g1.w, 0.0) + vec4<f32>(self_.g3.x) * vec4<f32>(other.g0.w, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g3.y) * vec4<f32>(-other.g1.z, other.g0.w, other.g1.x, -other.g0.y) + vec4<f32>(self_.g3.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g0.w, -other.g0.z));
}

fn multi_vector__wedge_dot__flector_at_infinity(self_: MultiVector, other: FlectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z, self_.g1.w) * vec2<f32>(other.g0.z, other.g0.w) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g0.y) - vec2<f32>(self_.g4.w, self_.g4.z) * vec2<f32>(other.g0.w, other.g0.z), vec4<f32>(self_.g0.x, self_.g0.x, self_.g0.x, self_.g0.y) * other.g0 * vec4<f32>(1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g3.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g3.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, 0.0) + vec4<f32>(self_.g3.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, 0.0), vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g4.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w) - vec3<f32>(self_.g4.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g0.y, self_.g0.y, self_.g0.y, self_.g0.x) * other.g0 * vec4<f32>(-1.0, -1.0, -1.0, 1.0) + vec4<f32>(self_.g2.x) * vec4<f32>(-other.g0.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g0.z, -other.g0.w, -other.g0.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g0.y, other.g0.x, -other.g0.w, 0.0) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g3.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g3.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z));
}

fn multi_vector__wedge_dot__horizon(self_: MultiVector, other: Horizon) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g0) + vec2<f32>(self_.g4.w) * vec2<f32>(-other.g0, 0.0), vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0) + vec4<f32>(self_.g3.x, self_.g3.y, self_.g3.z, self_.g3.x) * vec4<f32>(other.g0, other.g0, other.g0, 0.0), vec3<f32>(self_.g4.x, self_.g4.y, self_.g4.z) * vec3<f32>(other.g0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0) + vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, self_.g2.x) * vec4<f32>(-other.g0, -other.g0, -other.g0, 0.0));
}

fn multi_vector__wedge_dot__line(self_: MultiVector, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g1.z) - vec2<f32>(self_.g3.x) * vec2<f32>(other.g1.x, other.g0.x) - vec2<f32>(self_.g3.y) * vec2<f32>(other.g1.y, other.g0.y) - vec2<f32>(self_.g3.z) * vec2<f32>(other.g1.z, other.g0.z), vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g4.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + self_.g4.wwwz * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, -other.g1.z), vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g0.y) * other.g1 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g3.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.x) * other.g1 + vec3<f32>(self_.g3.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, 0.0) + vec4<f32>(self_.g4.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, 0.0) + vec4<f32>(self_.g4.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g4.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn multi_vector__wedge_dot__line_at_infinity(self_: MultiVector, other: LineAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g4.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g4.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z), vec3<f32>(self_.g0.y) * other.g0 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g3.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g1.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g4.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g4.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn multi_vector__wedge_dot__line_at_origin(self_: MultiVector, other: LineAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g3.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g3.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g3.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g3.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g4.w) * other.g0);
}

fn multi_vector__wedge_dot__magnitude(self_: MultiVector, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * other.g0 + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.x), self_.g1 * vec4<f32>(other.g0.x) + vec4<f32>(self_.g4.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y), self_.g2 * vec3<f32>(other.g0.x) + self_.g3 * vec3<f32>(other.g0.y), self_.g3 * vec3<f32>(other.g0.x), self_.g1.xyzx * vec4<f32>(other.g0.y, other.g0.y, other.g0.y, 0.0) + self_.g4 * vec4<f32>(other.g0.x));
}

fn multi_vector__wedge_dot__motor(self_: MultiVector, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g1.z) - vec2<f32>(self_.g3.x) * vec2<f32>(other.g1.x, other.g0.x) - vec2<f32>(self_.g3.y) * vec2<f32>(other.g1.y, other.g0.y) - vec2<f32>(self_.g3.z) * vec2<f32>(other.g1.z, other.g0.z), vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g4.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + vec4<f32>(self_.g4.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.z) + vec4<f32>(self_.g4.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g0.y) * other.g1 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + vec3<f32>(self_.g3.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(self_.g0.x) * other.g1 + vec3<f32>(self_.g3.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, -other.g1.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, 0.0) + vec4<f32>(self_.g4.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, 0.0) + vec4<f32>(self_.g4.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g4.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn multi_vector__wedge_dot__multi_vector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * other.g0 + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, other.g4.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, other.g4.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g1.z, other.g4.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g4.w) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g3.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g3.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g3.z) - vec2<f32>(self_.g3.x) * vec2<f32>(other.g3.x, other.g2.x) - vec2<f32>(self_.g3.y) * vec2<f32>(other.g3.y, other.g2.y) - vec2<f32>(self_.g3.z) * vec2<f32>(other.g3.z, other.g2.z) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, -other.g1.z) - vec2<f32>(self_.g4.w) * vec2<f32>(other.g4.w, other.g1.w), vec4<f32>(self_.g0.x) * other.g1 + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g4.w) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.x, other.g3.z, -other.g3.y, -other.g2.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g3.z, other.g0.x, other.g3.x, -other.g2.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g3.y, -other.g3.x, other.g0.x, -other.g2.z) + vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, 0.0, other.g1.z) + vec4<f32>(self_.g3.x) * vec4<f32>(other.g4.w, other.g1.z, -other.g1.y, -other.g4.x) + vec4<f32>(self_.g3.y) * vec4<f32>(-other.g1.z, other.g4.w, other.g1.x, -other.g4.y) + vec4<f32>(self_.g3.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g4.w, -other.g4.z) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g3.x) + vec4<f32>(self_.g4.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g3.y) + vec4<f32>(self_.g4.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g3.z) + vec4<f32>(self_.g4.w) * vec4<f32>(other.g3.x, other.g3.y, other.g3.z, other.g0.y), vec3<f32>(self_.g0.x) * other.g2 + vec3<f32>(self_.g0.y) * other.g3 + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g1.w, -other.g4.z, other.g4.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g4.z, -other.g1.w, -other.g4.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g4.y, other.g4.x, -other.g1.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g3.z, other.g0.x, other.g3.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g0.x) + vec3<f32>(self_.g3.x) * vec3<f32>(other.g0.y, other.g2.z, -other.g2.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g2.z, other.g0.y, other.g2.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.y) + vec3<f32>(self_.g4.x) * vec3<f32>(other.g4.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g1.z, other.g4.w, other.g1.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g4.w) - vec3<f32>(self_.g4.w) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z), vec3<f32>(self_.g0.x) * other.g3 + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g4.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, -other.g4.w, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g4.w) + vec3<f32>(self_.g3.x) * vec3<f32>(other.g0.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g3.z, other.g0.x, other.g3.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g0.x) - vec3<f32>(self_.g4.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(self_.g0.x) * other.g4 + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.y, other.g2.z, -other.g2.y, -other.g3.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g2.z, other.g0.y, other.g2.x, -other.g3.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g2.y, -other.g2.x, other.g0.y, -other.g3.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g3.x, other.g3.y, other.g3.z, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(-other.g4.w, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g1.z, -other.g4.w, -other.g1.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g1.y, other.g1.x, -other.g4.w, 0.0) + vec4<f32>(self_.g3.x) * vec4<f32>(other.g1.w, other.g4.z, -other.g4.y, -other.g1.x) + vec4<f32>(self_.g3.y) * vec4<f32>(-other.g4.z, other.g1.w, other.g4.x, -other.g1.y) + vec4<f32>(self_.g3.z) * vec4<f32>(other.g4.y, -other.g4.x, other.g1.w, -other.g1.z) + vec4<f32>(self_.g4.x) * vec4<f32>(other.g0.x, other.g3.z, -other.g3.y, 0.0) + vec4<f32>(self_.g4.y) * vec4<f32>(-other.g3.z, other.g0.x, other.g3.x, 0.0) + vec4<f32>(self_.g4.z) * vec4<f32>(other.g3.y, -other.g3.x, other.g0.x, 0.0) + vec4<f32>(self_.g4.w) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, other.g0.x));
}

fn multi_vector__wedge_dot__multi_vector_at_infinity(self_: MultiVector, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.x) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g1.z, self_.g1.w) * vec2<f32>(other.g1.z, other.g0.y) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g2.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g2.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g2.z) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g2.z, 0.0) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g1.y) - vec2<f32>(self_.g4.w, self_.g4.z) * vec2<f32>(other.g0.y, other.g1.z), vec4<f32>(self_.g0.x, self_.g0.x, self_.g0.x, self_.g0.y) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, -other.g0.y) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.x, other.g2.z, -other.g2.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g2.z, other.g0.x, other.g2.x, 0.0) + self_.g1.zzzw * vec4<f32>(other.g2.y, -other.g2.x, other.g0.x, other.g0.x) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, 0.0, other.g1.z) + vec4<f32>(self_.g3.x) * vec4<f32>(other.g0.y, other.g1.z, -other.g1.y, 0.0) + vec4<f32>(self_.g3.y) * vec4<f32>(-other.g1.z, other.g0.y, other.g1.x, 0.0) + vec4<f32>(self_.g3.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g0.y, 0.0) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g4.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + self_.g4.wwwz * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, -other.g2.z), vec3<f32>(self_.g0.y) * other.g2 + vec3<f32>(self_.g1.w) * other.g1 + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x) + vec3<f32>(self_.g4.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y), vec3<f32>(self_.g0.x) * other.g2 + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.y, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, -other.g0.y, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.y) + vec3<f32>(self_.g3.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x) - vec3<f32>(self_.g4.w) * other.g1, vec4<f32>(self_.g0.y, self_.g0.y, self_.g0.y, self_.g0.x) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, other.g0.y) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + self_.g1.wwwz * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, -other.g2.z) + vec4<f32>(self_.g2.x) * vec4<f32>(-other.g0.y, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g1.z, -other.g0.y, -other.g1.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g1.y, other.g1.x, -other.g0.y, 0.0) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g3.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + vec4<f32>(self_.g3.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.z) + vec4<f32>(self_.g4.x) * vec4<f32>(other.g0.x, other.g2.z, -other.g2.y, 0.0) + vec4<f32>(self_.g4.y) * vec4<f32>(-other.g2.z, other.g0.x, other.g2.x, 0.0) + self_.g4.zzzw * vec4<f32>(other.g2.y, -other.g2.x, other.g0.x, other.g0.x));
}

fn multi_vector__wedge_dot__multi_vector_at_origin(self_: MultiVector, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * other.g0 + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g1.x, other.g2.x) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g1.y, other.g2.y) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g1.z, other.g2.z) - vec2<f32>(self_.g3.x) * vec2<f32>(other.g2.x, other.g1.x) - vec2<f32>(self_.g3.y) * vec2<f32>(other.g2.y, other.g1.y) - vec2<f32>(self_.g3.z) * vec2<f32>(other.g2.z, other.g1.z) + vec2<f32>(self_.g4.w) * other.g0.yx * vec2<f32>(1.0, -1.0), vec3<f32>(self_.g0.x) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.x, -other.g2.z, other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g2.z, -other.g0.x, -other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g2.y, other.g2.x, -other.g0.x) + vec3<f32>(self_.g3.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y) - vec3<f32>(self_.g4.w) * other.g2, vec3<f32>(self_.g0.x) * other.g2 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y) + vec3<f32>(self_.g3.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x) + vec3<f32>(self_.g4.w) * other.g1);
}

fn multi_vector__wedge_dot__origin(self_: MultiVector, other: Origin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0, 0.0) + vec2<f32>(self_.g4.w) * vec2<f32>(0.0, -other.g0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0), self_.g3 * vec3<f32>(other.g0));
}

fn multi_vector__wedge_dot__plane(self_: MultiVector, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g4.w) * vec2<f32>(-other.g0.w, 0.0), vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w) + vec4<f32>(self_.g3.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g3.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g3.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + vec3<f32>(self_.g4.x, self_.g4.y, self_.g4.z) * vec3<f32>(other.g0.w) - vec3<f32>(self_.g4.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.w), vec4<f32>(self_.g0.x) * other.g0 + vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, self_.g2.x) * vec4<f32>(-other.g0.w, -other.g0.w, -other.g0.w, 0.0) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g3.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g3.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn multi_vector__wedge_dot__plane_at_origin(self_: MultiVector, other: PlaneAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - vec3<f32>(self_.g4.w) * other.g0, vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g3.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn multi_vector__wedge_dot__point(self_: MultiVector, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g4.w) * vec2<f32>(0.0, -other.g0.w), vec4<f32>(self_.g0.x) * other.g0 + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g3.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g3.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g4.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - vec3<f32>(self_.g4.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g3.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g3.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g3.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn multi_vector__wedge_dot__point_at_infinity(self_: MultiVector, other: PointAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g3.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g3.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0), vec3<f32>(self_.g1.w) * other.g0 + vec3<f32>(self_.g4.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - vec3<f32>(self_.g4.w) * other.g0, vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g3.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g3.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z));
}

fn multi_vector__wedge_dot__rotor(self_: MultiVector, other: Rotor) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g3.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g3.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g3.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g4.w) * vec2<f32>(other.g0.w, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g3.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w) + vec3<f32>(self_.g4.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn multi_vector__wedge_dot__scalar(self_: MultiVector, other: Scalar) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0), self_.g1 * vec4<f32>(other.g0), self_.g2 * vec3<f32>(other.g0), self_.g3 * vec3<f32>(other.g0), self_.g4 * vec4<f32>(other.g0));
}

fn multi_vector__wedge_dot__transflector(self_: MultiVector, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, other.g1.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g1.w) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g0.y) - vec2<f32>(self_.g4.w, self_.g4.z) * vec2<f32>(other.g1.w, other.g0.z), vec4<f32>(self_.g0.x, self_.g0.x, self_.g0.x, self_.g0.y) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g1.w) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g3.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g3.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g3.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g1.w) * other.g0 + vec3<f32>(self_.g4.x) * vec3<f32>(other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g0.z, other.g1.w, other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g1.w) - vec3<f32>(self_.g4.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(self_.g1.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w) - vec3<f32>(self_.g4.w) * other.g0, vec4<f32>(self_.g0.x) * other.g1 + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(-other.g1.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g0.z, -other.g1.w, -other.g0.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g0.y, other.g0.x, -other.g1.w, 0.0) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g3.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g3.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z));
}

fn multi_vector__wedge_dot__translator(self_: MultiVector, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g4.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g4.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g4.w) * other.g0, vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + self_.g3 * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g3.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g3.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g3.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g4.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g4.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn multi_vector_at_infinity__wedge_dot__anti_scalar(self_: MultiVectorAtInfinity, other: AntiScalar) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0.yx * vec2<f32>(other.g0), self_.g2 * vec3<f32>(other.g0), self_.g1 * vec3<f32>(other.g0));
}

fn multi_vector_at_infinity__wedge_dot__flector(self_: MultiVectorAtInfinity, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.w, other.g0.w) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, other.g1.z), vec4<f32>(self_.g0.x) * other.g0 + vec4<f32>(self_.g2.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, -other.g0.w, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.w), vec3<f32>(0.0) - vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w), vec4<f32>(self_.g0.x) * other.g1 + vec4<f32>(self_.g2.x) * vec4<f32>(other.g0.w, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g1.z, other.g0.w, other.g1.x, -other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g0.w, -other.g0.z));
}

fn multi_vector_at_infinity__wedge_dot__flector_at_infinity(self_: MultiVectorAtInfinity, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0.yx * vec2<f32>(-other.g0.w) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(0.0) - vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w));
}

fn multi_vector_at_infinity__wedge_dot__horizon(self_: MultiVectorAtInfinity, other: Horizon) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0.yx * vec2<f32>(-other.g0), self_.g2 * vec3<f32>(other.g0), vec3<f32>(0.0) - self_.g1 * vec3<f32>(other.g0));
}

fn multi_vector_at_infinity__wedge_dot__line(self_: MultiVectorAtInfinity, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g2.x) * vec2<f32>(other.g1.x, other.g0.x) - vec2<f32>(self_.g2.y) * vec2<f32>(other.g1.y, other.g0.y) - vec2<f32>(self_.g2.z) * vec2<f32>(other.g1.z, other.g0.z), vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z), vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.x) * other.g1 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z));
}

fn multi_vector_at_infinity__wedge_dot__line_at_infinity(self_: MultiVectorAtInfinity, other: LineAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(self_.g0.y) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn multi_vector_at_infinity__wedge_dot__line_at_origin(self_: MultiVectorAtInfinity, other: LineAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.y) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn multi_vector_at_infinity__wedge_dot__magnitude(self_: MultiVectorAtInfinity, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * other.g0, vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, self_.g1.x) * vec4<f32>(other.g0.x, other.g0.x, other.g0.x, 0.0), self_.g2 * vec3<f32>(other.g0.y), self_.g2 * vec3<f32>(other.g0.x), vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, self_.g1.x) * vec4<f32>(other.g0.y, other.g0.y, other.g0.y, 0.0));
}

fn multi_vector_at_infinity__wedge_dot__motor(self_: MultiVectorAtInfinity, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.w) - vec2<f32>(self_.g2.x) * vec2<f32>(other.g1.x, other.g0.x) - vec2<f32>(self_.g2.y) * vec2<f32>(other.g1.y, other.g0.y) - vec2<f32>(self_.g2.z) * vec2<f32>(other.g1.z, other.g0.z), vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, other.g0.w) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(self_.g0.x) * other.g1 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, -other.g1.z));
}

fn multi_vector_at_infinity__wedge_dot__multi_vector(self_: MultiVectorAtInfinity, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * other.g0 - vec2<f32>(self_.g0.y) * vec2<f32>(other.g4.w, other.g1.w) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, other.g4.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, other.g4.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g1.z, other.g4.z) - vec2<f32>(self_.g2.x) * vec2<f32>(other.g3.x, other.g2.x) - vec2<f32>(self_.g2.y) * vec2<f32>(other.g3.y, other.g2.y) - vec2<f32>(self_.g2.z) * vec2<f32>(other.g3.z, other.g2.z), vec4<f32>(self_.g0.x) * other.g1 + vec4<f32>(self_.g0.y) * vec4<f32>(other.g3.x, other.g3.y, other.g3.z, other.g0.y) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.x, other.g3.z, -other.g3.y, -other.g2.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g3.z, other.g0.x, other.g3.x, -other.g2.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g3.y, -other.g3.x, other.g0.x, -other.g2.z) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g4.w, other.g1.z, -other.g1.y, -other.g4.x) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g1.z, other.g4.w, other.g1.x, -other.g4.y) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g4.w, -other.g4.z), vec3<f32>(self_.g0.x) * other.g2 - vec3<f32>(self_.g0.y) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g1.w, -other.g4.z, other.g4.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g4.z, -other.g1.w, -other.g4.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g4.y, other.g4.x, -other.g1.w) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.y, other.g2.z, -other.g2.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g2.z, other.g0.y, other.g2.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.y), vec3<f32>(self_.g0.x) * other.g3 - vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g4.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, -other.g4.w, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g4.w) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g3.z, other.g0.x, other.g3.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g0.x), vec4<f32>(self_.g0.x) * other.g4 + vec4<f32>(self_.g0.y) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, other.g0.x) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.y, other.g2.z, -other.g2.y, -other.g3.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g2.z, other.g0.y, other.g2.x, -other.g3.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g2.y, -other.g2.x, other.g0.y, -other.g3.z) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g1.w, other.g4.z, -other.g4.y, -other.g1.x) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g4.z, other.g1.w, other.g4.x, -other.g1.y) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g4.y, -other.g4.x, other.g1.w, -other.g1.z));
}

fn multi_vector_at_infinity__wedge_dot__multi_vector_at_infinity(self_: MultiVectorAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * other.g0 + vec2<f32>(self_.g0.y) * other.g0.yx * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, -other.g2.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, -other.g2.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g1.z, -other.g2.z) - vec2<f32>(self_.g2.x) * vec2<f32>(other.g2.x, other.g1.x) - vec2<f32>(self_.g2.y) * vec2<f32>(other.g2.y, other.g1.y) - vec2<f32>(self_.g2.z) * vec2<f32>(other.g2.z, other.g1.z), vec3<f32>(self_.g0.x) * other.g1 + vec3<f32>(self_.g0.y) * other.g2 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y), vec3<f32>(self_.g0.x) * other.g2 - vec3<f32>(self_.g0.y) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.y, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, -other.g0.y, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.y) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x));
}

fn multi_vector_at_infinity__wedge_dot__multi_vector_at_origin(self_: MultiVectorAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * other.g0 + vec2<f32>(self_.g0.y) * other.g0.yx * vec2<f32>(1.0, -1.0) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g1.x, other.g2.x) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g1.y, other.g2.y) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g1.z, other.g2.z) - vec2<f32>(self_.g2.x) * vec2<f32>(other.g2.x, other.g1.x) - vec2<f32>(self_.g2.y) * vec2<f32>(other.g2.y, other.g1.y) - vec2<f32>(self_.g2.z) * vec2<f32>(other.g2.z, other.g1.z), vec3<f32>(self_.g0.x) * other.g1 - vec3<f32>(self_.g0.y) * other.g2 + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.x, -other.g2.z, other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g2.z, -other.g0.x, -other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g2.y, other.g2.x, -other.g0.x) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y), vec3<f32>(self_.g0.x) * other.g2 + vec3<f32>(self_.g0.y) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x));
}

fn multi_vector_at_infinity__wedge_dot__origin(self_: MultiVectorAtInfinity, other: Origin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0 * vec2<f32>(other.g0), vec3<f32>(0.0) - self_.g1 * vec3<f32>(other.g0), self_.g2 * vec3<f32>(other.g0));
}

fn multi_vector_at_infinity__wedge_dot__plane(self_: MultiVectorAtInfinity, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.w, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z), vec4<f32>(self_.g2.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(0.0) - self_.g1 * vec3<f32>(other.g0.w), vec4<f32>(self_.g0.x) * other.g0 + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn multi_vector_at_infinity__wedge_dot__plane_at_origin(self_: MultiVectorAtInfinity, other: PlaneAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.y) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn multi_vector_at_infinity__wedge_dot__point(self_: MultiVectorAtInfinity, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.w) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0), vec4<f32>(self_.g0.x) * other.g0 + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0), vec3<f32>(0.0) - self_.g1 * vec3<f32>(other.g0.w), vec3<f32>(0.0) - vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g2.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn multi_vector_at_infinity__wedge_dot__point_at_infinity(self_: MultiVectorAtInfinity, other: PointAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.y) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn multi_vector_at_infinity__wedge_dot__rotor(self_: MultiVectorAtInfinity, other: Rotor) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0.yx * vec2<f32>(other.g0.w) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w));
}

fn multi_vector_at_infinity__wedge_dot__scalar(self_: MultiVectorAtInfinity, other: Scalar) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0 * vec2<f32>(other.g0), self_.g1 * vec3<f32>(other.g0), self_.g2 * vec3<f32>(other.g0));
}

fn multi_vector_at_infinity__wedge_dot__transflector(self_: MultiVectorAtInfinity, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.w, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.y) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w), vec4<f32>(self_.g0.x) * other.g1 + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z));
}

fn multi_vector_at_infinity__wedge_dot__translator(self_: MultiVectorAtInfinity, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(self_.g0.y) * other.g0 + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0), self_.g2 * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn multi_vector_at_origin__wedge_dot__flector(self_: MultiVectorAtOrigin, other: Flector) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0.yx * vec2<f32>(-other.g1.w) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, other.g1.w, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g1.w), vec3<f32>(0.0) - vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w));
}

fn multi_vector_at_origin__wedge_dot__flector_at_infinity(self_: MultiVectorAtOrigin, other: FlectorAtInfinity) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0.yx * vec2<f32>(-other.g0.w) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(0.0) - vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w));
}

fn multi_vector_at_origin__wedge_dot__horizon(self_: MultiVectorAtOrigin, other: Horizon) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0.yx * vec2<f32>(-other.g0), self_.g2 * vec3<f32>(other.g0), vec3<f32>(0.0) - self_.g1 * vec3<f32>(other.g0));
}

fn multi_vector_at_origin__wedge_dot__line(self_: MultiVectorAtOrigin, other: Line) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g1.z, 0.0), vec3<f32>(self_.g0.y) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec3<f32>(self_.g0.x) * other.g1 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0));
}

fn multi_vector_at_origin__wedge_dot__line_at_infinity(self_: MultiVectorAtOrigin, other: LineAtInfinity) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(self_.g0.y) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn multi_vector_at_origin__wedge_dot__magnitude(self_: MultiVectorAtOrigin, other: Magnitude) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0 * vec2<f32>(other.g0.x), self_.g1 * vec3<f32>(other.g0.x), self_.g2 * vec3<f32>(other.g0.x));
}

fn multi_vector_at_origin__wedge_dot__motor(self_: MultiVectorAtOrigin, other: Motor) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g1.z, 0.0), vec3<f32>(self_.g0.y) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec3<f32>(self_.g0.x) * other.g1 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0));
}

fn multi_vector_at_origin__wedge_dot__multi_vector(self_: MultiVectorAtOrigin, other: MultiVector) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, other.g4.w) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g4.w, other.g0.x) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, -other.g3.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, -other.g3.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g1.z, -other.g3.z) - vec2<f32>(self_.g2.x) * vec2<f32>(other.g3.x, other.g1.x) - vec2<f32>(self_.g2.y) * vec2<f32>(other.g3.y, other.g1.y) - vec2<f32>(self_.g2.z) * vec2<f32>(other.g3.z, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g0.y) * other.g3 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g3.z, other.g0.x, other.g3.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g0.x) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g4.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g1.z, other.g4.w, other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g4.w), vec3<f32>(self_.g0.x) * other.g3 - vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g4.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, -other.g4.w, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g4.w) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g3.z, other.g0.x, other.g3.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g0.x));
}

fn multi_vector_at_origin__wedge_dot__multi_vector_at_infinity(self_: MultiVectorAtOrigin, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * other.g0 + vec2<f32>(self_.g0.y) * other.g0.yx * vec2<f32>(-1.0, 1.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, -other.g2.x) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, -other.g2.y) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g1.z, -other.g2.z) - vec2<f32>(self_.g2.x) * vec2<f32>(other.g2.x, other.g1.x) - vec2<f32>(self_.g2.y) * vec2<f32>(other.g2.y, other.g1.y) - vec2<f32>(self_.g2.z) * vec2<f32>(other.g2.z, other.g1.z), vec3<f32>(self_.g0.x) * other.g1 + vec3<f32>(self_.g0.y) * other.g2 + vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y), vec3<f32>(self_.g0.x) * other.g2 - vec3<f32>(self_.g0.y) * other.g1 + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g0.y, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, -other.g0.y, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.y) + vec3<f32>(self_.g2.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x));
}

fn multi_vector_at_origin__wedge_dot__plane(self_: MultiVectorAtOrigin, other: Plane) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0.yx * vec2<f32>(-other.g0.w), self_.g2 * vec3<f32>(other.g0.w), vec3<f32>(0.0) - self_.g1 * vec3<f32>(other.g0.w));
}

fn multi_vector_at_origin__wedge_dot__point(self_: MultiVectorAtOrigin, other: Point) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn multi_vector_at_origin__wedge_dot__point_at_infinity(self_: MultiVectorAtOrigin, other: PointAtInfinity) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.y) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn multi_vector_at_origin__wedge_dot__scalar(self_: MultiVectorAtOrigin, other: Scalar) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0 * vec2<f32>(other.g0), self_.g1 * vec3<f32>(other.g0), self_.g2 * vec3<f32>(other.g0));
}

fn multi_vector_at_origin__wedge_dot__transflector(self_: MultiVectorAtOrigin, other: Transflector) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0.yx * vec2<f32>(-other.g1.w) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * other.g0 + vec3<f32>(self_.g2.x) * vec3<f32>(other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, other.g1.w, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g1.w), vec3<f32>(0.0) - vec3<f32>(self_.g0.y) * other.g0 + vec3<f32>(self_.g1.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w));
}

fn multi_vector_at_origin__wedge_dot__translator(self_: MultiVectorAtOrigin, other: Translator) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn origin__wedge_dot__flector(self_: Origin, other: Flector) -> Rotor {
    return Rotor(vec4<f32>(self_.g0) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, other.g1.w));
}

fn origin__wedge_dot__flector_at_infinity(self_: Origin, other: FlectorAtInfinity) -> Rotor {
    return Rotor(vec4<f32>(self_.g0) * other.g0);
}

fn origin__wedge_dot__horizon(self_: Origin, other: Horizon) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0);
}

fn origin__wedge_dot__line(self_: Origin, other: Line) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0) * other.g1);
}

fn origin__wedge_dot__line_at_infinity(self_: Origin, other: LineAtInfinity) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0) * other.g0);
}

fn origin__wedge_dot__magnitude(self_: Origin, other: Magnitude) -> Origin {
    return Origin(self_.g0 * other.g0.x);
}

fn origin__wedge_dot__motor(self_: Origin, other: Motor) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0) * other.g1);
}

fn origin__wedge_dot__multi_vector(self_: Origin, other: MultiVector) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0) * vec2<f32>(other.g0.x, other.g4.w), vec3<f32>(self_.g0) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(self_.g0) * other.g3);
}

fn origin__wedge_dot__multi_vector_at_infinity(self_: Origin, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1, vec3<f32>(self_.g0) * other.g2);
}

fn origin__wedge_dot__plane(self_: Origin, other: Plane) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0.w);
}

fn origin__wedge_dot__point(self_: Origin, other: Point) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(self_.g0) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn origin__wedge_dot__point_at_infinity(self_: Origin, other: PointAtInfinity) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(self_.g0) * other.g0);
}

fn origin__wedge_dot__scalar(self_: Origin, other: Scalar) -> Origin {
    return Origin(self_.g0 * other.g0);
}

fn origin__wedge_dot__transflector(self_: Origin, other: Transflector) -> Rotor {
    return Rotor(vec4<f32>(self_.g0) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, other.g1.w));
}

fn origin__wedge_dot__translator(self_: Origin, other: Translator) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn plane__wedge_dot__anti_scalar(self_: Plane, other: AntiScalar) -> Origin {
    return Origin(self_.g0.w * other.g0);
}

fn plane__wedge_dot__flector(self_: Plane, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g0.z) - vec2<f32>(self_.g0.w) * vec2<f32>(other.g1.w, other.g0.w), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g1.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g1.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn plane__wedge_dot__flector_at_infinity(self_: Plane, other: FlectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) - vec2<f32>(self_.g0.w, self_.g0.z) * vec2<f32>(other.g0.w, other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn plane__wedge_dot__horizon(self_: Plane, other: Horizon) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(-other.g0, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn plane__wedge_dot__line(self_: Plane, other: Line) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + self_.g0.wwwz * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, -other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn plane__wedge_dot__line_at_infinity(self_: Plane, other: LineAtInfinity) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g0.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn plane__wedge_dot__line_at_origin(self_: Plane, other: LineAtOrigin) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.w) * other.g0);
}

fn plane__wedge_dot__magnitude(self_: Plane, other: Magnitude) -> Flector {
    return Flector(vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y), self_.g0 * vec4<f32>(other.g0.x));
}

fn plane__wedge_dot__motor(self_: Plane, other: Motor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, other.g0.w), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn plane__wedge_dot__multi_vector(self_: Plane, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z) - vec2<f32>(self_.g0.w) * vec2<f32>(other.g4.w, other.g1.w), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g3.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g3.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g3.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g3.x, other.g3.y, other.g3.z, other.g0.y), vec3<f32>(self_.g0.x) * vec3<f32>(other.g4.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g4.w, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g4.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g3.z, -other.g3.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g3.z, other.g0.x, other.g3.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g3.y, -other.g3.x, other.g0.x, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, other.g0.x));
}

fn plane__wedge_dot__multi_vector_at_infinity(self_: Plane, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) - vec2<f32>(self_.g0.w, self_.g0.z) * vec2<f32>(other.g0.y, other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + self_.g0.wwwz * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, -other.g2.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * other.g1, vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g2.z, -other.g2.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.z, other.g0.x, other.g2.x, 0.0) + self_.g0.zzzw * vec4<f32>(other.g2.y, -other.g2.x, other.g0.x, other.g0.x));
}

fn plane__wedge_dot__multi_vector_at_origin(self_: Plane, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.w) * other.g0.yx * vec2<f32>(1.0, -1.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * other.g2, vec3<f32>(self_.g0.w) * other.g1);
}

fn plane__wedge_dot__origin(self_: Plane, other: Origin) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.w * other.g0);
}

fn plane__wedge_dot__plane(self_: Plane, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(-other.g0.w, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn plane__wedge_dot__plane_at_origin(self_: Plane, other: PlaneAtOrigin) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * other.g0);
}

fn plane__wedge_dot__point(self_: Plane, other: Point) -> Motor {
    return Motor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn plane__wedge_dot__point_at_infinity(self_: Plane, other: PointAtInfinity) -> Motor {
    return Motor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * other.g0);
}

fn plane__wedge_dot__rotor(self_: Plane, other: Rotor) -> Flector {
    return Flector(vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w), vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn plane__wedge_dot__scalar(self_: Plane, other: Scalar) -> Plane {
    return Plane(self_.g0 * vec4<f32>(other.g0));
}

fn plane__wedge_dot__transflector(self_: Plane, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.y) - vec2<f32>(self_.g0.w, self_.g0.z) * vec2<f32>(other.g1.w, other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g1.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g1.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.w) * other.g0, vec4<f32>(0.0));
}

fn plane__wedge_dot__translator(self_: Plane, other: Translator) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g0.w) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn plane_at_origin__wedge_dot__flector(self_: PlaneAtOrigin, other: Flector) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g0.z));
}

fn plane_at_origin__wedge_dot__flector_at_infinity(self_: PlaneAtOrigin, other: FlectorAtInfinity) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * other.g0.wzyx * vec4<f32>(1.0, 1.0, -1.0, -1.0) + vec4<f32>(self_.g0.y) * other.g0.zwxy * vec4<f32>(-1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g0.z) * other.g0.yxwz * vec4<f32>(1.0, -1.0, 1.0, -1.0));
}

fn plane_at_origin__wedge_dot__horizon(self_: PlaneAtOrigin, other: Horizon) -> LineAtOrigin {
    return LineAtOrigin(self_.g0 * vec3<f32>(other.g0));
}

fn plane_at_origin__wedge_dot__line(self_: PlaneAtOrigin, other: Line) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, 0.0));
}

fn plane_at_origin__wedge_dot__line_at_infinity(self_: PlaneAtOrigin, other: LineAtInfinity) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn plane_at_origin__wedge_dot__magnitude(self_: PlaneAtOrigin, other: Magnitude) -> PlaneAtOrigin {
    return PlaneAtOrigin(self_.g0 * vec3<f32>(other.g0.x));
}

fn plane_at_origin__wedge_dot__motor(self_: PlaneAtOrigin, other: Motor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, 0.0));
}

fn plane_at_origin__wedge_dot__multi_vector(self_: PlaneAtOrigin, other: MultiVector) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g3.x, other.g1.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g3.y, other.g1.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g3.z, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g4.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g4.w, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g4.w), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g3.z, other.g0.x, other.g3.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g0.x));
}

fn plane_at_origin__wedge_dot__multi_vector_at_infinity(self_: PlaneAtOrigin, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g2.x, other.g1.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g2.y, other.g1.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g2.z, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x));
}

fn plane_at_origin__wedge_dot__plane(self_: PlaneAtOrigin, other: Plane) -> LineAtOrigin {
    return LineAtOrigin(self_.g0 * vec3<f32>(other.g0.w));
}

fn plane_at_origin__wedge_dot__point(self_: PlaneAtOrigin, other: Point) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z));
}

fn plane_at_origin__wedge_dot__point_at_infinity(self_: PlaneAtOrigin, other: PointAtInfinity) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z));
}

fn plane_at_origin__wedge_dot__scalar(self_: PlaneAtOrigin, other: Scalar) -> PlaneAtOrigin {
    return PlaneAtOrigin(self_.g0 * vec3<f32>(other.g0));
}

fn plane_at_origin__wedge_dot__transflector(self_: PlaneAtOrigin, other: Transflector) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g0.z));
}

fn plane_at_origin__wedge_dot__translator(self_: PlaneAtOrigin, other: Translator) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn point__wedge_dot__anti_scalar(self_: Point, other: AntiScalar) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0));
}

fn point__wedge_dot__flector(self_: Point, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, other.g1.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g1.w), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g0.w, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w), vec4<f32>(0.0));
}

fn point__wedge_dot__flector_at_infinity(self_: Point, other: FlectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z, self_.g0.w) * vec2<f32>(other.g0.z, other.g0.w), vec4<f32>(0.0), vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w), vec4<f32>(0.0));
}

fn point__wedge_dot__horizon(self_: Point, other: Horizon) -> Translator {
    return Translator(self_.g0 * vec4<f32>(-other.g0));
}

fn point__wedge_dot__line(self_: Point, other: Line) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0));
}

fn point__wedge_dot__line_at_infinity(self_: Point, other: LineAtInfinity) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g0.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z));
}

fn point__wedge_dot__line_at_origin(self_: Point, other: LineAtOrigin) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn point__wedge_dot__magnitude(self_: Point, other: Magnitude) -> Flector {
    return Flector(self_.g0 * vec4<f32>(other.g0.x), self_.g0.xyzx * vec4<f32>(other.g0.y, other.g0.y, other.g0.y, 0.0));
}

fn point__wedge_dot__motor(self_: Point, other: Motor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0));
}

fn point__wedge_dot__multi_vector(self_: Point, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, other.g4.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, other.g4.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, other.g4.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g4.w), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g3.z, -other.g3.y, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g3.z, other.g0.x, other.g3.x, -other.g2.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g3.y, -other.g3.x, other.g0.x, -other.g2.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, -other.g4.z, other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g4.z, -other.g1.w, -other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g4.y, other.g4.x, -other.g1.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g4.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g4.w, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g4.w), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.y, other.g2.z, -other.g2.y, -other.g3.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.z, other.g0.y, other.g2.x, -other.g3.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g2.y, -other.g2.x, other.g0.y, -other.g3.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g3.x, other.g3.y, other.g3.z, 0.0));
}

fn point__wedge_dot__multi_vector_at_infinity(self_: Point, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g0.z, self_.g0.w) * vec2<f32>(other.g1.z, other.g0.y), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g2.z, -other.g2.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.z, other.g0.x, other.g2.x, 0.0) + self_.g0.zzzw * vec4<f32>(other.g2.y, -other.g2.x, other.g0.x, other.g0.x), vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.y, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g0.y, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.y), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + self_.g0.wwwz * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, -other.g2.z));
}

fn point__wedge_dot__multi_vector_at_origin(self_: Point, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, other.g2.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.x, -other.g2.z, other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g2.z, -other.g0.x, -other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g2.y, other.g2.x, -other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y));
}

fn point__wedge_dot__origin(self_: Point, other: Origin) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0));
}

fn point__wedge_dot__plane(self_: Point, other: Plane) -> Motor {
    return Motor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w));
}

fn point__wedge_dot__plane_at_origin(self_: Point, other: PlaneAtOrigin) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, other.g0.z));
}

fn point__wedge_dot__point(self_: Point, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(0.0));
}

fn point__wedge_dot__point_at_infinity(self_: Point, other: PointAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(0.0));
}

fn point__wedge_dot__rotor(self_: Point, other: Rotor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, 0.0));
}

fn point__wedge_dot__scalar(self_: Point, other: Scalar) -> Point {
    return Point(self_.g0 * vec4<f32>(other.g0));
}

fn point__wedge_dot__transflector(self_: Point, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, other.g1.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g1.w), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w), vec4<f32>(0.0));
}

fn point__wedge_dot__translator(self_: Point, other: Translator) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn point_at_infinity__wedge_dot__anti_scalar(self_: PointAtInfinity, other: AntiScalar) -> PlaneAtOrigin {
    return PlaneAtOrigin(self_.g0 * vec3<f32>(other.g0));
}

fn point_at_infinity__wedge_dot__flector(self_: PointAtInfinity, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, other.g1.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g0.w, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w), vec4<f32>(0.0));
}

fn point_at_infinity__wedge_dot__flector_at_infinity(self_: PointAtInfinity, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w));
}

fn point_at_infinity__wedge_dot__horizon(self_: PointAtInfinity, other: Horizon) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0));
}

fn point_at_infinity__wedge_dot__line(self_: PointAtInfinity, other: Line) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z));
}

fn point_at_infinity__wedge_dot__line_at_infinity(self_: PointAtInfinity, other: LineAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z));
}

fn point_at_infinity__wedge_dot__line_at_origin(self_: PointAtInfinity, other: LineAtOrigin) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn point_at_infinity__wedge_dot__magnitude(self_: PointAtInfinity, other: Magnitude) -> Transflector {
    return Transflector(self_.g0 * vec3<f32>(other.g0.x), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g0.y, other.g0.y, other.g0.y, 0.0));
}

fn point_at_infinity__wedge_dot__motor(self_: PointAtInfinity, other: Motor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, -other.g1.z));
}

fn point_at_infinity__wedge_dot__multi_vector(self_: PointAtInfinity, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, other.g4.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, other.g4.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, other.g4.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g3.z, -other.g3.y, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g3.z, other.g0.x, other.g3.x, -other.g2.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g3.y, -other.g3.x, other.g0.x, -other.g2.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, -other.g4.z, other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g4.z, -other.g1.w, -other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g4.y, other.g4.x, -other.g1.w), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g4.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g4.w, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g4.w), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.y, other.g2.z, -other.g2.y, -other.g3.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.z, other.g0.y, other.g2.x, -other.g3.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g2.y, -other.g2.x, other.g0.y, -other.g3.z));
}

fn point_at_infinity__wedge_dot__multi_vector_at_infinity(self_: PointAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, -other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, -other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, -other.g2.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.y, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g0.y, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.y));
}

fn point_at_infinity__wedge_dot__multi_vector_at_origin(self_: PointAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, other.g2.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.x, -other.g2.z, other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g2.z, -other.g0.x, -other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g2.y, other.g2.x, -other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y));
}

fn point_at_infinity__wedge_dot__origin(self_: PointAtInfinity, other: Origin) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0));
}

fn point_at_infinity__wedge_dot__plane(self_: PointAtInfinity, other: Plane) -> Motor {
    return Motor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, other.g0.z), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0.w));
}

fn point_at_infinity__wedge_dot__plane_at_origin(self_: PointAtInfinity, other: PlaneAtOrigin) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, other.g0.z));
}

fn point_at_infinity__wedge_dot__point(self_: PointAtInfinity, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(0.0));
}

fn point_at_infinity__wedge_dot__point_at_infinity(self_: PointAtInfinity, other: PointAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn point_at_infinity__wedge_dot__rotor(self_: PointAtInfinity, other: Rotor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, 0.0));
}

fn point_at_infinity__wedge_dot__scalar(self_: PointAtInfinity, other: Scalar) -> PointAtInfinity {
    return PointAtInfinity(self_.g0 * vec3<f32>(other.g0));
}

fn point_at_infinity__wedge_dot__transflector(self_: PointAtInfinity, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, other.g1.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w), vec4<f32>(0.0));
}

fn point_at_infinity__wedge_dot__translator(self_: PointAtInfinity, other: Translator) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn rotor__wedge_dot__flector(self_: Rotor, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.w), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g1.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, -other.g1.w, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, -other.g1.w, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0));
}

fn rotor__wedge_dot__flector_at_infinity(self_: Rotor, other: FlectorAtInfinity) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g0.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, -other.g0.w, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, -other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0));
}

fn rotor__wedge_dot__horizon(self_: Rotor, other: Horizon) -> Flector {
    return Flector(vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0), self_.g0.xyzx * vec4<f32>(-other.g0, -other.g0, -other.g0, 0.0));
}

fn rotor__wedge_dot__line(self_: Rotor, other: Line) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0));
}

fn rotor__wedge_dot__line_at_infinity(self_: Rotor, other: LineAtInfinity) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn rotor__wedge_dot__magnitude(self_: Rotor, other: Magnitude) -> Rotor {
    return Rotor(self_.g0 * vec4<f32>(other.g0.x));
}

fn rotor__wedge_dot__motor(self_: Rotor, other: Motor) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0));
}

fn rotor__wedge_dot__multi_vector(self_: Rotor, other: MultiVector) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, -other.g3.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, -other.g3.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, -other.g3.z) + vec2<f32>(self_.g0.w) * vec2<f32>(-other.g4.w, other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g3.z, other.g0.x, other.g3.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g0.x) + vec3<f32>(self_.g0.w) * other.g3, vec3<f32>(self_.g0.x) * vec3<f32>(-other.g4.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g4.w, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g4.w) - vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z));
}

fn rotor__wedge_dot__multi_vector_at_infinity(self_: Rotor, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, -other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, -other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, -other.g2.z) + vec2<f32>(self_.g0.w) * other.g0.yx * vec2<f32>(-1.0, 1.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x) + vec3<f32>(self_.g0.w) * other.g2, vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.y, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g0.y, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.y) - vec3<f32>(self_.g0.w) * other.g1);
}

fn rotor__wedge_dot__plane(self_: Rotor, other: Plane) -> Flector {
    return Flector(vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w), self_.g0.xyzx * vec4<f32>(-other.g0.w, -other.g0.w, -other.g0.w, 0.0));
}

fn rotor__wedge_dot__point(self_: Rotor, other: Point) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0));
}

fn rotor__wedge_dot__point_at_infinity(self_: Rotor, other: PointAtInfinity) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0));
}

fn rotor__wedge_dot__scalar(self_: Rotor, other: Scalar) -> Rotor {
    return Rotor(self_.g0 * vec4<f32>(other.g0));
}

fn rotor__wedge_dot__transflector(self_: Rotor, other: Transflector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.w), vec4<f32>(self_.g0.x) * vec4<f32>(-other.g1.w, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, -other.g1.w, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, -other.g1.w, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0));
}

fn rotor__wedge_dot__translator(self_: Rotor, other: Translator) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn scalar__wedge_dot__anti_scalar(self_: Scalar, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0);
}

fn scalar__wedge_dot__flector(self_: Scalar, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0) * other.g0, vec4<f32>(self_.g0) * other.g1);
}

fn scalar__wedge_dot__flector_at_infinity(self_: Scalar, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0) * other.g0);
}

fn scalar__wedge_dot__horizon(self_: Scalar, other: Horizon) -> Horizon {
    return Horizon(self_.g0 * other.g0);
}

fn scalar__wedge_dot__line(self_: Scalar, other: Line) -> Line {
    return Line(vec3<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1);
}

fn scalar__wedge_dot__line_at_infinity(self_: Scalar, other: LineAtInfinity) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(self_.g0) * other.g0);
}

fn scalar__wedge_dot__line_at_origin(self_: Scalar, other: LineAtOrigin) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(self_.g0) * other.g0);
}

fn scalar__wedge_dot__magnitude(self_: Scalar, other: Magnitude) -> Magnitude {
    return Magnitude(vec2<f32>(self_.g0) * other.g0);
}

fn scalar__wedge_dot__motor(self_: Scalar, other: Motor) -> Motor {
    return Motor(vec4<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1);
}

fn scalar__wedge_dot__multi_vector(self_: Scalar, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0) * other.g0, vec4<f32>(self_.g0) * other.g1, vec3<f32>(self_.g0) * other.g2, vec3<f32>(self_.g0) * other.g3, vec4<f32>(self_.g0) * other.g4);
}

fn scalar__wedge_dot__multi_vector_at_infinity(self_: Scalar, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1, vec3<f32>(self_.g0) * other.g2);
}

fn scalar__wedge_dot__multi_vector_at_origin(self_: Scalar, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1, vec3<f32>(self_.g0) * other.g2);
}

fn scalar__wedge_dot__origin(self_: Scalar, other: Origin) -> Origin {
    return Origin(self_.g0 * other.g0);
}

fn scalar__wedge_dot__plane(self_: Scalar, other: Plane) -> Plane {
    return Plane(vec4<f32>(self_.g0) * other.g0);
}

fn scalar__wedge_dot__plane_at_origin(self_: Scalar, other: PlaneAtOrigin) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0) * other.g0);
}

fn scalar__wedge_dot__point(self_: Scalar, other: Point) -> Point {
    return Point(vec4<f32>(self_.g0) * other.g0);
}

fn scalar__wedge_dot__point_at_infinity(self_: Scalar, other: PointAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0) * other.g0);
}

fn scalar__wedge_dot__rotor(self_: Scalar, other: Rotor) -> Rotor {
    return Rotor(vec4<f32>(self_.g0) * other.g0);
}

fn scalar__wedge_dot__scalar(self_: Scalar, other: Scalar) -> Scalar {
    return Scalar(self_.g0 * other.g0);
}

fn scalar__wedge_dot__transflector(self_: Scalar, other: Transflector) -> Transflector {
    return Transflector(vec3<f32>(self_.g0) * other.g0, vec4<f32>(self_.g0) * other.g1);
}

fn scalar__wedge_dot__translator(self_: Scalar, other: Translator) -> Translator {
    return Translator(vec4<f32>(self_.g0) * other.g0);
}

fn transflector__wedge_dot__anti_scalar(self_: Transflector, other: AntiScalar) -> Flector {
    return Flector(vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g0, other.g0, other.g0, 0.0));
}

fn transflector__wedge_dot__flector(self_: Transflector, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, other.g1.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) - vec2<f32>(self_.g1.w) * vec2<f32>(other.g1.w, other.g0.w), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g0.w, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.w) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, other.g1.w, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g1.w) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn transflector__wedge_dot__flector_at_infinity(self_: Transflector, other: FlectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) - vec2<f32>(self_.g1.w, self_.g1.z) * vec2<f32>(other.g0.w, other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g0.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g0.w) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn transflector__wedge_dot__horizon(self_: Transflector, other: Horizon) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.w) * vec2<f32>(-other.g0, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0), vec4<f32>(0.0));
}

fn transflector__wedge_dot__line(self_: Transflector, other: Line) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + self_.g1.wwwz * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, -other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn transflector__wedge_dot__line_at_infinity(self_: Transflector, other: LineAtInfinity) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g1.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn transflector__wedge_dot__line_at_origin(self_: Transflector, other: LineAtOrigin) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn transflector__wedge_dot__magnitude(self_: Transflector, other: Magnitude) -> Flector {
    return Flector(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g0.x, other.g0.x, other.g0.x, 0.0) + vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g0.y, other.g0.y, other.g0.y, 0.0) + self_.g1 * vec4<f32>(other.g0.x));
}

fn transflector__wedge_dot__motor(self_: Transflector, other: Motor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, other.g0.w), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, -other.g1.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn transflector__wedge_dot__multi_vector(self_: Transflector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, other.g4.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, other.g4.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, other.g4.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z) - vec2<f32>(self_.g1.w) * vec2<f32>(other.g4.w, other.g1.w), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g3.z, -other.g3.y, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g3.z, other.g0.x, other.g3.x, -other.g2.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g3.y, -other.g3.x, other.g0.x, -other.g2.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g3.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g3.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g3.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g3.x, other.g3.y, other.g3.z, other.g0.y), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, -other.g4.z, other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g4.z, -other.g1.w, -other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g4.y, other.g4.x, -other.g1.w) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g4.w, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, other.g4.w, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g4.w) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g4.w, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g4.w, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g4.w) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.y, other.g2.z, -other.g2.y, -other.g3.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.z, other.g0.y, other.g2.x, -other.g3.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g2.y, -other.g2.x, other.g0.y, -other.g3.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.x, other.g3.z, -other.g3.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g3.z, other.g0.x, other.g3.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g3.y, -other.g3.x, other.g0.x, 0.0) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, other.g0.x));
}

fn transflector__wedge_dot__multi_vector_at_infinity(self_: Transflector, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) - vec2<f32>(self_.g1.w, self_.g1.z) * vec2<f32>(other.g0.y, other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g2.z, -other.g2.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.z, other.g0.x, other.g2.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g2.y, -other.g2.x, other.g0.x, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + self_.g1.wwwz * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, -other.g2.z), vec3<f32>(self_.g1.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.y, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, -other.g0.y, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, -other.g0.y) - vec3<f32>(self_.g1.w) * other.g1, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.z) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.x, other.g2.z, -other.g2.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g2.z, other.g0.x, other.g2.x, 0.0) + self_.g1.zzzw * vec4<f32>(other.g2.y, -other.g2.x, other.g0.x, other.g0.x));
}

fn transflector__wedge_dot__multi_vector_at_origin(self_: Transflector, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, other.g2.z) + vec2<f32>(self_.g1.w) * other.g0.yx * vec2<f32>(1.0, -1.0), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g0.x, -other.g2.z, other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g2.z, -other.g0.x, -other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g2.y, other.g2.x, -other.g0.x) - vec3<f32>(self_.g1.w) * other.g2, vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y) + vec3<f32>(self_.g1.w) * other.g1);
}

fn transflector__wedge_dot__origin(self_: Transflector, other: Origin) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(-other.g0, -other.g0, -other.g0, 0.0) + vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0));
}

fn transflector__wedge_dot__plane(self_: Transflector, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g1.w) * vec2<f32>(-other.g0.w, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) + vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.w) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0.w), vec4<f32>(0.0));
}

fn transflector__wedge_dot__plane_at_origin(self_: Transflector, other: PlaneAtOrigin) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0));
}

fn transflector__wedge_dot__point(self_: Transflector, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g0.w), vec4<f32>(0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn transflector__wedge_dot__point_at_infinity(self_: Transflector, other: PointAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0) - vec3<f32>(self_.g1.w) * other.g0, vec4<f32>(0.0));
}

fn transflector__wedge_dot__rotor(self_: Transflector, other: Rotor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g0.w, 0.0) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn transflector__wedge_dot__scalar(self_: Transflector, other: Scalar) -> Transflector {
    return Transflector(self_.g0 * vec3<f32>(other.g0), self_.g1 * vec4<f32>(other.g0));
}

fn transflector__wedge_dot__transflector(self_: Transflector, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, other.g1.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) - vec2<f32>(self_.g1.w, self_.g1.z) * vec2<f32>(other.g1.w, other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g1.x) * vec3<f32>(other.g1.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, other.g1.w, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g1.w) - vec3<f32>(self_.g1.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(-other.g1.w, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, -other.g1.w, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, -other.g1.w) - vec3<f32>(self_.g1.w) * other.g0, vec4<f32>(0.0));
}

fn transflector__wedge_dot__translator(self_: Transflector, other: Translator) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g1.w) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn translator__wedge_dot__anti_scalar(self_: Translator, other: AntiScalar) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0));
}

fn translator__wedge_dot__flector(self_: Translator, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.w), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, other.g0.w, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g0.w, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0));
}

fn translator__wedge_dot__flector_at_infinity(self_: Translator, other: FlectorAtInfinity) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g0.w, other.g0.x, 0.0) + self_.g0.zzzw * other.g0.yxww * vec4<f32>(1.0, -1.0, 1.0, -1.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) - self_.g0.wwwz * other.g0.xyzz);
}

fn translator__wedge_dot__horizon(self_: Translator, other: Horizon) -> Point {
    return Point(self_.g0 * vec4<f32>(other.g0));
}

fn translator__wedge_dot__line(self_: Translator, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, other.g0.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, other.g0.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0) + vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec4<f32>(0.0));
}

fn translator__wedge_dot__line_at_infinity(self_: Translator, other: LineAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(0.0));
}

fn translator__wedge_dot__line_at_origin(self_: Translator, other: LineAtOrigin) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g0.z));
}

fn translator__wedge_dot__magnitude(self_: Translator, other: Magnitude) -> Motor {
    return Motor(self_.g0 * vec4<f32>(other.g0.y, other.g0.y, other.g0.y, other.g0.x), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.x));
}

fn translator__wedge_dot__motor(self_: Translator, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, other.g0.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, other.g0.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.w, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, other.g0.w, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, other.g0.w) + vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0), vec4<f32>(0.0));
}

fn translator__wedge_dot__multi_vector(self_: Translator, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g3.x, other.g2.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g3.y, other.g2.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g3.z, other.g2.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.x), vec4<f32>(self_.g0.x) * vec4<f32>(other.g4.w, other.g1.z, -other.g1.y, -other.g4.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, other.g4.w, other.g1.x, -other.g4.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, other.g4.w, -other.g4.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g4.w), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.y, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.y) + vec3<f32>(self_.g0.w) * other.g3, vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g3.z, -other.g3.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g3.z, other.g0.x, other.g3.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g3.y, -other.g3.x, other.g0.x), vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, other.g4.z, -other.g4.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g4.z, other.g1.w, other.g4.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g4.y, -other.g4.x, other.g1.w, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g1.x, -other.g1.y, -other.g1.z, 0.0));
}

fn translator__wedge_dot__multi_vector_at_infinity(self_: Translator, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g0.z, self_.g0.w) * vec2<f32>(-other.g2.z, other.g0.x), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.y, other.g1.z, -other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, other.g0.y, other.g1.x, 0.0) + self_.g0.zzzw * vec4<f32>(other.g1.y, -other.g1.x, other.g0.y, -other.g0.y), vec3<f32>(self_.g0.w) * other.g2, vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) - self_.g0.wwwz * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, other.g1.z));
}

fn translator__wedge_dot__multi_vector_at_origin(self_: Translator, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(0.0) - vec2<f32>(self_.g0.x) * vec2<f32>(other.g2.x, other.g1.x) - vec2<f32>(self_.g0.y) * vec2<f32>(other.g2.y, other.g1.y) - vec2<f32>(self_.g0.z) * vec2<f32>(other.g2.z, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.y, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, other.g0.y, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, other.g0.y), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, other.g0.x, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, other.g0.x));
}

fn translator__wedge_dot__origin(self_: Translator, other: Origin) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0));
}

fn translator__wedge_dot__plane(self_: Translator, other: Plane) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn translator__wedge_dot__plane_at_origin(self_: Translator, other: PlaneAtOrigin) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0));
}

fn translator__wedge_dot__point(self_: Translator, other: Point) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0));
}

fn translator__wedge_dot__point_at_infinity(self_: Translator, other: PointAtInfinity) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) - self_.g0.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, other.g0.z));
}

fn translator__wedge_dot__rotor(self_: Translator, other: Rotor) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * other.g0.wzyx * vec4<f32>(1.0, 1.0, -1.0, -1.0) + vec4<f32>(self_.g0.y) * other.g0.zwxy * vec4<f32>(-1.0, 1.0, 1.0, -1.0) + vec4<f32>(self_.g0.z) * other.g0.yxwz * vec4<f32>(1.0, -1.0, 1.0, -1.0));
}

fn translator__wedge_dot__scalar(self_: Translator, other: Scalar) -> Translator {
    return Translator(self_.g0 * vec4<f32>(other.g0));
}

fn translator__wedge_dot__transflector(self_: Translator, other: Transflector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, other.g1.w, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, other.g1.w, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.w), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(-other.g0.x, -other.g0.y, -other.g0.z, 0.0));
}

fn translator__wedge_dot__translator(self_: Translator, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(0.0));
}

fn anti_scalar__anti_wedge__anti_scalar(self_: AntiScalar, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0);
}

fn anti_scalar__anti_wedge__flector(self_: AntiScalar, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0) * other.g0, vec4<f32>(self_.g0) * other.g1);
}

fn anti_scalar__anti_wedge__flector_at_infinity(self_: AntiScalar, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0) * other.g0);
}

fn anti_scalar__anti_wedge__horizon(self_: AntiScalar, other: Horizon) -> Horizon {
    return Horizon(self_.g0 * other.g0);
}

fn anti_scalar__anti_wedge__line(self_: AntiScalar, other: Line) -> Line {
    return Line(vec3<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1);
}

fn anti_scalar__anti_wedge__line_at_infinity(self_: AntiScalar, other: LineAtInfinity) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(self_.g0) * other.g0);
}

fn anti_scalar__anti_wedge__line_at_origin(self_: AntiScalar, other: LineAtOrigin) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(self_.g0) * other.g0);
}

fn anti_scalar__anti_wedge__magnitude(self_: AntiScalar, other: Magnitude) -> Magnitude {
    return Magnitude(vec2<f32>(self_.g0) * other.g0);
}

fn anti_scalar__anti_wedge__motor(self_: AntiScalar, other: Motor) -> Motor {
    return Motor(vec4<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1);
}

fn anti_scalar__anti_wedge__multi_vector(self_: AntiScalar, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0) * other.g0, vec4<f32>(self_.g0) * other.g1, vec3<f32>(self_.g0) * other.g2, vec3<f32>(self_.g0) * other.g3, vec4<f32>(self_.g0) * other.g4);
}

fn anti_scalar__anti_wedge__multi_vector_at_infinity(self_: AntiScalar, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1, vec3<f32>(self_.g0) * other.g2);
}

fn anti_scalar__anti_wedge__multi_vector_at_origin(self_: AntiScalar, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1, vec3<f32>(self_.g0) * other.g2);
}

fn anti_scalar__anti_wedge__origin(self_: AntiScalar, other: Origin) -> Origin {
    return Origin(self_.g0 * other.g0);
}

fn anti_scalar__anti_wedge__plane(self_: AntiScalar, other: Plane) -> Plane {
    return Plane(vec4<f32>(self_.g0) * other.g0);
}

fn anti_scalar__anti_wedge__plane_at_origin(self_: AntiScalar, other: PlaneAtOrigin) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0) * other.g0);
}

fn anti_scalar__anti_wedge__point(self_: AntiScalar, other: Point) -> Point {
    return Point(vec4<f32>(self_.g0) * other.g0);
}

fn anti_scalar__anti_wedge__point_at_infinity(self_: AntiScalar, other: PointAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0) * other.g0);
}

fn anti_scalar__anti_wedge__rotor(self_: AntiScalar, other: Rotor) -> Rotor {
    return Rotor(vec4<f32>(self_.g0) * other.g0);
}

fn anti_scalar__anti_wedge__scalar(self_: AntiScalar, other: Scalar) -> Scalar {
    return Scalar(self_.g0 * other.g0);
}

fn anti_scalar__anti_wedge__transflector(self_: AntiScalar, other: Transflector) -> Transflector {
    return Transflector(vec3<f32>(self_.g0) * other.g0, vec4<f32>(self_.g0) * other.g1);
}

fn anti_scalar__anti_wedge__translator(self_: AntiScalar, other: Translator) -> Translator {
    return Translator(vec4<f32>(self_.g0) * other.g0);
}

fn flector__anti_wedge__anti_scalar(self_: Flector, other: AntiScalar) -> Flector {
    return Flector(self_.g0 * vec4<f32>(other.g0), self_.g1 * vec4<f32>(other.g0));
}

fn flector__anti_wedge__flector(self_: Flector, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(-other.g1.w, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g1.w) * vec2<f32>(other.g0.w, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g1.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(0.0));
}

fn flector__anti_wedge__flector_at_infinity(self_: Flector, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.w) * vec2<f32>(-other.g0.w, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.w));
}

fn flector__anti_wedge__horizon(self_: Flector, other: Horizon) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.w) * vec2<f32>(-other.g0, 0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0));
}

fn flector__anti_wedge__line(self_: Flector, other: Line) -> Point {
    return Point(vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn flector__anti_wedge__line_at_infinity(self_: Flector, other: LineAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn flector__anti_wedge__line_at_origin(self_: Flector, other: LineAtOrigin) -> Point {
    return Point(vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g1.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z));
}

fn flector__anti_wedge__magnitude(self_: Flector, other: Magnitude) -> Flector {
    return Flector(self_.g0 * vec4<f32>(other.g0.y), self_.g1 * vec4<f32>(other.g0.y));
}

fn flector__anti_wedge__motor(self_: Flector, other: Motor) -> Flector {
    return Flector(self_.g0 * vec4<f32>(other.g0.w) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g1 * vec4<f32>(other.g0.w));
}

fn flector__anti_wedge__multi_vector(self_: Flector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g4.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g4.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g4.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(-other.g4.w, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g1.z, 0.0) + vec2<f32>(self_.g1.w) * vec2<f32>(other.g1.w, 0.0), self_.g0 * vec4<f32>(other.g0.y) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g3.z, -other.g3.y, -other.g2.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g3.z, 0.0, other.g3.x, -other.g2.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g3.y, -other.g3.x, 0.0, -other.g2.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g4.z, other.g4.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g4.z, 0.0, -other.g4.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g4.y, other.g4.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g4.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z), self_.g1 * vec4<f32>(other.g0.y));
}

fn flector__anti_wedge__multi_vector_at_infinity(self_: Flector, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.w) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g1.z, 0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g2.z, -other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g2.z, 0.0, other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g2.y, -other.g2.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.y));
}

fn flector__anti_wedge__multi_vector_at_origin(self_: Flector, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g2.z, 0.0) + vec2<f32>(self_.g1.w) * vec2<f32>(other.g0.x, 0.0), self_.g0 * vec4<f32>(other.g0.y) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + self_.g1.wwwz * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, -other.g1.z), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0), vec3<f32>(self_.g1.w) * other.g2, self_.g1 * vec4<f32>(other.g0.y));
}

fn flector__anti_wedge__origin(self_: Flector, other: Origin) -> Scalar {
    return Scalar(self_.g1.w * other.g0);
}

fn flector__anti_wedge__plane(self_: Flector, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(-other.g0.w, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn flector__anti_wedge__plane_at_origin(self_: Flector, other: PlaneAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g1.w) * other.g0, vec4<f32>(0.0));
}

fn flector__anti_wedge__point(self_: Flector, other: Point) -> Scalar {
    return Scalar(self_.g1.x * other.g0.x + self_.g1.y * other.g0.y + self_.g1.z * other.g0.z + self_.g1.w * other.g0.w);
}

fn flector__anti_wedge__point_at_infinity(self_: Flector, other: PointAtInfinity) -> Scalar {
    return Scalar(self_.g1.x * other.g0.x + self_.g1.y * other.g0.y + self_.g1.z * other.g0.z);
}

fn flector__anti_wedge__rotor(self_: Flector, other: Rotor) -> Flector {
    return Flector(self_.g0 * vec4<f32>(other.g0.w) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g1.wwwz * other.g0.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0), self_.g1 * vec4<f32>(other.g0.w));
}

fn flector__anti_wedge__transflector(self_: Flector, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(-other.g1.w, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g1.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(0.0));
}

fn flector__anti_wedge__translator(self_: Flector, other: Translator) -> Flector {
    return Flector(self_.g0 * vec4<f32>(other.g0.w) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0), self_.g1 * vec4<f32>(other.g0.w));
}

fn flector_at_infinity__anti_wedge__anti_scalar(self_: FlectorAtInfinity, other: AntiScalar) -> FlectorAtInfinity {
    return FlectorAtInfinity(self_.g0 * vec4<f32>(other.g0));
}

fn flector_at_infinity__anti_wedge__flector(self_: FlectorAtInfinity, other: Flector) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(other.g0.w, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z));
}

fn flector_at_infinity__anti_wedge__line(self_: FlectorAtInfinity, other: Line) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0.w) * other.g0);
}

fn flector_at_infinity__anti_wedge__line_at_origin(self_: FlectorAtInfinity, other: LineAtOrigin) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0.w) * other.g0);
}

fn flector_at_infinity__anti_wedge__magnitude(self_: FlectorAtInfinity, other: Magnitude) -> FlectorAtInfinity {
    return FlectorAtInfinity(self_.g0 * vec4<f32>(other.g0.y));
}

fn flector_at_infinity__anti_wedge__motor(self_: FlectorAtInfinity, other: Motor) -> FlectorAtInfinity {
    return FlectorAtInfinity(self_.g0.xyzx * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * other.g0);
}

fn flector_at_infinity__anti_wedge__multi_vector(self_: FlectorAtInfinity, other: MultiVector) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g4.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g4.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g4.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(other.g1.w, other.g0.y), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y) + vec3<f32>(self_.g0.w) * other.g2, vec3<f32>(self_.g0.w) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z));
}

fn flector_at_infinity__anti_wedge__multi_vector_at_origin(self_: FlectorAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g2.z, 0.0) + vec2<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y) + vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.w) * other.g2);
}

fn flector_at_infinity__anti_wedge__origin(self_: FlectorAtInfinity, other: Origin) -> Scalar {
    return Scalar(self_.g0.w * other.g0);
}

fn flector_at_infinity__anti_wedge__plane(self_: FlectorAtInfinity, other: Plane) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn flector_at_infinity__anti_wedge__plane_at_origin(self_: FlectorAtInfinity, other: PlaneAtOrigin) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.w) * other.g0);
}

fn flector_at_infinity__anti_wedge__point(self_: FlectorAtInfinity, other: Point) -> Scalar {
    return Scalar(self_.g0.w * other.g0.w);
}

fn flector_at_infinity__anti_wedge__rotor(self_: FlectorAtInfinity, other: Rotor) -> FlectorAtInfinity {
    return FlectorAtInfinity(self_.g0.xyzx * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * other.g0);
}

fn flector_at_infinity__anti_wedge__transflector(self_: FlectorAtInfinity, other: Transflector) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z));
}

fn flector_at_infinity__anti_wedge__translator(self_: FlectorAtInfinity, other: Translator) -> FlectorAtInfinity {
    return FlectorAtInfinity(self_.g0 * vec4<f32>(other.g0.w));
}

fn horizon__anti_wedge__anti_scalar(self_: Horizon, other: AntiScalar) -> Horizon {
    return Horizon(self_.g0 * other.g0);
}

fn horizon__anti_wedge__flector(self_: Horizon, other: Flector) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0) * vec2<f32>(other.g0.w, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z));
}

fn horizon__anti_wedge__line(self_: Horizon, other: Line) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0) * other.g0);
}

fn horizon__anti_wedge__line_at_origin(self_: Horizon, other: LineAtOrigin) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0) * other.g0);
}

fn horizon__anti_wedge__magnitude(self_: Horizon, other: Magnitude) -> Horizon {
    return Horizon(self_.g0 * other.g0.y);
}

fn horizon__anti_wedge__motor(self_: Horizon, other: Motor) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0) * other.g0);
}

fn horizon__anti_wedge__multi_vector(self_: Horizon, other: MultiVector) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0) * vec2<f32>(other.g1.w, other.g0.y), vec3<f32>(self_.g0) * other.g2, vec3<f32>(self_.g0) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z));
}

fn horizon__anti_wedge__multi_vector_at_origin(self_: Horizon, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1, vec3<f32>(self_.g0) * other.g2);
}

fn horizon__anti_wedge__origin(self_: Horizon, other: Origin) -> Scalar {
    return Scalar(self_.g0 * other.g0);
}

fn horizon__anti_wedge__plane(self_: Horizon, other: Plane) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(self_.g0) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn horizon__anti_wedge__plane_at_origin(self_: Horizon, other: PlaneAtOrigin) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(self_.g0) * other.g0);
}

fn horizon__anti_wedge__point(self_: Horizon, other: Point) -> Scalar {
    return Scalar(self_.g0 * other.g0.w);
}

fn horizon__anti_wedge__rotor(self_: Horizon, other: Rotor) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0) * other.g0);
}

fn horizon__anti_wedge__transflector(self_: Horizon, other: Transflector) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(self_.g0) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z));
}

fn horizon__anti_wedge__translator(self_: Horizon, other: Translator) -> Horizon {
    return Horizon(self_.g0 * other.g0.w);
}

fn line__anti_wedge__anti_scalar(self_: Line, other: AntiScalar) -> Line {
    return Line(self_.g0 * vec3<f32>(other.g0), self_.g1 * vec3<f32>(other.g0));
}

fn line__anti_wedge__flector(self_: Line, other: Flector) -> Point {
    return Point(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g1.w, 0.0, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g1.w, -other.g1.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0));
}

fn line__anti_wedge__flector_at_infinity(self_: Line, other: FlectorAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(self_.g0 * vec3<f32>(other.g0.w));
}

fn line__anti_wedge__horizon(self_: Line, other: Horizon) -> PointAtInfinity {
    return PointAtInfinity(self_.g0 * vec3<f32>(other.g0));
}

fn line__anti_wedge__line(self_: Line, other: Line) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z - self_.g1.x * other.g0.x - self_.g1.y * other.g0.y - self_.g1.z * other.g0.z);
}

fn line__anti_wedge__line_at_infinity(self_: Line, other: LineAtInfinity) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn line__anti_wedge__line_at_origin(self_: Line, other: LineAtOrigin) -> Scalar {
    return Scalar(0.0 - self_.g1.x * other.g0.x - self_.g1.y * other.g0.y - self_.g1.z * other.g0.z);
}

fn line__anti_wedge__magnitude(self_: Line, other: Magnitude) -> Line {
    return Line(self_.g0 * vec3<f32>(other.g0.y), self_.g1 * vec3<f32>(other.g0.y));
}

fn line__anti_wedge__motor(self_: Line, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), self_.g0 * vec3<f32>(other.g0.w), self_.g1 * vec3<f32>(other.g0.w), vec4<f32>(0.0));
}

fn line__anti_wedge__multi_vector(self_: Line, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g3.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g3.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g3.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g2.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g4.w, 0.0, 0.0, -other.g4.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g4.w, 0.0, -other.g4.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g4.w, -other.g4.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g4.z, other.g4.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g4.z, 0.0, -other.g4.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g4.y, other.g4.x, 0.0, 0.0), self_.g0 * vec3<f32>(other.g0.y), self_.g1 * vec3<f32>(other.g0.y), vec4<f32>(0.0));
}

fn line__anti_wedge__multi_vector_at_infinity(self_: Line, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g2.z, 0.0), self_.g0 * vec3<f32>(other.g0.y), vec3<f32>(0.0));
}

fn line__anti_wedge__multi_vector_at_origin(self_: Line, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g1.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g2.z, other.g2.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g2.z, 0.0, -other.g2.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g2.y, other.g2.x, 0.0, 0.0), self_.g0 * vec3<f32>(other.g0.y), self_.g1 * vec3<f32>(other.g0.y), vec4<f32>(0.0));
}

fn line__anti_wedge__plane(self_: Line, other: Plane) -> Point {
    return Point(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0));
}

fn line__anti_wedge__plane_at_origin(self_: Line, other: PlaneAtOrigin) -> Point {
    return Point(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0));
}

fn line__anti_wedge__rotor(self_: Line, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), self_.g0 * vec3<f32>(other.g0.w), self_.g1 * vec3<f32>(other.g0.w), vec4<f32>(0.0));
}

fn line__anti_wedge__transflector(self_: Line, other: Transflector) -> Point {
    return Point(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g1.w, 0.0, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g1.w, -other.g1.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0));
}

fn line__anti_wedge__translator(self_: Line, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), self_.g0 * vec3<f32>(other.g0.w), self_.g1 * vec3<f32>(other.g0.w), vec4<f32>(0.0));
}

fn line_at_infinity__anti_wedge__anti_scalar(self_: LineAtInfinity, other: AntiScalar) -> LineAtInfinity {
    return LineAtInfinity(self_.g0 * vec3<f32>(other.g0));
}

fn line_at_infinity__anti_wedge__flector(self_: LineAtInfinity, other: Flector) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0));
}

fn line_at_infinity__anti_wedge__line(self_: LineAtInfinity, other: Line) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn line_at_infinity__anti_wedge__line_at_origin(self_: LineAtInfinity, other: LineAtOrigin) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn line_at_infinity__anti_wedge__magnitude(self_: LineAtInfinity, other: Magnitude) -> LineAtInfinity {
    return LineAtInfinity(self_.g0 * vec3<f32>(other.g0.y));
}

fn line_at_infinity__anti_wedge__motor(self_: LineAtInfinity, other: Motor) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), self_.g0 * vec3<f32>(other.g0.w));
}

fn line_at_infinity__anti_wedge__multi_vector(self_: LineAtInfinity, other: MultiVector) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g2.z, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g4.z, other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g4.z, 0.0, -other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g4.y, other.g4.x, 0.0), self_.g0 * vec3<f32>(other.g0.y));
}

fn line_at_infinity__anti_wedge__multi_vector_at_origin(self_: LineAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0), self_.g0 * vec3<f32>(other.g0.y));
}

fn line_at_infinity__anti_wedge__plane(self_: LineAtInfinity, other: Plane) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn line_at_infinity__anti_wedge__plane_at_origin(self_: LineAtInfinity, other: PlaneAtOrigin) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn line_at_infinity__anti_wedge__rotor(self_: LineAtInfinity, other: Rotor) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), self_.g0 * vec3<f32>(other.g0.w));
}

fn line_at_infinity__anti_wedge__transflector(self_: LineAtInfinity, other: Transflector) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0));
}

fn line_at_infinity__anti_wedge__translator(self_: LineAtInfinity, other: Translator) -> LineAtInfinity {
    return LineAtInfinity(self_.g0 * vec3<f32>(other.g0.w));
}

fn line_at_origin__anti_wedge__anti_scalar(self_: LineAtOrigin, other: AntiScalar) -> LineAtOrigin {
    return LineAtOrigin(self_.g0 * vec3<f32>(other.g0));
}

fn line_at_origin__anti_wedge__flector(self_: LineAtOrigin, other: Flector) -> Point {
    return Point(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g1.w, 0.0, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g1.w, -other.g1.z));
}

fn line_at_origin__anti_wedge__flector_at_infinity(self_: LineAtOrigin, other: FlectorAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(self_.g0 * vec3<f32>(other.g0.w));
}

fn line_at_origin__anti_wedge__horizon(self_: LineAtOrigin, other: Horizon) -> PointAtInfinity {
    return PointAtInfinity(self_.g0 * vec3<f32>(other.g0));
}

fn line_at_origin__anti_wedge__line(self_: LineAtOrigin, other: Line) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z);
}

fn line_at_origin__anti_wedge__line_at_infinity(self_: LineAtOrigin, other: LineAtInfinity) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn line_at_origin__anti_wedge__magnitude(self_: LineAtOrigin, other: Magnitude) -> LineAtOrigin {
    return LineAtOrigin(self_.g0 * vec3<f32>(other.g0.y));
}

fn line_at_origin__anti_wedge__motor(self_: LineAtOrigin, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0), vec4<f32>(0.0), self_.g0 * vec3<f32>(other.g0.w), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn line_at_origin__anti_wedge__multi_vector(self_: LineAtOrigin, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g3.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g3.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g3.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g4.w, 0.0, 0.0, -other.g4.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g4.w, 0.0, -other.g4.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g4.w, -other.g4.z), self_.g0 * vec3<f32>(other.g0.y), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn line_at_origin__anti_wedge__multi_vector_at_infinity(self_: LineAtOrigin, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g2.z, 0.0), self_.g0 * vec3<f32>(other.g0.y), vec3<f32>(0.0));
}

fn line_at_origin__anti_wedge__multi_vector_at_origin(self_: LineAtOrigin, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g2.z, 0.0), self_.g0 * vec3<f32>(other.g0.y), vec3<f32>(0.0));
}

fn line_at_origin__anti_wedge__plane(self_: LineAtOrigin, other: Plane) -> Point {
    return Point(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn line_at_origin__anti_wedge__plane_at_origin(self_: LineAtOrigin, other: PlaneAtOrigin) -> Origin {
    return Origin(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn line_at_origin__anti_wedge__rotor(self_: LineAtOrigin, other: Rotor) -> LineAtOrigin {
    return LineAtOrigin(self_.g0 * vec3<f32>(other.g0.w));
}

fn line_at_origin__anti_wedge__transflector(self_: LineAtOrigin, other: Transflector) -> Point {
    return Point(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g1.w, 0.0, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g1.w, -other.g1.z));
}

fn line_at_origin__anti_wedge__translator(self_: LineAtOrigin, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), self_.g0 * vec3<f32>(other.g0.w), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn magnitude__anti_wedge__anti_scalar(self_: Magnitude, other: AntiScalar) -> Magnitude {
    return Magnitude(self_.g0 * vec2<f32>(other.g0));
}

fn magnitude__anti_wedge__flector(self_: Magnitude, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.y) * other.g0, vec4<f32>(self_.g0.y) * other.g1);
}

fn magnitude__anti_wedge__flector_at_infinity(self_: Magnitude, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.y) * other.g0);
}

fn magnitude__anti_wedge__horizon(self_: Magnitude, other: Horizon) -> Horizon {
    return Horizon(self_.g0.y * other.g0);
}

fn magnitude__anti_wedge__line(self_: Magnitude, other: Line) -> Line {
    return Line(vec3<f32>(self_.g0.y) * other.g0, vec3<f32>(self_.g0.y) * other.g1);
}

fn magnitude__anti_wedge__line_at_infinity(self_: Magnitude, other: LineAtInfinity) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(self_.g0.y) * other.g0);
}

fn magnitude__anti_wedge__line_at_origin(self_: Magnitude, other: LineAtOrigin) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(self_.g0.y) * other.g0);
}

fn magnitude__anti_wedge__magnitude(self_: Magnitude, other: Magnitude) -> Magnitude {
    return Magnitude(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.y) * other.g0);
}

fn magnitude__anti_wedge__motor(self_: Magnitude, other: Motor) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.w), vec4<f32>(0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.y) * other.g1, vec4<f32>(0.0));
}

fn magnitude__anti_wedge__multi_vector(self_: Magnitude, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.y) * other.g0, vec4<f32>(self_.g0.y) * other.g1, vec3<f32>(self_.g0.y) * other.g2, vec3<f32>(self_.g0.y) * other.g3, vec4<f32>(self_.g0.y) * other.g4);
}

fn magnitude__anti_wedge__multi_vector_at_infinity(self_: Magnitude, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.y) * other.g0, vec3<f32>(self_.g0.y) * other.g1, vec3<f32>(self_.g0.y) * other.g2);
}

fn magnitude__anti_wedge__multi_vector_at_origin(self_: Magnitude, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.y), vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x), vec3<f32>(self_.g0.y) * other.g1, vec3<f32>(0.0), vec4<f32>(self_.g0.y) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0));
}

fn magnitude__anti_wedge__origin(self_: Magnitude, other: Origin) -> Origin {
    return Origin(self_.g0.y * other.g0);
}

fn magnitude__anti_wedge__plane(self_: Magnitude, other: Plane) -> Plane {
    return Plane(vec4<f32>(self_.g0.y) * other.g0);
}

fn magnitude__anti_wedge__plane_at_origin(self_: Magnitude, other: PlaneAtOrigin) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.y) * other.g0);
}

fn magnitude__anti_wedge__point(self_: Magnitude, other: Point) -> Point {
    return Point(vec4<f32>(self_.g0.y) * other.g0);
}

fn magnitude__anti_wedge__point_at_infinity(self_: Magnitude, other: PointAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0.y) * other.g0);
}

fn magnitude__anti_wedge__rotor(self_: Magnitude, other: Rotor) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.w), vec4<f32>(0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn magnitude__anti_wedge__scalar(self_: Magnitude, other: Scalar) -> Scalar {
    return Scalar(self_.g0.y * other.g0);
}

fn magnitude__anti_wedge__transflector(self_: Magnitude, other: Transflector) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.y) * other.g0, vec4<f32>(self_.g0.y) * other.g1);
}

fn magnitude__anti_wedge__translator(self_: Magnitude, other: Translator) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.w), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn motor__anti_wedge__anti_scalar(self_: Motor, other: AntiScalar) -> Motor {
    return Motor(self_.g0 * vec4<f32>(other.g0), self_.g1 * vec3<f32>(other.g0));
}

fn motor__anti_wedge__flector(self_: Motor, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g1.w, 0.0, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g1.w, -other.g1.z) + vec4<f32>(self_.g0.w) * other.g0 + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0), vec4<f32>(self_.g0.w) * other.g1);
}

fn motor__anti_wedge__flector_at_infinity(self_: Motor, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(self_.g0.xyzx * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * other.g0);
}

fn motor__anti_wedge__horizon(self_: Motor, other: Horizon) -> FlectorAtInfinity {
    return FlectorAtInfinity(self_.g0 * vec4<f32>(other.g0));
}

fn motor__anti_wedge__line(self_: Motor, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.w) * other.g1, vec4<f32>(0.0));
}

fn motor__anti_wedge__line_at_infinity(self_: Motor, other: LineAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.w) * other.g0);
}

fn motor__anti_wedge__line_at_origin(self_: Motor, other: LineAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(0.0), vec4<f32>(0.0));
}

fn motor__anti_wedge__magnitude(self_: Motor, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * other.g0, vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y), self_.g1 * vec3<f32>(other.g0.y), vec4<f32>(0.0));
}

fn motor__anti_wedge__motor(self_: Motor, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z, self_.g0.w) * vec2<f32>(-other.g1.z, other.g0.w) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.w) * other.g1 + self_.g1 * vec3<f32>(other.g0.w), vec4<f32>(0.0));
}

fn motor__anti_wedge__multi_vector(self_: Motor, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g3.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g3.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g3.z, 0.0) + vec2<f32>(self_.g0.w) * other.g0 + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g2.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g4.w, 0.0, 0.0, -other.g4.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g4.w, 0.0, -other.g4.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g4.w, -other.g4.z) + vec4<f32>(self_.g0.w) * other.g1 + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g4.z, other.g4.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g4.z, 0.0, -other.g4.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g4.y, other.g4.x, 0.0, 0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y) + vec3<f32>(self_.g0.w) * other.g2, vec3<f32>(self_.g0.w) * other.g3 + self_.g1 * vec3<f32>(other.g0.y), vec4<f32>(self_.g0.w) * other.g4);
}

fn motor__anti_wedge__multi_vector_at_infinity(self_: Motor, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g2.z, 0.0) + vec2<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y) + vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.w) * other.g2);
}

fn motor__anti_wedge__multi_vector_at_origin(self_: Motor, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g1.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g2.z, other.g2.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g2.z, 0.0, -other.g2.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g2.y, other.g2.x, 0.0, 0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y) + vec3<f32>(self_.g0.w) * other.g1, self_.g1 * vec3<f32>(other.g0.y), vec4<f32>(self_.g0.w) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0));
}

fn motor__anti_wedge__origin(self_: Motor, other: Origin) -> Origin {
    return Origin(self_.g0.w * other.g0);
}

fn motor__anti_wedge__plane(self_: Motor, other: Plane) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0), vec4<f32>(self_.g0.w) * other.g0);
}

fn motor__anti_wedge__plane_at_origin(self_: Motor, other: PlaneAtOrigin) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0), vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn motor__anti_wedge__point(self_: Motor, other: Point) -> Point {
    return Point(vec4<f32>(self_.g0.w) * other.g0);
}

fn motor__anti_wedge__point_at_infinity(self_: Motor, other: PointAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0.w) * other.g0);
}

fn motor__anti_wedge__rotor(self_: Motor, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g1 * vec3<f32>(other.g0.w), vec4<f32>(0.0));
}

fn motor__anti_wedge__scalar(self_: Motor, other: Scalar) -> Scalar {
    return Scalar(self_.g0.w * other.g0);
}

fn motor__anti_wedge__transflector(self_: Motor, other: Transflector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g1.w, 0.0, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g1.w, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0), vec4<f32>(self_.g0.w) * other.g1);
}

fn motor__anti_wedge__translator(self_: Motor, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z, self_.g0.w) * vec2<f32>(-other.g0.z, other.g0.w), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + self_.g1 * vec3<f32>(other.g0.w), vec4<f32>(0.0));
}

fn multi_vector__anti_wedge__anti_scalar(self_: MultiVector, other: AntiScalar) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0), self_.g1 * vec4<f32>(other.g0), self_.g2 * vec3<f32>(other.g0), self_.g3 * vec3<f32>(other.g0), self_.g4 * vec4<f32>(other.g0));
}

fn multi_vector__anti_wedge__flector(self_: MultiVector, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g1.w) * vec2<f32>(-other.g1.w, 0.0) + vec2<f32>(self_.g4.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g4.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g4.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g4.w) * vec2<f32>(other.g0.w, 0.0), vec4<f32>(self_.g0.y) * other.g0 + vec4<f32>(self_.g2.x) * vec4<f32>(other.g1.w, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, other.g1.w, 0.0, -other.g1.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, other.g1.w, -other.g1.z) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g3.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g3.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0), vec3<f32>(self_.g4.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g4.x, self_.g4.y, self_.g4.z) * vec3<f32>(other.g1.w) + vec3<f32>(self_.g4.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(self_.g0.y) * other.g1);
}

fn multi_vector__anti_wedge__flector_at_infinity(self_: MultiVector, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g1.w) * vec2<f32>(-other.g0.w, 0.0) + vec2<f32>(self_.g4.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g4.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g4.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + self_.g2 * vec3<f32>(other.g0.w), vec3<f32>(0.0) - vec3<f32>(self_.g4.x, self_.g4.y, self_.g4.z) * vec3<f32>(other.g0.w));
}

fn multi_vector__anti_wedge__horizon(self_: MultiVector, other: Horizon) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0) + vec2<f32>(self_.g1.w) * vec2<f32>(-other.g0, 0.0), self_.g2 * vec3<f32>(other.g0), vec3<f32>(0.0) - vec3<f32>(self_.g4.x, self_.g4.y, self_.g4.z) * vec3<f32>(other.g0));
}

fn multi_vector__anti_wedge__line(self_: MultiVector, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g2.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(self_.g4.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g4.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g4.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g4.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(self_.g0.y) * other.g0, vec3<f32>(self_.g0.y) * other.g1, vec4<f32>(0.0));
}

fn multi_vector__anti_wedge__line_at_infinity(self_: MultiVector, other: LineAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g2.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(self_.g4.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.y) * other.g0);
}

fn multi_vector__anti_wedge__line_at_origin(self_: MultiVector, other: LineAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g3.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(self_.g4.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g4.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g4.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z), vec3<f32>(self_.g0.y) * other.g0, vec3<f32>(0.0), vec4<f32>(0.0));
}

fn multi_vector__anti_wedge__magnitude(self_: MultiVector, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.y) * other.g0, self_.g1 * vec4<f32>(other.g0.y), self_.g2 * vec3<f32>(other.g0.y), self_.g3 * vec3<f32>(other.g0.y), self_.g4 * vec4<f32>(other.g0.y));
}

fn multi_vector__anti_wedge__motor(self_: MultiVector, other: Motor) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.w) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g0.z, 0.0), self_.g1 * vec4<f32>(other.g0.w) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g4.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g4.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g4.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + self_.g2 * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.y) * other.g1 + self_.g3 * vec3<f32>(other.g0.w), self_.g4 * vec4<f32>(other.g0.w));
}

fn multi_vector__anti_wedge__multi_vector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.y) * other.g0 + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g4.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g4.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g4.z, 0.0) + vec2<f32>(self_.g1.w) * vec2<f32>(-other.g4.w, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g3.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g3.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g3.z, 0.0) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g2.z, 0.0) + vec2<f32>(self_.g4.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g4.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g4.z) * vec2<f32>(other.g1.z, 0.0) + vec2<f32>(self_.g4.w) * vec2<f32>(other.g1.w, 0.0), vec4<f32>(self_.g0.y) * other.g1 + self_.g1 * vec4<f32>(other.g0.y) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g4.w, 0.0, 0.0, -other.g4.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, other.g4.w, 0.0, -other.g4.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, other.g4.w, -other.g4.z) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, -other.g4.z, other.g4.y, 0.0) + vec4<f32>(self_.g3.y) * vec4<f32>(other.g4.z, 0.0, -other.g4.x, 0.0) + vec4<f32>(self_.g3.z) * vec4<f32>(-other.g4.y, other.g4.x, 0.0, 0.0) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, other.g3.z, -other.g3.y, -other.g2.x) + vec4<f32>(self_.g4.y) * vec4<f32>(-other.g3.z, 0.0, other.g3.x, -other.g2.y) + vec4<f32>(self_.g4.z) * vec4<f32>(other.g3.y, -other.g3.x, 0.0, -other.g2.z) + vec4<f32>(self_.g4.w) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0), vec3<f32>(self_.g0.y) * other.g2 + self_.g2 * vec3<f32>(other.g0.y) + vec3<f32>(self_.g4.x) * vec3<f32>(0.0, -other.g4.z, other.g4.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g4.z, 0.0, -other.g4.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g4.y, other.g4.x, 0.0), vec3<f32>(self_.g0.y) * other.g3 + self_.g3 * vec3<f32>(other.g0.y) - vec3<f32>(self_.g4.x, self_.g4.y, self_.g4.z) * vec3<f32>(other.g4.w) + vec3<f32>(self_.g4.w) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z), vec4<f32>(self_.g0.y) * other.g4 + self_.g4 * vec4<f32>(other.g0.y));
}

fn multi_vector__anti_wedge__multi_vector_at_infinity(self_: MultiVector, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.y) * other.g0 + vec2<f32>(self_.g1.w) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g2.z, 0.0) + vec2<f32>(self_.g4.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g4.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g4.z) * vec2<f32>(other.g1.z, 0.0), vec3<f32>(self_.g0.y) * other.g1 + self_.g2 * vec3<f32>(other.g0.y) + vec3<f32>(self_.g4.x) * vec3<f32>(0.0, other.g2.z, -other.g2.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g2.z, 0.0, other.g2.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g2.y, -other.g2.x, 0.0), vec3<f32>(self_.g0.y) * other.g2 - vec3<f32>(self_.g4.x, self_.g4.y, self_.g4.z) * vec3<f32>(other.g0.y));
}

fn multi_vector__anti_wedge__multi_vector_at_origin(self_: MultiVector, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.y) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g2.z, 0.0) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g4.w) * vec2<f32>(other.g0.x, 0.0), vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + self_.g1 * vec4<f32>(other.g0.y) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.z) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, -other.g2.z, other.g2.y, 0.0) + vec4<f32>(self_.g3.y) * vec4<f32>(other.g2.z, 0.0, -other.g2.x, 0.0) + vec4<f32>(self_.g3.z) * vec4<f32>(-other.g2.y, other.g2.x, 0.0, 0.0) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g4.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + self_.g4.wwwz * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, -other.g1.z), vec3<f32>(self_.g0.y) * other.g1 + self_.g2 * vec3<f32>(other.g0.y) + vec3<f32>(self_.g4.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0), self_.g3 * vec3<f32>(other.g0.y) + vec3<f32>(self_.g4.w) * other.g2, vec4<f32>(self_.g0.y) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0) + self_.g4 * vec4<f32>(other.g0.y));
}

fn multi_vector__anti_wedge__origin(self_: MultiVector, other: Origin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g4.w) * vec2<f32>(other.g0, 0.0), vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn multi_vector__anti_wedge__plane(self_: MultiVector, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g1.w) * vec2<f32>(-other.g0.w, 0.0), vec4<f32>(self_.g2.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g3.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g3.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0), vec3<f32>(self_.g4.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g4.x, self_.g4.y, self_.g4.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g4.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g0.y) * other.g0);
}

fn multi_vector__anti_wedge__plane_at_origin(self_: MultiVector, other: PlaneAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(self_.g2.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g3.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g3.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0), vec3<f32>(self_.g4.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g4.w) * other.g0, vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn multi_vector__anti_wedge__point(self_: MultiVector, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g4.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g4.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g4.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g4.w) * vec2<f32>(other.g0.w, 0.0), vec4<f32>(self_.g0.y) * other.g0, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn multi_vector__anti_wedge__point_at_infinity(self_: MultiVector, other: PointAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g4.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g4.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g4.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(self_.g0.y) * other.g0, vec3<f32>(0.0));
}

fn multi_vector__anti_wedge__rotor(self_: MultiVector, other: Rotor) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.w) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g0.z, 0.0), self_.g1 * vec4<f32>(other.g0.w) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g4.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g4.wwwz * other.g0.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + self_.g2 * vec3<f32>(other.g0.w), self_.g3 * vec3<f32>(other.g0.w), self_.g4 * vec4<f32>(other.g0.w));
}

fn multi_vector__anti_wedge__scalar(self_: MultiVector, other: Scalar) -> Scalar {
    return Scalar(self_.g0.y * other.g0);
}

fn multi_vector__anti_wedge__transflector(self_: MultiVector, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g1.w) * vec2<f32>(-other.g1.w, 0.0) + vec2<f32>(self_.g4.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g4.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g4.z) * vec2<f32>(other.g0.z, 0.0), vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g1.w, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, other.g1.w, 0.0, -other.g1.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, other.g1.w, -other.g1.z) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g3.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g3.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0), vec3<f32>(self_.g4.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g4.x, self_.g4.y, self_.g4.z) * vec3<f32>(other.g1.w) + vec3<f32>(self_.g4.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(self_.g0.y) * other.g1);
}

fn multi_vector__anti_wedge__translator(self_: MultiVector, other: Translator) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.w) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g0.z, 0.0), self_.g1 * vec4<f32>(other.g0.w) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g4.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g4.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0), self_.g2 * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + self_.g3 * vec3<f32>(other.g0.w), self_.g4 * vec4<f32>(other.g0.w));
}

fn multi_vector_at_infinity__anti_wedge__anti_scalar(self_: MultiVectorAtInfinity, other: AntiScalar) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0 * vec2<f32>(other.g0), self_.g1 * vec3<f32>(other.g0), self_.g2 * vec3<f32>(other.g0));
}

fn multi_vector_at_infinity__anti_wedge__flector(self_: MultiVectorAtInfinity, other: Flector) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.w, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g1.z, 0.0), vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z));
}

fn multi_vector_at_infinity__anti_wedge__line(self_: MultiVectorAtInfinity, other: Line) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g2.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(self_.g0.y) * other.g0, vec3<f32>(0.0));
}

fn multi_vector_at_infinity__anti_wedge__line_at_origin(self_: MultiVectorAtInfinity, other: LineAtOrigin) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g2.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(self_.g0.y) * other.g0, vec3<f32>(0.0));
}

fn multi_vector_at_infinity__anti_wedge__magnitude(self_: MultiVectorAtInfinity, other: Magnitude) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0 * vec2<f32>(other.g0.y), self_.g1 * vec3<f32>(other.g0.y), self_.g2 * vec3<f32>(other.g0.y));
}

fn multi_vector_at_infinity__anti_wedge__motor(self_: MultiVectorAtInfinity, other: Motor) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0 * vec2<f32>(other.g0.w) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + self_.g1 * vec3<f32>(other.g0.w), self_.g2 * vec3<f32>(other.g0.w));
}

fn multi_vector_at_infinity__anti_wedge__multi_vector(self_: MultiVectorAtInfinity, other: MultiVector) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.w, other.g0.y) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g4.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g4.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g4.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g2.z, 0.0), vec3<f32>(self_.g0.y) * other.g2 + self_.g1 * vec3<f32>(other.g0.y) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g4.z, other.g4.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g4.z, 0.0, -other.g4.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g4.y, other.g4.x, 0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z) + self_.g2 * vec3<f32>(other.g0.y));
}

fn multi_vector_at_infinity__anti_wedge__multi_vector_at_origin(self_: MultiVectorAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.y) * other.g0 + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g2.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g1.z, 0.0), vec3<f32>(self_.g0.y) * other.g1 + self_.g1 * vec3<f32>(other.g0.y) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0), vec3<f32>(self_.g0.y) * other.g2 + self_.g2 * vec3<f32>(other.g0.y));
}

fn multi_vector_at_infinity__anti_wedge__origin(self_: MultiVectorAtInfinity, other: Origin) -> Scalar {
    return Scalar(self_.g0.y * other.g0);
}

fn multi_vector_at_infinity__anti_wedge__plane(self_: MultiVectorAtInfinity, other: Plane) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn multi_vector_at_infinity__anti_wedge__plane_at_origin(self_: MultiVectorAtInfinity, other: PlaneAtOrigin) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.y) * other.g0);
}

fn multi_vector_at_infinity__anti_wedge__point(self_: MultiVectorAtInfinity, other: Point) -> Scalar {
    return Scalar(self_.g0.y * other.g0.w);
}

fn multi_vector_at_infinity__anti_wedge__rotor(self_: MultiVectorAtInfinity, other: Rotor) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0 * vec2<f32>(other.g0.w) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + self_.g1 * vec3<f32>(other.g0.w), self_.g2 * vec3<f32>(other.g0.w));
}

fn multi_vector_at_infinity__anti_wedge__transflector(self_: MultiVectorAtInfinity, other: Transflector) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g1.z, 0.0), vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z));
}

fn multi_vector_at_infinity__anti_wedge__translator(self_: MultiVectorAtInfinity, other: Translator) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0 * vec2<f32>(other.g0.w), self_.g1 * vec3<f32>(other.g0.w), self_.g2 * vec3<f32>(other.g0.w));
}

fn multi_vector_at_origin__anti_wedge__anti_scalar(self_: MultiVectorAtOrigin, other: AntiScalar) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0 * vec2<f32>(other.g0), self_.g1 * vec3<f32>(other.g0), self_.g2 * vec3<f32>(other.g0));
}

fn multi_vector_at_origin__anti_wedge__flector(self_: MultiVectorAtOrigin, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.w, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(other.g0.z, 0.0), vec4<f32>(self_.g0.y) * other.g0 + vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.w, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g1.w, 0.0, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g1.w, -other.g1.z), vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(0.0) - self_.g2 * vec3<f32>(other.g1.w), vec4<f32>(self_.g0.y) * other.g1);
}

fn multi_vector_at_origin__anti_wedge__flector_at_infinity(self_: MultiVectorAtOrigin, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0 * vec2<f32>(-other.g0.w) + vec2<f32>(self_.g2.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + self_.g1 * vec3<f32>(other.g0.w), vec3<f32>(0.0) - self_.g2 * vec3<f32>(other.g0.w));
}

fn multi_vector_at_origin__anti_wedge__horizon(self_: MultiVectorAtOrigin, other: Horizon) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0 * vec2<f32>(-other.g0), self_.g1 * vec3<f32>(other.g0), vec3<f32>(0.0) - self_.g2 * vec3<f32>(other.g0));
}

fn multi_vector_at_origin__anti_wedge__line(self_: MultiVectorAtOrigin, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g1.z, 0.0), vec4<f32>(self_.g2.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z), vec3<f32>(self_.g0.y) * other.g0, vec3<f32>(self_.g0.y) * other.g1, vec4<f32>(0.0));
}

fn multi_vector_at_origin__anti_wedge__line_at_infinity(self_: MultiVectorAtOrigin, other: LineAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.y) * other.g0);
}

fn multi_vector_at_origin__anti_wedge__line_at_origin(self_: MultiVectorAtOrigin, other: LineAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g2.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(self_.g0.y) * other.g0, vec3<f32>(0.0));
}

fn multi_vector_at_origin__anti_wedge__magnitude(self_: MultiVectorAtOrigin, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.y) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y), self_.g1 * vec3<f32>(other.g0.y), vec3<f32>(0.0), vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, self_.g2.x) * vec4<f32>(other.g0.y, other.g0.y, other.g0.y, 0.0));
}

fn multi_vector_at_origin__anti_wedge__motor(self_: MultiVectorAtOrigin, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g1.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + self_.g1 * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.y) * other.g1, vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, self_.g2.x) * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0));
}

fn multi_vector_at_origin__anti_wedge__multi_vector(self_: MultiVectorAtOrigin, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g4.w, 0.0) + vec2<f32>(self_.g0.y) * other.g0 + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g3.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g3.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g3.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(other.g1.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.y) * other.g1 + vec4<f32>(self_.g1.x) * vec4<f32>(other.g4.w, 0.0, 0.0, -other.g4.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g4.w, 0.0, -other.g4.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g4.w, -other.g4.z) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, other.g3.z, -other.g3.y, -other.g2.x) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g3.z, 0.0, other.g3.x, -other.g2.y) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g3.y, -other.g3.x, 0.0, -other.g2.z), vec3<f32>(self_.g0.y) * other.g2 + self_.g1 * vec3<f32>(other.g0.y) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g4.z, other.g4.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g4.z, 0.0, -other.g4.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g4.y, other.g4.x, 0.0), vec3<f32>(self_.g0.y) * other.g3 - self_.g2 * vec3<f32>(other.g4.w), vec4<f32>(self_.g0.y) * other.g4 + vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, self_.g2.x) * vec4<f32>(other.g0.y, other.g0.y, other.g0.y, 0.0));
}

fn multi_vector_at_origin__anti_wedge__multi_vector_at_infinity(self_: MultiVectorAtOrigin, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.y) * other.g0 + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g2.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(other.g1.z, 0.0), vec3<f32>(self_.g0.y) * other.g1 + self_.g1 * vec3<f32>(other.g0.y) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g2.z, -other.g2.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g2.z, 0.0, other.g2.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g2.y, -other.g2.x, 0.0), vec3<f32>(self_.g0.y) * other.g2 - self_.g2 * vec3<f32>(other.g0.y));
}

fn multi_vector_at_origin__anti_wedge__multi_vector_at_origin(self_: MultiVectorAtOrigin, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.y) * other.g0 + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g2.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g1.z, 0.0), vec3<f32>(self_.g0.y) * other.g1 + self_.g1 * vec3<f32>(other.g0.y) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0), vec3<f32>(self_.g0.y) * other.g2 + self_.g2 * vec3<f32>(other.g0.y));
}

fn multi_vector_at_origin__anti_wedge__origin(self_: MultiVectorAtOrigin, other: Origin) -> Origin {
    return Origin(self_.g0.y * other.g0);
}

fn multi_vector_at_origin__anti_wedge__plane(self_: MultiVectorAtOrigin, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.w, 0.0), vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z), vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(0.0) - self_.g2 * vec3<f32>(other.g0.w), vec4<f32>(self_.g0.y) * other.g0);
}

fn multi_vector_at_origin__anti_wedge__plane_at_origin(self_: MultiVectorAtOrigin, other: PlaneAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.y) * other.g0);
}

fn multi_vector_at_origin__anti_wedge__point(self_: MultiVectorAtOrigin, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g2.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(other.g0.z, 0.0), vec4<f32>(self_.g0.y) * other.g0, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn multi_vector_at_origin__anti_wedge__point_at_infinity(self_: MultiVectorAtOrigin, other: PointAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g2.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(self_.g0.y) * other.g0, vec3<f32>(0.0));
}

fn multi_vector_at_origin__anti_wedge__rotor(self_: MultiVectorAtOrigin, other: Rotor) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0 * vec2<f32>(other.g0.w) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + self_.g1 * vec3<f32>(other.g0.w), self_.g2 * vec3<f32>(other.g0.w));
}

fn multi_vector_at_origin__anti_wedge__scalar(self_: MultiVectorAtOrigin, other: Scalar) -> Scalar {
    return Scalar(self_.g0.y * other.g0);
}

fn multi_vector_at_origin__anti_wedge__transflector(self_: MultiVectorAtOrigin, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.w, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(other.g0.z, 0.0), vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.w, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g1.w, 0.0, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g1.w, -other.g1.z), vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(0.0) - self_.g2 * vec3<f32>(other.g1.w), vec4<f32>(self_.g0.y) * other.g1);
}

fn multi_vector_at_origin__anti_wedge__translator(self_: MultiVectorAtOrigin, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0), self_.g1 * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, self_.g2.x) * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0));
}

fn origin__anti_wedge__anti_scalar(self_: Origin, other: AntiScalar) -> Origin {
    return Origin(self_.g0 * other.g0);
}

fn origin__anti_wedge__flector(self_: Origin, other: Flector) -> Scalar {
    return Scalar(0.0 - self_.g0 * other.g1.w);
}

fn origin__anti_wedge__flector_at_infinity(self_: Origin, other: FlectorAtInfinity) -> Scalar {
    return Scalar(0.0 - self_.g0 * other.g0.w);
}

fn origin__anti_wedge__horizon(self_: Origin, other: Horizon) -> Scalar {
    return Scalar(0.0 - self_.g0 * other.g0);
}

fn origin__anti_wedge__magnitude(self_: Origin, other: Magnitude) -> Origin {
    return Origin(self_.g0 * other.g0.y);
}

fn origin__anti_wedge__motor(self_: Origin, other: Motor) -> Origin {
    return Origin(self_.g0 * other.g0.w);
}

fn origin__anti_wedge__multi_vector(self_: Origin, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0) * vec2<f32>(-other.g4.w, 0.0), vec4<f32>(self_.g0) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn origin__anti_wedge__multi_vector_at_infinity(self_: Origin, other: MultiVectorAtInfinity) -> Scalar {
    return Scalar(0.0 - self_.g0 * other.g0.y);
}

fn origin__anti_wedge__multi_vector_at_origin(self_: Origin, other: MultiVectorAtOrigin) -> Origin {
    return Origin(self_.g0 * other.g0.y);
}

fn origin__anti_wedge__plane(self_: Origin, other: Plane) -> Scalar {
    return Scalar(0.0 - self_.g0 * other.g0.w);
}

fn origin__anti_wedge__rotor(self_: Origin, other: Rotor) -> Origin {
    return Origin(self_.g0 * other.g0.w);
}

fn origin__anti_wedge__transflector(self_: Origin, other: Transflector) -> Scalar {
    return Scalar(0.0 - self_.g0 * other.g1.w);
}

fn origin__anti_wedge__translator(self_: Origin, other: Translator) -> Origin {
    return Origin(self_.g0 * other.g0.w);
}

fn plane__anti_wedge__anti_scalar(self_: Plane, other: AntiScalar) -> Plane {
    return Plane(self_.g0 * vec4<f32>(other.g0));
}

fn plane__anti_wedge__flector(self_: Plane, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(other.g0.w, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(0.0));
}

fn plane__anti_wedge__flector_at_infinity(self_: Plane, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w));
}

fn plane__anti_wedge__horizon(self_: Plane, other: Horizon) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0));
}

fn plane__anti_wedge__line(self_: Plane, other: Line) -> Point {
    return Point(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn plane__anti_wedge__line_at_infinity(self_: Plane, other: LineAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn plane__anti_wedge__line_at_origin(self_: Plane, other: LineAtOrigin) -> Point {
    return Point(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g0.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z));
}

fn plane__anti_wedge__magnitude(self_: Plane, other: Magnitude) -> Plane {
    return Plane(self_.g0 * vec4<f32>(other.g0.y));
}

fn plane__anti_wedge__motor(self_: Plane, other: Motor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g0 * vec4<f32>(other.g0.w));
}

fn plane__anti_wedge__multi_vector(self_: Plane, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(other.g1.w, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g3.z, -other.g3.y, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g3.z, 0.0, other.g3.x, -other.g2.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g3.y, -other.g3.x, 0.0, -other.g2.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g4.z, other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g4.z, 0.0, -other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g4.y, other.g4.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g4.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z), self_.g0 * vec4<f32>(other.g0.y));
}

fn plane__anti_wedge__multi_vector_at_infinity(self_: Plane, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, 0.0, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y));
}

fn plane__anti_wedge__multi_vector_at_origin(self_: Plane, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + self_.g0.wwwz * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, -other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0), vec3<f32>(self_.g0.w) * other.g2, self_.g0 * vec4<f32>(other.g0.y));
}

fn plane__anti_wedge__origin(self_: Plane, other: Origin) -> Scalar {
    return Scalar(self_.g0.w * other.g0);
}

fn plane__anti_wedge__plane(self_: Plane, other: Plane) -> Line {
    return Line(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn plane__anti_wedge__plane_at_origin(self_: Plane, other: PlaneAtOrigin) -> Line {
    return Line(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.w) * other.g0);
}

fn plane__anti_wedge__point(self_: Plane, other: Point) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z + self_.g0.w * other.g0.w);
}

fn plane__anti_wedge__point_at_infinity(self_: Plane, other: PointAtInfinity) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn plane__anti_wedge__rotor(self_: Plane, other: Rotor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g0.wwwz * other.g0.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0), self_.g0 * vec4<f32>(other.g0.w));
}

fn plane__anti_wedge__transflector(self_: Plane, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(0.0));
}

fn plane__anti_wedge__translator(self_: Plane, other: Translator) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), self_.g0 * vec4<f32>(other.g0.w));
}

fn plane_at_origin__anti_wedge__anti_scalar(self_: PlaneAtOrigin, other: AntiScalar) -> PlaneAtOrigin {
    return PlaneAtOrigin(self_.g0 * vec3<f32>(other.g0));
}

fn plane_at_origin__anti_wedge__flector(self_: PlaneAtOrigin, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g1.w), vec4<f32>(0.0));
}

fn plane_at_origin__anti_wedge__flector_at_infinity(self_: PlaneAtOrigin, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0.w));
}

fn plane_at_origin__anti_wedge__horizon(self_: PlaneAtOrigin, other: Horizon) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0));
}

fn plane_at_origin__anti_wedge__line(self_: PlaneAtOrigin, other: Line) -> Point {
    return Point(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z));
}

fn plane_at_origin__anti_wedge__line_at_infinity(self_: PlaneAtOrigin, other: LineAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn plane_at_origin__anti_wedge__line_at_origin(self_: PlaneAtOrigin, other: LineAtOrigin) -> Origin {
    return Origin(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn plane_at_origin__anti_wedge__magnitude(self_: PlaneAtOrigin, other: Magnitude) -> PlaneAtOrigin {
    return PlaneAtOrigin(self_.g0 * vec3<f32>(other.g0.y));
}

fn plane_at_origin__anti_wedge__motor(self_: PlaneAtOrigin, other: Motor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0));
}

fn plane_at_origin__anti_wedge__multi_vector(self_: PlaneAtOrigin, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g3.z, -other.g3.y, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g3.z, 0.0, other.g3.x, -other.g2.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g3.y, -other.g3.x, 0.0, -other.g2.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g4.z, other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g4.z, 0.0, -other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g4.y, other.g4.x, 0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g4.w), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g0.y, other.g0.y, other.g0.y, 0.0));
}

fn plane_at_origin__anti_wedge__multi_vector_at_infinity(self_: PlaneAtOrigin, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, 0.0, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, 0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0.y));
}

fn plane_at_origin__anti_wedge__multi_vector_at_origin(self_: PlaneAtOrigin, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0), self_.g0 * vec3<f32>(other.g0.y));
}

fn plane_at_origin__anti_wedge__plane(self_: PlaneAtOrigin, other: Plane) -> Line {
    return Line(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0.w));
}

fn plane_at_origin__anti_wedge__plane_at_origin(self_: PlaneAtOrigin, other: PlaneAtOrigin) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn plane_at_origin__anti_wedge__point(self_: PlaneAtOrigin, other: Point) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn plane_at_origin__anti_wedge__point_at_infinity(self_: PlaneAtOrigin, other: PointAtInfinity) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn plane_at_origin__anti_wedge__rotor(self_: PlaneAtOrigin, other: Rotor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0));
}

fn plane_at_origin__anti_wedge__transflector(self_: PlaneAtOrigin, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g1.w), vec4<f32>(0.0));
}

fn plane_at_origin__anti_wedge__translator(self_: PlaneAtOrigin, other: Translator) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0));
}

fn point__anti_wedge__anti_scalar(self_: Point, other: AntiScalar) -> Point {
    return Point(self_.g0 * vec4<f32>(other.g0));
}

fn point__anti_wedge__flector(self_: Point, other: Flector) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z - self_.g0.w * other.g1.w);
}

fn point__anti_wedge__flector_at_infinity(self_: Point, other: FlectorAtInfinity) -> Scalar {
    return Scalar(0.0 - self_.g0.w * other.g0.w);
}

fn point__anti_wedge__horizon(self_: Point, other: Horizon) -> Scalar {
    return Scalar(0.0 - self_.g0.w * other.g0);
}

fn point__anti_wedge__magnitude(self_: Point, other: Magnitude) -> Point {
    return Point(self_.g0 * vec4<f32>(other.g0.y));
}

fn point__anti_wedge__motor(self_: Point, other: Motor) -> Point {
    return Point(self_.g0 * vec4<f32>(other.g0.w));
}

fn point__anti_wedge__multi_vector(self_: Point, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g4.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g4.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g4.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(-other.g4.w, 0.0), self_.g0 * vec4<f32>(other.g0.y), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn point__anti_wedge__multi_vector_at_infinity(self_: Point, other: MultiVectorAtInfinity) -> Scalar {
    return Scalar(0.0 - self_.g0.w * other.g0.y);
}

fn point__anti_wedge__multi_vector_at_origin(self_: Point, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g2.z, 0.0), self_.g0 * vec4<f32>(other.g0.y), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn point__anti_wedge__plane(self_: Point, other: Plane) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z - self_.g0.w * other.g0.w);
}

fn point__anti_wedge__plane_at_origin(self_: Point, other: PlaneAtOrigin) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn point__anti_wedge__rotor(self_: Point, other: Rotor) -> Point {
    return Point(self_.g0 * vec4<f32>(other.g0.w));
}

fn point__anti_wedge__transflector(self_: Point, other: Transflector) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z - self_.g0.w * other.g1.w);
}

fn point__anti_wedge__translator(self_: Point, other: Translator) -> Point {
    return Point(self_.g0 * vec4<f32>(other.g0.w));
}

fn point_at_infinity__anti_wedge__anti_scalar(self_: PointAtInfinity, other: AntiScalar) -> PointAtInfinity {
    return PointAtInfinity(self_.g0 * vec3<f32>(other.g0));
}

fn point_at_infinity__anti_wedge__flector(self_: PointAtInfinity, other: Flector) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z);
}

fn point_at_infinity__anti_wedge__magnitude(self_: PointAtInfinity, other: Magnitude) -> PointAtInfinity {
    return PointAtInfinity(self_.g0 * vec3<f32>(other.g0.y));
}

fn point_at_infinity__anti_wedge__motor(self_: PointAtInfinity, other: Motor) -> PointAtInfinity {
    return PointAtInfinity(self_.g0 * vec3<f32>(other.g0.w));
}

fn point_at_infinity__anti_wedge__multi_vector(self_: PointAtInfinity, other: MultiVector) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g4.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g4.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g4.z, 0.0), self_.g0 * vec3<f32>(other.g0.y), vec3<f32>(0.0));
}

fn point_at_infinity__anti_wedge__multi_vector_at_origin(self_: PointAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g2.z, 0.0), self_.g0 * vec3<f32>(other.g0.y), vec3<f32>(0.0));
}

fn point_at_infinity__anti_wedge__plane(self_: PointAtInfinity, other: Plane) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn point_at_infinity__anti_wedge__plane_at_origin(self_: PointAtInfinity, other: PlaneAtOrigin) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn point_at_infinity__anti_wedge__rotor(self_: PointAtInfinity, other: Rotor) -> PointAtInfinity {
    return PointAtInfinity(self_.g0 * vec3<f32>(other.g0.w));
}

fn point_at_infinity__anti_wedge__transflector(self_: PointAtInfinity, other: Transflector) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z);
}

fn point_at_infinity__anti_wedge__translator(self_: PointAtInfinity, other: Translator) -> PointAtInfinity {
    return PointAtInfinity(self_.g0 * vec3<f32>(other.g0.w));
}

fn rotor__anti_wedge__anti_scalar(self_: Rotor, other: AntiScalar) -> Rotor {
    return Rotor(self_.g0 * vec4<f32>(other.g0));
}

fn rotor__anti_wedge__flector(self_: Rotor, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g1.w, 0.0, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g1.w, -other.g1.z) + vec4<f32>(self_.g0.w) * other.g0, vec4<f32>(self_.g0.w) * other.g1);
}

fn rotor__anti_wedge__flector_at_infinity(self_: Rotor, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(self_.g0.xyzx * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * other.g0);
}

fn rotor__anti_wedge__horizon(self_: Rotor, other: Horizon) -> FlectorAtInfinity {
    return FlectorAtInfinity(self_.g0 * vec4<f32>(other.g0));
}

fn rotor__anti_wedge__line(self_: Rotor, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.w) * other.g1, vec4<f32>(0.0));
}

fn rotor__anti_wedge__line_at_infinity(self_: Rotor, other: LineAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.w) * other.g0);
}

fn rotor__anti_wedge__line_at_origin(self_: Rotor, other: LineAtOrigin) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(self_.g0.w) * other.g0);
}

fn rotor__anti_wedge__magnitude(self_: Rotor, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * other.g0, vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn rotor__anti_wedge__motor(self_: Rotor, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z, self_.g0.w) * vec2<f32>(-other.g1.z, other.g0.w), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.w) * other.g1, vec4<f32>(0.0));
}

fn rotor__anti_wedge__multi_vector(self_: Rotor, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g3.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g3.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g3.z, 0.0) + vec2<f32>(self_.g0.w) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(other.g4.w, 0.0, 0.0, -other.g4.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g4.w, 0.0, -other.g4.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g4.w, -other.g4.z) + vec4<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y) + vec3<f32>(self_.g0.w) * other.g2, vec3<f32>(self_.g0.w) * other.g3, vec4<f32>(self_.g0.w) * other.g4);
}

fn rotor__anti_wedge__multi_vector_at_infinity(self_: Rotor, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g2.z, 0.0) + vec2<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y) + vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.w) * other.g2);
}

fn rotor__anti_wedge__multi_vector_at_origin(self_: Rotor, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g2.z, 0.0) + vec2<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y) + vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.w) * other.g2);
}

fn rotor__anti_wedge__origin(self_: Rotor, other: Origin) -> Origin {
    return Origin(self_.g0.w * other.g0);
}

fn rotor__anti_wedge__plane(self_: Rotor, other: Plane) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z), vec4<f32>(self_.g0.w) * other.g0);
}

fn rotor__anti_wedge__plane_at_origin(self_: Rotor, other: PlaneAtOrigin) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z), vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn rotor__anti_wedge__point(self_: Rotor, other: Point) -> Point {
    return Point(vec4<f32>(self_.g0.w) * other.g0);
}

fn rotor__anti_wedge__point_at_infinity(self_: Rotor, other: PointAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0.w) * other.g0);
}

fn rotor__anti_wedge__rotor(self_: Rotor, other: Rotor) -> Rotor {
    return Rotor(self_.g0.xyzx * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * other.g0);
}

fn rotor__anti_wedge__scalar(self_: Rotor, other: Scalar) -> Scalar {
    return Scalar(self_.g0.w * other.g0);
}

fn rotor__anti_wedge__transflector(self_: Rotor, other: Transflector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g1.w, 0.0, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g1.w, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(self_.g0.w) * other.g1);
}

fn rotor__anti_wedge__translator(self_: Rotor, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z, self_.g0.w) * vec2<f32>(-other.g0.z, other.g0.w), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn scalar__anti_wedge__anti_scalar(self_: Scalar, other: AntiScalar) -> Scalar {
    return Scalar(self_.g0 * other.g0);
}

fn scalar__anti_wedge__magnitude(self_: Scalar, other: Magnitude) -> Scalar {
    return Scalar(self_.g0 * other.g0.y);
}

fn scalar__anti_wedge__motor(self_: Scalar, other: Motor) -> Scalar {
    return Scalar(self_.g0 * other.g0.w);
}

fn scalar__anti_wedge__multi_vector(self_: Scalar, other: MultiVector) -> Scalar {
    return Scalar(self_.g0 * other.g0.y);
}

fn scalar__anti_wedge__multi_vector_at_origin(self_: Scalar, other: MultiVectorAtOrigin) -> Scalar {
    return Scalar(self_.g0 * other.g0.y);
}

fn scalar__anti_wedge__rotor(self_: Scalar, other: Rotor) -> Scalar {
    return Scalar(self_.g0 * other.g0.w);
}

fn scalar__anti_wedge__translator(self_: Scalar, other: Translator) -> Scalar {
    return Scalar(self_.g0 * other.g0.w);
}

fn transflector__anti_wedge__anti_scalar(self_: Transflector, other: AntiScalar) -> Transflector {
    return Transflector(self_.g0 * vec3<f32>(other.g0), self_.g1 * vec4<f32>(other.g0));
}

fn transflector__anti_wedge__flector(self_: Transflector, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g1.w) * vec2<f32>(other.g0.w, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g1.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(0.0));
}

fn transflector__anti_wedge__flector_at_infinity(self_: Transflector, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.w));
}

fn transflector__anti_wedge__horizon(self_: Transflector, other: Horizon) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0));
}

fn transflector__anti_wedge__line(self_: Transflector, other: Line) -> Point {
    return Point(vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn transflector__anti_wedge__line_at_infinity(self_: Transflector, other: LineAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn transflector__anti_wedge__line_at_origin(self_: Transflector, other: LineAtOrigin) -> Point {
    return Point(vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g1.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z));
}

fn transflector__anti_wedge__magnitude(self_: Transflector, other: Magnitude) -> Transflector {
    return Transflector(self_.g0 * vec3<f32>(other.g0.y), self_.g1 * vec4<f32>(other.g0.y));
}

fn transflector__anti_wedge__motor(self_: Transflector, other: Motor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g1 * vec4<f32>(other.g0.w));
}

fn transflector__anti_wedge__multi_vector(self_: Transflector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g4.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g4.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g4.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g1.z, 0.0) + vec2<f32>(self_.g1.w) * vec2<f32>(other.g1.w, 0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g0.y, other.g0.y, other.g0.y, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g3.z, -other.g3.y, -other.g2.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g3.z, 0.0, other.g3.x, -other.g2.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g3.y, -other.g3.x, 0.0, -other.g2.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g4.z, other.g4.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g4.z, 0.0, -other.g4.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g4.y, other.g4.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g4.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z), self_.g1 * vec4<f32>(other.g0.y));
}

fn transflector__anti_wedge__multi_vector_at_infinity(self_: Transflector, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g1.z, 0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g2.z, -other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g2.z, 0.0, other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g2.y, -other.g2.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.y));
}

fn transflector__anti_wedge__multi_vector_at_origin(self_: Transflector, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g2.z, 0.0) + vec2<f32>(self_.g1.w) * vec2<f32>(other.g0.x, 0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g0.y, other.g0.y, other.g0.y, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + self_.g1.wwwz * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, -other.g1.z), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0), vec3<f32>(self_.g1.w) * other.g2, self_.g1 * vec4<f32>(other.g0.y));
}

fn transflector__anti_wedge__origin(self_: Transflector, other: Origin) -> Scalar {
    return Scalar(self_.g1.w * other.g0);
}

fn transflector__anti_wedge__plane(self_: Transflector, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn transflector__anti_wedge__plane_at_origin(self_: Transflector, other: PlaneAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g1.w) * other.g0, vec4<f32>(0.0));
}

fn transflector__anti_wedge__point(self_: Transflector, other: Point) -> Scalar {
    return Scalar(self_.g1.x * other.g0.x + self_.g1.y * other.g0.y + self_.g1.z * other.g0.z + self_.g1.w * other.g0.w);
}

fn transflector__anti_wedge__point_at_infinity(self_: Transflector, other: PointAtInfinity) -> Scalar {
    return Scalar(self_.g1.x * other.g0.x + self_.g1.y * other.g0.y + self_.g1.z * other.g0.z);
}

fn transflector__anti_wedge__rotor(self_: Transflector, other: Rotor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g1.wwwz * other.g0.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0), self_.g1 * vec4<f32>(other.g0.w));
}

fn transflector__anti_wedge__transflector(self_: Transflector, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g1.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(0.0));
}

fn transflector__anti_wedge__translator(self_: Transflector, other: Translator) -> Transflector {
    return Transflector(self_.g0 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), self_.g1 * vec4<f32>(other.g0.w));
}

fn translator__anti_wedge__anti_scalar(self_: Translator, other: AntiScalar) -> Translator {
    return Translator(self_.g0 * vec4<f32>(other.g0));
}

fn translator__anti_wedge__flector(self_: Translator, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * other.g0, vec4<f32>(self_.g0.w) * other.g1);
}

fn translator__anti_wedge__flector_at_infinity(self_: Translator, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.w) * other.g0);
}

fn translator__anti_wedge__horizon(self_: Translator, other: Horizon) -> Horizon {
    return Horizon(self_.g0.w * other.g0);
}

fn translator__anti_wedge__line(self_: Translator, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.w) * other.g1, vec4<f32>(0.0));
}

fn translator__anti_wedge__line_at_infinity(self_: Translator, other: LineAtInfinity) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(self_.g0.w) * other.g0);
}

fn translator__anti_wedge__line_at_origin(self_: Translator, other: LineAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(0.0), vec4<f32>(0.0));
}

fn translator__anti_wedge__magnitude(self_: Translator, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * other.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y), vec4<f32>(0.0));
}

fn translator__anti_wedge__motor(self_: Translator, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z, self_.g0.w) * vec2<f32>(-other.g0.z, other.g0.w), vec4<f32>(0.0), vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g0.w) * other.g1, vec4<f32>(0.0));
}

fn translator__anti_wedge__multi_vector(self_: Translator, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g2.z, 0.0) + vec2<f32>(self_.g0.w) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g4.z, other.g4.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g4.z, 0.0, -other.g4.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g4.y, other.g4.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.w) * other.g2, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y) + vec3<f32>(self_.g0.w) * other.g3, vec4<f32>(self_.g0.w) * other.g4);
}

fn translator__anti_wedge__multi_vector_at_infinity(self_: Translator, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.w) * other.g2);
}

fn translator__anti_wedge__multi_vector_at_origin(self_: Translator, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z, self_.g0.w) * vec2<f32>(-other.g1.z, other.g0.y), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g2.z, other.g2.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g2.z, 0.0, -other.g2.x, 0.0) + self_.g0.zzzw * vec4<f32>(-other.g2.y, other.g2.x, 0.0, other.g0.x), vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y), vec4<f32>(self_.g0.w) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0));
}

fn translator__anti_wedge__origin(self_: Translator, other: Origin) -> Origin {
    return Origin(self_.g0.w * other.g0);
}

fn translator__anti_wedge__plane(self_: Translator, other: Plane) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g0.w) * other.g0);
}

fn translator__anti_wedge__plane_at_origin(self_: Translator, other: PlaneAtOrigin) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn translator__anti_wedge__point(self_: Translator, other: Point) -> Point {
    return Point(vec4<f32>(self_.g0.w) * other.g0);
}

fn translator__anti_wedge__point_at_infinity(self_: Translator, other: PointAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0.w) * other.g0);
}

fn translator__anti_wedge__rotor(self_: Translator, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z, self_.g0.w) * vec2<f32>(-other.g0.z, other.g0.w), vec4<f32>(0.0), vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w), vec4<f32>(0.0));
}

fn translator__anti_wedge__scalar(self_: Translator, other: Scalar) -> Scalar {
    return Scalar(self_.g0.w * other.g0);
}

fn translator__anti_wedge__transflector(self_: Translator, other: Transflector) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g0.w) * other.g0, vec4<f32>(self_.g0.w) * other.g1);
}

fn translator__anti_wedge__translator(self_: Translator, other: Translator) -> Translator {
    return Translator(self_.g0.xyzx * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * other.g0);
}

fn anti_scalar__join__magnitude(self_: AntiScalar, other: Magnitude) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0.x);
}

fn anti_scalar__join__multi_vector(self_: AntiScalar, other: MultiVector) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0.x);
}

fn anti_scalar__join__multi_vector_at_infinity(self_: AntiScalar, other: MultiVectorAtInfinity) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0.x);
}

fn anti_scalar__join__scalar(self_: AntiScalar, other: Scalar) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0);
}

fn flector__join__flector(self_: Flector, other: Flector) -> Motor {
    return Motor(vec4<f32>(self_.g0.x) * vec4<f32>(-other.g0.w, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, -other.g0.w, 0.0, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, -other.g0.w, other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, other.g1.w) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn flector__join__flector_at_infinity(self_: Flector, other: FlectorAtInfinity) -> Motor {
    return Motor(vec4<f32>(self_.g0.w) * other.g0 + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn flector__join__horizon(self_: Flector, other: Horizon) -> AntiScalar {
    return AntiScalar(self_.g0.w * other.g0);
}

fn flector__join__line(self_: Flector, other: Line) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0));
}

fn flector__join__line_at_infinity(self_: Flector, other: LineAtInfinity) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g0.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z));
}

fn flector__join__line_at_origin(self_: Flector, other: LineAtOrigin) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn flector__join__magnitude(self_: Flector, other: Magnitude) -> Flector {
    return Flector(self_.g0 * vec4<f32>(other.g0.x), self_.g1 * vec4<f32>(other.g0.x));
}

fn flector__join__motor(self_: Flector, other: Motor) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0));
}

fn flector__join__multi_vector(self_: Flector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g4.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g4.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g4.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g4.w) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g1.w), self_.g0 * vec4<f32>(other.g0.x), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g2.z, -other.g2.y, -other.g3.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.z, 0.0, other.g2.x, -other.g3.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g2.y, -other.g2.x, 0.0, -other.g3.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g3.x, other.g3.y, other.g3.z, 0.0) + self_.g1 * vec4<f32>(other.g0.x));
}

fn flector__join__multi_vector_at_infinity(self_: Flector, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z), self_.g0 * vec4<f32>(other.g0.x), vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + self_.g0.wwwz * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, -other.g2.z) + self_.g1 * vec4<f32>(other.g0.x));
}

fn flector__join__multi_vector_at_origin(self_: Flector, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g2.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g0.x), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0));
}

fn flector__join__origin(self_: Flector, other: Origin) -> Rotor {
    return Rotor(self_.g0.xyzx * vec4<f32>(-other.g0, -other.g0, -other.g0, 0.0) + vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0));
}

fn flector__join__plane(self_: Flector, other: Plane) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z + self_.g0.w * other.g0.w);
}

fn flector__join__plane_at_origin(self_: Flector, other: PlaneAtOrigin) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn flector__join__point(self_: Flector, other: Point) -> Motor {
    return Motor(self_.g0.xyzx * vec4<f32>(-other.g0.w, -other.g0.w, -other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn flector__join__point_at_infinity(self_: Flector, other: PointAtInfinity) -> Motor {
    return Motor(vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn flector__join__rotor(self_: Flector, other: Rotor) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn flector__join__scalar(self_: Flector, other: Scalar) -> Flector {
    return Flector(self_.g0 * vec4<f32>(other.g0), self_.g1 * vec4<f32>(other.g0));
}

fn flector__join__transflector(self_: Flector, other: Transflector) -> Motor {
    return Motor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, other.g1.w) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn flector__join__translator(self_: Flector, other: Translator) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g0.wwwz * other.g0.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0));
}

fn flector_at_infinity__join__flector(self_: FlectorAtInfinity, other: Flector) -> Motor {
    return Motor(vec4<f32>(self_.g0.x) * vec4<f32>(-other.g0.w, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, -other.g0.w, 0.0, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, -other.g0.w, other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn flector_at_infinity__join__flector_at_infinity(self_: FlectorAtInfinity, other: FlectorAtInfinity) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn flector_at_infinity__join__line(self_: FlectorAtInfinity, other: Line) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z));
}

fn flector_at_infinity__join__line_at_infinity(self_: FlectorAtInfinity, other: LineAtInfinity) -> Horizon {
    return Horizon(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn flector_at_infinity__join__line_at_origin(self_: FlectorAtInfinity, other: LineAtOrigin) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn flector_at_infinity__join__magnitude(self_: FlectorAtInfinity, other: Magnitude) -> FlectorAtInfinity {
    return FlectorAtInfinity(self_.g0 * vec4<f32>(other.g0.x));
}

fn flector_at_infinity__join__motor(self_: FlectorAtInfinity, other: Motor) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z));
}

fn flector_at_infinity__join__multi_vector(self_: FlectorAtInfinity, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g4.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g4.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g4.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, -other.g1.w), self_.g0.xyzx * vec4<f32>(other.g0.x, other.g0.x, other.g0.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g2.z, -other.g2.y, -other.g3.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.z, 0.0, other.g2.x, -other.g3.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g2.y, -other.g2.x, 0.0, -other.g3.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x));
}

fn flector_at_infinity__join__multi_vector_at_infinity(self_: FlectorAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g2.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.x), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0));
}

fn flector_at_infinity__join__multi_vector_at_origin(self_: FlectorAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g2.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, -other.g0.x), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0));
}

fn flector_at_infinity__join__origin(self_: FlectorAtInfinity, other: Origin) -> Rotor {
    return Rotor(vec4<f32>(0.0) - self_.g0 * vec4<f32>(other.g0));
}

fn flector_at_infinity__join__plane(self_: FlectorAtInfinity, other: Plane) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn flector_at_infinity__join__plane_at_origin(self_: FlectorAtInfinity, other: PlaneAtOrigin) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn flector_at_infinity__join__point(self_: FlectorAtInfinity, other: Point) -> Motor {
    return Motor(vec4<f32>(0.0) - self_.g0 * vec4<f32>(other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn flector_at_infinity__join__point_at_infinity(self_: FlectorAtInfinity, other: PointAtInfinity) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn flector_at_infinity__join__rotor(self_: FlectorAtInfinity, other: Rotor) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn flector_at_infinity__join__scalar(self_: FlectorAtInfinity, other: Scalar) -> FlectorAtInfinity {
    return FlectorAtInfinity(self_.g0 * vec4<f32>(other.g0));
}

fn flector_at_infinity__join__transflector(self_: FlectorAtInfinity, other: Transflector) -> Translator {
    return Translator(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, other.g1.z));
}

fn flector_at_infinity__join__translator(self_: FlectorAtInfinity, other: Translator) -> Horizon {
    return Horizon(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn horizon__join__flector(self_: Horizon, other: Flector) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0 * other.g0.w);
}

fn horizon__join__magnitude(self_: Horizon, other: Magnitude) -> Horizon {
    return Horizon(self_.g0 * other.g0.x);
}

fn horizon__join__multi_vector(self_: Horizon, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0) * vec2<f32>(0.0, -other.g1.w), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x));
}

fn horizon__join__multi_vector_at_infinity(self_: Horizon, other: MultiVectorAtInfinity) -> Horizon {
    return Horizon(self_.g0 * other.g0.x);
}

fn horizon__join__multi_vector_at_origin(self_: Horizon, other: MultiVectorAtOrigin) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0 * other.g0.x);
}

fn horizon__join__origin(self_: Horizon, other: Origin) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0 * other.g0);
}

fn horizon__join__point(self_: Horizon, other: Point) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0 * other.g0.w);
}

fn horizon__join__scalar(self_: Horizon, other: Scalar) -> Horizon {
    return Horizon(self_.g0 * other.g0);
}

fn line__join__flector(self_: Line, other: Flector) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn line__join__flector_at_infinity(self_: Line, other: FlectorAtInfinity) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z));
}

fn line__join__line(self_: Line, other: Line) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z - self_.g1.x * other.g0.x - self_.g1.y * other.g0.y - self_.g1.z * other.g0.z);
}

fn line__join__line_at_infinity(self_: Line, other: LineAtInfinity) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn line__join__line_at_origin(self_: Line, other: LineAtOrigin) -> AntiScalar {
    return AntiScalar(0.0 - self_.g1.x * other.g0.x - self_.g1.y * other.g0.y - self_.g1.z * other.g0.z);
}

fn line__join__magnitude(self_: Line, other: Magnitude) -> Line {
    return Line(self_.g0 * vec3<f32>(other.g0.x), self_.g1 * vec3<f32>(other.g0.x));
}

fn line__join__motor(self_: Line, other: Motor) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z - self_.g1.x * other.g0.x - self_.g1.y * other.g0.y - self_.g1.z * other.g0.z);
}

fn line__join__multi_vector(self_: Line, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g3.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g3.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g3.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g2.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g2.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g2.z), vec4<f32>(0.0), self_.g0 * vec3<f32>(other.g0.x), self_.g1 * vec3<f32>(other.g0.x), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.w, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g1.w, 0.0, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g1.w, -other.g1.z));
}

fn line__join__multi_vector_at_infinity(self_: Line, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g2.z), vec4<f32>(0.0), self_.g0 * vec3<f32>(other.g0.x), self_.g1 * vec3<f32>(other.g0.x), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.z));
}

fn line__join__multi_vector_at_origin(self_: Line, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(0.0), self_.g1 * vec3<f32>(other.g0.x));
}

fn line__join__origin(self_: Line, other: Origin) -> PlaneAtOrigin {
    return PlaneAtOrigin(self_.g1 * vec3<f32>(other.g0));
}

fn line__join__point(self_: Line, other: Point) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn line__join__point_at_infinity(self_: Line, other: PointAtInfinity) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z));
}

fn line__join__rotor(self_: Line, other: Rotor) -> AntiScalar {
    return AntiScalar(0.0 - self_.g1.x * other.g0.x - self_.g1.y * other.g0.y - self_.g1.z * other.g0.z);
}

fn line__join__scalar(self_: Line, other: Scalar) -> Line {
    return Line(self_.g0 * vec3<f32>(other.g0), self_.g1 * vec3<f32>(other.g0));
}

fn line__join__transflector(self_: Line, other: Transflector) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z));
}

fn line__join__translator(self_: Line, other: Translator) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn line_at_infinity__join__flector(self_: LineAtInfinity, other: Flector) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn line_at_infinity__join__flector_at_infinity(self_: LineAtInfinity, other: FlectorAtInfinity) -> Horizon {
    return Horizon(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn line_at_infinity__join__line(self_: LineAtInfinity, other: Line) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn line_at_infinity__join__line_at_origin(self_: LineAtInfinity, other: LineAtOrigin) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn line_at_infinity__join__magnitude(self_: LineAtInfinity, other: Magnitude) -> LineAtInfinity {
    return LineAtInfinity(self_.g0 * vec3<f32>(other.g0.x));
}

fn line_at_infinity__join__motor(self_: LineAtInfinity, other: Motor) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn line_at_infinity__join__multi_vector(self_: LineAtInfinity, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g2.z), vec4<f32>(0.0), vec3<f32>(0.0), self_.g0 * vec3<f32>(other.g0.x), vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g1.w, 0.0, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g1.w, -other.g1.z));
}

fn line_at_infinity__join__multi_vector_at_infinity(self_: LineAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(0.0), self_.g0 * vec3<f32>(other.g0.x));
}

fn line_at_infinity__join__multi_vector_at_origin(self_: LineAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(0.0), self_.g0 * vec3<f32>(other.g0.x));
}

fn line_at_infinity__join__origin(self_: LineAtInfinity, other: Origin) -> PlaneAtOrigin {
    return PlaneAtOrigin(self_.g0 * vec3<f32>(other.g0));
}

fn line_at_infinity__join__point(self_: LineAtInfinity, other: Point) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn line_at_infinity__join__point_at_infinity(self_: LineAtInfinity, other: PointAtInfinity) -> Horizon {
    return Horizon(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn line_at_infinity__join__rotor(self_: LineAtInfinity, other: Rotor) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn line_at_infinity__join__scalar(self_: LineAtInfinity, other: Scalar) -> LineAtInfinity {
    return LineAtInfinity(self_.g0 * vec3<f32>(other.g0));
}

fn line_at_infinity__join__transflector(self_: LineAtInfinity, other: Transflector) -> Horizon {
    return Horizon(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn line_at_origin__join__flector(self_: LineAtOrigin, other: Flector) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn line_at_origin__join__flector_at_infinity(self_: LineAtOrigin, other: FlectorAtInfinity) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn line_at_origin__join__line(self_: LineAtOrigin, other: Line) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z);
}

fn line_at_origin__join__line_at_infinity(self_: LineAtOrigin, other: LineAtInfinity) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn line_at_origin__join__magnitude(self_: LineAtOrigin, other: Magnitude) -> LineAtOrigin {
    return LineAtOrigin(self_.g0 * vec3<f32>(other.g0.x));
}

fn line_at_origin__join__motor(self_: LineAtOrigin, other: Motor) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z);
}

fn line_at_origin__join__multi_vector(self_: LineAtOrigin, other: MultiVector) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g3.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g3.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g3.z), self_.g0 * vec3<f32>(other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0));
}

fn line_at_origin__join__multi_vector_at_infinity(self_: LineAtOrigin, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g2.z), self_.g0 * vec3<f32>(other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0));
}

fn line_at_origin__join__point(self_: LineAtOrigin, other: Point) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn line_at_origin__join__point_at_infinity(self_: LineAtOrigin, other: PointAtInfinity) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn line_at_origin__join__scalar(self_: LineAtOrigin, other: Scalar) -> LineAtOrigin {
    return LineAtOrigin(self_.g0 * vec3<f32>(other.g0));
}

fn line_at_origin__join__transflector(self_: LineAtOrigin, other: Transflector) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn line_at_origin__join__translator(self_: LineAtOrigin, other: Translator) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn magnitude__join__anti_scalar(self_: Magnitude, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0);
}

fn magnitude__join__flector(self_: Magnitude, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * other.g0, vec4<f32>(self_.g0.x) * other.g1);
}

fn magnitude__join__flector_at_infinity(self_: Magnitude, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * other.g0);
}

fn magnitude__join__horizon(self_: Magnitude, other: Horizon) -> Horizon {
    return Horizon(self_.g0.x * other.g0);
}

fn magnitude__join__line(self_: Magnitude, other: Line) -> Line {
    return Line(vec3<f32>(self_.g0.x) * other.g0, vec3<f32>(self_.g0.x) * other.g1);
}

fn magnitude__join__line_at_infinity(self_: Magnitude, other: LineAtInfinity) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(self_.g0.x) * other.g0);
}

fn magnitude__join__line_at_origin(self_: Magnitude, other: LineAtOrigin) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(self_.g0.x) * other.g0);
}

fn magnitude__join__magnitude(self_: Magnitude, other: Magnitude) -> Magnitude {
    return Magnitude(vec2<f32>(self_.g0.x) * other.g0 + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.x));
}

fn magnitude__join__motor(self_: Magnitude, other: Motor) -> Motor {
    return Motor(vec4<f32>(self_.g0.x) * other.g0, vec3<f32>(self_.g0.x) * other.g1);
}

fn magnitude__join__multi_vector(self_: Magnitude, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * other.g0 + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.x), vec4<f32>(self_.g0.x) * other.g1, vec3<f32>(self_.g0.x) * other.g2, vec3<f32>(self_.g0.x) * other.g3, vec4<f32>(self_.g0.x) * other.g4);
}

fn magnitude__join__multi_vector_at_infinity(self_: Magnitude, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.x), vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * other.g2, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y));
}

fn magnitude__join__multi_vector_at_origin(self_: Magnitude, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * other.g0, vec3<f32>(self_.g0.x) * other.g1, vec3<f32>(self_.g0.x) * other.g2);
}

fn magnitude__join__origin(self_: Magnitude, other: Origin) -> Origin {
    return Origin(self_.g0.x * other.g0);
}

fn magnitude__join__plane(self_: Magnitude, other: Plane) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * other.g0);
}

fn magnitude__join__plane_at_origin(self_: Magnitude, other: PlaneAtOrigin) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x) * other.g0);
}

fn magnitude__join__point(self_: Magnitude, other: Point) -> Point {
    return Point(vec4<f32>(self_.g0.x) * other.g0);
}

fn magnitude__join__point_at_infinity(self_: Magnitude, other: PointAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0.x) * other.g0);
}

fn magnitude__join__rotor(self_: Magnitude, other: Rotor) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * other.g0);
}

fn magnitude__join__scalar(self_: Magnitude, other: Scalar) -> Magnitude {
    return Magnitude(self_.g0 * vec2<f32>(other.g0));
}

fn magnitude__join__transflector(self_: Magnitude, other: Transflector) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * other.g0, vec4<f32>(self_.g0.x) * other.g1);
}

fn magnitude__join__translator(self_: Magnitude, other: Translator) -> Translator {
    return Translator(vec4<f32>(self_.g0.x) * other.g0);
}

fn motor__join__flector(self_: Motor, other: Flector) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn motor__join__flector_at_infinity(self_: Motor, other: FlectorAtInfinity) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z));
}

fn motor__join__line(self_: Motor, other: Line) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z - self_.g1.x * other.g0.x - self_.g1.y * other.g0.y - self_.g1.z * other.g0.z);
}

fn motor__join__line_at_infinity(self_: Motor, other: LineAtInfinity) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn motor__join__line_at_origin(self_: Motor, other: LineAtOrigin) -> AntiScalar {
    return AntiScalar(0.0 - self_.g1.x * other.g0.x - self_.g1.y * other.g0.y - self_.g1.z * other.g0.z);
}

fn motor__join__magnitude(self_: Motor, other: Magnitude) -> Motor {
    return Motor(self_.g0 * vec4<f32>(other.g0.x), self_.g1 * vec3<f32>(other.g0.x));
}

fn motor__join__motor(self_: Motor, other: Motor) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z - self_.g1.x * other.g0.x - self_.g1.y * other.g0.y - self_.g1.z * other.g0.z);
}

fn motor__join__multi_vector(self_: Motor, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g3.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g3.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g3.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g2.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g2.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g2.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.x), self_.g1 * vec3<f32>(other.g0.x), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.w, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g1.w, 0.0, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g1.w, -other.g1.z));
}

fn motor__join__multi_vector_at_infinity(self_: Motor, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g2.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.x), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.x), self_.g1 * vec3<f32>(other.g0.x), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.z));
}

fn motor__join__multi_vector_at_origin(self_: Motor, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(0.0), self_.g1 * vec3<f32>(other.g0.x));
}

fn motor__join__origin(self_: Motor, other: Origin) -> PlaneAtOrigin {
    return PlaneAtOrigin(self_.g1 * vec3<f32>(other.g0));
}

fn motor__join__point(self_: Motor, other: Point) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn motor__join__point_at_infinity(self_: Motor, other: PointAtInfinity) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z));
}

fn motor__join__rotor(self_: Motor, other: Rotor) -> AntiScalar {
    return AntiScalar(0.0 - self_.g1.x * other.g0.x - self_.g1.y * other.g0.y - self_.g1.z * other.g0.z);
}

fn motor__join__scalar(self_: Motor, other: Scalar) -> Motor {
    return Motor(self_.g0 * vec4<f32>(other.g0), self_.g1 * vec3<f32>(other.g0));
}

fn motor__join__transflector(self_: Motor, other: Transflector) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z));
}

fn motor__join__translator(self_: Motor, other: Translator) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn multi_vector__join__anti_scalar(self_: MultiVector, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0);
}

fn multi_vector__join__flector(self_: MultiVector, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g1.w) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g4.w) * vec2<f32>(0.0, -other.g0.w), vec4<f32>(self_.g0.x) * other.g0, vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g0.x) * other.g1 + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g3.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g3.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g3.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn multi_vector__join__flector_at_infinity(self_: MultiVector, other: FlectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g3.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g3.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z));
}

fn multi_vector__join__horizon(self_: MultiVector, other: Horizon) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn multi_vector__join__line(self_: MultiVector, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g3.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g3.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g3.z) * vec2<f32>(0.0, -other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * other.g0, vec3<f32>(self_.g0.x) * other.g1, vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0));
}

fn multi_vector__join__line_at_infinity(self_: MultiVector, other: LineAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * other.g0, vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g1.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z));
}

fn multi_vector__join__line_at_origin(self_: MultiVector, other: LineAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g3.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g3.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g3.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * other.g0, vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn multi_vector__join__magnitude(self_: MultiVector, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * other.g0 + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.x), self_.g1 * vec4<f32>(other.g0.x), self_.g2 * vec3<f32>(other.g0.x), self_.g3 * vec3<f32>(other.g0.x), self_.g4 * vec4<f32>(other.g0.x));
}

fn multi_vector__join__motor(self_: MultiVector, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g3.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g3.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g3.z) * vec2<f32>(0.0, -other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * other.g1, vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0));
}

fn multi_vector__join__multi_vector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * other.g0 + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g4.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g4.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g4.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g4.w) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g3.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g3.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g3.z) + vec2<f32>(self_.g3.x) * vec2<f32>(0.0, -other.g2.x) + vec2<f32>(self_.g3.y) * vec2<f32>(0.0, -other.g2.y) + vec2<f32>(self_.g3.z) * vec2<f32>(0.0, -other.g2.z) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g4.w) * vec2<f32>(0.0, -other.g1.w), vec4<f32>(self_.g0.x) * other.g1 + self_.g1 * vec4<f32>(other.g0.x), vec3<f32>(self_.g0.x) * other.g2 - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g1.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + self_.g2 * vec3<f32>(other.g0.x), vec3<f32>(self_.g0.x) * other.g3 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + self_.g3 * vec3<f32>(other.g0.x), vec4<f32>(self_.g0.x) * other.g4 + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g2.z, -other.g2.y, -other.g3.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g2.z, 0.0, other.g2.x, -other.g3.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g2.y, -other.g2.x, 0.0, -other.g3.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g3.x, other.g3.y, other.g3.z, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g3.x) * vec4<f32>(other.g1.w, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g3.y) * vec4<f32>(0.0, other.g1.w, 0.0, -other.g1.y) + vec4<f32>(self_.g3.z) * vec4<f32>(0.0, 0.0, other.g1.w, -other.g1.z) + self_.g4 * vec4<f32>(other.g0.x));
}

fn multi_vector__join__multi_vector_at_infinity(self_: MultiVector, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.x) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g2.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g2.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g2.z) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, -other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0) + self_.g1 * vec4<f32>(other.g0.x), vec3<f32>(self_.g1.w) * other.g1 + self_.g2 * vec3<f32>(other.g0.x), vec3<f32>(self_.g0.x) * other.g2 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + self_.g3 * vec3<f32>(other.g0.x), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + self_.g1.wwwz * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, -other.g2.z) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g3.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + vec4<f32>(self_.g3.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.z) + self_.g4 * vec4<f32>(other.g0.x));
}

fn multi_vector__join__multi_vector_at_origin(self_: MultiVector, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * other.g0 + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g2.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g2.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g2.z) + vec2<f32>(self_.g3.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g3.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g3.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g4.w) * vec2<f32>(0.0, -other.g0.x), vec3<f32>(self_.g0.x) * other.g1 - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.x), vec3<f32>(self_.g0.x) * other.g2 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + self_.g3 * vec3<f32>(other.g0.x));
}

fn multi_vector__join__origin(self_: MultiVector, other: Origin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0, 0.0) + vec2<f32>(self_.g4.w) * vec2<f32>(0.0, -other.g0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0), self_.g3 * vec3<f32>(other.g0));
}

fn multi_vector__join__plane(self_: MultiVector, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g0.w), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0.x) * other.g0);
}

fn multi_vector__join__plane_at_origin(self_: MultiVector, other: PlaneAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * other.g0);
}

fn multi_vector__join__point(self_: MultiVector, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g4.w) * vec2<f32>(0.0, -other.g0.w), vec4<f32>(self_.g0.x) * other.g0, vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g2.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g3.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g3.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g3.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn multi_vector__join__point_at_infinity(self_: MultiVector, other: PointAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(self_.g1.w) * other.g0, vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g2.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g3.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g3.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z));
}

fn multi_vector__join__rotor(self_: MultiVector, other: Rotor) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g3.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g3.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g3.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn multi_vector__join__scalar(self_: MultiVector, other: Scalar) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0), self_.g1 * vec4<f32>(other.g0), self_.g2 * vec3<f32>(other.g0), self_.g3 * vec3<f32>(other.g0), self_.g4 * vec4<f32>(other.g0));
}

fn multi_vector__join__transflector(self_: MultiVector, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g1.w) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(self_.g1.w) * other.g0, vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g0.x) * other.g1 + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g3.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g3.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z));
}

fn multi_vector__join__translator(self_: MultiVector, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g1.wwwz * other.g0.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0));
}

fn multi_vector_at_infinity__join__anti_scalar(self_: MultiVectorAtInfinity, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0);
}

fn multi_vector_at_infinity__join__flector(self_: MultiVectorAtInfinity, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.w) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g1.z), vec4<f32>(self_.g0.x) * other.g0, vec3<f32>(0.0) - self_.g1 * vec3<f32>(other.g0.w), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g0.x) * other.g1 + vec4<f32>(self_.g2.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn multi_vector_at_infinity__join__flector_at_infinity(self_: MultiVectorAtInfinity, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn multi_vector_at_infinity__join__horizon(self_: MultiVectorAtInfinity, other: Horizon) -> Horizon {
    return Horizon(self_.g0.x * other.g0);
}

fn multi_vector_at_infinity__join__line(self_: MultiVectorAtInfinity, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * other.g0, vec3<f32>(self_.g0.x) * other.g1, vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z));
}

fn multi_vector_at_infinity__join__line_at_infinity(self_: MultiVectorAtInfinity, other: LineAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * other.g0);
}

fn multi_vector_at_infinity__join__line_at_origin(self_: MultiVectorAtInfinity, other: LineAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * other.g0, vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn multi_vector_at_infinity__join__magnitude(self_: MultiVectorAtInfinity, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * other.g0, vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, self_.g1.x) * vec4<f32>(other.g0.x, other.g0.x, other.g0.x, 0.0), vec3<f32>(0.0), self_.g2 * vec3<f32>(other.g0.x), vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x));
}

fn multi_vector_at_infinity__join__motor(self_: MultiVectorAtInfinity, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * other.g1, vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z));
}

fn multi_vector_at_infinity__join__multi_vector(self_: MultiVectorAtInfinity, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * other.g0 + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.w) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g4.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g4.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g4.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g2.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g2.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g2.z), vec4<f32>(self_.g0.x) * other.g1 + vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, self_.g1.x) * vec4<f32>(other.g0.x, other.g0.x, other.g0.x, 0.0), vec3<f32>(self_.g0.x) * other.g2 - self_.g1 * vec3<f32>(other.g1.w), vec3<f32>(self_.g0.x) * other.g3 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + self_.g2 * vec3<f32>(other.g0.x), vec4<f32>(self_.g0.x) * other.g4 + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g2.z, -other.g2.y, -other.g3.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g2.z, 0.0, other.g2.x, -other.g3.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g2.y, -other.g2.x, 0.0, -other.g3.z) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g1.w, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, other.g1.w, 0.0, -other.g1.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, other.g1.w, -other.g1.z));
}

fn multi_vector_at_infinity__join__multi_vector_at_infinity(self_: MultiVectorAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * other.g0 + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g2.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g2.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g2.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(self_.g0.x) * other.g1 + self_.g1 * vec3<f32>(other.g0.x), vec3<f32>(self_.g0.x) * other.g2 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + self_.g2 * vec3<f32>(other.g0.x));
}

fn multi_vector_at_infinity__join__multi_vector_at_origin(self_: MultiVectorAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * other.g0 + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g2.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g2.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g2.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(self_.g0.x) * other.g1 - self_.g1 * vec3<f32>(other.g0.x), vec3<f32>(self_.g0.x) * other.g2 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + self_.g2 * vec3<f32>(other.g0.x));
}

fn multi_vector_at_infinity__join__origin(self_: MultiVectorAtInfinity, other: Origin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0 * vec2<f32>(other.g0), vec3<f32>(0.0) - self_.g1 * vec3<f32>(other.g0), self_.g2 * vec3<f32>(other.g0));
}

fn multi_vector_at_infinity__join__plane(self_: MultiVectorAtInfinity, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0.x) * other.g0);
}

fn multi_vector_at_infinity__join__plane_at_origin(self_: MultiVectorAtInfinity, other: PlaneAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * other.g0);
}

fn multi_vector_at_infinity__join__point(self_: MultiVectorAtInfinity, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.w), vec4<f32>(self_.g0.x) * other.g0, vec3<f32>(0.0) - self_.g1 * vec3<f32>(other.g0.w), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g2.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn multi_vector_at_infinity__join__point_at_infinity(self_: MultiVectorAtInfinity, other: PointAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * other.g0, vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn multi_vector_at_infinity__join__rotor(self_: MultiVectorAtInfinity, other: Rotor) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn multi_vector_at_infinity__join__scalar(self_: MultiVectorAtInfinity, other: Scalar) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0 * vec2<f32>(other.g0), self_.g1 * vec3<f32>(other.g0), self_.g2 * vec3<f32>(other.g0));
}

fn multi_vector_at_infinity__join__transflector(self_: MultiVectorAtInfinity, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g0.x) * other.g1 + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z));
}

fn multi_vector_at_infinity__join__translator(self_: MultiVectorAtInfinity, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.w), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z));
}

fn multi_vector_at_origin__join__flector(self_: MultiVectorAtOrigin, other: Flector) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.w) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn multi_vector_at_origin__join__flector_at_infinity(self_: MultiVectorAtOrigin, other: FlectorAtInfinity) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn multi_vector_at_origin__join__horizon(self_: MultiVectorAtOrigin, other: Horizon) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0);
}

fn multi_vector_at_origin__join__line(self_: MultiVectorAtOrigin, other: Line) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * other.g1);
}

fn multi_vector_at_origin__join__line_at_infinity(self_: MultiVectorAtOrigin, other: LineAtInfinity) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * other.g0);
}

fn multi_vector_at_origin__join__magnitude(self_: MultiVectorAtOrigin, other: Magnitude) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0 * vec2<f32>(other.g0.x), self_.g1 * vec3<f32>(other.g0.x), self_.g2 * vec3<f32>(other.g0.x));
}

fn multi_vector_at_origin__join__motor(self_: MultiVectorAtOrigin, other: Motor) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * other.g1);
}

fn multi_vector_at_origin__join__multi_vector(self_: MultiVectorAtOrigin, other: MultiVector) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, other.g4.w) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g3.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g3.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g3.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + self_.g1 * vec3<f32>(other.g0.x), vec3<f32>(self_.g0.x) * other.g3 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + self_.g2 * vec3<f32>(other.g0.x));
}

fn multi_vector_at_origin__join__multi_vector_at_infinity(self_: MultiVectorAtOrigin, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * other.g0 + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g2.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g2.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g2.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(self_.g0.x) * other.g1 + self_.g1 * vec3<f32>(other.g0.x), vec3<f32>(self_.g0.x) * other.g2 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + self_.g2 * vec3<f32>(other.g0.x));
}

fn multi_vector_at_origin__join__plane(self_: MultiVectorAtOrigin, other: Plane) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0.w);
}

fn multi_vector_at_origin__join__point(self_: MultiVectorAtOrigin, other: Point) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn multi_vector_at_origin__join__point_at_infinity(self_: MultiVectorAtOrigin, other: PointAtInfinity) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * other.g0, vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn multi_vector_at_origin__join__scalar(self_: MultiVectorAtOrigin, other: Scalar) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0 * vec2<f32>(other.g0), self_.g1 * vec3<f32>(other.g0), self_.g2 * vec3<f32>(other.g0));
}

fn multi_vector_at_origin__join__transflector(self_: MultiVectorAtOrigin, other: Transflector) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.w) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * other.g0, vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn multi_vector_at_origin__join__translator(self_: MultiVectorAtOrigin, other: Translator) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn origin__join__flector(self_: Origin, other: Flector) -> Rotor {
    return Rotor(vec4<f32>(self_.g0) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, other.g1.w));
}

fn origin__join__flector_at_infinity(self_: Origin, other: FlectorAtInfinity) -> Rotor {
    return Rotor(vec4<f32>(self_.g0) * other.g0);
}

fn origin__join__horizon(self_: Origin, other: Horizon) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0);
}

fn origin__join__line(self_: Origin, other: Line) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0) * other.g1);
}

fn origin__join__line_at_infinity(self_: Origin, other: LineAtInfinity) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0) * other.g0);
}

fn origin__join__magnitude(self_: Origin, other: Magnitude) -> Origin {
    return Origin(self_.g0 * other.g0.x);
}

fn origin__join__motor(self_: Origin, other: Motor) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0) * other.g1);
}

fn origin__join__multi_vector(self_: Origin, other: MultiVector) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0) * vec2<f32>(other.g0.x, other.g4.w), vec3<f32>(self_.g0) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(self_.g0) * other.g3);
}

fn origin__join__multi_vector_at_infinity(self_: Origin, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1, vec3<f32>(self_.g0) * other.g2);
}

fn origin__join__plane(self_: Origin, other: Plane) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0.w);
}

fn origin__join__point(self_: Origin, other: Point) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(self_.g0) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn origin__join__point_at_infinity(self_: Origin, other: PointAtInfinity) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(self_.g0) * other.g0);
}

fn origin__join__scalar(self_: Origin, other: Scalar) -> Origin {
    return Origin(self_.g0 * other.g0);
}

fn origin__join__transflector(self_: Origin, other: Transflector) -> Rotor {
    return Rotor(vec4<f32>(self_.g0) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, other.g1.w));
}

fn origin__join__translator(self_: Origin, other: Translator) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn plane__join__flector(self_: Plane, other: Flector) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z - self_.g0.w * other.g0.w);
}

fn plane__join__flector_at_infinity(self_: Plane, other: FlectorAtInfinity) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn plane__join__magnitude(self_: Plane, other: Magnitude) -> Plane {
    return Plane(self_.g0 * vec4<f32>(other.g0.x));
}

fn plane__join__multi_vector(self_: Plane, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, -other.g1.w), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0 * vec4<f32>(other.g0.x));
}

fn plane__join__multi_vector_at_infinity(self_: Plane, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0 * vec4<f32>(other.g0.x));
}

fn plane__join__multi_vector_at_origin(self_: Plane, other: MultiVectorAtOrigin) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.w * other.g0.x);
}

fn plane__join__origin(self_: Plane, other: Origin) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.w * other.g0);
}

fn plane__join__point(self_: Plane, other: Point) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z - self_.g0.w * other.g0.w);
}

fn plane__join__point_at_infinity(self_: Plane, other: PointAtInfinity) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn plane__join__scalar(self_: Plane, other: Scalar) -> Plane {
    return Plane(self_.g0 * vec4<f32>(other.g0));
}

fn plane__join__transflector(self_: Plane, other: Transflector) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn plane_at_origin__join__flector(self_: PlaneAtOrigin, other: Flector) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn plane_at_origin__join__flector_at_infinity(self_: PlaneAtOrigin, other: FlectorAtInfinity) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn plane_at_origin__join__magnitude(self_: PlaneAtOrigin, other: Magnitude) -> PlaneAtOrigin {
    return PlaneAtOrigin(self_.g0 * vec3<f32>(other.g0.x));
}

fn plane_at_origin__join__multi_vector(self_: PlaneAtOrigin, other: MultiVector) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(0.0), self_.g0 * vec3<f32>(other.g0.x));
}

fn plane_at_origin__join__multi_vector_at_infinity(self_: PlaneAtOrigin, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(0.0), self_.g0 * vec3<f32>(other.g0.x));
}

fn plane_at_origin__join__point(self_: PlaneAtOrigin, other: Point) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn plane_at_origin__join__point_at_infinity(self_: PlaneAtOrigin, other: PointAtInfinity) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn plane_at_origin__join__scalar(self_: PlaneAtOrigin, other: Scalar) -> PlaneAtOrigin {
    return PlaneAtOrigin(self_.g0 * vec3<f32>(other.g0));
}

fn plane_at_origin__join__transflector(self_: PlaneAtOrigin, other: Transflector) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn point__join__flector(self_: Point, other: Flector) -> Motor {
    return Motor(vec4<f32>(self_.g0.x) * vec4<f32>(-other.g0.w, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, -other.g0.w, 0.0, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, -other.g0.w, other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, other.g1.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn point__join__flector_at_infinity(self_: Point, other: FlectorAtInfinity) -> Motor {
    return Motor(vec4<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn point__join__horizon(self_: Point, other: Horizon) -> AntiScalar {
    return AntiScalar(self_.g0.w * other.g0);
}

fn point__join__line(self_: Point, other: Line) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0));
}

fn point__join__line_at_infinity(self_: Point, other: LineAtInfinity) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g0.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z));
}

fn point__join__line_at_origin(self_: Point, other: LineAtOrigin) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn point__join__magnitude(self_: Point, other: Magnitude) -> Point {
    return Point(self_.g0 * vec4<f32>(other.g0.x));
}

fn point__join__motor(self_: Point, other: Motor) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0));
}

fn point__join__multi_vector(self_: Point, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g4.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g4.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g4.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g4.w), self_.g0 * vec4<f32>(other.g0.x), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g2.z, -other.g2.y, -other.g3.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.z, 0.0, other.g2.x, -other.g3.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g2.y, -other.g2.x, 0.0, -other.g3.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g3.x, other.g3.y, other.g3.z, 0.0));
}

fn point__join__multi_vector_at_infinity(self_: Point, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.y), self_.g0 * vec4<f32>(other.g0.x), vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + self_.g0.wwwz * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, -other.g2.z));
}

fn point__join__multi_vector_at_origin(self_: Point, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g2.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0));
}

fn point__join__origin(self_: Point, other: Origin) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0));
}

fn point__join__plane(self_: Point, other: Plane) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z + self_.g0.w * other.g0.w);
}

fn point__join__plane_at_origin(self_: Point, other: PlaneAtOrigin) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn point__join__point(self_: Point, other: Point) -> Line {
    return Line(vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn point__join__point_at_infinity(self_: Point, other: PointAtInfinity) -> Line {
    return Line(vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn point__join__rotor(self_: Point, other: Rotor) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn point__join__scalar(self_: Point, other: Scalar) -> Point {
    return Point(self_.g0 * vec4<f32>(other.g0));
}

fn point__join__transflector(self_: Point, other: Transflector) -> Motor {
    return Motor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, other.g1.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn point__join__translator(self_: Point, other: Translator) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g0.wwwz * other.g0.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0));
}

fn point_at_infinity__join__flector(self_: PointAtInfinity, other: Flector) -> Motor {
    return Motor(vec4<f32>(self_.g0.x) * vec4<f32>(-other.g0.w, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, -other.g0.w, 0.0, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, -other.g0.w, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn point_at_infinity__join__flector_at_infinity(self_: PointAtInfinity, other: FlectorAtInfinity) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn point_at_infinity__join__line(self_: PointAtInfinity, other: Line) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z));
}

fn point_at_infinity__join__line_at_infinity(self_: PointAtInfinity, other: LineAtInfinity) -> Horizon {
    return Horizon(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn point_at_infinity__join__line_at_origin(self_: PointAtInfinity, other: LineAtOrigin) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn point_at_infinity__join__magnitude(self_: PointAtInfinity, other: Magnitude) -> PointAtInfinity {
    return PointAtInfinity(self_.g0 * vec3<f32>(other.g0.x));
}

fn point_at_infinity__join__motor(self_: PointAtInfinity, other: Motor) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z));
}

fn point_at_infinity__join__multi_vector(self_: PointAtInfinity, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g4.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g4.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g4.z), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g0.x, other.g0.x, other.g0.x, 0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g1.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g2.z, -other.g2.y, -other.g3.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.z, 0.0, other.g2.x, -other.g3.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g2.y, -other.g2.x, 0.0, -other.g3.z));
}

fn point_at_infinity__join__multi_vector_at_infinity(self_: PointAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g2.z), self_.g0 * vec3<f32>(other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0));
}

fn point_at_infinity__join__multi_vector_at_origin(self_: PointAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g2.z), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0));
}

fn point_at_infinity__join__origin(self_: PointAtInfinity, other: Origin) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0));
}

fn point_at_infinity__join__plane(self_: PointAtInfinity, other: Plane) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn point_at_infinity__join__plane_at_origin(self_: PointAtInfinity, other: PlaneAtOrigin) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn point_at_infinity__join__point(self_: PointAtInfinity, other: Point) -> Line {
    return Line(vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn point_at_infinity__join__point_at_infinity(self_: PointAtInfinity, other: PointAtInfinity) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn point_at_infinity__join__rotor(self_: PointAtInfinity, other: Rotor) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn point_at_infinity__join__scalar(self_: PointAtInfinity, other: Scalar) -> PointAtInfinity {
    return PointAtInfinity(self_.g0 * vec3<f32>(other.g0));
}

fn point_at_infinity__join__transflector(self_: PointAtInfinity, other: Transflector) -> Translator {
    return Translator(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, other.g1.z));
}

fn point_at_infinity__join__translator(self_: PointAtInfinity, other: Translator) -> Horizon {
    return Horizon(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn rotor__join__flector(self_: Rotor, other: Flector) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn rotor__join__flector_at_infinity(self_: Rotor, other: FlectorAtInfinity) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn rotor__join__line(self_: Rotor, other: Line) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z);
}

fn rotor__join__line_at_infinity(self_: Rotor, other: LineAtInfinity) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn rotor__join__magnitude(self_: Rotor, other: Magnitude) -> Rotor {
    return Rotor(self_.g0 * vec4<f32>(other.g0.x));
}

fn rotor__join__motor(self_: Rotor, other: Motor) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z);
}

fn rotor__join__multi_vector(self_: Rotor, other: MultiVector) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g3.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g3.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g3.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.x), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0));
}

fn rotor__join__multi_vector_at_infinity(self_: Rotor, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g2.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.x), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0));
}

fn rotor__join__point(self_: Rotor, other: Point) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn rotor__join__point_at_infinity(self_: Rotor, other: PointAtInfinity) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn rotor__join__scalar(self_: Rotor, other: Scalar) -> Rotor {
    return Rotor(self_.g0 * vec4<f32>(other.g0));
}

fn rotor__join__transflector(self_: Rotor, other: Transflector) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn rotor__join__translator(self_: Rotor, other: Translator) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn scalar__join__anti_scalar(self_: Scalar, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0);
}

fn scalar__join__flector(self_: Scalar, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0) * other.g0, vec4<f32>(self_.g0) * other.g1);
}

fn scalar__join__flector_at_infinity(self_: Scalar, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0) * other.g0);
}

fn scalar__join__horizon(self_: Scalar, other: Horizon) -> Horizon {
    return Horizon(self_.g0 * other.g0);
}

fn scalar__join__line(self_: Scalar, other: Line) -> Line {
    return Line(vec3<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1);
}

fn scalar__join__line_at_infinity(self_: Scalar, other: LineAtInfinity) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(self_.g0) * other.g0);
}

fn scalar__join__line_at_origin(self_: Scalar, other: LineAtOrigin) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(self_.g0) * other.g0);
}

fn scalar__join__magnitude(self_: Scalar, other: Magnitude) -> Magnitude {
    return Magnitude(vec2<f32>(self_.g0) * other.g0);
}

fn scalar__join__motor(self_: Scalar, other: Motor) -> Motor {
    return Motor(vec4<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1);
}

fn scalar__join__multi_vector(self_: Scalar, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0) * other.g0, vec4<f32>(self_.g0) * other.g1, vec3<f32>(self_.g0) * other.g2, vec3<f32>(self_.g0) * other.g3, vec4<f32>(self_.g0) * other.g4);
}

fn scalar__join__multi_vector_at_infinity(self_: Scalar, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1, vec3<f32>(self_.g0) * other.g2);
}

fn scalar__join__multi_vector_at_origin(self_: Scalar, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1, vec3<f32>(self_.g0) * other.g2);
}

fn scalar__join__origin(self_: Scalar, other: Origin) -> Origin {
    return Origin(self_.g0 * other.g0);
}

fn scalar__join__plane(self_: Scalar, other: Plane) -> Plane {
    return Plane(vec4<f32>(self_.g0) * other.g0);
}

fn scalar__join__plane_at_origin(self_: Scalar, other: PlaneAtOrigin) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0) * other.g0);
}

fn scalar__join__point(self_: Scalar, other: Point) -> Point {
    return Point(vec4<f32>(self_.g0) * other.g0);
}

fn scalar__join__point_at_infinity(self_: Scalar, other: PointAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0) * other.g0);
}

fn scalar__join__rotor(self_: Scalar, other: Rotor) -> Rotor {
    return Rotor(vec4<f32>(self_.g0) * other.g0);
}

fn scalar__join__scalar(self_: Scalar, other: Scalar) -> Scalar {
    return Scalar(self_.g0 * other.g0);
}

fn scalar__join__transflector(self_: Scalar, other: Transflector) -> Transflector {
    return Transflector(vec3<f32>(self_.g0) * other.g0, vec4<f32>(self_.g0) * other.g1);
}

fn scalar__join__translator(self_: Scalar, other: Translator) -> Translator {
    return Translator(vec4<f32>(self_.g0) * other.g0);
}

fn transflector__join__flector(self_: Transflector, other: Flector) -> Motor {
    return Motor(vec4<f32>(self_.g0.x) * vec4<f32>(-other.g0.w, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, -other.g0.w, 0.0, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, -other.g0.w, other.g1.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn transflector__join__flector_at_infinity(self_: Transflector, other: FlectorAtInfinity) -> Translator {
    return Translator(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z));
}

fn transflector__join__line(self_: Transflector, other: Line) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z));
}

fn transflector__join__line_at_infinity(self_: Transflector, other: LineAtInfinity) -> Horizon {
    return Horizon(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn transflector__join__line_at_origin(self_: Transflector, other: LineAtOrigin) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn transflector__join__magnitude(self_: Transflector, other: Magnitude) -> Transflector {
    return Transflector(self_.g0 * vec3<f32>(other.g0.x), self_.g1 * vec4<f32>(other.g0.x));
}

fn transflector__join__motor(self_: Transflector, other: Motor) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z));
}

fn transflector__join__multi_vector(self_: Transflector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g4.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g4.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g4.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g1.w), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g0.x, other.g0.x, other.g0.x, 0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g1.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g2.z, -other.g2.y, -other.g3.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.z, 0.0, other.g2.x, -other.g3.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g2.y, -other.g2.x, 0.0, -other.g3.z) + self_.g1 * vec4<f32>(other.g0.x));
}

fn transflector__join__multi_vector_at_infinity(self_: Transflector, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g0.x, other.g0.x, other.g0.x, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.z) + self_.g1 * vec4<f32>(other.g0.x));
}

fn transflector__join__multi_vector_at_origin(self_: Transflector, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g2.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g0.x), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0));
}

fn transflector__join__origin(self_: Transflector, other: Origin) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(-other.g0, -other.g0, -other.g0, 0.0) + vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0));
}

fn transflector__join__plane(self_: Transflector, other: Plane) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn transflector__join__plane_at_origin(self_: Transflector, other: PlaneAtOrigin) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn transflector__join__point(self_: Transflector, other: Point) -> Motor {
    return Motor(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(-other.g0.w, -other.g0.w, -other.g0.w, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn transflector__join__point_at_infinity(self_: Transflector, other: PointAtInfinity) -> Translator {
    return Translator(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z));
}

fn transflector__join__rotor(self_: Transflector, other: Rotor) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn transflector__join__scalar(self_: Transflector, other: Scalar) -> Transflector {
    return Transflector(self_.g0 * vec3<f32>(other.g0), self_.g1 * vec4<f32>(other.g0));
}

fn transflector__join__transflector(self_: Transflector, other: Transflector) -> Translator {
    return Translator(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, other.g1.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z));
}

fn transflector__join__translator(self_: Transflector, other: Translator) -> Horizon {
    return Horizon(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn translator__join__flector(self_: Translator, other: Flector) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn translator__join__flector_at_infinity(self_: Translator, other: FlectorAtInfinity) -> Horizon {
    return Horizon(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn translator__join__line(self_: Translator, other: Line) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn translator__join__line_at_origin(self_: Translator, other: LineAtOrigin) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn translator__join__magnitude(self_: Translator, other: Magnitude) -> Translator {
    return Translator(self_.g0 * vec4<f32>(other.g0.x));
}

fn translator__join__motor(self_: Translator, other: Motor) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn translator__join__multi_vector(self_: Translator, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g2.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.x), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.x), vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g1.w, 0.0, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g1.w, -other.g1.z));
}

fn translator__join__multi_vector_at_infinity(self_: Translator, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.x), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.x), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.z));
}

fn translator__join__multi_vector_at_origin(self_: Translator, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.x));
}

fn translator__join__origin(self_: Translator, other: Origin) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0));
}

fn translator__join__point(self_: Translator, other: Point) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn translator__join__point_at_infinity(self_: Translator, other: PointAtInfinity) -> Horizon {
    return Horizon(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn translator__join__rotor(self_: Translator, other: Rotor) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn translator__join__scalar(self_: Translator, other: Scalar) -> Translator {
    return Translator(self_.g0 * vec4<f32>(other.g0));
}

fn translator__join__transflector(self_: Translator, other: Transflector) -> Horizon {
    return Horizon(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn anti_scalar__meet__anti_scalar(self_: AntiScalar, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0);
}

fn anti_scalar__meet__flector(self_: AntiScalar, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0) * other.g0, vec4<f32>(self_.g0) * other.g1);
}

fn anti_scalar__meet__flector_at_infinity(self_: AntiScalar, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0) * other.g0);
}

fn anti_scalar__meet__horizon(self_: AntiScalar, other: Horizon) -> Horizon {
    return Horizon(self_.g0 * other.g0);
}

fn anti_scalar__meet__line(self_: AntiScalar, other: Line) -> Line {
    return Line(vec3<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1);
}

fn anti_scalar__meet__line_at_infinity(self_: AntiScalar, other: LineAtInfinity) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(self_.g0) * other.g0);
}

fn anti_scalar__meet__line_at_origin(self_: AntiScalar, other: LineAtOrigin) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(self_.g0) * other.g0);
}

fn anti_scalar__meet__magnitude(self_: AntiScalar, other: Magnitude) -> Magnitude {
    return Magnitude(vec2<f32>(self_.g0) * other.g0);
}

fn anti_scalar__meet__motor(self_: AntiScalar, other: Motor) -> Motor {
    return Motor(vec4<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1);
}

fn anti_scalar__meet__multi_vector(self_: AntiScalar, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0) * other.g0, vec4<f32>(self_.g0) * other.g1, vec3<f32>(self_.g0) * other.g2, vec3<f32>(self_.g0) * other.g3, vec4<f32>(self_.g0) * other.g4);
}

fn anti_scalar__meet__multi_vector_at_infinity(self_: AntiScalar, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1, vec3<f32>(self_.g0) * other.g2);
}

fn anti_scalar__meet__multi_vector_at_origin(self_: AntiScalar, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1, vec3<f32>(self_.g0) * other.g2);
}

fn anti_scalar__meet__origin(self_: AntiScalar, other: Origin) -> Origin {
    return Origin(self_.g0 * other.g0);
}

fn anti_scalar__meet__plane(self_: AntiScalar, other: Plane) -> Plane {
    return Plane(vec4<f32>(self_.g0) * other.g0);
}

fn anti_scalar__meet__plane_at_origin(self_: AntiScalar, other: PlaneAtOrigin) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0) * other.g0);
}

fn anti_scalar__meet__point(self_: AntiScalar, other: Point) -> Point {
    return Point(vec4<f32>(self_.g0) * other.g0);
}

fn anti_scalar__meet__point_at_infinity(self_: AntiScalar, other: PointAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0) * other.g0);
}

fn anti_scalar__meet__rotor(self_: AntiScalar, other: Rotor) -> Rotor {
    return Rotor(vec4<f32>(self_.g0) * other.g0);
}

fn anti_scalar__meet__scalar(self_: AntiScalar, other: Scalar) -> Scalar {
    return Scalar(self_.g0 * other.g0);
}

fn anti_scalar__meet__transflector(self_: AntiScalar, other: Transflector) -> Transflector {
    return Transflector(vec3<f32>(self_.g0) * other.g0, vec4<f32>(self_.g0) * other.g1);
}

fn anti_scalar__meet__translator(self_: AntiScalar, other: Translator) -> Translator {
    return Translator(vec4<f32>(self_.g0) * other.g0);
}

fn flector__meet__anti_scalar(self_: Flector, other: AntiScalar) -> Flector {
    return Flector(self_.g0 * vec4<f32>(other.g0), self_.g1 * vec4<f32>(other.g0));
}

fn flector__meet__flector(self_: Flector, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(-other.g1.w, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g1.w) * vec2<f32>(other.g0.w, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g1.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(0.0));
}

fn flector__meet__flector_at_infinity(self_: Flector, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.w) * vec2<f32>(-other.g0.w, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.w));
}

fn flector__meet__horizon(self_: Flector, other: Horizon) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.w) * vec2<f32>(-other.g0, 0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0));
}

fn flector__meet__line(self_: Flector, other: Line) -> Point {
    return Point(vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn flector__meet__line_at_infinity(self_: Flector, other: LineAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn flector__meet__line_at_origin(self_: Flector, other: LineAtOrigin) -> Point {
    return Point(vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g1.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z));
}

fn flector__meet__magnitude(self_: Flector, other: Magnitude) -> Flector {
    return Flector(self_.g0 * vec4<f32>(other.g0.y), self_.g1 * vec4<f32>(other.g0.y));
}

fn flector__meet__motor(self_: Flector, other: Motor) -> Flector {
    return Flector(self_.g0 * vec4<f32>(other.g0.w) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g1 * vec4<f32>(other.g0.w));
}

fn flector__meet__multi_vector(self_: Flector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g4.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g4.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g4.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(-other.g4.w, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g1.z, 0.0) + vec2<f32>(self_.g1.w) * vec2<f32>(other.g1.w, 0.0), self_.g0 * vec4<f32>(other.g0.y) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g3.z, -other.g3.y, -other.g2.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g3.z, 0.0, other.g3.x, -other.g2.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g3.y, -other.g3.x, 0.0, -other.g2.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g4.z, other.g4.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g4.z, 0.0, -other.g4.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g4.y, other.g4.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g4.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z), self_.g1 * vec4<f32>(other.g0.y));
}

fn flector__meet__multi_vector_at_infinity(self_: Flector, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.w) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g1.z, 0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g2.z, -other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g2.z, 0.0, other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g2.y, -other.g2.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.y));
}

fn flector__meet__multi_vector_at_origin(self_: Flector, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g2.z, 0.0) + vec2<f32>(self_.g1.w) * vec2<f32>(other.g0.x, 0.0), self_.g0 * vec4<f32>(other.g0.y) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + self_.g1.wwwz * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, -other.g1.z), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0), vec3<f32>(self_.g1.w) * other.g2, self_.g1 * vec4<f32>(other.g0.y));
}

fn flector__meet__origin(self_: Flector, other: Origin) -> Scalar {
    return Scalar(self_.g1.w * other.g0);
}

fn flector__meet__plane(self_: Flector, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(-other.g0.w, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn flector__meet__plane_at_origin(self_: Flector, other: PlaneAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g1.w) * other.g0, vec4<f32>(0.0));
}

fn flector__meet__point(self_: Flector, other: Point) -> Scalar {
    return Scalar(self_.g1.x * other.g0.x + self_.g1.y * other.g0.y + self_.g1.z * other.g0.z + self_.g1.w * other.g0.w);
}

fn flector__meet__point_at_infinity(self_: Flector, other: PointAtInfinity) -> Scalar {
    return Scalar(self_.g1.x * other.g0.x + self_.g1.y * other.g0.y + self_.g1.z * other.g0.z);
}

fn flector__meet__rotor(self_: Flector, other: Rotor) -> Flector {
    return Flector(self_.g0 * vec4<f32>(other.g0.w) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g1.wwwz * other.g0.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0), self_.g1 * vec4<f32>(other.g0.w));
}

fn flector__meet__transflector(self_: Flector, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(-other.g1.w, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g1.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(0.0));
}

fn flector__meet__translator(self_: Flector, other: Translator) -> Flector {
    return Flector(self_.g0 * vec4<f32>(other.g0.w) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0), self_.g1 * vec4<f32>(other.g0.w));
}

fn flector_at_infinity__meet__anti_scalar(self_: FlectorAtInfinity, other: AntiScalar) -> FlectorAtInfinity {
    return FlectorAtInfinity(self_.g0 * vec4<f32>(other.g0));
}

fn flector_at_infinity__meet__flector(self_: FlectorAtInfinity, other: Flector) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(other.g0.w, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z));
}

fn flector_at_infinity__meet__line(self_: FlectorAtInfinity, other: Line) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0.w) * other.g0);
}

fn flector_at_infinity__meet__line_at_origin(self_: FlectorAtInfinity, other: LineAtOrigin) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0.w) * other.g0);
}

fn flector_at_infinity__meet__magnitude(self_: FlectorAtInfinity, other: Magnitude) -> FlectorAtInfinity {
    return FlectorAtInfinity(self_.g0 * vec4<f32>(other.g0.y));
}

fn flector_at_infinity__meet__motor(self_: FlectorAtInfinity, other: Motor) -> FlectorAtInfinity {
    return FlectorAtInfinity(self_.g0.xyzx * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * other.g0);
}

fn flector_at_infinity__meet__multi_vector(self_: FlectorAtInfinity, other: MultiVector) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g4.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g4.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g4.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(other.g1.w, other.g0.y), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y) + vec3<f32>(self_.g0.w) * other.g2, vec3<f32>(self_.g0.w) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z));
}

fn flector_at_infinity__meet__multi_vector_at_origin(self_: FlectorAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g2.z, 0.0) + vec2<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y) + vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.w) * other.g2);
}

fn flector_at_infinity__meet__origin(self_: FlectorAtInfinity, other: Origin) -> Scalar {
    return Scalar(self_.g0.w * other.g0);
}

fn flector_at_infinity__meet__plane(self_: FlectorAtInfinity, other: Plane) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn flector_at_infinity__meet__plane_at_origin(self_: FlectorAtInfinity, other: PlaneAtOrigin) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.w) * other.g0);
}

fn flector_at_infinity__meet__point(self_: FlectorAtInfinity, other: Point) -> Scalar {
    return Scalar(self_.g0.w * other.g0.w);
}

fn flector_at_infinity__meet__rotor(self_: FlectorAtInfinity, other: Rotor) -> FlectorAtInfinity {
    return FlectorAtInfinity(self_.g0.xyzx * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * other.g0);
}

fn flector_at_infinity__meet__transflector(self_: FlectorAtInfinity, other: Transflector) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z));
}

fn flector_at_infinity__meet__translator(self_: FlectorAtInfinity, other: Translator) -> FlectorAtInfinity {
    return FlectorAtInfinity(self_.g0 * vec4<f32>(other.g0.w));
}

fn horizon__meet__anti_scalar(self_: Horizon, other: AntiScalar) -> Horizon {
    return Horizon(self_.g0 * other.g0);
}

fn horizon__meet__flector(self_: Horizon, other: Flector) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0) * vec2<f32>(other.g0.w, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z));
}

fn horizon__meet__line(self_: Horizon, other: Line) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0) * other.g0);
}

fn horizon__meet__line_at_origin(self_: Horizon, other: LineAtOrigin) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0) * other.g0);
}

fn horizon__meet__magnitude(self_: Horizon, other: Magnitude) -> Horizon {
    return Horizon(self_.g0 * other.g0.y);
}

fn horizon__meet__motor(self_: Horizon, other: Motor) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0) * other.g0);
}

fn horizon__meet__multi_vector(self_: Horizon, other: MultiVector) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0) * vec2<f32>(other.g1.w, other.g0.y), vec3<f32>(self_.g0) * other.g2, vec3<f32>(self_.g0) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z));
}

fn horizon__meet__multi_vector_at_origin(self_: Horizon, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1, vec3<f32>(self_.g0) * other.g2);
}

fn horizon__meet__origin(self_: Horizon, other: Origin) -> Scalar {
    return Scalar(self_.g0 * other.g0);
}

fn horizon__meet__plane(self_: Horizon, other: Plane) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(self_.g0) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn horizon__meet__plane_at_origin(self_: Horizon, other: PlaneAtOrigin) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(self_.g0) * other.g0);
}

fn horizon__meet__point(self_: Horizon, other: Point) -> Scalar {
    return Scalar(self_.g0 * other.g0.w);
}

fn horizon__meet__rotor(self_: Horizon, other: Rotor) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0) * other.g0);
}

fn horizon__meet__transflector(self_: Horizon, other: Transflector) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(self_.g0) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z));
}

fn horizon__meet__translator(self_: Horizon, other: Translator) -> Horizon {
    return Horizon(self_.g0 * other.g0.w);
}

fn line__meet__anti_scalar(self_: Line, other: AntiScalar) -> Line {
    return Line(self_.g0 * vec3<f32>(other.g0), self_.g1 * vec3<f32>(other.g0));
}

fn line__meet__flector(self_: Line, other: Flector) -> Point {
    return Point(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g1.w, 0.0, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g1.w, -other.g1.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0));
}

fn line__meet__flector_at_infinity(self_: Line, other: FlectorAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(self_.g0 * vec3<f32>(other.g0.w));
}

fn line__meet__horizon(self_: Line, other: Horizon) -> PointAtInfinity {
    return PointAtInfinity(self_.g0 * vec3<f32>(other.g0));
}

fn line__meet__line(self_: Line, other: Line) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z - self_.g1.x * other.g0.x - self_.g1.y * other.g0.y - self_.g1.z * other.g0.z);
}

fn line__meet__line_at_infinity(self_: Line, other: LineAtInfinity) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn line__meet__line_at_origin(self_: Line, other: LineAtOrigin) -> Scalar {
    return Scalar(0.0 - self_.g1.x * other.g0.x - self_.g1.y * other.g0.y - self_.g1.z * other.g0.z);
}

fn line__meet__magnitude(self_: Line, other: Magnitude) -> Line {
    return Line(self_.g0 * vec3<f32>(other.g0.y), self_.g1 * vec3<f32>(other.g0.y));
}

fn line__meet__motor(self_: Line, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), self_.g0 * vec3<f32>(other.g0.w), self_.g1 * vec3<f32>(other.g0.w), vec4<f32>(0.0));
}

fn line__meet__multi_vector(self_: Line, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g3.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g3.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g3.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g2.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g4.w, 0.0, 0.0, -other.g4.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g4.w, 0.0, -other.g4.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g4.w, -other.g4.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g4.z, other.g4.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g4.z, 0.0, -other.g4.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g4.y, other.g4.x, 0.0, 0.0), self_.g0 * vec3<f32>(other.g0.y), self_.g1 * vec3<f32>(other.g0.y), vec4<f32>(0.0));
}

fn line__meet__multi_vector_at_infinity(self_: Line, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g2.z, 0.0), self_.g0 * vec3<f32>(other.g0.y), vec3<f32>(0.0));
}

fn line__meet__multi_vector_at_origin(self_: Line, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g1.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g2.z, other.g2.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g2.z, 0.0, -other.g2.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g2.y, other.g2.x, 0.0, 0.0), self_.g0 * vec3<f32>(other.g0.y), self_.g1 * vec3<f32>(other.g0.y), vec4<f32>(0.0));
}

fn line__meet__plane(self_: Line, other: Plane) -> Point {
    return Point(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0));
}

fn line__meet__plane_at_origin(self_: Line, other: PlaneAtOrigin) -> Point {
    return Point(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0));
}

fn line__meet__rotor(self_: Line, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), self_.g0 * vec3<f32>(other.g0.w), self_.g1 * vec3<f32>(other.g0.w), vec4<f32>(0.0));
}

fn line__meet__transflector(self_: Line, other: Transflector) -> Point {
    return Point(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g1.w, 0.0, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g1.w, -other.g1.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0));
}

fn line__meet__translator(self_: Line, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), self_.g0 * vec3<f32>(other.g0.w), self_.g1 * vec3<f32>(other.g0.w), vec4<f32>(0.0));
}

fn line_at_infinity__meet__anti_scalar(self_: LineAtInfinity, other: AntiScalar) -> LineAtInfinity {
    return LineAtInfinity(self_.g0 * vec3<f32>(other.g0));
}

fn line_at_infinity__meet__flector(self_: LineAtInfinity, other: Flector) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0));
}

fn line_at_infinity__meet__line(self_: LineAtInfinity, other: Line) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn line_at_infinity__meet__line_at_origin(self_: LineAtInfinity, other: LineAtOrigin) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn line_at_infinity__meet__magnitude(self_: LineAtInfinity, other: Magnitude) -> LineAtInfinity {
    return LineAtInfinity(self_.g0 * vec3<f32>(other.g0.y));
}

fn line_at_infinity__meet__motor(self_: LineAtInfinity, other: Motor) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), self_.g0 * vec3<f32>(other.g0.w));
}

fn line_at_infinity__meet__multi_vector(self_: LineAtInfinity, other: MultiVector) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g2.z, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g4.z, other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g4.z, 0.0, -other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g4.y, other.g4.x, 0.0), self_.g0 * vec3<f32>(other.g0.y));
}

fn line_at_infinity__meet__multi_vector_at_origin(self_: LineAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0), self_.g0 * vec3<f32>(other.g0.y));
}

fn line_at_infinity__meet__plane(self_: LineAtInfinity, other: Plane) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn line_at_infinity__meet__plane_at_origin(self_: LineAtInfinity, other: PlaneAtOrigin) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn line_at_infinity__meet__rotor(self_: LineAtInfinity, other: Rotor) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), self_.g0 * vec3<f32>(other.g0.w));
}

fn line_at_infinity__meet__transflector(self_: LineAtInfinity, other: Transflector) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0));
}

fn line_at_infinity__meet__translator(self_: LineAtInfinity, other: Translator) -> LineAtInfinity {
    return LineAtInfinity(self_.g0 * vec3<f32>(other.g0.w));
}

fn line_at_origin__meet__anti_scalar(self_: LineAtOrigin, other: AntiScalar) -> LineAtOrigin {
    return LineAtOrigin(self_.g0 * vec3<f32>(other.g0));
}

fn line_at_origin__meet__flector(self_: LineAtOrigin, other: Flector) -> Point {
    return Point(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g1.w, 0.0, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g1.w, -other.g1.z));
}

fn line_at_origin__meet__flector_at_infinity(self_: LineAtOrigin, other: FlectorAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(self_.g0 * vec3<f32>(other.g0.w));
}

fn line_at_origin__meet__horizon(self_: LineAtOrigin, other: Horizon) -> PointAtInfinity {
    return PointAtInfinity(self_.g0 * vec3<f32>(other.g0));
}

fn line_at_origin__meet__line(self_: LineAtOrigin, other: Line) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z);
}

fn line_at_origin__meet__line_at_infinity(self_: LineAtOrigin, other: LineAtInfinity) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn line_at_origin__meet__magnitude(self_: LineAtOrigin, other: Magnitude) -> LineAtOrigin {
    return LineAtOrigin(self_.g0 * vec3<f32>(other.g0.y));
}

fn line_at_origin__meet__motor(self_: LineAtOrigin, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0), vec4<f32>(0.0), self_.g0 * vec3<f32>(other.g0.w), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn line_at_origin__meet__multi_vector(self_: LineAtOrigin, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g3.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g3.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g3.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g4.w, 0.0, 0.0, -other.g4.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g4.w, 0.0, -other.g4.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g4.w, -other.g4.z), self_.g0 * vec3<f32>(other.g0.y), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn line_at_origin__meet__multi_vector_at_infinity(self_: LineAtOrigin, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g2.z, 0.0), self_.g0 * vec3<f32>(other.g0.y), vec3<f32>(0.0));
}

fn line_at_origin__meet__multi_vector_at_origin(self_: LineAtOrigin, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g2.z, 0.0), self_.g0 * vec3<f32>(other.g0.y), vec3<f32>(0.0));
}

fn line_at_origin__meet__plane(self_: LineAtOrigin, other: Plane) -> Point {
    return Point(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn line_at_origin__meet__plane_at_origin(self_: LineAtOrigin, other: PlaneAtOrigin) -> Origin {
    return Origin(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn line_at_origin__meet__rotor(self_: LineAtOrigin, other: Rotor) -> LineAtOrigin {
    return LineAtOrigin(self_.g0 * vec3<f32>(other.g0.w));
}

fn line_at_origin__meet__transflector(self_: LineAtOrigin, other: Transflector) -> Point {
    return Point(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g1.w, 0.0, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g1.w, -other.g1.z));
}

fn line_at_origin__meet__translator(self_: LineAtOrigin, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), self_.g0 * vec3<f32>(other.g0.w), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn magnitude__meet__anti_scalar(self_: Magnitude, other: AntiScalar) -> Magnitude {
    return Magnitude(self_.g0 * vec2<f32>(other.g0));
}

fn magnitude__meet__flector(self_: Magnitude, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.y) * other.g0, vec4<f32>(self_.g0.y) * other.g1);
}

fn magnitude__meet__flector_at_infinity(self_: Magnitude, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.y) * other.g0);
}

fn magnitude__meet__horizon(self_: Magnitude, other: Horizon) -> Horizon {
    return Horizon(self_.g0.y * other.g0);
}

fn magnitude__meet__line(self_: Magnitude, other: Line) -> Line {
    return Line(vec3<f32>(self_.g0.y) * other.g0, vec3<f32>(self_.g0.y) * other.g1);
}

fn magnitude__meet__line_at_infinity(self_: Magnitude, other: LineAtInfinity) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(self_.g0.y) * other.g0);
}

fn magnitude__meet__line_at_origin(self_: Magnitude, other: LineAtOrigin) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(self_.g0.y) * other.g0);
}

fn magnitude__meet__magnitude(self_: Magnitude, other: Magnitude) -> Magnitude {
    return Magnitude(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.y) * other.g0);
}

fn magnitude__meet__motor(self_: Magnitude, other: Motor) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.w), vec4<f32>(0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.y) * other.g1, vec4<f32>(0.0));
}

fn magnitude__meet__multi_vector(self_: Magnitude, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.y) * other.g0, vec4<f32>(self_.g0.y) * other.g1, vec3<f32>(self_.g0.y) * other.g2, vec3<f32>(self_.g0.y) * other.g3, vec4<f32>(self_.g0.y) * other.g4);
}

fn magnitude__meet__multi_vector_at_infinity(self_: Magnitude, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.y) * other.g0, vec3<f32>(self_.g0.y) * other.g1, vec3<f32>(self_.g0.y) * other.g2);
}

fn magnitude__meet__multi_vector_at_origin(self_: Magnitude, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.y), vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x), vec3<f32>(self_.g0.y) * other.g1, vec3<f32>(0.0), vec4<f32>(self_.g0.y) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0));
}

fn magnitude__meet__origin(self_: Magnitude, other: Origin) -> Origin {
    return Origin(self_.g0.y * other.g0);
}

fn magnitude__meet__plane(self_: Magnitude, other: Plane) -> Plane {
    return Plane(vec4<f32>(self_.g0.y) * other.g0);
}

fn magnitude__meet__plane_at_origin(self_: Magnitude, other: PlaneAtOrigin) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.y) * other.g0);
}

fn magnitude__meet__point(self_: Magnitude, other: Point) -> Point {
    return Point(vec4<f32>(self_.g0.y) * other.g0);
}

fn magnitude__meet__point_at_infinity(self_: Magnitude, other: PointAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0.y) * other.g0);
}

fn magnitude__meet__rotor(self_: Magnitude, other: Rotor) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.w), vec4<f32>(0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn magnitude__meet__scalar(self_: Magnitude, other: Scalar) -> Scalar {
    return Scalar(self_.g0.y * other.g0);
}

fn magnitude__meet__transflector(self_: Magnitude, other: Transflector) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.y) * other.g0, vec4<f32>(self_.g0.y) * other.g1);
}

fn magnitude__meet__translator(self_: Magnitude, other: Translator) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.w), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn motor__meet__anti_scalar(self_: Motor, other: AntiScalar) -> Motor {
    return Motor(self_.g0 * vec4<f32>(other.g0), self_.g1 * vec3<f32>(other.g0));
}

fn motor__meet__flector(self_: Motor, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g1.w, 0.0, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g1.w, -other.g1.z) + vec4<f32>(self_.g0.w) * other.g0 + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0), vec4<f32>(self_.g0.w) * other.g1);
}

fn motor__meet__flector_at_infinity(self_: Motor, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(self_.g0.xyzx * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * other.g0);
}

fn motor__meet__horizon(self_: Motor, other: Horizon) -> FlectorAtInfinity {
    return FlectorAtInfinity(self_.g0 * vec4<f32>(other.g0));
}

fn motor__meet__line(self_: Motor, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.w) * other.g1, vec4<f32>(0.0));
}

fn motor__meet__line_at_infinity(self_: Motor, other: LineAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.w) * other.g0);
}

fn motor__meet__line_at_origin(self_: Motor, other: LineAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(0.0), vec4<f32>(0.0));
}

fn motor__meet__magnitude(self_: Motor, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * other.g0, vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y), self_.g1 * vec3<f32>(other.g0.y), vec4<f32>(0.0));
}

fn motor__meet__motor(self_: Motor, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z, self_.g0.w) * vec2<f32>(-other.g1.z, other.g0.w) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.w) * other.g1 + self_.g1 * vec3<f32>(other.g0.w), vec4<f32>(0.0));
}

fn motor__meet__multi_vector(self_: Motor, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g3.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g3.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g3.z, 0.0) + vec2<f32>(self_.g0.w) * other.g0 + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g2.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(other.g4.w, 0.0, 0.0, -other.g4.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g4.w, 0.0, -other.g4.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g4.w, -other.g4.z) + vec4<f32>(self_.g0.w) * other.g1 + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g4.z, other.g4.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g4.z, 0.0, -other.g4.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g4.y, other.g4.x, 0.0, 0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y) + vec3<f32>(self_.g0.w) * other.g2, vec3<f32>(self_.g0.w) * other.g3 + self_.g1 * vec3<f32>(other.g0.y), vec4<f32>(self_.g0.w) * other.g4);
}

fn motor__meet__multi_vector_at_infinity(self_: Motor, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g2.z, 0.0) + vec2<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y) + vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.w) * other.g2);
}

fn motor__meet__multi_vector_at_origin(self_: Motor, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g1.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g2.z, other.g2.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g2.z, 0.0, -other.g2.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g2.y, other.g2.x, 0.0, 0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y) + vec3<f32>(self_.g0.w) * other.g1, self_.g1 * vec3<f32>(other.g0.y), vec4<f32>(self_.g0.w) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0));
}

fn motor__meet__origin(self_: Motor, other: Origin) -> Origin {
    return Origin(self_.g0.w * other.g0);
}

fn motor__meet__plane(self_: Motor, other: Plane) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0), vec4<f32>(self_.g0.w) * other.g0);
}

fn motor__meet__plane_at_origin(self_: Motor, other: PlaneAtOrigin) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0), vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn motor__meet__point(self_: Motor, other: Point) -> Point {
    return Point(vec4<f32>(self_.g0.w) * other.g0);
}

fn motor__meet__point_at_infinity(self_: Motor, other: PointAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0.w) * other.g0);
}

fn motor__meet__rotor(self_: Motor, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), self_.g1 * vec3<f32>(other.g0.w), vec4<f32>(0.0));
}

fn motor__meet__scalar(self_: Motor, other: Scalar) -> Scalar {
    return Scalar(self_.g0.w * other.g0);
}

fn motor__meet__transflector(self_: Motor, other: Transflector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g1.w, 0.0, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g1.w, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g1.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g1.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0), vec4<f32>(self_.g0.w) * other.g1);
}

fn motor__meet__translator(self_: Motor, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z, self_.g0.w) * vec2<f32>(-other.g0.z, other.g0.w), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + self_.g1 * vec3<f32>(other.g0.w), vec4<f32>(0.0));
}

fn multi_vector__meet__anti_scalar(self_: MultiVector, other: AntiScalar) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0), self_.g1 * vec4<f32>(other.g0), self_.g2 * vec3<f32>(other.g0), self_.g3 * vec3<f32>(other.g0), self_.g4 * vec4<f32>(other.g0));
}

fn multi_vector__meet__flector(self_: MultiVector, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g1.w) * vec2<f32>(-other.g1.w, 0.0) + vec2<f32>(self_.g4.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g4.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g4.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g4.w) * vec2<f32>(other.g0.w, 0.0), vec4<f32>(self_.g0.y) * other.g0 + vec4<f32>(self_.g2.x) * vec4<f32>(other.g1.w, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, other.g1.w, 0.0, -other.g1.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, other.g1.w, -other.g1.z) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g3.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g3.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0), vec3<f32>(self_.g4.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g4.x, self_.g4.y, self_.g4.z) * vec3<f32>(other.g1.w) + vec3<f32>(self_.g4.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(self_.g0.y) * other.g1);
}

fn multi_vector__meet__flector_at_infinity(self_: MultiVector, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g1.w) * vec2<f32>(-other.g0.w, 0.0) + vec2<f32>(self_.g4.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g4.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g4.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + self_.g2 * vec3<f32>(other.g0.w), vec3<f32>(0.0) - vec3<f32>(self_.g4.x, self_.g4.y, self_.g4.z) * vec3<f32>(other.g0.w));
}

fn multi_vector__meet__horizon(self_: MultiVector, other: Horizon) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0) + vec2<f32>(self_.g1.w) * vec2<f32>(-other.g0, 0.0), self_.g2 * vec3<f32>(other.g0), vec3<f32>(0.0) - vec3<f32>(self_.g4.x, self_.g4.y, self_.g4.z) * vec3<f32>(other.g0));
}

fn multi_vector__meet__line(self_: MultiVector, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g2.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(self_.g4.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g4.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g4.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g4.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(self_.g0.y) * other.g0, vec3<f32>(self_.g0.y) * other.g1, vec4<f32>(0.0));
}

fn multi_vector__meet__line_at_infinity(self_: MultiVector, other: LineAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g2.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(self_.g4.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.y) * other.g0);
}

fn multi_vector__meet__line_at_origin(self_: MultiVector, other: LineAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g3.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(self_.g4.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g4.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g4.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z), vec3<f32>(self_.g0.y) * other.g0, vec3<f32>(0.0), vec4<f32>(0.0));
}

fn multi_vector__meet__magnitude(self_: MultiVector, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.y) * other.g0, self_.g1 * vec4<f32>(other.g0.y), self_.g2 * vec3<f32>(other.g0.y), self_.g3 * vec3<f32>(other.g0.y), self_.g4 * vec4<f32>(other.g0.y));
}

fn multi_vector__meet__motor(self_: MultiVector, other: Motor) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.w) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g0.z, 0.0), self_.g1 * vec4<f32>(other.g0.w) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g4.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g4.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g4.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + self_.g2 * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.y) * other.g1 + self_.g3 * vec3<f32>(other.g0.w), self_.g4 * vec4<f32>(other.g0.w));
}

fn multi_vector__meet__multi_vector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.y) * other.g0 + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g4.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g4.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g4.z, 0.0) + vec2<f32>(self_.g1.w) * vec2<f32>(-other.g4.w, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g3.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g3.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g3.z, 0.0) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g2.z, 0.0) + vec2<f32>(self_.g4.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g4.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g4.z) * vec2<f32>(other.g1.z, 0.0) + vec2<f32>(self_.g4.w) * vec2<f32>(other.g1.w, 0.0), vec4<f32>(self_.g0.y) * other.g1 + self_.g1 * vec4<f32>(other.g0.y) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g4.w, 0.0, 0.0, -other.g4.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, other.g4.w, 0.0, -other.g4.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, other.g4.w, -other.g4.z) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, -other.g4.z, other.g4.y, 0.0) + vec4<f32>(self_.g3.y) * vec4<f32>(other.g4.z, 0.0, -other.g4.x, 0.0) + vec4<f32>(self_.g3.z) * vec4<f32>(-other.g4.y, other.g4.x, 0.0, 0.0) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, other.g3.z, -other.g3.y, -other.g2.x) + vec4<f32>(self_.g4.y) * vec4<f32>(-other.g3.z, 0.0, other.g3.x, -other.g2.y) + vec4<f32>(self_.g4.z) * vec4<f32>(other.g3.y, -other.g3.x, 0.0, -other.g2.z) + vec4<f32>(self_.g4.w) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0), vec3<f32>(self_.g0.y) * other.g2 + self_.g2 * vec3<f32>(other.g0.y) + vec3<f32>(self_.g4.x) * vec3<f32>(0.0, -other.g4.z, other.g4.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g4.z, 0.0, -other.g4.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g4.y, other.g4.x, 0.0), vec3<f32>(self_.g0.y) * other.g3 + self_.g3 * vec3<f32>(other.g0.y) - vec3<f32>(self_.g4.x, self_.g4.y, self_.g4.z) * vec3<f32>(other.g4.w) + vec3<f32>(self_.g4.w) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z), vec4<f32>(self_.g0.y) * other.g4 + self_.g4 * vec4<f32>(other.g0.y));
}

fn multi_vector__meet__multi_vector_at_infinity(self_: MultiVector, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.y) * other.g0 + vec2<f32>(self_.g1.w) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g2.z, 0.0) + vec2<f32>(self_.g4.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g4.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g4.z) * vec2<f32>(other.g1.z, 0.0), vec3<f32>(self_.g0.y) * other.g1 + self_.g2 * vec3<f32>(other.g0.y) + vec3<f32>(self_.g4.x) * vec3<f32>(0.0, other.g2.z, -other.g2.y) + vec3<f32>(self_.g4.y) * vec3<f32>(-other.g2.z, 0.0, other.g2.x) + vec3<f32>(self_.g4.z) * vec3<f32>(other.g2.y, -other.g2.x, 0.0), vec3<f32>(self_.g0.y) * other.g2 - vec3<f32>(self_.g4.x, self_.g4.y, self_.g4.z) * vec3<f32>(other.g0.y));
}

fn multi_vector__meet__multi_vector_at_origin(self_: MultiVector, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.y) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g2.z, 0.0) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g4.w) * vec2<f32>(other.g0.x, 0.0), vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + self_.g1 * vec4<f32>(other.g0.y) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.z) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, -other.g2.z, other.g2.y, 0.0) + vec4<f32>(self_.g3.y) * vec4<f32>(other.g2.z, 0.0, -other.g2.x, 0.0) + vec4<f32>(self_.g3.z) * vec4<f32>(-other.g2.y, other.g2.x, 0.0, 0.0) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g4.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + self_.g4.wwwz * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, -other.g1.z), vec3<f32>(self_.g0.y) * other.g1 + self_.g2 * vec3<f32>(other.g0.y) + vec3<f32>(self_.g4.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0), self_.g3 * vec3<f32>(other.g0.y) + vec3<f32>(self_.g4.w) * other.g2, vec4<f32>(self_.g0.y) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0) + self_.g4 * vec4<f32>(other.g0.y));
}

fn multi_vector__meet__origin(self_: MultiVector, other: Origin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g4.w) * vec2<f32>(other.g0, 0.0), vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn multi_vector__meet__plane(self_: MultiVector, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0) + vec2<f32>(self_.g1.w) * vec2<f32>(-other.g0.w, 0.0), vec4<f32>(self_.g2.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g3.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g3.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0), vec3<f32>(self_.g4.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g4.x, self_.g4.y, self_.g4.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g4.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g0.y) * other.g0);
}

fn multi_vector__meet__plane_at_origin(self_: MultiVector, other: PlaneAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(self_.g2.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g3.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g3.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0), vec3<f32>(self_.g4.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g4.w) * other.g0, vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn multi_vector__meet__point(self_: MultiVector, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g4.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g4.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g4.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g4.w) * vec2<f32>(other.g0.w, 0.0), vec4<f32>(self_.g0.y) * other.g0, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn multi_vector__meet__point_at_infinity(self_: MultiVector, other: PointAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g4.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g4.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g4.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(self_.g0.y) * other.g0, vec3<f32>(0.0));
}

fn multi_vector__meet__rotor(self_: MultiVector, other: Rotor) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.w) + vec2<f32>(self_.g3.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g3.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g3.z) * vec2<f32>(-other.g0.z, 0.0), self_.g1 * vec4<f32>(other.g0.w) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g4.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g4.wwwz * other.g0.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + self_.g2 * vec3<f32>(other.g0.w), self_.g3 * vec3<f32>(other.g0.w), self_.g4 * vec4<f32>(other.g0.w));
}

fn multi_vector__meet__scalar(self_: MultiVector, other: Scalar) -> Scalar {
    return Scalar(self_.g0.y * other.g0);
}

fn multi_vector__meet__transflector(self_: MultiVector, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g1.w) * vec2<f32>(-other.g1.w, 0.0) + vec2<f32>(self_.g4.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g4.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g4.z) * vec2<f32>(other.g0.z, 0.0), vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g1.w, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, other.g1.w, 0.0, -other.g1.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, other.g1.w, -other.g1.z) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g3.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g3.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0), vec3<f32>(self_.g4.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g4.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g4.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g4.x, self_.g4.y, self_.g4.z) * vec3<f32>(other.g1.w) + vec3<f32>(self_.g4.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(self_.g0.y) * other.g1);
}

fn multi_vector__meet__translator(self_: MultiVector, other: Translator) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.w) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g0.z, 0.0), self_.g1 * vec4<f32>(other.g0.w) + vec4<f32>(self_.g4.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g4.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g4.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0), self_.g2 * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + self_.g3 * vec3<f32>(other.g0.w), self_.g4 * vec4<f32>(other.g0.w));
}

fn multi_vector_at_infinity__meet__anti_scalar(self_: MultiVectorAtInfinity, other: AntiScalar) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0 * vec2<f32>(other.g0), self_.g1 * vec3<f32>(other.g0), self_.g2 * vec3<f32>(other.g0));
}

fn multi_vector_at_infinity__meet__flector(self_: MultiVectorAtInfinity, other: Flector) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.w, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g1.z, 0.0), vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z));
}

fn multi_vector_at_infinity__meet__line(self_: MultiVectorAtInfinity, other: Line) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g2.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(self_.g0.y) * other.g0, vec3<f32>(0.0));
}

fn multi_vector_at_infinity__meet__line_at_origin(self_: MultiVectorAtInfinity, other: LineAtOrigin) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g2.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(self_.g0.y) * other.g0, vec3<f32>(0.0));
}

fn multi_vector_at_infinity__meet__magnitude(self_: MultiVectorAtInfinity, other: Magnitude) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0 * vec2<f32>(other.g0.y), self_.g1 * vec3<f32>(other.g0.y), self_.g2 * vec3<f32>(other.g0.y));
}

fn multi_vector_at_infinity__meet__motor(self_: MultiVectorAtInfinity, other: Motor) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0 * vec2<f32>(other.g0.w) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + self_.g1 * vec3<f32>(other.g0.w), self_.g2 * vec3<f32>(other.g0.w));
}

fn multi_vector_at_infinity__meet__multi_vector(self_: MultiVectorAtInfinity, other: MultiVector) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.w, other.g0.y) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g4.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g4.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g4.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g2.z, 0.0), vec3<f32>(self_.g0.y) * other.g2 + self_.g1 * vec3<f32>(other.g0.y) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g4.z, other.g4.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g4.z, 0.0, -other.g4.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g4.y, other.g4.x, 0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z) + self_.g2 * vec3<f32>(other.g0.y));
}

fn multi_vector_at_infinity__meet__multi_vector_at_origin(self_: MultiVectorAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.y) * other.g0 + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g2.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g1.z, 0.0), vec3<f32>(self_.g0.y) * other.g1 + self_.g1 * vec3<f32>(other.g0.y) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0), vec3<f32>(self_.g0.y) * other.g2 + self_.g2 * vec3<f32>(other.g0.y));
}

fn multi_vector_at_infinity__meet__origin(self_: MultiVectorAtInfinity, other: Origin) -> Scalar {
    return Scalar(self_.g0.y * other.g0);
}

fn multi_vector_at_infinity__meet__plane(self_: MultiVectorAtInfinity, other: Plane) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn multi_vector_at_infinity__meet__plane_at_origin(self_: MultiVectorAtInfinity, other: PlaneAtOrigin) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.y) * other.g0);
}

fn multi_vector_at_infinity__meet__point(self_: MultiVectorAtInfinity, other: Point) -> Scalar {
    return Scalar(self_.g0.y * other.g0.w);
}

fn multi_vector_at_infinity__meet__rotor(self_: MultiVectorAtInfinity, other: Rotor) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0 * vec2<f32>(other.g0.w) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + self_.g1 * vec3<f32>(other.g0.w), self_.g2 * vec3<f32>(other.g0.w));
}

fn multi_vector_at_infinity__meet__transflector(self_: MultiVectorAtInfinity, other: Transflector) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g1.z, 0.0), vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z));
}

fn multi_vector_at_infinity__meet__translator(self_: MultiVectorAtInfinity, other: Translator) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0 * vec2<f32>(other.g0.w), self_.g1 * vec3<f32>(other.g0.w), self_.g2 * vec3<f32>(other.g0.w));
}

fn multi_vector_at_origin__meet__anti_scalar(self_: MultiVectorAtOrigin, other: AntiScalar) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0 * vec2<f32>(other.g0), self_.g1 * vec3<f32>(other.g0), self_.g2 * vec3<f32>(other.g0));
}

fn multi_vector_at_origin__meet__flector(self_: MultiVectorAtOrigin, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.w, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(other.g0.z, 0.0), vec4<f32>(self_.g0.y) * other.g0 + vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.w, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g1.w, 0.0, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g1.w, -other.g1.z), vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(0.0) - self_.g2 * vec3<f32>(other.g1.w), vec4<f32>(self_.g0.y) * other.g1);
}

fn multi_vector_at_origin__meet__flector_at_infinity(self_: MultiVectorAtOrigin, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0 * vec2<f32>(-other.g0.w) + vec2<f32>(self_.g2.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + self_.g1 * vec3<f32>(other.g0.w), vec3<f32>(0.0) - self_.g2 * vec3<f32>(other.g0.w));
}

fn multi_vector_at_origin__meet__horizon(self_: MultiVectorAtOrigin, other: Horizon) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0 * vec2<f32>(-other.g0), self_.g1 * vec3<f32>(other.g0), vec3<f32>(0.0) - self_.g2 * vec3<f32>(other.g0));
}

fn multi_vector_at_origin__meet__line(self_: MultiVectorAtOrigin, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g1.z, 0.0), vec4<f32>(self_.g2.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z), vec3<f32>(self_.g0.y) * other.g0, vec3<f32>(self_.g0.y) * other.g1, vec4<f32>(0.0));
}

fn multi_vector_at_origin__meet__line_at_infinity(self_: MultiVectorAtOrigin, other: LineAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec3<f32>(self_.g0.y) * other.g0);
}

fn multi_vector_at_origin__meet__line_at_origin(self_: MultiVectorAtOrigin, other: LineAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g2.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(self_.g0.y) * other.g0, vec3<f32>(0.0));
}

fn multi_vector_at_origin__meet__magnitude(self_: MultiVectorAtOrigin, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.y) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y), self_.g1 * vec3<f32>(other.g0.y), vec3<f32>(0.0), vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, self_.g2.x) * vec4<f32>(other.g0.y, other.g0.y, other.g0.y, 0.0));
}

fn multi_vector_at_origin__meet__motor(self_: MultiVectorAtOrigin, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g1.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + self_.g1 * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.y) * other.g1, vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, self_.g2.x) * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0));
}

fn multi_vector_at_origin__meet__multi_vector(self_: MultiVectorAtOrigin, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g4.w, 0.0) + vec2<f32>(self_.g0.y) * other.g0 + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g3.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g3.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g3.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(other.g1.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g0.y) * other.g1 + vec4<f32>(self_.g1.x) * vec4<f32>(other.g4.w, 0.0, 0.0, -other.g4.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g4.w, 0.0, -other.g4.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g4.w, -other.g4.z) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, other.g3.z, -other.g3.y, -other.g2.x) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g3.z, 0.0, other.g3.x, -other.g2.y) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g3.y, -other.g3.x, 0.0, -other.g2.z), vec3<f32>(self_.g0.y) * other.g2 + self_.g1 * vec3<f32>(other.g0.y) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g4.z, other.g4.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g4.z, 0.0, -other.g4.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g4.y, other.g4.x, 0.0), vec3<f32>(self_.g0.y) * other.g3 - self_.g2 * vec3<f32>(other.g4.w), vec4<f32>(self_.g0.y) * other.g4 + vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, self_.g2.x) * vec4<f32>(other.g0.y, other.g0.y, other.g0.y, 0.0));
}

fn multi_vector_at_origin__meet__multi_vector_at_infinity(self_: MultiVectorAtOrigin, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.y) * other.g0 + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g2.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(other.g1.z, 0.0), vec3<f32>(self_.g0.y) * other.g1 + self_.g1 * vec3<f32>(other.g0.y) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, other.g2.z, -other.g2.y) + vec3<f32>(self_.g2.y) * vec3<f32>(-other.g2.z, 0.0, other.g2.x) + vec3<f32>(self_.g2.z) * vec3<f32>(other.g2.y, -other.g2.x, 0.0), vec3<f32>(self_.g0.y) * other.g2 - self_.g2 * vec3<f32>(other.g0.y));
}

fn multi_vector_at_origin__meet__multi_vector_at_origin(self_: MultiVectorAtOrigin, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.y) * other.g0 + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g2.z, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g1.z, 0.0), vec3<f32>(self_.g0.y) * other.g1 + self_.g1 * vec3<f32>(other.g0.y) + vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0), vec3<f32>(self_.g0.y) * other.g2 + self_.g2 * vec3<f32>(other.g0.y));
}

fn multi_vector_at_origin__meet__origin(self_: MultiVectorAtOrigin, other: Origin) -> Origin {
    return Origin(self_.g0.y * other.g0);
}

fn multi_vector_at_origin__meet__plane(self_: MultiVectorAtOrigin, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.w, 0.0), vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z), vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(0.0) - self_.g2 * vec3<f32>(other.g0.w), vec4<f32>(self_.g0.y) * other.g0);
}

fn multi_vector_at_origin__meet__plane_at_origin(self_: MultiVectorAtOrigin, other: PlaneAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.y) * other.g0);
}

fn multi_vector_at_origin__meet__point(self_: MultiVectorAtOrigin, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g2.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(other.g0.z, 0.0), vec4<f32>(self_.g0.y) * other.g0, vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn multi_vector_at_origin__meet__point_at_infinity(self_: MultiVectorAtOrigin, other: PointAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g2.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(self_.g0.y) * other.g0, vec3<f32>(0.0));
}

fn multi_vector_at_origin__meet__rotor(self_: MultiVectorAtOrigin, other: Rotor) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0 * vec2<f32>(other.g0.w) + vec2<f32>(self_.g2.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z) + self_.g1 * vec3<f32>(other.g0.w), self_.g2 * vec3<f32>(other.g0.w));
}

fn multi_vector_at_origin__meet__scalar(self_: MultiVectorAtOrigin, other: Scalar) -> Scalar {
    return Scalar(self_.g0.y * other.g0);
}

fn multi_vector_at_origin__meet__transflector(self_: MultiVectorAtOrigin, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.w, 0.0) + vec2<f32>(self_.g2.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g2.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g2.z) * vec2<f32>(other.g0.z, 0.0), vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.w, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g1.w, 0.0, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g1.w, -other.g1.z), vec3<f32>(self_.g2.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g2.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g2.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(0.0) - self_.g2 * vec3<f32>(other.g1.w), vec4<f32>(self_.g0.y) * other.g1);
}

fn multi_vector_at_origin__meet__translator(self_: MultiVectorAtOrigin, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g1.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, 0.0), self_.g1 * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g2.x, self_.g2.y, self_.g2.z, self_.g2.x) * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0));
}

fn origin__meet__anti_scalar(self_: Origin, other: AntiScalar) -> Origin {
    return Origin(self_.g0 * other.g0);
}

fn origin__meet__flector(self_: Origin, other: Flector) -> Scalar {
    return Scalar(0.0 - self_.g0 * other.g1.w);
}

fn origin__meet__flector_at_infinity(self_: Origin, other: FlectorAtInfinity) -> Scalar {
    return Scalar(0.0 - self_.g0 * other.g0.w);
}

fn origin__meet__horizon(self_: Origin, other: Horizon) -> Scalar {
    return Scalar(0.0 - self_.g0 * other.g0);
}

fn origin__meet__magnitude(self_: Origin, other: Magnitude) -> Origin {
    return Origin(self_.g0 * other.g0.y);
}

fn origin__meet__motor(self_: Origin, other: Motor) -> Origin {
    return Origin(self_.g0 * other.g0.w);
}

fn origin__meet__multi_vector(self_: Origin, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0) * vec2<f32>(-other.g4.w, 0.0), vec4<f32>(self_.g0) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn origin__meet__multi_vector_at_infinity(self_: Origin, other: MultiVectorAtInfinity) -> Scalar {
    return Scalar(0.0 - self_.g0 * other.g0.y);
}

fn origin__meet__multi_vector_at_origin(self_: Origin, other: MultiVectorAtOrigin) -> Origin {
    return Origin(self_.g0 * other.g0.y);
}

fn origin__meet__plane(self_: Origin, other: Plane) -> Scalar {
    return Scalar(0.0 - self_.g0 * other.g0.w);
}

fn origin__meet__rotor(self_: Origin, other: Rotor) -> Origin {
    return Origin(self_.g0 * other.g0.w);
}

fn origin__meet__transflector(self_: Origin, other: Transflector) -> Scalar {
    return Scalar(0.0 - self_.g0 * other.g1.w);
}

fn origin__meet__translator(self_: Origin, other: Translator) -> Origin {
    return Origin(self_.g0 * other.g0.w);
}

fn plane__meet__anti_scalar(self_: Plane, other: AntiScalar) -> Plane {
    return Plane(self_.g0 * vec4<f32>(other.g0));
}

fn plane__meet__flector(self_: Plane, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(other.g0.w, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(0.0));
}

fn plane__meet__flector_at_infinity(self_: Plane, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w));
}

fn plane__meet__horizon(self_: Plane, other: Horizon) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0));
}

fn plane__meet__line(self_: Plane, other: Line) -> Point {
    return Point(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn plane__meet__line_at_infinity(self_: Plane, other: LineAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn plane__meet__line_at_origin(self_: Plane, other: LineAtOrigin) -> Point {
    return Point(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g0.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z));
}

fn plane__meet__magnitude(self_: Plane, other: Magnitude) -> Plane {
    return Plane(self_.g0 * vec4<f32>(other.g0.y));
}

fn plane__meet__motor(self_: Plane, other: Motor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g0 * vec4<f32>(other.g0.w));
}

fn plane__meet__multi_vector(self_: Plane, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(other.g1.w, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g3.z, -other.g3.y, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g3.z, 0.0, other.g3.x, -other.g2.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g3.y, -other.g3.x, 0.0, -other.g2.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g4.z, other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g4.z, 0.0, -other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g4.y, other.g4.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g4.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z), self_.g0 * vec4<f32>(other.g0.y));
}

fn plane__meet__multi_vector_at_infinity(self_: Plane, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, 0.0, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y));
}

fn plane__meet__multi_vector_at_origin(self_: Plane, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + self_.g0.wwwz * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, -other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0), vec3<f32>(self_.g0.w) * other.g2, self_.g0 * vec4<f32>(other.g0.y));
}

fn plane__meet__origin(self_: Plane, other: Origin) -> Scalar {
    return Scalar(self_.g0.w * other.g0);
}

fn plane__meet__plane(self_: Plane, other: Plane) -> Line {
    return Line(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn plane__meet__plane_at_origin(self_: Plane, other: PlaneAtOrigin) -> Line {
    return Line(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g0.w) * other.g0);
}

fn plane__meet__point(self_: Plane, other: Point) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z + self_.g0.w * other.g0.w);
}

fn plane__meet__point_at_infinity(self_: Plane, other: PointAtInfinity) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn plane__meet__rotor(self_: Plane, other: Rotor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g0.wwwz * other.g0.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0), self_.g0 * vec4<f32>(other.g0.w));
}

fn plane__meet__transflector(self_: Plane, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(0.0));
}

fn plane__meet__translator(self_: Plane, other: Translator) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), self_.g0 * vec4<f32>(other.g0.w));
}

fn plane_at_origin__meet__anti_scalar(self_: PlaneAtOrigin, other: AntiScalar) -> PlaneAtOrigin {
    return PlaneAtOrigin(self_.g0 * vec3<f32>(other.g0));
}

fn plane_at_origin__meet__flector(self_: PlaneAtOrigin, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g1.w), vec4<f32>(0.0));
}

fn plane_at_origin__meet__flector_at_infinity(self_: PlaneAtOrigin, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0.w));
}

fn plane_at_origin__meet__horizon(self_: PlaneAtOrigin, other: Horizon) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0));
}

fn plane_at_origin__meet__line(self_: PlaneAtOrigin, other: Line) -> Point {
    return Point(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z));
}

fn plane_at_origin__meet__line_at_infinity(self_: PlaneAtOrigin, other: LineAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn plane_at_origin__meet__line_at_origin(self_: PlaneAtOrigin, other: LineAtOrigin) -> Origin {
    return Origin(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn plane_at_origin__meet__magnitude(self_: PlaneAtOrigin, other: Magnitude) -> PlaneAtOrigin {
    return PlaneAtOrigin(self_.g0 * vec3<f32>(other.g0.y));
}

fn plane_at_origin__meet__motor(self_: PlaneAtOrigin, other: Motor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0));
}

fn plane_at_origin__meet__multi_vector(self_: PlaneAtOrigin, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g3.z, -other.g3.y, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g3.z, 0.0, other.g3.x, -other.g2.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g3.y, -other.g3.x, 0.0, -other.g2.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g4.z, other.g4.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g4.z, 0.0, -other.g4.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g4.y, other.g4.x, 0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g4.w), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g0.y, other.g0.y, other.g0.y, 0.0));
}

fn plane_at_origin__meet__multi_vector_at_infinity(self_: PlaneAtOrigin, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g1.z, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g2.z, -other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g2.z, 0.0, other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g2.y, -other.g2.x, 0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0.y));
}

fn plane_at_origin__meet__multi_vector_at_origin(self_: PlaneAtOrigin, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0), self_.g0 * vec3<f32>(other.g0.y));
}

fn plane_at_origin__meet__plane(self_: PlaneAtOrigin, other: Plane) -> Line {
    return Line(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0.w));
}

fn plane_at_origin__meet__plane_at_origin(self_: PlaneAtOrigin, other: PlaneAtOrigin) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn plane_at_origin__meet__point(self_: PlaneAtOrigin, other: Point) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn plane_at_origin__meet__point_at_infinity(self_: PlaneAtOrigin, other: PointAtInfinity) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn plane_at_origin__meet__rotor(self_: PlaneAtOrigin, other: Rotor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0));
}

fn plane_at_origin__meet__transflector(self_: PlaneAtOrigin, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g1.w), vec4<f32>(0.0));
}

fn plane_at_origin__meet__translator(self_: PlaneAtOrigin, other: Translator) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0));
}

fn point__meet__anti_scalar(self_: Point, other: AntiScalar) -> Point {
    return Point(self_.g0 * vec4<f32>(other.g0));
}

fn point__meet__flector(self_: Point, other: Flector) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z - self_.g0.w * other.g1.w);
}

fn point__meet__flector_at_infinity(self_: Point, other: FlectorAtInfinity) -> Scalar {
    return Scalar(0.0 - self_.g0.w * other.g0.w);
}

fn point__meet__horizon(self_: Point, other: Horizon) -> Scalar {
    return Scalar(0.0 - self_.g0.w * other.g0);
}

fn point__meet__magnitude(self_: Point, other: Magnitude) -> Point {
    return Point(self_.g0 * vec4<f32>(other.g0.y));
}

fn point__meet__motor(self_: Point, other: Motor) -> Point {
    return Point(self_.g0 * vec4<f32>(other.g0.w));
}

fn point__meet__multi_vector(self_: Point, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g4.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g4.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g4.z, 0.0) + vec2<f32>(self_.g0.w) * vec2<f32>(-other.g4.w, 0.0), self_.g0 * vec4<f32>(other.g0.y), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn point__meet__multi_vector_at_infinity(self_: Point, other: MultiVectorAtInfinity) -> Scalar {
    return Scalar(0.0 - self_.g0.w * other.g0.y);
}

fn point__meet__multi_vector_at_origin(self_: Point, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g2.z, 0.0), self_.g0 * vec4<f32>(other.g0.y), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn point__meet__plane(self_: Point, other: Plane) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z - self_.g0.w * other.g0.w);
}

fn point__meet__plane_at_origin(self_: Point, other: PlaneAtOrigin) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn point__meet__rotor(self_: Point, other: Rotor) -> Point {
    return Point(self_.g0 * vec4<f32>(other.g0.w));
}

fn point__meet__transflector(self_: Point, other: Transflector) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z - self_.g0.w * other.g1.w);
}

fn point__meet__translator(self_: Point, other: Translator) -> Point {
    return Point(self_.g0 * vec4<f32>(other.g0.w));
}

fn point_at_infinity__meet__anti_scalar(self_: PointAtInfinity, other: AntiScalar) -> PointAtInfinity {
    return PointAtInfinity(self_.g0 * vec3<f32>(other.g0));
}

fn point_at_infinity__meet__flector(self_: PointAtInfinity, other: Flector) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z);
}

fn point_at_infinity__meet__magnitude(self_: PointAtInfinity, other: Magnitude) -> PointAtInfinity {
    return PointAtInfinity(self_.g0 * vec3<f32>(other.g0.y));
}

fn point_at_infinity__meet__motor(self_: PointAtInfinity, other: Motor) -> PointAtInfinity {
    return PointAtInfinity(self_.g0 * vec3<f32>(other.g0.w));
}

fn point_at_infinity__meet__multi_vector(self_: PointAtInfinity, other: MultiVector) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g4.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g4.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g4.z, 0.0), self_.g0 * vec3<f32>(other.g0.y), vec3<f32>(0.0));
}

fn point_at_infinity__meet__multi_vector_at_origin(self_: PointAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g2.z, 0.0), self_.g0 * vec3<f32>(other.g0.y), vec3<f32>(0.0));
}

fn point_at_infinity__meet__plane(self_: PointAtInfinity, other: Plane) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn point_at_infinity__meet__plane_at_origin(self_: PointAtInfinity, other: PlaneAtOrigin) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn point_at_infinity__meet__rotor(self_: PointAtInfinity, other: Rotor) -> PointAtInfinity {
    return PointAtInfinity(self_.g0 * vec3<f32>(other.g0.w));
}

fn point_at_infinity__meet__transflector(self_: PointAtInfinity, other: Transflector) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z);
}

fn point_at_infinity__meet__translator(self_: PointAtInfinity, other: Translator) -> PointAtInfinity {
    return PointAtInfinity(self_.g0 * vec3<f32>(other.g0.w));
}

fn rotor__meet__anti_scalar(self_: Rotor, other: AntiScalar) -> Rotor {
    return Rotor(self_.g0 * vec4<f32>(other.g0));
}

fn rotor__meet__flector(self_: Rotor, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g1.w, 0.0, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g1.w, -other.g1.z) + vec4<f32>(self_.g0.w) * other.g0, vec4<f32>(self_.g0.w) * other.g1);
}

fn rotor__meet__flector_at_infinity(self_: Rotor, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(self_.g0.xyzx * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * other.g0);
}

fn rotor__meet__horizon(self_: Rotor, other: Horizon) -> FlectorAtInfinity {
    return FlectorAtInfinity(self_.g0 * vec4<f32>(other.g0));
}

fn rotor__meet__line(self_: Rotor, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.w) * other.g1, vec4<f32>(0.0));
}

fn rotor__meet__line_at_infinity(self_: Rotor, other: LineAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.w) * other.g0);
}

fn rotor__meet__line_at_origin(self_: Rotor, other: LineAtOrigin) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(self_.g0.w) * other.g0);
}

fn rotor__meet__magnitude(self_: Rotor, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * other.g0, vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn rotor__meet__motor(self_: Rotor, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z, self_.g0.w) * vec2<f32>(-other.g1.z, other.g0.w), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.w) * other.g1, vec4<f32>(0.0));
}

fn rotor__meet__multi_vector(self_: Rotor, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g3.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g3.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g3.z, 0.0) + vec2<f32>(self_.g0.w) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(other.g4.w, 0.0, 0.0, -other.g4.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g4.w, 0.0, -other.g4.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g4.w, -other.g4.z) + vec4<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y) + vec3<f32>(self_.g0.w) * other.g2, vec3<f32>(self_.g0.w) * other.g3, vec4<f32>(self_.g0.w) * other.g4);
}

fn rotor__meet__multi_vector_at_infinity(self_: Rotor, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g2.z, 0.0) + vec2<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y) + vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.w) * other.g2);
}

fn rotor__meet__multi_vector_at_origin(self_: Rotor, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g2.z, 0.0) + vec2<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y) + vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.w) * other.g2);
}

fn rotor__meet__origin(self_: Rotor, other: Origin) -> Origin {
    return Origin(self_.g0.w * other.g0);
}

fn rotor__meet__plane(self_: Rotor, other: Plane) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z), vec4<f32>(self_.g0.w) * other.g0);
}

fn rotor__meet__plane_at_origin(self_: Rotor, other: PlaneAtOrigin) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z), vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn rotor__meet__point(self_: Rotor, other: Point) -> Point {
    return Point(vec4<f32>(self_.g0.w) * other.g0);
}

fn rotor__meet__point_at_infinity(self_: Rotor, other: PointAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0.w) * other.g0);
}

fn rotor__meet__rotor(self_: Rotor, other: Rotor) -> Rotor {
    return Rotor(self_.g0.xyzx * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * other.g0);
}

fn rotor__meet__scalar(self_: Rotor, other: Scalar) -> Scalar {
    return Scalar(self_.g0.w * other.g0);
}

fn rotor__meet__transflector(self_: Rotor, other: Transflector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g1.w, 0.0, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g1.w, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec4<f32>(self_.g0.w) * other.g1);
}

fn rotor__meet__translator(self_: Rotor, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z, self_.g0.w) * vec2<f32>(-other.g0.z, other.g0.w), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn scalar__meet__anti_scalar(self_: Scalar, other: AntiScalar) -> Scalar {
    return Scalar(self_.g0 * other.g0);
}

fn scalar__meet__magnitude(self_: Scalar, other: Magnitude) -> Scalar {
    return Scalar(self_.g0 * other.g0.y);
}

fn scalar__meet__motor(self_: Scalar, other: Motor) -> Scalar {
    return Scalar(self_.g0 * other.g0.w);
}

fn scalar__meet__multi_vector(self_: Scalar, other: MultiVector) -> Scalar {
    return Scalar(self_.g0 * other.g0.y);
}

fn scalar__meet__multi_vector_at_origin(self_: Scalar, other: MultiVectorAtOrigin) -> Scalar {
    return Scalar(self_.g0 * other.g0.y);
}

fn scalar__meet__rotor(self_: Scalar, other: Rotor) -> Scalar {
    return Scalar(self_.g0 * other.g0.w);
}

fn scalar__meet__translator(self_: Scalar, other: Translator) -> Scalar {
    return Scalar(self_.g0 * other.g0.w);
}

fn transflector__meet__anti_scalar(self_: Transflector, other: AntiScalar) -> Transflector {
    return Transflector(self_.g0 * vec3<f32>(other.g0), self_.g1 * vec4<f32>(other.g0));
}

fn transflector__meet__flector(self_: Transflector, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0) + vec2<f32>(self_.g1.w) * vec2<f32>(other.g0.w, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g1.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(0.0));
}

fn transflector__meet__flector_at_infinity(self_: Transflector, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.w));
}

fn transflector__meet__horizon(self_: Transflector, other: Horizon) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0));
}

fn transflector__meet__line(self_: Transflector, other: Line) -> Point {
    return Point(vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn transflector__meet__line_at_infinity(self_: Transflector, other: LineAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn transflector__meet__line_at_origin(self_: Transflector, other: LineAtOrigin) -> Point {
    return Point(vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g1.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z));
}

fn transflector__meet__magnitude(self_: Transflector, other: Magnitude) -> Transflector {
    return Transflector(self_.g0 * vec3<f32>(other.g0.y), self_.g1 * vec4<f32>(other.g0.y));
}

fn transflector__meet__motor(self_: Transflector, other: Motor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g1.z, -other.g1.y, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g1.z, 0.0, other.g1.x, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g1.y, -other.g1.x, 0.0, -other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), self_.g1 * vec4<f32>(other.g0.w));
}

fn transflector__meet__multi_vector(self_: Transflector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g4.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g4.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g4.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g1.z, 0.0) + vec2<f32>(self_.g1.w) * vec2<f32>(other.g1.w, 0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g0.y, other.g0.y, other.g0.y, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g3.z, -other.g3.y, -other.g2.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g3.z, 0.0, other.g3.x, -other.g2.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g3.y, -other.g3.x, 0.0, -other.g2.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g4.z, other.g4.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g4.z, 0.0, -other.g4.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g4.y, other.g4.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g4.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g4.x, other.g4.y, other.g4.z), self_.g1 * vec4<f32>(other.g0.y));
}

fn transflector__meet__multi_vector_at_infinity(self_: Transflector, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g1.x) * vec2<f32>(other.g1.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g1.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g1.z, 0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g2.z, -other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g2.z, 0.0, other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g2.y, -other.g2.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.y));
}

fn transflector__meet__multi_vector_at_origin(self_: Transflector, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g2.z, 0.0) + vec2<f32>(self_.g1.w) * vec2<f32>(other.g0.x, 0.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g0.y, other.g0.y, other.g0.y, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + self_.g1.wwwz * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, -other.g1.z), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g2.z, other.g2.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g2.z, 0.0, -other.g2.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g2.y, other.g2.x, 0.0), vec3<f32>(self_.g1.w) * other.g2, self_.g1 * vec4<f32>(other.g0.y));
}

fn transflector__meet__origin(self_: Transflector, other: Origin) -> Scalar {
    return Scalar(self_.g1.w * other.g0);
}

fn transflector__meet__plane(self_: Transflector, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(0.0));
}

fn transflector__meet__plane_at_origin(self_: Transflector, other: PlaneAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec3<f32>(self_.g1.w) * other.g0, vec4<f32>(0.0));
}

fn transflector__meet__point(self_: Transflector, other: Point) -> Scalar {
    return Scalar(self_.g1.x * other.g0.x + self_.g1.y * other.g0.y + self_.g1.z * other.g0.z + self_.g1.w * other.g0.w);
}

fn transflector__meet__point_at_infinity(self_: Transflector, other: PointAtInfinity) -> Scalar {
    return Scalar(self_.g1.x * other.g0.x + self_.g1.y * other.g0.y + self_.g1.z * other.g0.z);
}

fn transflector__meet__rotor(self_: Transflector, other: Rotor) -> Flector {
    return Flector(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g1.wwwz * other.g0.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0), self_.g1 * vec4<f32>(other.g0.w));
}

fn transflector__meet__transflector(self_: Transflector, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g1.z, 0.0) + vec2<f32>(self_.g1.x) * vec2<f32>(other.g0.x, 0.0) + vec2<f32>(self_.g1.y) * vec2<f32>(other.g0.y, 0.0) + vec2<f32>(self_.g1.z) * vec2<f32>(other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g1.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec4<f32>(0.0));
}

fn transflector__meet__translator(self_: Transflector, other: Translator) -> Transflector {
    return Transflector(self_.g0 * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0), self_.g1 * vec4<f32>(other.g0.w));
}

fn translator__meet__anti_scalar(self_: Translator, other: AntiScalar) -> Translator {
    return Translator(self_.g0 * vec4<f32>(other.g0));
}

fn translator__meet__flector(self_: Translator, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * other.g0, vec4<f32>(self_.g0.w) * other.g1);
}

fn translator__meet__flector_at_infinity(self_: Translator, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.w) * other.g0);
}

fn translator__meet__horizon(self_: Translator, other: Horizon) -> Horizon {
    return Horizon(self_.g0.w * other.g0);
}

fn translator__meet__line(self_: Translator, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.w) * other.g1, vec4<f32>(0.0));
}

fn translator__meet__line_at_infinity(self_: Translator, other: LineAtInfinity) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(self_.g0.w) * other.g0);
}

fn translator__meet__line_at_origin(self_: Translator, other: LineAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g0.z, 0.0), vec4<f32>(0.0), vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(0.0), vec4<f32>(0.0));
}

fn translator__meet__magnitude(self_: Translator, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * other.g0, vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y), vec4<f32>(0.0));
}

fn translator__meet__motor(self_: Translator, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z, self_.g0.w) * vec2<f32>(-other.g0.z, other.g0.w), vec4<f32>(0.0), vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g0.w) * other.g1, vec4<f32>(0.0));
}

fn translator__meet__multi_vector(self_: Translator, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g2.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g2.y, 0.0) + vec2<f32>(self_.g0.z) * vec2<f32>(-other.g2.z, 0.0) + vec2<f32>(self_.g0.w) * other.g0, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g4.z, other.g4.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g4.z, 0.0, -other.g4.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g4.y, other.g4.x, 0.0, 0.0) + vec4<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.w) * other.g2, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y) + vec3<f32>(self_.g0.w) * other.g3, vec4<f32>(self_.g0.w) * other.g4);
}

fn translator__meet__multi_vector_at_infinity(self_: Translator, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.w) * other.g2);
}

fn translator__meet__multi_vector_at_origin(self_: Translator, other: MultiVectorAtOrigin) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g1.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g1.y, 0.0) + vec2<f32>(self_.g0.z, self_.g0.w) * vec2<f32>(-other.g1.z, other.g0.y), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g2.z, other.g2.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g2.z, 0.0, -other.g2.x, 0.0) + self_.g0.zzzw * vec4<f32>(-other.g2.y, other.g2.x, 0.0, other.g0.x), vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.y), vec4<f32>(self_.g0.w) * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, 0.0));
}

fn translator__meet__origin(self_: Translator, other: Origin) -> Origin {
    return Origin(self_.g0.w * other.g0);
}

fn translator__meet__plane(self_: Translator, other: Plane) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g0.w) * other.g0);
}

fn translator__meet__plane_at_origin(self_: Translator, other: PlaneAtOrigin) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0));
}

fn translator__meet__point(self_: Translator, other: Point) -> Point {
    return Point(vec4<f32>(self_.g0.w) * other.g0);
}

fn translator__meet__point_at_infinity(self_: Translator, other: PointAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0.w) * other.g0);
}

fn translator__meet__rotor(self_: Translator, other: Rotor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(-other.g0.x, 0.0) + vec2<f32>(self_.g0.y) * vec2<f32>(-other.g0.y, 0.0) + vec2<f32>(self_.g0.z, self_.g0.w) * vec2<f32>(-other.g0.z, other.g0.w), vec4<f32>(0.0), vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w), vec4<f32>(0.0));
}

fn translator__meet__scalar(self_: Translator, other: Scalar) -> Scalar {
    return Scalar(self_.g0.w * other.g0);
}

fn translator__meet__transflector(self_: Translator, other: Transflector) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + vec3<f32>(self_.g0.w) * other.g0, vec4<f32>(self_.g0.w) * other.g1);
}

fn translator__meet__translator(self_: Translator, other: Translator) -> Translator {
    return Translator(self_.g0.xyzx * vec4<f32>(other.g0.w, other.g0.w, other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * other.g0);
}

fn anti_scalar__wedge__magnitude(self_: AntiScalar, other: Magnitude) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0.x);
}

fn anti_scalar__wedge__multi_vector(self_: AntiScalar, other: MultiVector) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0.x);
}

fn anti_scalar__wedge__multi_vector_at_infinity(self_: AntiScalar, other: MultiVectorAtInfinity) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0.x);
}

fn anti_scalar__wedge__scalar(self_: AntiScalar, other: Scalar) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0);
}

fn flector__wedge__flector(self_: Flector, other: Flector) -> Motor {
    return Motor(vec4<f32>(self_.g0.x) * vec4<f32>(-other.g0.w, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, -other.g0.w, 0.0, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, -other.g0.w, other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, other.g1.w) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn flector__wedge__flector_at_infinity(self_: Flector, other: FlectorAtInfinity) -> Motor {
    return Motor(vec4<f32>(self_.g0.w) * other.g0 + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn flector__wedge__horizon(self_: Flector, other: Horizon) -> AntiScalar {
    return AntiScalar(self_.g0.w * other.g0);
}

fn flector__wedge__line(self_: Flector, other: Line) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0));
}

fn flector__wedge__line_at_infinity(self_: Flector, other: LineAtInfinity) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g0.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z));
}

fn flector__wedge__line_at_origin(self_: Flector, other: LineAtOrigin) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn flector__wedge__magnitude(self_: Flector, other: Magnitude) -> Flector {
    return Flector(self_.g0 * vec4<f32>(other.g0.x), self_.g1 * vec4<f32>(other.g0.x));
}

fn flector__wedge__motor(self_: Flector, other: Motor) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0));
}

fn flector__wedge__multi_vector(self_: Flector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g4.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g4.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g4.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g4.w) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g1.w), self_.g0 * vec4<f32>(other.g0.x), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g2.z, -other.g2.y, -other.g3.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.z, 0.0, other.g2.x, -other.g3.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g2.y, -other.g2.x, 0.0, -other.g3.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g3.x, other.g3.y, other.g3.z, 0.0) + self_.g1 * vec4<f32>(other.g0.x));
}

fn flector__wedge__multi_vector_at_infinity(self_: Flector, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z), self_.g0 * vec4<f32>(other.g0.x), vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + self_.g0.wwwz * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, -other.g2.z) + self_.g1 * vec4<f32>(other.g0.x));
}

fn flector__wedge__multi_vector_at_origin(self_: Flector, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g2.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g0.x), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0));
}

fn flector__wedge__origin(self_: Flector, other: Origin) -> Rotor {
    return Rotor(self_.g0.xyzx * vec4<f32>(-other.g0, -other.g0, -other.g0, 0.0) + vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0));
}

fn flector__wedge__plane(self_: Flector, other: Plane) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z + self_.g0.w * other.g0.w);
}

fn flector__wedge__plane_at_origin(self_: Flector, other: PlaneAtOrigin) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn flector__wedge__point(self_: Flector, other: Point) -> Motor {
    return Motor(self_.g0.xyzx * vec4<f32>(-other.g0.w, -other.g0.w, -other.g0.w, 0.0) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn flector__wedge__point_at_infinity(self_: Flector, other: PointAtInfinity) -> Motor {
    return Motor(vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn flector__wedge__rotor(self_: Flector, other: Rotor) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn flector__wedge__scalar(self_: Flector, other: Scalar) -> Flector {
    return Flector(self_.g0 * vec4<f32>(other.g0), self_.g1 * vec4<f32>(other.g0));
}

fn flector__wedge__transflector(self_: Flector, other: Transflector) -> Motor {
    return Motor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, other.g1.w) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn flector__wedge__translator(self_: Flector, other: Translator) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g0.wwwz * other.g0.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0));
}

fn flector_at_infinity__wedge__flector(self_: FlectorAtInfinity, other: Flector) -> Motor {
    return Motor(vec4<f32>(self_.g0.x) * vec4<f32>(-other.g0.w, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, -other.g0.w, 0.0, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, -other.g0.w, other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn flector_at_infinity__wedge__flector_at_infinity(self_: FlectorAtInfinity, other: FlectorAtInfinity) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn flector_at_infinity__wedge__line(self_: FlectorAtInfinity, other: Line) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z));
}

fn flector_at_infinity__wedge__line_at_infinity(self_: FlectorAtInfinity, other: LineAtInfinity) -> Horizon {
    return Horizon(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn flector_at_infinity__wedge__line_at_origin(self_: FlectorAtInfinity, other: LineAtOrigin) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn flector_at_infinity__wedge__magnitude(self_: FlectorAtInfinity, other: Magnitude) -> FlectorAtInfinity {
    return FlectorAtInfinity(self_.g0 * vec4<f32>(other.g0.x));
}

fn flector_at_infinity__wedge__motor(self_: FlectorAtInfinity, other: Motor) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z));
}

fn flector_at_infinity__wedge__multi_vector(self_: FlectorAtInfinity, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g4.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g4.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g4.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, -other.g1.w), self_.g0.xyzx * vec4<f32>(other.g0.x, other.g0.x, other.g0.x, 0.0), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g2.z, -other.g2.y, -other.g3.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.z, 0.0, other.g2.x, -other.g3.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g2.y, -other.g2.x, 0.0, -other.g3.z) + vec4<f32>(self_.g0.w) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x));
}

fn flector_at_infinity__wedge__multi_vector_at_infinity(self_: FlectorAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g2.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.x), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0));
}

fn flector_at_infinity__wedge__multi_vector_at_origin(self_: FlectorAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g2.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, -other.g0.x), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0));
}

fn flector_at_infinity__wedge__origin(self_: FlectorAtInfinity, other: Origin) -> Rotor {
    return Rotor(vec4<f32>(0.0) - self_.g0 * vec4<f32>(other.g0));
}

fn flector_at_infinity__wedge__plane(self_: FlectorAtInfinity, other: Plane) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn flector_at_infinity__wedge__plane_at_origin(self_: FlectorAtInfinity, other: PlaneAtOrigin) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn flector_at_infinity__wedge__point(self_: FlectorAtInfinity, other: Point) -> Motor {
    return Motor(vec4<f32>(0.0) - self_.g0 * vec4<f32>(other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn flector_at_infinity__wedge__point_at_infinity(self_: FlectorAtInfinity, other: PointAtInfinity) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn flector_at_infinity__wedge__rotor(self_: FlectorAtInfinity, other: Rotor) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn flector_at_infinity__wedge__scalar(self_: FlectorAtInfinity, other: Scalar) -> FlectorAtInfinity {
    return FlectorAtInfinity(self_.g0 * vec4<f32>(other.g0));
}

fn flector_at_infinity__wedge__transflector(self_: FlectorAtInfinity, other: Transflector) -> Translator {
    return Translator(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, other.g1.z));
}

fn flector_at_infinity__wedge__translator(self_: FlectorAtInfinity, other: Translator) -> Horizon {
    return Horizon(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn horizon__wedge__flector(self_: Horizon, other: Flector) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0 * other.g0.w);
}

fn horizon__wedge__magnitude(self_: Horizon, other: Magnitude) -> Horizon {
    return Horizon(self_.g0 * other.g0.x);
}

fn horizon__wedge__multi_vector(self_: Horizon, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0) * vec2<f32>(0.0, -other.g1.w), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x));
}

fn horizon__wedge__multi_vector_at_infinity(self_: Horizon, other: MultiVectorAtInfinity) -> Horizon {
    return Horizon(self_.g0 * other.g0.x);
}

fn horizon__wedge__multi_vector_at_origin(self_: Horizon, other: MultiVectorAtOrigin) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0 * other.g0.x);
}

fn horizon__wedge__origin(self_: Horizon, other: Origin) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0 * other.g0);
}

fn horizon__wedge__point(self_: Horizon, other: Point) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0 * other.g0.w);
}

fn horizon__wedge__scalar(self_: Horizon, other: Scalar) -> Horizon {
    return Horizon(self_.g0 * other.g0);
}

fn line__wedge__flector(self_: Line, other: Flector) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn line__wedge__flector_at_infinity(self_: Line, other: FlectorAtInfinity) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z));
}

fn line__wedge__line(self_: Line, other: Line) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z - self_.g1.x * other.g0.x - self_.g1.y * other.g0.y - self_.g1.z * other.g0.z);
}

fn line__wedge__line_at_infinity(self_: Line, other: LineAtInfinity) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn line__wedge__line_at_origin(self_: Line, other: LineAtOrigin) -> AntiScalar {
    return AntiScalar(0.0 - self_.g1.x * other.g0.x - self_.g1.y * other.g0.y - self_.g1.z * other.g0.z);
}

fn line__wedge__magnitude(self_: Line, other: Magnitude) -> Line {
    return Line(self_.g0 * vec3<f32>(other.g0.x), self_.g1 * vec3<f32>(other.g0.x));
}

fn line__wedge__motor(self_: Line, other: Motor) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z - self_.g1.x * other.g0.x - self_.g1.y * other.g0.y - self_.g1.z * other.g0.z);
}

fn line__wedge__multi_vector(self_: Line, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g3.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g3.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g3.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g2.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g2.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g2.z), vec4<f32>(0.0), self_.g0 * vec3<f32>(other.g0.x), self_.g1 * vec3<f32>(other.g0.x), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.w, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g1.w, 0.0, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g1.w, -other.g1.z));
}

fn line__wedge__multi_vector_at_infinity(self_: Line, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g2.z), vec4<f32>(0.0), self_.g0 * vec3<f32>(other.g0.x), self_.g1 * vec3<f32>(other.g0.x), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.z));
}

fn line__wedge__multi_vector_at_origin(self_: Line, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(0.0), self_.g1 * vec3<f32>(other.g0.x));
}

fn line__wedge__origin(self_: Line, other: Origin) -> PlaneAtOrigin {
    return PlaneAtOrigin(self_.g1 * vec3<f32>(other.g0));
}

fn line__wedge__point(self_: Line, other: Point) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn line__wedge__point_at_infinity(self_: Line, other: PointAtInfinity) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z));
}

fn line__wedge__rotor(self_: Line, other: Rotor) -> AntiScalar {
    return AntiScalar(0.0 - self_.g1.x * other.g0.x - self_.g1.y * other.g0.y - self_.g1.z * other.g0.z);
}

fn line__wedge__scalar(self_: Line, other: Scalar) -> Line {
    return Line(self_.g0 * vec3<f32>(other.g0), self_.g1 * vec3<f32>(other.g0));
}

fn line__wedge__transflector(self_: Line, other: Transflector) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z));
}

fn line__wedge__translator(self_: Line, other: Translator) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn line_at_infinity__wedge__flector(self_: LineAtInfinity, other: Flector) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn line_at_infinity__wedge__flector_at_infinity(self_: LineAtInfinity, other: FlectorAtInfinity) -> Horizon {
    return Horizon(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn line_at_infinity__wedge__line(self_: LineAtInfinity, other: Line) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn line_at_infinity__wedge__line_at_origin(self_: LineAtInfinity, other: LineAtOrigin) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn line_at_infinity__wedge__magnitude(self_: LineAtInfinity, other: Magnitude) -> LineAtInfinity {
    return LineAtInfinity(self_.g0 * vec3<f32>(other.g0.x));
}

fn line_at_infinity__wedge__motor(self_: LineAtInfinity, other: Motor) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn line_at_infinity__wedge__multi_vector(self_: LineAtInfinity, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g2.z), vec4<f32>(0.0), vec3<f32>(0.0), self_.g0 * vec3<f32>(other.g0.x), vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g1.w, 0.0, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g1.w, -other.g1.z));
}

fn line_at_infinity__wedge__multi_vector_at_infinity(self_: LineAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(0.0), self_.g0 * vec3<f32>(other.g0.x));
}

fn line_at_infinity__wedge__multi_vector_at_origin(self_: LineAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(0.0), self_.g0 * vec3<f32>(other.g0.x));
}

fn line_at_infinity__wedge__origin(self_: LineAtInfinity, other: Origin) -> PlaneAtOrigin {
    return PlaneAtOrigin(self_.g0 * vec3<f32>(other.g0));
}

fn line_at_infinity__wedge__point(self_: LineAtInfinity, other: Point) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn line_at_infinity__wedge__point_at_infinity(self_: LineAtInfinity, other: PointAtInfinity) -> Horizon {
    return Horizon(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn line_at_infinity__wedge__rotor(self_: LineAtInfinity, other: Rotor) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn line_at_infinity__wedge__scalar(self_: LineAtInfinity, other: Scalar) -> LineAtInfinity {
    return LineAtInfinity(self_.g0 * vec3<f32>(other.g0));
}

fn line_at_infinity__wedge__transflector(self_: LineAtInfinity, other: Transflector) -> Horizon {
    return Horizon(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn line_at_origin__wedge__flector(self_: LineAtOrigin, other: Flector) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn line_at_origin__wedge__flector_at_infinity(self_: LineAtOrigin, other: FlectorAtInfinity) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn line_at_origin__wedge__line(self_: LineAtOrigin, other: Line) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z);
}

fn line_at_origin__wedge__line_at_infinity(self_: LineAtOrigin, other: LineAtInfinity) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn line_at_origin__wedge__magnitude(self_: LineAtOrigin, other: Magnitude) -> LineAtOrigin {
    return LineAtOrigin(self_.g0 * vec3<f32>(other.g0.x));
}

fn line_at_origin__wedge__motor(self_: LineAtOrigin, other: Motor) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z);
}

fn line_at_origin__wedge__multi_vector(self_: LineAtOrigin, other: MultiVector) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g3.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g3.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g3.z), self_.g0 * vec3<f32>(other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0));
}

fn line_at_origin__wedge__multi_vector_at_infinity(self_: LineAtOrigin, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g2.z), self_.g0 * vec3<f32>(other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0));
}

fn line_at_origin__wedge__point(self_: LineAtOrigin, other: Point) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn line_at_origin__wedge__point_at_infinity(self_: LineAtOrigin, other: PointAtInfinity) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn line_at_origin__wedge__scalar(self_: LineAtOrigin, other: Scalar) -> LineAtOrigin {
    return LineAtOrigin(self_.g0 * vec3<f32>(other.g0));
}

fn line_at_origin__wedge__transflector(self_: LineAtOrigin, other: Transflector) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn line_at_origin__wedge__translator(self_: LineAtOrigin, other: Translator) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn magnitude__wedge__anti_scalar(self_: Magnitude, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0);
}

fn magnitude__wedge__flector(self_: Magnitude, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0.x) * other.g0, vec4<f32>(self_.g0.x) * other.g1);
}

fn magnitude__wedge__flector_at_infinity(self_: Magnitude, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x) * other.g0);
}

fn magnitude__wedge__horizon(self_: Magnitude, other: Horizon) -> Horizon {
    return Horizon(self_.g0.x * other.g0);
}

fn magnitude__wedge__line(self_: Magnitude, other: Line) -> Line {
    return Line(vec3<f32>(self_.g0.x) * other.g0, vec3<f32>(self_.g0.x) * other.g1);
}

fn magnitude__wedge__line_at_infinity(self_: Magnitude, other: LineAtInfinity) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(self_.g0.x) * other.g0);
}

fn magnitude__wedge__line_at_origin(self_: Magnitude, other: LineAtOrigin) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(self_.g0.x) * other.g0);
}

fn magnitude__wedge__magnitude(self_: Magnitude, other: Magnitude) -> Magnitude {
    return Magnitude(vec2<f32>(self_.g0.x) * other.g0 + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.x));
}

fn magnitude__wedge__motor(self_: Magnitude, other: Motor) -> Motor {
    return Motor(vec4<f32>(self_.g0.x) * other.g0, vec3<f32>(self_.g0.x) * other.g1);
}

fn magnitude__wedge__multi_vector(self_: Magnitude, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * other.g0 + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.x), vec4<f32>(self_.g0.x) * other.g1, vec3<f32>(self_.g0.x) * other.g2, vec3<f32>(self_.g0.x) * other.g3, vec4<f32>(self_.g0.x) * other.g4);
}

fn magnitude__wedge__multi_vector_at_infinity(self_: Magnitude, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.x), vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * other.g2, vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y));
}

fn magnitude__wedge__multi_vector_at_origin(self_: Magnitude, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * other.g0, vec3<f32>(self_.g0.x) * other.g1, vec3<f32>(self_.g0.x) * other.g2);
}

fn magnitude__wedge__origin(self_: Magnitude, other: Origin) -> Origin {
    return Origin(self_.g0.x * other.g0);
}

fn magnitude__wedge__plane(self_: Magnitude, other: Plane) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * other.g0);
}

fn magnitude__wedge__plane_at_origin(self_: Magnitude, other: PlaneAtOrigin) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x) * other.g0);
}

fn magnitude__wedge__point(self_: Magnitude, other: Point) -> Point {
    return Point(vec4<f32>(self_.g0.x) * other.g0);
}

fn magnitude__wedge__point_at_infinity(self_: Magnitude, other: PointAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0.x) * other.g0);
}

fn magnitude__wedge__rotor(self_: Magnitude, other: Rotor) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x) * other.g0);
}

fn magnitude__wedge__scalar(self_: Magnitude, other: Scalar) -> Magnitude {
    return Magnitude(self_.g0 * vec2<f32>(other.g0));
}

fn magnitude__wedge__transflector(self_: Magnitude, other: Transflector) -> Transflector {
    return Transflector(vec3<f32>(self_.g0.x) * other.g0, vec4<f32>(self_.g0.x) * other.g1);
}

fn magnitude__wedge__translator(self_: Magnitude, other: Translator) -> Translator {
    return Translator(vec4<f32>(self_.g0.x) * other.g0);
}

fn motor__wedge__flector(self_: Motor, other: Flector) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn motor__wedge__flector_at_infinity(self_: Motor, other: FlectorAtInfinity) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z));
}

fn motor__wedge__line(self_: Motor, other: Line) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z - self_.g1.x * other.g0.x - self_.g1.y * other.g0.y - self_.g1.z * other.g0.z);
}

fn motor__wedge__line_at_infinity(self_: Motor, other: LineAtInfinity) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn motor__wedge__line_at_origin(self_: Motor, other: LineAtOrigin) -> AntiScalar {
    return AntiScalar(0.0 - self_.g1.x * other.g0.x - self_.g1.y * other.g0.y - self_.g1.z * other.g0.z);
}

fn motor__wedge__magnitude(self_: Motor, other: Magnitude) -> Motor {
    return Motor(self_.g0 * vec4<f32>(other.g0.x), self_.g1 * vec3<f32>(other.g0.x));
}

fn motor__wedge__motor(self_: Motor, other: Motor) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z - self_.g1.x * other.g0.x - self_.g1.y * other.g0.y - self_.g1.z * other.g0.z);
}

fn motor__wedge__multi_vector(self_: Motor, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g3.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g3.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g3.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g2.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g2.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g2.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.x), self_.g1 * vec3<f32>(other.g0.x), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g1.w, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g1.w, 0.0, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g1.w, -other.g1.z));
}

fn motor__wedge__multi_vector_at_infinity(self_: Motor, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g2.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.x), vec4<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.x), self_.g1 * vec3<f32>(other.g0.x), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.z));
}

fn motor__wedge__multi_vector_at_origin(self_: Motor, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(0.0), self_.g1 * vec3<f32>(other.g0.x));
}

fn motor__wedge__origin(self_: Motor, other: Origin) -> PlaneAtOrigin {
    return PlaneAtOrigin(self_.g1 * vec3<f32>(other.g0));
}

fn motor__wedge__point(self_: Motor, other: Point) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn motor__wedge__point_at_infinity(self_: Motor, other: PointAtInfinity) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z));
}

fn motor__wedge__rotor(self_: Motor, other: Rotor) -> AntiScalar {
    return AntiScalar(0.0 - self_.g1.x * other.g0.x - self_.g1.y * other.g0.y - self_.g1.z * other.g0.z);
}

fn motor__wedge__scalar(self_: Motor, other: Scalar) -> Motor {
    return Motor(self_.g0 * vec4<f32>(other.g0), self_.g1 * vec3<f32>(other.g0));
}

fn motor__wedge__transflector(self_: Motor, other: Transflector) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z));
}

fn motor__wedge__translator(self_: Motor, other: Translator) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn multi_vector__wedge__anti_scalar(self_: MultiVector, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0);
}

fn multi_vector__wedge__flector(self_: MultiVector, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g1.w) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g4.w) * vec2<f32>(0.0, -other.g0.w), vec4<f32>(self_.g0.x) * other.g0, vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g0.x) * other.g1 + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g3.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g3.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g3.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn multi_vector__wedge__flector_at_infinity(self_: MultiVector, other: FlectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.w) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g3.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g3.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z));
}

fn multi_vector__wedge__horizon(self_: MultiVector, other: Horizon) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g0), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0));
}

fn multi_vector__wedge__line(self_: MultiVector, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g3.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g3.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g3.z) * vec2<f32>(0.0, -other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * other.g0, vec3<f32>(self_.g0.x) * other.g1, vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0));
}

fn multi_vector__wedge__line_at_infinity(self_: MultiVector, other: LineAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * other.g0, vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g1.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z));
}

fn multi_vector__wedge__line_at_origin(self_: MultiVector, other: LineAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g3.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g3.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g3.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * other.g0, vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn multi_vector__wedge__magnitude(self_: MultiVector, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * other.g0 + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.x), self_.g1 * vec4<f32>(other.g0.x), self_.g2 * vec3<f32>(other.g0.x), self_.g3 * vec3<f32>(other.g0.x), self_.g4 * vec4<f32>(other.g0.x));
}

fn multi_vector__wedge__motor(self_: MultiVector, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g3.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g3.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g3.z) * vec2<f32>(0.0, -other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * other.g1, vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0));
}

fn multi_vector__wedge__multi_vector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * other.g0 + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g4.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g4.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g4.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g4.w) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g3.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g3.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g3.z) + vec2<f32>(self_.g3.x) * vec2<f32>(0.0, -other.g2.x) + vec2<f32>(self_.g3.y) * vec2<f32>(0.0, -other.g2.y) + vec2<f32>(self_.g3.z) * vec2<f32>(0.0, -other.g2.z) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g4.w) * vec2<f32>(0.0, -other.g1.w), vec4<f32>(self_.g0.x) * other.g1 + self_.g1 * vec4<f32>(other.g0.x), vec3<f32>(self_.g0.x) * other.g2 - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g1.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + self_.g2 * vec3<f32>(other.g0.x), vec3<f32>(self_.g0.x) * other.g3 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + self_.g3 * vec3<f32>(other.g0.x), vec4<f32>(self_.g0.x) * other.g4 + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g2.z, -other.g2.y, -other.g3.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g2.z, 0.0, other.g2.x, -other.g3.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g2.y, -other.g2.x, 0.0, -other.g3.z) + vec4<f32>(self_.g1.w) * vec4<f32>(other.g3.x, other.g3.y, other.g3.z, 0.0) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g3.x) * vec4<f32>(other.g1.w, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g3.y) * vec4<f32>(0.0, other.g1.w, 0.0, -other.g1.y) + vec4<f32>(self_.g3.z) * vec4<f32>(0.0, 0.0, other.g1.w, -other.g1.z) + self_.g4 * vec4<f32>(other.g0.x));
}

fn multi_vector__wedge__multi_vector_at_infinity(self_: MultiVector, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0.x) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g2.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g2.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g2.z) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, -other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0) + self_.g1 * vec4<f32>(other.g0.x), vec3<f32>(self_.g1.w) * other.g1 + self_.g2 * vec3<f32>(other.g0.x), vec3<f32>(self_.g0.x) * other.g2 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + self_.g3 * vec3<f32>(other.g0.x), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g0.y) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + self_.g1.wwwz * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, -other.g2.z) + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, -other.g1.z, other.g1.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g1.z, 0.0, -other.g1.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g1.y, other.g1.x, 0.0, 0.0) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g3.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + vec4<f32>(self_.g3.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.z) + self_.g4 * vec4<f32>(other.g0.x));
}

fn multi_vector__wedge__multi_vector_at_origin(self_: MultiVector, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * other.g0 + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g2.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g2.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g2.z) + vec2<f32>(self_.g3.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g3.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g3.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g4.w) * vec2<f32>(0.0, -other.g0.x), vec3<f32>(self_.g0.x) * other.g1 - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.x), vec3<f32>(self_.g0.x) * other.g2 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + self_.g3 * vec3<f32>(other.g0.x));
}

fn multi_vector__wedge__origin(self_: MultiVector, other: Origin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0, 0.0) + vec2<f32>(self_.g4.w) * vec2<f32>(0.0, -other.g0), vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0), self_.g3 * vec3<f32>(other.g0));
}

fn multi_vector__wedge__plane(self_: MultiVector, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g0.w), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0.x) * other.g0);
}

fn multi_vector__wedge__plane_at_origin(self_: MultiVector, other: PlaneAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * other.g0);
}

fn multi_vector__wedge__point(self_: MultiVector, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, -other.g0.z) + vec2<f32>(self_.g4.w) * vec2<f32>(0.0, -other.g0.w), vec4<f32>(self_.g0.x) * other.g0, vec3<f32>(0.0) - vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g1.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g2.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g3.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g3.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g3.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn multi_vector__wedge__point_at_infinity(self_: MultiVector, other: PointAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(self_.g1.w) * other.g0, vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g2.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g3.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g3.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z));
}

fn multi_vector__wedge__rotor(self_: MultiVector, other: Rotor) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g3.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g3.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g3.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn multi_vector__wedge__scalar(self_: MultiVector, other: Scalar) -> MultiVector {
    return MultiVector(self_.g0 * vec2<f32>(other.g0), self_.g1 * vec4<f32>(other.g0), self_.g2 * vec3<f32>(other.g0), self_.g3 * vec3<f32>(other.g0), self_.g4 * vec4<f32>(other.g0));
}

fn multi_vector__wedge__transflector(self_: MultiVector, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g1.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, other.g1.w) + vec2<f32>(self_.g4.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g4.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g4.z) * vec2<f32>(0.0, -other.g0.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(self_.g1.w) * other.g0, vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g0.x) * other.g1 + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g2.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g2.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g3.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g3.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g3.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z));
}

fn multi_vector__wedge__translator(self_: MultiVector, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g1.wwwz * other.g0.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0));
}

fn multi_vector_at_infinity__wedge__anti_scalar(self_: MultiVectorAtInfinity, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0);
}

fn multi_vector_at_infinity__wedge__flector(self_: MultiVectorAtInfinity, other: Flector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.w) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g1.z), vec4<f32>(self_.g0.x) * other.g0, vec3<f32>(0.0) - self_.g1 * vec3<f32>(other.g0.w), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g0.x) * other.g1 + vec4<f32>(self_.g2.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn multi_vector_at_infinity__wedge__flector_at_infinity(self_: MultiVectorAtInfinity, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn multi_vector_at_infinity__wedge__horizon(self_: MultiVectorAtInfinity, other: Horizon) -> Horizon {
    return Horizon(self_.g0.x * other.g0);
}

fn multi_vector_at_infinity__wedge__line(self_: MultiVectorAtInfinity, other: Line) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * other.g0, vec3<f32>(self_.g0.x) * other.g1, vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z));
}

fn multi_vector_at_infinity__wedge__line_at_infinity(self_: MultiVectorAtInfinity, other: LineAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * other.g0);
}

fn multi_vector_at_infinity__wedge__line_at_origin(self_: MultiVectorAtInfinity, other: LineAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * other.g0, vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn multi_vector_at_infinity__wedge__magnitude(self_: MultiVectorAtInfinity, other: Magnitude) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * other.g0, vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, self_.g1.x) * vec4<f32>(other.g0.x, other.g0.x, other.g0.x, 0.0), vec3<f32>(0.0), self_.g2 * vec3<f32>(other.g0.x), vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x));
}

fn multi_vector_at_infinity__wedge__motor(self_: MultiVectorAtInfinity, other: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec4<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * other.g1, vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z));
}

fn multi_vector_at_infinity__wedge__multi_vector(self_: MultiVectorAtInfinity, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * other.g0 + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.w) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g4.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g4.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g4.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g2.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g2.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g2.z), vec4<f32>(self_.g0.x) * other.g1 + vec4<f32>(self_.g1.x, self_.g1.y, self_.g1.z, self_.g1.x) * vec4<f32>(other.g0.x, other.g0.x, other.g0.x, 0.0), vec3<f32>(self_.g0.x) * other.g2 - self_.g1 * vec3<f32>(other.g1.w), vec3<f32>(self_.g0.x) * other.g3 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + self_.g2 * vec3<f32>(other.g0.x), vec4<f32>(self_.g0.x) * other.g4 + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g0.x) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, other.g2.z, -other.g2.y, -other.g3.x) + vec4<f32>(self_.g1.y) * vec4<f32>(-other.g2.z, 0.0, other.g2.x, -other.g3.y) + vec4<f32>(self_.g1.z) * vec4<f32>(other.g2.y, -other.g2.x, 0.0, -other.g3.z) + vec4<f32>(self_.g2.x) * vec4<f32>(other.g1.w, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, other.g1.w, 0.0, -other.g1.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, other.g1.w, -other.g1.z));
}

fn multi_vector_at_infinity__wedge__multi_vector_at_infinity(self_: MultiVectorAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * other.g0 + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g2.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g2.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g2.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(self_.g0.x) * other.g1 + self_.g1 * vec3<f32>(other.g0.x), vec3<f32>(self_.g0.x) * other.g2 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + self_.g2 * vec3<f32>(other.g0.x));
}

fn multi_vector_at_infinity__wedge__multi_vector_at_origin(self_: MultiVectorAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * other.g0 + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g2.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g2.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g2.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(self_.g0.x) * other.g1 - self_.g1 * vec3<f32>(other.g0.x), vec3<f32>(self_.g0.x) * other.g2 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0) + self_.g2 * vec3<f32>(other.g0.x));
}

fn multi_vector_at_infinity__wedge__origin(self_: MultiVectorAtInfinity, other: Origin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0 * vec2<f32>(other.g0), vec3<f32>(0.0) - self_.g1 * vec3<f32>(other.g0), self_.g2 * vec3<f32>(other.g0));
}

fn multi_vector_at_infinity__wedge__plane(self_: MultiVectorAtInfinity, other: Plane) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), vec4<f32>(self_.g0.x) * other.g0);
}

fn multi_vector_at_infinity__wedge__plane_at_origin(self_: MultiVectorAtInfinity, other: PlaneAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g0.z), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * other.g0);
}

fn multi_vector_at_infinity__wedge__point(self_: MultiVectorAtInfinity, other: Point) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g0.w), vec4<f32>(self_.g0.x) * other.g0, vec3<f32>(0.0) - self_.g1 * vec3<f32>(other.g0.w), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g2.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn multi_vector_at_infinity__wedge__point_at_infinity(self_: MultiVectorAtInfinity, other: PointAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * other.g0, vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn multi_vector_at_infinity__wedge__rotor(self_: MultiVectorAtInfinity, other: Rotor) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn multi_vector_at_infinity__wedge__scalar(self_: MultiVectorAtInfinity, other: Scalar) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0 * vec2<f32>(other.g0), self_.g1 * vec3<f32>(other.g0), self_.g2 * vec3<f32>(other.g0));
}

fn multi_vector_at_infinity__wedge__transflector(self_: MultiVectorAtInfinity, other: Transflector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, other.g1.z), vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0), vec4<f32>(self_.g0.x) * other.g1 + vec4<f32>(self_.g2.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g2.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g2.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z));
}

fn multi_vector_at_infinity__wedge__translator(self_: MultiVectorAtInfinity, other: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.w), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z));
}

fn multi_vector_at_origin__wedge__flector(self_: MultiVectorAtOrigin, other: Flector) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.w) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn multi_vector_at_origin__wedge__flector_at_infinity(self_: MultiVectorAtOrigin, other: FlectorAtInfinity) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g0.w) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn multi_vector_at_origin__wedge__horizon(self_: MultiVectorAtOrigin, other: Horizon) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0);
}

fn multi_vector_at_origin__wedge__line(self_: MultiVectorAtOrigin, other: Line) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * other.g1);
}

fn multi_vector_at_origin__wedge__line_at_infinity(self_: MultiVectorAtOrigin, other: LineAtInfinity) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * other.g0);
}

fn multi_vector_at_origin__wedge__magnitude(self_: MultiVectorAtOrigin, other: Magnitude) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0 * vec2<f32>(other.g0.x), self_.g1 * vec3<f32>(other.g0.x), self_.g2 * vec3<f32>(other.g0.x));
}

fn multi_vector_at_origin__wedge__motor(self_: MultiVectorAtOrigin, other: Motor) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * other.g1);
}

fn multi_vector_at_origin__wedge__multi_vector(self_: MultiVectorAtOrigin, other: MultiVector) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(other.g0.x, other.g4.w) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g3.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g3.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g3.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z) + self_.g1 * vec3<f32>(other.g0.x), vec3<f32>(self_.g0.x) * other.g3 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + self_.g2 * vec3<f32>(other.g0.x));
}

fn multi_vector_at_origin__wedge__multi_vector_at_infinity(self_: MultiVectorAtOrigin, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * other.g0 + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g0.x) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g2.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g2.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g2.z) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(self_.g0.x) * other.g1 + self_.g1 * vec3<f32>(other.g0.x), vec3<f32>(self_.g0.x) * other.g2 + vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0) + self_.g2 * vec3<f32>(other.g0.x));
}

fn multi_vector_at_origin__wedge__plane(self_: MultiVectorAtOrigin, other: Plane) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0.w);
}

fn multi_vector_at_origin__wedge__point(self_: MultiVectorAtOrigin, other: Point) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn multi_vector_at_origin__wedge__point_at_infinity(self_: MultiVectorAtOrigin, other: PointAtInfinity) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * other.g0, vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn multi_vector_at_origin__wedge__scalar(self_: MultiVectorAtOrigin, other: Scalar) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0 * vec2<f32>(other.g0), self_.g1 * vec3<f32>(other.g0), self_.g2 * vec3<f32>(other.g0));
}

fn multi_vector_at_origin__wedge__transflector(self_: MultiVectorAtOrigin, other: Transflector) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g1.w) + vec2<f32>(self_.g2.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g2.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g2.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(self_.g0.x) * other.g0, vec3<f32>(self_.g1.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g1.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g1.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn multi_vector_at_origin__wedge__translator(self_: MultiVectorAtOrigin, other: Translator) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g0.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g0.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g0.z), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn origin__wedge__flector(self_: Origin, other: Flector) -> Rotor {
    return Rotor(vec4<f32>(self_.g0) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, other.g1.w));
}

fn origin__wedge__flector_at_infinity(self_: Origin, other: FlectorAtInfinity) -> Rotor {
    return Rotor(vec4<f32>(self_.g0) * other.g0);
}

fn origin__wedge__horizon(self_: Origin, other: Horizon) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0);
}

fn origin__wedge__line(self_: Origin, other: Line) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0) * other.g1);
}

fn origin__wedge__line_at_infinity(self_: Origin, other: LineAtInfinity) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0) * other.g0);
}

fn origin__wedge__magnitude(self_: Origin, other: Magnitude) -> Origin {
    return Origin(self_.g0 * other.g0.x);
}

fn origin__wedge__motor(self_: Origin, other: Motor) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0) * other.g1);
}

fn origin__wedge__multi_vector(self_: Origin, other: MultiVector) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0) * vec2<f32>(other.g0.x, other.g4.w), vec3<f32>(self_.g0) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(self_.g0) * other.g3);
}

fn origin__wedge__multi_vector_at_infinity(self_: Origin, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1, vec3<f32>(self_.g0) * other.g2);
}

fn origin__wedge__plane(self_: Origin, other: Plane) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0.w);
}

fn origin__wedge__point(self_: Origin, other: Point) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(self_.g0) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn origin__wedge__point_at_infinity(self_: Origin, other: PointAtInfinity) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(self_.g0) * other.g0);
}

fn origin__wedge__scalar(self_: Origin, other: Scalar) -> Origin {
    return Origin(self_.g0 * other.g0);
}

fn origin__wedge__transflector(self_: Origin, other: Transflector) -> Rotor {
    return Rotor(vec4<f32>(self_.g0) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, other.g1.w));
}

fn origin__wedge__translator(self_: Origin, other: Translator) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z));
}

fn plane__wedge__flector(self_: Plane, other: Flector) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z - self_.g0.w * other.g0.w);
}

fn plane__wedge__flector_at_infinity(self_: Plane, other: FlectorAtInfinity) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn plane__wedge__magnitude(self_: Plane, other: Magnitude) -> Plane {
    return Plane(self_.g0 * vec4<f32>(other.g0.x));
}

fn plane__wedge__multi_vector(self_: Plane, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, -other.g1.w), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0 * vec4<f32>(other.g0.x));
}

fn plane__wedge__multi_vector_at_infinity(self_: Plane, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(0.0), self_.g0 * vec4<f32>(other.g0.x));
}

fn plane__wedge__multi_vector_at_origin(self_: Plane, other: MultiVectorAtOrigin) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.w * other.g0.x);
}

fn plane__wedge__origin(self_: Plane, other: Origin) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.w * other.g0);
}

fn plane__wedge__point(self_: Plane, other: Point) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z - self_.g0.w * other.g0.w);
}

fn plane__wedge__point_at_infinity(self_: Plane, other: PointAtInfinity) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn plane__wedge__scalar(self_: Plane, other: Scalar) -> Plane {
    return Plane(self_.g0 * vec4<f32>(other.g0));
}

fn plane__wedge__transflector(self_: Plane, other: Transflector) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn plane_at_origin__wedge__flector(self_: PlaneAtOrigin, other: Flector) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn plane_at_origin__wedge__flector_at_infinity(self_: PlaneAtOrigin, other: FlectorAtInfinity) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn plane_at_origin__wedge__magnitude(self_: PlaneAtOrigin, other: Magnitude) -> PlaneAtOrigin {
    return PlaneAtOrigin(self_.g0 * vec3<f32>(other.g0.x));
}

fn plane_at_origin__wedge__multi_vector(self_: PlaneAtOrigin, other: MultiVector) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(0.0), self_.g0 * vec3<f32>(other.g0.x));
}

fn plane_at_origin__wedge__multi_vector_at_infinity(self_: PlaneAtOrigin, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(0.0), self_.g0 * vec3<f32>(other.g0.x));
}

fn plane_at_origin__wedge__point(self_: PlaneAtOrigin, other: Point) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn plane_at_origin__wedge__point_at_infinity(self_: PlaneAtOrigin, other: PointAtInfinity) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn plane_at_origin__wedge__scalar(self_: PlaneAtOrigin, other: Scalar) -> PlaneAtOrigin {
    return PlaneAtOrigin(self_.g0 * vec3<f32>(other.g0));
}

fn plane_at_origin__wedge__transflector(self_: PlaneAtOrigin, other: Transflector) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn point__wedge__flector(self_: Point, other: Flector) -> Motor {
    return Motor(vec4<f32>(self_.g0.x) * vec4<f32>(-other.g0.w, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, -other.g0.w, 0.0, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, -other.g0.w, other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, other.g1.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn point__wedge__flector_at_infinity(self_: Point, other: FlectorAtInfinity) -> Motor {
    return Motor(vec4<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn point__wedge__horizon(self_: Point, other: Horizon) -> AntiScalar {
    return AntiScalar(self_.g0.w * other.g0);
}

fn point__wedge__line(self_: Point, other: Line) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0));
}

fn point__wedge__line_at_infinity(self_: Point, other: LineAtInfinity) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g0.wwwz * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, -other.g0.z));
}

fn point__wedge__line_at_origin(self_: Point, other: LineAtOrigin) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn point__wedge__magnitude(self_: Point, other: Magnitude) -> Point {
    return Point(self_.g0 * vec4<f32>(other.g0.x));
}

fn point__wedge__motor(self_: Point, other: Motor) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g1.x, other.g1.y, other.g1.z, 0.0));
}

fn point__wedge__multi_vector(self_: Point, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g4.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g4.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g4.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g4.w), self_.g0 * vec4<f32>(other.g0.x), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g1.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g1.x, other.g1.y, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g2.z, -other.g2.y, -other.g3.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.z, 0.0, other.g2.x, -other.g3.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g2.y, -other.g2.x, 0.0, -other.g3.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g3.x, other.g3.y, other.g3.z, 0.0));
}

fn point__wedge__multi_vector_at_infinity(self_: Point, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.y), self_.g0 * vec4<f32>(other.g0.x), vec3<f32>(self_.g0.w) * other.g1, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + self_.g0.wwwz * vec4<f32>(other.g2.x, other.g2.y, other.g2.z, -other.g2.z));
}

fn point__wedge__multi_vector_at_origin(self_: Point, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g2.z), vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0));
}

fn point__wedge__origin(self_: Point, other: Origin) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0));
}

fn point__wedge__plane(self_: Point, other: Plane) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z + self_.g0.w * other.g0.w);
}

fn point__wedge__plane_at_origin(self_: Point, other: PlaneAtOrigin) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn point__wedge__point(self_: Point, other: Point) -> Line {
    return Line(vec3<f32>(0.0) - vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.w) + vec3<f32>(self_.g0.w) * vec3<f32>(other.g0.x, other.g0.y, other.g0.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn point__wedge__point_at_infinity(self_: Point, other: PointAtInfinity) -> Line {
    return Line(vec3<f32>(self_.g0.w) * other.g0, vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn point__wedge__rotor(self_: Point, other: Rotor) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn point__wedge__scalar(self_: Point, other: Scalar) -> Point {
    return Point(self_.g0 * vec4<f32>(other.g0));
}

fn point__wedge__transflector(self_: Point, other: Transflector) -> Motor {
    return Motor(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, other.g1.z) + vec4<f32>(self_.g0.w) * vec4<f32>(other.g0.x, other.g0.y, other.g0.z, other.g1.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn point__wedge__translator(self_: Point, other: Translator) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + self_.g0.wwwz * other.g0.xyzz * vec4<f32>(1.0, 1.0, 1.0, -1.0));
}

fn point_at_infinity__wedge__flector(self_: PointAtInfinity, other: Flector) -> Motor {
    return Motor(vec4<f32>(self_.g0.x) * vec4<f32>(-other.g0.w, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, -other.g0.w, 0.0, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, -other.g0.w, other.g1.z), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn point_at_infinity__wedge__flector_at_infinity(self_: PointAtInfinity, other: FlectorAtInfinity) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn point_at_infinity__wedge__line(self_: PointAtInfinity, other: Line) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z));
}

fn point_at_infinity__wedge__line_at_infinity(self_: PointAtInfinity, other: LineAtInfinity) -> Horizon {
    return Horizon(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn point_at_infinity__wedge__line_at_origin(self_: PointAtInfinity, other: LineAtOrigin) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn point_at_infinity__wedge__magnitude(self_: PointAtInfinity, other: Magnitude) -> PointAtInfinity {
    return PointAtInfinity(self_.g0 * vec3<f32>(other.g0.x));
}

fn point_at_infinity__wedge__motor(self_: PointAtInfinity, other: Motor) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z));
}

fn point_at_infinity__wedge__multi_vector(self_: PointAtInfinity, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g4.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g4.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g4.z), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g0.x, other.g0.x, other.g0.x, 0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g1.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g2.z, -other.g2.y, -other.g3.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.z, 0.0, other.g2.x, -other.g3.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g2.y, -other.g2.x, 0.0, -other.g3.z));
}

fn point_at_infinity__wedge__multi_vector_at_infinity(self_: PointAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g2.z), self_.g0 * vec3<f32>(other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0));
}

fn point_at_infinity__wedge__multi_vector_at_origin(self_: PointAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g2.z), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0));
}

fn point_at_infinity__wedge__origin(self_: PointAtInfinity, other: Origin) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0));
}

fn point_at_infinity__wedge__plane(self_: PointAtInfinity, other: Plane) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn point_at_infinity__wedge__plane_at_origin(self_: PointAtInfinity, other: PlaneAtOrigin) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn point_at_infinity__wedge__point(self_: PointAtInfinity, other: Point) -> Line {
    return Line(vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn point_at_infinity__wedge__point_at_infinity(self_: PointAtInfinity, other: PointAtInfinity) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn point_at_infinity__wedge__rotor(self_: PointAtInfinity, other: Rotor) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn point_at_infinity__wedge__scalar(self_: PointAtInfinity, other: Scalar) -> PointAtInfinity {
    return PointAtInfinity(self_.g0 * vec3<f32>(other.g0));
}

fn point_at_infinity__wedge__transflector(self_: PointAtInfinity, other: Transflector) -> Translator {
    return Translator(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, other.g1.z));
}

fn point_at_infinity__wedge__translator(self_: PointAtInfinity, other: Translator) -> Horizon {
    return Horizon(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn rotor__wedge__flector(self_: Rotor, other: Flector) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn rotor__wedge__flector_at_infinity(self_: Rotor, other: FlectorAtInfinity) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn rotor__wedge__line(self_: Rotor, other: Line) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z);
}

fn rotor__wedge__line_at_infinity(self_: Rotor, other: LineAtInfinity) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn rotor__wedge__magnitude(self_: Rotor, other: Magnitude) -> Rotor {
    return Rotor(self_.g0 * vec4<f32>(other.g0.x));
}

fn rotor__wedge__motor(self_: Rotor, other: Motor) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z);
}

fn rotor__wedge__multi_vector(self_: Rotor, other: MultiVector) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g3.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g3.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g3.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.x), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0));
}

fn rotor__wedge__multi_vector_at_infinity(self_: Rotor, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g2.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.x), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0));
}

fn rotor__wedge__point(self_: Rotor, other: Point) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn rotor__wedge__point_at_infinity(self_: Rotor, other: PointAtInfinity) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn rotor__wedge__scalar(self_: Rotor, other: Scalar) -> Rotor {
    return Rotor(self_.g0 * vec4<f32>(other.g0));
}

fn rotor__wedge__transflector(self_: Rotor, other: Transflector) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn rotor__wedge__translator(self_: Rotor, other: Translator) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn scalar__wedge__anti_scalar(self_: Scalar, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0);
}

fn scalar__wedge__flector(self_: Scalar, other: Flector) -> Flector {
    return Flector(vec4<f32>(self_.g0) * other.g0, vec4<f32>(self_.g0) * other.g1);
}

fn scalar__wedge__flector_at_infinity(self_: Scalar, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0) * other.g0);
}

fn scalar__wedge__horizon(self_: Scalar, other: Horizon) -> Horizon {
    return Horizon(self_.g0 * other.g0);
}

fn scalar__wedge__line(self_: Scalar, other: Line) -> Line {
    return Line(vec3<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1);
}

fn scalar__wedge__line_at_infinity(self_: Scalar, other: LineAtInfinity) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(self_.g0) * other.g0);
}

fn scalar__wedge__line_at_origin(self_: Scalar, other: LineAtOrigin) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(self_.g0) * other.g0);
}

fn scalar__wedge__magnitude(self_: Scalar, other: Magnitude) -> Magnitude {
    return Magnitude(vec2<f32>(self_.g0) * other.g0);
}

fn scalar__wedge__motor(self_: Scalar, other: Motor) -> Motor {
    return Motor(vec4<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1);
}

fn scalar__wedge__multi_vector(self_: Scalar, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0) * other.g0, vec4<f32>(self_.g0) * other.g1, vec3<f32>(self_.g0) * other.g2, vec3<f32>(self_.g0) * other.g3, vec4<f32>(self_.g0) * other.g4);
}

fn scalar__wedge__multi_vector_at_infinity(self_: Scalar, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1, vec3<f32>(self_.g0) * other.g2);
}

fn scalar__wedge__multi_vector_at_origin(self_: Scalar, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0) * other.g0, vec3<f32>(self_.g0) * other.g1, vec3<f32>(self_.g0) * other.g2);
}

fn scalar__wedge__origin(self_: Scalar, other: Origin) -> Origin {
    return Origin(self_.g0 * other.g0);
}

fn scalar__wedge__plane(self_: Scalar, other: Plane) -> Plane {
    return Plane(vec4<f32>(self_.g0) * other.g0);
}

fn scalar__wedge__plane_at_origin(self_: Scalar, other: PlaneAtOrigin) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0) * other.g0);
}

fn scalar__wedge__point(self_: Scalar, other: Point) -> Point {
    return Point(vec4<f32>(self_.g0) * other.g0);
}

fn scalar__wedge__point_at_infinity(self_: Scalar, other: PointAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0) * other.g0);
}

fn scalar__wedge__rotor(self_: Scalar, other: Rotor) -> Rotor {
    return Rotor(vec4<f32>(self_.g0) * other.g0);
}

fn scalar__wedge__scalar(self_: Scalar, other: Scalar) -> Scalar {
    return Scalar(self_.g0 * other.g0);
}

fn scalar__wedge__transflector(self_: Scalar, other: Transflector) -> Transflector {
    return Transflector(vec3<f32>(self_.g0) * other.g0, vec4<f32>(self_.g0) * other.g1);
}

fn scalar__wedge__translator(self_: Scalar, other: Translator) -> Translator {
    return Translator(vec4<f32>(self_.g0) * other.g0);
}

fn transflector__wedge__flector(self_: Transflector, other: Flector) -> Motor {
    return Motor(vec4<f32>(self_.g0.x) * vec4<f32>(-other.g0.w, 0.0, 0.0, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, -other.g0.w, 0.0, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, -other.g0.w, other.g1.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn transflector__wedge__flector_at_infinity(self_: Transflector, other: FlectorAtInfinity) -> Translator {
    return Translator(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z));
}

fn transflector__wedge__line(self_: Transflector, other: Line) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z));
}

fn transflector__wedge__line_at_infinity(self_: Transflector, other: LineAtInfinity) -> Horizon {
    return Horizon(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn transflector__wedge__line_at_origin(self_: Transflector, other: LineAtOrigin) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn transflector__wedge__magnitude(self_: Transflector, other: Magnitude) -> Transflector {
    return Transflector(self_.g0 * vec3<f32>(other.g0.x), self_.g1 * vec4<f32>(other.g0.x));
}

fn transflector__wedge__motor(self_: Transflector, other: Motor) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g0.z, -other.g0.y, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g0.z, 0.0, other.g0.x, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g0.y, -other.g0.x, 0.0, -other.g1.z));
}

fn transflector__wedge__multi_vector(self_: Transflector, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g4.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g4.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g4.z) + vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g1.w), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g0.x, other.g0.x, other.g0.x, 0.0), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g1.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, other.g2.z, -other.g2.y, -other.g3.x) + vec4<f32>(self_.g0.y) * vec4<f32>(-other.g2.z, 0.0, other.g2.x, -other.g3.y) + vec4<f32>(self_.g0.z) * vec4<f32>(other.g2.y, -other.g2.x, 0.0, -other.g3.z) + self_.g1 * vec4<f32>(other.g0.x));
}

fn transflector__wedge__multi_vector_at_infinity(self_: Transflector, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g1.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g1.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g1.z) * vec2<f32>(0.0, -other.g1.z), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(other.g0.x, other.g0.x, other.g0.x, 0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g1.z, other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g1.z, 0.0, -other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g1.y, other.g1.x, 0.0), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g2.z) + self_.g1 * vec4<f32>(other.g0.x));
}

fn transflector__wedge__multi_vector_at_origin(self_: Transflector, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, other.g2.z) + vec2<f32>(self_.g1.w) * vec2<f32>(0.0, -other.g0.x), vec3<f32>(0.0) - self_.g0 * vec3<f32>(other.g0.x), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g1.z, -other.g1.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g1.z, 0.0, other.g1.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g1.y, -other.g1.x, 0.0));
}

fn transflector__wedge__origin(self_: Transflector, other: Origin) -> Rotor {
    return Rotor(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(-other.g0, -other.g0, -other.g0, 0.0) + vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0));
}

fn transflector__wedge__plane(self_: Transflector, other: Plane) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn transflector__wedge__plane_at_origin(self_: Transflector, other: PlaneAtOrigin) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn transflector__wedge__point(self_: Transflector, other: Point) -> Motor {
    return Motor(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g0.x) * vec4<f32>(-other.g0.w, -other.g0.w, -other.g0.w, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z) + vec4<f32>(self_.g1.w) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.w), vec3<f32>(self_.g0.x) * vec3<f32>(0.0, -other.g0.z, other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(other.g0.z, 0.0, -other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(-other.g0.y, other.g0.x, 0.0));
}

fn transflector__wedge__point_at_infinity(self_: Transflector, other: PointAtInfinity) -> Translator {
    return Translator(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, 0.0) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, 0.0) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, 0.0) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z));
}

fn transflector__wedge__rotor(self_: Transflector, other: Rotor) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x) * vec3<f32>(0.0, other.g0.z, -other.g0.y) + vec3<f32>(self_.g0.y) * vec3<f32>(-other.g0.z, 0.0, other.g0.x) + vec3<f32>(self_.g0.z) * vec3<f32>(other.g0.y, -other.g0.x, 0.0));
}

fn transflector__wedge__scalar(self_: Transflector, other: Scalar) -> Transflector {
    return Transflector(self_.g0 * vec3<f32>(other.g0), self_.g1 * vec4<f32>(other.g0));
}

fn transflector__wedge__transflector(self_: Transflector, other: Transflector) -> Translator {
    return Translator(vec4<f32>(self_.g0.x) * vec4<f32>(0.0, -other.g0.z, other.g0.y, other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(other.g0.z, 0.0, -other.g0.x, other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(-other.g0.y, other.g0.x, 0.0, other.g1.z) + vec4<f32>(self_.g1.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g1.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.y) + vec4<f32>(self_.g1.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g0.z));
}

fn transflector__wedge__translator(self_: Transflector, other: Translator) -> Horizon {
    return Horizon(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn translator__wedge__flector(self_: Translator, other: Flector) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn translator__wedge__flector_at_infinity(self_: Translator, other: FlectorAtInfinity) -> Horizon {
    return Horizon(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn translator__wedge__line(self_: Translator, other: Line) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn translator__wedge__line_at_origin(self_: Translator, other: LineAtOrigin) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn translator__wedge__magnitude(self_: Translator, other: Magnitude) -> Translator {
    return Translator(self_.g0 * vec4<f32>(other.g0.x));
}

fn translator__wedge__motor(self_: Translator, other: Motor) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn translator__wedge__multi_vector(self_: Translator, other: MultiVector) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g2.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g2.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g2.z) + vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.x), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.x), vec4<f32>(self_.g0.x) * vec4<f32>(other.g1.w, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g1.w, 0.0, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g1.w, -other.g1.z));
}

fn translator__wedge__multi_vector_at_infinity(self_: Translator, other: MultiVectorAtInfinity) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w) * vec2<f32>(0.0, other.g0.x), vec4<f32>(0.0), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.x), vec4<f32>(self_.g0.x) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, 0.0, -other.g1.z));
}

fn translator__wedge__multi_vector_at_origin(self_: Translator, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g0.x) * vec2<f32>(0.0, -other.g1.x) + vec2<f32>(self_.g0.y) * vec2<f32>(0.0, -other.g1.y) + vec2<f32>(self_.g0.z) * vec2<f32>(0.0, -other.g1.z), vec3<f32>(0.0), vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0.x));
}

fn translator__wedge__origin(self_: Translator, other: Origin) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z) * vec3<f32>(other.g0));
}

fn translator__wedge__point(self_: Translator, other: Point) -> Plane {
    return Plane(vec4<f32>(self_.g0.x) * vec4<f32>(other.g0.w, 0.0, 0.0, -other.g0.x) + vec4<f32>(self_.g0.y) * vec4<f32>(0.0, other.g0.w, 0.0, -other.g0.y) + vec4<f32>(self_.g0.z) * vec4<f32>(0.0, 0.0, other.g0.w, -other.g0.z));
}

fn translator__wedge__point_at_infinity(self_: Translator, other: PointAtInfinity) -> Horizon {
    return Horizon(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn translator__wedge__rotor(self_: Translator, other: Rotor) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn translator__wedge__scalar(self_: Translator, other: Scalar) -> Translator {
    return Translator(self_.g0 * vec4<f32>(other.g0));
}

fn translator__wedge__transflector(self_: Translator, other: Transflector) -> Horizon {
    return Horizon(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn anti_scalar__anti_dot__anti_scalar(self_: AntiScalar, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0);
}

fn anti_scalar__anti_dot__magnitude(self_: AntiScalar, other: Magnitude) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0.y);
}

fn anti_scalar__anti_dot__motor(self_: AntiScalar, other: Motor) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0.w);
}

fn anti_scalar__anti_dot__multi_vector(self_: AntiScalar, other: MultiVector) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0.y);
}

fn anti_scalar__anti_dot__multi_vector_at_origin(self_: AntiScalar, other: MultiVectorAtOrigin) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0.y);
}

fn anti_scalar__anti_dot__rotor(self_: AntiScalar, other: Rotor) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0.w);
}

fn anti_scalar__anti_dot__translator(self_: AntiScalar, other: Translator) -> AntiScalar {
    return AntiScalar(self_.g0 * other.g0.w);
}

fn flector__anti_dot__flector(self_: Flector, other: Flector) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.w * other.g0.w + self_.g1.x * other.g1.x + self_.g1.y * other.g1.y + self_.g1.z * other.g1.z);
}

fn flector__anti_dot__multi_vector(self_: Flector, other: MultiVector) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.w * other.g1.w + self_.g1.x * other.g4.x + self_.g1.y * other.g4.y + self_.g1.z * other.g4.z);
}

fn flector__anti_dot__multi_vector_at_origin(self_: Flector, other: MultiVectorAtOrigin) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.w * other.g0.x + self_.g1.x * other.g2.x + self_.g1.y * other.g2.y + self_.g1.z * other.g2.z);
}

fn flector__anti_dot__origin(self_: Flector, other: Origin) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.w * other.g0);
}

fn flector__anti_dot__plane(self_: Flector, other: Plane) -> AntiScalar {
    return AntiScalar(self_.g1.x * other.g0.x + self_.g1.y * other.g0.y + self_.g1.z * other.g0.z);
}

fn flector__anti_dot__plane_at_origin(self_: Flector, other: PlaneAtOrigin) -> AntiScalar {
    return AntiScalar(self_.g1.x * other.g0.x + self_.g1.y * other.g0.y + self_.g1.z * other.g0.z);
}

fn flector__anti_dot__point(self_: Flector, other: Point) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.w * other.g0.w);
}

fn flector__anti_dot__transflector(self_: Flector, other: Transflector) -> AntiScalar {
    return AntiScalar(self_.g1.x * other.g1.x + self_.g1.y * other.g1.y + self_.g1.z * other.g1.z);
}

fn line__anti_dot__line(self_: Line, other: Line) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn line__anti_dot__line_at_origin(self_: Line, other: LineAtOrigin) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn line__anti_dot__motor(self_: Line, other: Motor) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn line__anti_dot__multi_vector(self_: Line, other: MultiVector) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g2.x - self_.g0.y * other.g2.y - self_.g0.z * other.g2.z);
}

fn line__anti_dot__multi_vector_at_origin(self_: Line, other: MultiVectorAtOrigin) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z);
}

fn line__anti_dot__rotor(self_: Line, other: Rotor) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn line_at_origin__anti_dot__line(self_: LineAtOrigin, other: Line) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn line_at_origin__anti_dot__line_at_origin(self_: LineAtOrigin, other: LineAtOrigin) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn line_at_origin__anti_dot__motor(self_: LineAtOrigin, other: Motor) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn line_at_origin__anti_dot__multi_vector(self_: LineAtOrigin, other: MultiVector) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g2.x - self_.g0.y * other.g2.y - self_.g0.z * other.g2.z);
}

fn line_at_origin__anti_dot__multi_vector_at_origin(self_: LineAtOrigin, other: MultiVectorAtOrigin) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z);
}

fn line_at_origin__anti_dot__rotor(self_: LineAtOrigin, other: Rotor) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn magnitude__anti_dot__anti_scalar(self_: Magnitude, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0.y * other.g0);
}

fn magnitude__anti_dot__magnitude(self_: Magnitude, other: Magnitude) -> AntiScalar {
    return AntiScalar(self_.g0.y * other.g0.y);
}

fn magnitude__anti_dot__motor(self_: Magnitude, other: Motor) -> AntiScalar {
    return AntiScalar(self_.g0.y * other.g0.w);
}

fn magnitude__anti_dot__multi_vector(self_: Magnitude, other: MultiVector) -> AntiScalar {
    return AntiScalar(self_.g0.y * other.g0.y);
}

fn magnitude__anti_dot__multi_vector_at_origin(self_: Magnitude, other: MultiVectorAtOrigin) -> AntiScalar {
    return AntiScalar(self_.g0.y * other.g0.y);
}

fn magnitude__anti_dot__rotor(self_: Magnitude, other: Rotor) -> AntiScalar {
    return AntiScalar(self_.g0.y * other.g0.w);
}

fn magnitude__anti_dot__translator(self_: Magnitude, other: Translator) -> AntiScalar {
    return AntiScalar(self_.g0.y * other.g0.w);
}

fn motor__anti_dot__anti_scalar(self_: Motor, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0.w * other.g0);
}

fn motor__anti_dot__line(self_: Motor, other: Line) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn motor__anti_dot__line_at_origin(self_: Motor, other: LineAtOrigin) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn motor__anti_dot__magnitude(self_: Motor, other: Magnitude) -> AntiScalar {
    return AntiScalar(self_.g0.w * other.g0.y);
}

fn motor__anti_dot__motor(self_: Motor, other: Motor) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z + self_.g0.w * other.g0.w);
}

fn motor__anti_dot__multi_vector(self_: Motor, other: MultiVector) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g2.x - self_.g0.y * other.g2.y - self_.g0.z * other.g2.z + self_.g0.w * other.g0.y);
}

fn motor__anti_dot__multi_vector_at_origin(self_: Motor, other: MultiVectorAtOrigin) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z + self_.g0.w * other.g0.y);
}

fn motor__anti_dot__rotor(self_: Motor, other: Rotor) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z + self_.g0.w * other.g0.w);
}

fn motor__anti_dot__translator(self_: Motor, other: Translator) -> AntiScalar {
    return AntiScalar(self_.g0.w * other.g0.w);
}

fn multi_vector__anti_dot__anti_scalar(self_: MultiVector, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0.y * other.g0);
}

fn multi_vector__anti_dot__flector(self_: MultiVector, other: Flector) -> AntiScalar {
    return AntiScalar(0.0 - self_.g1.w * other.g0.w + self_.g4.x * other.g1.x + self_.g4.y * other.g1.y + self_.g4.z * other.g1.z);
}

fn multi_vector__anti_dot__line(self_: MultiVector, other: Line) -> AntiScalar {
    return AntiScalar(0.0 - self_.g2.x * other.g0.x - self_.g2.y * other.g0.y - self_.g2.z * other.g0.z);
}

fn multi_vector__anti_dot__line_at_origin(self_: MultiVector, other: LineAtOrigin) -> AntiScalar {
    return AntiScalar(0.0 - self_.g2.x * other.g0.x - self_.g2.y * other.g0.y - self_.g2.z * other.g0.z);
}

fn multi_vector__anti_dot__magnitude(self_: MultiVector, other: Magnitude) -> AntiScalar {
    return AntiScalar(self_.g0.y * other.g0.y);
}

fn multi_vector__anti_dot__motor(self_: MultiVector, other: Motor) -> AntiScalar {
    return AntiScalar(self_.g0.y * other.g0.w - self_.g2.x * other.g0.x - self_.g2.y * other.g0.y - self_.g2.z * other.g0.z);
}

fn multi_vector__anti_dot__multi_vector(self_: MultiVector, other: MultiVector) -> AntiScalar {
    return AntiScalar(self_.g0.y * other.g0.y - self_.g1.w * other.g1.w - self_.g2.x * other.g2.x - self_.g2.y * other.g2.y - self_.g2.z * other.g2.z + self_.g4.x * other.g4.x + self_.g4.y * other.g4.y + self_.g4.z * other.g4.z);
}

fn multi_vector__anti_dot__multi_vector_at_origin(self_: MultiVector, other: MultiVectorAtOrigin) -> AntiScalar {
    return AntiScalar(self_.g0.y * other.g0.y - self_.g1.w * other.g0.x - self_.g2.x * other.g1.x - self_.g2.y * other.g1.y - self_.g2.z * other.g1.z + self_.g4.x * other.g2.x + self_.g4.y * other.g2.y + self_.g4.z * other.g2.z);
}

fn multi_vector__anti_dot__origin(self_: MultiVector, other: Origin) -> AntiScalar {
    return AntiScalar(0.0 - self_.g1.w * other.g0);
}

fn multi_vector__anti_dot__plane(self_: MultiVector, other: Plane) -> AntiScalar {
    return AntiScalar(self_.g4.x * other.g0.x + self_.g4.y * other.g0.y + self_.g4.z * other.g0.z);
}

fn multi_vector__anti_dot__plane_at_origin(self_: MultiVector, other: PlaneAtOrigin) -> AntiScalar {
    return AntiScalar(self_.g4.x * other.g0.x + self_.g4.y * other.g0.y + self_.g4.z * other.g0.z);
}

fn multi_vector__anti_dot__point(self_: MultiVector, other: Point) -> AntiScalar {
    return AntiScalar(0.0 - self_.g1.w * other.g0.w);
}

fn multi_vector__anti_dot__rotor(self_: MultiVector, other: Rotor) -> AntiScalar {
    return AntiScalar(self_.g0.y * other.g0.w - self_.g2.x * other.g0.x - self_.g2.y * other.g0.y - self_.g2.z * other.g0.z);
}

fn multi_vector__anti_dot__transflector(self_: MultiVector, other: Transflector) -> AntiScalar {
    return AntiScalar(self_.g4.x * other.g1.x + self_.g4.y * other.g1.y + self_.g4.z * other.g1.z);
}

fn multi_vector__anti_dot__translator(self_: MultiVector, other: Translator) -> AntiScalar {
    return AntiScalar(self_.g0.y * other.g0.w);
}

fn multi_vector_at_origin__anti_dot__anti_scalar(self_: MultiVectorAtOrigin, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0.y * other.g0);
}

fn multi_vector_at_origin__anti_dot__flector(self_: MultiVectorAtOrigin, other: Flector) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.w + self_.g2.x * other.g1.x + self_.g2.y * other.g1.y + self_.g2.z * other.g1.z);
}

fn multi_vector_at_origin__anti_dot__line(self_: MultiVectorAtOrigin, other: Line) -> AntiScalar {
    return AntiScalar(0.0 - self_.g1.x * other.g0.x - self_.g1.y * other.g0.y - self_.g1.z * other.g0.z);
}

fn multi_vector_at_origin__anti_dot__line_at_origin(self_: MultiVectorAtOrigin, other: LineAtOrigin) -> AntiScalar {
    return AntiScalar(0.0 - self_.g1.x * other.g0.x - self_.g1.y * other.g0.y - self_.g1.z * other.g0.z);
}

fn multi_vector_at_origin__anti_dot__magnitude(self_: MultiVectorAtOrigin, other: Magnitude) -> AntiScalar {
    return AntiScalar(self_.g0.y * other.g0.y);
}

fn multi_vector_at_origin__anti_dot__motor(self_: MultiVectorAtOrigin, other: Motor) -> AntiScalar {
    return AntiScalar(self_.g0.y * other.g0.w - self_.g1.x * other.g0.x - self_.g1.y * other.g0.y - self_.g1.z * other.g0.z);
}

fn multi_vector_at_origin__anti_dot__multi_vector(self_: MultiVectorAtOrigin, other: MultiVector) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g1.w + self_.g0.y * other.g0.y - self_.g1.x * other.g2.x - self_.g1.y * other.g2.y - self_.g1.z * other.g2.z + self_.g2.x * other.g4.x + self_.g2.y * other.g4.y + self_.g2.z * other.g4.z);
}

fn multi_vector_at_origin__anti_dot__multi_vector_at_origin(self_: MultiVectorAtOrigin, other: MultiVectorAtOrigin) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x + self_.g0.y * other.g0.y - self_.g1.x * other.g1.x - self_.g1.y * other.g1.y - self_.g1.z * other.g1.z + self_.g2.x * other.g2.x + self_.g2.y * other.g2.y + self_.g2.z * other.g2.z);
}

fn multi_vector_at_origin__anti_dot__origin(self_: MultiVectorAtOrigin, other: Origin) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0);
}

fn multi_vector_at_origin__anti_dot__plane(self_: MultiVectorAtOrigin, other: Plane) -> AntiScalar {
    return AntiScalar(self_.g2.x * other.g0.x + self_.g2.y * other.g0.y + self_.g2.z * other.g0.z);
}

fn multi_vector_at_origin__anti_dot__plane_at_origin(self_: MultiVectorAtOrigin, other: PlaneAtOrigin) -> AntiScalar {
    return AntiScalar(self_.g2.x * other.g0.x + self_.g2.y * other.g0.y + self_.g2.z * other.g0.z);
}

fn multi_vector_at_origin__anti_dot__point(self_: MultiVectorAtOrigin, other: Point) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.w);
}

fn multi_vector_at_origin__anti_dot__rotor(self_: MultiVectorAtOrigin, other: Rotor) -> AntiScalar {
    return AntiScalar(self_.g0.y * other.g0.w - self_.g1.x * other.g0.x - self_.g1.y * other.g0.y - self_.g1.z * other.g0.z);
}

fn multi_vector_at_origin__anti_dot__transflector(self_: MultiVectorAtOrigin, other: Transflector) -> AntiScalar {
    return AntiScalar(self_.g2.x * other.g1.x + self_.g2.y * other.g1.y + self_.g2.z * other.g1.z);
}

fn multi_vector_at_origin__anti_dot__translator(self_: MultiVectorAtOrigin, other: Translator) -> AntiScalar {
    return AntiScalar(self_.g0.y * other.g0.w);
}

fn origin__anti_dot__flector(self_: Origin, other: Flector) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0 * other.g0.w);
}

fn origin__anti_dot__multi_vector(self_: Origin, other: MultiVector) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0 * other.g1.w);
}

fn origin__anti_dot__multi_vector_at_origin(self_: Origin, other: MultiVectorAtOrigin) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0 * other.g0.x);
}

fn origin__anti_dot__origin(self_: Origin, other: Origin) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0 * other.g0);
}

fn origin__anti_dot__point(self_: Origin, other: Point) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0 * other.g0.w);
}

fn plane__anti_dot__flector(self_: Plane, other: Flector) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g1.x + self_.g0.y * other.g1.y + self_.g0.z * other.g1.z);
}

fn plane__anti_dot__multi_vector(self_: Plane, other: MultiVector) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g4.x + self_.g0.y * other.g4.y + self_.g0.z * other.g4.z);
}

fn plane__anti_dot__multi_vector_at_origin(self_: Plane, other: MultiVectorAtOrigin) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g2.x + self_.g0.y * other.g2.y + self_.g0.z * other.g2.z);
}

fn plane__anti_dot__plane(self_: Plane, other: Plane) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn plane__anti_dot__plane_at_origin(self_: Plane, other: PlaneAtOrigin) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn plane__anti_dot__transflector(self_: Plane, other: Transflector) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g1.x + self_.g0.y * other.g1.y + self_.g0.z * other.g1.z);
}

fn plane_at_origin__anti_dot__flector(self_: PlaneAtOrigin, other: Flector) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g1.x + self_.g0.y * other.g1.y + self_.g0.z * other.g1.z);
}

fn plane_at_origin__anti_dot__multi_vector(self_: PlaneAtOrigin, other: MultiVector) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g4.x + self_.g0.y * other.g4.y + self_.g0.z * other.g4.z);
}

fn plane_at_origin__anti_dot__multi_vector_at_origin(self_: PlaneAtOrigin, other: MultiVectorAtOrigin) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g2.x + self_.g0.y * other.g2.y + self_.g0.z * other.g2.z);
}

fn plane_at_origin__anti_dot__plane(self_: PlaneAtOrigin, other: Plane) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn plane_at_origin__anti_dot__plane_at_origin(self_: PlaneAtOrigin, other: PlaneAtOrigin) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn plane_at_origin__anti_dot__transflector(self_: PlaneAtOrigin, other: Transflector) -> AntiScalar {
    return AntiScalar(self_.g0.x * other.g1.x + self_.g0.y * other.g1.y + self_.g0.z * other.g1.z);
}

fn point__anti_dot__flector(self_: Point, other: Flector) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.w * other.g0.w);
}

fn point__anti_dot__multi_vector(self_: Point, other: MultiVector) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.w * other.g1.w);
}

fn point__anti_dot__multi_vector_at_origin(self_: Point, other: MultiVectorAtOrigin) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.w * other.g0.x);
}

fn point__anti_dot__origin(self_: Point, other: Origin) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.w * other.g0);
}

fn point__anti_dot__point(self_: Point, other: Point) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.w * other.g0.w);
}

fn rotor__anti_dot__anti_scalar(self_: Rotor, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0.w * other.g0);
}

fn rotor__anti_dot__line(self_: Rotor, other: Line) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn rotor__anti_dot__line_at_origin(self_: Rotor, other: LineAtOrigin) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn rotor__anti_dot__magnitude(self_: Rotor, other: Magnitude) -> AntiScalar {
    return AntiScalar(self_.g0.w * other.g0.y);
}

fn rotor__anti_dot__motor(self_: Rotor, other: Motor) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z + self_.g0.w * other.g0.w);
}

fn rotor__anti_dot__multi_vector(self_: Rotor, other: MultiVector) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g2.x - self_.g0.y * other.g2.y - self_.g0.z * other.g2.z + self_.g0.w * other.g0.y);
}

fn rotor__anti_dot__multi_vector_at_origin(self_: Rotor, other: MultiVectorAtOrigin) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z + self_.g0.w * other.g0.y);
}

fn rotor__anti_dot__rotor(self_: Rotor, other: Rotor) -> AntiScalar {
    return AntiScalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z + self_.g0.w * other.g0.w);
}

fn rotor__anti_dot__translator(self_: Rotor, other: Translator) -> AntiScalar {
    return AntiScalar(self_.g0.w * other.g0.w);
}

fn transflector__anti_dot__flector(self_: Transflector, other: Flector) -> AntiScalar {
    return AntiScalar(self_.g1.x * other.g1.x + self_.g1.y * other.g1.y + self_.g1.z * other.g1.z);
}

fn transflector__anti_dot__multi_vector(self_: Transflector, other: MultiVector) -> AntiScalar {
    return AntiScalar(self_.g1.x * other.g4.x + self_.g1.y * other.g4.y + self_.g1.z * other.g4.z);
}

fn transflector__anti_dot__multi_vector_at_origin(self_: Transflector, other: MultiVectorAtOrigin) -> AntiScalar {
    return AntiScalar(self_.g1.x * other.g2.x + self_.g1.y * other.g2.y + self_.g1.z * other.g2.z);
}

fn transflector__anti_dot__plane(self_: Transflector, other: Plane) -> AntiScalar {
    return AntiScalar(self_.g1.x * other.g0.x + self_.g1.y * other.g0.y + self_.g1.z * other.g0.z);
}

fn transflector__anti_dot__plane_at_origin(self_: Transflector, other: PlaneAtOrigin) -> AntiScalar {
    return AntiScalar(self_.g1.x * other.g0.x + self_.g1.y * other.g0.y + self_.g1.z * other.g0.z);
}

fn transflector__anti_dot__transflector(self_: Transflector, other: Transflector) -> AntiScalar {
    return AntiScalar(self_.g1.x * other.g1.x + self_.g1.y * other.g1.y + self_.g1.z * other.g1.z);
}

fn translator__anti_dot__anti_scalar(self_: Translator, other: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0.w * other.g0);
}

fn translator__anti_dot__magnitude(self_: Translator, other: Magnitude) -> AntiScalar {
    return AntiScalar(self_.g0.w * other.g0.y);
}

fn translator__anti_dot__motor(self_: Translator, other: Motor) -> AntiScalar {
    return AntiScalar(self_.g0.w * other.g0.w);
}

fn translator__anti_dot__multi_vector(self_: Translator, other: MultiVector) -> AntiScalar {
    return AntiScalar(self_.g0.w * other.g0.y);
}

fn translator__anti_dot__multi_vector_at_origin(self_: Translator, other: MultiVectorAtOrigin) -> AntiScalar {
    return AntiScalar(self_.g0.w * other.g0.y);
}

fn translator__anti_dot__rotor(self_: Translator, other: Rotor) -> AntiScalar {
    return AntiScalar(self_.g0.w * other.g0.w);
}

fn translator__anti_dot__translator(self_: Translator, other: Translator) -> AntiScalar {
    return AntiScalar(self_.g0.w * other.g0.w);
}

fn flector__dot__flector(self_: Flector, other: Flector) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z - self_.g1.w * other.g1.w);
}

fn flector__dot__flector_at_infinity(self_: Flector, other: FlectorAtInfinity) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z - self_.g1.w * other.g0.w);
}

fn flector__dot__horizon(self_: Flector, other: Horizon) -> Scalar {
    return Scalar(0.0 - self_.g1.w * other.g0);
}

fn flector__dot__multi_vector(self_: Flector, other: MultiVector) -> Scalar {
    return Scalar(self_.g0.x * other.g1.x + self_.g0.y * other.g1.y + self_.g0.z * other.g1.z - self_.g1.w * other.g4.w);
}

fn flector__dot__multi_vector_at_infinity(self_: Flector, other: MultiVectorAtInfinity) -> Scalar {
    return Scalar(self_.g0.x * other.g1.x + self_.g0.y * other.g1.y + self_.g0.z * other.g1.z - self_.g1.w * other.g0.y);
}

fn flector__dot__plane(self_: Flector, other: Plane) -> Scalar {
    return Scalar(0.0 - self_.g1.w * other.g0.w);
}

fn flector__dot__point(self_: Flector, other: Point) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn flector__dot__point_at_infinity(self_: Flector, other: PointAtInfinity) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn flector__dot__transflector(self_: Flector, other: Transflector) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z - self_.g1.w * other.g1.w);
}

fn flector_at_infinity__dot__flector(self_: FlectorAtInfinity, other: Flector) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z - self_.g0.w * other.g1.w);
}

fn flector_at_infinity__dot__flector_at_infinity(self_: FlectorAtInfinity, other: FlectorAtInfinity) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z - self_.g0.w * other.g0.w);
}

fn flector_at_infinity__dot__horizon(self_: FlectorAtInfinity, other: Horizon) -> Scalar {
    return Scalar(0.0 - self_.g0.w * other.g0);
}

fn flector_at_infinity__dot__multi_vector(self_: FlectorAtInfinity, other: MultiVector) -> Scalar {
    return Scalar(self_.g0.x * other.g1.x + self_.g0.y * other.g1.y + self_.g0.z * other.g1.z - self_.g0.w * other.g4.w);
}

fn flector_at_infinity__dot__multi_vector_at_infinity(self_: FlectorAtInfinity, other: MultiVectorAtInfinity) -> Scalar {
    return Scalar(self_.g0.x * other.g1.x + self_.g0.y * other.g1.y + self_.g0.z * other.g1.z - self_.g0.w * other.g0.y);
}

fn flector_at_infinity__dot__plane(self_: FlectorAtInfinity, other: Plane) -> Scalar {
    return Scalar(0.0 - self_.g0.w * other.g0.w);
}

fn flector_at_infinity__dot__point(self_: FlectorAtInfinity, other: Point) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn flector_at_infinity__dot__point_at_infinity(self_: FlectorAtInfinity, other: PointAtInfinity) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn flector_at_infinity__dot__transflector(self_: FlectorAtInfinity, other: Transflector) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z - self_.g0.w * other.g1.w);
}

fn horizon__dot__flector(self_: Horizon, other: Flector) -> Scalar {
    return Scalar(0.0 - self_.g0 * other.g1.w);
}

fn horizon__dot__flector_at_infinity(self_: Horizon, other: FlectorAtInfinity) -> Scalar {
    return Scalar(0.0 - self_.g0 * other.g0.w);
}

fn horizon__dot__horizon(self_: Horizon, other: Horizon) -> Scalar {
    return Scalar(0.0 - self_.g0 * other.g0);
}

fn horizon__dot__multi_vector(self_: Horizon, other: MultiVector) -> Scalar {
    return Scalar(0.0 - self_.g0 * other.g4.w);
}

fn horizon__dot__multi_vector_at_infinity(self_: Horizon, other: MultiVectorAtInfinity) -> Scalar {
    return Scalar(0.0 - self_.g0 * other.g0.y);
}

fn horizon__dot__plane(self_: Horizon, other: Plane) -> Scalar {
    return Scalar(0.0 - self_.g0 * other.g0.w);
}

fn horizon__dot__transflector(self_: Horizon, other: Transflector) -> Scalar {
    return Scalar(0.0 - self_.g0 * other.g1.w);
}

fn line__dot__line(self_: Line, other: Line) -> Scalar {
    return Scalar(0.0 - self_.g1.x * other.g1.x - self_.g1.y * other.g1.y - self_.g1.z * other.g1.z);
}

fn line__dot__line_at_infinity(self_: Line, other: LineAtInfinity) -> Scalar {
    return Scalar(0.0 - self_.g1.x * other.g0.x - self_.g1.y * other.g0.y - self_.g1.z * other.g0.z);
}

fn line__dot__motor(self_: Line, other: Motor) -> Scalar {
    return Scalar(0.0 - self_.g1.x * other.g1.x - self_.g1.y * other.g1.y - self_.g1.z * other.g1.z);
}

fn line__dot__multi_vector(self_: Line, other: MultiVector) -> Scalar {
    return Scalar(0.0 - self_.g1.x * other.g3.x - self_.g1.y * other.g3.y - self_.g1.z * other.g3.z);
}

fn line__dot__multi_vector_at_infinity(self_: Line, other: MultiVectorAtInfinity) -> Scalar {
    return Scalar(0.0 - self_.g1.x * other.g2.x - self_.g1.y * other.g2.y - self_.g1.z * other.g2.z);
}

fn line__dot__translator(self_: Line, other: Translator) -> Scalar {
    return Scalar(0.0 - self_.g1.x * other.g0.x - self_.g1.y * other.g0.y - self_.g1.z * other.g0.z);
}

fn line_at_infinity__dot__line(self_: LineAtInfinity, other: Line) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z);
}

fn line_at_infinity__dot__line_at_infinity(self_: LineAtInfinity, other: LineAtInfinity) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn line_at_infinity__dot__motor(self_: LineAtInfinity, other: Motor) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z);
}

fn line_at_infinity__dot__multi_vector(self_: LineAtInfinity, other: MultiVector) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g3.x - self_.g0.y * other.g3.y - self_.g0.z * other.g3.z);
}

fn line_at_infinity__dot__multi_vector_at_infinity(self_: LineAtInfinity, other: MultiVectorAtInfinity) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g2.x - self_.g0.y * other.g2.y - self_.g0.z * other.g2.z);
}

fn line_at_infinity__dot__translator(self_: LineAtInfinity, other: Translator) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn magnitude__dot__magnitude(self_: Magnitude, other: Magnitude) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x);
}

fn magnitude__dot__multi_vector(self_: Magnitude, other: MultiVector) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x);
}

fn magnitude__dot__multi_vector_at_infinity(self_: Magnitude, other: MultiVectorAtInfinity) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x);
}

fn magnitude__dot__scalar(self_: Magnitude, other: Scalar) -> Scalar {
    return Scalar(self_.g0.x * other.g0);
}

fn motor__dot__line(self_: Motor, other: Line) -> Scalar {
    return Scalar(0.0 - self_.g1.x * other.g1.x - self_.g1.y * other.g1.y - self_.g1.z * other.g1.z);
}

fn motor__dot__line_at_infinity(self_: Motor, other: LineAtInfinity) -> Scalar {
    return Scalar(0.0 - self_.g1.x * other.g0.x - self_.g1.y * other.g0.y - self_.g1.z * other.g0.z);
}

fn motor__dot__motor(self_: Motor, other: Motor) -> Scalar {
    return Scalar(0.0 - self_.g1.x * other.g1.x - self_.g1.y * other.g1.y - self_.g1.z * other.g1.z);
}

fn motor__dot__multi_vector(self_: Motor, other: MultiVector) -> Scalar {
    return Scalar(0.0 - self_.g1.x * other.g3.x - self_.g1.y * other.g3.y - self_.g1.z * other.g3.z);
}

fn motor__dot__multi_vector_at_infinity(self_: Motor, other: MultiVectorAtInfinity) -> Scalar {
    return Scalar(0.0 - self_.g1.x * other.g2.x - self_.g1.y * other.g2.y - self_.g1.z * other.g2.z);
}

fn motor__dot__translator(self_: Motor, other: Translator) -> Scalar {
    return Scalar(0.0 - self_.g1.x * other.g0.x - self_.g1.y * other.g0.y - self_.g1.z * other.g0.z);
}

fn multi_vector__dot__flector(self_: MultiVector, other: Flector) -> Scalar {
    return Scalar(self_.g1.x * other.g0.x + self_.g1.y * other.g0.y + self_.g1.z * other.g0.z - self_.g4.w * other.g1.w);
}

fn multi_vector__dot__flector_at_infinity(self_: MultiVector, other: FlectorAtInfinity) -> Scalar {
    return Scalar(self_.g1.x * other.g0.x + self_.g1.y * other.g0.y + self_.g1.z * other.g0.z - self_.g4.w * other.g0.w);
}

fn multi_vector__dot__horizon(self_: MultiVector, other: Horizon) -> Scalar {
    return Scalar(0.0 - self_.g4.w * other.g0);
}

fn multi_vector__dot__line(self_: MultiVector, other: Line) -> Scalar {
    return Scalar(0.0 - self_.g3.x * other.g1.x - self_.g3.y * other.g1.y - self_.g3.z * other.g1.z);
}

fn multi_vector__dot__line_at_infinity(self_: MultiVector, other: LineAtInfinity) -> Scalar {
    return Scalar(0.0 - self_.g3.x * other.g0.x - self_.g3.y * other.g0.y - self_.g3.z * other.g0.z);
}

fn multi_vector__dot__magnitude(self_: MultiVector, other: Magnitude) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x);
}

fn multi_vector__dot__motor(self_: MultiVector, other: Motor) -> Scalar {
    return Scalar(0.0 - self_.g3.x * other.g1.x - self_.g3.y * other.g1.y - self_.g3.z * other.g1.z);
}

fn multi_vector__dot__multi_vector(self_: MultiVector, other: MultiVector) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g1.x * other.g1.x + self_.g1.y * other.g1.y + self_.g1.z * other.g1.z - self_.g3.x * other.g3.x - self_.g3.y * other.g3.y - self_.g3.z * other.g3.z - self_.g4.w * other.g4.w);
}

fn multi_vector__dot__multi_vector_at_infinity(self_: MultiVector, other: MultiVectorAtInfinity) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g1.x * other.g1.x + self_.g1.y * other.g1.y + self_.g1.z * other.g1.z - self_.g3.x * other.g2.x - self_.g3.y * other.g2.y - self_.g3.z * other.g2.z - self_.g4.w * other.g0.y);
}

fn multi_vector__dot__plane(self_: MultiVector, other: Plane) -> Scalar {
    return Scalar(0.0 - self_.g4.w * other.g0.w);
}

fn multi_vector__dot__point(self_: MultiVector, other: Point) -> Scalar {
    return Scalar(self_.g1.x * other.g0.x + self_.g1.y * other.g0.y + self_.g1.z * other.g0.z);
}

fn multi_vector__dot__point_at_infinity(self_: MultiVector, other: PointAtInfinity) -> Scalar {
    return Scalar(self_.g1.x * other.g0.x + self_.g1.y * other.g0.y + self_.g1.z * other.g0.z);
}

fn multi_vector__dot__scalar(self_: MultiVector, other: Scalar) -> Scalar {
    return Scalar(self_.g0.x * other.g0);
}

fn multi_vector__dot__transflector(self_: MultiVector, other: Transflector) -> Scalar {
    return Scalar(self_.g1.x * other.g0.x + self_.g1.y * other.g0.y + self_.g1.z * other.g0.z - self_.g4.w * other.g1.w);
}

fn multi_vector__dot__translator(self_: MultiVector, other: Translator) -> Scalar {
    return Scalar(0.0 - self_.g3.x * other.g0.x - self_.g3.y * other.g0.y - self_.g3.z * other.g0.z);
}

fn multi_vector_at_infinity__dot__flector(self_: MultiVectorAtInfinity, other: Flector) -> Scalar {
    return Scalar(0.0 - self_.g0.y * other.g1.w + self_.g1.x * other.g0.x + self_.g1.y * other.g0.y + self_.g1.z * other.g0.z);
}

fn multi_vector_at_infinity__dot__flector_at_infinity(self_: MultiVectorAtInfinity, other: FlectorAtInfinity) -> Scalar {
    return Scalar(0.0 - self_.g0.y * other.g0.w + self_.g1.x * other.g0.x + self_.g1.y * other.g0.y + self_.g1.z * other.g0.z);
}

fn multi_vector_at_infinity__dot__horizon(self_: MultiVectorAtInfinity, other: Horizon) -> Scalar {
    return Scalar(0.0 - self_.g0.y * other.g0);
}

fn multi_vector_at_infinity__dot__line(self_: MultiVectorAtInfinity, other: Line) -> Scalar {
    return Scalar(0.0 - self_.g2.x * other.g1.x - self_.g2.y * other.g1.y - self_.g2.z * other.g1.z);
}

fn multi_vector_at_infinity__dot__line_at_infinity(self_: MultiVectorAtInfinity, other: LineAtInfinity) -> Scalar {
    return Scalar(0.0 - self_.g2.x * other.g0.x - self_.g2.y * other.g0.y - self_.g2.z * other.g0.z);
}

fn multi_vector_at_infinity__dot__magnitude(self_: MultiVectorAtInfinity, other: Magnitude) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x);
}

fn multi_vector_at_infinity__dot__motor(self_: MultiVectorAtInfinity, other: Motor) -> Scalar {
    return Scalar(0.0 - self_.g2.x * other.g1.x - self_.g2.y * other.g1.y - self_.g2.z * other.g1.z);
}

fn multi_vector_at_infinity__dot__multi_vector(self_: MultiVectorAtInfinity, other: MultiVector) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x - self_.g0.y * other.g4.w + self_.g1.x * other.g1.x + self_.g1.y * other.g1.y + self_.g1.z * other.g1.z - self_.g2.x * other.g3.x - self_.g2.y * other.g3.y - self_.g2.z * other.g3.z);
}

fn multi_vector_at_infinity__dot__multi_vector_at_infinity(self_: MultiVectorAtInfinity, other: MultiVectorAtInfinity) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x - self_.g0.y * other.g0.y + self_.g1.x * other.g1.x + self_.g1.y * other.g1.y + self_.g1.z * other.g1.z - self_.g2.x * other.g2.x - self_.g2.y * other.g2.y - self_.g2.z * other.g2.z);
}

fn multi_vector_at_infinity__dot__plane(self_: MultiVectorAtInfinity, other: Plane) -> Scalar {
    return Scalar(0.0 - self_.g0.y * other.g0.w);
}

fn multi_vector_at_infinity__dot__point(self_: MultiVectorAtInfinity, other: Point) -> Scalar {
    return Scalar(self_.g1.x * other.g0.x + self_.g1.y * other.g0.y + self_.g1.z * other.g0.z);
}

fn multi_vector_at_infinity__dot__point_at_infinity(self_: MultiVectorAtInfinity, other: PointAtInfinity) -> Scalar {
    return Scalar(self_.g1.x * other.g0.x + self_.g1.y * other.g0.y + self_.g1.z * other.g0.z);
}

fn multi_vector_at_infinity__dot__scalar(self_: MultiVectorAtInfinity, other: Scalar) -> Scalar {
    return Scalar(self_.g0.x * other.g0);
}

fn multi_vector_at_infinity__dot__transflector(self_: MultiVectorAtInfinity, other: Transflector) -> Scalar {
    return Scalar(0.0 - self_.g0.y * other.g1.w + self_.g1.x * other.g0.x + self_.g1.y * other.g0.y + self_.g1.z * other.g0.z);
}

fn multi_vector_at_infinity__dot__translator(self_: MultiVectorAtInfinity, other: Translator) -> Scalar {
    return Scalar(0.0 - self_.g2.x * other.g0.x - self_.g2.y * other.g0.y - self_.g2.z * other.g0.z);
}

fn plane__dot__flector(self_: Plane, other: Flector) -> Scalar {
    return Scalar(0.0 - self_.g0.w * other.g1.w);
}

fn plane__dot__flector_at_infinity(self_: Plane, other: FlectorAtInfinity) -> Scalar {
    return Scalar(0.0 - self_.g0.w * other.g0.w);
}

fn plane__dot__horizon(self_: Plane, other: Horizon) -> Scalar {
    return Scalar(0.0 - self_.g0.w * other.g0);
}

fn plane__dot__multi_vector(self_: Plane, other: MultiVector) -> Scalar {
    return Scalar(0.0 - self_.g0.w * other.g4.w);
}

fn plane__dot__multi_vector_at_infinity(self_: Plane, other: MultiVectorAtInfinity) -> Scalar {
    return Scalar(0.0 - self_.g0.w * other.g0.y);
}

fn plane__dot__plane(self_: Plane, other: Plane) -> Scalar {
    return Scalar(0.0 - self_.g0.w * other.g0.w);
}

fn plane__dot__transflector(self_: Plane, other: Transflector) -> Scalar {
    return Scalar(0.0 - self_.g0.w * other.g1.w);
}

fn point__dot__flector(self_: Point, other: Flector) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn point__dot__flector_at_infinity(self_: Point, other: FlectorAtInfinity) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn point__dot__multi_vector(self_: Point, other: MultiVector) -> Scalar {
    return Scalar(self_.g0.x * other.g1.x + self_.g0.y * other.g1.y + self_.g0.z * other.g1.z);
}

fn point__dot__multi_vector_at_infinity(self_: Point, other: MultiVectorAtInfinity) -> Scalar {
    return Scalar(self_.g0.x * other.g1.x + self_.g0.y * other.g1.y + self_.g0.z * other.g1.z);
}

fn point__dot__point(self_: Point, other: Point) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn point__dot__point_at_infinity(self_: Point, other: PointAtInfinity) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn point__dot__transflector(self_: Point, other: Transflector) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn point_at_infinity__dot__flector(self_: PointAtInfinity, other: Flector) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn point_at_infinity__dot__flector_at_infinity(self_: PointAtInfinity, other: FlectorAtInfinity) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn point_at_infinity__dot__multi_vector(self_: PointAtInfinity, other: MultiVector) -> Scalar {
    return Scalar(self_.g0.x * other.g1.x + self_.g0.y * other.g1.y + self_.g0.z * other.g1.z);
}

fn point_at_infinity__dot__multi_vector_at_infinity(self_: PointAtInfinity, other: MultiVectorAtInfinity) -> Scalar {
    return Scalar(self_.g0.x * other.g1.x + self_.g0.y * other.g1.y + self_.g0.z * other.g1.z);
}

fn point_at_infinity__dot__point(self_: PointAtInfinity, other: Point) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn point_at_infinity__dot__point_at_infinity(self_: PointAtInfinity, other: PointAtInfinity) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn point_at_infinity__dot__transflector(self_: PointAtInfinity, other: Transflector) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn scalar__dot__magnitude(self_: Scalar, other: Magnitude) -> Scalar {
    return Scalar(self_.g0 * other.g0.x);
}

fn scalar__dot__multi_vector(self_: Scalar, other: MultiVector) -> Scalar {
    return Scalar(self_.g0 * other.g0.x);
}

fn scalar__dot__multi_vector_at_infinity(self_: Scalar, other: MultiVectorAtInfinity) -> Scalar {
    return Scalar(self_.g0 * other.g0.x);
}

fn scalar__dot__scalar(self_: Scalar, other: Scalar) -> Scalar {
    return Scalar(self_.g0 * other.g0);
}

fn transflector__dot__flector(self_: Transflector, other: Flector) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z - self_.g1.w * other.g1.w);
}

fn transflector__dot__flector_at_infinity(self_: Transflector, other: FlectorAtInfinity) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z - self_.g1.w * other.g0.w);
}

fn transflector__dot__horizon(self_: Transflector, other: Horizon) -> Scalar {
    return Scalar(0.0 - self_.g1.w * other.g0);
}

fn transflector__dot__multi_vector(self_: Transflector, other: MultiVector) -> Scalar {
    return Scalar(self_.g0.x * other.g1.x + self_.g0.y * other.g1.y + self_.g0.z * other.g1.z - self_.g1.w * other.g4.w);
}

fn transflector__dot__multi_vector_at_infinity(self_: Transflector, other: MultiVectorAtInfinity) -> Scalar {
    return Scalar(self_.g0.x * other.g1.x + self_.g0.y * other.g1.y + self_.g0.z * other.g1.z - self_.g1.w * other.g0.y);
}

fn transflector__dot__plane(self_: Transflector, other: Plane) -> Scalar {
    return Scalar(0.0 - self_.g1.w * other.g0.w);
}

fn transflector__dot__point(self_: Transflector, other: Point) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn transflector__dot__point_at_infinity(self_: Transflector, other: PointAtInfinity) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z);
}

fn transflector__dot__transflector(self_: Transflector, other: Transflector) -> Scalar {
    return Scalar(self_.g0.x * other.g0.x + self_.g0.y * other.g0.y + self_.g0.z * other.g0.z - self_.g1.w * other.g1.w);
}

fn translator__dot__line(self_: Translator, other: Line) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z);
}

fn translator__dot__line_at_infinity(self_: Translator, other: LineAtInfinity) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn translator__dot__motor(self_: Translator, other: Motor) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g1.x - self_.g0.y * other.g1.y - self_.g0.z * other.g1.z);
}

fn translator__dot__multi_vector(self_: Translator, other: MultiVector) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g3.x - self_.g0.y * other.g3.y - self_.g0.z * other.g3.z);
}

fn translator__dot__multi_vector_at_infinity(self_: Translator, other: MultiVectorAtInfinity) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g2.x - self_.g0.y * other.g2.y - self_.g0.z * other.g2.z);
}

fn translator__dot__translator(self_: Translator, other: Translator) -> Scalar {
    return Scalar(0.0 - self_.g0.x * other.g0.x - self_.g0.y * other.g0.y - self_.g0.z * other.g0.z);
}

fn flector__bulk(self_: Flector) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g1.w));
}

fn flector_at_infinity__bulk(self_: FlectorAtInfinity) -> FlectorAtInfinity {
    return self_;
}

fn horizon__bulk(self_: Horizon) -> Horizon {
    return self_;
}

fn line__bulk(self_: Line) -> LineAtInfinity {
    return LineAtInfinity(self_.g1);
}

fn line_at_infinity__bulk(self_: LineAtInfinity) -> LineAtInfinity {
    return self_;
}

fn magnitude__bulk(self_: Magnitude) -> Scalar {
    return Scalar(self_.g0.x);
}

fn motor__bulk(self_: Motor) -> LineAtInfinity {
    return LineAtInfinity(self_.g1);
}

fn multi_vector__bulk(self_: MultiVector) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.x, self_.g4.w), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z), self_.g3);
}

fn multi_vector_at_infinity__bulk(self_: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return self_;
}

fn plane__bulk(self_: Plane) -> Horizon {
    return Horizon(self_.g0.w);
}

fn point__bulk(self_: Point) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z));
}

fn point_at_infinity__bulk(self_: PointAtInfinity) -> PointAtInfinity {
    return self_;
}

fn scalar__bulk(self_: Scalar) -> Scalar {
    return self_;
}

fn transflector__bulk(self_: Transflector) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, self_.g1.w));
}

fn translator__bulk(self_: Translator) -> LineAtInfinity {
    return LineAtInfinity(vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z));
}

fn anti_scalar__weight(self_: AntiScalar) -> AntiScalar {
    return self_;
}

fn flector__weight(self_: Flector) -> Flector {
    return Flector(self_.g0 * vec4<f32>(0.0, 0.0, 0.0, 1.0), self_.g1 * vec4<f32>(1.0, 1.0, 1.0, 0.0));
}

fn line__weight(self_: Line) -> LineAtOrigin {
    return LineAtOrigin(self_.g0);
}

fn line_at_origin__weight(self_: LineAtOrigin) -> LineAtOrigin {
    return self_;
}

fn magnitude__weight(self_: Magnitude) -> AntiScalar {
    return AntiScalar(self_.g0.y);
}

fn motor__weight(self_: Motor) -> Rotor {
    return Rotor(self_.g0);
}

fn multi_vector__weight(self_: MultiVector) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(self_.g1.w, self_.g0.y), self_.g2, vec3<f32>(self_.g4.x, self_.g4.y, self_.g4.z));
}

fn multi_vector_at_origin__weight(self_: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return self_;
}

fn origin__weight(self_: Origin) -> Origin {
    return self_;
}

fn plane__weight(self_: Plane) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z));
}

fn plane_at_origin__weight(self_: PlaneAtOrigin) -> PlaneAtOrigin {
    return self_;
}

fn point__weight(self_: Point) -> Origin {
    return Origin(self_.g0.w);
}

fn rotor__weight(self_: Rotor) -> Rotor {
    return self_;
}

fn transflector__weight(self_: Transflector) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z));
}

fn translator__weight(self_: Translator) -> AntiScalar {
    return AntiScalar(self_.g0.w);
}

fn flector__anti_dual(self_: Flector) -> FlectorAtInfinity {
    return FlectorAtInfinity(vec4<f32>(-self_.g1.x, -self_.g1.y, -self_.g1.z, self_.g0.w));
}

fn line__anti_dual(self_: Line) -> LineAtInfinity {
    return LineAtInfinity(self_.g0 * vec3<f32>(-1.0));
}

fn line_at_origin__anti_dual(self_: LineAtOrigin) -> LineAtInfinity {
    return LineAtInfinity(self_.g0 * vec3<f32>(-1.0));
}

fn motor__anti_dual(self_: Motor) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(-self_.g0.x, self_.g0.y, self_.g0.z));
}

fn multi_vector__anti_dual(self_: MultiVector) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(0.0, self_.g1.w), vec3<f32>(-self_.g4.x, self_.g4.y, self_.g4.z), self_.g2 * vec3<f32>(-1.0));
}

fn multi_vector_at_origin__anti_dual(self_: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(0.0, self_.g0.x), self_.g2 * vec3<f32>(-1.0), self_.g1 * vec3<f32>(-1.0));
}

fn origin__anti_dual(self_: Origin) -> Horizon {
    return Horizon(self_.g0);
}

fn plane__anti_dual(self_: Plane) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(-self_.g0.x, self_.g0.y, self_.g0.z));
}

fn plane_at_origin__anti_dual(self_: PlaneAtOrigin) -> PointAtInfinity {
    return PointAtInfinity(self_.g0 * vec3<f32>(-1.0));
}

fn point__anti_dual(self_: Point) -> Horizon {
    return Horizon(self_.g0.w);
}

fn rotor__anti_dual(self_: Rotor) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(0.0), vec3<f32>(0.0), vec3<f32>(-self_.g0.x, self_.g0.y, self_.g0.z));
}

fn transflector__anti_dual(self_: Transflector) -> PointAtInfinity {
    return PointAtInfinity(vec3<f32>(-self_.g1.x, self_.g1.y, self_.g1.z));
}

fn anti_scalar__anti_reversal(self_: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0);
}

fn flector__anti_reversal(self_: Flector) -> Flector {
    return Flector(self_.g0 * vec4<f32>(-1.0), self_.g1 * vec4<f32>(-1.0, 1.0, -1.0, 1.0));
}

fn flector_at_infinity__anti_reversal(self_: FlectorAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(self_.g0 * vec4<f32>(-1.0, -1.0, -1.0, 1.0));
}

fn horizon__anti_reversal(self_: Horizon) -> Horizon {
    return Horizon(self_.g0);
}

fn line__anti_reversal(self_: Line) -> Line {
    return Line(self_.g0 * vec3<f32>(-1.0, 1.0, -1.0), self_.g1 * vec3<f32>(-1.0));
}

fn line_at_infinity__anti_reversal(self_: LineAtInfinity) -> LineAtInfinity {
    return LineAtInfinity(self_.g0 * vec3<f32>(-1.0));
}

fn line_at_origin__anti_reversal(self_: LineAtOrigin) -> LineAtOrigin {
    return LineAtOrigin(self_.g0 * vec3<f32>(-1.0, 1.0, -1.0));
}

fn magnitude__anti_reversal(self_: Magnitude) -> Magnitude {
    return Magnitude(self_.g0);
}

fn motor__anti_reversal(self_: Motor) -> Motor {
    return Motor(self_.g0 * vec4<f32>(-1.0, 1.0, -1.0, 1.0), self_.g1 * vec3<f32>(-1.0));
}

fn multi_vector__anti_reversal(self_: MultiVector) -> MultiVector {
    return MultiVector(self_.g0, self_.g1 * vec4<f32>(-1.0), self_.g2 * vec3<f32>(-1.0, 1.0, -1.0), self_.g3 * vec3<f32>(-1.0), self_.g4 * vec4<f32>(-1.0, 1.0, -1.0, 1.0));
}

fn multi_vector_at_infinity__anti_reversal(self_: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0, self_.g1 * vec3<f32>(-1.0), self_.g2 * vec3<f32>(-1.0));
}

fn multi_vector_at_origin__anti_reversal(self_: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0 * vec2<f32>(-1.0, 1.0), self_.g1 * vec3<f32>(-1.0, 1.0, -1.0), self_.g2 * vec3<f32>(-1.0, 1.0, -1.0));
}

fn origin__anti_reversal(self_: Origin) -> Origin {
    return Origin(-self_.g0);
}

fn plane__anti_reversal(self_: Plane) -> Plane {
    return Plane(self_.g0 * vec4<f32>(-1.0, 1.0, -1.0, 1.0));
}

fn plane_at_origin__anti_reversal(self_: PlaneAtOrigin) -> PlaneAtOrigin {
    return PlaneAtOrigin(self_.g0 * vec3<f32>(-1.0, 1.0, -1.0));
}

fn point__anti_reversal(self_: Point) -> Point {
    return Point(self_.g0 * vec4<f32>(-1.0));
}

fn point_at_infinity__anti_reversal(self_: PointAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(self_.g0 * vec3<f32>(-1.0));
}

fn rotor__anti_reversal(self_: Rotor) -> Rotor {
    return Rotor(self_.g0 * vec4<f32>(-1.0, 1.0, -1.0, 1.0));
}

fn scalar__anti_reversal(self_: Scalar) -> Scalar {
    return Scalar(self_.g0);
}

fn transflector__anti_reversal(self_: Transflector) -> Transflector {
    return Transflector(self_.g0 * vec3<f32>(-1.0), self_.g1 * vec4<f32>(-1.0, 1.0, -1.0, 1.0));
}

fn translator__anti_reversal(self_: Translator) -> Translator {
    return Translator(self_.g0 * vec4<f32>(-1.0, -1.0, -1.0, 1.0));
}

fn anti_scalar__automorphism(self_: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0);
}

fn flector__automorphism(self_: Flector) -> Flector {
    return Flector(self_.g0 * vec4<f32>(-1.0), self_.g1 * vec4<f32>(1.0, -1.0, 1.0, -1.0));
}

fn flector_at_infinity__automorphism(self_: FlectorAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(self_.g0 * vec4<f32>(-1.0));
}

fn horizon__automorphism(self_: Horizon) -> Horizon {
    return Horizon(-self_.g0);
}

fn line__automorphism(self_: Line) -> Line {
    return Line(self_.g0 * vec3<f32>(1.0, -1.0, 1.0), self_.g1);
}

fn line_at_infinity__automorphism(self_: LineAtInfinity) -> LineAtInfinity {
    return LineAtInfinity(self_.g0);
}

fn line_at_origin__automorphism(self_: LineAtOrigin) -> LineAtOrigin {
    return LineAtOrigin(self_.g0 * vec3<f32>(1.0, -1.0, 1.0));
}

fn magnitude__automorphism(self_: Magnitude) -> Magnitude {
    return Magnitude(self_.g0);
}

fn motor__automorphism(self_: Motor) -> Motor {
    return Motor(self_.g0 * vec4<f32>(1.0, -1.0, 1.0, 1.0), self_.g1);
}

fn multi_vector__automorphism(self_: MultiVector) -> MultiVector {
    return MultiVector(self_.g0, self_.g1 * vec4<f32>(-1.0), self_.g2 * vec3<f32>(1.0, -1.0, 1.0), self_.g3, self_.g4 * vec4<f32>(1.0, -1.0, 1.0, -1.0));
}

fn multi_vector_at_infinity__automorphism(self_: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0 * vec2<f32>(1.0, -1.0), self_.g1 * vec3<f32>(-1.0), self_.g2);
}

fn multi_vector_at_origin__automorphism(self_: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0 * vec2<f32>(-1.0, 1.0), self_.g1 * vec3<f32>(1.0, -1.0, 1.0), self_.g2 * vec3<f32>(1.0, -1.0, 1.0));
}

fn origin__automorphism(self_: Origin) -> Origin {
    return Origin(-self_.g0);
}

fn plane__automorphism(self_: Plane) -> Plane {
    return Plane(self_.g0 * vec4<f32>(1.0, -1.0, 1.0, -1.0));
}

fn plane_at_origin__automorphism(self_: PlaneAtOrigin) -> PlaneAtOrigin {
    return PlaneAtOrigin(self_.g0 * vec3<f32>(1.0, -1.0, 1.0));
}

fn point__automorphism(self_: Point) -> Point {
    return Point(self_.g0 * vec4<f32>(-1.0));
}

fn point_at_infinity__automorphism(self_: PointAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(self_.g0 * vec3<f32>(-1.0));
}

fn rotor__automorphism(self_: Rotor) -> Rotor {
    return Rotor(self_.g0 * vec4<f32>(1.0, -1.0, 1.0, 1.0));
}

fn scalar__automorphism(self_: Scalar) -> Scalar {
    return Scalar(self_.g0);
}

fn transflector__automorphism(self_: Transflector) -> Transflector {
    return Transflector(self_.g0 * vec3<f32>(-1.0), self_.g1 * vec4<f32>(1.0, -1.0, 1.0, -1.0));
}

fn translator__automorphism(self_: Translator) -> Translator {
    return Translator(self_.g0);
}

fn anti_scalar__conjugation(self_: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0);
}

fn flector__conjugation(self_: Flector) -> Flector {
    return Flector(self_.g0 * vec4<f32>(-1.0), self_.g1 * vec4<f32>(-1.0, 1.0, -1.0, 1.0));
}

fn flector_at_infinity__conjugation(self_: FlectorAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(self_.g0 * vec4<f32>(-1.0, -1.0, -1.0, 1.0));
}

fn horizon__conjugation(self_: Horizon) -> Horizon {
    return Horizon(self_.g0);
}

fn line__conjugation(self_: Line) -> Line {
    return Line(self_.g0 * vec3<f32>(-1.0, 1.0, -1.0), self_.g1 * vec3<f32>(-1.0));
}

fn line_at_infinity__conjugation(self_: LineAtInfinity) -> LineAtInfinity {
    return LineAtInfinity(self_.g0 * vec3<f32>(-1.0));
}

fn line_at_origin__conjugation(self_: LineAtOrigin) -> LineAtOrigin {
    return LineAtOrigin(self_.g0 * vec3<f32>(-1.0, 1.0, -1.0));
}

fn magnitude__conjugation(self_: Magnitude) -> Magnitude {
    return Magnitude(self_.g0);
}

fn motor__conjugation(self_: Motor) -> Motor {
    return Motor(self_.g0 * vec4<f32>(-1.0, 1.0, -1.0, 1.0), self_.g1 * vec3<f32>(-1.0));
}

fn multi_vector__conjugation(self_: MultiVector) -> MultiVector {
    return MultiVector(self_.g0, self_.g1 * vec4<f32>(-1.0), self_.g2 * vec3<f32>(-1.0, 1.0, -1.0), self_.g3 * vec3<f32>(-1.0), self_.g4 * vec4<f32>(-1.0, 1.0, -1.0, 1.0));
}

fn multi_vector_at_infinity__conjugation(self_: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0, self_.g1 * vec3<f32>(-1.0), self_.g2 * vec3<f32>(-1.0));
}

fn multi_vector_at_origin__conjugation(self_: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0 * vec2<f32>(-1.0, 1.0), self_.g1 * vec3<f32>(-1.0, 1.0, -1.0), self_.g2 * vec3<f32>(-1.0, 1.0, -1.0));
}

fn origin__conjugation(self_: Origin) -> Origin {
    return Origin(-self_.g0);
}

fn plane__conjugation(self_: Plane) -> Plane {
    return Plane(self_.g0 * vec4<f32>(-1.0, 1.0, -1.0, 1.0));
}

fn plane_at_origin__conjugation(self_: PlaneAtOrigin) -> PlaneAtOrigin {
    return PlaneAtOrigin(self_.g0 * vec3<f32>(-1.0, 1.0, -1.0));
}

fn point__conjugation(self_: Point) -> Point {
    return Point(self_.g0 * vec4<f32>(-1.0));
}

fn point_at_infinity__conjugation(self_: PointAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(self_.g0 * vec3<f32>(-1.0));
}

fn rotor__conjugation(self_: Rotor) -> Rotor {
    return Rotor(self_.g0 * vec4<f32>(-1.0, 1.0, -1.0, 1.0));
}

fn scalar__conjugation(self_: Scalar) -> Scalar {
    return Scalar(self_.g0);
}

fn transflector__conjugation(self_: Transflector) -> Transflector {
    return Transflector(self_.g0 * vec3<f32>(-1.0), self_.g1 * vec4<f32>(-1.0, 1.0, -1.0, 1.0));
}

fn translator__conjugation(self_: Translator) -> Translator {
    return Translator(self_.g0 * vec4<f32>(-1.0, -1.0, -1.0, 1.0));
}

fn anti_scalar__double_complement(self_: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0);
}

fn flector__double_complement(self_: Flector) -> Flector {
    return Flector(self_.g0 * vec4<f32>(-1.0), self_.g1 * vec4<f32>(-1.0));
}

fn flector_at_infinity__double_complement(self_: FlectorAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(self_.g0 * vec4<f32>(-1.0));
}

fn horizon__double_complement(self_: Horizon) -> Horizon {
    return Horizon(-self_.g0);
}

fn line__double_complement(self_: Line) -> Line {
    return Line(self_.g0, self_.g1);
}

fn line_at_infinity__double_complement(self_: LineAtInfinity) -> LineAtInfinity {
    return LineAtInfinity(self_.g0);
}

fn line_at_origin__double_complement(self_: LineAtOrigin) -> LineAtOrigin {
    return LineAtOrigin(self_.g0);
}

fn magnitude__double_complement(self_: Magnitude) -> Magnitude {
    return Magnitude(self_.g0);
}

fn motor__double_complement(self_: Motor) -> Motor {
    return Motor(self_.g0, self_.g1);
}

fn multi_vector__double_complement(self_: MultiVector) -> MultiVector {
    return MultiVector(self_.g0, self_.g1 * vec4<f32>(-1.0), self_.g2, self_.g3, self_.g4 * vec4<f32>(-1.0));
}

fn multi_vector_at_infinity__double_complement(self_: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0 * vec2<f32>(1.0, -1.0), self_.g1 * vec3<f32>(-1.0), self_.g2);
}

fn multi_vector_at_origin__double_complement(self_: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0 * vec2<f32>(-1.0, 1.0), self_.g1, self_.g2 * vec3<f32>(-1.0));
}

fn origin__double_complement(self_: Origin) -> Origin {
    return Origin(-self_.g0);
}

fn plane__double_complement(self_: Plane) -> Plane {
    return Plane(self_.g0 * vec4<f32>(-1.0));
}

fn plane_at_origin__double_complement(self_: PlaneAtOrigin) -> PlaneAtOrigin {
    return PlaneAtOrigin(self_.g0 * vec3<f32>(-1.0));
}

fn point__double_complement(self_: Point) -> Point {
    return Point(self_.g0 * vec4<f32>(-1.0));
}

fn point_at_infinity__double_complement(self_: PointAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(self_.g0 * vec3<f32>(-1.0));
}

fn rotor__double_complement(self_: Rotor) -> Rotor {
    return Rotor(self_.g0);
}

fn scalar__double_complement(self_: Scalar) -> Scalar {
    return Scalar(self_.g0);
}

fn transflector__double_complement(self_: Transflector) -> Transflector {
    return Transflector(self_.g0 * vec3<f32>(-1.0), self_.g1 * vec4<f32>(-1.0));
}

fn translator__double_complement(self_: Translator) -> Translator {
    return Translator(self_.g0);
}

fn flector__dual(self_: Flector) -> Flector {
    return Flector(vec4<f32>(0.0, 0.0, 0.0, -self_.g1.w), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0));
}

fn flector_at_infinity__dual(self_: FlectorAtInfinity) -> Flector {
    return Flector(vec4<f32>(0.0, 0.0, 0.0, -self_.g0.w), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0));
}

fn horizon__dual(self_: Horizon) -> Origin {
    return Origin(-self_.g0);
}

fn line__dual(self_: Line) -> LineAtOrigin {
    return LineAtOrigin(self_.g1 * vec3<f32>(-1.0));
}

fn line_at_infinity__dual(self_: LineAtInfinity) -> LineAtOrigin {
    return LineAtOrigin(self_.g0 * vec3<f32>(-1.0));
}

fn magnitude__dual(self_: Magnitude) -> AntiScalar {
    return AntiScalar(self_.g0.x);
}

fn motor__dual(self_: Motor) -> LineAtOrigin {
    return LineAtOrigin(self_.g1 * vec3<f32>(-1.0));
}

fn multi_vector__dual(self_: MultiVector) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(vec2<f32>(-self_.g4.w, self_.g0.x), self_.g3 * vec3<f32>(-1.0), vec3<f32>(self_.g1.x, self_.g1.y, self_.g1.z));
}

fn multi_vector_at_infinity__dual(self_: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0.yx * vec2<f32>(-1.0, 1.0), self_.g2 * vec3<f32>(-1.0), self_.g1);
}

fn plane__dual(self_: Plane) -> Origin {
    return Origin(-self_.g0.w);
}

fn point__dual(self_: Point) -> PlaneAtOrigin {
    return PlaneAtOrigin(vec3<f32>(self_.g0.x, self_.g0.y, self_.g0.z));
}

fn point_at_infinity__dual(self_: PointAtInfinity) -> PlaneAtOrigin {
    return PlaneAtOrigin(self_.g0);
}

fn scalar__dual(self_: Scalar) -> AntiScalar {
    return AntiScalar(self_.g0);
}

fn transflector__dual(self_: Transflector) -> Flector {
    return Flector(vec4<f32>(0.0, 0.0, 0.0, -self_.g1.w), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0));
}

fn translator__dual(self_: Translator) -> LineAtOrigin {
    return LineAtOrigin(vec3<f32>(-self_.g0.x, self_.g0.y, self_.g0.z));
}

fn anti_scalar__left_complement(self_: AntiScalar) -> Scalar {
    return Scalar(self_.g0);
}

fn flector__left_complement(self_: Flector) -> Flector {
    return Flector(self_.g1 * vec4<f32>(-1.0), self_.g0);
}

fn flector_at_infinity__left_complement(self_: FlectorAtInfinity) -> Flector {
    return Flector(vec4<f32>(0.0, 0.0, 0.0, -self_.g0.w), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0));
}

fn horizon__left_complement(self_: Horizon) -> Origin {
    return Origin(-self_.g0);
}

fn line__left_complement(self_: Line) -> Line {
    return Line(self_.g1 * vec3<f32>(-1.0), self_.g0 * vec3<f32>(-1.0));
}

fn line_at_infinity__left_complement(self_: LineAtInfinity) -> LineAtOrigin {
    return LineAtOrigin(self_.g0 * vec3<f32>(-1.0));
}

fn line_at_origin__left_complement(self_: LineAtOrigin) -> LineAtInfinity {
    return LineAtInfinity(self_.g0 * vec3<f32>(-1.0));
}

fn magnitude__left_complement(self_: Magnitude) -> Magnitude {
    return Magnitude(self_.g0.yx);
}

fn motor__left_complement(self_: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w, 0.0), vec4<f32>(0.0), self_.g1 * vec3<f32>(-1.0), vec3<f32>(-self_.g0.x, self_.g0.y, self_.g0.z), vec4<f32>(0.0));
}

fn multi_vector__left_complement(self_: MultiVector) -> MultiVector {
    return MultiVector(self_.g0.yx, self_.g4 * vec4<f32>(-1.0), self_.g3 * vec3<f32>(-1.0), self_.g2 * vec3<f32>(-1.0), self_.g1);
}

fn multi_vector_at_infinity__left_complement(self_: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0.yx * vec2<f32>(-1.0, 1.0), self_.g2 * vec3<f32>(-1.0), self_.g1);
}

fn multi_vector_at_origin__left_complement(self_: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0.yx, self_.g2 * vec3<f32>(-1.0), self_.g1 * vec3<f32>(-1.0));
}

fn origin__left_complement(self_: Origin) -> Horizon {
    return Horizon(self_.g0);
}

fn plane__left_complement(self_: Plane) -> Point {
    return Point(self_.g0 * vec4<f32>(-1.0));
}

fn plane_at_origin__left_complement(self_: PlaneAtOrigin) -> PointAtInfinity {
    return PointAtInfinity(self_.g0 * vec3<f32>(-1.0));
}

fn point__left_complement(self_: Point) -> Plane {
    return Plane(self_.g0);
}

fn point_at_infinity__left_complement(self_: PointAtInfinity) -> PlaneAtOrigin {
    return PlaneAtOrigin(self_.g0);
}

fn rotor__left_complement(self_: Rotor) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.w, 0.0), vec3<f32>(0.0), vec3<f32>(-self_.g0.x, self_.g0.y, self_.g0.z));
}

fn scalar__left_complement(self_: Scalar) -> AntiScalar {
    return AntiScalar(self_.g0);
}

fn transflector__left_complement(self_: Transflector) -> Flector {
    return Flector(self_.g1 * vec4<f32>(-1.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0));
}

fn translator__left_complement(self_: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w, 0.0), vec4<f32>(0.0), vec3<f32>(-self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn anti_scalar__reversal(self_: AntiScalar) -> AntiScalar {
    return AntiScalar(self_.g0);
}

fn flector__reversal(self_: Flector) -> Flector {
    return Flector(self_.g0, self_.g1 * vec4<f32>(1.0, -1.0, 1.0, -1.0));
}

fn flector_at_infinity__reversal(self_: FlectorAtInfinity) -> FlectorAtInfinity {
    return FlectorAtInfinity(self_.g0 * vec4<f32>(1.0, 1.0, 1.0, -1.0));
}

fn horizon__reversal(self_: Horizon) -> Horizon {
    return Horizon(-self_.g0);
}

fn line__reversal(self_: Line) -> Line {
    return Line(self_.g0 * vec3<f32>(-1.0, 1.0, -1.0), self_.g1 * vec3<f32>(-1.0));
}

fn line_at_infinity__reversal(self_: LineAtInfinity) -> LineAtInfinity {
    return LineAtInfinity(self_.g0 * vec3<f32>(-1.0));
}

fn line_at_origin__reversal(self_: LineAtOrigin) -> LineAtOrigin {
    return LineAtOrigin(self_.g0 * vec3<f32>(-1.0, 1.0, -1.0));
}

fn magnitude__reversal(self_: Magnitude) -> Magnitude {
    return Magnitude(self_.g0);
}

fn motor__reversal(self_: Motor) -> Motor {
    return Motor(self_.g0 * vec4<f32>(-1.0, 1.0, -1.0, 1.0), self_.g1 * vec3<f32>(-1.0));
}

fn multi_vector__reversal(self_: MultiVector) -> MultiVector {
    return MultiVector(self_.g0, self_.g1, self_.g2 * vec3<f32>(-1.0, 1.0, -1.0), self_.g3 * vec3<f32>(-1.0), self_.g4 * vec4<f32>(1.0, -1.0, 1.0, -1.0));
}

fn multi_vector_at_infinity__reversal(self_: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0 * vec2<f32>(1.0, -1.0), self_.g1, self_.g2 * vec3<f32>(-1.0));
}

fn multi_vector_at_origin__reversal(self_: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0, self_.g1 * vec3<f32>(-1.0, 1.0, -1.0), self_.g2 * vec3<f32>(1.0, -1.0, 1.0));
}

fn origin__reversal(self_: Origin) -> Origin {
    return Origin(self_.g0);
}

fn plane__reversal(self_: Plane) -> Plane {
    return Plane(self_.g0 * vec4<f32>(1.0, -1.0, 1.0, -1.0));
}

fn plane_at_origin__reversal(self_: PlaneAtOrigin) -> PlaneAtOrigin {
    return PlaneAtOrigin(self_.g0 * vec3<f32>(1.0, -1.0, 1.0));
}

fn point__reversal(self_: Point) -> Point {
    return Point(self_.g0);
}

fn point_at_infinity__reversal(self_: PointAtInfinity) -> PointAtInfinity {
    return PointAtInfinity(self_.g0);
}

fn rotor__reversal(self_: Rotor) -> Rotor {
    return Rotor(self_.g0 * vec4<f32>(-1.0, 1.0, -1.0, 1.0));
}

fn scalar__reversal(self_: Scalar) -> Scalar {
    return Scalar(self_.g0);
}

fn transflector__reversal(self_: Transflector) -> Transflector {
    return Transflector(self_.g0, self_.g1 * vec4<f32>(1.0, -1.0, 1.0, -1.0));
}

fn translator__reversal(self_: Translator) -> Translator {
    return Translator(self_.g0 * vec4<f32>(-1.0, -1.0, -1.0, 1.0));
}

fn anti_scalar__right_complement(self_: AntiScalar) -> Scalar {
    return Scalar(self_.g0);
}

fn flector__right_complement(self_: Flector) -> Flector {
    return Flector(self_.g1 * vec4<f32>(-1.0), self_.g0);
}

fn flector_at_infinity__right_complement(self_: FlectorAtInfinity) -> Flector {
    return Flector(vec4<f32>(0.0, 0.0, 0.0, -self_.g0.w), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0));
}

fn horizon__right_complement(self_: Horizon) -> Origin {
    return Origin(-self_.g0);
}

fn line__right_complement(self_: Line) -> Line {
    return Line(self_.g1 * vec3<f32>(-1.0), self_.g0 * vec3<f32>(-1.0));
}

fn line_at_infinity__right_complement(self_: LineAtInfinity) -> LineAtOrigin {
    return LineAtOrigin(self_.g0 * vec3<f32>(-1.0));
}

fn line_at_origin__right_complement(self_: LineAtOrigin) -> LineAtInfinity {
    return LineAtInfinity(self_.g0 * vec3<f32>(-1.0));
}

fn magnitude__right_complement(self_: Magnitude) -> Magnitude {
    return Magnitude(self_.g0.yx);
}

fn motor__right_complement(self_: Motor) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w, 0.0), vec4<f32>(0.0), self_.g1 * vec3<f32>(-1.0), vec3<f32>(-self_.g0.x, self_.g0.y, self_.g0.z), vec4<f32>(0.0));
}

fn multi_vector__right_complement(self_: MultiVector) -> MultiVector {
    return MultiVector(self_.g0.yx, self_.g4 * vec4<f32>(-1.0), self_.g3 * vec3<f32>(-1.0), self_.g2 * vec3<f32>(-1.0), self_.g1);
}

fn multi_vector_at_infinity__right_complement(self_: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return MultiVectorAtOrigin(self_.g0.yx * vec2<f32>(-1.0, 1.0), self_.g2 * vec3<f32>(-1.0), self_.g1);
}

fn multi_vector_at_origin__right_complement(self_: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(self_.g0.yx, self_.g2 * vec3<f32>(-1.0), self_.g1 * vec3<f32>(-1.0));
}

fn origin__right_complement(self_: Origin) -> Horizon {
    return Horizon(self_.g0);
}

fn plane__right_complement(self_: Plane) -> Point {
    return Point(self_.g0 * vec4<f32>(-1.0));
}

fn plane_at_origin__right_complement(self_: PlaneAtOrigin) -> PointAtInfinity {
    return PointAtInfinity(self_.g0 * vec3<f32>(-1.0));
}

fn point__right_complement(self_: Point) -> Plane {
    return Plane(self_.g0);
}

fn point_at_infinity__right_complement(self_: PointAtInfinity) -> PlaneAtOrigin {
    return PlaneAtOrigin(self_.g0);
}

fn rotor__right_complement(self_: Rotor) -> MultiVectorAtInfinity {
    return MultiVectorAtInfinity(vec2<f32>(self_.g0.w, 0.0), vec3<f32>(0.0), vec3<f32>(-self_.g0.x, self_.g0.y, self_.g0.z));
}

fn scalar__right_complement(self_: Scalar) -> AntiScalar {
    return AntiScalar(self_.g0);
}

fn transflector__right_complement(self_: Transflector) -> Flector {
    return Flector(self_.g1 * vec4<f32>(-1.0), vec4<f32>(self_.g0.x, self_.g0.y, self_.g0.z, 0.0));
}

fn translator__right_complement(self_: Translator) -> MultiVector {
    return MultiVector(vec2<f32>(self_.g0.w, 0.0), vec4<f32>(0.0), vec3<f32>(-self_.g0.x, self_.g0.y, self_.g0.z), vec3<f32>(0.0), vec4<f32>(0.0));
}

fn flector__left_bulk_dual(self_: Flector) -> Flector {
    return flector_at_infinity__left_complement(flector__bulk(self_));
}

fn flector_at_infinity__left_bulk_dual(self_: FlectorAtInfinity) -> Flector {
    return flector_at_infinity__left_complement(flector_at_infinity__bulk(self_));
}

fn horizon__left_bulk_dual(self_: Horizon) -> Origin {
    return horizon__left_complement(horizon__bulk(self_));
}

fn line__left_bulk_dual(self_: Line) -> LineAtOrigin {
    return line_at_infinity__left_complement(line__bulk(self_));
}

fn line_at_infinity__left_bulk_dual(self_: LineAtInfinity) -> LineAtOrigin {
    return line_at_infinity__left_complement(line_at_infinity__bulk(self_));
}

fn magnitude__left_bulk_dual(self_: Magnitude) -> AntiScalar {
    return scalar__left_complement(magnitude__bulk(self_));
}

fn motor__left_bulk_dual(self_: Motor) -> LineAtOrigin {
    return line_at_infinity__left_complement(motor__bulk(self_));
}

fn multi_vector__left_bulk_dual(self_: MultiVector) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__left_complement(multi_vector__bulk(self_));
}

fn multi_vector_at_infinity__left_bulk_dual(self_: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__left_complement(multi_vector_at_infinity__bulk(self_));
}

fn plane__left_bulk_dual(self_: Plane) -> Origin {
    return horizon__left_complement(plane__bulk(self_));
}

fn point__left_bulk_dual(self_: Point) -> PlaneAtOrigin {
    return point_at_infinity__left_complement(point__bulk(self_));
}

fn point_at_infinity__left_bulk_dual(self_: PointAtInfinity) -> PlaneAtOrigin {
    return point_at_infinity__left_complement(point_at_infinity__bulk(self_));
}

fn scalar__left_bulk_dual(self_: Scalar) -> AntiScalar {
    return scalar__left_complement(scalar__bulk(self_));
}

fn transflector__left_bulk_dual(self_: Transflector) -> Flector {
    return flector_at_infinity__left_complement(transflector__bulk(self_));
}

fn translator__left_bulk_dual(self_: Translator) -> LineAtOrigin {
    return line_at_infinity__left_complement(translator__bulk(self_));
}

fn anti_scalar__left_weight_dual(self_: AntiScalar) -> Scalar {
    return anti_scalar__left_complement(anti_scalar__weight(self_));
}

fn flector__left_weight_dual(self_: Flector) -> Flector {
    return flector__left_complement(flector__weight(self_));
}

fn line__left_weight_dual(self_: Line) -> LineAtInfinity {
    return line_at_origin__left_complement(line__weight(self_));
}

fn line_at_origin__left_weight_dual(self_: LineAtOrigin) -> LineAtInfinity {
    return line_at_origin__left_complement(line_at_origin__weight(self_));
}

fn magnitude__left_weight_dual(self_: Magnitude) -> Scalar {
    return anti_scalar__left_complement(magnitude__weight(self_));
}

fn motor__left_weight_dual(self_: Motor) -> MultiVectorAtInfinity {
    return rotor__left_complement(motor__weight(self_));
}

fn multi_vector__left_weight_dual(self_: MultiVector) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__left_complement(multi_vector__weight(self_));
}

fn multi_vector_at_origin__left_weight_dual(self_: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__left_complement(multi_vector_at_origin__weight(self_));
}

fn origin__left_weight_dual(self_: Origin) -> Horizon {
    return origin__left_complement(origin__weight(self_));
}

fn plane__left_weight_dual(self_: Plane) -> PointAtInfinity {
    return plane_at_origin__left_complement(plane__weight(self_));
}

fn plane_at_origin__left_weight_dual(self_: PlaneAtOrigin) -> PointAtInfinity {
    return plane_at_origin__left_complement(plane_at_origin__weight(self_));
}

fn point__left_weight_dual(self_: Point) -> Horizon {
    return origin__left_complement(point__weight(self_));
}

fn rotor__left_weight_dual(self_: Rotor) -> MultiVectorAtInfinity {
    return rotor__left_complement(rotor__weight(self_));
}

fn transflector__left_weight_dual(self_: Transflector) -> PointAtInfinity {
    return plane_at_origin__left_complement(transflector__weight(self_));
}

fn translator__left_weight_dual(self_: Translator) -> Scalar {
    return anti_scalar__left_complement(translator__weight(self_));
}

fn flector__right_bulk_dual(self_: Flector) -> Flector {
    return flector_at_infinity__right_complement(flector__bulk(self_));
}

fn flector_at_infinity__right_bulk_dual(self_: FlectorAtInfinity) -> Flector {
    return flector_at_infinity__right_complement(flector_at_infinity__bulk(self_));
}

fn horizon__right_bulk_dual(self_: Horizon) -> Origin {
    return horizon__right_complement(horizon__bulk(self_));
}

fn line__right_bulk_dual(self_: Line) -> LineAtOrigin {
    return line_at_infinity__right_complement(line__bulk(self_));
}

fn line_at_infinity__right_bulk_dual(self_: LineAtInfinity) -> LineAtOrigin {
    return line_at_infinity__right_complement(line_at_infinity__bulk(self_));
}

fn magnitude__right_bulk_dual(self_: Magnitude) -> AntiScalar {
    return scalar__right_complement(magnitude__bulk(self_));
}

fn motor__right_bulk_dual(self_: Motor) -> LineAtOrigin {
    return line_at_infinity__right_complement(motor__bulk(self_));
}

fn multi_vector__right_bulk_dual(self_: MultiVector) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__right_complement(multi_vector__bulk(self_));
}

fn multi_vector_at_infinity__right_bulk_dual(self_: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__right_complement(multi_vector_at_infinity__bulk(self_));
}

fn plane__right_bulk_dual(self_: Plane) -> Origin {
    return horizon__right_complement(plane__bulk(self_));
}

fn point__right_bulk_dual(self_: Point) -> PlaneAtOrigin {
    return point_at_infinity__right_complement(point__bulk(self_));
}

fn point_at_infinity__right_bulk_dual(self_: PointAtInfinity) -> PlaneAtOrigin {
    return point_at_infinity__right_complement(point_at_infinity__bulk(self_));
}

fn scalar__right_bulk_dual(self_: Scalar) -> AntiScalar {
    return scalar__right_complement(scalar__bulk(self_));
}

fn transflector__right_bulk_dual(self_: Transflector) -> Flector {
    return flector_at_infinity__right_complement(transflector__bulk(self_));
}

fn translator__right_bulk_dual(self_: Translator) -> LineAtOrigin {
    return line_at_infinity__right_complement(translator__bulk(self_));
}

fn anti_scalar__right_weight_dual(self_: AntiScalar) -> Scalar {
    return anti_scalar__right_complement(anti_scalar__weight(self_));
}

fn flector__right_weight_dual(self_: Flector) -> Flector {
    return flector__right_complement(flector__weight(self_));
}

fn line__right_weight_dual(self_: Line) -> LineAtInfinity {
    return line_at_origin__right_complement(line__weight(self_));
}

fn line_at_origin__right_weight_dual(self_: LineAtOrigin) -> LineAtInfinity {
    return line_at_origin__right_complement(line_at_origin__weight(self_));
}

fn magnitude__right_weight_dual(self_: Magnitude) -> Scalar {
    return anti_scalar__right_complement(magnitude__weight(self_));
}

fn motor__right_weight_dual(self_: Motor) -> MultiVectorAtInfinity {
    return rotor__right_complement(motor__weight(self_));
}

fn multi_vector__right_weight_dual(self_: MultiVector) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__right_complement(multi_vector__weight(self_));
}

fn multi_vector_at_origin__right_weight_dual(self_: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__right_complement(multi_vector_at_origin__weight(self_));
}

fn origin__right_weight_dual(self_: Origin) -> Horizon {
    return origin__right_complement(origin__weight(self_));
}

fn plane__right_weight_dual(self_: Plane) -> PointAtInfinity {
    return plane_at_origin__right_complement(plane__weight(self_));
}

fn plane_at_origin__right_weight_dual(self_: PlaneAtOrigin) -> PointAtInfinity {
    return plane_at_origin__right_complement(plane_at_origin__weight(self_));
}

fn point__right_weight_dual(self_: Point) -> Horizon {
    return origin__right_complement(point__weight(self_));
}

fn rotor__right_weight_dual(self_: Rotor) -> MultiVectorAtInfinity {
    return rotor__right_complement(rotor__weight(self_));
}

fn transflector__right_weight_dual(self_: Transflector) -> PointAtInfinity {
    return plane_at_origin__right_complement(transflector__weight(self_));
}

fn translator__right_weight_dual(self_: Translator) -> Scalar {
    return anti_scalar__right_complement(translator__weight(self_));
}

fn anti_scalar__anti_grade() -> i32 {
    return 0;
}

fn horizon__anti_grade() -> i32 {
    return 1;
}

fn line__anti_grade() -> i32 {
    return 2;
}

fn line_at_infinity__anti_grade() -> i32 {
    return 2;
}

fn line_at_origin__anti_grade() -> i32 {
    return 2;
}

fn origin__anti_grade() -> i32 {
    return 3;
}

fn plane__anti_grade() -> i32 {
    return 1;
}

fn plane_at_origin__anti_grade() -> i32 {
    return 1;
}

fn point__anti_grade() -> i32 {
    return 3;
}

fn point_at_infinity__anti_grade() -> i32 {
    return 3;
}

fn scalar__anti_grade() -> i32 {
    return 4;
}

fn anti_scalar__grade() -> i32 {
    return 4;
}

fn horizon__grade() -> i32 {
    return 3;
}

fn line__grade() -> i32 {
    return 2;
}

fn line_at_infinity__grade() -> i32 {
    return 2;
}

fn line_at_origin__grade() -> i32 {
    return 2;
}

fn origin__grade() -> i32 {
    return 1;
}

fn plane__grade() -> i32 {
    return 3;
}

fn plane_at_origin__grade() -> i32 {
    return 3;
}

fn point__grade() -> i32 {
    return 1;
}

fn point_at_infinity__grade() -> i32 {
    return 1;
}

fn scalar__grade() -> i32 {
    return 0;
}

fn anti_scalar__attitude(self_: AntiScalar) -> Horizon {
    return anti_scalar__anti_wedge__horizon(self_, horizon__one());
}

fn flector__attitude(self_: Flector) -> MultiVectorAtInfinity {
    return flector__anti_wedge__horizon(self_, horizon__one());
}

fn line__attitude(self_: Line) -> PointAtInfinity {
    return line__anti_wedge__horizon(self_, horizon__one());
}

fn line_at_origin__attitude(self_: LineAtOrigin) -> PointAtInfinity {
    return line_at_origin__anti_wedge__horizon(self_, horizon__one());
}

fn magnitude__attitude(self_: Magnitude) -> Horizon {
    return magnitude__anti_wedge__horizon(self_, horizon__one());
}

fn motor__attitude(self_: Motor) -> FlectorAtInfinity {
    return motor__anti_wedge__horizon(self_, horizon__one());
}

fn multi_vector__attitude(self_: MultiVector) -> MultiVectorAtInfinity {
    return multi_vector__anti_wedge__horizon(self_, horizon__one());
}

fn multi_vector_at_origin__attitude(self_: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__anti_wedge__horizon(self_, horizon__one());
}

fn origin__attitude(self_: Origin) -> Scalar {
    return origin__anti_wedge__horizon(self_, horizon__one());
}

fn plane__attitude(self_: Plane) -> LineAtInfinity {
    return plane__anti_wedge__horizon(self_, horizon__one());
}

fn plane_at_origin__attitude(self_: PlaneAtOrigin) -> LineAtInfinity {
    return plane_at_origin__anti_wedge__horizon(self_, horizon__one());
}

fn point__attitude(self_: Point) -> Scalar {
    return point__anti_wedge__horizon(self_, horizon__one());
}

fn rotor__attitude(self_: Rotor) -> FlectorAtInfinity {
    return rotor__anti_wedge__horizon(self_, horizon__one());
}

fn transflector__attitude(self_: Transflector) -> LineAtInfinity {
    return transflector__anti_wedge__horizon(self_, horizon__one());
}

fn translator__attitude(self_: Translator) -> Horizon {
    return translator__anti_wedge__horizon(self_, horizon__one());
}

fn anti_scalar__sqrt(self_: AntiScalar) -> AntiScalar {
    return AntiScalar(sqrt(self_.g0));
}

fn scalar__sqrt(self_: Scalar) -> Scalar {
    return Scalar(sqrt(self_.g0));
}

fn anti_scalar__anti_inverse(self_: AntiScalar) -> AntiScalar {
    return anti_scalar__geometric_anti_product__anti_scalar(self_, anti_scalar__div__anti_scalar(anti_scalar__one(), anti_scalar__anti_dot__anti_scalar(self_, self_)));
}

fn flector__anti_inverse(self_: Flector) -> Flector {
    return flector__geometric_anti_product__anti_scalar(self_, anti_scalar__div__anti_scalar(anti_scalar__one(), flector__anti_dot__flector(self_, self_)));
}

fn line__anti_inverse(self_: Line) -> Line {
    return line__geometric_anti_product__anti_scalar(self_, anti_scalar__div__anti_scalar(anti_scalar__one(), line__anti_dot__line(self_, self_)));
}

fn line_at_origin__anti_inverse(self_: LineAtOrigin) -> LineAtOrigin {
    return line_at_origin__geometric_anti_product__anti_scalar(self_, anti_scalar__div__anti_scalar(anti_scalar__one(), line_at_origin__anti_dot__line_at_origin(self_, self_)));
}

fn magnitude__anti_inverse(self_: Magnitude) -> Magnitude {
    return magnitude__geometric_anti_product__anti_scalar(self_, anti_scalar__div__anti_scalar(anti_scalar__one(), magnitude__anti_dot__magnitude(self_, self_)));
}

fn motor__anti_inverse(self_: Motor) -> Motor {
    return motor__geometric_anti_product__anti_scalar(self_, anti_scalar__div__anti_scalar(anti_scalar__one(), motor__anti_dot__motor(self_, self_)));
}

fn multi_vector__anti_inverse(self_: MultiVector) -> MultiVector {
    return multi_vector__geometric_anti_product__anti_scalar(self_, anti_scalar__div__anti_scalar(anti_scalar__one(), multi_vector__anti_dot__multi_vector(self_, self_)));
}

fn multi_vector_at_origin__anti_inverse(self_: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__geometric_anti_product__anti_scalar(self_, anti_scalar__div__anti_scalar(anti_scalar__one(), multi_vector_at_origin__anti_dot__multi_vector_at_origin(self_, self_)));
}

fn origin__anti_inverse(self_: Origin) -> Origin {
    return origin__geometric_anti_product__anti_scalar(self_, anti_scalar__div__anti_scalar(anti_scalar__one(), origin__anti_dot__origin(self_, self_)));
}

fn plane__anti_inverse(self_: Plane) -> Plane {
    return plane__geometric_anti_product__anti_scalar(self_, anti_scalar__div__anti_scalar(anti_scalar__one(), plane__anti_dot__plane(self_, self_)));
}

fn plane_at_origin__anti_inverse(self_: PlaneAtOrigin) -> PlaneAtOrigin {
    return plane_at_origin__geometric_anti_product__anti_scalar(self_, anti_scalar__div__anti_scalar(anti_scalar__one(), plane_at_origin__anti_dot__plane_at_origin(self_, self_)));
}

fn point__anti_inverse(self_: Point) -> Point {
    return point__geometric_anti_product__anti_scalar(self_, anti_scalar__div__anti_scalar(anti_scalar__one(), point__anti_dot__point(self_, self_)));
}

fn rotor__anti_inverse(self_: Rotor) -> Rotor {
    return rotor__geometric_anti_product__anti_scalar(self_, anti_scalar__div__anti_scalar(anti_scalar__one(), rotor__anti_dot__rotor(self_, self_)));
}

fn transflector__anti_inverse(self_: Transflector) -> Transflector {
    return transflector__geometric_anti_product__anti_scalar(self_, anti_scalar__div__anti_scalar(anti_scalar__one(), transflector__anti_dot__transflector(self_, self_)));
}

fn translator__anti_inverse(self_: Translator) -> Translator {
    return translator__geometric_anti_product__anti_scalar(self_, anti_scalar__div__anti_scalar(anti_scalar__one(), translator__anti_dot__translator(self_, self_)));
}

fn flector__inverse(self_: Flector) -> Flector {
    return flector__geometric_product__scalar(self_, scalar__div__scalar(scalar__one(), flector__dot__flector(self_, self_)));
}

fn flector_at_infinity__inverse(self_: FlectorAtInfinity) -> FlectorAtInfinity {
    return flector_at_infinity__geometric_product__scalar(self_, scalar__div__scalar(scalar__one(), flector_at_infinity__dot__flector_at_infinity(self_, self_)));
}

fn horizon__inverse(self_: Horizon) -> Horizon {
    return horizon__geometric_product__scalar(self_, scalar__div__scalar(scalar__one(), horizon__dot__horizon(self_, self_)));
}

fn line__inverse(self_: Line) -> Line {
    return line__geometric_product__scalar(self_, scalar__div__scalar(scalar__one(), line__dot__line(self_, self_)));
}

fn line_at_infinity__inverse(self_: LineAtInfinity) -> LineAtInfinity {
    return line_at_infinity__geometric_product__scalar(self_, scalar__div__scalar(scalar__one(), line_at_infinity__dot__line_at_infinity(self_, self_)));
}

fn magnitude__inverse(self_: Magnitude) -> Magnitude {
    return magnitude__geometric_product__scalar(self_, scalar__div__scalar(scalar__one(), magnitude__dot__magnitude(self_, self_)));
}

fn motor__inverse(self_: Motor) -> Motor {
    return motor__geometric_product__scalar(self_, scalar__div__scalar(scalar__one(), motor__dot__motor(self_, self_)));
}

fn multi_vector__inverse(self_: MultiVector) -> MultiVector {
    return multi_vector__geometric_product__scalar(self_, scalar__div__scalar(scalar__one(), multi_vector__dot__multi_vector(self_, self_)));
}

fn multi_vector_at_infinity__inverse(self_: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__geometric_product__scalar(self_, scalar__div__scalar(scalar__one(), multi_vector_at_infinity__dot__multi_vector_at_infinity(self_, self_)));
}

fn plane__inverse(self_: Plane) -> Plane {
    return plane__geometric_product__scalar(self_, scalar__div__scalar(scalar__one(), plane__dot__plane(self_, self_)));
}

fn point__inverse(self_: Point) -> Point {
    return point__geometric_product__scalar(self_, scalar__div__scalar(scalar__one(), point__dot__point(self_, self_)));
}

fn point_at_infinity__inverse(self_: PointAtInfinity) -> PointAtInfinity {
    return point_at_infinity__geometric_product__scalar(self_, scalar__div__scalar(scalar__one(), point_at_infinity__dot__point_at_infinity(self_, self_)));
}

fn scalar__inverse(self_: Scalar) -> Scalar {
    return scalar__geometric_product__scalar(self_, scalar__div__scalar(scalar__one(), scalar__dot__scalar(self_, self_)));
}

fn transflector__inverse(self_: Transflector) -> Transflector {
    return transflector__geometric_product__scalar(self_, scalar__div__scalar(scalar__one(), transflector__dot__transflector(self_, self_)));
}

fn translator__inverse(self_: Translator) -> Translator {
    return translator__geometric_product__scalar(self_, scalar__div__scalar(scalar__one(), translator__dot__translator(self_, self_)));
}

fn flector__bulk_norm_squared(self_: Flector) -> Scalar {
    return flector__dot__flector(self_, self_);
}

fn flector_at_infinity__bulk_norm_squared(self_: FlectorAtInfinity) -> Scalar {
    return flector_at_infinity__dot__flector_at_infinity(self_, self_);
}

fn horizon__bulk_norm_squared(self_: Horizon) -> Scalar {
    return horizon__dot__horizon(self_, self_);
}

fn line__bulk_norm_squared(self_: Line) -> Scalar {
    return line__dot__line(self_, self_);
}

fn line_at_infinity__bulk_norm_squared(self_: LineAtInfinity) -> Scalar {
    return line_at_infinity__dot__line_at_infinity(self_, self_);
}

fn magnitude__bulk_norm_squared(self_: Magnitude) -> Scalar {
    return magnitude__dot__magnitude(self_, self_);
}

fn motor__bulk_norm_squared(self_: Motor) -> Scalar {
    return motor__dot__motor(self_, self_);
}

fn multi_vector__bulk_norm_squared(self_: MultiVector) -> Scalar {
    return multi_vector__dot__multi_vector(self_, self_);
}

fn multi_vector_at_infinity__bulk_norm_squared(self_: MultiVectorAtInfinity) -> Scalar {
    return multi_vector_at_infinity__dot__multi_vector_at_infinity(self_, self_);
}

fn plane__bulk_norm_squared(self_: Plane) -> Scalar {
    return plane__dot__plane(self_, self_);
}

fn point__bulk_norm_squared(self_: Point) -> Scalar {
    return point__dot__point(self_, self_);
}

fn point_at_infinity__bulk_norm_squared(self_: PointAtInfinity) -> Scalar {
    return point_at_infinity__dot__point_at_infinity(self_, self_);
}

fn scalar__bulk_norm_squared(self_: Scalar) -> Scalar {
    return scalar__dot__scalar(self_, self_);
}

fn transflector__bulk_norm_squared(self_: Transflector) -> Scalar {
    return transflector__dot__transflector(self_, self_);
}

fn translator__bulk_norm_squared(self_: Translator) -> Scalar {
    return translator__dot__translator(self_, self_);
}

fn flector__bulk_norm(self_: Flector) -> Scalar {
    return scalar__sqrt(flector__dot__flector(self_, self_));
}

fn flector_at_infinity__bulk_norm(self_: FlectorAtInfinity) -> Scalar {
    return scalar__sqrt(flector_at_infinity__dot__flector_at_infinity(self_, self_));
}

fn horizon__bulk_norm(self_: Horizon) -> Scalar {
    return scalar__sqrt(horizon__dot__horizon(self_, self_));
}

fn line__bulk_norm(self_: Line) -> Scalar {
    return scalar__sqrt(line__dot__line(self_, self_));
}

fn line_at_infinity__bulk_norm(self_: LineAtInfinity) -> Scalar {
    return scalar__sqrt(line_at_infinity__dot__line_at_infinity(self_, self_));
}

fn magnitude__bulk_norm(self_: Magnitude) -> Scalar {
    return scalar__sqrt(magnitude__dot__magnitude(self_, self_));
}

fn motor__bulk_norm(self_: Motor) -> Scalar {
    return scalar__sqrt(motor__dot__motor(self_, self_));
}

fn multi_vector__bulk_norm(self_: MultiVector) -> Scalar {
    return scalar__sqrt(multi_vector__dot__multi_vector(self_, self_));
}

fn multi_vector_at_infinity__bulk_norm(self_: MultiVectorAtInfinity) -> Scalar {
    return scalar__sqrt(multi_vector_at_infinity__dot__multi_vector_at_infinity(self_, self_));
}

fn plane__bulk_norm(self_: Plane) -> Scalar {
    return scalar__sqrt(plane__dot__plane(self_, self_));
}

fn point__bulk_norm(self_: Point) -> Scalar {
    return scalar__sqrt(point__dot__point(self_, self_));
}

fn point_at_infinity__bulk_norm(self_: PointAtInfinity) -> Scalar {
    return scalar__sqrt(point_at_infinity__dot__point_at_infinity(self_, self_));
}

fn scalar__bulk_norm(self_: Scalar) -> Scalar {
    return scalar__sqrt(scalar__dot__scalar(self_, self_));
}

fn transflector__bulk_norm(self_: Transflector) -> Scalar {
    return scalar__sqrt(transflector__dot__transflector(self_, self_));
}

fn translator__bulk_norm(self_: Translator) -> Scalar {
    return scalar__sqrt(translator__dot__translator(self_, self_));
}

fn anti_scalar__weight_norm_squared(self_: AntiScalar) -> AntiScalar {
    return anti_scalar__anti_dot__anti_scalar(self_, self_);
}

fn flector__weight_norm_squared(self_: Flector) -> AntiScalar {
    return flector__anti_dot__flector(self_, self_);
}

fn line__weight_norm_squared(self_: Line) -> AntiScalar {
    return line__anti_dot__line(self_, self_);
}

fn line_at_origin__weight_norm_squared(self_: LineAtOrigin) -> AntiScalar {
    return line_at_origin__anti_dot__line_at_origin(self_, self_);
}

fn magnitude__weight_norm_squared(self_: Magnitude) -> AntiScalar {
    return magnitude__anti_dot__magnitude(self_, self_);
}

fn motor__weight_norm_squared(self_: Motor) -> AntiScalar {
    return motor__anti_dot__motor(self_, self_);
}

fn multi_vector__weight_norm_squared(self_: MultiVector) -> AntiScalar {
    return multi_vector__anti_dot__multi_vector(self_, self_);
}

fn multi_vector_at_origin__weight_norm_squared(self_: MultiVectorAtOrigin) -> AntiScalar {
    return multi_vector_at_origin__anti_dot__multi_vector_at_origin(self_, self_);
}

fn origin__weight_norm_squared(self_: Origin) -> AntiScalar {
    return origin__anti_dot__origin(self_, self_);
}

fn plane__weight_norm_squared(self_: Plane) -> AntiScalar {
    return plane__anti_dot__plane(self_, self_);
}

fn plane_at_origin__weight_norm_squared(self_: PlaneAtOrigin) -> AntiScalar {
    return plane_at_origin__anti_dot__plane_at_origin(self_, self_);
}

fn point__weight_norm_squared(self_: Point) -> AntiScalar {
    return point__anti_dot__point(self_, self_);
}

fn rotor__weight_norm_squared(self_: Rotor) -> AntiScalar {
    return rotor__anti_dot__rotor(self_, self_);
}

fn transflector__weight_norm_squared(self_: Transflector) -> AntiScalar {
    return transflector__anti_dot__transflector(self_, self_);
}

fn translator__weight_norm_squared(self_: Translator) -> AntiScalar {
    return translator__anti_dot__translator(self_, self_);
}

fn anti_scalar__weight_norm(self_: AntiScalar) -> AntiScalar {
    return anti_scalar__sqrt(anti_scalar__anti_dot__anti_scalar(self_, self_));
}

fn flector__weight_norm(self_: Flector) -> AntiScalar {
    return anti_scalar__sqrt(flector__anti_dot__flector(self_, self_));
}

fn line__weight_norm(self_: Line) -> AntiScalar {
    return anti_scalar__sqrt(line__anti_dot__line(self_, self_));
}

fn line_at_origin__weight_norm(self_: LineAtOrigin) -> AntiScalar {
    return anti_scalar__sqrt(line_at_origin__anti_dot__line_at_origin(self_, self_));
}

fn magnitude__weight_norm(self_: Magnitude) -> AntiScalar {
    return anti_scalar__sqrt(magnitude__anti_dot__magnitude(self_, self_));
}

fn motor__weight_norm(self_: Motor) -> AntiScalar {
    return anti_scalar__sqrt(motor__anti_dot__motor(self_, self_));
}

fn multi_vector__weight_norm(self_: MultiVector) -> AntiScalar {
    return anti_scalar__sqrt(multi_vector__anti_dot__multi_vector(self_, self_));
}

fn multi_vector_at_origin__weight_norm(self_: MultiVectorAtOrigin) -> AntiScalar {
    return anti_scalar__sqrt(multi_vector_at_origin__anti_dot__multi_vector_at_origin(self_, self_));
}

fn origin__weight_norm(self_: Origin) -> AntiScalar {
    return anti_scalar__sqrt(origin__anti_dot__origin(self_, self_));
}

fn plane__weight_norm(self_: Plane) -> AntiScalar {
    return anti_scalar__sqrt(plane__anti_dot__plane(self_, self_));
}

fn plane_at_origin__weight_norm(self_: PlaneAtOrigin) -> AntiScalar {
    return anti_scalar__sqrt(plane_at_origin__anti_dot__plane_at_origin(self_, self_));
}

fn point__weight_norm(self_: Point) -> AntiScalar {
    return anti_scalar__sqrt(point__anti_dot__point(self_, self_));
}

fn rotor__weight_norm(self_: Rotor) -> AntiScalar {
    return anti_scalar__sqrt(rotor__anti_dot__rotor(self_, self_));
}

fn transflector__weight_norm(self_: Transflector) -> AntiScalar {
    return anti_scalar__sqrt(transflector__anti_dot__transflector(self_, self_));
}

fn translator__weight_norm(self_: Translator) -> AntiScalar {
    return anti_scalar__sqrt(translator__anti_dot__translator(self_, self_));
}

fn flector__geometric_norm(self_: Flector) -> Magnitude {
    return scalar__add__anti_scalar(flector__bulk_norm(self_), flector__weight_norm(self_));
}

fn line__geometric_norm(self_: Line) -> Magnitude {
    return scalar__add__anti_scalar(line__bulk_norm(self_), line__weight_norm(self_));
}

fn magnitude__geometric_norm(self_: Magnitude) -> Magnitude {
    return scalar__add__anti_scalar(magnitude__bulk_norm(self_), magnitude__weight_norm(self_));
}

fn motor__geometric_norm(self_: Motor) -> Magnitude {
    return scalar__add__anti_scalar(motor__bulk_norm(self_), motor__weight_norm(self_));
}

fn multi_vector__geometric_norm(self_: MultiVector) -> Magnitude {
    return scalar__add__anti_scalar(multi_vector__bulk_norm(self_), multi_vector__weight_norm(self_));
}

fn plane__geometric_norm(self_: Plane) -> Magnitude {
    return scalar__add__anti_scalar(plane__bulk_norm(self_), plane__weight_norm(self_));
}

fn point__geometric_norm(self_: Point) -> Magnitude {
    return scalar__add__anti_scalar(point__bulk_norm(self_), point__weight_norm(self_));
}

fn transflector__geometric_norm(self_: Transflector) -> Magnitude {
    return scalar__add__anti_scalar(transflector__bulk_norm(self_), transflector__weight_norm(self_));
}

fn translator__geometric_norm(self_: Translator) -> Magnitude {
    return scalar__add__anti_scalar(translator__bulk_norm(self_), translator__weight_norm(self_));
}

fn flector__unitized_norm_squared(self_: Flector) -> f32 {
    return flector__bulk_norm_squared(self_).g0 / flector__weight_norm_squared(self_).g0;
}

fn line__unitized_norm_squared(self_: Line) -> f32 {
    return line__bulk_norm_squared(self_).g0 / line__weight_norm_squared(self_).g0;
}

fn magnitude__unitized_norm_squared(self_: Magnitude) -> f32 {
    return magnitude__bulk_norm_squared(self_).g0 / magnitude__weight_norm_squared(self_).g0;
}

fn motor__unitized_norm_squared(self_: Motor) -> f32 {
    return motor__bulk_norm_squared(self_).g0 / motor__weight_norm_squared(self_).g0;
}

fn multi_vector__unitized_norm_squared(self_: MultiVector) -> f32 {
    return multi_vector__bulk_norm_squared(self_).g0 / multi_vector__weight_norm_squared(self_).g0;
}

fn plane__unitized_norm_squared(self_: Plane) -> f32 {
    return plane__bulk_norm_squared(self_).g0 / plane__weight_norm_squared(self_).g0;
}

fn point__unitized_norm_squared(self_: Point) -> f32 {
    return point__bulk_norm_squared(self_).g0 / point__weight_norm_squared(self_).g0;
}

fn transflector__unitized_norm_squared(self_: Transflector) -> f32 {
    return transflector__bulk_norm_squared(self_).g0 / transflector__weight_norm_squared(self_).g0;
}

fn translator__unitized_norm_squared(self_: Translator) -> f32 {
    return translator__bulk_norm_squared(self_).g0 / translator__weight_norm_squared(self_).g0;
}

fn flector__unitized_norm(self_: Flector) -> f32 {
    return sqrt(flector__unitized_norm_squared(self_));
}

fn line__unitized_norm(self_: Line) -> f32 {
    return sqrt(line__unitized_norm_squared(self_));
}

fn magnitude__unitized_norm(self_: Magnitude) -> f32 {
    return sqrt(magnitude__unitized_norm_squared(self_));
}

fn motor__unitized_norm(self_: Motor) -> f32 {
    return sqrt(motor__unitized_norm_squared(self_));
}

fn multi_vector__unitized_norm(self_: MultiVector) -> f32 {
    return sqrt(multi_vector__unitized_norm_squared(self_));
}

fn plane__unitized_norm(self_: Plane) -> f32 {
    return sqrt(plane__unitized_norm_squared(self_));
}

fn point__unitized_norm(self_: Point) -> f32 {
    return sqrt(point__unitized_norm_squared(self_));
}

fn transflector__unitized_norm(self_: Transflector) -> f32 {
    return sqrt(transflector__unitized_norm_squared(self_));
}

fn translator__unitized_norm(self_: Translator) -> f32 {
    return sqrt(translator__unitized_norm_squared(self_));
}

fn anti_scalar__unitize(self_: AntiScalar) -> AntiScalar {
    return anti_scalar__geometric_product__scalar(self_, Scalar(1.0 / anti_scalar__weight_norm(self_).g0));
}

fn flector__unitize(self_: Flector) -> Flector {
    return flector__geometric_product__scalar(self_, Scalar(1.0 / flector__weight_norm(self_).g0));
}

fn line__unitize(self_: Line) -> Line {
    return line__geometric_product__scalar(self_, Scalar(1.0 / line__weight_norm(self_).g0));
}

fn line_at_origin__unitize(self_: LineAtOrigin) -> LineAtOrigin {
    return line_at_origin__geometric_product__scalar(self_, Scalar(1.0 / line_at_origin__weight_norm(self_).g0));
}

fn magnitude__unitize(self_: Magnitude) -> Magnitude {
    return magnitude__geometric_product__scalar(self_, Scalar(1.0 / magnitude__weight_norm(self_).g0));
}

fn motor__unitize(self_: Motor) -> Motor {
    return motor__geometric_product__scalar(self_, Scalar(1.0 / motor__weight_norm(self_).g0));
}

fn multi_vector__unitize(self_: MultiVector) -> MultiVector {
    return multi_vector__geometric_product__scalar(self_, Scalar(1.0 / multi_vector__weight_norm(self_).g0));
}

fn multi_vector_at_origin__unitize(self_: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__geometric_product__scalar(self_, Scalar(1.0 / multi_vector_at_origin__weight_norm(self_).g0));
}

fn origin__unitize(self_: Origin) -> Origin {
    return origin__geometric_product__scalar(self_, Scalar(1.0 / origin__weight_norm(self_).g0));
}

fn plane__unitize(self_: Plane) -> Plane {
    return plane__geometric_product__scalar(self_, Scalar(1.0 / plane__weight_norm(self_).g0));
}

fn plane_at_origin__unitize(self_: PlaneAtOrigin) -> PlaneAtOrigin {
    return plane_at_origin__geometric_product__scalar(self_, Scalar(1.0 / plane_at_origin__weight_norm(self_).g0));
}

fn point__unitize(self_: Point) -> Point {
    return point__geometric_product__scalar(self_, Scalar(1.0 / point__weight_norm(self_).g0));
}

fn rotor__unitize(self_: Rotor) -> Rotor {
    return rotor__geometric_product__scalar(self_, Scalar(1.0 / rotor__weight_norm(self_).g0));
}

fn transflector__unitize(self_: Transflector) -> Transflector {
    return transflector__geometric_product__scalar(self_, Scalar(1.0 / transflector__weight_norm(self_).g0));
}

fn translator__unitize(self_: Translator) -> Translator {
    return translator__geometric_product__scalar(self_, Scalar(1.0 / translator__weight_norm(self_).g0));
}

fn anti_scalar__sandwich__flector(self_: AntiScalar, other: Flector) -> Flector {
    return flector__geometric_anti_product__anti_scalar(anti_scalar__geometric_anti_product__flector(self_, other), anti_scalar__anti_reversal(self_));
}

fn anti_scalar__sandwich__flector_at_infinity(self_: AntiScalar, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return flector_at_infinity__geometric_anti_product__anti_scalar(anti_scalar__geometric_anti_product__flector_at_infinity(self_, other), anti_scalar__anti_reversal(self_));
}

fn anti_scalar__sandwich__horizon(self_: AntiScalar, other: Horizon) -> Horizon {
    return horizon__geometric_anti_product__anti_scalar(anti_scalar__geometric_anti_product__horizon(self_, other), anti_scalar__anti_reversal(self_));
}

fn anti_scalar__sandwich__line(self_: AntiScalar, other: Line) -> Line {
    return line__geometric_anti_product__anti_scalar(anti_scalar__geometric_anti_product__line(self_, other), anti_scalar__anti_reversal(self_));
}

fn anti_scalar__sandwich__line_at_infinity(self_: AntiScalar, other: LineAtInfinity) -> LineAtInfinity {
    return line_at_infinity__geometric_anti_product__anti_scalar(anti_scalar__geometric_anti_product__line_at_infinity(self_, other), anti_scalar__anti_reversal(self_));
}

fn anti_scalar__sandwich__line_at_origin(self_: AntiScalar, other: LineAtOrigin) -> LineAtOrigin {
    return line_at_origin__geometric_anti_product__anti_scalar(anti_scalar__geometric_anti_product__line_at_origin(self_, other), anti_scalar__anti_reversal(self_));
}

fn anti_scalar__sandwich__motor(self_: AntiScalar, other: Motor) -> Motor {
    return motor__geometric_anti_product__anti_scalar(anti_scalar__geometric_anti_product__motor(self_, other), anti_scalar__anti_reversal(self_));
}

fn anti_scalar__sandwich__multi_vector(self_: AntiScalar, other: MultiVector) -> MultiVector {
    return multi_vector__geometric_anti_product__anti_scalar(anti_scalar__geometric_anti_product__multi_vector(self_, other), anti_scalar__anti_reversal(self_));
}

fn anti_scalar__sandwich__multi_vector_at_infinity(self_: AntiScalar, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__geometric_anti_product__anti_scalar(anti_scalar__geometric_anti_product__multi_vector_at_infinity(self_, other), anti_scalar__anti_reversal(self_));
}

fn anti_scalar__sandwich__multi_vector_at_origin(self_: AntiScalar, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__geometric_anti_product__anti_scalar(anti_scalar__geometric_anti_product__multi_vector_at_origin(self_, other), anti_scalar__anti_reversal(self_));
}

fn anti_scalar__sandwich__origin(self_: AntiScalar, other: Origin) -> Origin {
    return origin__geometric_anti_product__anti_scalar(anti_scalar__geometric_anti_product__origin(self_, other), anti_scalar__anti_reversal(self_));
}

fn anti_scalar__sandwich__plane(self_: AntiScalar, other: Plane) -> Plane {
    return plane__geometric_anti_product__anti_scalar(anti_scalar__geometric_anti_product__plane(self_, other), anti_scalar__anti_reversal(self_));
}

fn anti_scalar__sandwich__plane_at_origin(self_: AntiScalar, other: PlaneAtOrigin) -> PlaneAtOrigin {
    return plane_at_origin__geometric_anti_product__anti_scalar(anti_scalar__geometric_anti_product__plane_at_origin(self_, other), anti_scalar__anti_reversal(self_));
}

fn anti_scalar__sandwich__point(self_: AntiScalar, other: Point) -> Point {
    return point__geometric_anti_product__anti_scalar(anti_scalar__geometric_anti_product__point(self_, other), anti_scalar__anti_reversal(self_));
}

fn anti_scalar__sandwich__point_at_infinity(self_: AntiScalar, other: PointAtInfinity) -> PointAtInfinity {
    return point_at_infinity__geometric_anti_product__anti_scalar(anti_scalar__geometric_anti_product__point_at_infinity(self_, other), anti_scalar__anti_reversal(self_));
}

fn anti_scalar__sandwich__rotor(self_: AntiScalar, other: Rotor) -> Rotor {
    return rotor__geometric_anti_product__anti_scalar(anti_scalar__geometric_anti_product__rotor(self_, other), anti_scalar__anti_reversal(self_));
}

fn anti_scalar__sandwich__transflector(self_: AntiScalar, other: Transflector) -> Transflector {
    return transflector__geometric_anti_product__anti_scalar(anti_scalar__geometric_anti_product__transflector(self_, other), anti_scalar__anti_reversal(self_));
}

fn anti_scalar__sandwich__translator(self_: AntiScalar, other: Translator) -> Translator {
    return translator__geometric_anti_product__anti_scalar(anti_scalar__geometric_anti_product__translator(self_, other), anti_scalar__anti_reversal(self_));
}

fn flector__sandwich__flector(self_: Flector, other: Flector) -> Flector {
    return multi_vector__into__flector(multi_vector__geometric_anti_product__flector(flector__geometric_anti_product__flector(self_, other), flector__anti_reversal(self_)));
}

fn flector__sandwich__flector_at_infinity(self_: Flector, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return multi_vector_at_infinity__into__flector_at_infinity(multi_vector_at_infinity__geometric_anti_product__flector(flector__geometric_anti_product__flector_at_infinity(self_, other), flector__anti_reversal(self_)));
}

fn flector__sandwich__horizon(self_: Flector, other: Horizon) -> Horizon {
    return multi_vector_at_infinity__into__horizon(multi_vector_at_infinity__geometric_anti_product__flector(flector__geometric_anti_product__horizon(self_, other), flector__anti_reversal(self_)));
}

fn flector__sandwich__line(self_: Flector, other: Line) -> Line {
    return multi_vector__into__line(flector__geometric_anti_product__flector(flector__geometric_anti_product__line(self_, other), flector__anti_reversal(self_)));
}

fn flector__sandwich__line_at_infinity(self_: Flector, other: LineAtInfinity) -> LineAtInfinity {
    return multi_vector_at_infinity__into__line_at_infinity(flector_at_infinity__geometric_anti_product__flector(flector__geometric_anti_product__line_at_infinity(self_, other), flector__anti_reversal(self_)));
}

fn flector__sandwich__line_at_origin(self_: Flector, other: LineAtOrigin) -> Line {
    return multi_vector__into__line(flector__geometric_anti_product__flector(flector__geometric_anti_product__line_at_origin(self_, other), flector__anti_reversal(self_)));
}

fn flector__sandwich__motor(self_: Flector, other: Motor) -> Motor {
    return multi_vector__into__motor(flector__geometric_anti_product__flector(flector__geometric_anti_product__motor(self_, other), flector__anti_reversal(self_)));
}

fn flector__sandwich__multi_vector(self_: Flector, other: MultiVector) -> MultiVector {
    return multi_vector__geometric_anti_product__flector(flector__geometric_anti_product__multi_vector(self_, other), flector__anti_reversal(self_));
}

fn flector__sandwich__multi_vector_at_infinity(self_: Flector, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__geometric_anti_product__flector(flector__geometric_anti_product__multi_vector_at_infinity(self_, other), flector__anti_reversal(self_));
}

fn flector__sandwich__multi_vector_at_origin(self_: Flector, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return multi_vector__into__multi_vector_at_origin(multi_vector__geometric_anti_product__flector(flector__geometric_anti_product__multi_vector_at_origin(self_, other), flector__anti_reversal(self_)));
}

fn flector__sandwich__origin(self_: Flector, other: Origin) -> Point {
    return multi_vector__into__point(multi_vector__geometric_anti_product__flector(flector__geometric_anti_product__origin(self_, other), flector__anti_reversal(self_)));
}

fn flector__sandwich__plane(self_: Flector, other: Plane) -> Plane {
    return multi_vector__into__plane(multi_vector__geometric_anti_product__flector(flector__geometric_anti_product__plane(self_, other), flector__anti_reversal(self_)));
}

fn flector__sandwich__plane_at_origin(self_: Flector, other: PlaneAtOrigin) -> Plane {
    return multi_vector__into__plane(multi_vector__geometric_anti_product__flector(flector__geometric_anti_product__plane_at_origin(self_, other), flector__anti_reversal(self_)));
}

fn flector__sandwich__point(self_: Flector, other: Point) -> Point {
    return multi_vector__into__point(multi_vector__geometric_anti_product__flector(flector__geometric_anti_product__point(self_, other), flector__anti_reversal(self_)));
}

fn flector__sandwich__point_at_infinity(self_: Flector, other: PointAtInfinity) -> PointAtInfinity {
    return multi_vector_at_infinity__into__point_at_infinity(multi_vector_at_infinity__geometric_anti_product__flector(flector__geometric_anti_product__point_at_infinity(self_, other), flector__anti_reversal(self_)));
}

fn flector__sandwich__rotor(self_: Flector, other: Rotor) -> Motor {
    return multi_vector__into__motor(flector__geometric_anti_product__flector(flector__geometric_anti_product__rotor(self_, other), flector__anti_reversal(self_)));
}

fn flector__sandwich__transflector(self_: Flector, other: Transflector) -> Transflector {
    return multi_vector__into__transflector(multi_vector__geometric_anti_product__flector(flector__geometric_anti_product__transflector(self_, other), flector__anti_reversal(self_)));
}

fn flector__sandwich__translator(self_: Flector, other: Translator) -> Translator {
    return multi_vector__into__translator(flector__geometric_anti_product__flector(flector__geometric_anti_product__translator(self_, other), flector__anti_reversal(self_)));
}

fn line__sandwich__flector(self_: Line, other: Flector) -> Flector {
    return flector__geometric_anti_product__line(line__geometric_anti_product__flector(self_, other), line__anti_reversal(self_));
}

fn line__sandwich__flector_at_infinity(self_: Line, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return flector_at_infinity__geometric_anti_product__line(line__geometric_anti_product__flector_at_infinity(self_, other), line__anti_reversal(self_));
}

fn line__sandwich__horizon(self_: Line, other: Horizon) -> Horizon {
    return flector_at_infinity__into__horizon(point_at_infinity__geometric_anti_product__line(line__geometric_anti_product__horizon(self_, other), line__anti_reversal(self_)));
}

fn line__sandwich__line(self_: Line, other: Line) -> Line {
    return multi_vector__into__line(multi_vector__geometric_anti_product__line(line__geometric_anti_product__line(self_, other), line__anti_reversal(self_)));
}

fn line__sandwich__line_at_infinity(self_: Line, other: LineAtInfinity) -> LineAtInfinity {
    return multi_vector_at_infinity__into__line_at_infinity(multi_vector_at_infinity__geometric_anti_product__line(line__geometric_anti_product__line_at_infinity(self_, other), line__anti_reversal(self_)));
}

fn line__sandwich__line_at_origin(self_: Line, other: LineAtOrigin) -> LineAtOrigin {
    return multi_vector__into__line_at_origin(multi_vector__geometric_anti_product__line(line__geometric_anti_product__line_at_origin(self_, other), line__anti_reversal(self_)));
}

fn line__sandwich__motor(self_: Line, other: Motor) -> Motor {
    return multi_vector__into__motor(multi_vector__geometric_anti_product__line(line__geometric_anti_product__motor(self_, other), line__anti_reversal(self_)));
}

fn line__sandwich__multi_vector(self_: Line, other: MultiVector) -> MultiVector {
    return multi_vector__geometric_anti_product__line(line__geometric_anti_product__multi_vector(self_, other), line__anti_reversal(self_));
}

fn line__sandwich__multi_vector_at_infinity(self_: Line, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__geometric_anti_product__line(line__geometric_anti_product__multi_vector_at_infinity(self_, other), line__anti_reversal(self_));
}

fn line__sandwich__multi_vector_at_origin(self_: Line, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return multi_vector__into__multi_vector_at_origin(multi_vector__geometric_anti_product__line(line__geometric_anti_product__multi_vector_at_origin(self_, other), line__anti_reversal(self_)));
}

fn line__sandwich__origin(self_: Line, other: Origin) -> Origin {
    return flector__into__origin(transflector__geometric_anti_product__line(line__geometric_anti_product__origin(self_, other), line__anti_reversal(self_)));
}

fn line__sandwich__plane(self_: Line, other: Plane) -> Plane {
    return flector__into__plane(flector__geometric_anti_product__line(line__geometric_anti_product__plane(self_, other), line__anti_reversal(self_)));
}

fn line__sandwich__plane_at_origin(self_: Line, other: PlaneAtOrigin) -> PlaneAtOrigin {
    return flector__into__plane_at_origin(flector__geometric_anti_product__line(line__geometric_anti_product__plane_at_origin(self_, other), line__anti_reversal(self_)));
}

fn line__sandwich__point(self_: Line, other: Point) -> Point {
    return flector__into__point(transflector__geometric_anti_product__line(line__geometric_anti_product__point(self_, other), line__anti_reversal(self_)));
}

fn line__sandwich__point_at_infinity(self_: Line, other: PointAtInfinity) -> PointAtInfinity {
    return flector_at_infinity__into__point_at_infinity(flector_at_infinity__geometric_anti_product__line(line__geometric_anti_product__point_at_infinity(self_, other), line__anti_reversal(self_)));
}

fn line__sandwich__rotor(self_: Line, other: Rotor) -> Rotor {
    return multi_vector__into__rotor(multi_vector__geometric_anti_product__line(line__geometric_anti_product__rotor(self_, other), line__anti_reversal(self_)));
}

fn line__sandwich__transflector(self_: Line, other: Transflector) -> Transflector {
    return flector__into__transflector(flector__geometric_anti_product__line(line__geometric_anti_product__transflector(self_, other), line__anti_reversal(self_)));
}

fn line__sandwich__translator(self_: Line, other: Translator) -> Translator {
    return multi_vector__into__translator(multi_vector__geometric_anti_product__line(line__geometric_anti_product__translator(self_, other), line__anti_reversal(self_)));
}

fn line_at_origin__sandwich__flector(self_: LineAtOrigin, other: Flector) -> Flector {
    return flector__geometric_anti_product__line_at_origin(line_at_origin__geometric_anti_product__flector(self_, other), line_at_origin__anti_reversal(self_));
}

fn line_at_origin__sandwich__flector_at_infinity(self_: LineAtOrigin, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return flector_at_infinity__geometric_anti_product__line_at_origin(line_at_origin__geometric_anti_product__flector_at_infinity(self_, other), line_at_origin__anti_reversal(self_));
}

fn line_at_origin__sandwich__horizon(self_: LineAtOrigin, other: Horizon) -> Horizon {
    return flector_at_infinity__into__horizon(point_at_infinity__geometric_anti_product__line_at_origin(line_at_origin__geometric_anti_product__horizon(self_, other), line_at_origin__anti_reversal(self_)));
}

fn line_at_origin__sandwich__line(self_: LineAtOrigin, other: Line) -> Line {
    return multi_vector__into__line(multi_vector__geometric_anti_product__line_at_origin(line_at_origin__geometric_anti_product__line(self_, other), line_at_origin__anti_reversal(self_)));
}

fn line_at_origin__sandwich__line_at_infinity(self_: LineAtOrigin, other: LineAtInfinity) -> LineAtInfinity {
    return multi_vector_at_infinity__into__line_at_infinity(multi_vector_at_infinity__geometric_anti_product__line_at_origin(line_at_origin__geometric_anti_product__line_at_infinity(self_, other), line_at_origin__anti_reversal(self_)));
}

fn line_at_origin__sandwich__line_at_origin(self_: LineAtOrigin, other: LineAtOrigin) -> LineAtOrigin {
    return rotor__into__line_at_origin(rotor__geometric_anti_product__line_at_origin(line_at_origin__geometric_anti_product__line_at_origin(self_, other), line_at_origin__anti_reversal(self_)));
}

fn line_at_origin__sandwich__motor(self_: LineAtOrigin, other: Motor) -> Motor {
    return multi_vector__into__motor(multi_vector__geometric_anti_product__line_at_origin(line_at_origin__geometric_anti_product__motor(self_, other), line_at_origin__anti_reversal(self_)));
}

fn line_at_origin__sandwich__multi_vector(self_: LineAtOrigin, other: MultiVector) -> MultiVector {
    return multi_vector__geometric_anti_product__line_at_origin(line_at_origin__geometric_anti_product__multi_vector(self_, other), line_at_origin__anti_reversal(self_));
}

fn line_at_origin__sandwich__multi_vector_at_infinity(self_: LineAtOrigin, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__geometric_anti_product__line_at_origin(line_at_origin__geometric_anti_product__multi_vector_at_infinity(self_, other), line_at_origin__anti_reversal(self_));
}

fn line_at_origin__sandwich__multi_vector_at_origin(self_: LineAtOrigin, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__geometric_anti_product__line_at_origin(line_at_origin__geometric_anti_product__multi_vector_at_origin(self_, other), line_at_origin__anti_reversal(self_));
}

fn line_at_origin__sandwich__origin(self_: LineAtOrigin, other: Origin) -> Origin {
    return flector__into__origin(plane_at_origin__geometric_anti_product__line_at_origin(line_at_origin__geometric_anti_product__origin(self_, other), line_at_origin__anti_reversal(self_)));
}

fn line_at_origin__sandwich__plane(self_: LineAtOrigin, other: Plane) -> Plane {
    return flector__into__plane(flector__geometric_anti_product__line_at_origin(line_at_origin__geometric_anti_product__plane(self_, other), line_at_origin__anti_reversal(self_)));
}

fn line_at_origin__sandwich__plane_at_origin(self_: LineAtOrigin, other: PlaneAtOrigin) -> PlaneAtOrigin {
    return flector__into__plane_at_origin(flector__geometric_anti_product__line_at_origin(line_at_origin__geometric_anti_product__plane_at_origin(self_, other), line_at_origin__anti_reversal(self_)));
}

fn line_at_origin__sandwich__point(self_: LineAtOrigin, other: Point) -> Point {
    return flector__into__point(transflector__geometric_anti_product__line_at_origin(line_at_origin__geometric_anti_product__point(self_, other), line_at_origin__anti_reversal(self_)));
}

fn line_at_origin__sandwich__point_at_infinity(self_: LineAtOrigin, other: PointAtInfinity) -> PointAtInfinity {
    return flector_at_infinity__into__point_at_infinity(flector_at_infinity__geometric_anti_product__line_at_origin(line_at_origin__geometric_anti_product__point_at_infinity(self_, other), line_at_origin__anti_reversal(self_)));
}

fn line_at_origin__sandwich__rotor(self_: LineAtOrigin, other: Rotor) -> Rotor {
    return rotor__geometric_anti_product__line_at_origin(line_at_origin__geometric_anti_product__rotor(self_, other), line_at_origin__anti_reversal(self_));
}

fn line_at_origin__sandwich__transflector(self_: LineAtOrigin, other: Transflector) -> Transflector {
    return flector__into__transflector(flector__geometric_anti_product__line_at_origin(line_at_origin__geometric_anti_product__transflector(self_, other), line_at_origin__anti_reversal(self_)));
}

fn line_at_origin__sandwich__translator(self_: LineAtOrigin, other: Translator) -> Translator {
    return multi_vector__into__translator(multi_vector__geometric_anti_product__line_at_origin(line_at_origin__geometric_anti_product__translator(self_, other), line_at_origin__anti_reversal(self_)));
}

fn magnitude__sandwich__flector(self_: Magnitude, other: Flector) -> Flector {
    return flector__geometric_anti_product__magnitude(magnitude__geometric_anti_product__flector(self_, other), magnitude__anti_reversal(self_));
}

fn magnitude__sandwich__flector_at_infinity(self_: Magnitude, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return flector_at_infinity__geometric_anti_product__magnitude(magnitude__geometric_anti_product__flector_at_infinity(self_, other), magnitude__anti_reversal(self_));
}

fn magnitude__sandwich__horizon(self_: Magnitude, other: Horizon) -> Horizon {
    return horizon__geometric_anti_product__magnitude(magnitude__geometric_anti_product__horizon(self_, other), magnitude__anti_reversal(self_));
}

fn magnitude__sandwich__line(self_: Magnitude, other: Line) -> Line {
    return line__geometric_anti_product__magnitude(magnitude__geometric_anti_product__line(self_, other), magnitude__anti_reversal(self_));
}

fn magnitude__sandwich__line_at_infinity(self_: Magnitude, other: LineAtInfinity) -> LineAtInfinity {
    return line_at_infinity__geometric_anti_product__magnitude(magnitude__geometric_anti_product__line_at_infinity(self_, other), magnitude__anti_reversal(self_));
}

fn magnitude__sandwich__line_at_origin(self_: Magnitude, other: LineAtOrigin) -> LineAtOrigin {
    return line__into__line_at_origin(line__geometric_anti_product__magnitude(magnitude__geometric_anti_product__line_at_origin(self_, other), magnitude__anti_reversal(self_)));
}

fn magnitude__sandwich__motor(self_: Magnitude, other: Motor) -> Motor {
    return multi_vector__into__motor(multi_vector__geometric_anti_product__magnitude(magnitude__geometric_anti_product__motor(self_, other), magnitude__anti_reversal(self_)));
}

fn magnitude__sandwich__multi_vector(self_: Magnitude, other: MultiVector) -> MultiVector {
    return multi_vector__geometric_anti_product__magnitude(magnitude__geometric_anti_product__multi_vector(self_, other), magnitude__anti_reversal(self_));
}

fn magnitude__sandwich__multi_vector_at_infinity(self_: Magnitude, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__geometric_anti_product__magnitude(magnitude__geometric_anti_product__multi_vector_at_infinity(self_, other), magnitude__anti_reversal(self_));
}

fn magnitude__sandwich__multi_vector_at_origin(self_: Magnitude, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return multi_vector__into__multi_vector_at_origin(multi_vector__geometric_anti_product__magnitude(magnitude__geometric_anti_product__multi_vector_at_origin(self_, other), magnitude__anti_reversal(self_)));
}

fn magnitude__sandwich__origin(self_: Magnitude, other: Origin) -> Origin {
    return flector__into__origin(flector__geometric_anti_product__magnitude(magnitude__geometric_anti_product__origin(self_, other), magnitude__anti_reversal(self_)));
}

fn magnitude__sandwich__plane(self_: Magnitude, other: Plane) -> Plane {
    return transflector__into__plane(transflector__geometric_anti_product__magnitude(magnitude__geometric_anti_product__plane(self_, other), magnitude__anti_reversal(self_)));
}

fn magnitude__sandwich__plane_at_origin(self_: Magnitude, other: PlaneAtOrigin) -> PlaneAtOrigin {
    return transflector__into__plane_at_origin(transflector__geometric_anti_product__magnitude(magnitude__geometric_anti_product__plane_at_origin(self_, other), magnitude__anti_reversal(self_)));
}

fn magnitude__sandwich__point(self_: Magnitude, other: Point) -> Point {
    return flector__into__point(flector__geometric_anti_product__magnitude(magnitude__geometric_anti_product__point(self_, other), magnitude__anti_reversal(self_)));
}

fn magnitude__sandwich__point_at_infinity(self_: Magnitude, other: PointAtInfinity) -> PointAtInfinity {
    return point_at_infinity__geometric_anti_product__magnitude(magnitude__geometric_anti_product__point_at_infinity(self_, other), magnitude__anti_reversal(self_));
}

fn magnitude__sandwich__rotor(self_: Magnitude, other: Rotor) -> Rotor {
    return multi_vector__into__rotor(multi_vector__geometric_anti_product__magnitude(magnitude__geometric_anti_product__rotor(self_, other), magnitude__anti_reversal(self_)));
}

fn magnitude__sandwich__transflector(self_: Magnitude, other: Transflector) -> Transflector {
    return transflector__geometric_anti_product__magnitude(magnitude__geometric_anti_product__transflector(self_, other), magnitude__anti_reversal(self_));
}

fn magnitude__sandwich__translator(self_: Magnitude, other: Translator) -> Translator {
    return multi_vector__into__translator(multi_vector__geometric_anti_product__magnitude(magnitude__geometric_anti_product__translator(self_, other), magnitude__anti_reversal(self_)));
}

fn motor__sandwich__flector(self_: Motor, other: Flector) -> Flector {
    return flector__geometric_anti_product__motor(motor__geometric_anti_product__flector(self_, other), motor__anti_reversal(self_));
}

fn motor__sandwich__flector_at_infinity(self_: Motor, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return flector_at_infinity__geometric_anti_product__motor(motor__geometric_anti_product__flector_at_infinity(self_, other), motor__anti_reversal(self_));
}

fn motor__sandwich__horizon(self_: Motor, other: Horizon) -> Horizon {
    return flector_at_infinity__into__horizon(flector_at_infinity__geometric_anti_product__motor(motor__geometric_anti_product__horizon(self_, other), motor__anti_reversal(self_)));
}

fn motor__sandwich__line(self_: Motor, other: Line) -> Line {
    return multi_vector__into__line(multi_vector__geometric_anti_product__motor(motor__geometric_anti_product__line(self_, other), motor__anti_reversal(self_)));
}

fn motor__sandwich__line_at_infinity(self_: Motor, other: LineAtInfinity) -> LineAtInfinity {
    return multi_vector_at_infinity__into__line_at_infinity(multi_vector_at_infinity__geometric_anti_product__motor(motor__geometric_anti_product__line_at_infinity(self_, other), motor__anti_reversal(self_)));
}

fn motor__sandwich__line_at_origin(self_: Motor, other: LineAtOrigin) -> Line {
    return multi_vector__into__line(multi_vector__geometric_anti_product__motor(motor__geometric_anti_product__line_at_origin(self_, other), motor__anti_reversal(self_)));
}

fn motor__sandwich__motor(self_: Motor, other: Motor) -> Motor {
    return multi_vector__into__motor(multi_vector__geometric_anti_product__motor(motor__geometric_anti_product__motor(self_, other), motor__anti_reversal(self_)));
}

fn motor__sandwich__multi_vector(self_: Motor, other: MultiVector) -> MultiVector {
    return multi_vector__geometric_anti_product__motor(motor__geometric_anti_product__multi_vector(self_, other), motor__anti_reversal(self_));
}

fn motor__sandwich__multi_vector_at_infinity(self_: Motor, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__geometric_anti_product__motor(motor__geometric_anti_product__multi_vector_at_infinity(self_, other), motor__anti_reversal(self_));
}

fn motor__sandwich__multi_vector_at_origin(self_: Motor, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return multi_vector__into__multi_vector_at_origin(multi_vector__geometric_anti_product__motor(motor__geometric_anti_product__multi_vector_at_origin(self_, other), motor__anti_reversal(self_)));
}

fn motor__sandwich__origin(self_: Motor, other: Origin) -> Point {
    return flector__into__point(flector__geometric_anti_product__motor(motor__geometric_anti_product__origin(self_, other), motor__anti_reversal(self_)));
}

fn motor__sandwich__plane(self_: Motor, other: Plane) -> Plane {
    return flector__into__plane(flector__geometric_anti_product__motor(motor__geometric_anti_product__plane(self_, other), motor__anti_reversal(self_)));
}

fn motor__sandwich__plane_at_origin(self_: Motor, other: PlaneAtOrigin) -> Plane {
    return flector__into__plane(flector__geometric_anti_product__motor(motor__geometric_anti_product__plane_at_origin(self_, other), motor__anti_reversal(self_)));
}

fn motor__sandwich__point(self_: Motor, other: Point) -> Point {
    return flector__into__point(flector__geometric_anti_product__motor(motor__geometric_anti_product__point(self_, other), motor__anti_reversal(self_)));
}

fn motor__sandwich__point_at_infinity(self_: Motor, other: PointAtInfinity) -> PointAtInfinity {
    return flector_at_infinity__into__point_at_infinity(flector_at_infinity__geometric_anti_product__motor(motor__geometric_anti_product__point_at_infinity(self_, other), motor__anti_reversal(self_)));
}

fn motor__sandwich__rotor(self_: Motor, other: Rotor) -> Motor {
    return multi_vector__into__motor(multi_vector__geometric_anti_product__motor(motor__geometric_anti_product__rotor(self_, other), motor__anti_reversal(self_)));
}

fn motor__sandwich__transflector(self_: Motor, other: Transflector) -> Transflector {
    return flector__into__transflector(flector__geometric_anti_product__motor(motor__geometric_anti_product__transflector(self_, other), motor__anti_reversal(self_)));
}

fn motor__sandwich__translator(self_: Motor, other: Translator) -> Translator {
    return multi_vector__into__translator(multi_vector__geometric_anti_product__motor(motor__geometric_anti_product__translator(self_, other), motor__anti_reversal(self_)));
}

fn multi_vector__sandwich__flector(self_: MultiVector, other: Flector) -> Flector {
    return multi_vector__into__flector(multi_vector__geometric_anti_product__multi_vector(multi_vector__geometric_anti_product__flector(self_, other), multi_vector__anti_reversal(self_)));
}

fn multi_vector__sandwich__flector_at_infinity(self_: MultiVector, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return multi_vector_at_infinity__into__flector_at_infinity(multi_vector_at_infinity__geometric_anti_product__multi_vector(multi_vector__geometric_anti_product__flector_at_infinity(self_, other), multi_vector__anti_reversal(self_)));
}

fn multi_vector__sandwich__horizon(self_: MultiVector, other: Horizon) -> Horizon {
    return multi_vector_at_infinity__into__horizon(multi_vector_at_infinity__geometric_anti_product__multi_vector(multi_vector__geometric_anti_product__horizon(self_, other), multi_vector__anti_reversal(self_)));
}

fn multi_vector__sandwich__line(self_: MultiVector, other: Line) -> Line {
    return multi_vector__into__line(multi_vector__geometric_anti_product__multi_vector(multi_vector__geometric_anti_product__line(self_, other), multi_vector__anti_reversal(self_)));
}

fn multi_vector__sandwich__line_at_infinity(self_: MultiVector, other: LineAtInfinity) -> LineAtInfinity {
    return multi_vector_at_infinity__into__line_at_infinity(multi_vector_at_infinity__geometric_anti_product__multi_vector(multi_vector__geometric_anti_product__line_at_infinity(self_, other), multi_vector__anti_reversal(self_)));
}

fn multi_vector__sandwich__line_at_origin(self_: MultiVector, other: LineAtOrigin) -> LineAtOrigin {
    return multi_vector__into__line_at_origin(multi_vector__geometric_anti_product__multi_vector(multi_vector__geometric_anti_product__line_at_origin(self_, other), multi_vector__anti_reversal(self_)));
}

fn multi_vector__sandwich__motor(self_: MultiVector, other: Motor) -> Motor {
    return multi_vector__into__motor(multi_vector__geometric_anti_product__multi_vector(multi_vector__geometric_anti_product__motor(self_, other), multi_vector__anti_reversal(self_)));
}

fn multi_vector__sandwich__multi_vector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return multi_vector__geometric_anti_product__multi_vector(multi_vector__geometric_anti_product__multi_vector(self_, other), multi_vector__anti_reversal(self_));
}

fn multi_vector__sandwich__multi_vector_at_infinity(self_: MultiVector, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__geometric_anti_product__multi_vector(multi_vector__geometric_anti_product__multi_vector_at_infinity(self_, other), multi_vector__anti_reversal(self_));
}

fn multi_vector__sandwich__multi_vector_at_origin(self_: MultiVector, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return multi_vector__into__multi_vector_at_origin(multi_vector__geometric_anti_product__multi_vector(multi_vector__geometric_anti_product__multi_vector_at_origin(self_, other), multi_vector__anti_reversal(self_)));
}

fn multi_vector__sandwich__origin(self_: MultiVector, other: Origin) -> Origin {
    return multi_vector__into__origin(multi_vector__geometric_anti_product__multi_vector(multi_vector__geometric_anti_product__origin(self_, other), multi_vector__anti_reversal(self_)));
}

fn multi_vector__sandwich__plane(self_: MultiVector, other: Plane) -> Plane {
    return multi_vector__into__plane(multi_vector__geometric_anti_product__multi_vector(multi_vector__geometric_anti_product__plane(self_, other), multi_vector__anti_reversal(self_)));
}

fn multi_vector__sandwich__plane_at_origin(self_: MultiVector, other: PlaneAtOrigin) -> PlaneAtOrigin {
    return multi_vector__into__plane_at_origin(multi_vector__geometric_anti_product__multi_vector(multi_vector__geometric_anti_product__plane_at_origin(self_, other), multi_vector__anti_reversal(self_)));
}

fn multi_vector__sandwich__point(self_: MultiVector, other: Point) -> Point {
    return multi_vector__into__point(multi_vector__geometric_anti_product__multi_vector(multi_vector__geometric_anti_product__point(self_, other), multi_vector__anti_reversal(self_)));
}

fn multi_vector__sandwich__point_at_infinity(self_: MultiVector, other: PointAtInfinity) -> PointAtInfinity {
    return multi_vector_at_infinity__into__point_at_infinity(multi_vector_at_infinity__geometric_anti_product__multi_vector(multi_vector__geometric_anti_product__point_at_infinity(self_, other), multi_vector__anti_reversal(self_)));
}

fn multi_vector__sandwich__rotor(self_: MultiVector, other: Rotor) -> Rotor {
    return multi_vector__into__rotor(multi_vector__geometric_anti_product__multi_vector(multi_vector__geometric_anti_product__rotor(self_, other), multi_vector__anti_reversal(self_)));
}

fn multi_vector__sandwich__transflector(self_: MultiVector, other: Transflector) -> Transflector {
    return multi_vector__into__transflector(multi_vector__geometric_anti_product__multi_vector(multi_vector__geometric_anti_product__transflector(self_, other), multi_vector__anti_reversal(self_)));
}

fn multi_vector__sandwich__translator(self_: MultiVector, other: Translator) -> Translator {
    return multi_vector__into__translator(multi_vector__geometric_anti_product__multi_vector(multi_vector__geometric_anti_product__translator(self_, other), multi_vector__anti_reversal(self_)));
}

fn multi_vector_at_origin__sandwich__flector(self_: MultiVectorAtOrigin, other: Flector) -> Flector {
    return multi_vector__into__flector(multi_vector__geometric_anti_product__multi_vector_at_origin(multi_vector_at_origin__geometric_anti_product__flector(self_, other), multi_vector_at_origin__anti_reversal(self_)));
}

fn multi_vector_at_origin__sandwich__flector_at_infinity(self_: MultiVectorAtOrigin, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return multi_vector_at_infinity__into__flector_at_infinity(multi_vector_at_infinity__geometric_anti_product__multi_vector_at_origin(multi_vector_at_origin__geometric_anti_product__flector_at_infinity(self_, other), multi_vector_at_origin__anti_reversal(self_)));
}

fn multi_vector_at_origin__sandwich__horizon(self_: MultiVectorAtOrigin, other: Horizon) -> Horizon {
    return multi_vector_at_infinity__into__horizon(multi_vector_at_infinity__geometric_anti_product__multi_vector_at_origin(multi_vector_at_origin__geometric_anti_product__horizon(self_, other), multi_vector_at_origin__anti_reversal(self_)));
}

fn multi_vector_at_origin__sandwich__line(self_: MultiVectorAtOrigin, other: Line) -> Line {
    return multi_vector__into__line(multi_vector__geometric_anti_product__multi_vector_at_origin(multi_vector_at_origin__geometric_anti_product__line(self_, other), multi_vector_at_origin__anti_reversal(self_)));
}

fn multi_vector_at_origin__sandwich__line_at_infinity(self_: MultiVectorAtOrigin, other: LineAtInfinity) -> LineAtInfinity {
    return multi_vector_at_infinity__into__line_at_infinity(multi_vector_at_infinity__geometric_anti_product__multi_vector_at_origin(multi_vector_at_origin__geometric_anti_product__line_at_infinity(self_, other), multi_vector_at_origin__anti_reversal(self_)));
}

fn multi_vector_at_origin__sandwich__line_at_origin(self_: MultiVectorAtOrigin, other: LineAtOrigin) -> LineAtOrigin {
    return multi_vector_at_origin__into__line_at_origin(multi_vector_at_origin__geometric_anti_product__multi_vector_at_origin(multi_vector_at_origin__geometric_anti_product__line_at_origin(self_, other), multi_vector_at_origin__anti_reversal(self_)));
}

fn multi_vector_at_origin__sandwich__motor(self_: MultiVectorAtOrigin, other: Motor) -> Motor {
    return multi_vector__into__motor(multi_vector__geometric_anti_product__multi_vector_at_origin(multi_vector_at_origin__geometric_anti_product__motor(self_, other), multi_vector_at_origin__anti_reversal(self_)));
}

fn multi_vector_at_origin__sandwich__multi_vector(self_: MultiVectorAtOrigin, other: MultiVector) -> MultiVector {
    return multi_vector__geometric_anti_product__multi_vector_at_origin(multi_vector_at_origin__geometric_anti_product__multi_vector(self_, other), multi_vector_at_origin__anti_reversal(self_));
}

fn multi_vector_at_origin__sandwich__multi_vector_at_infinity(self_: MultiVectorAtOrigin, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__geometric_anti_product__multi_vector_at_origin(multi_vector_at_origin__geometric_anti_product__multi_vector_at_infinity(self_, other), multi_vector_at_origin__anti_reversal(self_));
}

fn multi_vector_at_origin__sandwich__multi_vector_at_origin(self_: MultiVectorAtOrigin, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__geometric_anti_product__multi_vector_at_origin(multi_vector_at_origin__geometric_anti_product__multi_vector_at_origin(self_, other), multi_vector_at_origin__anti_reversal(self_));
}

fn multi_vector_at_origin__sandwich__origin(self_: MultiVectorAtOrigin, other: Origin) -> Origin {
    return multi_vector_at_origin__into__origin(multi_vector_at_origin__geometric_anti_product__multi_vector_at_origin(multi_vector_at_origin__geometric_anti_product__origin(self_, other), multi_vector_at_origin__anti_reversal(self_)));
}

fn multi_vector_at_origin__sandwich__plane(self_: MultiVectorAtOrigin, other: Plane) -> Plane {
    return multi_vector__into__plane(multi_vector__geometric_anti_product__multi_vector_at_origin(multi_vector_at_origin__geometric_anti_product__plane(self_, other), multi_vector_at_origin__anti_reversal(self_)));
}

fn multi_vector_at_origin__sandwich__plane_at_origin(self_: MultiVectorAtOrigin, other: PlaneAtOrigin) -> PlaneAtOrigin {
    return multi_vector_at_origin__into__plane_at_origin(multi_vector_at_origin__geometric_anti_product__multi_vector_at_origin(multi_vector_at_origin__geometric_anti_product__plane_at_origin(self_, other), multi_vector_at_origin__anti_reversal(self_)));
}

fn multi_vector_at_origin__sandwich__point(self_: MultiVectorAtOrigin, other: Point) -> Point {
    return multi_vector__into__point(multi_vector__geometric_anti_product__multi_vector_at_origin(multi_vector_at_origin__geometric_anti_product__point(self_, other), multi_vector_at_origin__anti_reversal(self_)));
}

fn multi_vector_at_origin__sandwich__point_at_infinity(self_: MultiVectorAtOrigin, other: PointAtInfinity) -> PointAtInfinity {
    return multi_vector_at_infinity__into__point_at_infinity(multi_vector_at_infinity__geometric_anti_product__multi_vector_at_origin(multi_vector_at_origin__geometric_anti_product__point_at_infinity(self_, other), multi_vector_at_origin__anti_reversal(self_)));
}

fn multi_vector_at_origin__sandwich__rotor(self_: MultiVectorAtOrigin, other: Rotor) -> Rotor {
    return multi_vector_at_origin__into__rotor(multi_vector_at_origin__geometric_anti_product__multi_vector_at_origin(multi_vector_at_origin__geometric_anti_product__rotor(self_, other), multi_vector_at_origin__anti_reversal(self_)));
}

fn multi_vector_at_origin__sandwich__transflector(self_: MultiVectorAtOrigin, other: Transflector) -> Transflector {
    return multi_vector__into__transflector(multi_vector__geometric_anti_product__multi_vector_at_origin(multi_vector_at_origin__geometric_anti_product__transflector(self_, other), multi_vector_at_origin__anti_reversal(self_)));
}

fn multi_vector_at_origin__sandwich__translator(self_: MultiVectorAtOrigin, other: Translator) -> Translator {
    return multi_vector__into__translator(multi_vector__geometric_anti_product__multi_vector_at_origin(multi_vector_at_origin__geometric_anti_product__translator(self_, other), multi_vector_at_origin__anti_reversal(self_)));
}

fn origin__sandwich__flector(self_: Origin, other: Flector) -> Flector {
    return multi_vector__into__flector(multi_vector__geometric_anti_product__origin(origin__geometric_anti_product__flector(self_, other), origin__anti_reversal(self_)));
}

fn origin__sandwich__flector_at_infinity(self_: Origin, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return multi_vector_at_infinity__into__flector_at_infinity(multi_vector_at_infinity__geometric_anti_product__origin(origin__geometric_anti_product__flector_at_infinity(self_, other), origin__anti_reversal(self_)));
}

fn origin__sandwich__horizon(self_: Origin, other: Horizon) -> Horizon {
    return scalar__geometric_anti_product__origin(origin__geometric_anti_product__horizon(self_, other), origin__anti_reversal(self_));
}

fn origin__sandwich__line(self_: Origin, other: Line) -> Line {
    return multi_vector__into__line(transflector__geometric_anti_product__origin(origin__geometric_anti_product__line(self_, other), origin__anti_reversal(self_)));
}

fn origin__sandwich__line_at_infinity(self_: Origin, other: LineAtInfinity) -> LineAtInfinity {
    return point_at_infinity__geometric_anti_product__origin(origin__geometric_anti_product__line_at_infinity(self_, other), origin__anti_reversal(self_));
}

fn origin__sandwich__line_at_origin(self_: Origin, other: LineAtOrigin) -> LineAtOrigin {
    return plane_at_origin__geometric_anti_product__origin(origin__geometric_anti_product__line_at_origin(self_, other), origin__anti_reversal(self_));
}

fn origin__sandwich__motor(self_: Origin, other: Motor) -> Motor {
    return multi_vector__into__motor(flector__geometric_anti_product__origin(origin__geometric_anti_product__motor(self_, other), origin__anti_reversal(self_)));
}

fn origin__sandwich__multi_vector(self_: Origin, other: MultiVector) -> MultiVector {
    return multi_vector__geometric_anti_product__origin(origin__geometric_anti_product__multi_vector(self_, other), origin__anti_reversal(self_));
}

fn origin__sandwich__multi_vector_at_infinity(self_: Origin, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__geometric_anti_product__origin(origin__geometric_anti_product__multi_vector_at_infinity(self_, other), origin__anti_reversal(self_));
}

fn origin__sandwich__multi_vector_at_origin(self_: Origin, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__geometric_anti_product__origin(origin__geometric_anti_product__multi_vector_at_origin(self_, other), origin__anti_reversal(self_));
}

fn origin__sandwich__origin(self_: Origin, other: Origin) -> Origin {
    return anti_scalar__geometric_anti_product__origin(origin__geometric_anti_product__origin(self_, other), origin__anti_reversal(self_));
}

fn origin__sandwich__plane(self_: Origin, other: Plane) -> Plane {
    return multi_vector__into__plane(multi_vector__geometric_anti_product__origin(origin__geometric_anti_product__plane(self_, other), origin__anti_reversal(self_)));
}

fn origin__sandwich__plane_at_origin(self_: Origin, other: PlaneAtOrigin) -> PlaneAtOrigin {
    return line_at_origin__geometric_anti_product__origin(origin__geometric_anti_product__plane_at_origin(self_, other), origin__anti_reversal(self_));
}

fn origin__sandwich__point(self_: Origin, other: Point) -> Point {
    return translator__geometric_anti_product__origin(origin__geometric_anti_product__point(self_, other), origin__anti_reversal(self_));
}

fn origin__sandwich__point_at_infinity(self_: Origin, other: PointAtInfinity) -> PointAtInfinity {
    return line_at_infinity__geometric_anti_product__origin(origin__geometric_anti_product__point_at_infinity(self_, other), origin__anti_reversal(self_));
}

fn origin__sandwich__rotor(self_: Origin, other: Rotor) -> Rotor {
    return multi_vector__into__rotor(flector__geometric_anti_product__origin(origin__geometric_anti_product__rotor(self_, other), origin__anti_reversal(self_)));
}

fn origin__sandwich__transflector(self_: Origin, other: Transflector) -> Transflector {
    return multi_vector__into__transflector(multi_vector__geometric_anti_product__origin(origin__geometric_anti_product__transflector(self_, other), origin__anti_reversal(self_)));
}

fn origin__sandwich__translator(self_: Origin, other: Translator) -> Translator {
    return point__geometric_anti_product__origin(origin__geometric_anti_product__translator(self_, other), origin__anti_reversal(self_));
}

fn plane__sandwich__flector(self_: Plane, other: Flector) -> Flector {
    return multi_vector__into__flector(multi_vector__geometric_anti_product__plane(plane__geometric_anti_product__flector(self_, other), plane__anti_reversal(self_)));
}

fn plane__sandwich__flector_at_infinity(self_: Plane, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return multi_vector_at_infinity__into__flector_at_infinity(multi_vector_at_infinity__geometric_anti_product__plane(plane__geometric_anti_product__flector_at_infinity(self_, other), plane__anti_reversal(self_)));
}

fn plane__sandwich__horizon(self_: Plane, other: Horizon) -> Horizon {
    return flector_at_infinity__into__horizon(line_at_infinity__geometric_anti_product__plane(plane__geometric_anti_product__horizon(self_, other), plane__anti_reversal(self_)));
}

fn plane__sandwich__line(self_: Plane, other: Line) -> Line {
    return multi_vector__into__line(flector__geometric_anti_product__plane(plane__geometric_anti_product__line(self_, other), plane__anti_reversal(self_)));
}

fn plane__sandwich__line_at_infinity(self_: Plane, other: LineAtInfinity) -> LineAtInfinity {
    return multi_vector_at_infinity__into__line_at_infinity(flector_at_infinity__geometric_anti_product__plane(plane__geometric_anti_product__line_at_infinity(self_, other), plane__anti_reversal(self_)));
}

fn plane__sandwich__line_at_origin(self_: Plane, other: LineAtOrigin) -> LineAtOrigin {
    return multi_vector__into__line_at_origin(flector__geometric_anti_product__plane(plane__geometric_anti_product__line_at_origin(self_, other), plane__anti_reversal(self_)));
}

fn plane__sandwich__motor(self_: Plane, other: Motor) -> Motor {
    return multi_vector__into__motor(flector__geometric_anti_product__plane(plane__geometric_anti_product__motor(self_, other), plane__anti_reversal(self_)));
}

fn plane__sandwich__multi_vector(self_: Plane, other: MultiVector) -> MultiVector {
    return multi_vector__geometric_anti_product__plane(plane__geometric_anti_product__multi_vector(self_, other), plane__anti_reversal(self_));
}

fn plane__sandwich__multi_vector_at_infinity(self_: Plane, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__geometric_anti_product__plane(plane__geometric_anti_product__multi_vector_at_infinity(self_, other), plane__anti_reversal(self_));
}

fn plane__sandwich__multi_vector_at_origin(self_: Plane, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return multi_vector__into__multi_vector_at_origin(multi_vector__geometric_anti_product__plane(plane__geometric_anti_product__multi_vector_at_origin(self_, other), plane__anti_reversal(self_)));
}

fn plane__sandwich__origin(self_: Plane, other: Origin) -> Origin {
    return multi_vector__into__origin(multi_vector__geometric_anti_product__plane(plane__geometric_anti_product__origin(self_, other), plane__anti_reversal(self_)));
}

fn plane__sandwich__plane(self_: Plane, other: Plane) -> Plane {
    return flector__into__plane(motor__geometric_anti_product__plane(plane__geometric_anti_product__plane(self_, other), plane__anti_reversal(self_)));
}

fn plane__sandwich__plane_at_origin(self_: Plane, other: PlaneAtOrigin) -> PlaneAtOrigin {
    return flector__into__plane_at_origin(motor__geometric_anti_product__plane(plane__geometric_anti_product__plane_at_origin(self_, other), plane__anti_reversal(self_)));
}

fn plane__sandwich__point(self_: Plane, other: Point) -> Point {
    return multi_vector__into__point(multi_vector__geometric_anti_product__plane(plane__geometric_anti_product__point(self_, other), plane__anti_reversal(self_)));
}

fn plane__sandwich__point_at_infinity(self_: Plane, other: PointAtInfinity) -> PointAtInfinity {
    return multi_vector_at_infinity__into__point_at_infinity(multi_vector_at_infinity__geometric_anti_product__plane(plane__geometric_anti_product__point_at_infinity(self_, other), plane__anti_reversal(self_)));
}

fn plane__sandwich__rotor(self_: Plane, other: Rotor) -> Rotor {
    return multi_vector__into__rotor(flector__geometric_anti_product__plane(plane__geometric_anti_product__rotor(self_, other), plane__anti_reversal(self_)));
}

fn plane__sandwich__transflector(self_: Plane, other: Transflector) -> Transflector {
    return multi_vector__into__transflector(multi_vector__geometric_anti_product__plane(plane__geometric_anti_product__transflector(self_, other), plane__anti_reversal(self_)));
}

fn plane__sandwich__translator(self_: Plane, other: Translator) -> Translator {
    return multi_vector__into__translator(transflector__geometric_anti_product__plane(plane__geometric_anti_product__translator(self_, other), plane__anti_reversal(self_)));
}

fn plane_at_origin__sandwich__flector(self_: PlaneAtOrigin, other: Flector) -> Flector {
    return multi_vector__into__flector(multi_vector__geometric_anti_product__plane_at_origin(plane_at_origin__geometric_anti_product__flector(self_, other), plane_at_origin__anti_reversal(self_)));
}

fn plane_at_origin__sandwich__flector_at_infinity(self_: PlaneAtOrigin, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return multi_vector_at_infinity__into__flector_at_infinity(multi_vector_at_infinity__geometric_anti_product__plane_at_origin(plane_at_origin__geometric_anti_product__flector_at_infinity(self_, other), plane_at_origin__anti_reversal(self_)));
}

fn plane_at_origin__sandwich__horizon(self_: PlaneAtOrigin, other: Horizon) -> Horizon {
    return flector_at_infinity__into__horizon(line_at_infinity__geometric_anti_product__plane_at_origin(plane_at_origin__geometric_anti_product__horizon(self_, other), plane_at_origin__anti_reversal(self_)));
}

fn plane_at_origin__sandwich__line(self_: PlaneAtOrigin, other: Line) -> Line {
    return multi_vector__into__line(flector__geometric_anti_product__plane_at_origin(plane_at_origin__geometric_anti_product__line(self_, other), plane_at_origin__anti_reversal(self_)));
}

fn plane_at_origin__sandwich__line_at_infinity(self_: PlaneAtOrigin, other: LineAtInfinity) -> LineAtInfinity {
    return multi_vector_at_infinity__into__line_at_infinity(flector_at_infinity__geometric_anti_product__plane_at_origin(plane_at_origin__geometric_anti_product__line_at_infinity(self_, other), plane_at_origin__anti_reversal(self_)));
}

fn plane_at_origin__sandwich__line_at_origin(self_: PlaneAtOrigin, other: LineAtOrigin) -> LineAtOrigin {
    return multi_vector__into__line_at_origin(flector__geometric_anti_product__plane_at_origin(plane_at_origin__geometric_anti_product__line_at_origin(self_, other), plane_at_origin__anti_reversal(self_)));
}

fn plane_at_origin__sandwich__motor(self_: PlaneAtOrigin, other: Motor) -> Motor {
    return multi_vector__into__motor(flector__geometric_anti_product__plane_at_origin(plane_at_origin__geometric_anti_product__motor(self_, other), plane_at_origin__anti_reversal(self_)));
}

fn plane_at_origin__sandwich__multi_vector(self_: PlaneAtOrigin, other: MultiVector) -> MultiVector {
    return multi_vector__geometric_anti_product__plane_at_origin(plane_at_origin__geometric_anti_product__multi_vector(self_, other), plane_at_origin__anti_reversal(self_));
}

fn plane_at_origin__sandwich__multi_vector_at_infinity(self_: PlaneAtOrigin, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__geometric_anti_product__plane_at_origin(plane_at_origin__geometric_anti_product__multi_vector_at_infinity(self_, other), plane_at_origin__anti_reversal(self_));
}

fn plane_at_origin__sandwich__multi_vector_at_origin(self_: PlaneAtOrigin, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__geometric_anti_product__plane_at_origin(plane_at_origin__geometric_anti_product__multi_vector_at_origin(self_, other), plane_at_origin__anti_reversal(self_));
}

fn plane_at_origin__sandwich__origin(self_: PlaneAtOrigin, other: Origin) -> Origin {
    return flector__into__origin(line_at_origin__geometric_anti_product__plane_at_origin(plane_at_origin__geometric_anti_product__origin(self_, other), plane_at_origin__anti_reversal(self_)));
}

fn plane_at_origin__sandwich__plane(self_: PlaneAtOrigin, other: Plane) -> Plane {
    return flector__into__plane(motor__geometric_anti_product__plane_at_origin(plane_at_origin__geometric_anti_product__plane(self_, other), plane_at_origin__anti_reversal(self_)));
}

fn plane_at_origin__sandwich__plane_at_origin(self_: PlaneAtOrigin, other: PlaneAtOrigin) -> PlaneAtOrigin {
    return flector__into__plane_at_origin(rotor__geometric_anti_product__plane_at_origin(plane_at_origin__geometric_anti_product__plane_at_origin(self_, other), plane_at_origin__anti_reversal(self_)));
}

fn plane_at_origin__sandwich__point(self_: PlaneAtOrigin, other: Point) -> Point {
    return multi_vector__into__point(multi_vector__geometric_anti_product__plane_at_origin(plane_at_origin__geometric_anti_product__point(self_, other), plane_at_origin__anti_reversal(self_)));
}

fn plane_at_origin__sandwich__point_at_infinity(self_: PlaneAtOrigin, other: PointAtInfinity) -> PointAtInfinity {
    return multi_vector_at_infinity__into__point_at_infinity(multi_vector_at_infinity__geometric_anti_product__plane_at_origin(plane_at_origin__geometric_anti_product__point_at_infinity(self_, other), plane_at_origin__anti_reversal(self_)));
}

fn plane_at_origin__sandwich__rotor(self_: PlaneAtOrigin, other: Rotor) -> Rotor {
    return multi_vector__into__rotor(flector__geometric_anti_product__plane_at_origin(plane_at_origin__geometric_anti_product__rotor(self_, other), plane_at_origin__anti_reversal(self_)));
}

fn plane_at_origin__sandwich__transflector(self_: PlaneAtOrigin, other: Transflector) -> Transflector {
    return multi_vector__into__transflector(multi_vector__geometric_anti_product__plane_at_origin(plane_at_origin__geometric_anti_product__transflector(self_, other), plane_at_origin__anti_reversal(self_)));
}

fn plane_at_origin__sandwich__translator(self_: PlaneAtOrigin, other: Translator) -> Translator {
    return multi_vector__into__translator(transflector__geometric_anti_product__plane_at_origin(plane_at_origin__geometric_anti_product__translator(self_, other), plane_at_origin__anti_reversal(self_)));
}

fn point__sandwich__flector(self_: Point, other: Flector) -> Flector {
    return multi_vector__into__flector(multi_vector__geometric_anti_product__point(point__geometric_anti_product__flector(self_, other), point__anti_reversal(self_)));
}

fn point__sandwich__flector_at_infinity(self_: Point, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return multi_vector_at_infinity__into__flector_at_infinity(multi_vector_at_infinity__geometric_anti_product__point(point__geometric_anti_product__flector_at_infinity(self_, other), point__anti_reversal(self_)));
}

fn point__sandwich__horizon(self_: Point, other: Horizon) -> Horizon {
    return scalar__geometric_anti_product__point(point__geometric_anti_product__horizon(self_, other), point__anti_reversal(self_));
}

fn point__sandwich__line(self_: Point, other: Line) -> Line {
    return multi_vector__into__line(transflector__geometric_anti_product__point(point__geometric_anti_product__line(self_, other), point__anti_reversal(self_)));
}

fn point__sandwich__line_at_infinity(self_: Point, other: LineAtInfinity) -> LineAtInfinity {
    return point_at_infinity__geometric_anti_product__point(point__geometric_anti_product__line_at_infinity(self_, other), point__anti_reversal(self_));
}

fn point__sandwich__line_at_origin(self_: Point, other: LineAtOrigin) -> LineAtOrigin {
    return multi_vector__into__line_at_origin(transflector__geometric_anti_product__point(point__geometric_anti_product__line_at_origin(self_, other), point__anti_reversal(self_)));
}

fn point__sandwich__motor(self_: Point, other: Motor) -> Motor {
    return multi_vector__into__motor(flector__geometric_anti_product__point(point__geometric_anti_product__motor(self_, other), point__anti_reversal(self_)));
}

fn point__sandwich__multi_vector(self_: Point, other: MultiVector) -> MultiVector {
    return multi_vector__geometric_anti_product__point(point__geometric_anti_product__multi_vector(self_, other), point__anti_reversal(self_));
}

fn point__sandwich__multi_vector_at_infinity(self_: Point, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__geometric_anti_product__point(point__geometric_anti_product__multi_vector_at_infinity(self_, other), point__anti_reversal(self_));
}

fn point__sandwich__multi_vector_at_origin(self_: Point, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return multi_vector__into__multi_vector_at_origin(multi_vector__geometric_anti_product__point(point__geometric_anti_product__multi_vector_at_origin(self_, other), point__anti_reversal(self_)));
}

fn point__sandwich__origin(self_: Point, other: Origin) -> Origin {
    return point__into__origin(translator__geometric_anti_product__point(point__geometric_anti_product__origin(self_, other), point__anti_reversal(self_)));
}

fn point__sandwich__plane(self_: Point, other: Plane) -> Plane {
    return multi_vector__into__plane(multi_vector__geometric_anti_product__point(point__geometric_anti_product__plane(self_, other), point__anti_reversal(self_)));
}

fn point__sandwich__plane_at_origin(self_: Point, other: PlaneAtOrigin) -> PlaneAtOrigin {
    return multi_vector__into__plane_at_origin(multi_vector__geometric_anti_product__point(point__geometric_anti_product__plane_at_origin(self_, other), point__anti_reversal(self_)));
}

fn point__sandwich__point(self_: Point, other: Point) -> Point {
    return translator__geometric_anti_product__point(point__geometric_anti_product__point(self_, other), point__anti_reversal(self_));
}

fn point__sandwich__point_at_infinity(self_: Point, other: PointAtInfinity) -> PointAtInfinity {
    return line_at_infinity__geometric_anti_product__point(point__geometric_anti_product__point_at_infinity(self_, other), point__anti_reversal(self_));
}

fn point__sandwich__rotor(self_: Point, other: Rotor) -> Rotor {
    return multi_vector__into__rotor(flector__geometric_anti_product__point(point__geometric_anti_product__rotor(self_, other), point__anti_reversal(self_)));
}

fn point__sandwich__transflector(self_: Point, other: Transflector) -> Transflector {
    return multi_vector__into__transflector(multi_vector__geometric_anti_product__point(point__geometric_anti_product__transflector(self_, other), point__anti_reversal(self_)));
}

fn point__sandwich__translator(self_: Point, other: Translator) -> Translator {
    return point__geometric_anti_product__point(point__geometric_anti_product__translator(self_, other), point__anti_reversal(self_));
}

fn rotor__sandwich__flector(self_: Rotor, other: Flector) -> Flector {
    return flector__geometric_anti_product__rotor(rotor__geometric_anti_product__flector(self_, other), rotor__anti_reversal(self_));
}

fn rotor__sandwich__flector_at_infinity(self_: Rotor, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return flector_at_infinity__geometric_anti_product__rotor(rotor__geometric_anti_product__flector_at_infinity(self_, other), rotor__anti_reversal(self_));
}

fn rotor__sandwich__horizon(self_: Rotor, other: Horizon) -> Horizon {
    return flector_at_infinity__into__horizon(flector_at_infinity__geometric_anti_product__rotor(rotor__geometric_anti_product__horizon(self_, other), rotor__anti_reversal(self_)));
}

fn rotor__sandwich__line(self_: Rotor, other: Line) -> Line {
    return multi_vector__into__line(multi_vector__geometric_anti_product__rotor(rotor__geometric_anti_product__line(self_, other), rotor__anti_reversal(self_)));
}

fn rotor__sandwich__line_at_infinity(self_: Rotor, other: LineAtInfinity) -> LineAtInfinity {
    return multi_vector_at_infinity__into__line_at_infinity(multi_vector_at_infinity__geometric_anti_product__rotor(rotor__geometric_anti_product__line_at_infinity(self_, other), rotor__anti_reversal(self_)));
}

fn rotor__sandwich__line_at_origin(self_: Rotor, other: LineAtOrigin) -> LineAtOrigin {
    return rotor__into__line_at_origin(rotor__geometric_anti_product__rotor(rotor__geometric_anti_product__line_at_origin(self_, other), rotor__anti_reversal(self_)));
}

fn rotor__sandwich__motor(self_: Rotor, other: Motor) -> Motor {
    return multi_vector__into__motor(multi_vector__geometric_anti_product__rotor(rotor__geometric_anti_product__motor(self_, other), rotor__anti_reversal(self_)));
}

fn rotor__sandwich__multi_vector(self_: Rotor, other: MultiVector) -> MultiVector {
    return multi_vector__geometric_anti_product__rotor(rotor__geometric_anti_product__multi_vector(self_, other), rotor__anti_reversal(self_));
}

fn rotor__sandwich__multi_vector_at_infinity(self_: Rotor, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__geometric_anti_product__rotor(rotor__geometric_anti_product__multi_vector_at_infinity(self_, other), rotor__anti_reversal(self_));
}

fn rotor__sandwich__multi_vector_at_origin(self_: Rotor, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__geometric_anti_product__rotor(rotor__geometric_anti_product__multi_vector_at_origin(self_, other), rotor__anti_reversal(self_));
}

fn rotor__sandwich__origin(self_: Rotor, other: Origin) -> Origin {
    return flector__into__origin(flector__geometric_anti_product__rotor(rotor__geometric_anti_product__origin(self_, other), rotor__anti_reversal(self_)));
}

fn rotor__sandwich__plane(self_: Rotor, other: Plane) -> Plane {
    return flector__into__plane(flector__geometric_anti_product__rotor(rotor__geometric_anti_product__plane(self_, other), rotor__anti_reversal(self_)));
}

fn rotor__sandwich__plane_at_origin(self_: Rotor, other: PlaneAtOrigin) -> PlaneAtOrigin {
    return flector__into__plane_at_origin(flector__geometric_anti_product__rotor(rotor__geometric_anti_product__plane_at_origin(self_, other), rotor__anti_reversal(self_)));
}

fn rotor__sandwich__point(self_: Rotor, other: Point) -> Point {
    return flector__into__point(flector__geometric_anti_product__rotor(rotor__geometric_anti_product__point(self_, other), rotor__anti_reversal(self_)));
}

fn rotor__sandwich__point_at_infinity(self_: Rotor, other: PointAtInfinity) -> PointAtInfinity {
    return flector_at_infinity__into__point_at_infinity(flector_at_infinity__geometric_anti_product__rotor(rotor__geometric_anti_product__point_at_infinity(self_, other), rotor__anti_reversal(self_)));
}

fn rotor__sandwich__rotor(self_: Rotor, other: Rotor) -> Rotor {
    return rotor__geometric_anti_product__rotor(rotor__geometric_anti_product__rotor(self_, other), rotor__anti_reversal(self_));
}

fn rotor__sandwich__transflector(self_: Rotor, other: Transflector) -> Transflector {
    return flector__into__transflector(flector__geometric_anti_product__rotor(rotor__geometric_anti_product__transflector(self_, other), rotor__anti_reversal(self_)));
}

fn rotor__sandwich__translator(self_: Rotor, other: Translator) -> Translator {
    return multi_vector__into__translator(multi_vector__geometric_anti_product__rotor(rotor__geometric_anti_product__translator(self_, other), rotor__anti_reversal(self_)));
}

fn transflector__sandwich__flector(self_: Transflector, other: Flector) -> Flector {
    return multi_vector__into__flector(multi_vector__geometric_anti_product__transflector(transflector__geometric_anti_product__flector(self_, other), transflector__anti_reversal(self_)));
}

fn transflector__sandwich__flector_at_infinity(self_: Transflector, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return multi_vector_at_infinity__into__flector_at_infinity(multi_vector_at_infinity__geometric_anti_product__transflector(transflector__geometric_anti_product__flector_at_infinity(self_, other), transflector__anti_reversal(self_)));
}

fn transflector__sandwich__horizon(self_: Transflector, other: Horizon) -> Horizon {
    return flector_at_infinity__into__horizon(line_at_infinity__geometric_anti_product__transflector(transflector__geometric_anti_product__horizon(self_, other), transflector__anti_reversal(self_)));
}

fn transflector__sandwich__line(self_: Transflector, other: Line) -> Line {
    return multi_vector__into__line(flector__geometric_anti_product__transflector(transflector__geometric_anti_product__line(self_, other), transflector__anti_reversal(self_)));
}

fn transflector__sandwich__line_at_infinity(self_: Transflector, other: LineAtInfinity) -> LineAtInfinity {
    return multi_vector_at_infinity__into__line_at_infinity(flector_at_infinity__geometric_anti_product__transflector(transflector__geometric_anti_product__line_at_infinity(self_, other), transflector__anti_reversal(self_)));
}

fn transflector__sandwich__line_at_origin(self_: Transflector, other: LineAtOrigin) -> LineAtOrigin {
    return multi_vector__into__line_at_origin(flector__geometric_anti_product__transflector(transflector__geometric_anti_product__line_at_origin(self_, other), transflector__anti_reversal(self_)));
}

fn transflector__sandwich__motor(self_: Transflector, other: Motor) -> Motor {
    return multi_vector__into__motor(flector__geometric_anti_product__transflector(transflector__geometric_anti_product__motor(self_, other), transflector__anti_reversal(self_)));
}

fn transflector__sandwich__multi_vector(self_: Transflector, other: MultiVector) -> MultiVector {
    return multi_vector__geometric_anti_product__transflector(transflector__geometric_anti_product__multi_vector(self_, other), transflector__anti_reversal(self_));
}

fn transflector__sandwich__multi_vector_at_infinity(self_: Transflector, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__geometric_anti_product__transflector(transflector__geometric_anti_product__multi_vector_at_infinity(self_, other), transflector__anti_reversal(self_));
}

fn transflector__sandwich__multi_vector_at_origin(self_: Transflector, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return multi_vector__into__multi_vector_at_origin(multi_vector__geometric_anti_product__transflector(transflector__geometric_anti_product__multi_vector_at_origin(self_, other), transflector__anti_reversal(self_)));
}

fn transflector__sandwich__origin(self_: Transflector, other: Origin) -> Origin {
    return multi_vector__into__origin(multi_vector__geometric_anti_product__transflector(transflector__geometric_anti_product__origin(self_, other), transflector__anti_reversal(self_)));
}

fn transflector__sandwich__plane(self_: Transflector, other: Plane) -> Plane {
    return multi_vector__into__plane(multi_vector__geometric_anti_product__transflector(transflector__geometric_anti_product__plane(self_, other), transflector__anti_reversal(self_)));
}

fn transflector__sandwich__plane_at_origin(self_: Transflector, other: PlaneAtOrigin) -> PlaneAtOrigin {
    return multi_vector__into__plane_at_origin(multi_vector__geometric_anti_product__transflector(transflector__geometric_anti_product__plane_at_origin(self_, other), transflector__anti_reversal(self_)));
}

fn transflector__sandwich__point(self_: Transflector, other: Point) -> Point {
    return multi_vector__into__point(multi_vector__geometric_anti_product__transflector(transflector__geometric_anti_product__point(self_, other), transflector__anti_reversal(self_)));
}

fn transflector__sandwich__point_at_infinity(self_: Transflector, other: PointAtInfinity) -> PointAtInfinity {
    return multi_vector_at_infinity__into__point_at_infinity(multi_vector_at_infinity__geometric_anti_product__transflector(transflector__geometric_anti_product__point_at_infinity(self_, other), transflector__anti_reversal(self_)));
}

fn transflector__sandwich__rotor(self_: Transflector, other: Rotor) -> Rotor {
    return multi_vector__into__rotor(flector__geometric_anti_product__transflector(transflector__geometric_anti_product__rotor(self_, other), transflector__anti_reversal(self_)));
}

fn transflector__sandwich__transflector(self_: Transflector, other: Transflector) -> Transflector {
    return multi_vector__into__transflector(multi_vector__geometric_anti_product__transflector(transflector__geometric_anti_product__transflector(self_, other), transflector__anti_reversal(self_)));
}

fn transflector__sandwich__translator(self_: Transflector, other: Translator) -> Translator {
    return multi_vector__into__translator(transflector__geometric_anti_product__transflector(transflector__geometric_anti_product__translator(self_, other), transflector__anti_reversal(self_)));
}

fn translator__sandwich__flector(self_: Translator, other: Flector) -> Flector {
    return flector__geometric_anti_product__translator(translator__geometric_anti_product__flector(self_, other), translator__anti_reversal(self_));
}

fn translator__sandwich__flector_at_infinity(self_: Translator, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return flector_at_infinity__geometric_anti_product__translator(translator__geometric_anti_product__flector_at_infinity(self_, other), translator__anti_reversal(self_));
}

fn translator__sandwich__horizon(self_: Translator, other: Horizon) -> Horizon {
    return horizon__geometric_anti_product__translator(translator__geometric_anti_product__horizon(self_, other), translator__anti_reversal(self_));
}

fn translator__sandwich__line(self_: Translator, other: Line) -> Line {
    return multi_vector__into__line(multi_vector__geometric_anti_product__translator(translator__geometric_anti_product__line(self_, other), translator__anti_reversal(self_)));
}

fn translator__sandwich__line_at_infinity(self_: Translator, other: LineAtInfinity) -> LineAtInfinity {
    return line_at_infinity__geometric_anti_product__translator(translator__geometric_anti_product__line_at_infinity(self_, other), translator__anti_reversal(self_));
}

fn translator__sandwich__line_at_origin(self_: Translator, other: LineAtOrigin) -> Line {
    return multi_vector__into__line(multi_vector__geometric_anti_product__translator(translator__geometric_anti_product__line_at_origin(self_, other), translator__anti_reversal(self_)));
}

fn translator__sandwich__motor(self_: Translator, other: Motor) -> Motor {
    return multi_vector__into__motor(multi_vector__geometric_anti_product__translator(translator__geometric_anti_product__motor(self_, other), translator__anti_reversal(self_)));
}

fn translator__sandwich__multi_vector(self_: Translator, other: MultiVector) -> MultiVector {
    return multi_vector__geometric_anti_product__translator(translator__geometric_anti_product__multi_vector(self_, other), translator__anti_reversal(self_));
}

fn translator__sandwich__multi_vector_at_infinity(self_: Translator, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__geometric_anti_product__translator(translator__geometric_anti_product__multi_vector_at_infinity(self_, other), translator__anti_reversal(self_));
}

fn translator__sandwich__multi_vector_at_origin(self_: Translator, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return multi_vector__into__multi_vector_at_origin(multi_vector__geometric_anti_product__translator(translator__geometric_anti_product__multi_vector_at_origin(self_, other), translator__anti_reversal(self_)));
}

fn translator__sandwich__origin(self_: Translator, other: Origin) -> Point {
    return point__geometric_anti_product__translator(translator__geometric_anti_product__origin(self_, other), translator__anti_reversal(self_));
}

fn translator__sandwich__plane(self_: Translator, other: Plane) -> Plane {
    return transflector__into__plane(transflector__geometric_anti_product__translator(translator__geometric_anti_product__plane(self_, other), translator__anti_reversal(self_)));
}

fn translator__sandwich__plane_at_origin(self_: Translator, other: PlaneAtOrigin) -> Plane {
    return transflector__into__plane(transflector__geometric_anti_product__translator(translator__geometric_anti_product__plane_at_origin(self_, other), translator__anti_reversal(self_)));
}

fn translator__sandwich__point(self_: Translator, other: Point) -> Point {
    return point__geometric_anti_product__translator(translator__geometric_anti_product__point(self_, other), translator__anti_reversal(self_));
}

fn translator__sandwich__point_at_infinity(self_: Translator, other: PointAtInfinity) -> PointAtInfinity {
    return point_at_infinity__geometric_anti_product__translator(translator__geometric_anti_product__point_at_infinity(self_, other), translator__anti_reversal(self_));
}

fn translator__sandwich__rotor(self_: Translator, other: Rotor) -> Motor {
    return multi_vector__into__motor(multi_vector__geometric_anti_product__translator(translator__geometric_anti_product__rotor(self_, other), translator__anti_reversal(self_)));
}

fn translator__sandwich__transflector(self_: Translator, other: Transflector) -> Transflector {
    return transflector__geometric_anti_product__translator(translator__geometric_anti_product__transflector(self_, other), translator__anti_reversal(self_));
}

fn translator__sandwich__translator(self_: Translator, other: Translator) -> Translator {
    return translator__geometric_anti_product__translator(translator__geometric_anti_product__translator(self_, other), translator__anti_reversal(self_));
}

fn point__point_inversion__flector(self_: Point, other: Flector) -> Flector {
    return point__sandwich__flector(point__unitize(self_), other);
}

fn point__point_inversion__flector_at_infinity(self_: Point, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return point__sandwich__flector_at_infinity(point__unitize(self_), other);
}

fn point__point_inversion__horizon(self_: Point, other: Horizon) -> Horizon {
    return point__sandwich__horizon(point__unitize(self_), other);
}

fn point__point_inversion__line(self_: Point, other: Line) -> Line {
    return point__sandwich__line(point__unitize(self_), other);
}

fn point__point_inversion__line_at_infinity(self_: Point, other: LineAtInfinity) -> LineAtInfinity {
    return point__sandwich__line_at_infinity(point__unitize(self_), other);
}

fn point__point_inversion__line_at_origin(self_: Point, other: LineAtOrigin) -> LineAtOrigin {
    return point__sandwich__line_at_origin(point__unitize(self_), other);
}

fn point__point_inversion__motor(self_: Point, other: Motor) -> Motor {
    return point__sandwich__motor(point__unitize(self_), other);
}

fn point__point_inversion__multi_vector(self_: Point, other: MultiVector) -> MultiVector {
    return point__sandwich__multi_vector(point__unitize(self_), other);
}

fn point__point_inversion__multi_vector_at_infinity(self_: Point, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return point__sandwich__multi_vector_at_infinity(point__unitize(self_), other);
}

fn point__point_inversion__multi_vector_at_origin(self_: Point, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return point__sandwich__multi_vector_at_origin(point__unitize(self_), other);
}

fn point__point_inversion__origin(self_: Point, other: Origin) -> Origin {
    return point__sandwich__origin(point__unitize(self_), other);
}

fn point__point_inversion__plane(self_: Point, other: Plane) -> Plane {
    return point__sandwich__plane(point__unitize(self_), other);
}

fn point__point_inversion__plane_at_origin(self_: Point, other: PlaneAtOrigin) -> PlaneAtOrigin {
    return point__sandwich__plane_at_origin(point__unitize(self_), other);
}

fn point__point_inversion__point(self_: Point, other: Point) -> Point {
    return point__sandwich__point(point__unitize(self_), other);
}

fn point__point_inversion__point_at_infinity(self_: Point, other: PointAtInfinity) -> PointAtInfinity {
    return point__sandwich__point_at_infinity(point__unitize(self_), other);
}

fn point__point_inversion__rotor(self_: Point, other: Rotor) -> Rotor {
    return point__sandwich__rotor(point__unitize(self_), other);
}

fn point__point_inversion__transflector(self_: Point, other: Transflector) -> Transflector {
    return point__sandwich__transflector(point__unitize(self_), other);
}

fn point__point_inversion__translator(self_: Point, other: Translator) -> Translator {
    return point__sandwich__translator(point__unitize(self_), other);
}

fn plane__reflect__flector(self_: Plane, other: Flector) -> Flector {
    return plane__sandwich__flector(plane__unitize(self_), other);
}

fn plane__reflect__flector_at_infinity(self_: Plane, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return plane__sandwich__flector_at_infinity(plane__unitize(self_), other);
}

fn plane__reflect__horizon(self_: Plane, other: Horizon) -> Horizon {
    return plane__sandwich__horizon(plane__unitize(self_), other);
}

fn plane__reflect__line(self_: Plane, other: Line) -> Line {
    return plane__sandwich__line(plane__unitize(self_), other);
}

fn plane__reflect__line_at_infinity(self_: Plane, other: LineAtInfinity) -> LineAtInfinity {
    return plane__sandwich__line_at_infinity(plane__unitize(self_), other);
}

fn plane__reflect__line_at_origin(self_: Plane, other: LineAtOrigin) -> LineAtOrigin {
    return plane__sandwich__line_at_origin(plane__unitize(self_), other);
}

fn plane__reflect__motor(self_: Plane, other: Motor) -> Motor {
    return plane__sandwich__motor(plane__unitize(self_), other);
}

fn plane__reflect__multi_vector(self_: Plane, other: MultiVector) -> MultiVector {
    return plane__sandwich__multi_vector(plane__unitize(self_), other);
}

fn plane__reflect__multi_vector_at_infinity(self_: Plane, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return plane__sandwich__multi_vector_at_infinity(plane__unitize(self_), other);
}

fn plane__reflect__multi_vector_at_origin(self_: Plane, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return plane__sandwich__multi_vector_at_origin(plane__unitize(self_), other);
}

fn plane__reflect__origin(self_: Plane, other: Origin) -> Origin {
    return plane__sandwich__origin(plane__unitize(self_), other);
}

fn plane__reflect__plane(self_: Plane, other: Plane) -> Plane {
    return plane__sandwich__plane(plane__unitize(self_), other);
}

fn plane__reflect__plane_at_origin(self_: Plane, other: PlaneAtOrigin) -> PlaneAtOrigin {
    return plane__sandwich__plane_at_origin(plane__unitize(self_), other);
}

fn plane__reflect__point(self_: Plane, other: Point) -> Point {
    return plane__sandwich__point(plane__unitize(self_), other);
}

fn plane__reflect__point_at_infinity(self_: Plane, other: PointAtInfinity) -> PointAtInfinity {
    return plane__sandwich__point_at_infinity(plane__unitize(self_), other);
}

fn plane__reflect__rotor(self_: Plane, other: Rotor) -> Rotor {
    return plane__sandwich__rotor(plane__unitize(self_), other);
}

fn plane__reflect__transflector(self_: Plane, other: Transflector) -> Transflector {
    return plane__sandwich__transflector(plane__unitize(self_), other);
}

fn plane__reflect__translator(self_: Plane, other: Translator) -> Translator {
    return plane__sandwich__translator(plane__unitize(self_), other);
}

fn rotor__rotate__flector(self_: Rotor, other: Flector) -> Flector {
    return rotor__sandwich__flector(self_, other);
}

fn rotor__rotate__flector_at_infinity(self_: Rotor, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return rotor__sandwich__flector_at_infinity(self_, other);
}

fn rotor__rotate__horizon(self_: Rotor, other: Horizon) -> Horizon {
    return rotor__sandwich__horizon(self_, other);
}

fn rotor__rotate__line(self_: Rotor, other: Line) -> Line {
    return rotor__sandwich__line(self_, other);
}

fn rotor__rotate__line_at_infinity(self_: Rotor, other: LineAtInfinity) -> LineAtInfinity {
    return rotor__sandwich__line_at_infinity(self_, other);
}

fn rotor__rotate__line_at_origin(self_: Rotor, other: LineAtOrigin) -> LineAtOrigin {
    return rotor__sandwich__line_at_origin(self_, other);
}

fn rotor__rotate__motor(self_: Rotor, other: Motor) -> Motor {
    return rotor__sandwich__motor(self_, other);
}

fn rotor__rotate__multi_vector(self_: Rotor, other: MultiVector) -> MultiVector {
    return rotor__sandwich__multi_vector(self_, other);
}

fn rotor__rotate__multi_vector_at_infinity(self_: Rotor, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return rotor__sandwich__multi_vector_at_infinity(self_, other);
}

fn rotor__rotate__multi_vector_at_origin(self_: Rotor, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return rotor__sandwich__multi_vector_at_origin(self_, other);
}

fn rotor__rotate__origin(self_: Rotor, other: Origin) -> Origin {
    return rotor__sandwich__origin(self_, other);
}

fn rotor__rotate__plane(self_: Rotor, other: Plane) -> Plane {
    return rotor__sandwich__plane(self_, other);
}

fn rotor__rotate__plane_at_origin(self_: Rotor, other: PlaneAtOrigin) -> PlaneAtOrigin {
    return rotor__sandwich__plane_at_origin(self_, other);
}

fn rotor__rotate__point(self_: Rotor, other: Point) -> Point {
    return rotor__sandwich__point(self_, other);
}

fn rotor__rotate__point_at_infinity(self_: Rotor, other: PointAtInfinity) -> PointAtInfinity {
    return rotor__sandwich__point_at_infinity(self_, other);
}

fn rotor__rotate__rotor(self_: Rotor, other: Rotor) -> Rotor {
    return rotor__sandwich__rotor(self_, other);
}

fn rotor__rotate__transflector(self_: Rotor, other: Transflector) -> Transflector {
    return rotor__sandwich__transflector(self_, other);
}

fn rotor__rotate__translator(self_: Rotor, other: Translator) -> Translator {
    return rotor__sandwich__translator(self_, other);
}

fn transflector__transflect__flector(self_: Transflector, other: Flector) -> Flector {
    return transflector__sandwich__flector(self_, other);
}

fn transflector__transflect__flector_at_infinity(self_: Transflector, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return transflector__sandwich__flector_at_infinity(self_, other);
}

fn transflector__transflect__horizon(self_: Transflector, other: Horizon) -> Horizon {
    return transflector__sandwich__horizon(self_, other);
}

fn transflector__transflect__line(self_: Transflector, other: Line) -> Line {
    return transflector__sandwich__line(self_, other);
}

fn transflector__transflect__line_at_infinity(self_: Transflector, other: LineAtInfinity) -> LineAtInfinity {
    return transflector__sandwich__line_at_infinity(self_, other);
}

fn transflector__transflect__line_at_origin(self_: Transflector, other: LineAtOrigin) -> LineAtOrigin {
    return transflector__sandwich__line_at_origin(self_, other);
}

fn transflector__transflect__motor(self_: Transflector, other: Motor) -> Motor {
    return transflector__sandwich__motor(self_, other);
}

fn transflector__transflect__multi_vector(self_: Transflector, other: MultiVector) -> MultiVector {
    return transflector__sandwich__multi_vector(self_, other);
}

fn transflector__transflect__multi_vector_at_infinity(self_: Transflector, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return transflector__sandwich__multi_vector_at_infinity(self_, other);
}

fn transflector__transflect__multi_vector_at_origin(self_: Transflector, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return transflector__sandwich__multi_vector_at_origin(self_, other);
}

fn transflector__transflect__origin(self_: Transflector, other: Origin) -> Origin {
    return transflector__sandwich__origin(self_, other);
}

fn transflector__transflect__plane(self_: Transflector, other: Plane) -> Plane {
    return transflector__sandwich__plane(self_, other);
}

fn transflector__transflect__plane_at_origin(self_: Transflector, other: PlaneAtOrigin) -> PlaneAtOrigin {
    return transflector__sandwich__plane_at_origin(self_, other);
}

fn transflector__transflect__point(self_: Transflector, other: Point) -> Point {
    return transflector__sandwich__point(self_, other);
}

fn transflector__transflect__point_at_infinity(self_: Transflector, other: PointAtInfinity) -> PointAtInfinity {
    return transflector__sandwich__point_at_infinity(self_, other);
}

fn transflector__transflect__rotor(self_: Transflector, other: Rotor) -> Rotor {
    return transflector__sandwich__rotor(self_, other);
}

fn transflector__transflect__transflector(self_: Transflector, other: Transflector) -> Transflector {
    return transflector__sandwich__transflector(self_, other);
}

fn transflector__transflect__translator(self_: Transflector, other: Translator) -> Translator {
    return transflector__sandwich__translator(self_, other);
}

fn translator__translate__flector(self_: Translator, other: Flector) -> Flector {
    return translator__sandwich__flector(self_, other);
}

fn translator__translate__flector_at_infinity(self_: Translator, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return translator__sandwich__flector_at_infinity(self_, other);
}

fn translator__translate__horizon(self_: Translator, other: Horizon) -> Horizon {
    return translator__sandwich__horizon(self_, other);
}

fn translator__translate__line(self_: Translator, other: Line) -> Line {
    return translator__sandwich__line(self_, other);
}

fn translator__translate__line_at_infinity(self_: Translator, other: LineAtInfinity) -> LineAtInfinity {
    return translator__sandwich__line_at_infinity(self_, other);
}

fn translator__translate__line_at_origin(self_: Translator, other: LineAtOrigin) -> Line {
    return translator__sandwich__line_at_origin(self_, other);
}

fn translator__translate__motor(self_: Translator, other: Motor) -> Motor {
    return translator__sandwich__motor(self_, other);
}

fn translator__translate__multi_vector(self_: Translator, other: MultiVector) -> MultiVector {
    return translator__sandwich__multi_vector(self_, other);
}

fn translator__translate__multi_vector_at_infinity(self_: Translator, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return translator__sandwich__multi_vector_at_infinity(self_, other);
}

fn translator__translate__multi_vector_at_origin(self_: Translator, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return translator__sandwich__multi_vector_at_origin(self_, other);
}

fn translator__translate__origin(self_: Translator, other: Origin) -> Point {
    return translator__sandwich__origin(self_, other);
}

fn translator__translate__plane(self_: Translator, other: Plane) -> Plane {
    return translator__sandwich__plane(self_, other);
}

fn translator__translate__plane_at_origin(self_: Translator, other: PlaneAtOrigin) -> Plane {
    return translator__sandwich__plane_at_origin(self_, other);
}

fn translator__translate__point(self_: Translator, other: Point) -> Point {
    return translator__sandwich__point(self_, other);
}

fn translator__translate__point_at_infinity(self_: Translator, other: PointAtInfinity) -> PointAtInfinity {
    return translator__sandwich__point_at_infinity(self_, other);
}

fn translator__translate__rotor(self_: Translator, other: Rotor) -> Motor {
    return translator__sandwich__rotor(self_, other);
}

fn translator__translate__transflector(self_: Translator, other: Transflector) -> Transflector {
    return translator__sandwich__transflector(self_, other);
}

fn translator__translate__translator(self_: Translator, other: Translator) -> Translator {
    return translator__sandwich__translator(self_, other);
}

fn anti_scalar__geometric_anti_quotient__anti_scalar(self_: AntiScalar, other: AntiScalar) -> AntiScalar {
    return anti_scalar__geometric_anti_product__anti_scalar(self_, anti_scalar__anti_inverse(other));
}

fn anti_scalar__geometric_anti_quotient__flector(self_: AntiScalar, other: Flector) -> Flector {
    return anti_scalar__geometric_anti_product__flector(self_, flector__anti_inverse(other));
}

fn anti_scalar__geometric_anti_quotient__line(self_: AntiScalar, other: Line) -> Line {
    return anti_scalar__geometric_anti_product__line(self_, line__anti_inverse(other));
}

fn anti_scalar__geometric_anti_quotient__line_at_origin(self_: AntiScalar, other: LineAtOrigin) -> LineAtOrigin {
    return anti_scalar__geometric_anti_product__line_at_origin(self_, line_at_origin__anti_inverse(other));
}

fn anti_scalar__geometric_anti_quotient__magnitude(self_: AntiScalar, other: Magnitude) -> Magnitude {
    return anti_scalar__geometric_anti_product__magnitude(self_, magnitude__anti_inverse(other));
}

fn anti_scalar__geometric_anti_quotient__motor(self_: AntiScalar, other: Motor) -> Motor {
    return anti_scalar__geometric_anti_product__motor(self_, motor__anti_inverse(other));
}

fn anti_scalar__geometric_anti_quotient__multi_vector(self_: AntiScalar, other: MultiVector) -> MultiVector {
    return anti_scalar__geometric_anti_product__multi_vector(self_, multi_vector__anti_inverse(other));
}

fn anti_scalar__geometric_anti_quotient__multi_vector_at_origin(self_: AntiScalar, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return anti_scalar__geometric_anti_product__multi_vector_at_origin(self_, multi_vector_at_origin__anti_inverse(other));
}

fn anti_scalar__geometric_anti_quotient__origin(self_: AntiScalar, other: Origin) -> Origin {
    return anti_scalar__geometric_anti_product__origin(self_, origin__anti_inverse(other));
}

fn anti_scalar__geometric_anti_quotient__plane(self_: AntiScalar, other: Plane) -> Plane {
    return anti_scalar__geometric_anti_product__plane(self_, plane__anti_inverse(other));
}

fn anti_scalar__geometric_anti_quotient__plane_at_origin(self_: AntiScalar, other: PlaneAtOrigin) -> PlaneAtOrigin {
    return anti_scalar__geometric_anti_product__plane_at_origin(self_, plane_at_origin__anti_inverse(other));
}

fn anti_scalar__geometric_anti_quotient__point(self_: AntiScalar, other: Point) -> Point {
    return anti_scalar__geometric_anti_product__point(self_, point__anti_inverse(other));
}

fn anti_scalar__geometric_anti_quotient__rotor(self_: AntiScalar, other: Rotor) -> Rotor {
    return anti_scalar__geometric_anti_product__rotor(self_, rotor__anti_inverse(other));
}

fn anti_scalar__geometric_anti_quotient__transflector(self_: AntiScalar, other: Transflector) -> Transflector {
    return anti_scalar__geometric_anti_product__transflector(self_, transflector__anti_inverse(other));
}

fn anti_scalar__geometric_anti_quotient__translator(self_: AntiScalar, other: Translator) -> Translator {
    return anti_scalar__geometric_anti_product__translator(self_, translator__anti_inverse(other));
}

fn flector__geometric_anti_quotient__anti_scalar(self_: Flector, other: AntiScalar) -> Flector {
    return flector__geometric_anti_product__anti_scalar(self_, anti_scalar__anti_inverse(other));
}

fn flector__geometric_anti_quotient__flector(self_: Flector, other: Flector) -> MultiVector {
    return flector__geometric_anti_product__flector(self_, flector__anti_inverse(other));
}

fn flector__geometric_anti_quotient__line(self_: Flector, other: Line) -> Flector {
    return flector__geometric_anti_product__line(self_, line__anti_inverse(other));
}

fn flector__geometric_anti_quotient__line_at_origin(self_: Flector, other: LineAtOrigin) -> Flector {
    return flector__geometric_anti_product__line_at_origin(self_, line_at_origin__anti_inverse(other));
}

fn flector__geometric_anti_quotient__magnitude(self_: Flector, other: Magnitude) -> Flector {
    return flector__geometric_anti_product__magnitude(self_, magnitude__anti_inverse(other));
}

fn flector__geometric_anti_quotient__motor(self_: Flector, other: Motor) -> Flector {
    return flector__geometric_anti_product__motor(self_, motor__anti_inverse(other));
}

fn flector__geometric_anti_quotient__multi_vector(self_: Flector, other: MultiVector) -> MultiVector {
    return flector__geometric_anti_product__multi_vector(self_, multi_vector__anti_inverse(other));
}

fn flector__geometric_anti_quotient__multi_vector_at_origin(self_: Flector, other: MultiVectorAtOrigin) -> MultiVector {
    return flector__geometric_anti_product__multi_vector_at_origin(self_, multi_vector_at_origin__anti_inverse(other));
}

fn flector__geometric_anti_quotient__origin(self_: Flector, other: Origin) -> MultiVector {
    return flector__geometric_anti_product__origin(self_, origin__anti_inverse(other));
}

fn flector__geometric_anti_quotient__plane(self_: Flector, other: Plane) -> MultiVector {
    return flector__geometric_anti_product__plane(self_, plane__anti_inverse(other));
}

fn flector__geometric_anti_quotient__plane_at_origin(self_: Flector, other: PlaneAtOrigin) -> MultiVector {
    return flector__geometric_anti_product__plane_at_origin(self_, plane_at_origin__anti_inverse(other));
}

fn flector__geometric_anti_quotient__point(self_: Flector, other: Point) -> MultiVector {
    return flector__geometric_anti_product__point(self_, point__anti_inverse(other));
}

fn flector__geometric_anti_quotient__rotor(self_: Flector, other: Rotor) -> Flector {
    return flector__geometric_anti_product__rotor(self_, rotor__anti_inverse(other));
}

fn flector__geometric_anti_quotient__transflector(self_: Flector, other: Transflector) -> MultiVector {
    return flector__geometric_anti_product__transflector(self_, transflector__anti_inverse(other));
}

fn flector__geometric_anti_quotient__translator(self_: Flector, other: Translator) -> Flector {
    return flector__geometric_anti_product__translator(self_, translator__anti_inverse(other));
}

fn flector_at_infinity__geometric_anti_quotient__anti_scalar(self_: FlectorAtInfinity, other: AntiScalar) -> FlectorAtInfinity {
    return flector_at_infinity__geometric_anti_product__anti_scalar(self_, anti_scalar__anti_inverse(other));
}

fn flector_at_infinity__geometric_anti_quotient__flector(self_: FlectorAtInfinity, other: Flector) -> MultiVectorAtInfinity {
    return flector_at_infinity__geometric_anti_product__flector(self_, flector__anti_inverse(other));
}

fn flector_at_infinity__geometric_anti_quotient__line(self_: FlectorAtInfinity, other: Line) -> FlectorAtInfinity {
    return flector_at_infinity__geometric_anti_product__line(self_, line__anti_inverse(other));
}

fn flector_at_infinity__geometric_anti_quotient__line_at_origin(self_: FlectorAtInfinity, other: LineAtOrigin) -> FlectorAtInfinity {
    return flector_at_infinity__geometric_anti_product__line_at_origin(self_, line_at_origin__anti_inverse(other));
}

fn flector_at_infinity__geometric_anti_quotient__magnitude(self_: FlectorAtInfinity, other: Magnitude) -> FlectorAtInfinity {
    return flector_at_infinity__geometric_anti_product__magnitude(self_, magnitude__anti_inverse(other));
}

fn flector_at_infinity__geometric_anti_quotient__motor(self_: FlectorAtInfinity, other: Motor) -> FlectorAtInfinity {
    return flector_at_infinity__geometric_anti_product__motor(self_, motor__anti_inverse(other));
}

fn flector_at_infinity__geometric_anti_quotient__multi_vector(self_: FlectorAtInfinity, other: MultiVector) -> MultiVectorAtInfinity {
    return flector_at_infinity__geometric_anti_product__multi_vector(self_, multi_vector__anti_inverse(other));
}

fn flector_at_infinity__geometric_anti_quotient__multi_vector_at_origin(self_: FlectorAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return flector_at_infinity__geometric_anti_product__multi_vector_at_origin(self_, multi_vector_at_origin__anti_inverse(other));
}

fn flector_at_infinity__geometric_anti_quotient__origin(self_: FlectorAtInfinity, other: Origin) -> MultiVectorAtInfinity {
    return flector_at_infinity__geometric_anti_product__origin(self_, origin__anti_inverse(other));
}

fn flector_at_infinity__geometric_anti_quotient__plane(self_: FlectorAtInfinity, other: Plane) -> MultiVectorAtInfinity {
    return flector_at_infinity__geometric_anti_product__plane(self_, plane__anti_inverse(other));
}

fn flector_at_infinity__geometric_anti_quotient__plane_at_origin(self_: FlectorAtInfinity, other: PlaneAtOrigin) -> MultiVectorAtInfinity {
    return flector_at_infinity__geometric_anti_product__plane_at_origin(self_, plane_at_origin__anti_inverse(other));
}

fn flector_at_infinity__geometric_anti_quotient__point(self_: FlectorAtInfinity, other: Point) -> MultiVectorAtInfinity {
    return flector_at_infinity__geometric_anti_product__point(self_, point__anti_inverse(other));
}

fn flector_at_infinity__geometric_anti_quotient__rotor(self_: FlectorAtInfinity, other: Rotor) -> FlectorAtInfinity {
    return flector_at_infinity__geometric_anti_product__rotor(self_, rotor__anti_inverse(other));
}

fn flector_at_infinity__geometric_anti_quotient__transflector(self_: FlectorAtInfinity, other: Transflector) -> MultiVectorAtInfinity {
    return flector_at_infinity__geometric_anti_product__transflector(self_, transflector__anti_inverse(other));
}

fn flector_at_infinity__geometric_anti_quotient__translator(self_: FlectorAtInfinity, other: Translator) -> FlectorAtInfinity {
    return flector_at_infinity__geometric_anti_product__translator(self_, translator__anti_inverse(other));
}

fn horizon__geometric_anti_quotient__anti_scalar(self_: Horizon, other: AntiScalar) -> Horizon {
    return horizon__geometric_anti_product__anti_scalar(self_, anti_scalar__anti_inverse(other));
}

fn horizon__geometric_anti_quotient__flector(self_: Horizon, other: Flector) -> MultiVectorAtInfinity {
    return horizon__geometric_anti_product__flector(self_, flector__anti_inverse(other));
}

fn horizon__geometric_anti_quotient__line(self_: Horizon, other: Line) -> PointAtInfinity {
    return horizon__geometric_anti_product__line(self_, line__anti_inverse(other));
}

fn horizon__geometric_anti_quotient__line_at_origin(self_: Horizon, other: LineAtOrigin) -> PointAtInfinity {
    return horizon__geometric_anti_product__line_at_origin(self_, line_at_origin__anti_inverse(other));
}

fn horizon__geometric_anti_quotient__magnitude(self_: Horizon, other: Magnitude) -> Horizon {
    return horizon__geometric_anti_product__magnitude(self_, magnitude__anti_inverse(other));
}

fn horizon__geometric_anti_quotient__motor(self_: Horizon, other: Motor) -> FlectorAtInfinity {
    return horizon__geometric_anti_product__motor(self_, motor__anti_inverse(other));
}

fn horizon__geometric_anti_quotient__multi_vector(self_: Horizon, other: MultiVector) -> MultiVectorAtInfinity {
    return horizon__geometric_anti_product__multi_vector(self_, multi_vector__anti_inverse(other));
}

fn horizon__geometric_anti_quotient__multi_vector_at_origin(self_: Horizon, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return horizon__geometric_anti_product__multi_vector_at_origin(self_, multi_vector_at_origin__anti_inverse(other));
}

fn horizon__geometric_anti_quotient__origin(self_: Horizon, other: Origin) -> Scalar {
    return horizon__geometric_anti_product__origin(self_, origin__anti_inverse(other));
}

fn horizon__geometric_anti_quotient__plane(self_: Horizon, other: Plane) -> LineAtInfinity {
    return horizon__geometric_anti_product__plane(self_, plane__anti_inverse(other));
}

fn horizon__geometric_anti_quotient__plane_at_origin(self_: Horizon, other: PlaneAtOrigin) -> LineAtInfinity {
    return horizon__geometric_anti_product__plane_at_origin(self_, plane_at_origin__anti_inverse(other));
}

fn horizon__geometric_anti_quotient__point(self_: Horizon, other: Point) -> Scalar {
    return horizon__geometric_anti_product__point(self_, point__anti_inverse(other));
}

fn horizon__geometric_anti_quotient__rotor(self_: Horizon, other: Rotor) -> FlectorAtInfinity {
    return horizon__geometric_anti_product__rotor(self_, rotor__anti_inverse(other));
}

fn horizon__geometric_anti_quotient__transflector(self_: Horizon, other: Transflector) -> LineAtInfinity {
    return horizon__geometric_anti_product__transflector(self_, transflector__anti_inverse(other));
}

fn horizon__geometric_anti_quotient__translator(self_: Horizon, other: Translator) -> Horizon {
    return horizon__geometric_anti_product__translator(self_, translator__anti_inverse(other));
}

fn line__geometric_anti_quotient__anti_scalar(self_: Line, other: AntiScalar) -> Line {
    return line__geometric_anti_product__anti_scalar(self_, anti_scalar__anti_inverse(other));
}

fn line__geometric_anti_quotient__flector(self_: Line, other: Flector) -> Flector {
    return line__geometric_anti_product__flector(self_, flector__anti_inverse(other));
}

fn line__geometric_anti_quotient__line(self_: Line, other: Line) -> MultiVector {
    return line__geometric_anti_product__line(self_, line__anti_inverse(other));
}

fn line__geometric_anti_quotient__line_at_origin(self_: Line, other: LineAtOrigin) -> MultiVector {
    return line__geometric_anti_product__line_at_origin(self_, line_at_origin__anti_inverse(other));
}

fn line__geometric_anti_quotient__magnitude(self_: Line, other: Magnitude) -> Line {
    return line__geometric_anti_product__magnitude(self_, magnitude__anti_inverse(other));
}

fn line__geometric_anti_quotient__motor(self_: Line, other: Motor) -> MultiVector {
    return line__geometric_anti_product__motor(self_, motor__anti_inverse(other));
}

fn line__geometric_anti_quotient__multi_vector(self_: Line, other: MultiVector) -> MultiVector {
    return line__geometric_anti_product__multi_vector(self_, multi_vector__anti_inverse(other));
}

fn line__geometric_anti_quotient__multi_vector_at_origin(self_: Line, other: MultiVectorAtOrigin) -> MultiVector {
    return line__geometric_anti_product__multi_vector_at_origin(self_, multi_vector_at_origin__anti_inverse(other));
}

fn line__geometric_anti_quotient__origin(self_: Line, other: Origin) -> Transflector {
    return line__geometric_anti_product__origin(self_, origin__anti_inverse(other));
}

fn line__geometric_anti_quotient__plane(self_: Line, other: Plane) -> Flector {
    return line__geometric_anti_product__plane(self_, plane__anti_inverse(other));
}

fn line__geometric_anti_quotient__plane_at_origin(self_: Line, other: PlaneAtOrigin) -> Flector {
    return line__geometric_anti_product__plane_at_origin(self_, plane_at_origin__anti_inverse(other));
}

fn line__geometric_anti_quotient__point(self_: Line, other: Point) -> Transflector {
    return line__geometric_anti_product__point(self_, point__anti_inverse(other));
}

fn line__geometric_anti_quotient__rotor(self_: Line, other: Rotor) -> MultiVector {
    return line__geometric_anti_product__rotor(self_, rotor__anti_inverse(other));
}

fn line__geometric_anti_quotient__transflector(self_: Line, other: Transflector) -> Flector {
    return line__geometric_anti_product__transflector(self_, transflector__anti_inverse(other));
}

fn line__geometric_anti_quotient__translator(self_: Line, other: Translator) -> MultiVector {
    return line__geometric_anti_product__translator(self_, translator__anti_inverse(other));
}

fn line_at_infinity__geometric_anti_quotient__anti_scalar(self_: LineAtInfinity, other: AntiScalar) -> LineAtInfinity {
    return line_at_infinity__geometric_anti_product__anti_scalar(self_, anti_scalar__anti_inverse(other));
}

fn line_at_infinity__geometric_anti_quotient__flector(self_: LineAtInfinity, other: Flector) -> FlectorAtInfinity {
    return line_at_infinity__geometric_anti_product__flector(self_, flector__anti_inverse(other));
}

fn line_at_infinity__geometric_anti_quotient__line(self_: LineAtInfinity, other: Line) -> MultiVectorAtInfinity {
    return line_at_infinity__geometric_anti_product__line(self_, line__anti_inverse(other));
}

fn line_at_infinity__geometric_anti_quotient__line_at_origin(self_: LineAtInfinity, other: LineAtOrigin) -> MultiVectorAtInfinity {
    return line_at_infinity__geometric_anti_product__line_at_origin(self_, line_at_origin__anti_inverse(other));
}

fn line_at_infinity__geometric_anti_quotient__magnitude(self_: LineAtInfinity, other: Magnitude) -> LineAtInfinity {
    return line_at_infinity__geometric_anti_product__magnitude(self_, magnitude__anti_inverse(other));
}

fn line_at_infinity__geometric_anti_quotient__motor(self_: LineAtInfinity, other: Motor) -> MultiVectorAtInfinity {
    return line_at_infinity__geometric_anti_product__motor(self_, motor__anti_inverse(other));
}

fn line_at_infinity__geometric_anti_quotient__multi_vector(self_: LineAtInfinity, other: MultiVector) -> MultiVectorAtInfinity {
    return line_at_infinity__geometric_anti_product__multi_vector(self_, multi_vector__anti_inverse(other));
}

fn line_at_infinity__geometric_anti_quotient__multi_vector_at_origin(self_: LineAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return line_at_infinity__geometric_anti_product__multi_vector_at_origin(self_, multi_vector_at_origin__anti_inverse(other));
}

fn line_at_infinity__geometric_anti_quotient__origin(self_: LineAtInfinity, other: Origin) -> PointAtInfinity {
    return line_at_infinity__geometric_anti_product__origin(self_, origin__anti_inverse(other));
}

fn line_at_infinity__geometric_anti_quotient__plane(self_: LineAtInfinity, other: Plane) -> FlectorAtInfinity {
    return line_at_infinity__geometric_anti_product__plane(self_, plane__anti_inverse(other));
}

fn line_at_infinity__geometric_anti_quotient__plane_at_origin(self_: LineAtInfinity, other: PlaneAtOrigin) -> FlectorAtInfinity {
    return line_at_infinity__geometric_anti_product__plane_at_origin(self_, plane_at_origin__anti_inverse(other));
}

fn line_at_infinity__geometric_anti_quotient__point(self_: LineAtInfinity, other: Point) -> PointAtInfinity {
    return line_at_infinity__geometric_anti_product__point(self_, point__anti_inverse(other));
}

fn line_at_infinity__geometric_anti_quotient__rotor(self_: LineAtInfinity, other: Rotor) -> MultiVectorAtInfinity {
    return line_at_infinity__geometric_anti_product__rotor(self_, rotor__anti_inverse(other));
}

fn line_at_infinity__geometric_anti_quotient__transflector(self_: LineAtInfinity, other: Transflector) -> FlectorAtInfinity {
    return line_at_infinity__geometric_anti_product__transflector(self_, transflector__anti_inverse(other));
}

fn line_at_infinity__geometric_anti_quotient__translator(self_: LineAtInfinity, other: Translator) -> LineAtInfinity {
    return line_at_infinity__geometric_anti_product__translator(self_, translator__anti_inverse(other));
}

fn line_at_origin__geometric_anti_quotient__anti_scalar(self_: LineAtOrigin, other: AntiScalar) -> LineAtOrigin {
    return line_at_origin__geometric_anti_product__anti_scalar(self_, anti_scalar__anti_inverse(other));
}

fn line_at_origin__geometric_anti_quotient__flector(self_: LineAtOrigin, other: Flector) -> Flector {
    return line_at_origin__geometric_anti_product__flector(self_, flector__anti_inverse(other));
}

fn line_at_origin__geometric_anti_quotient__line(self_: LineAtOrigin, other: Line) -> MultiVector {
    return line_at_origin__geometric_anti_product__line(self_, line__anti_inverse(other));
}

fn line_at_origin__geometric_anti_quotient__line_at_origin(self_: LineAtOrigin, other: LineAtOrigin) -> Rotor {
    return line_at_origin__geometric_anti_product__line_at_origin(self_, line_at_origin__anti_inverse(other));
}

fn line_at_origin__geometric_anti_quotient__magnitude(self_: LineAtOrigin, other: Magnitude) -> Line {
    return line_at_origin__geometric_anti_product__magnitude(self_, magnitude__anti_inverse(other));
}

fn line_at_origin__geometric_anti_quotient__motor(self_: LineAtOrigin, other: Motor) -> MultiVector {
    return line_at_origin__geometric_anti_product__motor(self_, motor__anti_inverse(other));
}

fn line_at_origin__geometric_anti_quotient__multi_vector(self_: LineAtOrigin, other: MultiVector) -> MultiVector {
    return line_at_origin__geometric_anti_product__multi_vector(self_, multi_vector__anti_inverse(other));
}

fn line_at_origin__geometric_anti_quotient__multi_vector_at_origin(self_: LineAtOrigin, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return line_at_origin__geometric_anti_product__multi_vector_at_origin(self_, multi_vector_at_origin__anti_inverse(other));
}

fn line_at_origin__geometric_anti_quotient__origin(self_: LineAtOrigin, other: Origin) -> PlaneAtOrigin {
    return line_at_origin__geometric_anti_product__origin(self_, origin__anti_inverse(other));
}

fn line_at_origin__geometric_anti_quotient__plane(self_: LineAtOrigin, other: Plane) -> Flector {
    return line_at_origin__geometric_anti_product__plane(self_, plane__anti_inverse(other));
}

fn line_at_origin__geometric_anti_quotient__plane_at_origin(self_: LineAtOrigin, other: PlaneAtOrigin) -> Flector {
    return line_at_origin__geometric_anti_product__plane_at_origin(self_, plane_at_origin__anti_inverse(other));
}

fn line_at_origin__geometric_anti_quotient__point(self_: LineAtOrigin, other: Point) -> Transflector {
    return line_at_origin__geometric_anti_product__point(self_, point__anti_inverse(other));
}

fn line_at_origin__geometric_anti_quotient__rotor(self_: LineAtOrigin, other: Rotor) -> Rotor {
    return line_at_origin__geometric_anti_product__rotor(self_, rotor__anti_inverse(other));
}

fn line_at_origin__geometric_anti_quotient__transflector(self_: LineAtOrigin, other: Transflector) -> Flector {
    return line_at_origin__geometric_anti_product__transflector(self_, transflector__anti_inverse(other));
}

fn line_at_origin__geometric_anti_quotient__translator(self_: LineAtOrigin, other: Translator) -> MultiVector {
    return line_at_origin__geometric_anti_product__translator(self_, translator__anti_inverse(other));
}

fn magnitude__geometric_anti_quotient__anti_scalar(self_: Magnitude, other: AntiScalar) -> Magnitude {
    return magnitude__geometric_anti_product__anti_scalar(self_, anti_scalar__anti_inverse(other));
}

fn magnitude__geometric_anti_quotient__flector(self_: Magnitude, other: Flector) -> Flector {
    return magnitude__geometric_anti_product__flector(self_, flector__anti_inverse(other));
}

fn magnitude__geometric_anti_quotient__line(self_: Magnitude, other: Line) -> Line {
    return magnitude__geometric_anti_product__line(self_, line__anti_inverse(other));
}

fn magnitude__geometric_anti_quotient__line_at_origin(self_: Magnitude, other: LineAtOrigin) -> Line {
    return magnitude__geometric_anti_product__line_at_origin(self_, line_at_origin__anti_inverse(other));
}

fn magnitude__geometric_anti_quotient__magnitude(self_: Magnitude, other: Magnitude) -> Magnitude {
    return magnitude__geometric_anti_product__magnitude(self_, magnitude__anti_inverse(other));
}

fn magnitude__geometric_anti_quotient__motor(self_: Magnitude, other: Motor) -> MultiVector {
    return magnitude__geometric_anti_product__motor(self_, motor__anti_inverse(other));
}

fn magnitude__geometric_anti_quotient__multi_vector(self_: Magnitude, other: MultiVector) -> MultiVector {
    return magnitude__geometric_anti_product__multi_vector(self_, multi_vector__anti_inverse(other));
}

fn magnitude__geometric_anti_quotient__multi_vector_at_origin(self_: Magnitude, other: MultiVectorAtOrigin) -> MultiVector {
    return magnitude__geometric_anti_product__multi_vector_at_origin(self_, multi_vector_at_origin__anti_inverse(other));
}

fn magnitude__geometric_anti_quotient__origin(self_: Magnitude, other: Origin) -> Flector {
    return magnitude__geometric_anti_product__origin(self_, origin__anti_inverse(other));
}

fn magnitude__geometric_anti_quotient__plane(self_: Magnitude, other: Plane) -> Transflector {
    return magnitude__geometric_anti_product__plane(self_, plane__anti_inverse(other));
}

fn magnitude__geometric_anti_quotient__plane_at_origin(self_: Magnitude, other: PlaneAtOrigin) -> Transflector {
    return magnitude__geometric_anti_product__plane_at_origin(self_, plane_at_origin__anti_inverse(other));
}

fn magnitude__geometric_anti_quotient__point(self_: Magnitude, other: Point) -> Flector {
    return magnitude__geometric_anti_product__point(self_, point__anti_inverse(other));
}

fn magnitude__geometric_anti_quotient__rotor(self_: Magnitude, other: Rotor) -> MultiVector {
    return magnitude__geometric_anti_product__rotor(self_, rotor__anti_inverse(other));
}

fn magnitude__geometric_anti_quotient__transflector(self_: Magnitude, other: Transflector) -> Transflector {
    return magnitude__geometric_anti_product__transflector(self_, transflector__anti_inverse(other));
}

fn magnitude__geometric_anti_quotient__translator(self_: Magnitude, other: Translator) -> MultiVector {
    return magnitude__geometric_anti_product__translator(self_, translator__anti_inverse(other));
}

fn motor__geometric_anti_quotient__anti_scalar(self_: Motor, other: AntiScalar) -> Motor {
    return motor__geometric_anti_product__anti_scalar(self_, anti_scalar__anti_inverse(other));
}

fn motor__geometric_anti_quotient__flector(self_: Motor, other: Flector) -> Flector {
    return motor__geometric_anti_product__flector(self_, flector__anti_inverse(other));
}

fn motor__geometric_anti_quotient__line(self_: Motor, other: Line) -> MultiVector {
    return motor__geometric_anti_product__line(self_, line__anti_inverse(other));
}

fn motor__geometric_anti_quotient__line_at_origin(self_: Motor, other: LineAtOrigin) -> MultiVector {
    return motor__geometric_anti_product__line_at_origin(self_, line_at_origin__anti_inverse(other));
}

fn motor__geometric_anti_quotient__magnitude(self_: Motor, other: Magnitude) -> MultiVector {
    return motor__geometric_anti_product__magnitude(self_, magnitude__anti_inverse(other));
}

fn motor__geometric_anti_quotient__motor(self_: Motor, other: Motor) -> MultiVector {
    return motor__geometric_anti_product__motor(self_, motor__anti_inverse(other));
}

fn motor__geometric_anti_quotient__multi_vector(self_: Motor, other: MultiVector) -> MultiVector {
    return motor__geometric_anti_product__multi_vector(self_, multi_vector__anti_inverse(other));
}

fn motor__geometric_anti_quotient__multi_vector_at_origin(self_: Motor, other: MultiVectorAtOrigin) -> MultiVector {
    return motor__geometric_anti_product__multi_vector_at_origin(self_, multi_vector_at_origin__anti_inverse(other));
}

fn motor__geometric_anti_quotient__origin(self_: Motor, other: Origin) -> Flector {
    return motor__geometric_anti_product__origin(self_, origin__anti_inverse(other));
}

fn motor__geometric_anti_quotient__plane(self_: Motor, other: Plane) -> Flector {
    return motor__geometric_anti_product__plane(self_, plane__anti_inverse(other));
}

fn motor__geometric_anti_quotient__plane_at_origin(self_: Motor, other: PlaneAtOrigin) -> Flector {
    return motor__geometric_anti_product__plane_at_origin(self_, plane_at_origin__anti_inverse(other));
}

fn motor__geometric_anti_quotient__point(self_: Motor, other: Point) -> Flector {
    return motor__geometric_anti_product__point(self_, point__anti_inverse(other));
}

fn motor__geometric_anti_quotient__rotor(self_: Motor, other: Rotor) -> MultiVector {
    return motor__geometric_anti_product__rotor(self_, rotor__anti_inverse(other));
}

fn motor__geometric_anti_quotient__transflector(self_: Motor, other: Transflector) -> Flector {
    return motor__geometric_anti_product__transflector(self_, transflector__anti_inverse(other));
}

fn motor__geometric_anti_quotient__translator(self_: Motor, other: Translator) -> MultiVector {
    return motor__geometric_anti_product__translator(self_, translator__anti_inverse(other));
}

fn multi_vector__geometric_anti_quotient__anti_scalar(self_: MultiVector, other: AntiScalar) -> MultiVector {
    return multi_vector__geometric_anti_product__anti_scalar(self_, anti_scalar__anti_inverse(other));
}

fn multi_vector__geometric_anti_quotient__flector(self_: MultiVector, other: Flector) -> MultiVector {
    return multi_vector__geometric_anti_product__flector(self_, flector__anti_inverse(other));
}

fn multi_vector__geometric_anti_quotient__line(self_: MultiVector, other: Line) -> MultiVector {
    return multi_vector__geometric_anti_product__line(self_, line__anti_inverse(other));
}

fn multi_vector__geometric_anti_quotient__line_at_origin(self_: MultiVector, other: LineAtOrigin) -> MultiVector {
    return multi_vector__geometric_anti_product__line_at_origin(self_, line_at_origin__anti_inverse(other));
}

fn multi_vector__geometric_anti_quotient__magnitude(self_: MultiVector, other: Magnitude) -> MultiVector {
    return multi_vector__geometric_anti_product__magnitude(self_, magnitude__anti_inverse(other));
}

fn multi_vector__geometric_anti_quotient__motor(self_: MultiVector, other: Motor) -> MultiVector {
    return multi_vector__geometric_anti_product__motor(self_, motor__anti_inverse(other));
}

fn multi_vector__geometric_anti_quotient__multi_vector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return multi_vector__geometric_anti_product__multi_vector(self_, multi_vector__anti_inverse(other));
}

fn multi_vector__geometric_anti_quotient__multi_vector_at_origin(self_: MultiVector, other: MultiVectorAtOrigin) -> MultiVector {
    return multi_vector__geometric_anti_product__multi_vector_at_origin(self_, multi_vector_at_origin__anti_inverse(other));
}

fn multi_vector__geometric_anti_quotient__origin(self_: MultiVector, other: Origin) -> MultiVector {
    return multi_vector__geometric_anti_product__origin(self_, origin__anti_inverse(other));
}

fn multi_vector__geometric_anti_quotient__plane(self_: MultiVector, other: Plane) -> MultiVector {
    return multi_vector__geometric_anti_product__plane(self_, plane__anti_inverse(other));
}

fn multi_vector__geometric_anti_quotient__plane_at_origin(self_: MultiVector, other: PlaneAtOrigin) -> MultiVector {
    return multi_vector__geometric_anti_product__plane_at_origin(self_, plane_at_origin__anti_inverse(other));
}

fn multi_vector__geometric_anti_quotient__point(self_: MultiVector, other: Point) -> MultiVector {
    return multi_vector__geometric_anti_product__point(self_, point__anti_inverse(other));
}

fn multi_vector__geometric_anti_quotient__rotor(self_: MultiVector, other: Rotor) -> MultiVector {
    return multi_vector__geometric_anti_product__rotor(self_, rotor__anti_inverse(other));
}

fn multi_vector__geometric_anti_quotient__transflector(self_: MultiVector, other: Transflector) -> MultiVector {
    return multi_vector__geometric_anti_product__transflector(self_, transflector__anti_inverse(other));
}

fn multi_vector__geometric_anti_quotient__translator(self_: MultiVector, other: Translator) -> MultiVector {
    return multi_vector__geometric_anti_product__translator(self_, translator__anti_inverse(other));
}

fn multi_vector_at_infinity__geometric_anti_quotient__anti_scalar(self_: MultiVectorAtInfinity, other: AntiScalar) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__geometric_anti_product__anti_scalar(self_, anti_scalar__anti_inverse(other));
}

fn multi_vector_at_infinity__geometric_anti_quotient__flector(self_: MultiVectorAtInfinity, other: Flector) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__geometric_anti_product__flector(self_, flector__anti_inverse(other));
}

fn multi_vector_at_infinity__geometric_anti_quotient__line(self_: MultiVectorAtInfinity, other: Line) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__geometric_anti_product__line(self_, line__anti_inverse(other));
}

fn multi_vector_at_infinity__geometric_anti_quotient__line_at_origin(self_: MultiVectorAtInfinity, other: LineAtOrigin) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__geometric_anti_product__line_at_origin(self_, line_at_origin__anti_inverse(other));
}

fn multi_vector_at_infinity__geometric_anti_quotient__magnitude(self_: MultiVectorAtInfinity, other: Magnitude) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__geometric_anti_product__magnitude(self_, magnitude__anti_inverse(other));
}

fn multi_vector_at_infinity__geometric_anti_quotient__motor(self_: MultiVectorAtInfinity, other: Motor) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__geometric_anti_product__motor(self_, motor__anti_inverse(other));
}

fn multi_vector_at_infinity__geometric_anti_quotient__multi_vector(self_: MultiVectorAtInfinity, other: MultiVector) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__geometric_anti_product__multi_vector(self_, multi_vector__anti_inverse(other));
}

fn multi_vector_at_infinity__geometric_anti_quotient__multi_vector_at_origin(self_: MultiVectorAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__geometric_anti_product__multi_vector_at_origin(self_, multi_vector_at_origin__anti_inverse(other));
}

fn multi_vector_at_infinity__geometric_anti_quotient__origin(self_: MultiVectorAtInfinity, other: Origin) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__geometric_anti_product__origin(self_, origin__anti_inverse(other));
}

fn multi_vector_at_infinity__geometric_anti_quotient__plane(self_: MultiVectorAtInfinity, other: Plane) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__geometric_anti_product__plane(self_, plane__anti_inverse(other));
}

fn multi_vector_at_infinity__geometric_anti_quotient__plane_at_origin(self_: MultiVectorAtInfinity, other: PlaneAtOrigin) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__geometric_anti_product__plane_at_origin(self_, plane_at_origin__anti_inverse(other));
}

fn multi_vector_at_infinity__geometric_anti_quotient__point(self_: MultiVectorAtInfinity, other: Point) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__geometric_anti_product__point(self_, point__anti_inverse(other));
}

fn multi_vector_at_infinity__geometric_anti_quotient__rotor(self_: MultiVectorAtInfinity, other: Rotor) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__geometric_anti_product__rotor(self_, rotor__anti_inverse(other));
}

fn multi_vector_at_infinity__geometric_anti_quotient__transflector(self_: MultiVectorAtInfinity, other: Transflector) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__geometric_anti_product__transflector(self_, transflector__anti_inverse(other));
}

fn multi_vector_at_infinity__geometric_anti_quotient__translator(self_: MultiVectorAtInfinity, other: Translator) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__geometric_anti_product__translator(self_, translator__anti_inverse(other));
}

fn multi_vector_at_origin__geometric_anti_quotient__anti_scalar(self_: MultiVectorAtOrigin, other: AntiScalar) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__geometric_anti_product__anti_scalar(self_, anti_scalar__anti_inverse(other));
}

fn multi_vector_at_origin__geometric_anti_quotient__flector(self_: MultiVectorAtOrigin, other: Flector) -> MultiVector {
    return multi_vector_at_origin__geometric_anti_product__flector(self_, flector__anti_inverse(other));
}

fn multi_vector_at_origin__geometric_anti_quotient__line(self_: MultiVectorAtOrigin, other: Line) -> MultiVector {
    return multi_vector_at_origin__geometric_anti_product__line(self_, line__anti_inverse(other));
}

fn multi_vector_at_origin__geometric_anti_quotient__line_at_origin(self_: MultiVectorAtOrigin, other: LineAtOrigin) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__geometric_anti_product__line_at_origin(self_, line_at_origin__anti_inverse(other));
}

fn multi_vector_at_origin__geometric_anti_quotient__magnitude(self_: MultiVectorAtOrigin, other: Magnitude) -> MultiVector {
    return multi_vector_at_origin__geometric_anti_product__magnitude(self_, magnitude__anti_inverse(other));
}

fn multi_vector_at_origin__geometric_anti_quotient__motor(self_: MultiVectorAtOrigin, other: Motor) -> MultiVector {
    return multi_vector_at_origin__geometric_anti_product__motor(self_, motor__anti_inverse(other));
}

fn multi_vector_at_origin__geometric_anti_quotient__multi_vector(self_: MultiVectorAtOrigin, other: MultiVector) -> MultiVector {
    return multi_vector_at_origin__geometric_anti_product__multi_vector(self_, multi_vector__anti_inverse(other));
}

fn multi_vector_at_origin__geometric_anti_quotient__multi_vector_at_origin(self_: MultiVectorAtOrigin, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__geometric_anti_product__multi_vector_at_origin(self_, multi_vector_at_origin__anti_inverse(other));
}

fn multi_vector_at_origin__geometric_anti_quotient__origin(self_: MultiVectorAtOrigin, other: Origin) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__geometric_anti_product__origin(self_, origin__anti_inverse(other));
}

fn multi_vector_at_origin__geometric_anti_quotient__plane(self_: MultiVectorAtOrigin, other: Plane) -> MultiVector {
    return multi_vector_at_origin__geometric_anti_product__plane(self_, plane__anti_inverse(other));
}

fn multi_vector_at_origin__geometric_anti_quotient__plane_at_origin(self_: MultiVectorAtOrigin, other: PlaneAtOrigin) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__geometric_anti_product__plane_at_origin(self_, plane_at_origin__anti_inverse(other));
}

fn multi_vector_at_origin__geometric_anti_quotient__point(self_: MultiVectorAtOrigin, other: Point) -> MultiVector {
    return multi_vector_at_origin__geometric_anti_product__point(self_, point__anti_inverse(other));
}

fn multi_vector_at_origin__geometric_anti_quotient__rotor(self_: MultiVectorAtOrigin, other: Rotor) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__geometric_anti_product__rotor(self_, rotor__anti_inverse(other));
}

fn multi_vector_at_origin__geometric_anti_quotient__transflector(self_: MultiVectorAtOrigin, other: Transflector) -> MultiVector {
    return multi_vector_at_origin__geometric_anti_product__transflector(self_, transflector__anti_inverse(other));
}

fn multi_vector_at_origin__geometric_anti_quotient__translator(self_: MultiVectorAtOrigin, other: Translator) -> MultiVector {
    return multi_vector_at_origin__geometric_anti_product__translator(self_, translator__anti_inverse(other));
}

fn origin__geometric_anti_quotient__anti_scalar(self_: Origin, other: AntiScalar) -> Origin {
    return origin__geometric_anti_product__anti_scalar(self_, anti_scalar__anti_inverse(other));
}

fn origin__geometric_anti_quotient__flector(self_: Origin, other: Flector) -> MultiVector {
    return origin__geometric_anti_product__flector(self_, flector__anti_inverse(other));
}

fn origin__geometric_anti_quotient__line(self_: Origin, other: Line) -> Transflector {
    return origin__geometric_anti_product__line(self_, line__anti_inverse(other));
}

fn origin__geometric_anti_quotient__line_at_origin(self_: Origin, other: LineAtOrigin) -> PlaneAtOrigin {
    return origin__geometric_anti_product__line_at_origin(self_, line_at_origin__anti_inverse(other));
}

fn origin__geometric_anti_quotient__magnitude(self_: Origin, other: Magnitude) -> Flector {
    return origin__geometric_anti_product__magnitude(self_, magnitude__anti_inverse(other));
}

fn origin__geometric_anti_quotient__motor(self_: Origin, other: Motor) -> Flector {
    return origin__geometric_anti_product__motor(self_, motor__anti_inverse(other));
}

fn origin__geometric_anti_quotient__multi_vector(self_: Origin, other: MultiVector) -> MultiVector {
    return origin__geometric_anti_product__multi_vector(self_, multi_vector__anti_inverse(other));
}

fn origin__geometric_anti_quotient__multi_vector_at_origin(self_: Origin, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return origin__geometric_anti_product__multi_vector_at_origin(self_, multi_vector_at_origin__anti_inverse(other));
}

fn origin__geometric_anti_quotient__origin(self_: Origin, other: Origin) -> AntiScalar {
    return origin__geometric_anti_product__origin(self_, origin__anti_inverse(other));
}

fn origin__geometric_anti_quotient__plane(self_: Origin, other: Plane) -> MultiVector {
    return origin__geometric_anti_product__plane(self_, plane__anti_inverse(other));
}

fn origin__geometric_anti_quotient__plane_at_origin(self_: Origin, other: PlaneAtOrigin) -> LineAtOrigin {
    return origin__geometric_anti_product__plane_at_origin(self_, plane_at_origin__anti_inverse(other));
}

fn origin__geometric_anti_quotient__point(self_: Origin, other: Point) -> Translator {
    return origin__geometric_anti_product__point(self_, point__anti_inverse(other));
}

fn origin__geometric_anti_quotient__rotor(self_: Origin, other: Rotor) -> Flector {
    return origin__geometric_anti_product__rotor(self_, rotor__anti_inverse(other));
}

fn origin__geometric_anti_quotient__transflector(self_: Origin, other: Transflector) -> MultiVector {
    return origin__geometric_anti_product__transflector(self_, transflector__anti_inverse(other));
}

fn origin__geometric_anti_quotient__translator(self_: Origin, other: Translator) -> Point {
    return origin__geometric_anti_product__translator(self_, translator__anti_inverse(other));
}

fn plane__geometric_anti_quotient__anti_scalar(self_: Plane, other: AntiScalar) -> Plane {
    return plane__geometric_anti_product__anti_scalar(self_, anti_scalar__anti_inverse(other));
}

fn plane__geometric_anti_quotient__flector(self_: Plane, other: Flector) -> MultiVector {
    return plane__geometric_anti_product__flector(self_, flector__anti_inverse(other));
}

fn plane__geometric_anti_quotient__line(self_: Plane, other: Line) -> Flector {
    return plane__geometric_anti_product__line(self_, line__anti_inverse(other));
}

fn plane__geometric_anti_quotient__line_at_origin(self_: Plane, other: LineAtOrigin) -> Flector {
    return plane__geometric_anti_product__line_at_origin(self_, line_at_origin__anti_inverse(other));
}

fn plane__geometric_anti_quotient__magnitude(self_: Plane, other: Magnitude) -> Transflector {
    return plane__geometric_anti_product__magnitude(self_, magnitude__anti_inverse(other));
}

fn plane__geometric_anti_quotient__motor(self_: Plane, other: Motor) -> Flector {
    return plane__geometric_anti_product__motor(self_, motor__anti_inverse(other));
}

fn plane__geometric_anti_quotient__multi_vector(self_: Plane, other: MultiVector) -> MultiVector {
    return plane__geometric_anti_product__multi_vector(self_, multi_vector__anti_inverse(other));
}

fn plane__geometric_anti_quotient__multi_vector_at_origin(self_: Plane, other: MultiVectorAtOrigin) -> MultiVector {
    return plane__geometric_anti_product__multi_vector_at_origin(self_, multi_vector_at_origin__anti_inverse(other));
}

fn plane__geometric_anti_quotient__origin(self_: Plane, other: Origin) -> MultiVector {
    return plane__geometric_anti_product__origin(self_, origin__anti_inverse(other));
}

fn plane__geometric_anti_quotient__plane(self_: Plane, other: Plane) -> Motor {
    return plane__geometric_anti_product__plane(self_, plane__anti_inverse(other));
}

fn plane__geometric_anti_quotient__plane_at_origin(self_: Plane, other: PlaneAtOrigin) -> Motor {
    return plane__geometric_anti_product__plane_at_origin(self_, plane_at_origin__anti_inverse(other));
}

fn plane__geometric_anti_quotient__point(self_: Plane, other: Point) -> MultiVector {
    return plane__geometric_anti_product__point(self_, point__anti_inverse(other));
}

fn plane__geometric_anti_quotient__rotor(self_: Plane, other: Rotor) -> Flector {
    return plane__geometric_anti_product__rotor(self_, rotor__anti_inverse(other));
}

fn plane__geometric_anti_quotient__transflector(self_: Plane, other: Transflector) -> MultiVector {
    return plane__geometric_anti_product__transflector(self_, transflector__anti_inverse(other));
}

fn plane__geometric_anti_quotient__translator(self_: Plane, other: Translator) -> Transflector {
    return plane__geometric_anti_product__translator(self_, translator__anti_inverse(other));
}

fn plane_at_origin__geometric_anti_quotient__anti_scalar(self_: PlaneAtOrigin, other: AntiScalar) -> PlaneAtOrigin {
    return plane_at_origin__geometric_anti_product__anti_scalar(self_, anti_scalar__anti_inverse(other));
}

fn plane_at_origin__geometric_anti_quotient__flector(self_: PlaneAtOrigin, other: Flector) -> MultiVector {
    return plane_at_origin__geometric_anti_product__flector(self_, flector__anti_inverse(other));
}

fn plane_at_origin__geometric_anti_quotient__line(self_: PlaneAtOrigin, other: Line) -> Flector {
    return plane_at_origin__geometric_anti_product__line(self_, line__anti_inverse(other));
}

fn plane_at_origin__geometric_anti_quotient__line_at_origin(self_: PlaneAtOrigin, other: LineAtOrigin) -> Flector {
    return plane_at_origin__geometric_anti_product__line_at_origin(self_, line_at_origin__anti_inverse(other));
}

fn plane_at_origin__geometric_anti_quotient__magnitude(self_: PlaneAtOrigin, other: Magnitude) -> Transflector {
    return plane_at_origin__geometric_anti_product__magnitude(self_, magnitude__anti_inverse(other));
}

fn plane_at_origin__geometric_anti_quotient__motor(self_: PlaneAtOrigin, other: Motor) -> Flector {
    return plane_at_origin__geometric_anti_product__motor(self_, motor__anti_inverse(other));
}

fn plane_at_origin__geometric_anti_quotient__multi_vector(self_: PlaneAtOrigin, other: MultiVector) -> MultiVector {
    return plane_at_origin__geometric_anti_product__multi_vector(self_, multi_vector__anti_inverse(other));
}

fn plane_at_origin__geometric_anti_quotient__multi_vector_at_origin(self_: PlaneAtOrigin, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return plane_at_origin__geometric_anti_product__multi_vector_at_origin(self_, multi_vector_at_origin__anti_inverse(other));
}

fn plane_at_origin__geometric_anti_quotient__origin(self_: PlaneAtOrigin, other: Origin) -> LineAtOrigin {
    return plane_at_origin__geometric_anti_product__origin(self_, origin__anti_inverse(other));
}

fn plane_at_origin__geometric_anti_quotient__plane(self_: PlaneAtOrigin, other: Plane) -> Motor {
    return plane_at_origin__geometric_anti_product__plane(self_, plane__anti_inverse(other));
}

fn plane_at_origin__geometric_anti_quotient__plane_at_origin(self_: PlaneAtOrigin, other: PlaneAtOrigin) -> Rotor {
    return plane_at_origin__geometric_anti_product__plane_at_origin(self_, plane_at_origin__anti_inverse(other));
}

fn plane_at_origin__geometric_anti_quotient__point(self_: PlaneAtOrigin, other: Point) -> MultiVector {
    return plane_at_origin__geometric_anti_product__point(self_, point__anti_inverse(other));
}

fn plane_at_origin__geometric_anti_quotient__rotor(self_: PlaneAtOrigin, other: Rotor) -> Flector {
    return plane_at_origin__geometric_anti_product__rotor(self_, rotor__anti_inverse(other));
}

fn plane_at_origin__geometric_anti_quotient__transflector(self_: PlaneAtOrigin, other: Transflector) -> MultiVector {
    return plane_at_origin__geometric_anti_product__transflector(self_, transflector__anti_inverse(other));
}

fn plane_at_origin__geometric_anti_quotient__translator(self_: PlaneAtOrigin, other: Translator) -> Transflector {
    return plane_at_origin__geometric_anti_product__translator(self_, translator__anti_inverse(other));
}

fn point__geometric_anti_quotient__anti_scalar(self_: Point, other: AntiScalar) -> Point {
    return point__geometric_anti_product__anti_scalar(self_, anti_scalar__anti_inverse(other));
}

fn point__geometric_anti_quotient__flector(self_: Point, other: Flector) -> MultiVector {
    return point__geometric_anti_product__flector(self_, flector__anti_inverse(other));
}

fn point__geometric_anti_quotient__line(self_: Point, other: Line) -> Transflector {
    return point__geometric_anti_product__line(self_, line__anti_inverse(other));
}

fn point__geometric_anti_quotient__line_at_origin(self_: Point, other: LineAtOrigin) -> Transflector {
    return point__geometric_anti_product__line_at_origin(self_, line_at_origin__anti_inverse(other));
}

fn point__geometric_anti_quotient__magnitude(self_: Point, other: Magnitude) -> Flector {
    return point__geometric_anti_product__magnitude(self_, magnitude__anti_inverse(other));
}

fn point__geometric_anti_quotient__motor(self_: Point, other: Motor) -> Flector {
    return point__geometric_anti_product__motor(self_, motor__anti_inverse(other));
}

fn point__geometric_anti_quotient__multi_vector(self_: Point, other: MultiVector) -> MultiVector {
    return point__geometric_anti_product__multi_vector(self_, multi_vector__anti_inverse(other));
}

fn point__geometric_anti_quotient__multi_vector_at_origin(self_: Point, other: MultiVectorAtOrigin) -> MultiVector {
    return point__geometric_anti_product__multi_vector_at_origin(self_, multi_vector_at_origin__anti_inverse(other));
}

fn point__geometric_anti_quotient__origin(self_: Point, other: Origin) -> Translator {
    return point__geometric_anti_product__origin(self_, origin__anti_inverse(other));
}

fn point__geometric_anti_quotient__plane(self_: Point, other: Plane) -> MultiVector {
    return point__geometric_anti_product__plane(self_, plane__anti_inverse(other));
}

fn point__geometric_anti_quotient__plane_at_origin(self_: Point, other: PlaneAtOrigin) -> MultiVector {
    return point__geometric_anti_product__plane_at_origin(self_, plane_at_origin__anti_inverse(other));
}

fn point__geometric_anti_quotient__point(self_: Point, other: Point) -> Translator {
    return point__geometric_anti_product__point(self_, point__anti_inverse(other));
}

fn point__geometric_anti_quotient__rotor(self_: Point, other: Rotor) -> Flector {
    return point__geometric_anti_product__rotor(self_, rotor__anti_inverse(other));
}

fn point__geometric_anti_quotient__transflector(self_: Point, other: Transflector) -> MultiVector {
    return point__geometric_anti_product__transflector(self_, transflector__anti_inverse(other));
}

fn point__geometric_anti_quotient__translator(self_: Point, other: Translator) -> Point {
    return point__geometric_anti_product__translator(self_, translator__anti_inverse(other));
}

fn point_at_infinity__geometric_anti_quotient__anti_scalar(self_: PointAtInfinity, other: AntiScalar) -> PointAtInfinity {
    return point_at_infinity__geometric_anti_product__anti_scalar(self_, anti_scalar__anti_inverse(other));
}

fn point_at_infinity__geometric_anti_quotient__flector(self_: PointAtInfinity, other: Flector) -> MultiVectorAtInfinity {
    return point_at_infinity__geometric_anti_product__flector(self_, flector__anti_inverse(other));
}

fn point_at_infinity__geometric_anti_quotient__line(self_: PointAtInfinity, other: Line) -> FlectorAtInfinity {
    return point_at_infinity__geometric_anti_product__line(self_, line__anti_inverse(other));
}

fn point_at_infinity__geometric_anti_quotient__line_at_origin(self_: PointAtInfinity, other: LineAtOrigin) -> FlectorAtInfinity {
    return point_at_infinity__geometric_anti_product__line_at_origin(self_, line_at_origin__anti_inverse(other));
}

fn point_at_infinity__geometric_anti_quotient__magnitude(self_: PointAtInfinity, other: Magnitude) -> PointAtInfinity {
    return point_at_infinity__geometric_anti_product__magnitude(self_, magnitude__anti_inverse(other));
}

fn point_at_infinity__geometric_anti_quotient__motor(self_: PointAtInfinity, other: Motor) -> FlectorAtInfinity {
    return point_at_infinity__geometric_anti_product__motor(self_, motor__anti_inverse(other));
}

fn point_at_infinity__geometric_anti_quotient__multi_vector(self_: PointAtInfinity, other: MultiVector) -> MultiVectorAtInfinity {
    return point_at_infinity__geometric_anti_product__multi_vector(self_, multi_vector__anti_inverse(other));
}

fn point_at_infinity__geometric_anti_quotient__multi_vector_at_origin(self_: PointAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return point_at_infinity__geometric_anti_product__multi_vector_at_origin(self_, multi_vector_at_origin__anti_inverse(other));
}

fn point_at_infinity__geometric_anti_quotient__origin(self_: PointAtInfinity, other: Origin) -> LineAtInfinity {
    return point_at_infinity__geometric_anti_product__origin(self_, origin__anti_inverse(other));
}

fn point_at_infinity__geometric_anti_quotient__plane(self_: PointAtInfinity, other: Plane) -> MultiVectorAtInfinity {
    return point_at_infinity__geometric_anti_product__plane(self_, plane__anti_inverse(other));
}

fn point_at_infinity__geometric_anti_quotient__plane_at_origin(self_: PointAtInfinity, other: PlaneAtOrigin) -> MultiVectorAtInfinity {
    return point_at_infinity__geometric_anti_product__plane_at_origin(self_, plane_at_origin__anti_inverse(other));
}

fn point_at_infinity__geometric_anti_quotient__point(self_: PointAtInfinity, other: Point) -> LineAtInfinity {
    return point_at_infinity__geometric_anti_product__point(self_, point__anti_inverse(other));
}

fn point_at_infinity__geometric_anti_quotient__rotor(self_: PointAtInfinity, other: Rotor) -> FlectorAtInfinity {
    return point_at_infinity__geometric_anti_product__rotor(self_, rotor__anti_inverse(other));
}

fn point_at_infinity__geometric_anti_quotient__transflector(self_: PointAtInfinity, other: Transflector) -> MultiVectorAtInfinity {
    return point_at_infinity__geometric_anti_product__transflector(self_, transflector__anti_inverse(other));
}

fn point_at_infinity__geometric_anti_quotient__translator(self_: PointAtInfinity, other: Translator) -> PointAtInfinity {
    return point_at_infinity__geometric_anti_product__translator(self_, translator__anti_inverse(other));
}

fn rotor__geometric_anti_quotient__anti_scalar(self_: Rotor, other: AntiScalar) -> Rotor {
    return rotor__geometric_anti_product__anti_scalar(self_, anti_scalar__anti_inverse(other));
}

fn rotor__geometric_anti_quotient__flector(self_: Rotor, other: Flector) -> Flector {
    return rotor__geometric_anti_product__flector(self_, flector__anti_inverse(other));
}

fn rotor__geometric_anti_quotient__line(self_: Rotor, other: Line) -> MultiVector {
    return rotor__geometric_anti_product__line(self_, line__anti_inverse(other));
}

fn rotor__geometric_anti_quotient__line_at_origin(self_: Rotor, other: LineAtOrigin) -> Rotor {
    return rotor__geometric_anti_product__line_at_origin(self_, line_at_origin__anti_inverse(other));
}

fn rotor__geometric_anti_quotient__magnitude(self_: Rotor, other: Magnitude) -> MultiVector {
    return rotor__geometric_anti_product__magnitude(self_, magnitude__anti_inverse(other));
}

fn rotor__geometric_anti_quotient__motor(self_: Rotor, other: Motor) -> MultiVector {
    return rotor__geometric_anti_product__motor(self_, motor__anti_inverse(other));
}

fn rotor__geometric_anti_quotient__multi_vector(self_: Rotor, other: MultiVector) -> MultiVector {
    return rotor__geometric_anti_product__multi_vector(self_, multi_vector__anti_inverse(other));
}

fn rotor__geometric_anti_quotient__multi_vector_at_origin(self_: Rotor, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return rotor__geometric_anti_product__multi_vector_at_origin(self_, multi_vector_at_origin__anti_inverse(other));
}

fn rotor__geometric_anti_quotient__origin(self_: Rotor, other: Origin) -> Flector {
    return rotor__geometric_anti_product__origin(self_, origin__anti_inverse(other));
}

fn rotor__geometric_anti_quotient__plane(self_: Rotor, other: Plane) -> Flector {
    return rotor__geometric_anti_product__plane(self_, plane__anti_inverse(other));
}

fn rotor__geometric_anti_quotient__plane_at_origin(self_: Rotor, other: PlaneAtOrigin) -> Flector {
    return rotor__geometric_anti_product__plane_at_origin(self_, plane_at_origin__anti_inverse(other));
}

fn rotor__geometric_anti_quotient__point(self_: Rotor, other: Point) -> Flector {
    return rotor__geometric_anti_product__point(self_, point__anti_inverse(other));
}

fn rotor__geometric_anti_quotient__rotor(self_: Rotor, other: Rotor) -> Rotor {
    return rotor__geometric_anti_product__rotor(self_, rotor__anti_inverse(other));
}

fn rotor__geometric_anti_quotient__transflector(self_: Rotor, other: Transflector) -> Flector {
    return rotor__geometric_anti_product__transflector(self_, transflector__anti_inverse(other));
}

fn rotor__geometric_anti_quotient__translator(self_: Rotor, other: Translator) -> MultiVector {
    return rotor__geometric_anti_product__translator(self_, translator__anti_inverse(other));
}

fn scalar__geometric_anti_quotient__anti_scalar(self_: Scalar, other: AntiScalar) -> Scalar {
    return scalar__geometric_anti_product__anti_scalar(self_, anti_scalar__anti_inverse(other));
}

fn scalar__geometric_anti_quotient__flector(self_: Scalar, other: Flector) -> FlectorAtInfinity {
    return scalar__geometric_anti_product__flector(self_, flector__anti_inverse(other));
}

fn scalar__geometric_anti_quotient__line(self_: Scalar, other: Line) -> LineAtInfinity {
    return scalar__geometric_anti_product__line(self_, line__anti_inverse(other));
}

fn scalar__geometric_anti_quotient__line_at_origin(self_: Scalar, other: LineAtOrigin) -> LineAtInfinity {
    return scalar__geometric_anti_product__line_at_origin(self_, line_at_origin__anti_inverse(other));
}

fn scalar__geometric_anti_quotient__magnitude(self_: Scalar, other: Magnitude) -> Scalar {
    return scalar__geometric_anti_product__magnitude(self_, magnitude__anti_inverse(other));
}

fn scalar__geometric_anti_quotient__motor(self_: Scalar, other: Motor) -> MultiVectorAtInfinity {
    return scalar__geometric_anti_product__motor(self_, motor__anti_inverse(other));
}

fn scalar__geometric_anti_quotient__multi_vector(self_: Scalar, other: MultiVector) -> MultiVectorAtInfinity {
    return scalar__geometric_anti_product__multi_vector(self_, multi_vector__anti_inverse(other));
}

fn scalar__geometric_anti_quotient__multi_vector_at_origin(self_: Scalar, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return scalar__geometric_anti_product__multi_vector_at_origin(self_, multi_vector_at_origin__anti_inverse(other));
}

fn scalar__geometric_anti_quotient__origin(self_: Scalar, other: Origin) -> Horizon {
    return scalar__geometric_anti_product__origin(self_, origin__anti_inverse(other));
}

fn scalar__geometric_anti_quotient__plane(self_: Scalar, other: Plane) -> PointAtInfinity {
    return scalar__geometric_anti_product__plane(self_, plane__anti_inverse(other));
}

fn scalar__geometric_anti_quotient__plane_at_origin(self_: Scalar, other: PlaneAtOrigin) -> PointAtInfinity {
    return scalar__geometric_anti_product__plane_at_origin(self_, plane_at_origin__anti_inverse(other));
}

fn scalar__geometric_anti_quotient__point(self_: Scalar, other: Point) -> Horizon {
    return scalar__geometric_anti_product__point(self_, point__anti_inverse(other));
}

fn scalar__geometric_anti_quotient__rotor(self_: Scalar, other: Rotor) -> MultiVectorAtInfinity {
    return scalar__geometric_anti_product__rotor(self_, rotor__anti_inverse(other));
}

fn scalar__geometric_anti_quotient__transflector(self_: Scalar, other: Transflector) -> PointAtInfinity {
    return scalar__geometric_anti_product__transflector(self_, transflector__anti_inverse(other));
}

fn scalar__geometric_anti_quotient__translator(self_: Scalar, other: Translator) -> Scalar {
    return scalar__geometric_anti_product__translator(self_, translator__anti_inverse(other));
}

fn transflector__geometric_anti_quotient__anti_scalar(self_: Transflector, other: AntiScalar) -> Transflector {
    return transflector__geometric_anti_product__anti_scalar(self_, anti_scalar__anti_inverse(other));
}

fn transflector__geometric_anti_quotient__flector(self_: Transflector, other: Flector) -> MultiVector {
    return transflector__geometric_anti_product__flector(self_, flector__anti_inverse(other));
}

fn transflector__geometric_anti_quotient__line(self_: Transflector, other: Line) -> Flector {
    return transflector__geometric_anti_product__line(self_, line__anti_inverse(other));
}

fn transflector__geometric_anti_quotient__line_at_origin(self_: Transflector, other: LineAtOrigin) -> Flector {
    return transflector__geometric_anti_product__line_at_origin(self_, line_at_origin__anti_inverse(other));
}

fn transflector__geometric_anti_quotient__magnitude(self_: Transflector, other: Magnitude) -> Transflector {
    return transflector__geometric_anti_product__magnitude(self_, magnitude__anti_inverse(other));
}

fn transflector__geometric_anti_quotient__motor(self_: Transflector, other: Motor) -> Flector {
    return transflector__geometric_anti_product__motor(self_, motor__anti_inverse(other));
}

fn transflector__geometric_anti_quotient__multi_vector(self_: Transflector, other: MultiVector) -> MultiVector {
    return transflector__geometric_anti_product__multi_vector(self_, multi_vector__anti_inverse(other));
}

fn transflector__geometric_anti_quotient__multi_vector_at_origin(self_: Transflector, other: MultiVectorAtOrigin) -> MultiVector {
    return transflector__geometric_anti_product__multi_vector_at_origin(self_, multi_vector_at_origin__anti_inverse(other));
}

fn transflector__geometric_anti_quotient__origin(self_: Transflector, other: Origin) -> MultiVector {
    return transflector__geometric_anti_product__origin(self_, origin__anti_inverse(other));
}

fn transflector__geometric_anti_quotient__plane(self_: Transflector, other: Plane) -> MultiVector {
    return transflector__geometric_anti_product__plane(self_, plane__anti_inverse(other));
}

fn transflector__geometric_anti_quotient__plane_at_origin(self_: Transflector, other: PlaneAtOrigin) -> MultiVector {
    return transflector__geometric_anti_product__plane_at_origin(self_, plane_at_origin__anti_inverse(other));
}

fn transflector__geometric_anti_quotient__point(self_: Transflector, other: Point) -> MultiVector {
    return transflector__geometric_anti_product__point(self_, point__anti_inverse(other));
}

fn transflector__geometric_anti_quotient__rotor(self_: Transflector, other: Rotor) -> Flector {
    return transflector__geometric_anti_product__rotor(self_, rotor__anti_inverse(other));
}

fn transflector__geometric_anti_quotient__transflector(self_: Transflector, other: Transflector) -> MultiVector {
    return transflector__geometric_anti_product__transflector(self_, transflector__anti_inverse(other));
}

fn transflector__geometric_anti_quotient__translator(self_: Transflector, other: Translator) -> Transflector {
    return transflector__geometric_anti_product__translator(self_, translator__anti_inverse(other));
}

fn translator__geometric_anti_quotient__anti_scalar(self_: Translator, other: AntiScalar) -> Translator {
    return translator__geometric_anti_product__anti_scalar(self_, anti_scalar__anti_inverse(other));
}

fn translator__geometric_anti_quotient__flector(self_: Translator, other: Flector) -> Flector {
    return translator__geometric_anti_product__flector(self_, flector__anti_inverse(other));
}

fn translator__geometric_anti_quotient__line(self_: Translator, other: Line) -> MultiVector {
    return translator__geometric_anti_product__line(self_, line__anti_inverse(other));
}

fn translator__geometric_anti_quotient__line_at_origin(self_: Translator, other: LineAtOrigin) -> MultiVector {
    return translator__geometric_anti_product__line_at_origin(self_, line_at_origin__anti_inverse(other));
}

fn translator__geometric_anti_quotient__magnitude(self_: Translator, other: Magnitude) -> MultiVector {
    return translator__geometric_anti_product__magnitude(self_, magnitude__anti_inverse(other));
}

fn translator__geometric_anti_quotient__motor(self_: Translator, other: Motor) -> MultiVector {
    return translator__geometric_anti_product__motor(self_, motor__anti_inverse(other));
}

fn translator__geometric_anti_quotient__multi_vector(self_: Translator, other: MultiVector) -> MultiVector {
    return translator__geometric_anti_product__multi_vector(self_, multi_vector__anti_inverse(other));
}

fn translator__geometric_anti_quotient__multi_vector_at_origin(self_: Translator, other: MultiVectorAtOrigin) -> MultiVector {
    return translator__geometric_anti_product__multi_vector_at_origin(self_, multi_vector_at_origin__anti_inverse(other));
}

fn translator__geometric_anti_quotient__origin(self_: Translator, other: Origin) -> Point {
    return translator__geometric_anti_product__origin(self_, origin__anti_inverse(other));
}

fn translator__geometric_anti_quotient__plane(self_: Translator, other: Plane) -> Transflector {
    return translator__geometric_anti_product__plane(self_, plane__anti_inverse(other));
}

fn translator__geometric_anti_quotient__plane_at_origin(self_: Translator, other: PlaneAtOrigin) -> Transflector {
    return translator__geometric_anti_product__plane_at_origin(self_, plane_at_origin__anti_inverse(other));
}

fn translator__geometric_anti_quotient__point(self_: Translator, other: Point) -> Point {
    return translator__geometric_anti_product__point(self_, point__anti_inverse(other));
}

fn translator__geometric_anti_quotient__rotor(self_: Translator, other: Rotor) -> MultiVector {
    return translator__geometric_anti_product__rotor(self_, rotor__anti_inverse(other));
}

fn translator__geometric_anti_quotient__transflector(self_: Translator, other: Transflector) -> Transflector {
    return translator__geometric_anti_product__transflector(self_, transflector__anti_inverse(other));
}

fn translator__geometric_anti_quotient__translator(self_: Translator, other: Translator) -> Translator {
    return translator__geometric_anti_product__translator(self_, translator__anti_inverse(other));
}

fn anti_scalar__geometric_quotient__flector(self_: AntiScalar, other: Flector) -> Flector {
    return anti_scalar__geometric_product__flector(self_, flector__inverse(other));
}

fn anti_scalar__geometric_quotient__flector_at_infinity(self_: AntiScalar, other: FlectorAtInfinity) -> Flector {
    return anti_scalar__geometric_product__flector_at_infinity(self_, flector_at_infinity__inverse(other));
}

fn anti_scalar__geometric_quotient__horizon(self_: AntiScalar, other: Horizon) -> Origin {
    return anti_scalar__geometric_product__horizon(self_, horizon__inverse(other));
}

fn anti_scalar__geometric_quotient__line(self_: AntiScalar, other: Line) -> LineAtOrigin {
    return anti_scalar__geometric_product__line(self_, line__inverse(other));
}

fn anti_scalar__geometric_quotient__line_at_infinity(self_: AntiScalar, other: LineAtInfinity) -> LineAtOrigin {
    return anti_scalar__geometric_product__line_at_infinity(self_, line_at_infinity__inverse(other));
}

fn anti_scalar__geometric_quotient__magnitude(self_: AntiScalar, other: Magnitude) -> AntiScalar {
    return anti_scalar__geometric_product__magnitude(self_, magnitude__inverse(other));
}

fn anti_scalar__geometric_quotient__motor(self_: AntiScalar, other: Motor) -> LineAtOrigin {
    return anti_scalar__geometric_product__motor(self_, motor__inverse(other));
}

fn anti_scalar__geometric_quotient__multi_vector(self_: AntiScalar, other: MultiVector) -> MultiVectorAtOrigin {
    return anti_scalar__geometric_product__multi_vector(self_, multi_vector__inverse(other));
}

fn anti_scalar__geometric_quotient__multi_vector_at_infinity(self_: AntiScalar, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return anti_scalar__geometric_product__multi_vector_at_infinity(self_, multi_vector_at_infinity__inverse(other));
}

fn anti_scalar__geometric_quotient__plane(self_: AntiScalar, other: Plane) -> Origin {
    return anti_scalar__geometric_product__plane(self_, plane__inverse(other));
}

fn anti_scalar__geometric_quotient__point(self_: AntiScalar, other: Point) -> PlaneAtOrigin {
    return anti_scalar__geometric_product__point(self_, point__inverse(other));
}

fn anti_scalar__geometric_quotient__point_at_infinity(self_: AntiScalar, other: PointAtInfinity) -> PlaneAtOrigin {
    return anti_scalar__geometric_product__point_at_infinity(self_, point_at_infinity__inverse(other));
}

fn anti_scalar__geometric_quotient__scalar(self_: AntiScalar, other: Scalar) -> AntiScalar {
    return anti_scalar__geometric_product__scalar(self_, scalar__inverse(other));
}

fn anti_scalar__geometric_quotient__transflector(self_: AntiScalar, other: Transflector) -> Flector {
    return anti_scalar__geometric_product__transflector(self_, transflector__inverse(other));
}

fn anti_scalar__geometric_quotient__translator(self_: AntiScalar, other: Translator) -> LineAtOrigin {
    return anti_scalar__geometric_product__translator(self_, translator__inverse(other));
}

fn flector__geometric_quotient__flector(self_: Flector, other: Flector) -> MultiVector {
    return flector__geometric_product__flector(self_, flector__inverse(other));
}

fn flector__geometric_quotient__flector_at_infinity(self_: Flector, other: FlectorAtInfinity) -> MultiVector {
    return flector__geometric_product__flector_at_infinity(self_, flector_at_infinity__inverse(other));
}

fn flector__geometric_quotient__horizon(self_: Flector, other: Horizon) -> MultiVector {
    return flector__geometric_product__horizon(self_, horizon__inverse(other));
}

fn flector__geometric_quotient__line(self_: Flector, other: Line) -> Flector {
    return flector__geometric_product__line(self_, line__inverse(other));
}

fn flector__geometric_quotient__line_at_infinity(self_: Flector, other: LineAtInfinity) -> Flector {
    return flector__geometric_product__line_at_infinity(self_, line_at_infinity__inverse(other));
}

fn flector__geometric_quotient__magnitude(self_: Flector, other: Magnitude) -> Flector {
    return flector__geometric_product__magnitude(self_, magnitude__inverse(other));
}

fn flector__geometric_quotient__motor(self_: Flector, other: Motor) -> Flector {
    return flector__geometric_product__motor(self_, motor__inverse(other));
}

fn flector__geometric_quotient__multi_vector(self_: Flector, other: MultiVector) -> MultiVector {
    return flector__geometric_product__multi_vector(self_, multi_vector__inverse(other));
}

fn flector__geometric_quotient__multi_vector_at_infinity(self_: Flector, other: MultiVectorAtInfinity) -> MultiVector {
    return flector__geometric_product__multi_vector_at_infinity(self_, multi_vector_at_infinity__inverse(other));
}

fn flector__geometric_quotient__plane(self_: Flector, other: Plane) -> MultiVector {
    return flector__geometric_product__plane(self_, plane__inverse(other));
}

fn flector__geometric_quotient__point(self_: Flector, other: Point) -> MultiVector {
    return flector__geometric_product__point(self_, point__inverse(other));
}

fn flector__geometric_quotient__point_at_infinity(self_: Flector, other: PointAtInfinity) -> MultiVector {
    return flector__geometric_product__point_at_infinity(self_, point_at_infinity__inverse(other));
}

fn flector__geometric_quotient__scalar(self_: Flector, other: Scalar) -> Flector {
    return flector__geometric_product__scalar(self_, scalar__inverse(other));
}

fn flector__geometric_quotient__transflector(self_: Flector, other: Transflector) -> MultiVector {
    return flector__geometric_product__transflector(self_, transflector__inverse(other));
}

fn flector__geometric_quotient__translator(self_: Flector, other: Translator) -> Flector {
    return flector__geometric_product__translator(self_, translator__inverse(other));
}

fn flector_at_infinity__geometric_quotient__flector(self_: FlectorAtInfinity, other: Flector) -> MultiVector {
    return flector_at_infinity__geometric_product__flector(self_, flector__inverse(other));
}

fn flector_at_infinity__geometric_quotient__flector_at_infinity(self_: FlectorAtInfinity, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return flector_at_infinity__geometric_product__flector_at_infinity(self_, flector_at_infinity__inverse(other));
}

fn flector_at_infinity__geometric_quotient__horizon(self_: FlectorAtInfinity, other: Horizon) -> MultiVectorAtInfinity {
    return flector_at_infinity__geometric_product__horizon(self_, horizon__inverse(other));
}

fn flector_at_infinity__geometric_quotient__line(self_: FlectorAtInfinity, other: Line) -> Flector {
    return flector_at_infinity__geometric_product__line(self_, line__inverse(other));
}

fn flector_at_infinity__geometric_quotient__line_at_infinity(self_: FlectorAtInfinity, other: LineAtInfinity) -> FlectorAtInfinity {
    return flector_at_infinity__geometric_product__line_at_infinity(self_, line_at_infinity__inverse(other));
}

fn flector_at_infinity__geometric_quotient__magnitude(self_: FlectorAtInfinity, other: Magnitude) -> Flector {
    return flector_at_infinity__geometric_product__magnitude(self_, magnitude__inverse(other));
}

fn flector_at_infinity__geometric_quotient__motor(self_: FlectorAtInfinity, other: Motor) -> Flector {
    return flector_at_infinity__geometric_product__motor(self_, motor__inverse(other));
}

fn flector_at_infinity__geometric_quotient__multi_vector(self_: FlectorAtInfinity, other: MultiVector) -> MultiVector {
    return flector_at_infinity__geometric_product__multi_vector(self_, multi_vector__inverse(other));
}

fn flector_at_infinity__geometric_quotient__multi_vector_at_infinity(self_: FlectorAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return flector_at_infinity__geometric_product__multi_vector_at_infinity(self_, multi_vector_at_infinity__inverse(other));
}

fn flector_at_infinity__geometric_quotient__plane(self_: FlectorAtInfinity, other: Plane) -> MultiVector {
    return flector_at_infinity__geometric_product__plane(self_, plane__inverse(other));
}

fn flector_at_infinity__geometric_quotient__point(self_: FlectorAtInfinity, other: Point) -> MultiVector {
    return flector_at_infinity__geometric_product__point(self_, point__inverse(other));
}

fn flector_at_infinity__geometric_quotient__point_at_infinity(self_: FlectorAtInfinity, other: PointAtInfinity) -> MultiVectorAtInfinity {
    return flector_at_infinity__geometric_product__point_at_infinity(self_, point_at_infinity__inverse(other));
}

fn flector_at_infinity__geometric_quotient__scalar(self_: FlectorAtInfinity, other: Scalar) -> FlectorAtInfinity {
    return flector_at_infinity__geometric_product__scalar(self_, scalar__inverse(other));
}

fn flector_at_infinity__geometric_quotient__transflector(self_: FlectorAtInfinity, other: Transflector) -> MultiVector {
    return flector_at_infinity__geometric_product__transflector(self_, transflector__inverse(other));
}

fn flector_at_infinity__geometric_quotient__translator(self_: FlectorAtInfinity, other: Translator) -> Flector {
    return flector_at_infinity__geometric_product__translator(self_, translator__inverse(other));
}

fn horizon__geometric_quotient__flector(self_: Horizon, other: Flector) -> MultiVector {
    return horizon__geometric_product__flector(self_, flector__inverse(other));
}

fn horizon__geometric_quotient__flector_at_infinity(self_: Horizon, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return horizon__geometric_product__flector_at_infinity(self_, flector_at_infinity__inverse(other));
}

fn horizon__geometric_quotient__horizon(self_: Horizon, other: Horizon) -> Scalar {
    return horizon__geometric_product__horizon(self_, horizon__inverse(other));
}

fn horizon__geometric_quotient__line(self_: Horizon, other: Line) -> Transflector {
    return horizon__geometric_product__line(self_, line__inverse(other));
}

fn horizon__geometric_quotient__line_at_infinity(self_: Horizon, other: LineAtInfinity) -> PointAtInfinity {
    return horizon__geometric_product__line_at_infinity(self_, line_at_infinity__inverse(other));
}

fn horizon__geometric_quotient__magnitude(self_: Horizon, other: Magnitude) -> Flector {
    return horizon__geometric_product__magnitude(self_, magnitude__inverse(other));
}

fn horizon__geometric_quotient__motor(self_: Horizon, other: Motor) -> Flector {
    return horizon__geometric_product__motor(self_, motor__inverse(other));
}

fn horizon__geometric_quotient__multi_vector(self_: Horizon, other: MultiVector) -> MultiVector {
    return horizon__geometric_product__multi_vector(self_, multi_vector__inverse(other));
}

fn horizon__geometric_quotient__multi_vector_at_infinity(self_: Horizon, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return horizon__geometric_product__multi_vector_at_infinity(self_, multi_vector_at_infinity__inverse(other));
}

fn horizon__geometric_quotient__plane(self_: Horizon, other: Plane) -> MultiVector {
    return horizon__geometric_product__plane(self_, plane__inverse(other));
}

fn horizon__geometric_quotient__point(self_: Horizon, other: Point) -> Translator {
    return horizon__geometric_product__point(self_, point__inverse(other));
}

fn horizon__geometric_quotient__point_at_infinity(self_: Horizon, other: PointAtInfinity) -> LineAtInfinity {
    return horizon__geometric_product__point_at_infinity(self_, point_at_infinity__inverse(other));
}

fn horizon__geometric_quotient__scalar(self_: Horizon, other: Scalar) -> Horizon {
    return horizon__geometric_product__scalar(self_, scalar__inverse(other));
}

fn horizon__geometric_quotient__transflector(self_: Horizon, other: Transflector) -> MultiVector {
    return horizon__geometric_product__transflector(self_, transflector__inverse(other));
}

fn horizon__geometric_quotient__translator(self_: Horizon, other: Translator) -> Point {
    return horizon__geometric_product__translator(self_, translator__inverse(other));
}

fn line__geometric_quotient__flector(self_: Line, other: Flector) -> Flector {
    return line__geometric_product__flector(self_, flector__inverse(other));
}

fn line__geometric_quotient__flector_at_infinity(self_: Line, other: FlectorAtInfinity) -> Flector {
    return line__geometric_product__flector_at_infinity(self_, flector_at_infinity__inverse(other));
}

fn line__geometric_quotient__horizon(self_: Line, other: Horizon) -> Transflector {
    return line__geometric_product__horizon(self_, horizon__inverse(other));
}

fn line__geometric_quotient__line(self_: Line, other: Line) -> MultiVector {
    return line__geometric_product__line(self_, line__inverse(other));
}

fn line__geometric_quotient__line_at_infinity(self_: Line, other: LineAtInfinity) -> MultiVector {
    return line__geometric_product__line_at_infinity(self_, line_at_infinity__inverse(other));
}

fn line__geometric_quotient__magnitude(self_: Line, other: Magnitude) -> Line {
    return line__geometric_product__magnitude(self_, magnitude__inverse(other));
}

fn line__geometric_quotient__motor(self_: Line, other: Motor) -> MultiVector {
    return line__geometric_product__motor(self_, motor__inverse(other));
}

fn line__geometric_quotient__multi_vector(self_: Line, other: MultiVector) -> MultiVector {
    return line__geometric_product__multi_vector(self_, multi_vector__inverse(other));
}

fn line__geometric_quotient__multi_vector_at_infinity(self_: Line, other: MultiVectorAtInfinity) -> MultiVector {
    return line__geometric_product__multi_vector_at_infinity(self_, multi_vector_at_infinity__inverse(other));
}

fn line__geometric_quotient__plane(self_: Line, other: Plane) -> Flector {
    return line__geometric_product__plane(self_, plane__inverse(other));
}

fn line__geometric_quotient__point(self_: Line, other: Point) -> Flector {
    return line__geometric_product__point(self_, point__inverse(other));
}

fn line__geometric_quotient__point_at_infinity(self_: Line, other: PointAtInfinity) -> Flector {
    return line__geometric_product__point_at_infinity(self_, point_at_infinity__inverse(other));
}

fn line__geometric_quotient__scalar(self_: Line, other: Scalar) -> Line {
    return line__geometric_product__scalar(self_, scalar__inverse(other));
}

fn line__geometric_quotient__transflector(self_: Line, other: Transflector) -> Flector {
    return line__geometric_product__transflector(self_, transflector__inverse(other));
}

fn line__geometric_quotient__translator(self_: Line, other: Translator) -> MultiVector {
    return line__geometric_product__translator(self_, translator__inverse(other));
}

fn line_at_infinity__geometric_quotient__flector(self_: LineAtInfinity, other: Flector) -> Flector {
    return line_at_infinity__geometric_product__flector(self_, flector__inverse(other));
}

fn line_at_infinity__geometric_quotient__flector_at_infinity(self_: LineAtInfinity, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return line_at_infinity__geometric_product__flector_at_infinity(self_, flector_at_infinity__inverse(other));
}

fn line_at_infinity__geometric_quotient__horizon(self_: LineAtInfinity, other: Horizon) -> PointAtInfinity {
    return line_at_infinity__geometric_product__horizon(self_, horizon__inverse(other));
}

fn line_at_infinity__geometric_quotient__line(self_: LineAtInfinity, other: Line) -> MultiVector {
    return line_at_infinity__geometric_product__line(self_, line__inverse(other));
}

fn line_at_infinity__geometric_quotient__line_at_infinity(self_: LineAtInfinity, other: LineAtInfinity) -> MultiVectorAtInfinity {
    return line_at_infinity__geometric_product__line_at_infinity(self_, line_at_infinity__inverse(other));
}

fn line_at_infinity__geometric_quotient__magnitude(self_: LineAtInfinity, other: Magnitude) -> Line {
    return line_at_infinity__geometric_product__magnitude(self_, magnitude__inverse(other));
}

fn line_at_infinity__geometric_quotient__motor(self_: LineAtInfinity, other: Motor) -> MultiVector {
    return line_at_infinity__geometric_product__motor(self_, motor__inverse(other));
}

fn line_at_infinity__geometric_quotient__multi_vector(self_: LineAtInfinity, other: MultiVector) -> MultiVector {
    return line_at_infinity__geometric_product__multi_vector(self_, multi_vector__inverse(other));
}

fn line_at_infinity__geometric_quotient__multi_vector_at_infinity(self_: LineAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return line_at_infinity__geometric_product__multi_vector_at_infinity(self_, multi_vector_at_infinity__inverse(other));
}

fn line_at_infinity__geometric_quotient__plane(self_: LineAtInfinity, other: Plane) -> Flector {
    return line_at_infinity__geometric_product__plane(self_, plane__inverse(other));
}

fn line_at_infinity__geometric_quotient__point(self_: LineAtInfinity, other: Point) -> Transflector {
    return line_at_infinity__geometric_product__point(self_, point__inverse(other));
}

fn line_at_infinity__geometric_quotient__point_at_infinity(self_: LineAtInfinity, other: PointAtInfinity) -> FlectorAtInfinity {
    return line_at_infinity__geometric_product__point_at_infinity(self_, point_at_infinity__inverse(other));
}

fn line_at_infinity__geometric_quotient__scalar(self_: LineAtInfinity, other: Scalar) -> LineAtInfinity {
    return line_at_infinity__geometric_product__scalar(self_, scalar__inverse(other));
}

fn line_at_infinity__geometric_quotient__transflector(self_: LineAtInfinity, other: Transflector) -> Flector {
    return line_at_infinity__geometric_product__transflector(self_, transflector__inverse(other));
}

fn line_at_infinity__geometric_quotient__translator(self_: LineAtInfinity, other: Translator) -> MultiVector {
    return line_at_infinity__geometric_product__translator(self_, translator__inverse(other));
}

fn line_at_origin__geometric_quotient__flector(self_: LineAtOrigin, other: Flector) -> Flector {
    return line_at_origin__geometric_product__flector(self_, flector__inverse(other));
}

fn line_at_origin__geometric_quotient__flector_at_infinity(self_: LineAtOrigin, other: FlectorAtInfinity) -> Flector {
    return line_at_origin__geometric_product__flector_at_infinity(self_, flector_at_infinity__inverse(other));
}

fn line_at_origin__geometric_quotient__horizon(self_: LineAtOrigin, other: Horizon) -> PlaneAtOrigin {
    return line_at_origin__geometric_product__horizon(self_, horizon__inverse(other));
}

fn line_at_origin__geometric_quotient__line(self_: LineAtOrigin, other: Line) -> Rotor {
    return line_at_origin__geometric_product__line(self_, line__inverse(other));
}

fn line_at_origin__geometric_quotient__line_at_infinity(self_: LineAtOrigin, other: LineAtInfinity) -> Rotor {
    return line_at_origin__geometric_product__line_at_infinity(self_, line_at_infinity__inverse(other));
}

fn line_at_origin__geometric_quotient__magnitude(self_: LineAtOrigin, other: Magnitude) -> LineAtOrigin {
    return line_at_origin__geometric_product__magnitude(self_, magnitude__inverse(other));
}

fn line_at_origin__geometric_quotient__motor(self_: LineAtOrigin, other: Motor) -> Rotor {
    return line_at_origin__geometric_product__motor(self_, motor__inverse(other));
}

fn line_at_origin__geometric_quotient__multi_vector(self_: LineAtOrigin, other: MultiVector) -> MultiVectorAtOrigin {
    return line_at_origin__geometric_product__multi_vector(self_, multi_vector__inverse(other));
}

fn line_at_origin__geometric_quotient__multi_vector_at_infinity(self_: LineAtOrigin, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return line_at_origin__geometric_product__multi_vector_at_infinity(self_, multi_vector_at_infinity__inverse(other));
}

fn line_at_origin__geometric_quotient__plane(self_: LineAtOrigin, other: Plane) -> PlaneAtOrigin {
    return line_at_origin__geometric_product__plane(self_, plane__inverse(other));
}

fn line_at_origin__geometric_quotient__point(self_: LineAtOrigin, other: Point) -> Flector {
    return line_at_origin__geometric_product__point(self_, point__inverse(other));
}

fn line_at_origin__geometric_quotient__point_at_infinity(self_: LineAtOrigin, other: PointAtInfinity) -> Flector {
    return line_at_origin__geometric_product__point_at_infinity(self_, point_at_infinity__inverse(other));
}

fn line_at_origin__geometric_quotient__scalar(self_: LineAtOrigin, other: Scalar) -> LineAtOrigin {
    return line_at_origin__geometric_product__scalar(self_, scalar__inverse(other));
}

fn line_at_origin__geometric_quotient__transflector(self_: LineAtOrigin, other: Transflector) -> Flector {
    return line_at_origin__geometric_product__transflector(self_, transflector__inverse(other));
}

fn line_at_origin__geometric_quotient__translator(self_: LineAtOrigin, other: Translator) -> Rotor {
    return line_at_origin__geometric_product__translator(self_, translator__inverse(other));
}

fn magnitude__geometric_quotient__flector(self_: Magnitude, other: Flector) -> Flector {
    return magnitude__geometric_product__flector(self_, flector__inverse(other));
}

fn magnitude__geometric_quotient__flector_at_infinity(self_: Magnitude, other: FlectorAtInfinity) -> Flector {
    return magnitude__geometric_product__flector_at_infinity(self_, flector_at_infinity__inverse(other));
}

fn magnitude__geometric_quotient__horizon(self_: Magnitude, other: Horizon) -> Flector {
    return magnitude__geometric_product__horizon(self_, horizon__inverse(other));
}

fn magnitude__geometric_quotient__line(self_: Magnitude, other: Line) -> Line {
    return magnitude__geometric_product__line(self_, line__inverse(other));
}

fn magnitude__geometric_quotient__line_at_infinity(self_: Magnitude, other: LineAtInfinity) -> Line {
    return magnitude__geometric_product__line_at_infinity(self_, line_at_infinity__inverse(other));
}

fn magnitude__geometric_quotient__magnitude(self_: Magnitude, other: Magnitude) -> Magnitude {
    return magnitude__geometric_product__magnitude(self_, magnitude__inverse(other));
}

fn magnitude__geometric_quotient__motor(self_: Magnitude, other: Motor) -> Motor {
    return magnitude__geometric_product__motor(self_, motor__inverse(other));
}

fn magnitude__geometric_quotient__multi_vector(self_: Magnitude, other: MultiVector) -> MultiVector {
    return magnitude__geometric_product__multi_vector(self_, multi_vector__inverse(other));
}

fn magnitude__geometric_quotient__multi_vector_at_infinity(self_: Magnitude, other: MultiVectorAtInfinity) -> MultiVector {
    return magnitude__geometric_product__multi_vector_at_infinity(self_, multi_vector_at_infinity__inverse(other));
}

fn magnitude__geometric_quotient__plane(self_: Magnitude, other: Plane) -> Flector {
    return magnitude__geometric_product__plane(self_, plane__inverse(other));
}

fn magnitude__geometric_quotient__point(self_: Magnitude, other: Point) -> Flector {
    return magnitude__geometric_product__point(self_, point__inverse(other));
}

fn magnitude__geometric_quotient__point_at_infinity(self_: Magnitude, other: PointAtInfinity) -> Transflector {
    return magnitude__geometric_product__point_at_infinity(self_, point_at_infinity__inverse(other));
}

fn magnitude__geometric_quotient__scalar(self_: Magnitude, other: Scalar) -> Magnitude {
    return magnitude__geometric_product__scalar(self_, scalar__inverse(other));
}

fn magnitude__geometric_quotient__transflector(self_: Magnitude, other: Transflector) -> Flector {
    return magnitude__geometric_product__transflector(self_, transflector__inverse(other));
}

fn magnitude__geometric_quotient__translator(self_: Magnitude, other: Translator) -> Motor {
    return magnitude__geometric_product__translator(self_, translator__inverse(other));
}

fn motor__geometric_quotient__flector(self_: Motor, other: Flector) -> Flector {
    return motor__geometric_product__flector(self_, flector__inverse(other));
}

fn motor__geometric_quotient__flector_at_infinity(self_: Motor, other: FlectorAtInfinity) -> Flector {
    return motor__geometric_product__flector_at_infinity(self_, flector_at_infinity__inverse(other));
}

fn motor__geometric_quotient__horizon(self_: Motor, other: Horizon) -> Flector {
    return motor__geometric_product__horizon(self_, horizon__inverse(other));
}

fn motor__geometric_quotient__line(self_: Motor, other: Line) -> MultiVector {
    return motor__geometric_product__line(self_, line__inverse(other));
}

fn motor__geometric_quotient__line_at_infinity(self_: Motor, other: LineAtInfinity) -> MultiVector {
    return motor__geometric_product__line_at_infinity(self_, line_at_infinity__inverse(other));
}

fn motor__geometric_quotient__magnitude(self_: Motor, other: Magnitude) -> Motor {
    return motor__geometric_product__magnitude(self_, magnitude__inverse(other));
}

fn motor__geometric_quotient__motor(self_: Motor, other: Motor) -> MultiVector {
    return motor__geometric_product__motor(self_, motor__inverse(other));
}

fn motor__geometric_quotient__multi_vector(self_: Motor, other: MultiVector) -> MultiVector {
    return motor__geometric_product__multi_vector(self_, multi_vector__inverse(other));
}

fn motor__geometric_quotient__multi_vector_at_infinity(self_: Motor, other: MultiVectorAtInfinity) -> MultiVector {
    return motor__geometric_product__multi_vector_at_infinity(self_, multi_vector_at_infinity__inverse(other));
}

fn motor__geometric_quotient__plane(self_: Motor, other: Plane) -> Flector {
    return motor__geometric_product__plane(self_, plane__inverse(other));
}

fn motor__geometric_quotient__point(self_: Motor, other: Point) -> Flector {
    return motor__geometric_product__point(self_, point__inverse(other));
}

fn motor__geometric_quotient__point_at_infinity(self_: Motor, other: PointAtInfinity) -> Flector {
    return motor__geometric_product__point_at_infinity(self_, point_at_infinity__inverse(other));
}

fn motor__geometric_quotient__scalar(self_: Motor, other: Scalar) -> Motor {
    return motor__geometric_product__scalar(self_, scalar__inverse(other));
}

fn motor__geometric_quotient__transflector(self_: Motor, other: Transflector) -> Flector {
    return motor__geometric_product__transflector(self_, transflector__inverse(other));
}

fn motor__geometric_quotient__translator(self_: Motor, other: Translator) -> MultiVector {
    return motor__geometric_product__translator(self_, translator__inverse(other));
}

fn multi_vector__geometric_quotient__flector(self_: MultiVector, other: Flector) -> MultiVector {
    return multi_vector__geometric_product__flector(self_, flector__inverse(other));
}

fn multi_vector__geometric_quotient__flector_at_infinity(self_: MultiVector, other: FlectorAtInfinity) -> MultiVector {
    return multi_vector__geometric_product__flector_at_infinity(self_, flector_at_infinity__inverse(other));
}

fn multi_vector__geometric_quotient__horizon(self_: MultiVector, other: Horizon) -> MultiVector {
    return multi_vector__geometric_product__horizon(self_, horizon__inverse(other));
}

fn multi_vector__geometric_quotient__line(self_: MultiVector, other: Line) -> MultiVector {
    return multi_vector__geometric_product__line(self_, line__inverse(other));
}

fn multi_vector__geometric_quotient__line_at_infinity(self_: MultiVector, other: LineAtInfinity) -> MultiVector {
    return multi_vector__geometric_product__line_at_infinity(self_, line_at_infinity__inverse(other));
}

fn multi_vector__geometric_quotient__magnitude(self_: MultiVector, other: Magnitude) -> MultiVector {
    return multi_vector__geometric_product__magnitude(self_, magnitude__inverse(other));
}

fn multi_vector__geometric_quotient__motor(self_: MultiVector, other: Motor) -> MultiVector {
    return multi_vector__geometric_product__motor(self_, motor__inverse(other));
}

fn multi_vector__geometric_quotient__multi_vector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return multi_vector__geometric_product__multi_vector(self_, multi_vector__inverse(other));
}

fn multi_vector__geometric_quotient__multi_vector_at_infinity(self_: MultiVector, other: MultiVectorAtInfinity) -> MultiVector {
    return multi_vector__geometric_product__multi_vector_at_infinity(self_, multi_vector_at_infinity__inverse(other));
}

fn multi_vector__geometric_quotient__plane(self_: MultiVector, other: Plane) -> MultiVector {
    return multi_vector__geometric_product__plane(self_, plane__inverse(other));
}

fn multi_vector__geometric_quotient__point(self_: MultiVector, other: Point) -> MultiVector {
    return multi_vector__geometric_product__point(self_, point__inverse(other));
}

fn multi_vector__geometric_quotient__point_at_infinity(self_: MultiVector, other: PointAtInfinity) -> MultiVector {
    return multi_vector__geometric_product__point_at_infinity(self_, point_at_infinity__inverse(other));
}

fn multi_vector__geometric_quotient__scalar(self_: MultiVector, other: Scalar) -> MultiVector {
    return multi_vector__geometric_product__scalar(self_, scalar__inverse(other));
}

fn multi_vector__geometric_quotient__transflector(self_: MultiVector, other: Transflector) -> MultiVector {
    return multi_vector__geometric_product__transflector(self_, transflector__inverse(other));
}

fn multi_vector__geometric_quotient__translator(self_: MultiVector, other: Translator) -> MultiVector {
    return multi_vector__geometric_product__translator(self_, translator__inverse(other));
}

fn multi_vector_at_infinity__geometric_quotient__flector(self_: MultiVectorAtInfinity, other: Flector) -> MultiVector {
    return multi_vector_at_infinity__geometric_product__flector(self_, flector__inverse(other));
}

fn multi_vector_at_infinity__geometric_quotient__flector_at_infinity(self_: MultiVectorAtInfinity, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__geometric_product__flector_at_infinity(self_, flector_at_infinity__inverse(other));
}

fn multi_vector_at_infinity__geometric_quotient__horizon(self_: MultiVectorAtInfinity, other: Horizon) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__geometric_product__horizon(self_, horizon__inverse(other));
}

fn multi_vector_at_infinity__geometric_quotient__line(self_: MultiVectorAtInfinity, other: Line) -> MultiVector {
    return multi_vector_at_infinity__geometric_product__line(self_, line__inverse(other));
}

fn multi_vector_at_infinity__geometric_quotient__line_at_infinity(self_: MultiVectorAtInfinity, other: LineAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__geometric_product__line_at_infinity(self_, line_at_infinity__inverse(other));
}

fn multi_vector_at_infinity__geometric_quotient__magnitude(self_: MultiVectorAtInfinity, other: Magnitude) -> MultiVector {
    return multi_vector_at_infinity__geometric_product__magnitude(self_, magnitude__inverse(other));
}

fn multi_vector_at_infinity__geometric_quotient__motor(self_: MultiVectorAtInfinity, other: Motor) -> MultiVector {
    return multi_vector_at_infinity__geometric_product__motor(self_, motor__inverse(other));
}

fn multi_vector_at_infinity__geometric_quotient__multi_vector(self_: MultiVectorAtInfinity, other: MultiVector) -> MultiVector {
    return multi_vector_at_infinity__geometric_product__multi_vector(self_, multi_vector__inverse(other));
}

fn multi_vector_at_infinity__geometric_quotient__multi_vector_at_infinity(self_: MultiVectorAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__geometric_product__multi_vector_at_infinity(self_, multi_vector_at_infinity__inverse(other));
}

fn multi_vector_at_infinity__geometric_quotient__plane(self_: MultiVectorAtInfinity, other: Plane) -> MultiVector {
    return multi_vector_at_infinity__geometric_product__plane(self_, plane__inverse(other));
}

fn multi_vector_at_infinity__geometric_quotient__point(self_: MultiVectorAtInfinity, other: Point) -> MultiVector {
    return multi_vector_at_infinity__geometric_product__point(self_, point__inverse(other));
}

fn multi_vector_at_infinity__geometric_quotient__point_at_infinity(self_: MultiVectorAtInfinity, other: PointAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__geometric_product__point_at_infinity(self_, point_at_infinity__inverse(other));
}

fn multi_vector_at_infinity__geometric_quotient__scalar(self_: MultiVectorAtInfinity, other: Scalar) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__geometric_product__scalar(self_, scalar__inverse(other));
}

fn multi_vector_at_infinity__geometric_quotient__transflector(self_: MultiVectorAtInfinity, other: Transflector) -> MultiVector {
    return multi_vector_at_infinity__geometric_product__transflector(self_, transflector__inverse(other));
}

fn multi_vector_at_infinity__geometric_quotient__translator(self_: MultiVectorAtInfinity, other: Translator) -> MultiVector {
    return multi_vector_at_infinity__geometric_product__translator(self_, translator__inverse(other));
}

fn multi_vector_at_origin__geometric_quotient__flector(self_: MultiVectorAtOrigin, other: Flector) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__geometric_product__flector(self_, flector__inverse(other));
}

fn multi_vector_at_origin__geometric_quotient__flector_at_infinity(self_: MultiVectorAtOrigin, other: FlectorAtInfinity) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__geometric_product__flector_at_infinity(self_, flector_at_infinity__inverse(other));
}

fn multi_vector_at_origin__geometric_quotient__horizon(self_: MultiVectorAtOrigin, other: Horizon) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__geometric_product__horizon(self_, horizon__inverse(other));
}

fn multi_vector_at_origin__geometric_quotient__line(self_: MultiVectorAtOrigin, other: Line) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__geometric_product__line(self_, line__inverse(other));
}

fn multi_vector_at_origin__geometric_quotient__line_at_infinity(self_: MultiVectorAtOrigin, other: LineAtInfinity) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__geometric_product__line_at_infinity(self_, line_at_infinity__inverse(other));
}

fn multi_vector_at_origin__geometric_quotient__magnitude(self_: MultiVectorAtOrigin, other: Magnitude) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__geometric_product__magnitude(self_, magnitude__inverse(other));
}

fn multi_vector_at_origin__geometric_quotient__motor(self_: MultiVectorAtOrigin, other: Motor) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__geometric_product__motor(self_, motor__inverse(other));
}

fn multi_vector_at_origin__geometric_quotient__multi_vector(self_: MultiVectorAtOrigin, other: MultiVector) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__geometric_product__multi_vector(self_, multi_vector__inverse(other));
}

fn multi_vector_at_origin__geometric_quotient__multi_vector_at_infinity(self_: MultiVectorAtOrigin, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__geometric_product__multi_vector_at_infinity(self_, multi_vector_at_infinity__inverse(other));
}

fn multi_vector_at_origin__geometric_quotient__plane(self_: MultiVectorAtOrigin, other: Plane) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__geometric_product__plane(self_, plane__inverse(other));
}

fn multi_vector_at_origin__geometric_quotient__point(self_: MultiVectorAtOrigin, other: Point) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__geometric_product__point(self_, point__inverse(other));
}

fn multi_vector_at_origin__geometric_quotient__point_at_infinity(self_: MultiVectorAtOrigin, other: PointAtInfinity) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__geometric_product__point_at_infinity(self_, point_at_infinity__inverse(other));
}

fn multi_vector_at_origin__geometric_quotient__scalar(self_: MultiVectorAtOrigin, other: Scalar) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__geometric_product__scalar(self_, scalar__inverse(other));
}

fn multi_vector_at_origin__geometric_quotient__transflector(self_: MultiVectorAtOrigin, other: Transflector) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__geometric_product__transflector(self_, transflector__inverse(other));
}

fn multi_vector_at_origin__geometric_quotient__translator(self_: MultiVectorAtOrigin, other: Translator) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__geometric_product__translator(self_, translator__inverse(other));
}

fn origin__geometric_quotient__flector(self_: Origin, other: Flector) -> Rotor {
    return origin__geometric_product__flector(self_, flector__inverse(other));
}

fn origin__geometric_quotient__flector_at_infinity(self_: Origin, other: FlectorAtInfinity) -> Rotor {
    return origin__geometric_product__flector_at_infinity(self_, flector_at_infinity__inverse(other));
}

fn origin__geometric_quotient__horizon(self_: Origin, other: Horizon) -> AntiScalar {
    return origin__geometric_product__horizon(self_, horizon__inverse(other));
}

fn origin__geometric_quotient__line(self_: Origin, other: Line) -> PlaneAtOrigin {
    return origin__geometric_product__line(self_, line__inverse(other));
}

fn origin__geometric_quotient__line_at_infinity(self_: Origin, other: LineAtInfinity) -> PlaneAtOrigin {
    return origin__geometric_product__line_at_infinity(self_, line_at_infinity__inverse(other));
}

fn origin__geometric_quotient__magnitude(self_: Origin, other: Magnitude) -> Origin {
    return origin__geometric_product__magnitude(self_, magnitude__inverse(other));
}

fn origin__geometric_quotient__motor(self_: Origin, other: Motor) -> PlaneAtOrigin {
    return origin__geometric_product__motor(self_, motor__inverse(other));
}

fn origin__geometric_quotient__multi_vector(self_: Origin, other: MultiVector) -> MultiVectorAtOrigin {
    return origin__geometric_product__multi_vector(self_, multi_vector__inverse(other));
}

fn origin__geometric_quotient__multi_vector_at_infinity(self_: Origin, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return origin__geometric_product__multi_vector_at_infinity(self_, multi_vector_at_infinity__inverse(other));
}

fn origin__geometric_quotient__plane(self_: Origin, other: Plane) -> AntiScalar {
    return origin__geometric_product__plane(self_, plane__inverse(other));
}

fn origin__geometric_quotient__point(self_: Origin, other: Point) -> LineAtOrigin {
    return origin__geometric_product__point(self_, point__inverse(other));
}

fn origin__geometric_quotient__point_at_infinity(self_: Origin, other: PointAtInfinity) -> LineAtOrigin {
    return origin__geometric_product__point_at_infinity(self_, point_at_infinity__inverse(other));
}

fn origin__geometric_quotient__scalar(self_: Origin, other: Scalar) -> Origin {
    return origin__geometric_product__scalar(self_, scalar__inverse(other));
}

fn origin__geometric_quotient__transflector(self_: Origin, other: Transflector) -> Rotor {
    return origin__geometric_product__transflector(self_, transflector__inverse(other));
}

fn origin__geometric_quotient__translator(self_: Origin, other: Translator) -> PlaneAtOrigin {
    return origin__geometric_product__translator(self_, translator__inverse(other));
}

fn plane__geometric_quotient__flector(self_: Plane, other: Flector) -> MultiVector {
    return plane__geometric_product__flector(self_, flector__inverse(other));
}

fn plane__geometric_quotient__flector_at_infinity(self_: Plane, other: FlectorAtInfinity) -> MultiVector {
    return plane__geometric_product__flector_at_infinity(self_, flector_at_infinity__inverse(other));
}

fn plane__geometric_quotient__horizon(self_: Plane, other: Horizon) -> MultiVector {
    return plane__geometric_product__horizon(self_, horizon__inverse(other));
}

fn plane__geometric_quotient__line(self_: Plane, other: Line) -> Flector {
    return plane__geometric_product__line(self_, line__inverse(other));
}

fn plane__geometric_quotient__line_at_infinity(self_: Plane, other: LineAtInfinity) -> Flector {
    return plane__geometric_product__line_at_infinity(self_, line_at_infinity__inverse(other));
}

fn plane__geometric_quotient__magnitude(self_: Plane, other: Magnitude) -> Flector {
    return plane__geometric_product__magnitude(self_, magnitude__inverse(other));
}

fn plane__geometric_quotient__motor(self_: Plane, other: Motor) -> Flector {
    return plane__geometric_product__motor(self_, motor__inverse(other));
}

fn plane__geometric_quotient__multi_vector(self_: Plane, other: MultiVector) -> MultiVector {
    return plane__geometric_product__multi_vector(self_, multi_vector__inverse(other));
}

fn plane__geometric_quotient__multi_vector_at_infinity(self_: Plane, other: MultiVectorAtInfinity) -> MultiVector {
    return plane__geometric_product__multi_vector_at_infinity(self_, multi_vector_at_infinity__inverse(other));
}

fn plane__geometric_quotient__plane(self_: Plane, other: Plane) -> MultiVector {
    return plane__geometric_product__plane(self_, plane__inverse(other));
}

fn plane__geometric_quotient__point(self_: Plane, other: Point) -> Motor {
    return plane__geometric_product__point(self_, point__inverse(other));
}

fn plane__geometric_quotient__point_at_infinity(self_: Plane, other: PointAtInfinity) -> Motor {
    return plane__geometric_product__point_at_infinity(self_, point_at_infinity__inverse(other));
}

fn plane__geometric_quotient__scalar(self_: Plane, other: Scalar) -> Plane {
    return plane__geometric_product__scalar(self_, scalar__inverse(other));
}

fn plane__geometric_quotient__transflector(self_: Plane, other: Transflector) -> MultiVector {
    return plane__geometric_product__transflector(self_, transflector__inverse(other));
}

fn plane__geometric_quotient__translator(self_: Plane, other: Translator) -> Flector {
    return plane__geometric_product__translator(self_, translator__inverse(other));
}

fn plane_at_origin__geometric_quotient__flector(self_: PlaneAtOrigin, other: Flector) -> Rotor {
    return plane_at_origin__geometric_product__flector(self_, flector__inverse(other));
}

fn plane_at_origin__geometric_quotient__flector_at_infinity(self_: PlaneAtOrigin, other: FlectorAtInfinity) -> Rotor {
    return plane_at_origin__geometric_product__flector_at_infinity(self_, flector_at_infinity__inverse(other));
}

fn plane_at_origin__geometric_quotient__horizon(self_: PlaneAtOrigin, other: Horizon) -> LineAtOrigin {
    return plane_at_origin__geometric_product__horizon(self_, horizon__inverse(other));
}

fn plane_at_origin__geometric_quotient__line(self_: PlaneAtOrigin, other: Line) -> Flector {
    return plane_at_origin__geometric_product__line(self_, line__inverse(other));
}

fn plane_at_origin__geometric_quotient__line_at_infinity(self_: PlaneAtOrigin, other: LineAtInfinity) -> Flector {
    return plane_at_origin__geometric_product__line_at_infinity(self_, line_at_infinity__inverse(other));
}

fn plane_at_origin__geometric_quotient__magnitude(self_: PlaneAtOrigin, other: Magnitude) -> PlaneAtOrigin {
    return plane_at_origin__geometric_product__magnitude(self_, magnitude__inverse(other));
}

fn plane_at_origin__geometric_quotient__motor(self_: PlaneAtOrigin, other: Motor) -> Flector {
    return plane_at_origin__geometric_product__motor(self_, motor__inverse(other));
}

fn plane_at_origin__geometric_quotient__multi_vector(self_: PlaneAtOrigin, other: MultiVector) -> MultiVectorAtOrigin {
    return plane_at_origin__geometric_product__multi_vector(self_, multi_vector__inverse(other));
}

fn plane_at_origin__geometric_quotient__multi_vector_at_infinity(self_: PlaneAtOrigin, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return plane_at_origin__geometric_product__multi_vector_at_infinity(self_, multi_vector_at_infinity__inverse(other));
}

fn plane_at_origin__geometric_quotient__plane(self_: PlaneAtOrigin, other: Plane) -> LineAtOrigin {
    return plane_at_origin__geometric_product__plane(self_, plane__inverse(other));
}

fn plane_at_origin__geometric_quotient__point(self_: PlaneAtOrigin, other: Point) -> Rotor {
    return plane_at_origin__geometric_product__point(self_, point__inverse(other));
}

fn plane_at_origin__geometric_quotient__point_at_infinity(self_: PlaneAtOrigin, other: PointAtInfinity) -> Rotor {
    return plane_at_origin__geometric_product__point_at_infinity(self_, point_at_infinity__inverse(other));
}

fn plane_at_origin__geometric_quotient__scalar(self_: PlaneAtOrigin, other: Scalar) -> PlaneAtOrigin {
    return plane_at_origin__geometric_product__scalar(self_, scalar__inverse(other));
}

fn plane_at_origin__geometric_quotient__transflector(self_: PlaneAtOrigin, other: Transflector) -> Rotor {
    return plane_at_origin__geometric_product__transflector(self_, transflector__inverse(other));
}

fn plane_at_origin__geometric_quotient__translator(self_: PlaneAtOrigin, other: Translator) -> Flector {
    return plane_at_origin__geometric_product__translator(self_, translator__inverse(other));
}

fn point__geometric_quotient__flector(self_: Point, other: Flector) -> MultiVector {
    return point__geometric_product__flector(self_, flector__inverse(other));
}

fn point__geometric_quotient__flector_at_infinity(self_: Point, other: FlectorAtInfinity) -> MultiVector {
    return point__geometric_product__flector_at_infinity(self_, flector_at_infinity__inverse(other));
}

fn point__geometric_quotient__horizon(self_: Point, other: Horizon) -> Translator {
    return point__geometric_product__horizon(self_, horizon__inverse(other));
}

fn point__geometric_quotient__line(self_: Point, other: Line) -> Flector {
    return point__geometric_product__line(self_, line__inverse(other));
}

fn point__geometric_quotient__line_at_infinity(self_: Point, other: LineAtInfinity) -> Transflector {
    return point__geometric_product__line_at_infinity(self_, line_at_infinity__inverse(other));
}

fn point__geometric_quotient__magnitude(self_: Point, other: Magnitude) -> Flector {
    return point__geometric_product__magnitude(self_, magnitude__inverse(other));
}

fn point__geometric_quotient__motor(self_: Point, other: Motor) -> Flector {
    return point__geometric_product__motor(self_, motor__inverse(other));
}

fn point__geometric_quotient__multi_vector(self_: Point, other: MultiVector) -> MultiVector {
    return point__geometric_product__multi_vector(self_, multi_vector__inverse(other));
}

fn point__geometric_quotient__multi_vector_at_infinity(self_: Point, other: MultiVectorAtInfinity) -> MultiVector {
    return point__geometric_product__multi_vector_at_infinity(self_, multi_vector_at_infinity__inverse(other));
}

fn point__geometric_quotient__plane(self_: Point, other: Plane) -> Motor {
    return point__geometric_product__plane(self_, plane__inverse(other));
}

fn point__geometric_quotient__point(self_: Point, other: Point) -> MultiVector {
    return point__geometric_product__point(self_, point__inverse(other));
}

fn point__geometric_quotient__point_at_infinity(self_: Point, other: PointAtInfinity) -> MultiVector {
    return point__geometric_product__point_at_infinity(self_, point_at_infinity__inverse(other));
}

fn point__geometric_quotient__scalar(self_: Point, other: Scalar) -> Point {
    return point__geometric_product__scalar(self_, scalar__inverse(other));
}

fn point__geometric_quotient__transflector(self_: Point, other: Transflector) -> MultiVector {
    return point__geometric_product__transflector(self_, transflector__inverse(other));
}

fn point__geometric_quotient__translator(self_: Point, other: Translator) -> Transflector {
    return point__geometric_product__translator(self_, translator__inverse(other));
}

fn point_at_infinity__geometric_quotient__flector(self_: PointAtInfinity, other: Flector) -> MultiVector {
    return point_at_infinity__geometric_product__flector(self_, flector__inverse(other));
}

fn point_at_infinity__geometric_quotient__flector_at_infinity(self_: PointAtInfinity, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return point_at_infinity__geometric_product__flector_at_infinity(self_, flector_at_infinity__inverse(other));
}

fn point_at_infinity__geometric_quotient__horizon(self_: PointAtInfinity, other: Horizon) -> LineAtInfinity {
    return point_at_infinity__geometric_product__horizon(self_, horizon__inverse(other));
}

fn point_at_infinity__geometric_quotient__line(self_: PointAtInfinity, other: Line) -> Flector {
    return point_at_infinity__geometric_product__line(self_, line__inverse(other));
}

fn point_at_infinity__geometric_quotient__line_at_infinity(self_: PointAtInfinity, other: LineAtInfinity) -> FlectorAtInfinity {
    return point_at_infinity__geometric_product__line_at_infinity(self_, line_at_infinity__inverse(other));
}

fn point_at_infinity__geometric_quotient__magnitude(self_: PointAtInfinity, other: Magnitude) -> Transflector {
    return point_at_infinity__geometric_product__magnitude(self_, magnitude__inverse(other));
}

fn point_at_infinity__geometric_quotient__motor(self_: PointAtInfinity, other: Motor) -> Flector {
    return point_at_infinity__geometric_product__motor(self_, motor__inverse(other));
}

fn point_at_infinity__geometric_quotient__multi_vector(self_: PointAtInfinity, other: MultiVector) -> MultiVector {
    return point_at_infinity__geometric_product__multi_vector(self_, multi_vector__inverse(other));
}

fn point_at_infinity__geometric_quotient__multi_vector_at_infinity(self_: PointAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return point_at_infinity__geometric_product__multi_vector_at_infinity(self_, multi_vector_at_infinity__inverse(other));
}

fn point_at_infinity__geometric_quotient__plane(self_: PointAtInfinity, other: Plane) -> Motor {
    return point_at_infinity__geometric_product__plane(self_, plane__inverse(other));
}

fn point_at_infinity__geometric_quotient__point(self_: PointAtInfinity, other: Point) -> MultiVector {
    return point_at_infinity__geometric_product__point(self_, point__inverse(other));
}

fn point_at_infinity__geometric_quotient__point_at_infinity(self_: PointAtInfinity, other: PointAtInfinity) -> MultiVectorAtInfinity {
    return point_at_infinity__geometric_product__point_at_infinity(self_, point_at_infinity__inverse(other));
}

fn point_at_infinity__geometric_quotient__scalar(self_: PointAtInfinity, other: Scalar) -> PointAtInfinity {
    return point_at_infinity__geometric_product__scalar(self_, scalar__inverse(other));
}

fn point_at_infinity__geometric_quotient__transflector(self_: PointAtInfinity, other: Transflector) -> MultiVector {
    return point_at_infinity__geometric_product__transflector(self_, transflector__inverse(other));
}

fn point_at_infinity__geometric_quotient__translator(self_: PointAtInfinity, other: Translator) -> Transflector {
    return point_at_infinity__geometric_product__translator(self_, translator__inverse(other));
}

fn rotor__geometric_quotient__flector(self_: Rotor, other: Flector) -> Flector {
    return rotor__geometric_product__flector(self_, flector__inverse(other));
}

fn rotor__geometric_quotient__flector_at_infinity(self_: Rotor, other: FlectorAtInfinity) -> Flector {
    return rotor__geometric_product__flector_at_infinity(self_, flector_at_infinity__inverse(other));
}

fn rotor__geometric_quotient__horizon(self_: Rotor, other: Horizon) -> Flector {
    return rotor__geometric_product__horizon(self_, horizon__inverse(other));
}

fn rotor__geometric_quotient__line(self_: Rotor, other: Line) -> Rotor {
    return rotor__geometric_product__line(self_, line__inverse(other));
}

fn rotor__geometric_quotient__line_at_infinity(self_: Rotor, other: LineAtInfinity) -> Rotor {
    return rotor__geometric_product__line_at_infinity(self_, line_at_infinity__inverse(other));
}

fn rotor__geometric_quotient__magnitude(self_: Rotor, other: Magnitude) -> Rotor {
    return rotor__geometric_product__magnitude(self_, magnitude__inverse(other));
}

fn rotor__geometric_quotient__motor(self_: Rotor, other: Motor) -> Rotor {
    return rotor__geometric_product__motor(self_, motor__inverse(other));
}

fn rotor__geometric_quotient__multi_vector(self_: Rotor, other: MultiVector) -> MultiVectorAtOrigin {
    return rotor__geometric_product__multi_vector(self_, multi_vector__inverse(other));
}

fn rotor__geometric_quotient__multi_vector_at_infinity(self_: Rotor, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return rotor__geometric_product__multi_vector_at_infinity(self_, multi_vector_at_infinity__inverse(other));
}

fn rotor__geometric_quotient__plane(self_: Rotor, other: Plane) -> Flector {
    return rotor__geometric_product__plane(self_, plane__inverse(other));
}

fn rotor__geometric_quotient__point(self_: Rotor, other: Point) -> Flector {
    return rotor__geometric_product__point(self_, point__inverse(other));
}

fn rotor__geometric_quotient__point_at_infinity(self_: Rotor, other: PointAtInfinity) -> Flector {
    return rotor__geometric_product__point_at_infinity(self_, point_at_infinity__inverse(other));
}

fn rotor__geometric_quotient__scalar(self_: Rotor, other: Scalar) -> Rotor {
    return rotor__geometric_product__scalar(self_, scalar__inverse(other));
}

fn rotor__geometric_quotient__transflector(self_: Rotor, other: Transflector) -> Flector {
    return rotor__geometric_product__transflector(self_, transflector__inverse(other));
}

fn rotor__geometric_quotient__translator(self_: Rotor, other: Translator) -> Rotor {
    return rotor__geometric_product__translator(self_, translator__inverse(other));
}

fn scalar__geometric_quotient__flector(self_: Scalar, other: Flector) -> Flector {
    return scalar__geometric_product__flector(self_, flector__inverse(other));
}

fn scalar__geometric_quotient__flector_at_infinity(self_: Scalar, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return scalar__geometric_product__flector_at_infinity(self_, flector_at_infinity__inverse(other));
}

fn scalar__geometric_quotient__horizon(self_: Scalar, other: Horizon) -> Horizon {
    return scalar__geometric_product__horizon(self_, horizon__inverse(other));
}

fn scalar__geometric_quotient__line(self_: Scalar, other: Line) -> Line {
    return scalar__geometric_product__line(self_, line__inverse(other));
}

fn scalar__geometric_quotient__line_at_infinity(self_: Scalar, other: LineAtInfinity) -> LineAtInfinity {
    return scalar__geometric_product__line_at_infinity(self_, line_at_infinity__inverse(other));
}

fn scalar__geometric_quotient__magnitude(self_: Scalar, other: Magnitude) -> Magnitude {
    return scalar__geometric_product__magnitude(self_, magnitude__inverse(other));
}

fn scalar__geometric_quotient__motor(self_: Scalar, other: Motor) -> Motor {
    return scalar__geometric_product__motor(self_, motor__inverse(other));
}

fn scalar__geometric_quotient__multi_vector(self_: Scalar, other: MultiVector) -> MultiVector {
    return scalar__geometric_product__multi_vector(self_, multi_vector__inverse(other));
}

fn scalar__geometric_quotient__multi_vector_at_infinity(self_: Scalar, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return scalar__geometric_product__multi_vector_at_infinity(self_, multi_vector_at_infinity__inverse(other));
}

fn scalar__geometric_quotient__plane(self_: Scalar, other: Plane) -> Plane {
    return scalar__geometric_product__plane(self_, plane__inverse(other));
}

fn scalar__geometric_quotient__point(self_: Scalar, other: Point) -> Point {
    return scalar__geometric_product__point(self_, point__inverse(other));
}

fn scalar__geometric_quotient__point_at_infinity(self_: Scalar, other: PointAtInfinity) -> PointAtInfinity {
    return scalar__geometric_product__point_at_infinity(self_, point_at_infinity__inverse(other));
}

fn scalar__geometric_quotient__scalar(self_: Scalar, other: Scalar) -> Scalar {
    return scalar__geometric_product__scalar(self_, scalar__inverse(other));
}

fn scalar__geometric_quotient__transflector(self_: Scalar, other: Transflector) -> Transflector {
    return scalar__geometric_product__transflector(self_, transflector__inverse(other));
}

fn scalar__geometric_quotient__translator(self_: Scalar, other: Translator) -> Translator {
    return scalar__geometric_product__translator(self_, translator__inverse(other));
}

fn transflector__geometric_quotient__flector(self_: Transflector, other: Flector) -> MultiVector {
    return transflector__geometric_product__flector(self_, flector__inverse(other));
}

fn transflector__geometric_quotient__flector_at_infinity(self_: Transflector, other: FlectorAtInfinity) -> MultiVector {
    return transflector__geometric_product__flector_at_infinity(self_, flector_at_infinity__inverse(other));
}

fn transflector__geometric_quotient__horizon(self_: Transflector, other: Horizon) -> MultiVector {
    return transflector__geometric_product__horizon(self_, horizon__inverse(other));
}

fn transflector__geometric_quotient__line(self_: Transflector, other: Line) -> Flector {
    return transflector__geometric_product__line(self_, line__inverse(other));
}

fn transflector__geometric_quotient__line_at_infinity(self_: Transflector, other: LineAtInfinity) -> Flector {
    return transflector__geometric_product__line_at_infinity(self_, line_at_infinity__inverse(other));
}

fn transflector__geometric_quotient__magnitude(self_: Transflector, other: Magnitude) -> Flector {
    return transflector__geometric_product__magnitude(self_, magnitude__inverse(other));
}

fn transflector__geometric_quotient__motor(self_: Transflector, other: Motor) -> Flector {
    return transflector__geometric_product__motor(self_, motor__inverse(other));
}

fn transflector__geometric_quotient__multi_vector(self_: Transflector, other: MultiVector) -> MultiVector {
    return transflector__geometric_product__multi_vector(self_, multi_vector__inverse(other));
}

fn transflector__geometric_quotient__multi_vector_at_infinity(self_: Transflector, other: MultiVectorAtInfinity) -> MultiVector {
    return transflector__geometric_product__multi_vector_at_infinity(self_, multi_vector_at_infinity__inverse(other));
}

fn transflector__geometric_quotient__plane(self_: Transflector, other: Plane) -> MultiVector {
    return transflector__geometric_product__plane(self_, plane__inverse(other));
}

fn transflector__geometric_quotient__point(self_: Transflector, other: Point) -> MultiVector {
    return transflector__geometric_product__point(self_, point__inverse(other));
}

fn transflector__geometric_quotient__point_at_infinity(self_: Transflector, other: PointAtInfinity) -> MultiVector {
    return transflector__geometric_product__point_at_infinity(self_, point_at_infinity__inverse(other));
}

fn transflector__geometric_quotient__scalar(self_: Transflector, other: Scalar) -> Transflector {
    return transflector__geometric_product__scalar(self_, scalar__inverse(other));
}

fn transflector__geometric_quotient__transflector(self_: Transflector, other: Transflector) -> MultiVector {
    return transflector__geometric_product__transflector(self_, transflector__inverse(other));
}

fn transflector__geometric_quotient__translator(self_: Transflector, other: Translator) -> Flector {
    return transflector__geometric_product__translator(self_, translator__inverse(other));
}

fn translator__geometric_quotient__flector(self_: Translator, other: Flector) -> Flector {
    return translator__geometric_product__flector(self_, flector__inverse(other));
}

fn translator__geometric_quotient__flector_at_infinity(self_: Translator, other: FlectorAtInfinity) -> Flector {
    return translator__geometric_product__flector_at_infinity(self_, flector_at_infinity__inverse(other));
}

fn translator__geometric_quotient__horizon(self_: Translator, other: Horizon) -> Point {
    return translator__geometric_product__horizon(self_, horizon__inverse(other));
}

fn translator__geometric_quotient__line(self_: Translator, other: Line) -> MultiVector {
    return translator__geometric_product__line(self_, line__inverse(other));
}

fn translator__geometric_quotient__line_at_infinity(self_: Translator, other: LineAtInfinity) -> MultiVector {
    return translator__geometric_product__line_at_infinity(self_, line_at_infinity__inverse(other));
}

fn translator__geometric_quotient__magnitude(self_: Translator, other: Magnitude) -> Motor {
    return translator__geometric_product__magnitude(self_, magnitude__inverse(other));
}

fn translator__geometric_quotient__motor(self_: Translator, other: Motor) -> MultiVector {
    return translator__geometric_product__motor(self_, motor__inverse(other));
}

fn translator__geometric_quotient__multi_vector(self_: Translator, other: MultiVector) -> MultiVector {
    return translator__geometric_product__multi_vector(self_, multi_vector__inverse(other));
}

fn translator__geometric_quotient__multi_vector_at_infinity(self_: Translator, other: MultiVectorAtInfinity) -> MultiVector {
    return translator__geometric_product__multi_vector_at_infinity(self_, multi_vector_at_infinity__inverse(other));
}

fn translator__geometric_quotient__plane(self_: Translator, other: Plane) -> Flector {
    return translator__geometric_product__plane(self_, plane__inverse(other));
}

fn translator__geometric_quotient__point(self_: Translator, other: Point) -> Transflector {
    return translator__geometric_product__point(self_, point__inverse(other));
}

fn translator__geometric_quotient__point_at_infinity(self_: Translator, other: PointAtInfinity) -> Transflector {
    return translator__geometric_product__point_at_infinity(self_, point_at_infinity__inverse(other));
}

fn translator__geometric_quotient__scalar(self_: Translator, other: Scalar) -> Translator {
    return translator__geometric_product__scalar(self_, scalar__inverse(other));
}

fn translator__geometric_quotient__transflector(self_: Translator, other: Transflector) -> Flector {
    return translator__geometric_product__transflector(self_, transflector__inverse(other));
}

fn translator__geometric_quotient__translator(self_: Translator, other: Translator) -> MultiVector {
    return translator__geometric_product__translator(self_, translator__inverse(other));
}

fn flector__bulk_contraction__flector(self_: Flector, other: Flector) -> MultiVector {
    return flector__anti_wedge__flector(self_, flector__dual(other));
}

fn flector__bulk_contraction__flector_at_infinity(self_: Flector, other: FlectorAtInfinity) -> MultiVector {
    return flector__anti_wedge__flector(self_, flector_at_infinity__dual(other));
}

fn flector__bulk_contraction__horizon(self_: Flector, other: Horizon) -> Scalar {
    return flector__anti_wedge__origin(self_, horizon__dual(other));
}

fn flector__bulk_contraction__line(self_: Flector, other: Line) -> Point {
    return flector__anti_wedge__line_at_origin(self_, line__dual(other));
}

fn flector__bulk_contraction__line_at_infinity(self_: Flector, other: LineAtInfinity) -> Point {
    return flector__anti_wedge__line_at_origin(self_, line_at_infinity__dual(other));
}

fn flector__bulk_contraction__motor(self_: Flector, other: Motor) -> Point {
    return flector__anti_wedge__line_at_origin(self_, motor__dual(other));
}

fn flector__bulk_contraction__multi_vector(self_: Flector, other: MultiVector) -> MultiVector {
    return flector__anti_wedge__multi_vector_at_origin(self_, multi_vector__dual(other));
}

fn flector__bulk_contraction__multi_vector_at_infinity(self_: Flector, other: MultiVectorAtInfinity) -> MultiVector {
    return flector__anti_wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other));
}

fn flector__bulk_contraction__plane(self_: Flector, other: Plane) -> Scalar {
    return flector__anti_wedge__origin(self_, plane__dual(other));
}

fn flector__bulk_contraction__point(self_: Flector, other: Point) -> MultiVector {
    return flector__anti_wedge__plane_at_origin(self_, point__dual(other));
}

fn flector__bulk_contraction__point_at_infinity(self_: Flector, other: PointAtInfinity) -> MultiVector {
    return flector__anti_wedge__plane_at_origin(self_, point_at_infinity__dual(other));
}

fn flector__bulk_contraction__transflector(self_: Flector, other: Transflector) -> MultiVector {
    return flector__anti_wedge__flector(self_, transflector__dual(other));
}

fn flector__bulk_contraction__translator(self_: Flector, other: Translator) -> Point {
    return flector__anti_wedge__line_at_origin(self_, translator__dual(other));
}

fn flector_at_infinity__bulk_contraction__flector(self_: FlectorAtInfinity, other: Flector) -> MultiVectorAtInfinity {
    return flector_at_infinity__anti_wedge__flector(self_, flector__dual(other));
}

fn flector_at_infinity__bulk_contraction__flector_at_infinity(self_: FlectorAtInfinity, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return flector_at_infinity__anti_wedge__flector(self_, flector_at_infinity__dual(other));
}

fn flector_at_infinity__bulk_contraction__horizon(self_: FlectorAtInfinity, other: Horizon) -> Scalar {
    return flector_at_infinity__anti_wedge__origin(self_, horizon__dual(other));
}

fn flector_at_infinity__bulk_contraction__line(self_: FlectorAtInfinity, other: Line) -> PointAtInfinity {
    return flector_at_infinity__anti_wedge__line_at_origin(self_, line__dual(other));
}

fn flector_at_infinity__bulk_contraction__line_at_infinity(self_: FlectorAtInfinity, other: LineAtInfinity) -> PointAtInfinity {
    return flector_at_infinity__anti_wedge__line_at_origin(self_, line_at_infinity__dual(other));
}

fn flector_at_infinity__bulk_contraction__motor(self_: FlectorAtInfinity, other: Motor) -> PointAtInfinity {
    return flector_at_infinity__anti_wedge__line_at_origin(self_, motor__dual(other));
}

fn flector_at_infinity__bulk_contraction__multi_vector(self_: FlectorAtInfinity, other: MultiVector) -> MultiVectorAtInfinity {
    return flector_at_infinity__anti_wedge__multi_vector_at_origin(self_, multi_vector__dual(other));
}

fn flector_at_infinity__bulk_contraction__multi_vector_at_infinity(self_: FlectorAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return flector_at_infinity__anti_wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other));
}

fn flector_at_infinity__bulk_contraction__plane(self_: FlectorAtInfinity, other: Plane) -> Scalar {
    return flector_at_infinity__anti_wedge__origin(self_, plane__dual(other));
}

fn flector_at_infinity__bulk_contraction__point(self_: FlectorAtInfinity, other: Point) -> MultiVectorAtInfinity {
    return flector_at_infinity__anti_wedge__plane_at_origin(self_, point__dual(other));
}

fn flector_at_infinity__bulk_contraction__point_at_infinity(self_: FlectorAtInfinity, other: PointAtInfinity) -> MultiVectorAtInfinity {
    return flector_at_infinity__anti_wedge__plane_at_origin(self_, point_at_infinity__dual(other));
}

fn flector_at_infinity__bulk_contraction__transflector(self_: FlectorAtInfinity, other: Transflector) -> MultiVectorAtInfinity {
    return flector_at_infinity__anti_wedge__flector(self_, transflector__dual(other));
}

fn flector_at_infinity__bulk_contraction__translator(self_: FlectorAtInfinity, other: Translator) -> PointAtInfinity {
    return flector_at_infinity__anti_wedge__line_at_origin(self_, translator__dual(other));
}

fn horizon__bulk_contraction__flector(self_: Horizon, other: Flector) -> MultiVectorAtInfinity {
    return horizon__anti_wedge__flector(self_, flector__dual(other));
}

fn horizon__bulk_contraction__flector_at_infinity(self_: Horizon, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return horizon__anti_wedge__flector(self_, flector_at_infinity__dual(other));
}

fn horizon__bulk_contraction__horizon(self_: Horizon, other: Horizon) -> Scalar {
    return horizon__anti_wedge__origin(self_, horizon__dual(other));
}

fn horizon__bulk_contraction__line(self_: Horizon, other: Line) -> PointAtInfinity {
    return horizon__anti_wedge__line_at_origin(self_, line__dual(other));
}

fn horizon__bulk_contraction__line_at_infinity(self_: Horizon, other: LineAtInfinity) -> PointAtInfinity {
    return horizon__anti_wedge__line_at_origin(self_, line_at_infinity__dual(other));
}

fn horizon__bulk_contraction__motor(self_: Horizon, other: Motor) -> PointAtInfinity {
    return horizon__anti_wedge__line_at_origin(self_, motor__dual(other));
}

fn horizon__bulk_contraction__multi_vector(self_: Horizon, other: MultiVector) -> MultiVectorAtInfinity {
    return horizon__anti_wedge__multi_vector_at_origin(self_, multi_vector__dual(other));
}

fn horizon__bulk_contraction__multi_vector_at_infinity(self_: Horizon, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return horizon__anti_wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other));
}

fn horizon__bulk_contraction__plane(self_: Horizon, other: Plane) -> Scalar {
    return horizon__anti_wedge__origin(self_, plane__dual(other));
}

fn horizon__bulk_contraction__point(self_: Horizon, other: Point) -> LineAtInfinity {
    return horizon__anti_wedge__plane_at_origin(self_, point__dual(other));
}

fn horizon__bulk_contraction__point_at_infinity(self_: Horizon, other: PointAtInfinity) -> LineAtInfinity {
    return horizon__anti_wedge__plane_at_origin(self_, point_at_infinity__dual(other));
}

fn horizon__bulk_contraction__transflector(self_: Horizon, other: Transflector) -> MultiVectorAtInfinity {
    return horizon__anti_wedge__flector(self_, transflector__dual(other));
}

fn horizon__bulk_contraction__translator(self_: Horizon, other: Translator) -> PointAtInfinity {
    return horizon__anti_wedge__line_at_origin(self_, translator__dual(other));
}

fn line__bulk_contraction__flector(self_: Line, other: Flector) -> Point {
    return line__anti_wedge__flector(self_, flector__dual(other));
}

fn line__bulk_contraction__flector_at_infinity(self_: Line, other: FlectorAtInfinity) -> Point {
    return line__anti_wedge__flector(self_, flector_at_infinity__dual(other));
}

fn line__bulk_contraction__line(self_: Line, other: Line) -> Scalar {
    return line__anti_wedge__line_at_origin(self_, line__dual(other));
}

fn line__bulk_contraction__line_at_infinity(self_: Line, other: LineAtInfinity) -> Scalar {
    return line__anti_wedge__line_at_origin(self_, line_at_infinity__dual(other));
}

fn line__bulk_contraction__motor(self_: Line, other: Motor) -> Scalar {
    return line__anti_wedge__line_at_origin(self_, motor__dual(other));
}

fn line__bulk_contraction__multi_vector(self_: Line, other: MultiVector) -> MultiVector {
    return line__anti_wedge__multi_vector_at_origin(self_, multi_vector__dual(other));
}

fn line__bulk_contraction__multi_vector_at_infinity(self_: Line, other: MultiVectorAtInfinity) -> MultiVector {
    return line__anti_wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other));
}

fn line__bulk_contraction__point(self_: Line, other: Point) -> Point {
    return line__anti_wedge__plane_at_origin(self_, point__dual(other));
}

fn line__bulk_contraction__point_at_infinity(self_: Line, other: PointAtInfinity) -> Point {
    return line__anti_wedge__plane_at_origin(self_, point_at_infinity__dual(other));
}

fn line__bulk_contraction__transflector(self_: Line, other: Transflector) -> Point {
    return line__anti_wedge__flector(self_, transflector__dual(other));
}

fn line__bulk_contraction__translator(self_: Line, other: Translator) -> Scalar {
    return line__anti_wedge__line_at_origin(self_, translator__dual(other));
}

fn line_at_infinity__bulk_contraction__flector(self_: LineAtInfinity, other: Flector) -> PointAtInfinity {
    return line_at_infinity__anti_wedge__flector(self_, flector__dual(other));
}

fn line_at_infinity__bulk_contraction__flector_at_infinity(self_: LineAtInfinity, other: FlectorAtInfinity) -> PointAtInfinity {
    return line_at_infinity__anti_wedge__flector(self_, flector_at_infinity__dual(other));
}

fn line_at_infinity__bulk_contraction__line(self_: LineAtInfinity, other: Line) -> Scalar {
    return line_at_infinity__anti_wedge__line_at_origin(self_, line__dual(other));
}

fn line_at_infinity__bulk_contraction__line_at_infinity(self_: LineAtInfinity, other: LineAtInfinity) -> Scalar {
    return line_at_infinity__anti_wedge__line_at_origin(self_, line_at_infinity__dual(other));
}

fn line_at_infinity__bulk_contraction__motor(self_: LineAtInfinity, other: Motor) -> Scalar {
    return line_at_infinity__anti_wedge__line_at_origin(self_, motor__dual(other));
}

fn line_at_infinity__bulk_contraction__multi_vector(self_: LineAtInfinity, other: MultiVector) -> MultiVectorAtInfinity {
    return line_at_infinity__anti_wedge__multi_vector_at_origin(self_, multi_vector__dual(other));
}

fn line_at_infinity__bulk_contraction__multi_vector_at_infinity(self_: LineAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return line_at_infinity__anti_wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other));
}

fn line_at_infinity__bulk_contraction__point(self_: LineAtInfinity, other: Point) -> PointAtInfinity {
    return line_at_infinity__anti_wedge__plane_at_origin(self_, point__dual(other));
}

fn line_at_infinity__bulk_contraction__point_at_infinity(self_: LineAtInfinity, other: PointAtInfinity) -> PointAtInfinity {
    return line_at_infinity__anti_wedge__plane_at_origin(self_, point_at_infinity__dual(other));
}

fn line_at_infinity__bulk_contraction__transflector(self_: LineAtInfinity, other: Transflector) -> PointAtInfinity {
    return line_at_infinity__anti_wedge__flector(self_, transflector__dual(other));
}

fn line_at_infinity__bulk_contraction__translator(self_: LineAtInfinity, other: Translator) -> Scalar {
    return line_at_infinity__anti_wedge__line_at_origin(self_, translator__dual(other));
}

fn line_at_origin__bulk_contraction__flector(self_: LineAtOrigin, other: Flector) -> Point {
    return line_at_origin__anti_wedge__flector(self_, flector__dual(other));
}

fn line_at_origin__bulk_contraction__flector_at_infinity(self_: LineAtOrigin, other: FlectorAtInfinity) -> Point {
    return line_at_origin__anti_wedge__flector(self_, flector_at_infinity__dual(other));
}

fn line_at_origin__bulk_contraction__multi_vector(self_: LineAtOrigin, other: MultiVector) -> MultiVectorAtOrigin {
    return line_at_origin__anti_wedge__multi_vector_at_origin(self_, multi_vector__dual(other));
}

fn line_at_origin__bulk_contraction__multi_vector_at_infinity(self_: LineAtOrigin, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return line_at_origin__anti_wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other));
}

fn line_at_origin__bulk_contraction__point(self_: LineAtOrigin, other: Point) -> Origin {
    return line_at_origin__anti_wedge__plane_at_origin(self_, point__dual(other));
}

fn line_at_origin__bulk_contraction__point_at_infinity(self_: LineAtOrigin, other: PointAtInfinity) -> Origin {
    return line_at_origin__anti_wedge__plane_at_origin(self_, point_at_infinity__dual(other));
}

fn line_at_origin__bulk_contraction__transflector(self_: LineAtOrigin, other: Transflector) -> Point {
    return line_at_origin__anti_wedge__flector(self_, transflector__dual(other));
}

fn motor__bulk_contraction__flector(self_: Motor, other: Flector) -> Flector {
    return motor__anti_wedge__flector(self_, flector__dual(other));
}

fn motor__bulk_contraction__flector_at_infinity(self_: Motor, other: FlectorAtInfinity) -> Flector {
    return motor__anti_wedge__flector(self_, flector_at_infinity__dual(other));
}

fn motor__bulk_contraction__horizon(self_: Motor, other: Horizon) -> Origin {
    return motor__anti_wedge__origin(self_, horizon__dual(other));
}

fn motor__bulk_contraction__line(self_: Motor, other: Line) -> MultiVector {
    return motor__anti_wedge__line_at_origin(self_, line__dual(other));
}

fn motor__bulk_contraction__line_at_infinity(self_: Motor, other: LineAtInfinity) -> MultiVector {
    return motor__anti_wedge__line_at_origin(self_, line_at_infinity__dual(other));
}

fn motor__bulk_contraction__motor(self_: Motor, other: Motor) -> MultiVector {
    return motor__anti_wedge__line_at_origin(self_, motor__dual(other));
}

fn motor__bulk_contraction__multi_vector(self_: Motor, other: MultiVector) -> MultiVector {
    return motor__anti_wedge__multi_vector_at_origin(self_, multi_vector__dual(other));
}

fn motor__bulk_contraction__multi_vector_at_infinity(self_: Motor, other: MultiVectorAtInfinity) -> MultiVector {
    return motor__anti_wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other));
}

fn motor__bulk_contraction__plane(self_: Motor, other: Plane) -> Origin {
    return motor__anti_wedge__origin(self_, plane__dual(other));
}

fn motor__bulk_contraction__point(self_: Motor, other: Point) -> Flector {
    return motor__anti_wedge__plane_at_origin(self_, point__dual(other));
}

fn motor__bulk_contraction__point_at_infinity(self_: Motor, other: PointAtInfinity) -> Flector {
    return motor__anti_wedge__plane_at_origin(self_, point_at_infinity__dual(other));
}

fn motor__bulk_contraction__transflector(self_: Motor, other: Transflector) -> Flector {
    return motor__anti_wedge__flector(self_, transflector__dual(other));
}

fn motor__bulk_contraction__translator(self_: Motor, other: Translator) -> MultiVector {
    return motor__anti_wedge__line_at_origin(self_, translator__dual(other));
}

fn multi_vector__bulk_contraction__flector(self_: MultiVector, other: Flector) -> MultiVector {
    return multi_vector__anti_wedge__flector(self_, flector__dual(other));
}

fn multi_vector__bulk_contraction__flector_at_infinity(self_: MultiVector, other: FlectorAtInfinity) -> MultiVector {
    return multi_vector__anti_wedge__flector(self_, flector_at_infinity__dual(other));
}

fn multi_vector__bulk_contraction__horizon(self_: MultiVector, other: Horizon) -> MultiVector {
    return multi_vector__anti_wedge__origin(self_, horizon__dual(other));
}

fn multi_vector__bulk_contraction__line(self_: MultiVector, other: Line) -> MultiVector {
    return multi_vector__anti_wedge__line_at_origin(self_, line__dual(other));
}

fn multi_vector__bulk_contraction__line_at_infinity(self_: MultiVector, other: LineAtInfinity) -> MultiVector {
    return multi_vector__anti_wedge__line_at_origin(self_, line_at_infinity__dual(other));
}

fn multi_vector__bulk_contraction__motor(self_: MultiVector, other: Motor) -> MultiVector {
    return multi_vector__anti_wedge__line_at_origin(self_, motor__dual(other));
}

fn multi_vector__bulk_contraction__multi_vector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector_at_origin(self_, multi_vector__dual(other));
}

fn multi_vector__bulk_contraction__multi_vector_at_infinity(self_: MultiVector, other: MultiVectorAtInfinity) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other));
}

fn multi_vector__bulk_contraction__plane(self_: MultiVector, other: Plane) -> MultiVector {
    return multi_vector__anti_wedge__origin(self_, plane__dual(other));
}

fn multi_vector__bulk_contraction__point(self_: MultiVector, other: Point) -> MultiVector {
    return multi_vector__anti_wedge__plane_at_origin(self_, point__dual(other));
}

fn multi_vector__bulk_contraction__point_at_infinity(self_: MultiVector, other: PointAtInfinity) -> MultiVector {
    return multi_vector__anti_wedge__plane_at_origin(self_, point_at_infinity__dual(other));
}

fn multi_vector__bulk_contraction__transflector(self_: MultiVector, other: Transflector) -> MultiVector {
    return multi_vector__anti_wedge__flector(self_, transflector__dual(other));
}

fn multi_vector__bulk_contraction__translator(self_: MultiVector, other: Translator) -> MultiVector {
    return multi_vector__anti_wedge__line_at_origin(self_, translator__dual(other));
}

fn multi_vector_at_infinity__bulk_contraction__flector(self_: MultiVectorAtInfinity, other: Flector) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__anti_wedge__flector(self_, flector__dual(other));
}

fn multi_vector_at_infinity__bulk_contraction__flector_at_infinity(self_: MultiVectorAtInfinity, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__anti_wedge__flector(self_, flector_at_infinity__dual(other));
}

fn multi_vector_at_infinity__bulk_contraction__horizon(self_: MultiVectorAtInfinity, other: Horizon) -> Scalar {
    return multi_vector_at_infinity__anti_wedge__origin(self_, horizon__dual(other));
}

fn multi_vector_at_infinity__bulk_contraction__line(self_: MultiVectorAtInfinity, other: Line) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__anti_wedge__line_at_origin(self_, line__dual(other));
}

fn multi_vector_at_infinity__bulk_contraction__line_at_infinity(self_: MultiVectorAtInfinity, other: LineAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__anti_wedge__line_at_origin(self_, line_at_infinity__dual(other));
}

fn multi_vector_at_infinity__bulk_contraction__motor(self_: MultiVectorAtInfinity, other: Motor) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__anti_wedge__line_at_origin(self_, motor__dual(other));
}

fn multi_vector_at_infinity__bulk_contraction__multi_vector(self_: MultiVectorAtInfinity, other: MultiVector) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__anti_wedge__multi_vector_at_origin(self_, multi_vector__dual(other));
}

fn multi_vector_at_infinity__bulk_contraction__multi_vector_at_infinity(self_: MultiVectorAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__anti_wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other));
}

fn multi_vector_at_infinity__bulk_contraction__plane(self_: MultiVectorAtInfinity, other: Plane) -> Scalar {
    return multi_vector_at_infinity__anti_wedge__origin(self_, plane__dual(other));
}

fn multi_vector_at_infinity__bulk_contraction__point(self_: MultiVectorAtInfinity, other: Point) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__anti_wedge__plane_at_origin(self_, point__dual(other));
}

fn multi_vector_at_infinity__bulk_contraction__point_at_infinity(self_: MultiVectorAtInfinity, other: PointAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__anti_wedge__plane_at_origin(self_, point_at_infinity__dual(other));
}

fn multi_vector_at_infinity__bulk_contraction__transflector(self_: MultiVectorAtInfinity, other: Transflector) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__anti_wedge__flector(self_, transflector__dual(other));
}

fn multi_vector_at_infinity__bulk_contraction__translator(self_: MultiVectorAtInfinity, other: Translator) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__anti_wedge__line_at_origin(self_, translator__dual(other));
}

fn multi_vector_at_origin__bulk_contraction__flector(self_: MultiVectorAtOrigin, other: Flector) -> MultiVector {
    return multi_vector_at_origin__anti_wedge__flector(self_, flector__dual(other));
}

fn multi_vector_at_origin__bulk_contraction__flector_at_infinity(self_: MultiVectorAtOrigin, other: FlectorAtInfinity) -> MultiVector {
    return multi_vector_at_origin__anti_wedge__flector(self_, flector_at_infinity__dual(other));
}

fn multi_vector_at_origin__bulk_contraction__horizon(self_: MultiVectorAtOrigin, other: Horizon) -> Origin {
    return multi_vector_at_origin__anti_wedge__origin(self_, horizon__dual(other));
}

fn multi_vector_at_origin__bulk_contraction__line(self_: MultiVectorAtOrigin, other: Line) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__anti_wedge__line_at_origin(self_, line__dual(other));
}

fn multi_vector_at_origin__bulk_contraction__line_at_infinity(self_: MultiVectorAtOrigin, other: LineAtInfinity) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__anti_wedge__line_at_origin(self_, line_at_infinity__dual(other));
}

fn multi_vector_at_origin__bulk_contraction__motor(self_: MultiVectorAtOrigin, other: Motor) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__anti_wedge__line_at_origin(self_, motor__dual(other));
}

fn multi_vector_at_origin__bulk_contraction__multi_vector(self_: MultiVectorAtOrigin, other: MultiVector) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__anti_wedge__multi_vector_at_origin(self_, multi_vector__dual(other));
}

fn multi_vector_at_origin__bulk_contraction__multi_vector_at_infinity(self_: MultiVectorAtOrigin, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__anti_wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other));
}

fn multi_vector_at_origin__bulk_contraction__plane(self_: MultiVectorAtOrigin, other: Plane) -> Origin {
    return multi_vector_at_origin__anti_wedge__origin(self_, plane__dual(other));
}

fn multi_vector_at_origin__bulk_contraction__point(self_: MultiVectorAtOrigin, other: Point) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__anti_wedge__plane_at_origin(self_, point__dual(other));
}

fn multi_vector_at_origin__bulk_contraction__point_at_infinity(self_: MultiVectorAtOrigin, other: PointAtInfinity) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__anti_wedge__plane_at_origin(self_, point_at_infinity__dual(other));
}

fn multi_vector_at_origin__bulk_contraction__transflector(self_: MultiVectorAtOrigin, other: Transflector) -> MultiVector {
    return multi_vector_at_origin__anti_wedge__flector(self_, transflector__dual(other));
}

fn multi_vector_at_origin__bulk_contraction__translator(self_: MultiVectorAtOrigin, other: Translator) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__anti_wedge__line_at_origin(self_, translator__dual(other));
}

fn origin__bulk_contraction__flector(self_: Origin, other: Flector) -> Scalar {
    return origin__anti_wedge__flector(self_, flector__dual(other));
}

fn origin__bulk_contraction__flector_at_infinity(self_: Origin, other: FlectorAtInfinity) -> Scalar {
    return origin__anti_wedge__flector(self_, flector_at_infinity__dual(other));
}

fn origin__bulk_contraction__multi_vector(self_: Origin, other: MultiVector) -> Origin {
    return origin__anti_wedge__multi_vector_at_origin(self_, multi_vector__dual(other));
}

fn origin__bulk_contraction__multi_vector_at_infinity(self_: Origin, other: MultiVectorAtInfinity) -> Origin {
    return origin__anti_wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other));
}

fn origin__bulk_contraction__transflector(self_: Origin, other: Transflector) -> Scalar {
    return origin__anti_wedge__flector(self_, transflector__dual(other));
}

fn plane__bulk_contraction__flector(self_: Plane, other: Flector) -> MultiVector {
    return plane__anti_wedge__flector(self_, flector__dual(other));
}

fn plane__bulk_contraction__flector_at_infinity(self_: Plane, other: FlectorAtInfinity) -> MultiVector {
    return plane__anti_wedge__flector(self_, flector_at_infinity__dual(other));
}

fn plane__bulk_contraction__horizon(self_: Plane, other: Horizon) -> Scalar {
    return plane__anti_wedge__origin(self_, horizon__dual(other));
}

fn plane__bulk_contraction__line(self_: Plane, other: Line) -> Point {
    return plane__anti_wedge__line_at_origin(self_, line__dual(other));
}

fn plane__bulk_contraction__line_at_infinity(self_: Plane, other: LineAtInfinity) -> Point {
    return plane__anti_wedge__line_at_origin(self_, line_at_infinity__dual(other));
}

fn plane__bulk_contraction__motor(self_: Plane, other: Motor) -> Point {
    return plane__anti_wedge__line_at_origin(self_, motor__dual(other));
}

fn plane__bulk_contraction__multi_vector(self_: Plane, other: MultiVector) -> MultiVector {
    return plane__anti_wedge__multi_vector_at_origin(self_, multi_vector__dual(other));
}

fn plane__bulk_contraction__multi_vector_at_infinity(self_: Plane, other: MultiVectorAtInfinity) -> MultiVector {
    return plane__anti_wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other));
}

fn plane__bulk_contraction__plane(self_: Plane, other: Plane) -> Scalar {
    return plane__anti_wedge__origin(self_, plane__dual(other));
}

fn plane__bulk_contraction__point(self_: Plane, other: Point) -> Line {
    return plane__anti_wedge__plane_at_origin(self_, point__dual(other));
}

fn plane__bulk_contraction__point_at_infinity(self_: Plane, other: PointAtInfinity) -> Line {
    return plane__anti_wedge__plane_at_origin(self_, point_at_infinity__dual(other));
}

fn plane__bulk_contraction__transflector(self_: Plane, other: Transflector) -> MultiVector {
    return plane__anti_wedge__flector(self_, transflector__dual(other));
}

fn plane__bulk_contraction__translator(self_: Plane, other: Translator) -> Point {
    return plane__anti_wedge__line_at_origin(self_, translator__dual(other));
}

fn plane_at_origin__bulk_contraction__flector(self_: PlaneAtOrigin, other: Flector) -> MultiVector {
    return plane_at_origin__anti_wedge__flector(self_, flector__dual(other));
}

fn plane_at_origin__bulk_contraction__flector_at_infinity(self_: PlaneAtOrigin, other: FlectorAtInfinity) -> MultiVector {
    return plane_at_origin__anti_wedge__flector(self_, flector_at_infinity__dual(other));
}

fn plane_at_origin__bulk_contraction__line(self_: PlaneAtOrigin, other: Line) -> Origin {
    return plane_at_origin__anti_wedge__line_at_origin(self_, line__dual(other));
}

fn plane_at_origin__bulk_contraction__line_at_infinity(self_: PlaneAtOrigin, other: LineAtInfinity) -> Origin {
    return plane_at_origin__anti_wedge__line_at_origin(self_, line_at_infinity__dual(other));
}

fn plane_at_origin__bulk_contraction__motor(self_: PlaneAtOrigin, other: Motor) -> Origin {
    return plane_at_origin__anti_wedge__line_at_origin(self_, motor__dual(other));
}

fn plane_at_origin__bulk_contraction__multi_vector(self_: PlaneAtOrigin, other: MultiVector) -> MultiVectorAtOrigin {
    return plane_at_origin__anti_wedge__multi_vector_at_origin(self_, multi_vector__dual(other));
}

fn plane_at_origin__bulk_contraction__multi_vector_at_infinity(self_: PlaneAtOrigin, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return plane_at_origin__anti_wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other));
}

fn plane_at_origin__bulk_contraction__point(self_: PlaneAtOrigin, other: Point) -> LineAtOrigin {
    return plane_at_origin__anti_wedge__plane_at_origin(self_, point__dual(other));
}

fn plane_at_origin__bulk_contraction__point_at_infinity(self_: PlaneAtOrigin, other: PointAtInfinity) -> LineAtOrigin {
    return plane_at_origin__anti_wedge__plane_at_origin(self_, point_at_infinity__dual(other));
}

fn plane_at_origin__bulk_contraction__transflector(self_: PlaneAtOrigin, other: Transflector) -> MultiVector {
    return plane_at_origin__anti_wedge__flector(self_, transflector__dual(other));
}

fn plane_at_origin__bulk_contraction__translator(self_: PlaneAtOrigin, other: Translator) -> Origin {
    return plane_at_origin__anti_wedge__line_at_origin(self_, translator__dual(other));
}

fn point__bulk_contraction__flector(self_: Point, other: Flector) -> Scalar {
    return point__anti_wedge__flector(self_, flector__dual(other));
}

fn point__bulk_contraction__flector_at_infinity(self_: Point, other: FlectorAtInfinity) -> Scalar {
    return point__anti_wedge__flector(self_, flector_at_infinity__dual(other));
}

fn point__bulk_contraction__multi_vector(self_: Point, other: MultiVector) -> MultiVector {
    return point__anti_wedge__multi_vector_at_origin(self_, multi_vector__dual(other));
}

fn point__bulk_contraction__multi_vector_at_infinity(self_: Point, other: MultiVectorAtInfinity) -> MultiVector {
    return point__anti_wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other));
}

fn point__bulk_contraction__point(self_: Point, other: Point) -> Scalar {
    return point__anti_wedge__plane_at_origin(self_, point__dual(other));
}

fn point__bulk_contraction__point_at_infinity(self_: Point, other: PointAtInfinity) -> Scalar {
    return point__anti_wedge__plane_at_origin(self_, point_at_infinity__dual(other));
}

fn point__bulk_contraction__transflector(self_: Point, other: Transflector) -> Scalar {
    return point__anti_wedge__flector(self_, transflector__dual(other));
}

fn point_at_infinity__bulk_contraction__flector(self_: PointAtInfinity, other: Flector) -> Scalar {
    return point_at_infinity__anti_wedge__flector(self_, flector__dual(other));
}

fn point_at_infinity__bulk_contraction__flector_at_infinity(self_: PointAtInfinity, other: FlectorAtInfinity) -> Scalar {
    return point_at_infinity__anti_wedge__flector(self_, flector_at_infinity__dual(other));
}

fn point_at_infinity__bulk_contraction__multi_vector(self_: PointAtInfinity, other: MultiVector) -> MultiVectorAtInfinity {
    return point_at_infinity__anti_wedge__multi_vector_at_origin(self_, multi_vector__dual(other));
}

fn point_at_infinity__bulk_contraction__multi_vector_at_infinity(self_: PointAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return point_at_infinity__anti_wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other));
}

fn point_at_infinity__bulk_contraction__point(self_: PointAtInfinity, other: Point) -> Scalar {
    return point_at_infinity__anti_wedge__plane_at_origin(self_, point__dual(other));
}

fn point_at_infinity__bulk_contraction__point_at_infinity(self_: PointAtInfinity, other: PointAtInfinity) -> Scalar {
    return point_at_infinity__anti_wedge__plane_at_origin(self_, point_at_infinity__dual(other));
}

fn point_at_infinity__bulk_contraction__transflector(self_: PointAtInfinity, other: Transflector) -> Scalar {
    return point_at_infinity__anti_wedge__flector(self_, transflector__dual(other));
}

fn rotor__bulk_contraction__flector(self_: Rotor, other: Flector) -> Flector {
    return rotor__anti_wedge__flector(self_, flector__dual(other));
}

fn rotor__bulk_contraction__flector_at_infinity(self_: Rotor, other: FlectorAtInfinity) -> Flector {
    return rotor__anti_wedge__flector(self_, flector_at_infinity__dual(other));
}

fn rotor__bulk_contraction__horizon(self_: Rotor, other: Horizon) -> Origin {
    return rotor__anti_wedge__origin(self_, horizon__dual(other));
}

fn rotor__bulk_contraction__line(self_: Rotor, other: Line) -> LineAtOrigin {
    return rotor__anti_wedge__line_at_origin(self_, line__dual(other));
}

fn rotor__bulk_contraction__line_at_infinity(self_: Rotor, other: LineAtInfinity) -> LineAtOrigin {
    return rotor__anti_wedge__line_at_origin(self_, line_at_infinity__dual(other));
}

fn rotor__bulk_contraction__motor(self_: Rotor, other: Motor) -> LineAtOrigin {
    return rotor__anti_wedge__line_at_origin(self_, motor__dual(other));
}

fn rotor__bulk_contraction__multi_vector(self_: Rotor, other: MultiVector) -> MultiVectorAtOrigin {
    return rotor__anti_wedge__multi_vector_at_origin(self_, multi_vector__dual(other));
}

fn rotor__bulk_contraction__multi_vector_at_infinity(self_: Rotor, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return rotor__anti_wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other));
}

fn rotor__bulk_contraction__plane(self_: Rotor, other: Plane) -> Origin {
    return rotor__anti_wedge__origin(self_, plane__dual(other));
}

fn rotor__bulk_contraction__point(self_: Rotor, other: Point) -> Flector {
    return rotor__anti_wedge__plane_at_origin(self_, point__dual(other));
}

fn rotor__bulk_contraction__point_at_infinity(self_: Rotor, other: PointAtInfinity) -> Flector {
    return rotor__anti_wedge__plane_at_origin(self_, point_at_infinity__dual(other));
}

fn rotor__bulk_contraction__transflector(self_: Rotor, other: Transflector) -> Flector {
    return rotor__anti_wedge__flector(self_, transflector__dual(other));
}

fn rotor__bulk_contraction__translator(self_: Rotor, other: Translator) -> LineAtOrigin {
    return rotor__anti_wedge__line_at_origin(self_, translator__dual(other));
}

fn transflector__bulk_contraction__flector(self_: Transflector, other: Flector) -> MultiVector {
    return transflector__anti_wedge__flector(self_, flector__dual(other));
}

fn transflector__bulk_contraction__flector_at_infinity(self_: Transflector, other: FlectorAtInfinity) -> MultiVector {
    return transflector__anti_wedge__flector(self_, flector_at_infinity__dual(other));
}

fn transflector__bulk_contraction__horizon(self_: Transflector, other: Horizon) -> Scalar {
    return transflector__anti_wedge__origin(self_, horizon__dual(other));
}

fn transflector__bulk_contraction__line(self_: Transflector, other: Line) -> Point {
    return transflector__anti_wedge__line_at_origin(self_, line__dual(other));
}

fn transflector__bulk_contraction__line_at_infinity(self_: Transflector, other: LineAtInfinity) -> Point {
    return transflector__anti_wedge__line_at_origin(self_, line_at_infinity__dual(other));
}

fn transflector__bulk_contraction__motor(self_: Transflector, other: Motor) -> Point {
    return transflector__anti_wedge__line_at_origin(self_, motor__dual(other));
}

fn transflector__bulk_contraction__multi_vector(self_: Transflector, other: MultiVector) -> MultiVector {
    return transflector__anti_wedge__multi_vector_at_origin(self_, multi_vector__dual(other));
}

fn transflector__bulk_contraction__multi_vector_at_infinity(self_: Transflector, other: MultiVectorAtInfinity) -> MultiVector {
    return transflector__anti_wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other));
}

fn transflector__bulk_contraction__plane(self_: Transflector, other: Plane) -> Scalar {
    return transflector__anti_wedge__origin(self_, plane__dual(other));
}

fn transflector__bulk_contraction__point(self_: Transflector, other: Point) -> MultiVector {
    return transflector__anti_wedge__plane_at_origin(self_, point__dual(other));
}

fn transflector__bulk_contraction__point_at_infinity(self_: Transflector, other: PointAtInfinity) -> MultiVector {
    return transflector__anti_wedge__plane_at_origin(self_, point_at_infinity__dual(other));
}

fn transflector__bulk_contraction__transflector(self_: Transflector, other: Transflector) -> MultiVector {
    return transflector__anti_wedge__flector(self_, transflector__dual(other));
}

fn transflector__bulk_contraction__translator(self_: Transflector, other: Translator) -> Point {
    return transflector__anti_wedge__line_at_origin(self_, translator__dual(other));
}

fn translator__bulk_contraction__flector(self_: Translator, other: Flector) -> Flector {
    return translator__anti_wedge__flector(self_, flector__dual(other));
}

fn translator__bulk_contraction__flector_at_infinity(self_: Translator, other: FlectorAtInfinity) -> Flector {
    return translator__anti_wedge__flector(self_, flector_at_infinity__dual(other));
}

fn translator__bulk_contraction__horizon(self_: Translator, other: Horizon) -> Origin {
    return translator__anti_wedge__origin(self_, horizon__dual(other));
}

fn translator__bulk_contraction__line(self_: Translator, other: Line) -> MultiVector {
    return translator__anti_wedge__line_at_origin(self_, line__dual(other));
}

fn translator__bulk_contraction__line_at_infinity(self_: Translator, other: LineAtInfinity) -> MultiVector {
    return translator__anti_wedge__line_at_origin(self_, line_at_infinity__dual(other));
}

fn translator__bulk_contraction__motor(self_: Translator, other: Motor) -> MultiVector {
    return translator__anti_wedge__line_at_origin(self_, motor__dual(other));
}

fn translator__bulk_contraction__multi_vector(self_: Translator, other: MultiVector) -> MultiVector {
    return translator__anti_wedge__multi_vector_at_origin(self_, multi_vector__dual(other));
}

fn translator__bulk_contraction__multi_vector_at_infinity(self_: Translator, other: MultiVectorAtInfinity) -> MultiVector {
    return translator__anti_wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other));
}

fn translator__bulk_contraction__plane(self_: Translator, other: Plane) -> Origin {
    return translator__anti_wedge__origin(self_, plane__dual(other));
}

fn translator__bulk_contraction__point(self_: Translator, other: Point) -> Transflector {
    return translator__anti_wedge__plane_at_origin(self_, point__dual(other));
}

fn translator__bulk_contraction__point_at_infinity(self_: Translator, other: PointAtInfinity) -> Transflector {
    return translator__anti_wedge__plane_at_origin(self_, point_at_infinity__dual(other));
}

fn translator__bulk_contraction__transflector(self_: Translator, other: Transflector) -> Flector {
    return translator__anti_wedge__flector(self_, transflector__dual(other));
}

fn translator__bulk_contraction__translator(self_: Translator, other: Translator) -> MultiVector {
    return translator__anti_wedge__line_at_origin(self_, translator__dual(other));
}

fn flector__weight_contraction__flector(self_: Flector, other: Flector) -> MultiVectorAtInfinity {
    return flector__anti_wedge__flector_at_infinity(self_, flector__anti_dual(other));
}

fn flector__weight_contraction__line(self_: Flector, other: Line) -> PointAtInfinity {
    return flector__anti_wedge__line_at_infinity(self_, line__anti_dual(other));
}

fn flector__weight_contraction__line_at_origin(self_: Flector, other: LineAtOrigin) -> PointAtInfinity {
    return flector__anti_wedge__line_at_infinity(self_, line_at_origin__anti_dual(other));
}

fn flector__weight_contraction__motor(self_: Flector, other: Motor) -> MultiVectorAtInfinity {
    return flector__anti_wedge__multi_vector_at_infinity(self_, motor__anti_dual(other));
}

fn flector__weight_contraction__multi_vector(self_: Flector, other: MultiVector) -> MultiVectorAtInfinity {
    return flector__anti_wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other));
}

fn flector__weight_contraction__multi_vector_at_origin(self_: Flector, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return flector__anti_wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other));
}

fn flector__weight_contraction__origin(self_: Flector, other: Origin) -> MultiVectorAtInfinity {
    return flector__anti_wedge__horizon(self_, origin__anti_dual(other));
}

fn flector__weight_contraction__plane(self_: Flector, other: Plane) -> Scalar {
    return flector__anti_wedge__point_at_infinity(self_, plane__anti_dual(other));
}

fn flector__weight_contraction__plane_at_origin(self_: Flector, other: PlaneAtOrigin) -> Scalar {
    return flector__anti_wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other));
}

fn flector__weight_contraction__point(self_: Flector, other: Point) -> MultiVectorAtInfinity {
    return flector__anti_wedge__horizon(self_, point__anti_dual(other));
}

fn flector__weight_contraction__rotor(self_: Flector, other: Rotor) -> MultiVectorAtInfinity {
    return flector__anti_wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other));
}

fn flector__weight_contraction__transflector(self_: Flector, other: Transflector) -> Scalar {
    return flector__anti_wedge__point_at_infinity(self_, transflector__anti_dual(other));
}

fn line__weight_contraction__flector(self_: Line, other: Flector) -> PointAtInfinity {
    return line__anti_wedge__flector_at_infinity(self_, flector__anti_dual(other));
}

fn line__weight_contraction__line(self_: Line, other: Line) -> Scalar {
    return line__anti_wedge__line_at_infinity(self_, line__anti_dual(other));
}

fn line__weight_contraction__line_at_origin(self_: Line, other: LineAtOrigin) -> Scalar {
    return line__anti_wedge__line_at_infinity(self_, line_at_origin__anti_dual(other));
}

fn line__weight_contraction__motor(self_: Line, other: Motor) -> MultiVectorAtInfinity {
    return line__anti_wedge__multi_vector_at_infinity(self_, motor__anti_dual(other));
}

fn line__weight_contraction__multi_vector(self_: Line, other: MultiVector) -> MultiVectorAtInfinity {
    return line__anti_wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other));
}

fn line__weight_contraction__multi_vector_at_origin(self_: Line, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return line__anti_wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other));
}

fn line__weight_contraction__origin(self_: Line, other: Origin) -> PointAtInfinity {
    return line__anti_wedge__horizon(self_, origin__anti_dual(other));
}

fn line__weight_contraction__point(self_: Line, other: Point) -> PointAtInfinity {
    return line__anti_wedge__horizon(self_, point__anti_dual(other));
}

fn line__weight_contraction__rotor(self_: Line, other: Rotor) -> MultiVectorAtInfinity {
    return line__anti_wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other));
}

fn line_at_origin__weight_contraction__flector(self_: LineAtOrigin, other: Flector) -> PointAtInfinity {
    return line_at_origin__anti_wedge__flector_at_infinity(self_, flector__anti_dual(other));
}

fn line_at_origin__weight_contraction__line(self_: LineAtOrigin, other: Line) -> Scalar {
    return line_at_origin__anti_wedge__line_at_infinity(self_, line__anti_dual(other));
}

fn line_at_origin__weight_contraction__line_at_origin(self_: LineAtOrigin, other: LineAtOrigin) -> Scalar {
    return line_at_origin__anti_wedge__line_at_infinity(self_, line_at_origin__anti_dual(other));
}

fn line_at_origin__weight_contraction__motor(self_: LineAtOrigin, other: Motor) -> MultiVectorAtInfinity {
    return line_at_origin__anti_wedge__multi_vector_at_infinity(self_, motor__anti_dual(other));
}

fn line_at_origin__weight_contraction__multi_vector(self_: LineAtOrigin, other: MultiVector) -> MultiVectorAtInfinity {
    return line_at_origin__anti_wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other));
}

fn line_at_origin__weight_contraction__multi_vector_at_origin(self_: LineAtOrigin, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return line_at_origin__anti_wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other));
}

fn line_at_origin__weight_contraction__origin(self_: LineAtOrigin, other: Origin) -> PointAtInfinity {
    return line_at_origin__anti_wedge__horizon(self_, origin__anti_dual(other));
}

fn line_at_origin__weight_contraction__point(self_: LineAtOrigin, other: Point) -> PointAtInfinity {
    return line_at_origin__anti_wedge__horizon(self_, point__anti_dual(other));
}

fn line_at_origin__weight_contraction__rotor(self_: LineAtOrigin, other: Rotor) -> MultiVectorAtInfinity {
    return line_at_origin__anti_wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other));
}

fn motor__weight_contraction__flector(self_: Motor, other: Flector) -> FlectorAtInfinity {
    return motor__anti_wedge__flector_at_infinity(self_, flector__anti_dual(other));
}

fn motor__weight_contraction__line(self_: Motor, other: Line) -> MultiVectorAtInfinity {
    return motor__anti_wedge__line_at_infinity(self_, line__anti_dual(other));
}

fn motor__weight_contraction__line_at_origin(self_: Motor, other: LineAtOrigin) -> MultiVectorAtInfinity {
    return motor__anti_wedge__line_at_infinity(self_, line_at_origin__anti_dual(other));
}

fn motor__weight_contraction__motor(self_: Motor, other: Motor) -> MultiVectorAtInfinity {
    return motor__anti_wedge__multi_vector_at_infinity(self_, motor__anti_dual(other));
}

fn motor__weight_contraction__multi_vector(self_: Motor, other: MultiVector) -> MultiVectorAtInfinity {
    return motor__anti_wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other));
}

fn motor__weight_contraction__multi_vector_at_origin(self_: Motor, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return motor__anti_wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other));
}

fn motor__weight_contraction__origin(self_: Motor, other: Origin) -> FlectorAtInfinity {
    return motor__anti_wedge__horizon(self_, origin__anti_dual(other));
}

fn motor__weight_contraction__plane(self_: Motor, other: Plane) -> PointAtInfinity {
    return motor__anti_wedge__point_at_infinity(self_, plane__anti_dual(other));
}

fn motor__weight_contraction__plane_at_origin(self_: Motor, other: PlaneAtOrigin) -> PointAtInfinity {
    return motor__anti_wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other));
}

fn motor__weight_contraction__point(self_: Motor, other: Point) -> FlectorAtInfinity {
    return motor__anti_wedge__horizon(self_, point__anti_dual(other));
}

fn motor__weight_contraction__rotor(self_: Motor, other: Rotor) -> MultiVectorAtInfinity {
    return motor__anti_wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other));
}

fn motor__weight_contraction__transflector(self_: Motor, other: Transflector) -> PointAtInfinity {
    return motor__anti_wedge__point_at_infinity(self_, transflector__anti_dual(other));
}

fn multi_vector__weight_contraction__flector(self_: MultiVector, other: Flector) -> MultiVectorAtInfinity {
    return multi_vector__anti_wedge__flector_at_infinity(self_, flector__anti_dual(other));
}

fn multi_vector__weight_contraction__line(self_: MultiVector, other: Line) -> MultiVectorAtInfinity {
    return multi_vector__anti_wedge__line_at_infinity(self_, line__anti_dual(other));
}

fn multi_vector__weight_contraction__line_at_origin(self_: MultiVector, other: LineAtOrigin) -> MultiVectorAtInfinity {
    return multi_vector__anti_wedge__line_at_infinity(self_, line_at_origin__anti_dual(other));
}

fn multi_vector__weight_contraction__motor(self_: MultiVector, other: Motor) -> MultiVectorAtInfinity {
    return multi_vector__anti_wedge__multi_vector_at_infinity(self_, motor__anti_dual(other));
}

fn multi_vector__weight_contraction__multi_vector(self_: MultiVector, other: MultiVector) -> MultiVectorAtInfinity {
    return multi_vector__anti_wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other));
}

fn multi_vector__weight_contraction__multi_vector_at_origin(self_: MultiVector, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return multi_vector__anti_wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other));
}

fn multi_vector__weight_contraction__origin(self_: MultiVector, other: Origin) -> MultiVectorAtInfinity {
    return multi_vector__anti_wedge__horizon(self_, origin__anti_dual(other));
}

fn multi_vector__weight_contraction__plane(self_: MultiVector, other: Plane) -> MultiVectorAtInfinity {
    return multi_vector__anti_wedge__point_at_infinity(self_, plane__anti_dual(other));
}

fn multi_vector__weight_contraction__plane_at_origin(self_: MultiVector, other: PlaneAtOrigin) -> MultiVectorAtInfinity {
    return multi_vector__anti_wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other));
}

fn multi_vector__weight_contraction__point(self_: MultiVector, other: Point) -> MultiVectorAtInfinity {
    return multi_vector__anti_wedge__horizon(self_, point__anti_dual(other));
}

fn multi_vector__weight_contraction__rotor(self_: MultiVector, other: Rotor) -> MultiVectorAtInfinity {
    return multi_vector__anti_wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other));
}

fn multi_vector__weight_contraction__transflector(self_: MultiVector, other: Transflector) -> MultiVectorAtInfinity {
    return multi_vector__anti_wedge__point_at_infinity(self_, transflector__anti_dual(other));
}

fn multi_vector_at_origin__weight_contraction__flector(self_: MultiVectorAtOrigin, other: Flector) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__anti_wedge__flector_at_infinity(self_, flector__anti_dual(other));
}

fn multi_vector_at_origin__weight_contraction__line(self_: MultiVectorAtOrigin, other: Line) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__anti_wedge__line_at_infinity(self_, line__anti_dual(other));
}

fn multi_vector_at_origin__weight_contraction__line_at_origin(self_: MultiVectorAtOrigin, other: LineAtOrigin) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__anti_wedge__line_at_infinity(self_, line_at_origin__anti_dual(other));
}

fn multi_vector_at_origin__weight_contraction__motor(self_: MultiVectorAtOrigin, other: Motor) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__anti_wedge__multi_vector_at_infinity(self_, motor__anti_dual(other));
}

fn multi_vector_at_origin__weight_contraction__multi_vector(self_: MultiVectorAtOrigin, other: MultiVector) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__anti_wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other));
}

fn multi_vector_at_origin__weight_contraction__multi_vector_at_origin(self_: MultiVectorAtOrigin, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__anti_wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other));
}

fn multi_vector_at_origin__weight_contraction__origin(self_: MultiVectorAtOrigin, other: Origin) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__anti_wedge__horizon(self_, origin__anti_dual(other));
}

fn multi_vector_at_origin__weight_contraction__plane(self_: MultiVectorAtOrigin, other: Plane) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__anti_wedge__point_at_infinity(self_, plane__anti_dual(other));
}

fn multi_vector_at_origin__weight_contraction__plane_at_origin(self_: MultiVectorAtOrigin, other: PlaneAtOrigin) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__anti_wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other));
}

fn multi_vector_at_origin__weight_contraction__point(self_: MultiVectorAtOrigin, other: Point) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__anti_wedge__horizon(self_, point__anti_dual(other));
}

fn multi_vector_at_origin__weight_contraction__rotor(self_: MultiVectorAtOrigin, other: Rotor) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__anti_wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other));
}

fn multi_vector_at_origin__weight_contraction__transflector(self_: MultiVectorAtOrigin, other: Transflector) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__anti_wedge__point_at_infinity(self_, transflector__anti_dual(other));
}

fn origin__weight_contraction__flector(self_: Origin, other: Flector) -> Scalar {
    return origin__anti_wedge__flector_at_infinity(self_, flector__anti_dual(other));
}

fn origin__weight_contraction__motor(self_: Origin, other: Motor) -> Scalar {
    return origin__anti_wedge__multi_vector_at_infinity(self_, motor__anti_dual(other));
}

fn origin__weight_contraction__multi_vector(self_: Origin, other: MultiVector) -> Scalar {
    return origin__anti_wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other));
}

fn origin__weight_contraction__multi_vector_at_origin(self_: Origin, other: MultiVectorAtOrigin) -> Scalar {
    return origin__anti_wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other));
}

fn origin__weight_contraction__origin(self_: Origin, other: Origin) -> Scalar {
    return origin__anti_wedge__horizon(self_, origin__anti_dual(other));
}

fn origin__weight_contraction__point(self_: Origin, other: Point) -> Scalar {
    return origin__anti_wedge__horizon(self_, point__anti_dual(other));
}

fn origin__weight_contraction__rotor(self_: Origin, other: Rotor) -> Scalar {
    return origin__anti_wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other));
}

fn plane__weight_contraction__flector(self_: Plane, other: Flector) -> MultiVectorAtInfinity {
    return plane__anti_wedge__flector_at_infinity(self_, flector__anti_dual(other));
}

fn plane__weight_contraction__line(self_: Plane, other: Line) -> PointAtInfinity {
    return plane__anti_wedge__line_at_infinity(self_, line__anti_dual(other));
}

fn plane__weight_contraction__line_at_origin(self_: Plane, other: LineAtOrigin) -> PointAtInfinity {
    return plane__anti_wedge__line_at_infinity(self_, line_at_origin__anti_dual(other));
}

fn plane__weight_contraction__motor(self_: Plane, other: Motor) -> MultiVectorAtInfinity {
    return plane__anti_wedge__multi_vector_at_infinity(self_, motor__anti_dual(other));
}

fn plane__weight_contraction__multi_vector(self_: Plane, other: MultiVector) -> MultiVectorAtInfinity {
    return plane__anti_wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other));
}

fn plane__weight_contraction__multi_vector_at_origin(self_: Plane, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return plane__anti_wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other));
}

fn plane__weight_contraction__origin(self_: Plane, other: Origin) -> LineAtInfinity {
    return plane__anti_wedge__horizon(self_, origin__anti_dual(other));
}

fn plane__weight_contraction__plane(self_: Plane, other: Plane) -> Scalar {
    return plane__anti_wedge__point_at_infinity(self_, plane__anti_dual(other));
}

fn plane__weight_contraction__plane_at_origin(self_: Plane, other: PlaneAtOrigin) -> Scalar {
    return plane__anti_wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other));
}

fn plane__weight_contraction__point(self_: Plane, other: Point) -> LineAtInfinity {
    return plane__anti_wedge__horizon(self_, point__anti_dual(other));
}

fn plane__weight_contraction__rotor(self_: Plane, other: Rotor) -> MultiVectorAtInfinity {
    return plane__anti_wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other));
}

fn plane__weight_contraction__transflector(self_: Plane, other: Transflector) -> Scalar {
    return plane__anti_wedge__point_at_infinity(self_, transflector__anti_dual(other));
}

fn plane_at_origin__weight_contraction__flector(self_: PlaneAtOrigin, other: Flector) -> MultiVectorAtInfinity {
    return plane_at_origin__anti_wedge__flector_at_infinity(self_, flector__anti_dual(other));
}

fn plane_at_origin__weight_contraction__line(self_: PlaneAtOrigin, other: Line) -> PointAtInfinity {
    return plane_at_origin__anti_wedge__line_at_infinity(self_, line__anti_dual(other));
}

fn plane_at_origin__weight_contraction__line_at_origin(self_: PlaneAtOrigin, other: LineAtOrigin) -> PointAtInfinity {
    return plane_at_origin__anti_wedge__line_at_infinity(self_, line_at_origin__anti_dual(other));
}

fn plane_at_origin__weight_contraction__motor(self_: PlaneAtOrigin, other: Motor) -> MultiVectorAtInfinity {
    return plane_at_origin__anti_wedge__multi_vector_at_infinity(self_, motor__anti_dual(other));
}

fn plane_at_origin__weight_contraction__multi_vector(self_: PlaneAtOrigin, other: MultiVector) -> MultiVectorAtInfinity {
    return plane_at_origin__anti_wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other));
}

fn plane_at_origin__weight_contraction__multi_vector_at_origin(self_: PlaneAtOrigin, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return plane_at_origin__anti_wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other));
}

fn plane_at_origin__weight_contraction__origin(self_: PlaneAtOrigin, other: Origin) -> LineAtInfinity {
    return plane_at_origin__anti_wedge__horizon(self_, origin__anti_dual(other));
}

fn plane_at_origin__weight_contraction__plane(self_: PlaneAtOrigin, other: Plane) -> Scalar {
    return plane_at_origin__anti_wedge__point_at_infinity(self_, plane__anti_dual(other));
}

fn plane_at_origin__weight_contraction__plane_at_origin(self_: PlaneAtOrigin, other: PlaneAtOrigin) -> Scalar {
    return plane_at_origin__anti_wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other));
}

fn plane_at_origin__weight_contraction__point(self_: PlaneAtOrigin, other: Point) -> LineAtInfinity {
    return plane_at_origin__anti_wedge__horizon(self_, point__anti_dual(other));
}

fn plane_at_origin__weight_contraction__rotor(self_: PlaneAtOrigin, other: Rotor) -> MultiVectorAtInfinity {
    return plane_at_origin__anti_wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other));
}

fn plane_at_origin__weight_contraction__transflector(self_: PlaneAtOrigin, other: Transflector) -> Scalar {
    return plane_at_origin__anti_wedge__point_at_infinity(self_, transflector__anti_dual(other));
}

fn point__weight_contraction__flector(self_: Point, other: Flector) -> Scalar {
    return point__anti_wedge__flector_at_infinity(self_, flector__anti_dual(other));
}

fn point__weight_contraction__motor(self_: Point, other: Motor) -> Scalar {
    return point__anti_wedge__multi_vector_at_infinity(self_, motor__anti_dual(other));
}

fn point__weight_contraction__multi_vector(self_: Point, other: MultiVector) -> Scalar {
    return point__anti_wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other));
}

fn point__weight_contraction__multi_vector_at_origin(self_: Point, other: MultiVectorAtOrigin) -> Scalar {
    return point__anti_wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other));
}

fn point__weight_contraction__origin(self_: Point, other: Origin) -> Scalar {
    return point__anti_wedge__horizon(self_, origin__anti_dual(other));
}

fn point__weight_contraction__point(self_: Point, other: Point) -> Scalar {
    return point__anti_wedge__horizon(self_, point__anti_dual(other));
}

fn point__weight_contraction__rotor(self_: Point, other: Rotor) -> Scalar {
    return point__anti_wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other));
}

fn rotor__weight_contraction__flector(self_: Rotor, other: Flector) -> FlectorAtInfinity {
    return rotor__anti_wedge__flector_at_infinity(self_, flector__anti_dual(other));
}

fn rotor__weight_contraction__line(self_: Rotor, other: Line) -> MultiVectorAtInfinity {
    return rotor__anti_wedge__line_at_infinity(self_, line__anti_dual(other));
}

fn rotor__weight_contraction__line_at_origin(self_: Rotor, other: LineAtOrigin) -> MultiVectorAtInfinity {
    return rotor__anti_wedge__line_at_infinity(self_, line_at_origin__anti_dual(other));
}

fn rotor__weight_contraction__motor(self_: Rotor, other: Motor) -> MultiVectorAtInfinity {
    return rotor__anti_wedge__multi_vector_at_infinity(self_, motor__anti_dual(other));
}

fn rotor__weight_contraction__multi_vector(self_: Rotor, other: MultiVector) -> MultiVectorAtInfinity {
    return rotor__anti_wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other));
}

fn rotor__weight_contraction__multi_vector_at_origin(self_: Rotor, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return rotor__anti_wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other));
}

fn rotor__weight_contraction__origin(self_: Rotor, other: Origin) -> FlectorAtInfinity {
    return rotor__anti_wedge__horizon(self_, origin__anti_dual(other));
}

fn rotor__weight_contraction__plane(self_: Rotor, other: Plane) -> PointAtInfinity {
    return rotor__anti_wedge__point_at_infinity(self_, plane__anti_dual(other));
}

fn rotor__weight_contraction__plane_at_origin(self_: Rotor, other: PlaneAtOrigin) -> PointAtInfinity {
    return rotor__anti_wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other));
}

fn rotor__weight_contraction__point(self_: Rotor, other: Point) -> FlectorAtInfinity {
    return rotor__anti_wedge__horizon(self_, point__anti_dual(other));
}

fn rotor__weight_contraction__rotor(self_: Rotor, other: Rotor) -> MultiVectorAtInfinity {
    return rotor__anti_wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other));
}

fn rotor__weight_contraction__transflector(self_: Rotor, other: Transflector) -> PointAtInfinity {
    return rotor__anti_wedge__point_at_infinity(self_, transflector__anti_dual(other));
}

fn transflector__weight_contraction__flector(self_: Transflector, other: Flector) -> MultiVectorAtInfinity {
    return transflector__anti_wedge__flector_at_infinity(self_, flector__anti_dual(other));
}

fn transflector__weight_contraction__line(self_: Transflector, other: Line) -> PointAtInfinity {
    return transflector__anti_wedge__line_at_infinity(self_, line__anti_dual(other));
}

fn transflector__weight_contraction__line_at_origin(self_: Transflector, other: LineAtOrigin) -> PointAtInfinity {
    return transflector__anti_wedge__line_at_infinity(self_, line_at_origin__anti_dual(other));
}

fn transflector__weight_contraction__motor(self_: Transflector, other: Motor) -> MultiVectorAtInfinity {
    return transflector__anti_wedge__multi_vector_at_infinity(self_, motor__anti_dual(other));
}

fn transflector__weight_contraction__multi_vector(self_: Transflector, other: MultiVector) -> MultiVectorAtInfinity {
    return transflector__anti_wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other));
}

fn transflector__weight_contraction__multi_vector_at_origin(self_: Transflector, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return transflector__anti_wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other));
}

fn transflector__weight_contraction__origin(self_: Transflector, other: Origin) -> LineAtInfinity {
    return transflector__anti_wedge__horizon(self_, origin__anti_dual(other));
}

fn transflector__weight_contraction__plane(self_: Transflector, other: Plane) -> Scalar {
    return transflector__anti_wedge__point_at_infinity(self_, plane__anti_dual(other));
}

fn transflector__weight_contraction__plane_at_origin(self_: Transflector, other: PlaneAtOrigin) -> Scalar {
    return transflector__anti_wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other));
}

fn transflector__weight_contraction__point(self_: Transflector, other: Point) -> LineAtInfinity {
    return transflector__anti_wedge__horizon(self_, point__anti_dual(other));
}

fn transflector__weight_contraction__rotor(self_: Transflector, other: Rotor) -> MultiVectorAtInfinity {
    return transflector__anti_wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other));
}

fn transflector__weight_contraction__transflector(self_: Transflector, other: Transflector) -> Scalar {
    return transflector__anti_wedge__point_at_infinity(self_, transflector__anti_dual(other));
}

fn translator__weight_contraction__flector(self_: Translator, other: Flector) -> FlectorAtInfinity {
    return translator__anti_wedge__flector_at_infinity(self_, flector__anti_dual(other));
}

fn translator__weight_contraction__line(self_: Translator, other: Line) -> LineAtInfinity {
    return translator__anti_wedge__line_at_infinity(self_, line__anti_dual(other));
}

fn translator__weight_contraction__line_at_origin(self_: Translator, other: LineAtOrigin) -> LineAtInfinity {
    return translator__anti_wedge__line_at_infinity(self_, line_at_origin__anti_dual(other));
}

fn translator__weight_contraction__motor(self_: Translator, other: Motor) -> MultiVectorAtInfinity {
    return translator__anti_wedge__multi_vector_at_infinity(self_, motor__anti_dual(other));
}

fn translator__weight_contraction__multi_vector(self_: Translator, other: MultiVector) -> MultiVectorAtInfinity {
    return translator__anti_wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other));
}

fn translator__weight_contraction__multi_vector_at_origin(self_: Translator, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return translator__anti_wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other));
}

fn translator__weight_contraction__origin(self_: Translator, other: Origin) -> Horizon {
    return translator__anti_wedge__horizon(self_, origin__anti_dual(other));
}

fn translator__weight_contraction__plane(self_: Translator, other: Plane) -> PointAtInfinity {
    return translator__anti_wedge__point_at_infinity(self_, plane__anti_dual(other));
}

fn translator__weight_contraction__plane_at_origin(self_: Translator, other: PlaneAtOrigin) -> PointAtInfinity {
    return translator__anti_wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other));
}

fn translator__weight_contraction__point(self_: Translator, other: Point) -> Horizon {
    return translator__anti_wedge__horizon(self_, point__anti_dual(other));
}

fn translator__weight_contraction__rotor(self_: Translator, other: Rotor) -> MultiVectorAtInfinity {
    return translator__anti_wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other));
}

fn translator__weight_contraction__transflector(self_: Translator, other: Transflector) -> PointAtInfinity {
    return translator__anti_wedge__point_at_infinity(self_, transflector__anti_dual(other));
}

fn flector__bulk_expansion__flector(self_: Flector, other: Flector) -> Motor {
    return flector__wedge__flector(self_, flector__dual(other));
}

fn flector__bulk_expansion__flector_at_infinity(self_: Flector, other: FlectorAtInfinity) -> Motor {
    return flector__wedge__flector(self_, flector_at_infinity__dual(other));
}

fn flector__bulk_expansion__horizon(self_: Flector, other: Horizon) -> Rotor {
    return flector__wedge__origin(self_, horizon__dual(other));
}

fn flector__bulk_expansion__line(self_: Flector, other: Line) -> PlaneAtOrigin {
    return flector__wedge__line_at_origin(self_, line__dual(other));
}

fn flector__bulk_expansion__line_at_infinity(self_: Flector, other: LineAtInfinity) -> PlaneAtOrigin {
    return flector__wedge__line_at_origin(self_, line_at_infinity__dual(other));
}

fn flector__bulk_expansion__motor(self_: Flector, other: Motor) -> PlaneAtOrigin {
    return flector__wedge__line_at_origin(self_, motor__dual(other));
}

fn flector__bulk_expansion__multi_vector(self_: Flector, other: MultiVector) -> MultiVectorAtOrigin {
    return flector__wedge__multi_vector_at_origin(self_, multi_vector__dual(other));
}

fn flector__bulk_expansion__multi_vector_at_infinity(self_: Flector, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return flector__wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other));
}

fn flector__bulk_expansion__plane(self_: Flector, other: Plane) -> Rotor {
    return flector__wedge__origin(self_, plane__dual(other));
}

fn flector__bulk_expansion__point(self_: Flector, other: Point) -> AntiScalar {
    return flector__wedge__plane_at_origin(self_, point__dual(other));
}

fn flector__bulk_expansion__point_at_infinity(self_: Flector, other: PointAtInfinity) -> AntiScalar {
    return flector__wedge__plane_at_origin(self_, point_at_infinity__dual(other));
}

fn flector__bulk_expansion__transflector(self_: Flector, other: Transflector) -> Motor {
    return flector__wedge__flector(self_, transflector__dual(other));
}

fn flector__bulk_expansion__translator(self_: Flector, other: Translator) -> PlaneAtOrigin {
    return flector__wedge__line_at_origin(self_, translator__dual(other));
}

fn flector_at_infinity__bulk_expansion__flector(self_: FlectorAtInfinity, other: Flector) -> Motor {
    return flector_at_infinity__wedge__flector(self_, flector__dual(other));
}

fn flector_at_infinity__bulk_expansion__flector_at_infinity(self_: FlectorAtInfinity, other: FlectorAtInfinity) -> Motor {
    return flector_at_infinity__wedge__flector(self_, flector_at_infinity__dual(other));
}

fn flector_at_infinity__bulk_expansion__horizon(self_: FlectorAtInfinity, other: Horizon) -> Rotor {
    return flector_at_infinity__wedge__origin(self_, horizon__dual(other));
}

fn flector_at_infinity__bulk_expansion__line(self_: FlectorAtInfinity, other: Line) -> PlaneAtOrigin {
    return flector_at_infinity__wedge__line_at_origin(self_, line__dual(other));
}

fn flector_at_infinity__bulk_expansion__line_at_infinity(self_: FlectorAtInfinity, other: LineAtInfinity) -> PlaneAtOrigin {
    return flector_at_infinity__wedge__line_at_origin(self_, line_at_infinity__dual(other));
}

fn flector_at_infinity__bulk_expansion__motor(self_: FlectorAtInfinity, other: Motor) -> PlaneAtOrigin {
    return flector_at_infinity__wedge__line_at_origin(self_, motor__dual(other));
}

fn flector_at_infinity__bulk_expansion__multi_vector(self_: FlectorAtInfinity, other: MultiVector) -> MultiVectorAtOrigin {
    return flector_at_infinity__wedge__multi_vector_at_origin(self_, multi_vector__dual(other));
}

fn flector_at_infinity__bulk_expansion__multi_vector_at_infinity(self_: FlectorAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return flector_at_infinity__wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other));
}

fn flector_at_infinity__bulk_expansion__plane(self_: FlectorAtInfinity, other: Plane) -> Rotor {
    return flector_at_infinity__wedge__origin(self_, plane__dual(other));
}

fn flector_at_infinity__bulk_expansion__point(self_: FlectorAtInfinity, other: Point) -> AntiScalar {
    return flector_at_infinity__wedge__plane_at_origin(self_, point__dual(other));
}

fn flector_at_infinity__bulk_expansion__point_at_infinity(self_: FlectorAtInfinity, other: PointAtInfinity) -> AntiScalar {
    return flector_at_infinity__wedge__plane_at_origin(self_, point_at_infinity__dual(other));
}

fn flector_at_infinity__bulk_expansion__transflector(self_: FlectorAtInfinity, other: Transflector) -> Motor {
    return flector_at_infinity__wedge__flector(self_, transflector__dual(other));
}

fn flector_at_infinity__bulk_expansion__translator(self_: FlectorAtInfinity, other: Translator) -> PlaneAtOrigin {
    return flector_at_infinity__wedge__line_at_origin(self_, translator__dual(other));
}

fn horizon__bulk_expansion__flector(self_: Horizon, other: Flector) -> AntiScalar {
    return horizon__wedge__flector(self_, flector__dual(other));
}

fn horizon__bulk_expansion__flector_at_infinity(self_: Horizon, other: FlectorAtInfinity) -> AntiScalar {
    return horizon__wedge__flector(self_, flector_at_infinity__dual(other));
}

fn horizon__bulk_expansion__horizon(self_: Horizon, other: Horizon) -> AntiScalar {
    return horizon__wedge__origin(self_, horizon__dual(other));
}

fn horizon__bulk_expansion__multi_vector(self_: Horizon, other: MultiVector) -> AntiScalar {
    return horizon__wedge__multi_vector_at_origin(self_, multi_vector__dual(other));
}

fn horizon__bulk_expansion__multi_vector_at_infinity(self_: Horizon, other: MultiVectorAtInfinity) -> AntiScalar {
    return horizon__wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other));
}

fn horizon__bulk_expansion__plane(self_: Horizon, other: Plane) -> AntiScalar {
    return horizon__wedge__origin(self_, plane__dual(other));
}

fn horizon__bulk_expansion__transflector(self_: Horizon, other: Transflector) -> AntiScalar {
    return horizon__wedge__flector(self_, transflector__dual(other));
}

fn line__bulk_expansion__flector(self_: Line, other: Flector) -> Plane {
    return line__wedge__flector(self_, flector__dual(other));
}

fn line__bulk_expansion__flector_at_infinity(self_: Line, other: FlectorAtInfinity) -> Plane {
    return line__wedge__flector(self_, flector_at_infinity__dual(other));
}

fn line__bulk_expansion__horizon(self_: Line, other: Horizon) -> PlaneAtOrigin {
    return line__wedge__origin(self_, horizon__dual(other));
}

fn line__bulk_expansion__line(self_: Line, other: Line) -> AntiScalar {
    return line__wedge__line_at_origin(self_, line__dual(other));
}

fn line__bulk_expansion__line_at_infinity(self_: Line, other: LineAtInfinity) -> AntiScalar {
    return line__wedge__line_at_origin(self_, line_at_infinity__dual(other));
}

fn line__bulk_expansion__motor(self_: Line, other: Motor) -> AntiScalar {
    return line__wedge__line_at_origin(self_, motor__dual(other));
}

fn line__bulk_expansion__multi_vector(self_: Line, other: MultiVector) -> MultiVectorAtOrigin {
    return line__wedge__multi_vector_at_origin(self_, multi_vector__dual(other));
}

fn line__bulk_expansion__multi_vector_at_infinity(self_: Line, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return line__wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other));
}

fn line__bulk_expansion__plane(self_: Line, other: Plane) -> PlaneAtOrigin {
    return line__wedge__origin(self_, plane__dual(other));
}

fn line__bulk_expansion__transflector(self_: Line, other: Transflector) -> Plane {
    return line__wedge__flector(self_, transflector__dual(other));
}

fn line__bulk_expansion__translator(self_: Line, other: Translator) -> AntiScalar {
    return line__wedge__line_at_origin(self_, translator__dual(other));
}

fn line_at_infinity__bulk_expansion__flector(self_: LineAtInfinity, other: Flector) -> Plane {
    return line_at_infinity__wedge__flector(self_, flector__dual(other));
}

fn line_at_infinity__bulk_expansion__flector_at_infinity(self_: LineAtInfinity, other: FlectorAtInfinity) -> Plane {
    return line_at_infinity__wedge__flector(self_, flector_at_infinity__dual(other));
}

fn line_at_infinity__bulk_expansion__horizon(self_: LineAtInfinity, other: Horizon) -> PlaneAtOrigin {
    return line_at_infinity__wedge__origin(self_, horizon__dual(other));
}

fn line_at_infinity__bulk_expansion__line(self_: LineAtInfinity, other: Line) -> AntiScalar {
    return line_at_infinity__wedge__line_at_origin(self_, line__dual(other));
}

fn line_at_infinity__bulk_expansion__line_at_infinity(self_: LineAtInfinity, other: LineAtInfinity) -> AntiScalar {
    return line_at_infinity__wedge__line_at_origin(self_, line_at_infinity__dual(other));
}

fn line_at_infinity__bulk_expansion__motor(self_: LineAtInfinity, other: Motor) -> AntiScalar {
    return line_at_infinity__wedge__line_at_origin(self_, motor__dual(other));
}

fn line_at_infinity__bulk_expansion__multi_vector(self_: LineAtInfinity, other: MultiVector) -> MultiVectorAtOrigin {
    return line_at_infinity__wedge__multi_vector_at_origin(self_, multi_vector__dual(other));
}

fn line_at_infinity__bulk_expansion__multi_vector_at_infinity(self_: LineAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return line_at_infinity__wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other));
}

fn line_at_infinity__bulk_expansion__plane(self_: LineAtInfinity, other: Plane) -> PlaneAtOrigin {
    return line_at_infinity__wedge__origin(self_, plane__dual(other));
}

fn line_at_infinity__bulk_expansion__transflector(self_: LineAtInfinity, other: Transflector) -> Plane {
    return line_at_infinity__wedge__flector(self_, transflector__dual(other));
}

fn line_at_infinity__bulk_expansion__translator(self_: LineAtInfinity, other: Translator) -> AntiScalar {
    return line_at_infinity__wedge__line_at_origin(self_, translator__dual(other));
}

fn line_at_origin__bulk_expansion__flector(self_: LineAtOrigin, other: Flector) -> PlaneAtOrigin {
    return line_at_origin__wedge__flector(self_, flector__dual(other));
}

fn line_at_origin__bulk_expansion__flector_at_infinity(self_: LineAtOrigin, other: FlectorAtInfinity) -> PlaneAtOrigin {
    return line_at_origin__wedge__flector(self_, flector_at_infinity__dual(other));
}

fn line_at_origin__bulk_expansion__transflector(self_: LineAtOrigin, other: Transflector) -> PlaneAtOrigin {
    return line_at_origin__wedge__flector(self_, transflector__dual(other));
}

fn motor__bulk_expansion__flector(self_: Motor, other: Flector) -> Plane {
    return motor__wedge__flector(self_, flector__dual(other));
}

fn motor__bulk_expansion__flector_at_infinity(self_: Motor, other: FlectorAtInfinity) -> Plane {
    return motor__wedge__flector(self_, flector_at_infinity__dual(other));
}

fn motor__bulk_expansion__horizon(self_: Motor, other: Horizon) -> PlaneAtOrigin {
    return motor__wedge__origin(self_, horizon__dual(other));
}

fn motor__bulk_expansion__line(self_: Motor, other: Line) -> AntiScalar {
    return motor__wedge__line_at_origin(self_, line__dual(other));
}

fn motor__bulk_expansion__line_at_infinity(self_: Motor, other: LineAtInfinity) -> AntiScalar {
    return motor__wedge__line_at_origin(self_, line_at_infinity__dual(other));
}

fn motor__bulk_expansion__motor(self_: Motor, other: Motor) -> AntiScalar {
    return motor__wedge__line_at_origin(self_, motor__dual(other));
}

fn motor__bulk_expansion__multi_vector(self_: Motor, other: MultiVector) -> MultiVectorAtOrigin {
    return motor__wedge__multi_vector_at_origin(self_, multi_vector__dual(other));
}

fn motor__bulk_expansion__multi_vector_at_infinity(self_: Motor, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return motor__wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other));
}

fn motor__bulk_expansion__plane(self_: Motor, other: Plane) -> PlaneAtOrigin {
    return motor__wedge__origin(self_, plane__dual(other));
}

fn motor__bulk_expansion__transflector(self_: Motor, other: Transflector) -> Plane {
    return motor__wedge__flector(self_, transflector__dual(other));
}

fn motor__bulk_expansion__translator(self_: Motor, other: Translator) -> AntiScalar {
    return motor__wedge__line_at_origin(self_, translator__dual(other));
}

fn multi_vector__bulk_expansion__flector(self_: MultiVector, other: Flector) -> MultiVector {
    return multi_vector__wedge__flector(self_, flector__dual(other));
}

fn multi_vector__bulk_expansion__flector_at_infinity(self_: MultiVector, other: FlectorAtInfinity) -> MultiVector {
    return multi_vector__wedge__flector(self_, flector_at_infinity__dual(other));
}

fn multi_vector__bulk_expansion__horizon(self_: MultiVector, other: Horizon) -> MultiVectorAtOrigin {
    return multi_vector__wedge__origin(self_, horizon__dual(other));
}

fn multi_vector__bulk_expansion__line(self_: MultiVector, other: Line) -> MultiVectorAtOrigin {
    return multi_vector__wedge__line_at_origin(self_, line__dual(other));
}

fn multi_vector__bulk_expansion__line_at_infinity(self_: MultiVector, other: LineAtInfinity) -> MultiVectorAtOrigin {
    return multi_vector__wedge__line_at_origin(self_, line_at_infinity__dual(other));
}

fn multi_vector__bulk_expansion__motor(self_: MultiVector, other: Motor) -> MultiVectorAtOrigin {
    return multi_vector__wedge__line_at_origin(self_, motor__dual(other));
}

fn multi_vector__bulk_expansion__multi_vector(self_: MultiVector, other: MultiVector) -> MultiVectorAtOrigin {
    return multi_vector__wedge__multi_vector_at_origin(self_, multi_vector__dual(other));
}

fn multi_vector__bulk_expansion__multi_vector_at_infinity(self_: MultiVector, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return multi_vector__wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other));
}

fn multi_vector__bulk_expansion__plane(self_: MultiVector, other: Plane) -> MultiVectorAtOrigin {
    return multi_vector__wedge__origin(self_, plane__dual(other));
}

fn multi_vector__bulk_expansion__point(self_: MultiVector, other: Point) -> MultiVectorAtOrigin {
    return multi_vector__wedge__plane_at_origin(self_, point__dual(other));
}

fn multi_vector__bulk_expansion__point_at_infinity(self_: MultiVector, other: PointAtInfinity) -> MultiVectorAtOrigin {
    return multi_vector__wedge__plane_at_origin(self_, point_at_infinity__dual(other));
}

fn multi_vector__bulk_expansion__transflector(self_: MultiVector, other: Transflector) -> MultiVector {
    return multi_vector__wedge__flector(self_, transflector__dual(other));
}

fn multi_vector__bulk_expansion__translator(self_: MultiVector, other: Translator) -> MultiVectorAtOrigin {
    return multi_vector__wedge__line_at_origin(self_, translator__dual(other));
}

fn multi_vector_at_infinity__bulk_expansion__flector(self_: MultiVectorAtInfinity, other: Flector) -> MultiVector {
    return multi_vector_at_infinity__wedge__flector(self_, flector__dual(other));
}

fn multi_vector_at_infinity__bulk_expansion__flector_at_infinity(self_: MultiVectorAtInfinity, other: FlectorAtInfinity) -> MultiVector {
    return multi_vector_at_infinity__wedge__flector(self_, flector_at_infinity__dual(other));
}

fn multi_vector_at_infinity__bulk_expansion__horizon(self_: MultiVectorAtInfinity, other: Horizon) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__wedge__origin(self_, horizon__dual(other));
}

fn multi_vector_at_infinity__bulk_expansion__line(self_: MultiVectorAtInfinity, other: Line) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__wedge__line_at_origin(self_, line__dual(other));
}

fn multi_vector_at_infinity__bulk_expansion__line_at_infinity(self_: MultiVectorAtInfinity, other: LineAtInfinity) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__wedge__line_at_origin(self_, line_at_infinity__dual(other));
}

fn multi_vector_at_infinity__bulk_expansion__motor(self_: MultiVectorAtInfinity, other: Motor) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__wedge__line_at_origin(self_, motor__dual(other));
}

fn multi_vector_at_infinity__bulk_expansion__multi_vector(self_: MultiVectorAtInfinity, other: MultiVector) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__wedge__multi_vector_at_origin(self_, multi_vector__dual(other));
}

fn multi_vector_at_infinity__bulk_expansion__multi_vector_at_infinity(self_: MultiVectorAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other));
}

fn multi_vector_at_infinity__bulk_expansion__plane(self_: MultiVectorAtInfinity, other: Plane) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__wedge__origin(self_, plane__dual(other));
}

fn multi_vector_at_infinity__bulk_expansion__point(self_: MultiVectorAtInfinity, other: Point) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__wedge__plane_at_origin(self_, point__dual(other));
}

fn multi_vector_at_infinity__bulk_expansion__point_at_infinity(self_: MultiVectorAtInfinity, other: PointAtInfinity) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__wedge__plane_at_origin(self_, point_at_infinity__dual(other));
}

fn multi_vector_at_infinity__bulk_expansion__transflector(self_: MultiVectorAtInfinity, other: Transflector) -> MultiVector {
    return multi_vector_at_infinity__wedge__flector(self_, transflector__dual(other));
}

fn multi_vector_at_infinity__bulk_expansion__translator(self_: MultiVectorAtInfinity, other: Translator) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__wedge__line_at_origin(self_, translator__dual(other));
}

fn multi_vector_at_origin__bulk_expansion__flector(self_: MultiVectorAtOrigin, other: Flector) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__wedge__flector(self_, flector__dual(other));
}

fn multi_vector_at_origin__bulk_expansion__flector_at_infinity(self_: MultiVectorAtOrigin, other: FlectorAtInfinity) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__wedge__flector(self_, flector_at_infinity__dual(other));
}

fn multi_vector_at_origin__bulk_expansion__transflector(self_: MultiVectorAtOrigin, other: Transflector) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__wedge__flector(self_, transflector__dual(other));
}

fn origin__bulk_expansion__flector(self_: Origin, other: Flector) -> Rotor {
    return origin__wedge__flector(self_, flector__dual(other));
}

fn origin__bulk_expansion__flector_at_infinity(self_: Origin, other: FlectorAtInfinity) -> Rotor {
    return origin__wedge__flector(self_, flector_at_infinity__dual(other));
}

fn origin__bulk_expansion__transflector(self_: Origin, other: Transflector) -> Rotor {
    return origin__wedge__flector(self_, transflector__dual(other));
}

fn plane__bulk_expansion__flector(self_: Plane, other: Flector) -> AntiScalar {
    return plane__wedge__flector(self_, flector__dual(other));
}

fn plane__bulk_expansion__flector_at_infinity(self_: Plane, other: FlectorAtInfinity) -> AntiScalar {
    return plane__wedge__flector(self_, flector_at_infinity__dual(other));
}

fn plane__bulk_expansion__horizon(self_: Plane, other: Horizon) -> AntiScalar {
    return plane__wedge__origin(self_, horizon__dual(other));
}

fn plane__bulk_expansion__multi_vector(self_: Plane, other: MultiVector) -> AntiScalar {
    return plane__wedge__multi_vector_at_origin(self_, multi_vector__dual(other));
}

fn plane__bulk_expansion__multi_vector_at_infinity(self_: Plane, other: MultiVectorAtInfinity) -> AntiScalar {
    return plane__wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other));
}

fn plane__bulk_expansion__plane(self_: Plane, other: Plane) -> AntiScalar {
    return plane__wedge__origin(self_, plane__dual(other));
}

fn plane__bulk_expansion__transflector(self_: Plane, other: Transflector) -> AntiScalar {
    return plane__wedge__flector(self_, transflector__dual(other));
}

fn plane_at_origin__bulk_expansion__flector(self_: PlaneAtOrigin, other: Flector) -> AntiScalar {
    return plane_at_origin__wedge__flector(self_, flector__dual(other));
}

fn plane_at_origin__bulk_expansion__flector_at_infinity(self_: PlaneAtOrigin, other: FlectorAtInfinity) -> AntiScalar {
    return plane_at_origin__wedge__flector(self_, flector_at_infinity__dual(other));
}

fn plane_at_origin__bulk_expansion__transflector(self_: PlaneAtOrigin, other: Transflector) -> AntiScalar {
    return plane_at_origin__wedge__flector(self_, transflector__dual(other));
}

fn point__bulk_expansion__flector(self_: Point, other: Flector) -> Motor {
    return point__wedge__flector(self_, flector__dual(other));
}

fn point__bulk_expansion__flector_at_infinity(self_: Point, other: FlectorAtInfinity) -> Motor {
    return point__wedge__flector(self_, flector_at_infinity__dual(other));
}

fn point__bulk_expansion__horizon(self_: Point, other: Horizon) -> LineAtOrigin {
    return point__wedge__origin(self_, horizon__dual(other));
}

fn point__bulk_expansion__line(self_: Point, other: Line) -> PlaneAtOrigin {
    return point__wedge__line_at_origin(self_, line__dual(other));
}

fn point__bulk_expansion__line_at_infinity(self_: Point, other: LineAtInfinity) -> PlaneAtOrigin {
    return point__wedge__line_at_origin(self_, line_at_infinity__dual(other));
}

fn point__bulk_expansion__motor(self_: Point, other: Motor) -> PlaneAtOrigin {
    return point__wedge__line_at_origin(self_, motor__dual(other));
}

fn point__bulk_expansion__multi_vector(self_: Point, other: MultiVector) -> MultiVectorAtOrigin {
    return point__wedge__multi_vector_at_origin(self_, multi_vector__dual(other));
}

fn point__bulk_expansion__multi_vector_at_infinity(self_: Point, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return point__wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other));
}

fn point__bulk_expansion__plane(self_: Point, other: Plane) -> LineAtOrigin {
    return point__wedge__origin(self_, plane__dual(other));
}

fn point__bulk_expansion__point(self_: Point, other: Point) -> AntiScalar {
    return point__wedge__plane_at_origin(self_, point__dual(other));
}

fn point__bulk_expansion__point_at_infinity(self_: Point, other: PointAtInfinity) -> AntiScalar {
    return point__wedge__plane_at_origin(self_, point_at_infinity__dual(other));
}

fn point__bulk_expansion__transflector(self_: Point, other: Transflector) -> Motor {
    return point__wedge__flector(self_, transflector__dual(other));
}

fn point__bulk_expansion__translator(self_: Point, other: Translator) -> PlaneAtOrigin {
    return point__wedge__line_at_origin(self_, translator__dual(other));
}

fn point_at_infinity__bulk_expansion__flector(self_: PointAtInfinity, other: Flector) -> Motor {
    return point_at_infinity__wedge__flector(self_, flector__dual(other));
}

fn point_at_infinity__bulk_expansion__flector_at_infinity(self_: PointAtInfinity, other: FlectorAtInfinity) -> Motor {
    return point_at_infinity__wedge__flector(self_, flector_at_infinity__dual(other));
}

fn point_at_infinity__bulk_expansion__horizon(self_: PointAtInfinity, other: Horizon) -> LineAtOrigin {
    return point_at_infinity__wedge__origin(self_, horizon__dual(other));
}

fn point_at_infinity__bulk_expansion__line(self_: PointAtInfinity, other: Line) -> PlaneAtOrigin {
    return point_at_infinity__wedge__line_at_origin(self_, line__dual(other));
}

fn point_at_infinity__bulk_expansion__line_at_infinity(self_: PointAtInfinity, other: LineAtInfinity) -> PlaneAtOrigin {
    return point_at_infinity__wedge__line_at_origin(self_, line_at_infinity__dual(other));
}

fn point_at_infinity__bulk_expansion__motor(self_: PointAtInfinity, other: Motor) -> PlaneAtOrigin {
    return point_at_infinity__wedge__line_at_origin(self_, motor__dual(other));
}

fn point_at_infinity__bulk_expansion__multi_vector(self_: PointAtInfinity, other: MultiVector) -> MultiVectorAtOrigin {
    return point_at_infinity__wedge__multi_vector_at_origin(self_, multi_vector__dual(other));
}

fn point_at_infinity__bulk_expansion__multi_vector_at_infinity(self_: PointAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return point_at_infinity__wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other));
}

fn point_at_infinity__bulk_expansion__plane(self_: PointAtInfinity, other: Plane) -> LineAtOrigin {
    return point_at_infinity__wedge__origin(self_, plane__dual(other));
}

fn point_at_infinity__bulk_expansion__point(self_: PointAtInfinity, other: Point) -> AntiScalar {
    return point_at_infinity__wedge__plane_at_origin(self_, point__dual(other));
}

fn point_at_infinity__bulk_expansion__point_at_infinity(self_: PointAtInfinity, other: PointAtInfinity) -> AntiScalar {
    return point_at_infinity__wedge__plane_at_origin(self_, point_at_infinity__dual(other));
}

fn point_at_infinity__bulk_expansion__transflector(self_: PointAtInfinity, other: Transflector) -> Motor {
    return point_at_infinity__wedge__flector(self_, transflector__dual(other));
}

fn point_at_infinity__bulk_expansion__translator(self_: PointAtInfinity, other: Translator) -> PlaneAtOrigin {
    return point_at_infinity__wedge__line_at_origin(self_, translator__dual(other));
}

fn rotor__bulk_expansion__flector(self_: Rotor, other: Flector) -> PlaneAtOrigin {
    return rotor__wedge__flector(self_, flector__dual(other));
}

fn rotor__bulk_expansion__flector_at_infinity(self_: Rotor, other: FlectorAtInfinity) -> PlaneAtOrigin {
    return rotor__wedge__flector(self_, flector_at_infinity__dual(other));
}

fn rotor__bulk_expansion__transflector(self_: Rotor, other: Transflector) -> PlaneAtOrigin {
    return rotor__wedge__flector(self_, transflector__dual(other));
}

fn transflector__bulk_expansion__flector(self_: Transflector, other: Flector) -> Motor {
    return transflector__wedge__flector(self_, flector__dual(other));
}

fn transflector__bulk_expansion__flector_at_infinity(self_: Transflector, other: FlectorAtInfinity) -> Motor {
    return transflector__wedge__flector(self_, flector_at_infinity__dual(other));
}

fn transflector__bulk_expansion__horizon(self_: Transflector, other: Horizon) -> Rotor {
    return transflector__wedge__origin(self_, horizon__dual(other));
}

fn transflector__bulk_expansion__line(self_: Transflector, other: Line) -> PlaneAtOrigin {
    return transflector__wedge__line_at_origin(self_, line__dual(other));
}

fn transflector__bulk_expansion__line_at_infinity(self_: Transflector, other: LineAtInfinity) -> PlaneAtOrigin {
    return transflector__wedge__line_at_origin(self_, line_at_infinity__dual(other));
}

fn transflector__bulk_expansion__motor(self_: Transflector, other: Motor) -> PlaneAtOrigin {
    return transflector__wedge__line_at_origin(self_, motor__dual(other));
}

fn transflector__bulk_expansion__multi_vector(self_: Transflector, other: MultiVector) -> MultiVectorAtOrigin {
    return transflector__wedge__multi_vector_at_origin(self_, multi_vector__dual(other));
}

fn transflector__bulk_expansion__multi_vector_at_infinity(self_: Transflector, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return transflector__wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other));
}

fn transflector__bulk_expansion__plane(self_: Transflector, other: Plane) -> Rotor {
    return transflector__wedge__origin(self_, plane__dual(other));
}

fn transflector__bulk_expansion__point(self_: Transflector, other: Point) -> AntiScalar {
    return transflector__wedge__plane_at_origin(self_, point__dual(other));
}

fn transflector__bulk_expansion__point_at_infinity(self_: Transflector, other: PointAtInfinity) -> AntiScalar {
    return transflector__wedge__plane_at_origin(self_, point_at_infinity__dual(other));
}

fn transflector__bulk_expansion__transflector(self_: Transflector, other: Transflector) -> Motor {
    return transflector__wedge__flector(self_, transflector__dual(other));
}

fn transflector__bulk_expansion__translator(self_: Transflector, other: Translator) -> PlaneAtOrigin {
    return transflector__wedge__line_at_origin(self_, translator__dual(other));
}

fn translator__bulk_expansion__flector(self_: Translator, other: Flector) -> Plane {
    return translator__wedge__flector(self_, flector__dual(other));
}

fn translator__bulk_expansion__flector_at_infinity(self_: Translator, other: FlectorAtInfinity) -> Plane {
    return translator__wedge__flector(self_, flector_at_infinity__dual(other));
}

fn translator__bulk_expansion__horizon(self_: Translator, other: Horizon) -> PlaneAtOrigin {
    return translator__wedge__origin(self_, horizon__dual(other));
}

fn translator__bulk_expansion__line(self_: Translator, other: Line) -> AntiScalar {
    return translator__wedge__line_at_origin(self_, line__dual(other));
}

fn translator__bulk_expansion__line_at_infinity(self_: Translator, other: LineAtInfinity) -> AntiScalar {
    return translator__wedge__line_at_origin(self_, line_at_infinity__dual(other));
}

fn translator__bulk_expansion__motor(self_: Translator, other: Motor) -> AntiScalar {
    return translator__wedge__line_at_origin(self_, motor__dual(other));
}

fn translator__bulk_expansion__multi_vector(self_: Translator, other: MultiVector) -> MultiVectorAtOrigin {
    return translator__wedge__multi_vector_at_origin(self_, multi_vector__dual(other));
}

fn translator__bulk_expansion__multi_vector_at_infinity(self_: Translator, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return translator__wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other));
}

fn translator__bulk_expansion__plane(self_: Translator, other: Plane) -> PlaneAtOrigin {
    return translator__wedge__origin(self_, plane__dual(other));
}

fn translator__bulk_expansion__transflector(self_: Translator, other: Transflector) -> Plane {
    return translator__wedge__flector(self_, transflector__dual(other));
}

fn translator__bulk_expansion__translator(self_: Translator, other: Translator) -> AntiScalar {
    return translator__wedge__line_at_origin(self_, translator__dual(other));
}

fn flector__weight_expansion__flector(self_: Flector, other: Flector) -> Motor {
    return flector__wedge__flector_at_infinity(self_, flector__anti_dual(other));
}

fn flector__weight_expansion__line(self_: Flector, other: Line) -> Plane {
    return flector__wedge__line_at_infinity(self_, line__anti_dual(other));
}

fn flector__weight_expansion__line_at_origin(self_: Flector, other: LineAtOrigin) -> Plane {
    return flector__wedge__line_at_infinity(self_, line_at_origin__anti_dual(other));
}

fn flector__weight_expansion__motor(self_: Flector, other: Motor) -> MultiVector {
    return flector__wedge__multi_vector_at_infinity(self_, motor__anti_dual(other));
}

fn flector__weight_expansion__multi_vector(self_: Flector, other: MultiVector) -> MultiVector {
    return flector__wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other));
}

fn flector__weight_expansion__multi_vector_at_origin(self_: Flector, other: MultiVectorAtOrigin) -> MultiVector {
    return flector__wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other));
}

fn flector__weight_expansion__origin(self_: Flector, other: Origin) -> AntiScalar {
    return flector__wedge__horizon(self_, origin__anti_dual(other));
}

fn flector__weight_expansion__plane(self_: Flector, other: Plane) -> Motor {
    return flector__wedge__point_at_infinity(self_, plane__anti_dual(other));
}

fn flector__weight_expansion__plane_at_origin(self_: Flector, other: PlaneAtOrigin) -> Motor {
    return flector__wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other));
}

fn flector__weight_expansion__point(self_: Flector, other: Point) -> AntiScalar {
    return flector__wedge__horizon(self_, point__anti_dual(other));
}

fn flector__weight_expansion__rotor(self_: Flector, other: Rotor) -> MultiVector {
    return flector__wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other));
}

fn flector__weight_expansion__transflector(self_: Flector, other: Transflector) -> Motor {
    return flector__wedge__point_at_infinity(self_, transflector__anti_dual(other));
}

fn flector_at_infinity__weight_expansion__flector(self_: FlectorAtInfinity, other: Flector) -> LineAtInfinity {
    return flector_at_infinity__wedge__flector_at_infinity(self_, flector__anti_dual(other));
}

fn flector_at_infinity__weight_expansion__line(self_: FlectorAtInfinity, other: Line) -> Horizon {
    return flector_at_infinity__wedge__line_at_infinity(self_, line__anti_dual(other));
}

fn flector_at_infinity__weight_expansion__line_at_origin(self_: FlectorAtInfinity, other: LineAtOrigin) -> Horizon {
    return flector_at_infinity__wedge__line_at_infinity(self_, line_at_origin__anti_dual(other));
}

fn flector_at_infinity__weight_expansion__motor(self_: FlectorAtInfinity, other: Motor) -> MultiVectorAtInfinity {
    return flector_at_infinity__wedge__multi_vector_at_infinity(self_, motor__anti_dual(other));
}

fn flector_at_infinity__weight_expansion__multi_vector(self_: FlectorAtInfinity, other: MultiVector) -> MultiVectorAtInfinity {
    return flector_at_infinity__wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other));
}

fn flector_at_infinity__weight_expansion__multi_vector_at_origin(self_: FlectorAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return flector_at_infinity__wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other));
}

fn flector_at_infinity__weight_expansion__plane(self_: FlectorAtInfinity, other: Plane) -> LineAtInfinity {
    return flector_at_infinity__wedge__point_at_infinity(self_, plane__anti_dual(other));
}

fn flector_at_infinity__weight_expansion__plane_at_origin(self_: FlectorAtInfinity, other: PlaneAtOrigin) -> LineAtInfinity {
    return flector_at_infinity__wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other));
}

fn flector_at_infinity__weight_expansion__rotor(self_: FlectorAtInfinity, other: Rotor) -> MultiVectorAtInfinity {
    return flector_at_infinity__wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other));
}

fn flector_at_infinity__weight_expansion__transflector(self_: FlectorAtInfinity, other: Transflector) -> LineAtInfinity {
    return flector_at_infinity__wedge__point_at_infinity(self_, transflector__anti_dual(other));
}

fn horizon__weight_expansion__motor(self_: Horizon, other: Motor) -> Horizon {
    return horizon__wedge__multi_vector_at_infinity(self_, motor__anti_dual(other));
}

fn horizon__weight_expansion__multi_vector(self_: Horizon, other: MultiVector) -> Horizon {
    return horizon__wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other));
}

fn horizon__weight_expansion__multi_vector_at_origin(self_: Horizon, other: MultiVectorAtOrigin) -> Horizon {
    return horizon__wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other));
}

fn horizon__weight_expansion__rotor(self_: Horizon, other: Rotor) -> Horizon {
    return horizon__wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other));
}

fn line__weight_expansion__flector(self_: Line, other: Flector) -> Plane {
    return line__wedge__flector_at_infinity(self_, flector__anti_dual(other));
}

fn line__weight_expansion__line(self_: Line, other: Line) -> AntiScalar {
    return line__wedge__line_at_infinity(self_, line__anti_dual(other));
}

fn line__weight_expansion__line_at_origin(self_: Line, other: LineAtOrigin) -> AntiScalar {
    return line__wedge__line_at_infinity(self_, line_at_origin__anti_dual(other));
}

fn line__weight_expansion__motor(self_: Line, other: Motor) -> MultiVector {
    return line__wedge__multi_vector_at_infinity(self_, motor__anti_dual(other));
}

fn line__weight_expansion__multi_vector(self_: Line, other: MultiVector) -> MultiVector {
    return line__wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other));
}

fn line__weight_expansion__multi_vector_at_origin(self_: Line, other: MultiVectorAtOrigin) -> MultiVector {
    return line__wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other));
}

fn line__weight_expansion__plane(self_: Line, other: Plane) -> Plane {
    return line__wedge__point_at_infinity(self_, plane__anti_dual(other));
}

fn line__weight_expansion__plane_at_origin(self_: Line, other: PlaneAtOrigin) -> Plane {
    return line__wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other));
}

fn line__weight_expansion__rotor(self_: Line, other: Rotor) -> MultiVector {
    return line__wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other));
}

fn line__weight_expansion__transflector(self_: Line, other: Transflector) -> Plane {
    return line__wedge__point_at_infinity(self_, transflector__anti_dual(other));
}

fn line_at_infinity__weight_expansion__flector(self_: LineAtInfinity, other: Flector) -> Horizon {
    return line_at_infinity__wedge__flector_at_infinity(self_, flector__anti_dual(other));
}

fn line_at_infinity__weight_expansion__motor(self_: LineAtInfinity, other: Motor) -> MultiVectorAtInfinity {
    return line_at_infinity__wedge__multi_vector_at_infinity(self_, motor__anti_dual(other));
}

fn line_at_infinity__weight_expansion__multi_vector(self_: LineAtInfinity, other: MultiVector) -> MultiVectorAtInfinity {
    return line_at_infinity__wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other));
}

fn line_at_infinity__weight_expansion__multi_vector_at_origin(self_: LineAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return line_at_infinity__wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other));
}

fn line_at_infinity__weight_expansion__plane(self_: LineAtInfinity, other: Plane) -> Horizon {
    return line_at_infinity__wedge__point_at_infinity(self_, plane__anti_dual(other));
}

fn line_at_infinity__weight_expansion__plane_at_origin(self_: LineAtInfinity, other: PlaneAtOrigin) -> Horizon {
    return line_at_infinity__wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other));
}

fn line_at_infinity__weight_expansion__rotor(self_: LineAtInfinity, other: Rotor) -> MultiVectorAtInfinity {
    return line_at_infinity__wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other));
}

fn line_at_infinity__weight_expansion__transflector(self_: LineAtInfinity, other: Transflector) -> Horizon {
    return line_at_infinity__wedge__point_at_infinity(self_, transflector__anti_dual(other));
}

fn line_at_origin__weight_expansion__flector(self_: LineAtOrigin, other: Flector) -> PlaneAtOrigin {
    return line_at_origin__wedge__flector_at_infinity(self_, flector__anti_dual(other));
}

fn line_at_origin__weight_expansion__line(self_: LineAtOrigin, other: Line) -> AntiScalar {
    return line_at_origin__wedge__line_at_infinity(self_, line__anti_dual(other));
}

fn line_at_origin__weight_expansion__line_at_origin(self_: LineAtOrigin, other: LineAtOrigin) -> AntiScalar {
    return line_at_origin__wedge__line_at_infinity(self_, line_at_origin__anti_dual(other));
}

fn line_at_origin__weight_expansion__motor(self_: LineAtOrigin, other: Motor) -> MultiVectorAtOrigin {
    return line_at_origin__wedge__multi_vector_at_infinity(self_, motor__anti_dual(other));
}

fn line_at_origin__weight_expansion__multi_vector(self_: LineAtOrigin, other: MultiVector) -> MultiVectorAtOrigin {
    return line_at_origin__wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other));
}

fn line_at_origin__weight_expansion__multi_vector_at_origin(self_: LineAtOrigin, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return line_at_origin__wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other));
}

fn line_at_origin__weight_expansion__plane(self_: LineAtOrigin, other: Plane) -> PlaneAtOrigin {
    return line_at_origin__wedge__point_at_infinity(self_, plane__anti_dual(other));
}

fn line_at_origin__weight_expansion__plane_at_origin(self_: LineAtOrigin, other: PlaneAtOrigin) -> PlaneAtOrigin {
    return line_at_origin__wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other));
}

fn line_at_origin__weight_expansion__rotor(self_: LineAtOrigin, other: Rotor) -> MultiVectorAtOrigin {
    return line_at_origin__wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other));
}

fn line_at_origin__weight_expansion__transflector(self_: LineAtOrigin, other: Transflector) -> PlaneAtOrigin {
    return line_at_origin__wedge__point_at_infinity(self_, transflector__anti_dual(other));
}

fn motor__weight_expansion__flector(self_: Motor, other: Flector) -> Plane {
    return motor__wedge__flector_at_infinity(self_, flector__anti_dual(other));
}

fn motor__weight_expansion__line(self_: Motor, other: Line) -> AntiScalar {
    return motor__wedge__line_at_infinity(self_, line__anti_dual(other));
}

fn motor__weight_expansion__line_at_origin(self_: Motor, other: LineAtOrigin) -> AntiScalar {
    return motor__wedge__line_at_infinity(self_, line_at_origin__anti_dual(other));
}

fn motor__weight_expansion__motor(self_: Motor, other: Motor) -> MultiVector {
    return motor__wedge__multi_vector_at_infinity(self_, motor__anti_dual(other));
}

fn motor__weight_expansion__multi_vector(self_: Motor, other: MultiVector) -> MultiVector {
    return motor__wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other));
}

fn motor__weight_expansion__multi_vector_at_origin(self_: Motor, other: MultiVectorAtOrigin) -> MultiVector {
    return motor__wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other));
}

fn motor__weight_expansion__plane(self_: Motor, other: Plane) -> Plane {
    return motor__wedge__point_at_infinity(self_, plane__anti_dual(other));
}

fn motor__weight_expansion__plane_at_origin(self_: Motor, other: PlaneAtOrigin) -> Plane {
    return motor__wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other));
}

fn motor__weight_expansion__rotor(self_: Motor, other: Rotor) -> MultiVector {
    return motor__wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other));
}

fn motor__weight_expansion__transflector(self_: Motor, other: Transflector) -> Plane {
    return motor__wedge__point_at_infinity(self_, transflector__anti_dual(other));
}

fn multi_vector__weight_expansion__flector(self_: MultiVector, other: Flector) -> MultiVector {
    return multi_vector__wedge__flector_at_infinity(self_, flector__anti_dual(other));
}

fn multi_vector__weight_expansion__line(self_: MultiVector, other: Line) -> MultiVector {
    return multi_vector__wedge__line_at_infinity(self_, line__anti_dual(other));
}

fn multi_vector__weight_expansion__line_at_origin(self_: MultiVector, other: LineAtOrigin) -> MultiVector {
    return multi_vector__wedge__line_at_infinity(self_, line_at_origin__anti_dual(other));
}

fn multi_vector__weight_expansion__motor(self_: MultiVector, other: Motor) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(self_, motor__anti_dual(other));
}

fn multi_vector__weight_expansion__multi_vector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other));
}

fn multi_vector__weight_expansion__multi_vector_at_origin(self_: MultiVector, other: MultiVectorAtOrigin) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other));
}

fn multi_vector__weight_expansion__origin(self_: MultiVector, other: Origin) -> MultiVector {
    return multi_vector__wedge__horizon(self_, origin__anti_dual(other));
}

fn multi_vector__weight_expansion__plane(self_: MultiVector, other: Plane) -> MultiVector {
    return multi_vector__wedge__point_at_infinity(self_, plane__anti_dual(other));
}

fn multi_vector__weight_expansion__plane_at_origin(self_: MultiVector, other: PlaneAtOrigin) -> MultiVector {
    return multi_vector__wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other));
}

fn multi_vector__weight_expansion__point(self_: MultiVector, other: Point) -> MultiVector {
    return multi_vector__wedge__horizon(self_, point__anti_dual(other));
}

fn multi_vector__weight_expansion__rotor(self_: MultiVector, other: Rotor) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other));
}

fn multi_vector__weight_expansion__transflector(self_: MultiVector, other: Transflector) -> MultiVector {
    return multi_vector__wedge__point_at_infinity(self_, transflector__anti_dual(other));
}

fn multi_vector_at_infinity__weight_expansion__flector(self_: MultiVectorAtInfinity, other: Flector) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__wedge__flector_at_infinity(self_, flector__anti_dual(other));
}

fn multi_vector_at_infinity__weight_expansion__line(self_: MultiVectorAtInfinity, other: Line) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__wedge__line_at_infinity(self_, line__anti_dual(other));
}

fn multi_vector_at_infinity__weight_expansion__line_at_origin(self_: MultiVectorAtInfinity, other: LineAtOrigin) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__wedge__line_at_infinity(self_, line_at_origin__anti_dual(other));
}

fn multi_vector_at_infinity__weight_expansion__motor(self_: MultiVectorAtInfinity, other: Motor) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__wedge__multi_vector_at_infinity(self_, motor__anti_dual(other));
}

fn multi_vector_at_infinity__weight_expansion__multi_vector(self_: MultiVectorAtInfinity, other: MultiVector) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other));
}

fn multi_vector_at_infinity__weight_expansion__multi_vector_at_origin(self_: MultiVectorAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other));
}

fn multi_vector_at_infinity__weight_expansion__origin(self_: MultiVectorAtInfinity, other: Origin) -> Horizon {
    return multi_vector_at_infinity__wedge__horizon(self_, origin__anti_dual(other));
}

fn multi_vector_at_infinity__weight_expansion__plane(self_: MultiVectorAtInfinity, other: Plane) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__wedge__point_at_infinity(self_, plane__anti_dual(other));
}

fn multi_vector_at_infinity__weight_expansion__plane_at_origin(self_: MultiVectorAtInfinity, other: PlaneAtOrigin) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other));
}

fn multi_vector_at_infinity__weight_expansion__point(self_: MultiVectorAtInfinity, other: Point) -> Horizon {
    return multi_vector_at_infinity__wedge__horizon(self_, point__anti_dual(other));
}

fn multi_vector_at_infinity__weight_expansion__rotor(self_: MultiVectorAtInfinity, other: Rotor) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other));
}

fn multi_vector_at_infinity__weight_expansion__transflector(self_: MultiVectorAtInfinity, other: Transflector) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__wedge__point_at_infinity(self_, transflector__anti_dual(other));
}

fn multi_vector_at_origin__weight_expansion__flector(self_: MultiVectorAtOrigin, other: Flector) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__wedge__flector_at_infinity(self_, flector__anti_dual(other));
}

fn multi_vector_at_origin__weight_expansion__line(self_: MultiVectorAtOrigin, other: Line) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__wedge__line_at_infinity(self_, line__anti_dual(other));
}

fn multi_vector_at_origin__weight_expansion__line_at_origin(self_: MultiVectorAtOrigin, other: LineAtOrigin) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__wedge__line_at_infinity(self_, line_at_origin__anti_dual(other));
}

fn multi_vector_at_origin__weight_expansion__motor(self_: MultiVectorAtOrigin, other: Motor) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__wedge__multi_vector_at_infinity(self_, motor__anti_dual(other));
}

fn multi_vector_at_origin__weight_expansion__multi_vector(self_: MultiVectorAtOrigin, other: MultiVector) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other));
}

fn multi_vector_at_origin__weight_expansion__multi_vector_at_origin(self_: MultiVectorAtOrigin, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other));
}

fn multi_vector_at_origin__weight_expansion__origin(self_: MultiVectorAtOrigin, other: Origin) -> AntiScalar {
    return multi_vector_at_origin__wedge__horizon(self_, origin__anti_dual(other));
}

fn multi_vector_at_origin__weight_expansion__plane(self_: MultiVectorAtOrigin, other: Plane) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__wedge__point_at_infinity(self_, plane__anti_dual(other));
}

fn multi_vector_at_origin__weight_expansion__plane_at_origin(self_: MultiVectorAtOrigin, other: PlaneAtOrigin) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other));
}

fn multi_vector_at_origin__weight_expansion__point(self_: MultiVectorAtOrigin, other: Point) -> AntiScalar {
    return multi_vector_at_origin__wedge__horizon(self_, point__anti_dual(other));
}

fn multi_vector_at_origin__weight_expansion__rotor(self_: MultiVectorAtOrigin, other: Rotor) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other));
}

fn multi_vector_at_origin__weight_expansion__transflector(self_: MultiVectorAtOrigin, other: Transflector) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__wedge__point_at_infinity(self_, transflector__anti_dual(other));
}

fn origin__weight_expansion__flector(self_: Origin, other: Flector) -> Rotor {
    return origin__wedge__flector_at_infinity(self_, flector__anti_dual(other));
}

fn origin__weight_expansion__line(self_: Origin, other: Line) -> PlaneAtOrigin {
    return origin__wedge__line_at_infinity(self_, line__anti_dual(other));
}

fn origin__weight_expansion__line_at_origin(self_: Origin, other: LineAtOrigin) -> PlaneAtOrigin {
    return origin__wedge__line_at_infinity(self_, line_at_origin__anti_dual(other));
}

fn origin__weight_expansion__motor(self_: Origin, other: Motor) -> MultiVectorAtOrigin {
    return origin__wedge__multi_vector_at_infinity(self_, motor__anti_dual(other));
}

fn origin__weight_expansion__multi_vector(self_: Origin, other: MultiVector) -> MultiVectorAtOrigin {
    return origin__wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other));
}

fn origin__weight_expansion__multi_vector_at_origin(self_: Origin, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return origin__wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other));
}

fn origin__weight_expansion__origin(self_: Origin, other: Origin) -> AntiScalar {
    return origin__wedge__horizon(self_, origin__anti_dual(other));
}

fn origin__weight_expansion__plane(self_: Origin, other: Plane) -> LineAtOrigin {
    return origin__wedge__point_at_infinity(self_, plane__anti_dual(other));
}

fn origin__weight_expansion__plane_at_origin(self_: Origin, other: PlaneAtOrigin) -> LineAtOrigin {
    return origin__wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other));
}

fn origin__weight_expansion__point(self_: Origin, other: Point) -> AntiScalar {
    return origin__wedge__horizon(self_, point__anti_dual(other));
}

fn origin__weight_expansion__rotor(self_: Origin, other: Rotor) -> MultiVectorAtOrigin {
    return origin__wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other));
}

fn origin__weight_expansion__transflector(self_: Origin, other: Transflector) -> LineAtOrigin {
    return origin__wedge__point_at_infinity(self_, transflector__anti_dual(other));
}

fn plane__weight_expansion__flector(self_: Plane, other: Flector) -> AntiScalar {
    return plane__wedge__flector_at_infinity(self_, flector__anti_dual(other));
}

fn plane__weight_expansion__motor(self_: Plane, other: Motor) -> MultiVector {
    return plane__wedge__multi_vector_at_infinity(self_, motor__anti_dual(other));
}

fn plane__weight_expansion__multi_vector(self_: Plane, other: MultiVector) -> MultiVector {
    return plane__wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other));
}

fn plane__weight_expansion__multi_vector_at_origin(self_: Plane, other: MultiVectorAtOrigin) -> MultiVector {
    return plane__wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other));
}

fn plane__weight_expansion__plane(self_: Plane, other: Plane) -> AntiScalar {
    return plane__wedge__point_at_infinity(self_, plane__anti_dual(other));
}

fn plane__weight_expansion__plane_at_origin(self_: Plane, other: PlaneAtOrigin) -> AntiScalar {
    return plane__wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other));
}

fn plane__weight_expansion__rotor(self_: Plane, other: Rotor) -> MultiVector {
    return plane__wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other));
}

fn plane__weight_expansion__transflector(self_: Plane, other: Transflector) -> AntiScalar {
    return plane__wedge__point_at_infinity(self_, transflector__anti_dual(other));
}

fn plane_at_origin__weight_expansion__flector(self_: PlaneAtOrigin, other: Flector) -> AntiScalar {
    return plane_at_origin__wedge__flector_at_infinity(self_, flector__anti_dual(other));
}

fn plane_at_origin__weight_expansion__motor(self_: PlaneAtOrigin, other: Motor) -> MultiVectorAtOrigin {
    return plane_at_origin__wedge__multi_vector_at_infinity(self_, motor__anti_dual(other));
}

fn plane_at_origin__weight_expansion__multi_vector(self_: PlaneAtOrigin, other: MultiVector) -> MultiVectorAtOrigin {
    return plane_at_origin__wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other));
}

fn plane_at_origin__weight_expansion__multi_vector_at_origin(self_: PlaneAtOrigin, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return plane_at_origin__wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other));
}

fn plane_at_origin__weight_expansion__plane(self_: PlaneAtOrigin, other: Plane) -> AntiScalar {
    return plane_at_origin__wedge__point_at_infinity(self_, plane__anti_dual(other));
}

fn plane_at_origin__weight_expansion__plane_at_origin(self_: PlaneAtOrigin, other: PlaneAtOrigin) -> AntiScalar {
    return plane_at_origin__wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other));
}

fn plane_at_origin__weight_expansion__rotor(self_: PlaneAtOrigin, other: Rotor) -> MultiVectorAtOrigin {
    return plane_at_origin__wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other));
}

fn plane_at_origin__weight_expansion__transflector(self_: PlaneAtOrigin, other: Transflector) -> AntiScalar {
    return plane_at_origin__wedge__point_at_infinity(self_, transflector__anti_dual(other));
}

fn point__weight_expansion__flector(self_: Point, other: Flector) -> Motor {
    return point__wedge__flector_at_infinity(self_, flector__anti_dual(other));
}

fn point__weight_expansion__line(self_: Point, other: Line) -> Plane {
    return point__wedge__line_at_infinity(self_, line__anti_dual(other));
}

fn point__weight_expansion__line_at_origin(self_: Point, other: LineAtOrigin) -> Plane {
    return point__wedge__line_at_infinity(self_, line_at_origin__anti_dual(other));
}

fn point__weight_expansion__motor(self_: Point, other: Motor) -> MultiVector {
    return point__wedge__multi_vector_at_infinity(self_, motor__anti_dual(other));
}

fn point__weight_expansion__multi_vector(self_: Point, other: MultiVector) -> MultiVector {
    return point__wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other));
}

fn point__weight_expansion__multi_vector_at_origin(self_: Point, other: MultiVectorAtOrigin) -> MultiVector {
    return point__wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other));
}

fn point__weight_expansion__origin(self_: Point, other: Origin) -> AntiScalar {
    return point__wedge__horizon(self_, origin__anti_dual(other));
}

fn point__weight_expansion__plane(self_: Point, other: Plane) -> Line {
    return point__wedge__point_at_infinity(self_, plane__anti_dual(other));
}

fn point__weight_expansion__plane_at_origin(self_: Point, other: PlaneAtOrigin) -> Line {
    return point__wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other));
}

fn point__weight_expansion__point(self_: Point, other: Point) -> AntiScalar {
    return point__wedge__horizon(self_, point__anti_dual(other));
}

fn point__weight_expansion__rotor(self_: Point, other: Rotor) -> MultiVector {
    return point__wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other));
}

fn point__weight_expansion__transflector(self_: Point, other: Transflector) -> Line {
    return point__wedge__point_at_infinity(self_, transflector__anti_dual(other));
}

fn point_at_infinity__weight_expansion__flector(self_: PointAtInfinity, other: Flector) -> LineAtInfinity {
    return point_at_infinity__wedge__flector_at_infinity(self_, flector__anti_dual(other));
}

fn point_at_infinity__weight_expansion__line(self_: PointAtInfinity, other: Line) -> Horizon {
    return point_at_infinity__wedge__line_at_infinity(self_, line__anti_dual(other));
}

fn point_at_infinity__weight_expansion__line_at_origin(self_: PointAtInfinity, other: LineAtOrigin) -> Horizon {
    return point_at_infinity__wedge__line_at_infinity(self_, line_at_origin__anti_dual(other));
}

fn point_at_infinity__weight_expansion__motor(self_: PointAtInfinity, other: Motor) -> MultiVectorAtInfinity {
    return point_at_infinity__wedge__multi_vector_at_infinity(self_, motor__anti_dual(other));
}

fn point_at_infinity__weight_expansion__multi_vector(self_: PointAtInfinity, other: MultiVector) -> MultiVectorAtInfinity {
    return point_at_infinity__wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other));
}

fn point_at_infinity__weight_expansion__multi_vector_at_origin(self_: PointAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return point_at_infinity__wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other));
}

fn point_at_infinity__weight_expansion__plane(self_: PointAtInfinity, other: Plane) -> LineAtInfinity {
    return point_at_infinity__wedge__point_at_infinity(self_, plane__anti_dual(other));
}

fn point_at_infinity__weight_expansion__plane_at_origin(self_: PointAtInfinity, other: PlaneAtOrigin) -> LineAtInfinity {
    return point_at_infinity__wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other));
}

fn point_at_infinity__weight_expansion__rotor(self_: PointAtInfinity, other: Rotor) -> MultiVectorAtInfinity {
    return point_at_infinity__wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other));
}

fn point_at_infinity__weight_expansion__transflector(self_: PointAtInfinity, other: Transflector) -> LineAtInfinity {
    return point_at_infinity__wedge__point_at_infinity(self_, transflector__anti_dual(other));
}

fn rotor__weight_expansion__flector(self_: Rotor, other: Flector) -> PlaneAtOrigin {
    return rotor__wedge__flector_at_infinity(self_, flector__anti_dual(other));
}

fn rotor__weight_expansion__line(self_: Rotor, other: Line) -> AntiScalar {
    return rotor__wedge__line_at_infinity(self_, line__anti_dual(other));
}

fn rotor__weight_expansion__line_at_origin(self_: Rotor, other: LineAtOrigin) -> AntiScalar {
    return rotor__wedge__line_at_infinity(self_, line_at_origin__anti_dual(other));
}

fn rotor__weight_expansion__motor(self_: Rotor, other: Motor) -> MultiVectorAtOrigin {
    return rotor__wedge__multi_vector_at_infinity(self_, motor__anti_dual(other));
}

fn rotor__weight_expansion__multi_vector(self_: Rotor, other: MultiVector) -> MultiVectorAtOrigin {
    return rotor__wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other));
}

fn rotor__weight_expansion__multi_vector_at_origin(self_: Rotor, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return rotor__wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other));
}

fn rotor__weight_expansion__plane(self_: Rotor, other: Plane) -> PlaneAtOrigin {
    return rotor__wedge__point_at_infinity(self_, plane__anti_dual(other));
}

fn rotor__weight_expansion__plane_at_origin(self_: Rotor, other: PlaneAtOrigin) -> PlaneAtOrigin {
    return rotor__wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other));
}

fn rotor__weight_expansion__rotor(self_: Rotor, other: Rotor) -> MultiVectorAtOrigin {
    return rotor__wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other));
}

fn rotor__weight_expansion__transflector(self_: Rotor, other: Transflector) -> PlaneAtOrigin {
    return rotor__wedge__point_at_infinity(self_, transflector__anti_dual(other));
}

fn transflector__weight_expansion__flector(self_: Transflector, other: Flector) -> Translator {
    return transflector__wedge__flector_at_infinity(self_, flector__anti_dual(other));
}

fn transflector__weight_expansion__line(self_: Transflector, other: Line) -> Horizon {
    return transflector__wedge__line_at_infinity(self_, line__anti_dual(other));
}

fn transflector__weight_expansion__line_at_origin(self_: Transflector, other: LineAtOrigin) -> Horizon {
    return transflector__wedge__line_at_infinity(self_, line_at_origin__anti_dual(other));
}

fn transflector__weight_expansion__motor(self_: Transflector, other: Motor) -> MultiVector {
    return transflector__wedge__multi_vector_at_infinity(self_, motor__anti_dual(other));
}

fn transflector__weight_expansion__multi_vector(self_: Transflector, other: MultiVector) -> MultiVector {
    return transflector__wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other));
}

fn transflector__weight_expansion__multi_vector_at_origin(self_: Transflector, other: MultiVectorAtOrigin) -> MultiVector {
    return transflector__wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other));
}

fn transflector__weight_expansion__plane(self_: Transflector, other: Plane) -> Translator {
    return transflector__wedge__point_at_infinity(self_, plane__anti_dual(other));
}

fn transflector__weight_expansion__plane_at_origin(self_: Transflector, other: PlaneAtOrigin) -> Translator {
    return transflector__wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other));
}

fn transflector__weight_expansion__rotor(self_: Transflector, other: Rotor) -> MultiVector {
    return transflector__wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other));
}

fn transflector__weight_expansion__transflector(self_: Transflector, other: Transflector) -> Translator {
    return transflector__wedge__point_at_infinity(self_, transflector__anti_dual(other));
}

fn translator__weight_expansion__flector(self_: Translator, other: Flector) -> Horizon {
    return translator__wedge__flector_at_infinity(self_, flector__anti_dual(other));
}

fn translator__weight_expansion__motor(self_: Translator, other: Motor) -> MultiVector {
    return translator__wedge__multi_vector_at_infinity(self_, motor__anti_dual(other));
}

fn translator__weight_expansion__multi_vector(self_: Translator, other: MultiVector) -> MultiVector {
    return translator__wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other));
}

fn translator__weight_expansion__multi_vector_at_origin(self_: Translator, other: MultiVectorAtOrigin) -> MultiVector {
    return translator__wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other));
}

fn translator__weight_expansion__plane(self_: Translator, other: Plane) -> Horizon {
    return translator__wedge__point_at_infinity(self_, plane__anti_dual(other));
}

fn translator__weight_expansion__plane_at_origin(self_: Translator, other: PlaneAtOrigin) -> Horizon {
    return translator__wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other));
}

fn translator__weight_expansion__rotor(self_: Translator, other: Rotor) -> MultiVector {
    return translator__wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other));
}

fn translator__weight_expansion__transflector(self_: Translator, other: Transflector) -> Horizon {
    return translator__wedge__point_at_infinity(self_, transflector__anti_dual(other));
}

fn flector__anti_project_orthogonally_onto__flector(self_: Flector, other: Flector) -> MultiVector {
    return flector__wedge__multi_vector_at_infinity(other, flector__anti_wedge__flector_at_infinity(self_, flector__anti_dual(other)));
}

fn flector__anti_project_orthogonally_onto__line(self_: Flector, other: Line) -> Plane {
    return line__wedge__point_at_infinity(other, flector__anti_wedge__line_at_infinity(self_, line__anti_dual(other)));
}

fn flector__anti_project_orthogonally_onto__line_at_origin(self_: Flector, other: LineAtOrigin) -> PlaneAtOrigin {
    return line_at_origin__wedge__point_at_infinity(other, flector__anti_wedge__line_at_infinity(self_, line_at_origin__anti_dual(other)));
}

fn flector__anti_project_orthogonally_onto__motor(self_: Flector, other: Motor) -> MultiVector {
    return motor__wedge__multi_vector_at_infinity(other, flector__anti_wedge__multi_vector_at_infinity(self_, motor__anti_dual(other)));
}

fn flector__anti_project_orthogonally_onto__multi_vector(self_: Flector, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(other, flector__anti_wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other)));
}

fn flector__anti_project_orthogonally_onto__multi_vector_at_origin(self_: Flector, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__wedge__multi_vector_at_infinity(other, flector__anti_wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other)));
}

fn flector__anti_project_orthogonally_onto__origin(self_: Flector, other: Origin) -> MultiVectorAtOrigin {
    return origin__wedge__multi_vector_at_infinity(other, flector__anti_wedge__horizon(self_, origin__anti_dual(other)));
}

fn flector__anti_project_orthogonally_onto__plane(self_: Flector, other: Plane) -> Plane {
    return plane__wedge__scalar(other, flector__anti_wedge__point_at_infinity(self_, plane__anti_dual(other)));
}

fn flector__anti_project_orthogonally_onto__plane_at_origin(self_: Flector, other: PlaneAtOrigin) -> PlaneAtOrigin {
    return plane_at_origin__wedge__scalar(other, flector__anti_wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other)));
}

fn flector__anti_project_orthogonally_onto__point(self_: Flector, other: Point) -> MultiVector {
    return point__wedge__multi_vector_at_infinity(other, flector__anti_wedge__horizon(self_, point__anti_dual(other)));
}

fn flector__anti_project_orthogonally_onto__rotor(self_: Flector, other: Rotor) -> MultiVectorAtOrigin {
    return rotor__wedge__multi_vector_at_infinity(other, flector__anti_wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other)));
}

fn flector__anti_project_orthogonally_onto__transflector(self_: Flector, other: Transflector) -> Transflector {
    return transflector__wedge__scalar(other, flector__anti_wedge__point_at_infinity(self_, transflector__anti_dual(other)));
}

fn line__anti_project_orthogonally_onto__flector(self_: Line, other: Flector) -> Motor {
    return flector__wedge__point_at_infinity(other, line__anti_wedge__flector_at_infinity(self_, flector__anti_dual(other)));
}

fn line__anti_project_orthogonally_onto__line(self_: Line, other: Line) -> Line {
    return line__wedge__scalar(other, line__anti_wedge__line_at_infinity(self_, line__anti_dual(other)));
}

fn line__anti_project_orthogonally_onto__line_at_origin(self_: Line, other: LineAtOrigin) -> LineAtOrigin {
    return line_at_origin__wedge__scalar(other, line__anti_wedge__line_at_infinity(self_, line_at_origin__anti_dual(other)));
}

fn line__anti_project_orthogonally_onto__motor(self_: Line, other: Motor) -> MultiVector {
    return motor__wedge__multi_vector_at_infinity(other, line__anti_wedge__multi_vector_at_infinity(self_, motor__anti_dual(other)));
}

fn line__anti_project_orthogonally_onto__multi_vector(self_: Line, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(other, line__anti_wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other)));
}

fn line__anti_project_orthogonally_onto__multi_vector_at_origin(self_: Line, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__wedge__multi_vector_at_infinity(other, line__anti_wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other)));
}

fn line__anti_project_orthogonally_onto__origin(self_: Line, other: Origin) -> LineAtOrigin {
    return origin__wedge__point_at_infinity(other, line__anti_wedge__horizon(self_, origin__anti_dual(other)));
}

fn line__anti_project_orthogonally_onto__point(self_: Line, other: Point) -> Line {
    return point__wedge__point_at_infinity(other, line__anti_wedge__horizon(self_, point__anti_dual(other)));
}

fn line__anti_project_orthogonally_onto__rotor(self_: Line, other: Rotor) -> MultiVectorAtOrigin {
    return rotor__wedge__multi_vector_at_infinity(other, line__anti_wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other)));
}

fn line_at_origin__anti_project_orthogonally_onto__flector(self_: LineAtOrigin, other: Flector) -> Motor {
    return flector__wedge__point_at_infinity(other, line_at_origin__anti_wedge__flector_at_infinity(self_, flector__anti_dual(other)));
}

fn line_at_origin__anti_project_orthogonally_onto__line(self_: LineAtOrigin, other: Line) -> Line {
    return line__wedge__scalar(other, line_at_origin__anti_wedge__line_at_infinity(self_, line__anti_dual(other)));
}

fn line_at_origin__anti_project_orthogonally_onto__line_at_origin(self_: LineAtOrigin, other: LineAtOrigin) -> LineAtOrigin {
    return line_at_origin__wedge__scalar(other, line_at_origin__anti_wedge__line_at_infinity(self_, line_at_origin__anti_dual(other)));
}

fn line_at_origin__anti_project_orthogonally_onto__motor(self_: LineAtOrigin, other: Motor) -> MultiVector {
    return motor__wedge__multi_vector_at_infinity(other, line_at_origin__anti_wedge__multi_vector_at_infinity(self_, motor__anti_dual(other)));
}

fn line_at_origin__anti_project_orthogonally_onto__multi_vector(self_: LineAtOrigin, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(other, line_at_origin__anti_wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other)));
}

fn line_at_origin__anti_project_orthogonally_onto__multi_vector_at_origin(self_: LineAtOrigin, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__wedge__multi_vector_at_infinity(other, line_at_origin__anti_wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other)));
}

fn line_at_origin__anti_project_orthogonally_onto__origin(self_: LineAtOrigin, other: Origin) -> LineAtOrigin {
    return origin__wedge__point_at_infinity(other, line_at_origin__anti_wedge__horizon(self_, origin__anti_dual(other)));
}

fn line_at_origin__anti_project_orthogonally_onto__point(self_: LineAtOrigin, other: Point) -> Line {
    return point__wedge__point_at_infinity(other, line_at_origin__anti_wedge__horizon(self_, point__anti_dual(other)));
}

fn line_at_origin__anti_project_orthogonally_onto__rotor(self_: LineAtOrigin, other: Rotor) -> MultiVectorAtOrigin {
    return rotor__wedge__multi_vector_at_infinity(other, line_at_origin__anti_wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other)));
}

fn motor__anti_project_orthogonally_onto__flector(self_: Motor, other: Flector) -> Motor {
    return flector__wedge__flector_at_infinity(other, motor__anti_wedge__flector_at_infinity(self_, flector__anti_dual(other)));
}

fn motor__anti_project_orthogonally_onto__line(self_: Motor, other: Line) -> MultiVector {
    return line__wedge__multi_vector_at_infinity(other, motor__anti_wedge__line_at_infinity(self_, line__anti_dual(other)));
}

fn motor__anti_project_orthogonally_onto__line_at_origin(self_: Motor, other: LineAtOrigin) -> MultiVectorAtOrigin {
    return line_at_origin__wedge__multi_vector_at_infinity(other, motor__anti_wedge__line_at_infinity(self_, line_at_origin__anti_dual(other)));
}

fn motor__anti_project_orthogonally_onto__motor(self_: Motor, other: Motor) -> MultiVector {
    return motor__wedge__multi_vector_at_infinity(other, motor__anti_wedge__multi_vector_at_infinity(self_, motor__anti_dual(other)));
}

fn motor__anti_project_orthogonally_onto__multi_vector(self_: Motor, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(other, motor__anti_wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other)));
}

fn motor__anti_project_orthogonally_onto__multi_vector_at_origin(self_: Motor, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__wedge__multi_vector_at_infinity(other, motor__anti_wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other)));
}

fn motor__anti_project_orthogonally_onto__origin(self_: Motor, other: Origin) -> Rotor {
    return origin__wedge__flector_at_infinity(other, motor__anti_wedge__horizon(self_, origin__anti_dual(other)));
}

fn motor__anti_project_orthogonally_onto__plane(self_: Motor, other: Plane) -> AntiScalar {
    return plane__wedge__point_at_infinity(other, motor__anti_wedge__point_at_infinity(self_, plane__anti_dual(other)));
}

fn motor__anti_project_orthogonally_onto__plane_at_origin(self_: Motor, other: PlaneAtOrigin) -> AntiScalar {
    return plane_at_origin__wedge__point_at_infinity(other, motor__anti_wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other)));
}

fn motor__anti_project_orthogonally_onto__point(self_: Motor, other: Point) -> Motor {
    return point__wedge__flector_at_infinity(other, motor__anti_wedge__horizon(self_, point__anti_dual(other)));
}

fn motor__anti_project_orthogonally_onto__rotor(self_: Motor, other: Rotor) -> MultiVectorAtOrigin {
    return rotor__wedge__multi_vector_at_infinity(other, motor__anti_wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other)));
}

fn motor__anti_project_orthogonally_onto__transflector(self_: Motor, other: Transflector) -> Translator {
    return transflector__wedge__point_at_infinity(other, motor__anti_wedge__point_at_infinity(self_, transflector__anti_dual(other)));
}

fn multi_vector__anti_project_orthogonally_onto__flector(self_: MultiVector, other: Flector) -> MultiVector {
    return flector__wedge__multi_vector_at_infinity(other, multi_vector__anti_wedge__flector_at_infinity(self_, flector__anti_dual(other)));
}

fn multi_vector__anti_project_orthogonally_onto__line(self_: MultiVector, other: Line) -> MultiVector {
    return line__wedge__multi_vector_at_infinity(other, multi_vector__anti_wedge__line_at_infinity(self_, line__anti_dual(other)));
}

fn multi_vector__anti_project_orthogonally_onto__line_at_origin(self_: MultiVector, other: LineAtOrigin) -> MultiVectorAtOrigin {
    return line_at_origin__wedge__multi_vector_at_infinity(other, multi_vector__anti_wedge__line_at_infinity(self_, line_at_origin__anti_dual(other)));
}

fn multi_vector__anti_project_orthogonally_onto__motor(self_: MultiVector, other: Motor) -> MultiVector {
    return motor__wedge__multi_vector_at_infinity(other, multi_vector__anti_wedge__multi_vector_at_infinity(self_, motor__anti_dual(other)));
}

fn multi_vector__anti_project_orthogonally_onto__multi_vector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(other, multi_vector__anti_wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other)));
}

fn multi_vector__anti_project_orthogonally_onto__multi_vector_at_origin(self_: MultiVector, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__wedge__multi_vector_at_infinity(other, multi_vector__anti_wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other)));
}

fn multi_vector__anti_project_orthogonally_onto__origin(self_: MultiVector, other: Origin) -> MultiVectorAtOrigin {
    return origin__wedge__multi_vector_at_infinity(other, multi_vector__anti_wedge__horizon(self_, origin__anti_dual(other)));
}

fn multi_vector__anti_project_orthogonally_onto__plane(self_: MultiVector, other: Plane) -> MultiVector {
    return plane__wedge__multi_vector_at_infinity(other, multi_vector__anti_wedge__point_at_infinity(self_, plane__anti_dual(other)));
}

fn multi_vector__anti_project_orthogonally_onto__plane_at_origin(self_: MultiVector, other: PlaneAtOrigin) -> MultiVectorAtOrigin {
    return plane_at_origin__wedge__multi_vector_at_infinity(other, multi_vector__anti_wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other)));
}

fn multi_vector__anti_project_orthogonally_onto__point(self_: MultiVector, other: Point) -> MultiVector {
    return point__wedge__multi_vector_at_infinity(other, multi_vector__anti_wedge__horizon(self_, point__anti_dual(other)));
}

fn multi_vector__anti_project_orthogonally_onto__rotor(self_: MultiVector, other: Rotor) -> MultiVectorAtOrigin {
    return rotor__wedge__multi_vector_at_infinity(other, multi_vector__anti_wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other)));
}

fn multi_vector__anti_project_orthogonally_onto__transflector(self_: MultiVector, other: Transflector) -> MultiVector {
    return transflector__wedge__multi_vector_at_infinity(other, multi_vector__anti_wedge__point_at_infinity(self_, transflector__anti_dual(other)));
}

fn multi_vector_at_origin__anti_project_orthogonally_onto__flector(self_: MultiVectorAtOrigin, other: Flector) -> MultiVector {
    return flector__wedge__multi_vector_at_infinity(other, multi_vector_at_origin__anti_wedge__flector_at_infinity(self_, flector__anti_dual(other)));
}

fn multi_vector_at_origin__anti_project_orthogonally_onto__line(self_: MultiVectorAtOrigin, other: Line) -> MultiVector {
    return line__wedge__multi_vector_at_infinity(other, multi_vector_at_origin__anti_wedge__line_at_infinity(self_, line__anti_dual(other)));
}

fn multi_vector_at_origin__anti_project_orthogonally_onto__line_at_origin(self_: MultiVectorAtOrigin, other: LineAtOrigin) -> MultiVectorAtOrigin {
    return line_at_origin__wedge__multi_vector_at_infinity(other, multi_vector_at_origin__anti_wedge__line_at_infinity(self_, line_at_origin__anti_dual(other)));
}

fn multi_vector_at_origin__anti_project_orthogonally_onto__motor(self_: MultiVectorAtOrigin, other: Motor) -> MultiVector {
    return motor__wedge__multi_vector_at_infinity(other, multi_vector_at_origin__anti_wedge__multi_vector_at_infinity(self_, motor__anti_dual(other)));
}

fn multi_vector_at_origin__anti_project_orthogonally_onto__multi_vector(self_: MultiVectorAtOrigin, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(other, multi_vector_at_origin__anti_wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other)));
}

fn multi_vector_at_origin__anti_project_orthogonally_onto__multi_vector_at_origin(self_: MultiVectorAtOrigin, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__wedge__multi_vector_at_infinity(other, multi_vector_at_origin__anti_wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other)));
}

fn multi_vector_at_origin__anti_project_orthogonally_onto__origin(self_: MultiVectorAtOrigin, other: Origin) -> MultiVectorAtOrigin {
    return origin__wedge__multi_vector_at_infinity(other, multi_vector_at_origin__anti_wedge__horizon(self_, origin__anti_dual(other)));
}

fn multi_vector_at_origin__anti_project_orthogonally_onto__plane(self_: MultiVectorAtOrigin, other: Plane) -> MultiVector {
    return plane__wedge__multi_vector_at_infinity(other, multi_vector_at_origin__anti_wedge__point_at_infinity(self_, plane__anti_dual(other)));
}

fn multi_vector_at_origin__anti_project_orthogonally_onto__plane_at_origin(self_: MultiVectorAtOrigin, other: PlaneAtOrigin) -> MultiVectorAtOrigin {
    return plane_at_origin__wedge__multi_vector_at_infinity(other, multi_vector_at_origin__anti_wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other)));
}

fn multi_vector_at_origin__anti_project_orthogonally_onto__point(self_: MultiVectorAtOrigin, other: Point) -> MultiVector {
    return point__wedge__multi_vector_at_infinity(other, multi_vector_at_origin__anti_wedge__horizon(self_, point__anti_dual(other)));
}

fn multi_vector_at_origin__anti_project_orthogonally_onto__rotor(self_: MultiVectorAtOrigin, other: Rotor) -> MultiVectorAtOrigin {
    return rotor__wedge__multi_vector_at_infinity(other, multi_vector_at_origin__anti_wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other)));
}

fn multi_vector_at_origin__anti_project_orthogonally_onto__transflector(self_: MultiVectorAtOrigin, other: Transflector) -> MultiVector {
    return transflector__wedge__multi_vector_at_infinity(other, multi_vector_at_origin__anti_wedge__point_at_infinity(self_, transflector__anti_dual(other)));
}

fn origin__anti_project_orthogonally_onto__flector(self_: Origin, other: Flector) -> Flector {
    return flector__wedge__scalar(other, origin__anti_wedge__flector_at_infinity(self_, flector__anti_dual(other)));
}

fn origin__anti_project_orthogonally_onto__motor(self_: Origin, other: Motor) -> Motor {
    return motor__wedge__scalar(other, origin__anti_wedge__multi_vector_at_infinity(self_, motor__anti_dual(other)));
}

fn origin__anti_project_orthogonally_onto__multi_vector(self_: Origin, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__scalar(other, origin__anti_wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other)));
}

fn origin__anti_project_orthogonally_onto__multi_vector_at_origin(self_: Origin, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__wedge__scalar(other, origin__anti_wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other)));
}

fn origin__anti_project_orthogonally_onto__origin(self_: Origin, other: Origin) -> Origin {
    return origin__wedge__scalar(other, origin__anti_wedge__horizon(self_, origin__anti_dual(other)));
}

fn origin__anti_project_orthogonally_onto__point(self_: Origin, other: Point) -> Point {
    return point__wedge__scalar(other, origin__anti_wedge__horizon(self_, point__anti_dual(other)));
}

fn origin__anti_project_orthogonally_onto__rotor(self_: Origin, other: Rotor) -> Rotor {
    return rotor__wedge__scalar(other, origin__anti_wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other)));
}

fn plane__anti_project_orthogonally_onto__flector(self_: Plane, other: Flector) -> MultiVector {
    return flector__wedge__multi_vector_at_infinity(other, plane__anti_wedge__flector_at_infinity(self_, flector__anti_dual(other)));
}

fn plane__anti_project_orthogonally_onto__line(self_: Plane, other: Line) -> Plane {
    return line__wedge__point_at_infinity(other, plane__anti_wedge__line_at_infinity(self_, line__anti_dual(other)));
}

fn plane__anti_project_orthogonally_onto__line_at_origin(self_: Plane, other: LineAtOrigin) -> PlaneAtOrigin {
    return line_at_origin__wedge__point_at_infinity(other, plane__anti_wedge__line_at_infinity(self_, line_at_origin__anti_dual(other)));
}

fn plane__anti_project_orthogonally_onto__motor(self_: Plane, other: Motor) -> MultiVector {
    return motor__wedge__multi_vector_at_infinity(other, plane__anti_wedge__multi_vector_at_infinity(self_, motor__anti_dual(other)));
}

fn plane__anti_project_orthogonally_onto__multi_vector(self_: Plane, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(other, plane__anti_wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other)));
}

fn plane__anti_project_orthogonally_onto__multi_vector_at_origin(self_: Plane, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__wedge__multi_vector_at_infinity(other, plane__anti_wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other)));
}

fn plane__anti_project_orthogonally_onto__origin(self_: Plane, other: Origin) -> PlaneAtOrigin {
    return origin__wedge__line_at_infinity(other, plane__anti_wedge__horizon(self_, origin__anti_dual(other)));
}

fn plane__anti_project_orthogonally_onto__plane(self_: Plane, other: Plane) -> Plane {
    return plane__wedge__scalar(other, plane__anti_wedge__point_at_infinity(self_, plane__anti_dual(other)));
}

fn plane__anti_project_orthogonally_onto__plane_at_origin(self_: Plane, other: PlaneAtOrigin) -> PlaneAtOrigin {
    return plane_at_origin__wedge__scalar(other, plane__anti_wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other)));
}

fn plane__anti_project_orthogonally_onto__point(self_: Plane, other: Point) -> Plane {
    return point__wedge__line_at_infinity(other, plane__anti_wedge__horizon(self_, point__anti_dual(other)));
}

fn plane__anti_project_orthogonally_onto__rotor(self_: Plane, other: Rotor) -> MultiVectorAtOrigin {
    return rotor__wedge__multi_vector_at_infinity(other, plane__anti_wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other)));
}

fn plane__anti_project_orthogonally_onto__transflector(self_: Plane, other: Transflector) -> Transflector {
    return transflector__wedge__scalar(other, plane__anti_wedge__point_at_infinity(self_, transflector__anti_dual(other)));
}

fn plane_at_origin__anti_project_orthogonally_onto__flector(self_: PlaneAtOrigin, other: Flector) -> MultiVector {
    return flector__wedge__multi_vector_at_infinity(other, plane_at_origin__anti_wedge__flector_at_infinity(self_, flector__anti_dual(other)));
}

fn plane_at_origin__anti_project_orthogonally_onto__line(self_: PlaneAtOrigin, other: Line) -> Plane {
    return line__wedge__point_at_infinity(other, plane_at_origin__anti_wedge__line_at_infinity(self_, line__anti_dual(other)));
}

fn plane_at_origin__anti_project_orthogonally_onto__line_at_origin(self_: PlaneAtOrigin, other: LineAtOrigin) -> PlaneAtOrigin {
    return line_at_origin__wedge__point_at_infinity(other, plane_at_origin__anti_wedge__line_at_infinity(self_, line_at_origin__anti_dual(other)));
}

fn plane_at_origin__anti_project_orthogonally_onto__motor(self_: PlaneAtOrigin, other: Motor) -> MultiVector {
    return motor__wedge__multi_vector_at_infinity(other, plane_at_origin__anti_wedge__multi_vector_at_infinity(self_, motor__anti_dual(other)));
}

fn plane_at_origin__anti_project_orthogonally_onto__multi_vector(self_: PlaneAtOrigin, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(other, plane_at_origin__anti_wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other)));
}

fn plane_at_origin__anti_project_orthogonally_onto__multi_vector_at_origin(self_: PlaneAtOrigin, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__wedge__multi_vector_at_infinity(other, plane_at_origin__anti_wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other)));
}

fn plane_at_origin__anti_project_orthogonally_onto__origin(self_: PlaneAtOrigin, other: Origin) -> PlaneAtOrigin {
    return origin__wedge__line_at_infinity(other, plane_at_origin__anti_wedge__horizon(self_, origin__anti_dual(other)));
}

fn plane_at_origin__anti_project_orthogonally_onto__plane(self_: PlaneAtOrigin, other: Plane) -> Plane {
    return plane__wedge__scalar(other, plane_at_origin__anti_wedge__point_at_infinity(self_, plane__anti_dual(other)));
}

fn plane_at_origin__anti_project_orthogonally_onto__plane_at_origin(self_: PlaneAtOrigin, other: PlaneAtOrigin) -> PlaneAtOrigin {
    return plane_at_origin__wedge__scalar(other, plane_at_origin__anti_wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other)));
}

fn plane_at_origin__anti_project_orthogonally_onto__point(self_: PlaneAtOrigin, other: Point) -> Plane {
    return point__wedge__line_at_infinity(other, plane_at_origin__anti_wedge__horizon(self_, point__anti_dual(other)));
}

fn plane_at_origin__anti_project_orthogonally_onto__rotor(self_: PlaneAtOrigin, other: Rotor) -> MultiVectorAtOrigin {
    return rotor__wedge__multi_vector_at_infinity(other, plane_at_origin__anti_wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other)));
}

fn plane_at_origin__anti_project_orthogonally_onto__transflector(self_: PlaneAtOrigin, other: Transflector) -> Transflector {
    return transflector__wedge__scalar(other, plane_at_origin__anti_wedge__point_at_infinity(self_, transflector__anti_dual(other)));
}

fn point__anti_project_orthogonally_onto__flector(self_: Point, other: Flector) -> Flector {
    return flector__wedge__scalar(other, point__anti_wedge__flector_at_infinity(self_, flector__anti_dual(other)));
}

fn point__anti_project_orthogonally_onto__motor(self_: Point, other: Motor) -> Motor {
    return motor__wedge__scalar(other, point__anti_wedge__multi_vector_at_infinity(self_, motor__anti_dual(other)));
}

fn point__anti_project_orthogonally_onto__multi_vector(self_: Point, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__scalar(other, point__anti_wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other)));
}

fn point__anti_project_orthogonally_onto__multi_vector_at_origin(self_: Point, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__wedge__scalar(other, point__anti_wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other)));
}

fn point__anti_project_orthogonally_onto__origin(self_: Point, other: Origin) -> Origin {
    return origin__wedge__scalar(other, point__anti_wedge__horizon(self_, origin__anti_dual(other)));
}

fn point__anti_project_orthogonally_onto__point(self_: Point, other: Point) -> Point {
    return point__wedge__scalar(other, point__anti_wedge__horizon(self_, point__anti_dual(other)));
}

fn point__anti_project_orthogonally_onto__rotor(self_: Point, other: Rotor) -> Rotor {
    return rotor__wedge__scalar(other, point__anti_wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other)));
}

fn rotor__anti_project_orthogonally_onto__flector(self_: Rotor, other: Flector) -> Motor {
    return flector__wedge__flector_at_infinity(other, rotor__anti_wedge__flector_at_infinity(self_, flector__anti_dual(other)));
}

fn rotor__anti_project_orthogonally_onto__line(self_: Rotor, other: Line) -> MultiVector {
    return line__wedge__multi_vector_at_infinity(other, rotor__anti_wedge__line_at_infinity(self_, line__anti_dual(other)));
}

fn rotor__anti_project_orthogonally_onto__line_at_origin(self_: Rotor, other: LineAtOrigin) -> MultiVectorAtOrigin {
    return line_at_origin__wedge__multi_vector_at_infinity(other, rotor__anti_wedge__line_at_infinity(self_, line_at_origin__anti_dual(other)));
}

fn rotor__anti_project_orthogonally_onto__motor(self_: Rotor, other: Motor) -> MultiVector {
    return motor__wedge__multi_vector_at_infinity(other, rotor__anti_wedge__multi_vector_at_infinity(self_, motor__anti_dual(other)));
}

fn rotor__anti_project_orthogonally_onto__multi_vector(self_: Rotor, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(other, rotor__anti_wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other)));
}

fn rotor__anti_project_orthogonally_onto__multi_vector_at_origin(self_: Rotor, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__wedge__multi_vector_at_infinity(other, rotor__anti_wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other)));
}

fn rotor__anti_project_orthogonally_onto__origin(self_: Rotor, other: Origin) -> Rotor {
    return origin__wedge__flector_at_infinity(other, rotor__anti_wedge__horizon(self_, origin__anti_dual(other)));
}

fn rotor__anti_project_orthogonally_onto__plane(self_: Rotor, other: Plane) -> AntiScalar {
    return plane__wedge__point_at_infinity(other, rotor__anti_wedge__point_at_infinity(self_, plane__anti_dual(other)));
}

fn rotor__anti_project_orthogonally_onto__plane_at_origin(self_: Rotor, other: PlaneAtOrigin) -> AntiScalar {
    return plane_at_origin__wedge__point_at_infinity(other, rotor__anti_wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other)));
}

fn rotor__anti_project_orthogonally_onto__point(self_: Rotor, other: Point) -> Motor {
    return point__wedge__flector_at_infinity(other, rotor__anti_wedge__horizon(self_, point__anti_dual(other)));
}

fn rotor__anti_project_orthogonally_onto__rotor(self_: Rotor, other: Rotor) -> MultiVectorAtOrigin {
    return rotor__wedge__multi_vector_at_infinity(other, rotor__anti_wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other)));
}

fn rotor__anti_project_orthogonally_onto__transflector(self_: Rotor, other: Transflector) -> Translator {
    return transflector__wedge__point_at_infinity(other, rotor__anti_wedge__point_at_infinity(self_, transflector__anti_dual(other)));
}

fn transflector__anti_project_orthogonally_onto__flector(self_: Transflector, other: Flector) -> MultiVector {
    return flector__wedge__multi_vector_at_infinity(other, transflector__anti_wedge__flector_at_infinity(self_, flector__anti_dual(other)));
}

fn transflector__anti_project_orthogonally_onto__line(self_: Transflector, other: Line) -> Plane {
    return line__wedge__point_at_infinity(other, transflector__anti_wedge__line_at_infinity(self_, line__anti_dual(other)));
}

fn transflector__anti_project_orthogonally_onto__line_at_origin(self_: Transflector, other: LineAtOrigin) -> PlaneAtOrigin {
    return line_at_origin__wedge__point_at_infinity(other, transflector__anti_wedge__line_at_infinity(self_, line_at_origin__anti_dual(other)));
}

fn transflector__anti_project_orthogonally_onto__motor(self_: Transflector, other: Motor) -> MultiVector {
    return motor__wedge__multi_vector_at_infinity(other, transflector__anti_wedge__multi_vector_at_infinity(self_, motor__anti_dual(other)));
}

fn transflector__anti_project_orthogonally_onto__multi_vector(self_: Transflector, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(other, transflector__anti_wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other)));
}

fn transflector__anti_project_orthogonally_onto__multi_vector_at_origin(self_: Transflector, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__wedge__multi_vector_at_infinity(other, transflector__anti_wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other)));
}

fn transflector__anti_project_orthogonally_onto__origin(self_: Transflector, other: Origin) -> PlaneAtOrigin {
    return origin__wedge__line_at_infinity(other, transflector__anti_wedge__horizon(self_, origin__anti_dual(other)));
}

fn transflector__anti_project_orthogonally_onto__plane(self_: Transflector, other: Plane) -> Plane {
    return plane__wedge__scalar(other, transflector__anti_wedge__point_at_infinity(self_, plane__anti_dual(other)));
}

fn transflector__anti_project_orthogonally_onto__plane_at_origin(self_: Transflector, other: PlaneAtOrigin) -> PlaneAtOrigin {
    return plane_at_origin__wedge__scalar(other, transflector__anti_wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other)));
}

fn transflector__anti_project_orthogonally_onto__point(self_: Transflector, other: Point) -> Plane {
    return point__wedge__line_at_infinity(other, transflector__anti_wedge__horizon(self_, point__anti_dual(other)));
}

fn transflector__anti_project_orthogonally_onto__rotor(self_: Transflector, other: Rotor) -> MultiVectorAtOrigin {
    return rotor__wedge__multi_vector_at_infinity(other, transflector__anti_wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other)));
}

fn transflector__anti_project_orthogonally_onto__transflector(self_: Transflector, other: Transflector) -> Transflector {
    return transflector__wedge__scalar(other, transflector__anti_wedge__point_at_infinity(self_, transflector__anti_dual(other)));
}

fn translator__anti_project_orthogonally_onto__flector(self_: Translator, other: Flector) -> Motor {
    return flector__wedge__flector_at_infinity(other, translator__anti_wedge__flector_at_infinity(self_, flector__anti_dual(other)));
}

fn translator__anti_project_orthogonally_onto__line(self_: Translator, other: Line) -> AntiScalar {
    return line__wedge__line_at_infinity(other, translator__anti_wedge__line_at_infinity(self_, line__anti_dual(other)));
}

fn translator__anti_project_orthogonally_onto__line_at_origin(self_: Translator, other: LineAtOrigin) -> AntiScalar {
    return line_at_origin__wedge__line_at_infinity(other, translator__anti_wedge__line_at_infinity(self_, line_at_origin__anti_dual(other)));
}

fn translator__anti_project_orthogonally_onto__motor(self_: Translator, other: Motor) -> MultiVector {
    return motor__wedge__multi_vector_at_infinity(other, translator__anti_wedge__multi_vector_at_infinity(self_, motor__anti_dual(other)));
}

fn translator__anti_project_orthogonally_onto__multi_vector(self_: Translator, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(other, translator__anti_wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other)));
}

fn translator__anti_project_orthogonally_onto__multi_vector_at_origin(self_: Translator, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__wedge__multi_vector_at_infinity(other, translator__anti_wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other)));
}

fn translator__anti_project_orthogonally_onto__origin(self_: Translator, other: Origin) -> AntiScalar {
    return origin__wedge__horizon(other, translator__anti_wedge__horizon(self_, origin__anti_dual(other)));
}

fn translator__anti_project_orthogonally_onto__plane(self_: Translator, other: Plane) -> AntiScalar {
    return plane__wedge__point_at_infinity(other, translator__anti_wedge__point_at_infinity(self_, plane__anti_dual(other)));
}

fn translator__anti_project_orthogonally_onto__plane_at_origin(self_: Translator, other: PlaneAtOrigin) -> AntiScalar {
    return plane_at_origin__wedge__point_at_infinity(other, translator__anti_wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other)));
}

fn translator__anti_project_orthogonally_onto__point(self_: Translator, other: Point) -> AntiScalar {
    return point__wedge__horizon(other, translator__anti_wedge__horizon(self_, point__anti_dual(other)));
}

fn translator__anti_project_orthogonally_onto__rotor(self_: Translator, other: Rotor) -> MultiVectorAtOrigin {
    return rotor__wedge__multi_vector_at_infinity(other, translator__anti_wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other)));
}

fn translator__anti_project_orthogonally_onto__transflector(self_: Translator, other: Transflector) -> Translator {
    return transflector__wedge__point_at_infinity(other, translator__anti_wedge__point_at_infinity(self_, transflector__anti_dual(other)));
}

fn flector__anti_project_via_horizon_onto__flector(self_: Flector, other: Flector) -> MultiVector {
    return flector__wedge__multi_vector(other, flector__anti_wedge__flector(self_, flector__dual(other)));
}

fn flector__anti_project_via_horizon_onto__flector_at_infinity(self_: Flector, other: FlectorAtInfinity) -> MultiVector {
    return flector_at_infinity__wedge__multi_vector(other, flector__anti_wedge__flector(self_, flector_at_infinity__dual(other)));
}

fn flector__anti_project_via_horizon_onto__horizon(self_: Flector, other: Horizon) -> Horizon {
    return horizon__wedge__scalar(other, flector__anti_wedge__origin(self_, horizon__dual(other)));
}

fn flector__anti_project_via_horizon_onto__line(self_: Flector, other: Line) -> Plane {
    return line__wedge__point(other, flector__anti_wedge__line_at_origin(self_, line__dual(other)));
}

fn flector__anti_project_via_horizon_onto__line_at_infinity(self_: Flector, other: LineAtInfinity) -> Plane {
    return line_at_infinity__wedge__point(other, flector__anti_wedge__line_at_origin(self_, line_at_infinity__dual(other)));
}

fn flector__anti_project_via_horizon_onto__motor(self_: Flector, other: Motor) -> Plane {
    return motor__wedge__point(other, flector__anti_wedge__line_at_origin(self_, motor__dual(other)));
}

fn flector__anti_project_via_horizon_onto__multi_vector(self_: Flector, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(other, flector__anti_wedge__multi_vector_at_origin(self_, multi_vector__dual(other)));
}

fn flector__anti_project_via_horizon_onto__multi_vector_at_infinity(self_: Flector, other: MultiVectorAtInfinity) -> MultiVector {
    return multi_vector_at_infinity__wedge__multi_vector(other, flector__anti_wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other)));
}

fn flector__anti_project_via_horizon_onto__plane(self_: Flector, other: Plane) -> Plane {
    return plane__wedge__scalar(other, flector__anti_wedge__origin(self_, plane__dual(other)));
}

fn flector__anti_project_via_horizon_onto__point(self_: Flector, other: Point) -> MultiVector {
    return point__wedge__multi_vector(other, flector__anti_wedge__plane_at_origin(self_, point__dual(other)));
}

fn flector__anti_project_via_horizon_onto__point_at_infinity(self_: Flector, other: PointAtInfinity) -> MultiVector {
    return point_at_infinity__wedge__multi_vector(other, flector__anti_wedge__plane_at_origin(self_, point_at_infinity__dual(other)));
}

fn flector__anti_project_via_horizon_onto__transflector(self_: Flector, other: Transflector) -> MultiVector {
    return transflector__wedge__multi_vector(other, flector__anti_wedge__flector(self_, transflector__dual(other)));
}

fn flector__anti_project_via_horizon_onto__translator(self_: Flector, other: Translator) -> Plane {
    return translator__wedge__point(other, flector__anti_wedge__line_at_origin(self_, translator__dual(other)));
}

fn flector_at_infinity__anti_project_via_horizon_onto__flector(self_: FlectorAtInfinity, other: Flector) -> MultiVector {
    return flector__wedge__multi_vector_at_infinity(other, flector_at_infinity__anti_wedge__flector(self_, flector__dual(other)));
}

fn flector_at_infinity__anti_project_via_horizon_onto__flector_at_infinity(self_: FlectorAtInfinity, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return flector_at_infinity__wedge__multi_vector_at_infinity(other, flector_at_infinity__anti_wedge__flector(self_, flector_at_infinity__dual(other)));
}

fn flector_at_infinity__anti_project_via_horizon_onto__horizon(self_: FlectorAtInfinity, other: Horizon) -> Horizon {
    return horizon__wedge__scalar(other, flector_at_infinity__anti_wedge__origin(self_, horizon__dual(other)));
}

fn flector_at_infinity__anti_project_via_horizon_onto__line(self_: FlectorAtInfinity, other: Line) -> Plane {
    return line__wedge__point_at_infinity(other, flector_at_infinity__anti_wedge__line_at_origin(self_, line__dual(other)));
}

fn flector_at_infinity__anti_project_via_horizon_onto__line_at_infinity(self_: FlectorAtInfinity, other: LineAtInfinity) -> Horizon {
    return line_at_infinity__wedge__point_at_infinity(other, flector_at_infinity__anti_wedge__line_at_origin(self_, line_at_infinity__dual(other)));
}

fn flector_at_infinity__anti_project_via_horizon_onto__motor(self_: FlectorAtInfinity, other: Motor) -> Plane {
    return motor__wedge__point_at_infinity(other, flector_at_infinity__anti_wedge__line_at_origin(self_, motor__dual(other)));
}

fn flector_at_infinity__anti_project_via_horizon_onto__multi_vector(self_: FlectorAtInfinity, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(other, flector_at_infinity__anti_wedge__multi_vector_at_origin(self_, multi_vector__dual(other)));
}

fn flector_at_infinity__anti_project_via_horizon_onto__multi_vector_at_infinity(self_: FlectorAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__wedge__multi_vector_at_infinity(other, flector_at_infinity__anti_wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other)));
}

fn flector_at_infinity__anti_project_via_horizon_onto__plane(self_: FlectorAtInfinity, other: Plane) -> Plane {
    return plane__wedge__scalar(other, flector_at_infinity__anti_wedge__origin(self_, plane__dual(other)));
}

fn flector_at_infinity__anti_project_via_horizon_onto__point(self_: FlectorAtInfinity, other: Point) -> MultiVector {
    return point__wedge__multi_vector_at_infinity(other, flector_at_infinity__anti_wedge__plane_at_origin(self_, point__dual(other)));
}

fn flector_at_infinity__anti_project_via_horizon_onto__point_at_infinity(self_: FlectorAtInfinity, other: PointAtInfinity) -> MultiVectorAtInfinity {
    return point_at_infinity__wedge__multi_vector_at_infinity(other, flector_at_infinity__anti_wedge__plane_at_origin(self_, point_at_infinity__dual(other)));
}

fn flector_at_infinity__anti_project_via_horizon_onto__transflector(self_: FlectorAtInfinity, other: Transflector) -> MultiVector {
    return transflector__wedge__multi_vector_at_infinity(other, flector_at_infinity__anti_wedge__flector(self_, transflector__dual(other)));
}

fn flector_at_infinity__anti_project_via_horizon_onto__translator(self_: FlectorAtInfinity, other: Translator) -> Horizon {
    return translator__wedge__point_at_infinity(other, flector_at_infinity__anti_wedge__line_at_origin(self_, translator__dual(other)));
}

fn horizon__anti_project_via_horizon_onto__flector(self_: Horizon, other: Flector) -> MultiVector {
    return flector__wedge__multi_vector_at_infinity(other, horizon__anti_wedge__flector(self_, flector__dual(other)));
}

fn horizon__anti_project_via_horizon_onto__flector_at_infinity(self_: Horizon, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return flector_at_infinity__wedge__multi_vector_at_infinity(other, horizon__anti_wedge__flector(self_, flector_at_infinity__dual(other)));
}

fn horizon__anti_project_via_horizon_onto__horizon(self_: Horizon, other: Horizon) -> Horizon {
    return horizon__wedge__scalar(other, horizon__anti_wedge__origin(self_, horizon__dual(other)));
}

fn horizon__anti_project_via_horizon_onto__line(self_: Horizon, other: Line) -> Plane {
    return line__wedge__point_at_infinity(other, horizon__anti_wedge__line_at_origin(self_, line__dual(other)));
}

fn horizon__anti_project_via_horizon_onto__line_at_infinity(self_: Horizon, other: LineAtInfinity) -> Horizon {
    return line_at_infinity__wedge__point_at_infinity(other, horizon__anti_wedge__line_at_origin(self_, line_at_infinity__dual(other)));
}

fn horizon__anti_project_via_horizon_onto__motor(self_: Horizon, other: Motor) -> Plane {
    return motor__wedge__point_at_infinity(other, horizon__anti_wedge__line_at_origin(self_, motor__dual(other)));
}

fn horizon__anti_project_via_horizon_onto__multi_vector(self_: Horizon, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(other, horizon__anti_wedge__multi_vector_at_origin(self_, multi_vector__dual(other)));
}

fn horizon__anti_project_via_horizon_onto__multi_vector_at_infinity(self_: Horizon, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__wedge__multi_vector_at_infinity(other, horizon__anti_wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other)));
}

fn horizon__anti_project_via_horizon_onto__plane(self_: Horizon, other: Plane) -> Plane {
    return plane__wedge__scalar(other, horizon__anti_wedge__origin(self_, plane__dual(other)));
}

fn horizon__anti_project_via_horizon_onto__point(self_: Horizon, other: Point) -> Plane {
    return point__wedge__line_at_infinity(other, horizon__anti_wedge__plane_at_origin(self_, point__dual(other)));
}

fn horizon__anti_project_via_horizon_onto__point_at_infinity(self_: Horizon, other: PointAtInfinity) -> Horizon {
    return point_at_infinity__wedge__line_at_infinity(other, horizon__anti_wedge__plane_at_origin(self_, point_at_infinity__dual(other)));
}

fn horizon__anti_project_via_horizon_onto__transflector(self_: Horizon, other: Transflector) -> MultiVector {
    return transflector__wedge__multi_vector_at_infinity(other, horizon__anti_wedge__flector(self_, transflector__dual(other)));
}

fn horizon__anti_project_via_horizon_onto__translator(self_: Horizon, other: Translator) -> Horizon {
    return translator__wedge__point_at_infinity(other, horizon__anti_wedge__line_at_origin(self_, translator__dual(other)));
}

fn line__anti_project_via_horizon_onto__flector(self_: Line, other: Flector) -> Motor {
    return flector__wedge__point(other, line__anti_wedge__flector(self_, flector__dual(other)));
}

fn line__anti_project_via_horizon_onto__flector_at_infinity(self_: Line, other: FlectorAtInfinity) -> Motor {
    return flector_at_infinity__wedge__point(other, line__anti_wedge__flector(self_, flector_at_infinity__dual(other)));
}

fn line__anti_project_via_horizon_onto__line(self_: Line, other: Line) -> Line {
    return line__wedge__scalar(other, line__anti_wedge__line_at_origin(self_, line__dual(other)));
}

fn line__anti_project_via_horizon_onto__line_at_infinity(self_: Line, other: LineAtInfinity) -> LineAtInfinity {
    return line_at_infinity__wedge__scalar(other, line__anti_wedge__line_at_origin(self_, line_at_infinity__dual(other)));
}

fn line__anti_project_via_horizon_onto__motor(self_: Line, other: Motor) -> Motor {
    return motor__wedge__scalar(other, line__anti_wedge__line_at_origin(self_, motor__dual(other)));
}

fn line__anti_project_via_horizon_onto__multi_vector(self_: Line, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(other, line__anti_wedge__multi_vector_at_origin(self_, multi_vector__dual(other)));
}

fn line__anti_project_via_horizon_onto__multi_vector_at_infinity(self_: Line, other: MultiVectorAtInfinity) -> MultiVector {
    return multi_vector_at_infinity__wedge__multi_vector(other, line__anti_wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other)));
}

fn line__anti_project_via_horizon_onto__point(self_: Line, other: Point) -> Line {
    return point__wedge__point(other, line__anti_wedge__plane_at_origin(self_, point__dual(other)));
}

fn line__anti_project_via_horizon_onto__point_at_infinity(self_: Line, other: PointAtInfinity) -> Line {
    return point_at_infinity__wedge__point(other, line__anti_wedge__plane_at_origin(self_, point_at_infinity__dual(other)));
}

fn line__anti_project_via_horizon_onto__transflector(self_: Line, other: Transflector) -> Motor {
    return transflector__wedge__point(other, line__anti_wedge__flector(self_, transflector__dual(other)));
}

fn line__anti_project_via_horizon_onto__translator(self_: Line, other: Translator) -> Translator {
    return translator__wedge__scalar(other, line__anti_wedge__line_at_origin(self_, translator__dual(other)));
}

fn line_at_infinity__anti_project_via_horizon_onto__flector(self_: LineAtInfinity, other: Flector) -> Motor {
    return flector__wedge__point_at_infinity(other, line_at_infinity__anti_wedge__flector(self_, flector__dual(other)));
}

fn line_at_infinity__anti_project_via_horizon_onto__flector_at_infinity(self_: LineAtInfinity, other: FlectorAtInfinity) -> LineAtInfinity {
    return flector_at_infinity__wedge__point_at_infinity(other, line_at_infinity__anti_wedge__flector(self_, flector_at_infinity__dual(other)));
}

fn line_at_infinity__anti_project_via_horizon_onto__line(self_: LineAtInfinity, other: Line) -> Line {
    return line__wedge__scalar(other, line_at_infinity__anti_wedge__line_at_origin(self_, line__dual(other)));
}

fn line_at_infinity__anti_project_via_horizon_onto__line_at_infinity(self_: LineAtInfinity, other: LineAtInfinity) -> LineAtInfinity {
    return line_at_infinity__wedge__scalar(other, line_at_infinity__anti_wedge__line_at_origin(self_, line_at_infinity__dual(other)));
}

fn line_at_infinity__anti_project_via_horizon_onto__motor(self_: LineAtInfinity, other: Motor) -> Motor {
    return motor__wedge__scalar(other, line_at_infinity__anti_wedge__line_at_origin(self_, motor__dual(other)));
}

fn line_at_infinity__anti_project_via_horizon_onto__multi_vector(self_: LineAtInfinity, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(other, line_at_infinity__anti_wedge__multi_vector_at_origin(self_, multi_vector__dual(other)));
}

fn line_at_infinity__anti_project_via_horizon_onto__multi_vector_at_infinity(self_: LineAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__wedge__multi_vector_at_infinity(other, line_at_infinity__anti_wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other)));
}

fn line_at_infinity__anti_project_via_horizon_onto__point(self_: LineAtInfinity, other: Point) -> Line {
    return point__wedge__point_at_infinity(other, line_at_infinity__anti_wedge__plane_at_origin(self_, point__dual(other)));
}

fn line_at_infinity__anti_project_via_horizon_onto__point_at_infinity(self_: LineAtInfinity, other: PointAtInfinity) -> LineAtInfinity {
    return point_at_infinity__wedge__point_at_infinity(other, line_at_infinity__anti_wedge__plane_at_origin(self_, point_at_infinity__dual(other)));
}

fn line_at_infinity__anti_project_via_horizon_onto__transflector(self_: LineAtInfinity, other: Transflector) -> Translator {
    return transflector__wedge__point_at_infinity(other, line_at_infinity__anti_wedge__flector(self_, transflector__dual(other)));
}

fn line_at_infinity__anti_project_via_horizon_onto__translator(self_: LineAtInfinity, other: Translator) -> Translator {
    return translator__wedge__scalar(other, line_at_infinity__anti_wedge__line_at_origin(self_, translator__dual(other)));
}

fn line_at_origin__anti_project_via_horizon_onto__flector(self_: LineAtOrigin, other: Flector) -> Motor {
    return flector__wedge__point(other, line_at_origin__anti_wedge__flector(self_, flector__dual(other)));
}

fn line_at_origin__anti_project_via_horizon_onto__flector_at_infinity(self_: LineAtOrigin, other: FlectorAtInfinity) -> Motor {
    return flector_at_infinity__wedge__point(other, line_at_origin__anti_wedge__flector(self_, flector_at_infinity__dual(other)));
}

fn line_at_origin__anti_project_via_horizon_onto__multi_vector(self_: LineAtOrigin, other: MultiVector) -> MultiVectorAtOrigin {
    return multi_vector__wedge__multi_vector_at_origin(other, line_at_origin__anti_wedge__multi_vector_at_origin(self_, multi_vector__dual(other)));
}

fn line_at_origin__anti_project_via_horizon_onto__multi_vector_at_infinity(self_: LineAtOrigin, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__wedge__multi_vector_at_origin(other, line_at_origin__anti_wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other)));
}

fn line_at_origin__anti_project_via_horizon_onto__point(self_: LineAtOrigin, other: Point) -> LineAtOrigin {
    return point__wedge__origin(other, line_at_origin__anti_wedge__plane_at_origin(self_, point__dual(other)));
}

fn line_at_origin__anti_project_via_horizon_onto__point_at_infinity(self_: LineAtOrigin, other: PointAtInfinity) -> LineAtOrigin {
    return point_at_infinity__wedge__origin(other, line_at_origin__anti_wedge__plane_at_origin(self_, point_at_infinity__dual(other)));
}

fn line_at_origin__anti_project_via_horizon_onto__transflector(self_: LineAtOrigin, other: Transflector) -> Motor {
    return transflector__wedge__point(other, line_at_origin__anti_wedge__flector(self_, transflector__dual(other)));
}

fn motor__anti_project_via_horizon_onto__flector(self_: Motor, other: Flector) -> Motor {
    return flector__wedge__flector(other, motor__anti_wedge__flector(self_, flector__dual(other)));
}

fn motor__anti_project_via_horizon_onto__flector_at_infinity(self_: Motor, other: FlectorAtInfinity) -> Motor {
    return flector_at_infinity__wedge__flector(other, motor__anti_wedge__flector(self_, flector_at_infinity__dual(other)));
}

fn motor__anti_project_via_horizon_onto__horizon(self_: Motor, other: Horizon) -> AntiScalar {
    return horizon__wedge__origin(other, motor__anti_wedge__origin(self_, horizon__dual(other)));
}

fn motor__anti_project_via_horizon_onto__line(self_: Motor, other: Line) -> MultiVector {
    return line__wedge__multi_vector(other, motor__anti_wedge__line_at_origin(self_, line__dual(other)));
}

fn motor__anti_project_via_horizon_onto__line_at_infinity(self_: Motor, other: LineAtInfinity) -> MultiVector {
    return line_at_infinity__wedge__multi_vector(other, motor__anti_wedge__line_at_origin(self_, line_at_infinity__dual(other)));
}

fn motor__anti_project_via_horizon_onto__motor(self_: Motor, other: Motor) -> MultiVector {
    return motor__wedge__multi_vector(other, motor__anti_wedge__line_at_origin(self_, motor__dual(other)));
}

fn motor__anti_project_via_horizon_onto__multi_vector(self_: Motor, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(other, motor__anti_wedge__multi_vector_at_origin(self_, multi_vector__dual(other)));
}

fn motor__anti_project_via_horizon_onto__multi_vector_at_infinity(self_: Motor, other: MultiVectorAtInfinity) -> MultiVector {
    return multi_vector_at_infinity__wedge__multi_vector(other, motor__anti_wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other)));
}

fn motor__anti_project_via_horizon_onto__plane(self_: Motor, other: Plane) -> AntiScalar {
    return plane__wedge__origin(other, motor__anti_wedge__origin(self_, plane__dual(other)));
}

fn motor__anti_project_via_horizon_onto__point(self_: Motor, other: Point) -> Motor {
    return point__wedge__flector(other, motor__anti_wedge__plane_at_origin(self_, point__dual(other)));
}

fn motor__anti_project_via_horizon_onto__point_at_infinity(self_: Motor, other: PointAtInfinity) -> Motor {
    return point_at_infinity__wedge__flector(other, motor__anti_wedge__plane_at_origin(self_, point_at_infinity__dual(other)));
}

fn motor__anti_project_via_horizon_onto__transflector(self_: Motor, other: Transflector) -> Motor {
    return transflector__wedge__flector(other, motor__anti_wedge__flector(self_, transflector__dual(other)));
}

fn motor__anti_project_via_horizon_onto__translator(self_: Motor, other: Translator) -> MultiVector {
    return translator__wedge__multi_vector(other, motor__anti_wedge__line_at_origin(self_, translator__dual(other)));
}

fn multi_vector__anti_project_via_horizon_onto__flector(self_: MultiVector, other: Flector) -> MultiVector {
    return flector__wedge__multi_vector(other, multi_vector__anti_wedge__flector(self_, flector__dual(other)));
}

fn multi_vector__anti_project_via_horizon_onto__flector_at_infinity(self_: MultiVector, other: FlectorAtInfinity) -> MultiVector {
    return flector_at_infinity__wedge__multi_vector(other, multi_vector__anti_wedge__flector(self_, flector_at_infinity__dual(other)));
}

fn multi_vector__anti_project_via_horizon_onto__horizon(self_: MultiVector, other: Horizon) -> MultiVector {
    return horizon__wedge__multi_vector(other, multi_vector__anti_wedge__origin(self_, horizon__dual(other)));
}

fn multi_vector__anti_project_via_horizon_onto__line(self_: MultiVector, other: Line) -> MultiVector {
    return line__wedge__multi_vector(other, multi_vector__anti_wedge__line_at_origin(self_, line__dual(other)));
}

fn multi_vector__anti_project_via_horizon_onto__line_at_infinity(self_: MultiVector, other: LineAtInfinity) -> MultiVector {
    return line_at_infinity__wedge__multi_vector(other, multi_vector__anti_wedge__line_at_origin(self_, line_at_infinity__dual(other)));
}

fn multi_vector__anti_project_via_horizon_onto__motor(self_: MultiVector, other: Motor) -> MultiVector {
    return motor__wedge__multi_vector(other, multi_vector__anti_wedge__line_at_origin(self_, motor__dual(other)));
}

fn multi_vector__anti_project_via_horizon_onto__multi_vector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(other, multi_vector__anti_wedge__multi_vector_at_origin(self_, multi_vector__dual(other)));
}

fn multi_vector__anti_project_via_horizon_onto__multi_vector_at_infinity(self_: MultiVector, other: MultiVectorAtInfinity) -> MultiVector {
    return multi_vector_at_infinity__wedge__multi_vector(other, multi_vector__anti_wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other)));
}

fn multi_vector__anti_project_via_horizon_onto__plane(self_: MultiVector, other: Plane) -> MultiVector {
    return plane__wedge__multi_vector(other, multi_vector__anti_wedge__origin(self_, plane__dual(other)));
}

fn multi_vector__anti_project_via_horizon_onto__point(self_: MultiVector, other: Point) -> MultiVector {
    return point__wedge__multi_vector(other, multi_vector__anti_wedge__plane_at_origin(self_, point__dual(other)));
}

fn multi_vector__anti_project_via_horizon_onto__point_at_infinity(self_: MultiVector, other: PointAtInfinity) -> MultiVector {
    return point_at_infinity__wedge__multi_vector(other, multi_vector__anti_wedge__plane_at_origin(self_, point_at_infinity__dual(other)));
}

fn multi_vector__anti_project_via_horizon_onto__transflector(self_: MultiVector, other: Transflector) -> MultiVector {
    return transflector__wedge__multi_vector(other, multi_vector__anti_wedge__flector(self_, transflector__dual(other)));
}

fn multi_vector__anti_project_via_horizon_onto__translator(self_: MultiVector, other: Translator) -> MultiVector {
    return translator__wedge__multi_vector(other, multi_vector__anti_wedge__line_at_origin(self_, translator__dual(other)));
}

fn multi_vector_at_infinity__anti_project_via_horizon_onto__flector(self_: MultiVectorAtInfinity, other: Flector) -> MultiVector {
    return flector__wedge__multi_vector_at_infinity(other, multi_vector_at_infinity__anti_wedge__flector(self_, flector__dual(other)));
}

fn multi_vector_at_infinity__anti_project_via_horizon_onto__flector_at_infinity(self_: MultiVectorAtInfinity, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return flector_at_infinity__wedge__multi_vector_at_infinity(other, multi_vector_at_infinity__anti_wedge__flector(self_, flector_at_infinity__dual(other)));
}

fn multi_vector_at_infinity__anti_project_via_horizon_onto__horizon(self_: MultiVectorAtInfinity, other: Horizon) -> Horizon {
    return horizon__wedge__scalar(other, multi_vector_at_infinity__anti_wedge__origin(self_, horizon__dual(other)));
}

fn multi_vector_at_infinity__anti_project_via_horizon_onto__line(self_: MultiVectorAtInfinity, other: Line) -> MultiVector {
    return line__wedge__multi_vector_at_infinity(other, multi_vector_at_infinity__anti_wedge__line_at_origin(self_, line__dual(other)));
}

fn multi_vector_at_infinity__anti_project_via_horizon_onto__line_at_infinity(self_: MultiVectorAtInfinity, other: LineAtInfinity) -> MultiVectorAtInfinity {
    return line_at_infinity__wedge__multi_vector_at_infinity(other, multi_vector_at_infinity__anti_wedge__line_at_origin(self_, line_at_infinity__dual(other)));
}

fn multi_vector_at_infinity__anti_project_via_horizon_onto__motor(self_: MultiVectorAtInfinity, other: Motor) -> MultiVector {
    return motor__wedge__multi_vector_at_infinity(other, multi_vector_at_infinity__anti_wedge__line_at_origin(self_, motor__dual(other)));
}

fn multi_vector_at_infinity__anti_project_via_horizon_onto__multi_vector(self_: MultiVectorAtInfinity, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(other, multi_vector_at_infinity__anti_wedge__multi_vector_at_origin(self_, multi_vector__dual(other)));
}

fn multi_vector_at_infinity__anti_project_via_horizon_onto__multi_vector_at_infinity(self_: MultiVectorAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__wedge__multi_vector_at_infinity(other, multi_vector_at_infinity__anti_wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other)));
}

fn multi_vector_at_infinity__anti_project_via_horizon_onto__plane(self_: MultiVectorAtInfinity, other: Plane) -> Plane {
    return plane__wedge__scalar(other, multi_vector_at_infinity__anti_wedge__origin(self_, plane__dual(other)));
}

fn multi_vector_at_infinity__anti_project_via_horizon_onto__point(self_: MultiVectorAtInfinity, other: Point) -> MultiVector {
    return point__wedge__multi_vector_at_infinity(other, multi_vector_at_infinity__anti_wedge__plane_at_origin(self_, point__dual(other)));
}

fn multi_vector_at_infinity__anti_project_via_horizon_onto__point_at_infinity(self_: MultiVectorAtInfinity, other: PointAtInfinity) -> MultiVectorAtInfinity {
    return point_at_infinity__wedge__multi_vector_at_infinity(other, multi_vector_at_infinity__anti_wedge__plane_at_origin(self_, point_at_infinity__dual(other)));
}

fn multi_vector_at_infinity__anti_project_via_horizon_onto__transflector(self_: MultiVectorAtInfinity, other: Transflector) -> MultiVector {
    return transflector__wedge__multi_vector_at_infinity(other, multi_vector_at_infinity__anti_wedge__flector(self_, transflector__dual(other)));
}

fn multi_vector_at_infinity__anti_project_via_horizon_onto__translator(self_: MultiVectorAtInfinity, other: Translator) -> MultiVector {
    return translator__wedge__multi_vector_at_infinity(other, multi_vector_at_infinity__anti_wedge__line_at_origin(self_, translator__dual(other)));
}

fn multi_vector_at_origin__anti_project_via_horizon_onto__flector(self_: MultiVectorAtOrigin, other: Flector) -> MultiVector {
    return flector__wedge__multi_vector(other, multi_vector_at_origin__anti_wedge__flector(self_, flector__dual(other)));
}

fn multi_vector_at_origin__anti_project_via_horizon_onto__flector_at_infinity(self_: MultiVectorAtOrigin, other: FlectorAtInfinity) -> MultiVector {
    return flector_at_infinity__wedge__multi_vector(other, multi_vector_at_origin__anti_wedge__flector(self_, flector_at_infinity__dual(other)));
}

fn multi_vector_at_origin__anti_project_via_horizon_onto__horizon(self_: MultiVectorAtOrigin, other: Horizon) -> AntiScalar {
    return horizon__wedge__origin(other, multi_vector_at_origin__anti_wedge__origin(self_, horizon__dual(other)));
}

fn multi_vector_at_origin__anti_project_via_horizon_onto__line(self_: MultiVectorAtOrigin, other: Line) -> MultiVectorAtOrigin {
    return line__wedge__multi_vector_at_origin(other, multi_vector_at_origin__anti_wedge__line_at_origin(self_, line__dual(other)));
}

fn multi_vector_at_origin__anti_project_via_horizon_onto__line_at_infinity(self_: MultiVectorAtOrigin, other: LineAtInfinity) -> MultiVectorAtOrigin {
    return line_at_infinity__wedge__multi_vector_at_origin(other, multi_vector_at_origin__anti_wedge__line_at_origin(self_, line_at_infinity__dual(other)));
}

fn multi_vector_at_origin__anti_project_via_horizon_onto__motor(self_: MultiVectorAtOrigin, other: Motor) -> MultiVectorAtOrigin {
    return motor__wedge__multi_vector_at_origin(other, multi_vector_at_origin__anti_wedge__line_at_origin(self_, motor__dual(other)));
}

fn multi_vector_at_origin__anti_project_via_horizon_onto__multi_vector(self_: MultiVectorAtOrigin, other: MultiVector) -> MultiVectorAtOrigin {
    return multi_vector__wedge__multi_vector_at_origin(other, multi_vector_at_origin__anti_wedge__multi_vector_at_origin(self_, multi_vector__dual(other)));
}

fn multi_vector_at_origin__anti_project_via_horizon_onto__multi_vector_at_infinity(self_: MultiVectorAtOrigin, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__wedge__multi_vector_at_origin(other, multi_vector_at_origin__anti_wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other)));
}

fn multi_vector_at_origin__anti_project_via_horizon_onto__plane(self_: MultiVectorAtOrigin, other: Plane) -> AntiScalar {
    return plane__wedge__origin(other, multi_vector_at_origin__anti_wedge__origin(self_, plane__dual(other)));
}

fn multi_vector_at_origin__anti_project_via_horizon_onto__point(self_: MultiVectorAtOrigin, other: Point) -> MultiVectorAtOrigin {
    return point__wedge__multi_vector_at_origin(other, multi_vector_at_origin__anti_wedge__plane_at_origin(self_, point__dual(other)));
}

fn multi_vector_at_origin__anti_project_via_horizon_onto__point_at_infinity(self_: MultiVectorAtOrigin, other: PointAtInfinity) -> MultiVectorAtOrigin {
    return point_at_infinity__wedge__multi_vector_at_origin(other, multi_vector_at_origin__anti_wedge__plane_at_origin(self_, point_at_infinity__dual(other)));
}

fn multi_vector_at_origin__anti_project_via_horizon_onto__transflector(self_: MultiVectorAtOrigin, other: Transflector) -> MultiVector {
    return transflector__wedge__multi_vector(other, multi_vector_at_origin__anti_wedge__flector(self_, transflector__dual(other)));
}

fn multi_vector_at_origin__anti_project_via_horizon_onto__translator(self_: MultiVectorAtOrigin, other: Translator) -> MultiVectorAtOrigin {
    return translator__wedge__multi_vector_at_origin(other, multi_vector_at_origin__anti_wedge__line_at_origin(self_, translator__dual(other)));
}

fn origin__anti_project_via_horizon_onto__flector(self_: Origin, other: Flector) -> Flector {
    return flector__wedge__scalar(other, origin__anti_wedge__flector(self_, flector__dual(other)));
}

fn origin__anti_project_via_horizon_onto__flector_at_infinity(self_: Origin, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return flector_at_infinity__wedge__scalar(other, origin__anti_wedge__flector(self_, flector_at_infinity__dual(other)));
}

fn origin__anti_project_via_horizon_onto__multi_vector(self_: Origin, other: MultiVector) -> MultiVectorAtOrigin {
    return multi_vector__wedge__origin(other, origin__anti_wedge__multi_vector_at_origin(self_, multi_vector__dual(other)));
}

fn origin__anti_project_via_horizon_onto__multi_vector_at_infinity(self_: Origin, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__wedge__origin(other, origin__anti_wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other)));
}

fn origin__anti_project_via_horizon_onto__transflector(self_: Origin, other: Transflector) -> Transflector {
    return transflector__wedge__scalar(other, origin__anti_wedge__flector(self_, transflector__dual(other)));
}

fn plane__anti_project_via_horizon_onto__flector(self_: Plane, other: Flector) -> MultiVector {
    return flector__wedge__multi_vector(other, plane__anti_wedge__flector(self_, flector__dual(other)));
}

fn plane__anti_project_via_horizon_onto__flector_at_infinity(self_: Plane, other: FlectorAtInfinity) -> MultiVector {
    return flector_at_infinity__wedge__multi_vector(other, plane__anti_wedge__flector(self_, flector_at_infinity__dual(other)));
}

fn plane__anti_project_via_horizon_onto__horizon(self_: Plane, other: Horizon) -> Horizon {
    return horizon__wedge__scalar(other, plane__anti_wedge__origin(self_, horizon__dual(other)));
}

fn plane__anti_project_via_horizon_onto__line(self_: Plane, other: Line) -> Plane {
    return line__wedge__point(other, plane__anti_wedge__line_at_origin(self_, line__dual(other)));
}

fn plane__anti_project_via_horizon_onto__line_at_infinity(self_: Plane, other: LineAtInfinity) -> Plane {
    return line_at_infinity__wedge__point(other, plane__anti_wedge__line_at_origin(self_, line_at_infinity__dual(other)));
}

fn plane__anti_project_via_horizon_onto__motor(self_: Plane, other: Motor) -> Plane {
    return motor__wedge__point(other, plane__anti_wedge__line_at_origin(self_, motor__dual(other)));
}

fn plane__anti_project_via_horizon_onto__multi_vector(self_: Plane, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(other, plane__anti_wedge__multi_vector_at_origin(self_, multi_vector__dual(other)));
}

fn plane__anti_project_via_horizon_onto__multi_vector_at_infinity(self_: Plane, other: MultiVectorAtInfinity) -> MultiVector {
    return multi_vector_at_infinity__wedge__multi_vector(other, plane__anti_wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other)));
}

fn plane__anti_project_via_horizon_onto__plane(self_: Plane, other: Plane) -> Plane {
    return plane__wedge__scalar(other, plane__anti_wedge__origin(self_, plane__dual(other)));
}

fn plane__anti_project_via_horizon_onto__point(self_: Plane, other: Point) -> Plane {
    return point__wedge__line(other, plane__anti_wedge__plane_at_origin(self_, point__dual(other)));
}

fn plane__anti_project_via_horizon_onto__point_at_infinity(self_: Plane, other: PointAtInfinity) -> Plane {
    return point_at_infinity__wedge__line(other, plane__anti_wedge__plane_at_origin(self_, point_at_infinity__dual(other)));
}

fn plane__anti_project_via_horizon_onto__transflector(self_: Plane, other: Transflector) -> MultiVector {
    return transflector__wedge__multi_vector(other, plane__anti_wedge__flector(self_, transflector__dual(other)));
}

fn plane__anti_project_via_horizon_onto__translator(self_: Plane, other: Translator) -> Plane {
    return translator__wedge__point(other, plane__anti_wedge__line_at_origin(self_, translator__dual(other)));
}

fn plane_at_origin__anti_project_via_horizon_onto__flector(self_: PlaneAtOrigin, other: Flector) -> MultiVector {
    return flector__wedge__multi_vector(other, plane_at_origin__anti_wedge__flector(self_, flector__dual(other)));
}

fn plane_at_origin__anti_project_via_horizon_onto__flector_at_infinity(self_: PlaneAtOrigin, other: FlectorAtInfinity) -> MultiVector {
    return flector_at_infinity__wedge__multi_vector(other, plane_at_origin__anti_wedge__flector(self_, flector_at_infinity__dual(other)));
}

fn plane_at_origin__anti_project_via_horizon_onto__line(self_: PlaneAtOrigin, other: Line) -> PlaneAtOrigin {
    return line__wedge__origin(other, plane_at_origin__anti_wedge__line_at_origin(self_, line__dual(other)));
}

fn plane_at_origin__anti_project_via_horizon_onto__line_at_infinity(self_: PlaneAtOrigin, other: LineAtInfinity) -> PlaneAtOrigin {
    return line_at_infinity__wedge__origin(other, plane_at_origin__anti_wedge__line_at_origin(self_, line_at_infinity__dual(other)));
}

fn plane_at_origin__anti_project_via_horizon_onto__motor(self_: PlaneAtOrigin, other: Motor) -> PlaneAtOrigin {
    return motor__wedge__origin(other, plane_at_origin__anti_wedge__line_at_origin(self_, motor__dual(other)));
}

fn plane_at_origin__anti_project_via_horizon_onto__multi_vector(self_: PlaneAtOrigin, other: MultiVector) -> MultiVectorAtOrigin {
    return multi_vector__wedge__multi_vector_at_origin(other, plane_at_origin__anti_wedge__multi_vector_at_origin(self_, multi_vector__dual(other)));
}

fn plane_at_origin__anti_project_via_horizon_onto__multi_vector_at_infinity(self_: PlaneAtOrigin, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__wedge__multi_vector_at_origin(other, plane_at_origin__anti_wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other)));
}

fn plane_at_origin__anti_project_via_horizon_onto__point(self_: PlaneAtOrigin, other: Point) -> PlaneAtOrigin {
    return point__wedge__line_at_origin(other, plane_at_origin__anti_wedge__plane_at_origin(self_, point__dual(other)));
}

fn plane_at_origin__anti_project_via_horizon_onto__point_at_infinity(self_: PlaneAtOrigin, other: PointAtInfinity) -> PlaneAtOrigin {
    return point_at_infinity__wedge__line_at_origin(other, plane_at_origin__anti_wedge__plane_at_origin(self_, point_at_infinity__dual(other)));
}

fn plane_at_origin__anti_project_via_horizon_onto__transflector(self_: PlaneAtOrigin, other: Transflector) -> MultiVector {
    return transflector__wedge__multi_vector(other, plane_at_origin__anti_wedge__flector(self_, transflector__dual(other)));
}

fn plane_at_origin__anti_project_via_horizon_onto__translator(self_: PlaneAtOrigin, other: Translator) -> PlaneAtOrigin {
    return translator__wedge__origin(other, plane_at_origin__anti_wedge__line_at_origin(self_, translator__dual(other)));
}

fn point__anti_project_via_horizon_onto__flector(self_: Point, other: Flector) -> Flector {
    return flector__wedge__scalar(other, point__anti_wedge__flector(self_, flector__dual(other)));
}

fn point__anti_project_via_horizon_onto__flector_at_infinity(self_: Point, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return flector_at_infinity__wedge__scalar(other, point__anti_wedge__flector(self_, flector_at_infinity__dual(other)));
}

fn point__anti_project_via_horizon_onto__multi_vector(self_: Point, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(other, point__anti_wedge__multi_vector_at_origin(self_, multi_vector__dual(other)));
}

fn point__anti_project_via_horizon_onto__multi_vector_at_infinity(self_: Point, other: MultiVectorAtInfinity) -> MultiVector {
    return multi_vector_at_infinity__wedge__multi_vector(other, point__anti_wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other)));
}

fn point__anti_project_via_horizon_onto__point(self_: Point, other: Point) -> Point {
    return point__wedge__scalar(other, point__anti_wedge__plane_at_origin(self_, point__dual(other)));
}

fn point__anti_project_via_horizon_onto__point_at_infinity(self_: Point, other: PointAtInfinity) -> PointAtInfinity {
    return point_at_infinity__wedge__scalar(other, point__anti_wedge__plane_at_origin(self_, point_at_infinity__dual(other)));
}

fn point__anti_project_via_horizon_onto__transflector(self_: Point, other: Transflector) -> Transflector {
    return transflector__wedge__scalar(other, point__anti_wedge__flector(self_, transflector__dual(other)));
}

fn point_at_infinity__anti_project_via_horizon_onto__flector(self_: PointAtInfinity, other: Flector) -> Flector {
    return flector__wedge__scalar(other, point_at_infinity__anti_wedge__flector(self_, flector__dual(other)));
}

fn point_at_infinity__anti_project_via_horizon_onto__flector_at_infinity(self_: PointAtInfinity, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return flector_at_infinity__wedge__scalar(other, point_at_infinity__anti_wedge__flector(self_, flector_at_infinity__dual(other)));
}

fn point_at_infinity__anti_project_via_horizon_onto__multi_vector(self_: PointAtInfinity, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(other, point_at_infinity__anti_wedge__multi_vector_at_origin(self_, multi_vector__dual(other)));
}

fn point_at_infinity__anti_project_via_horizon_onto__multi_vector_at_infinity(self_: PointAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__wedge__multi_vector_at_infinity(other, point_at_infinity__anti_wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other)));
}

fn point_at_infinity__anti_project_via_horizon_onto__point(self_: PointAtInfinity, other: Point) -> Point {
    return point__wedge__scalar(other, point_at_infinity__anti_wedge__plane_at_origin(self_, point__dual(other)));
}

fn point_at_infinity__anti_project_via_horizon_onto__point_at_infinity(self_: PointAtInfinity, other: PointAtInfinity) -> PointAtInfinity {
    return point_at_infinity__wedge__scalar(other, point_at_infinity__anti_wedge__plane_at_origin(self_, point_at_infinity__dual(other)));
}

fn point_at_infinity__anti_project_via_horizon_onto__transflector(self_: PointAtInfinity, other: Transflector) -> Transflector {
    return transflector__wedge__scalar(other, point_at_infinity__anti_wedge__flector(self_, transflector__dual(other)));
}

fn rotor__anti_project_via_horizon_onto__flector(self_: Rotor, other: Flector) -> Motor {
    return flector__wedge__flector(other, rotor__anti_wedge__flector(self_, flector__dual(other)));
}

fn rotor__anti_project_via_horizon_onto__flector_at_infinity(self_: Rotor, other: FlectorAtInfinity) -> Motor {
    return flector_at_infinity__wedge__flector(other, rotor__anti_wedge__flector(self_, flector_at_infinity__dual(other)));
}

fn rotor__anti_project_via_horizon_onto__horizon(self_: Rotor, other: Horizon) -> AntiScalar {
    return horizon__wedge__origin(other, rotor__anti_wedge__origin(self_, horizon__dual(other)));
}

fn rotor__anti_project_via_horizon_onto__line(self_: Rotor, other: Line) -> AntiScalar {
    return line__wedge__line_at_origin(other, rotor__anti_wedge__line_at_origin(self_, line__dual(other)));
}

fn rotor__anti_project_via_horizon_onto__line_at_infinity(self_: Rotor, other: LineAtInfinity) -> AntiScalar {
    return line_at_infinity__wedge__line_at_origin(other, rotor__anti_wedge__line_at_origin(self_, line_at_infinity__dual(other)));
}

fn rotor__anti_project_via_horizon_onto__motor(self_: Rotor, other: Motor) -> AntiScalar {
    return motor__wedge__line_at_origin(other, rotor__anti_wedge__line_at_origin(self_, motor__dual(other)));
}

fn rotor__anti_project_via_horizon_onto__multi_vector(self_: Rotor, other: MultiVector) -> MultiVectorAtOrigin {
    return multi_vector__wedge__multi_vector_at_origin(other, rotor__anti_wedge__multi_vector_at_origin(self_, multi_vector__dual(other)));
}

fn rotor__anti_project_via_horizon_onto__multi_vector_at_infinity(self_: Rotor, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__wedge__multi_vector_at_origin(other, rotor__anti_wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other)));
}

fn rotor__anti_project_via_horizon_onto__plane(self_: Rotor, other: Plane) -> AntiScalar {
    return plane__wedge__origin(other, rotor__anti_wedge__origin(self_, plane__dual(other)));
}

fn rotor__anti_project_via_horizon_onto__point(self_: Rotor, other: Point) -> Motor {
    return point__wedge__flector(other, rotor__anti_wedge__plane_at_origin(self_, point__dual(other)));
}

fn rotor__anti_project_via_horizon_onto__point_at_infinity(self_: Rotor, other: PointAtInfinity) -> Motor {
    return point_at_infinity__wedge__flector(other, rotor__anti_wedge__plane_at_origin(self_, point_at_infinity__dual(other)));
}

fn rotor__anti_project_via_horizon_onto__transflector(self_: Rotor, other: Transflector) -> Motor {
    return transflector__wedge__flector(other, rotor__anti_wedge__flector(self_, transflector__dual(other)));
}

fn rotor__anti_project_via_horizon_onto__translator(self_: Rotor, other: Translator) -> AntiScalar {
    return translator__wedge__line_at_origin(other, rotor__anti_wedge__line_at_origin(self_, translator__dual(other)));
}

fn transflector__anti_project_via_horizon_onto__flector(self_: Transflector, other: Flector) -> MultiVector {
    return flector__wedge__multi_vector(other, transflector__anti_wedge__flector(self_, flector__dual(other)));
}

fn transflector__anti_project_via_horizon_onto__flector_at_infinity(self_: Transflector, other: FlectorAtInfinity) -> MultiVector {
    return flector_at_infinity__wedge__multi_vector(other, transflector__anti_wedge__flector(self_, flector_at_infinity__dual(other)));
}

fn transflector__anti_project_via_horizon_onto__horizon(self_: Transflector, other: Horizon) -> Horizon {
    return horizon__wedge__scalar(other, transflector__anti_wedge__origin(self_, horizon__dual(other)));
}

fn transflector__anti_project_via_horizon_onto__line(self_: Transflector, other: Line) -> Plane {
    return line__wedge__point(other, transflector__anti_wedge__line_at_origin(self_, line__dual(other)));
}

fn transflector__anti_project_via_horizon_onto__line_at_infinity(self_: Transflector, other: LineAtInfinity) -> Plane {
    return line_at_infinity__wedge__point(other, transflector__anti_wedge__line_at_origin(self_, line_at_infinity__dual(other)));
}

fn transflector__anti_project_via_horizon_onto__motor(self_: Transflector, other: Motor) -> Plane {
    return motor__wedge__point(other, transflector__anti_wedge__line_at_origin(self_, motor__dual(other)));
}

fn transflector__anti_project_via_horizon_onto__multi_vector(self_: Transflector, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(other, transflector__anti_wedge__multi_vector_at_origin(self_, multi_vector__dual(other)));
}

fn transflector__anti_project_via_horizon_onto__multi_vector_at_infinity(self_: Transflector, other: MultiVectorAtInfinity) -> MultiVector {
    return multi_vector_at_infinity__wedge__multi_vector(other, transflector__anti_wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other)));
}

fn transflector__anti_project_via_horizon_onto__plane(self_: Transflector, other: Plane) -> Plane {
    return plane__wedge__scalar(other, transflector__anti_wedge__origin(self_, plane__dual(other)));
}

fn transflector__anti_project_via_horizon_onto__point(self_: Transflector, other: Point) -> MultiVector {
    return point__wedge__multi_vector(other, transflector__anti_wedge__plane_at_origin(self_, point__dual(other)));
}

fn transflector__anti_project_via_horizon_onto__point_at_infinity(self_: Transflector, other: PointAtInfinity) -> MultiVector {
    return point_at_infinity__wedge__multi_vector(other, transflector__anti_wedge__plane_at_origin(self_, point_at_infinity__dual(other)));
}

fn transflector__anti_project_via_horizon_onto__transflector(self_: Transflector, other: Transflector) -> MultiVector {
    return transflector__wedge__multi_vector(other, transflector__anti_wedge__flector(self_, transflector__dual(other)));
}

fn transflector__anti_project_via_horizon_onto__translator(self_: Transflector, other: Translator) -> Plane {
    return translator__wedge__point(other, transflector__anti_wedge__line_at_origin(self_, translator__dual(other)));
}

fn translator__anti_project_via_horizon_onto__flector(self_: Translator, other: Flector) -> Motor {
    return flector__wedge__flector(other, translator__anti_wedge__flector(self_, flector__dual(other)));
}

fn translator__anti_project_via_horizon_onto__flector_at_infinity(self_: Translator, other: FlectorAtInfinity) -> Motor {
    return flector_at_infinity__wedge__flector(other, translator__anti_wedge__flector(self_, flector_at_infinity__dual(other)));
}

fn translator__anti_project_via_horizon_onto__horizon(self_: Translator, other: Horizon) -> AntiScalar {
    return horizon__wedge__origin(other, translator__anti_wedge__origin(self_, horizon__dual(other)));
}

fn translator__anti_project_via_horizon_onto__line(self_: Translator, other: Line) -> MultiVector {
    return line__wedge__multi_vector(other, translator__anti_wedge__line_at_origin(self_, line__dual(other)));
}

fn translator__anti_project_via_horizon_onto__line_at_infinity(self_: Translator, other: LineAtInfinity) -> MultiVector {
    return line_at_infinity__wedge__multi_vector(other, translator__anti_wedge__line_at_origin(self_, line_at_infinity__dual(other)));
}

fn translator__anti_project_via_horizon_onto__motor(self_: Translator, other: Motor) -> MultiVector {
    return motor__wedge__multi_vector(other, translator__anti_wedge__line_at_origin(self_, motor__dual(other)));
}

fn translator__anti_project_via_horizon_onto__multi_vector(self_: Translator, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector(other, translator__anti_wedge__multi_vector_at_origin(self_, multi_vector__dual(other)));
}

fn translator__anti_project_via_horizon_onto__multi_vector_at_infinity(self_: Translator, other: MultiVectorAtInfinity) -> MultiVector {
    return multi_vector_at_infinity__wedge__multi_vector(other, translator__anti_wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other)));
}

fn translator__anti_project_via_horizon_onto__plane(self_: Translator, other: Plane) -> AntiScalar {
    return plane__wedge__origin(other, translator__anti_wedge__origin(self_, plane__dual(other)));
}

fn translator__anti_project_via_horizon_onto__point(self_: Translator, other: Point) -> Motor {
    return point__wedge__transflector(other, translator__anti_wedge__plane_at_origin(self_, point__dual(other)));
}

fn translator__anti_project_via_horizon_onto__point_at_infinity(self_: Translator, other: PointAtInfinity) -> Translator {
    return point_at_infinity__wedge__transflector(other, translator__anti_wedge__plane_at_origin(self_, point_at_infinity__dual(other)));
}

fn translator__anti_project_via_horizon_onto__transflector(self_: Translator, other: Transflector) -> Motor {
    return transflector__wedge__flector(other, translator__anti_wedge__flector(self_, transflector__dual(other)));
}

fn translator__anti_project_via_horizon_onto__translator(self_: Translator, other: Translator) -> MultiVector {
    return translator__wedge__multi_vector(other, translator__anti_wedge__line_at_origin(self_, translator__dual(other)));
}

fn flector__project_orthogonally_onto__flector(self_: Flector, other: Flector) -> Flector {
    return flector__anti_wedge__motor(other, flector__wedge__flector_at_infinity(self_, flector__anti_dual(other)));
}

fn flector__project_orthogonally_onto__line(self_: Flector, other: Line) -> Point {
    return line__anti_wedge__plane(other, flector__wedge__line_at_infinity(self_, line__anti_dual(other)));
}

fn flector__project_orthogonally_onto__line_at_origin(self_: Flector, other: LineAtOrigin) -> Point {
    return line_at_origin__anti_wedge__plane(other, flector__wedge__line_at_infinity(self_, line_at_origin__anti_dual(other)));
}

fn flector__project_orthogonally_onto__motor(self_: Flector, other: Motor) -> MultiVector {
    return motor__anti_wedge__multi_vector(other, flector__wedge__multi_vector_at_infinity(self_, motor__anti_dual(other)));
}

fn flector__project_orthogonally_onto__multi_vector(self_: Flector, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(other, flector__wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other)));
}

fn flector__project_orthogonally_onto__multi_vector_at_origin(self_: Flector, other: MultiVectorAtOrigin) -> MultiVector {
    return multi_vector_at_origin__anti_wedge__multi_vector(other, flector__wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other)));
}

fn flector__project_orthogonally_onto__origin(self_: Flector, other: Origin) -> Origin {
    return origin__anti_wedge__anti_scalar(other, flector__wedge__horizon(self_, origin__anti_dual(other)));
}

fn flector__project_orthogonally_onto__plane(self_: Flector, other: Plane) -> Flector {
    return plane__anti_wedge__motor(other, flector__wedge__point_at_infinity(self_, plane__anti_dual(other)));
}

fn flector__project_orthogonally_onto__plane_at_origin(self_: Flector, other: PlaneAtOrigin) -> Flector {
    return plane_at_origin__anti_wedge__motor(other, flector__wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other)));
}

fn flector__project_orthogonally_onto__point(self_: Flector, other: Point) -> Point {
    return point__anti_wedge__anti_scalar(other, flector__wedge__horizon(self_, point__anti_dual(other)));
}

fn flector__project_orthogonally_onto__rotor(self_: Flector, other: Rotor) -> MultiVector {
    return rotor__anti_wedge__multi_vector(other, flector__wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other)));
}

fn flector__project_orthogonally_onto__transflector(self_: Flector, other: Transflector) -> Flector {
    return transflector__anti_wedge__motor(other, flector__wedge__point_at_infinity(self_, transflector__anti_dual(other)));
}

fn flector_at_infinity__project_orthogonally_onto__flector(self_: FlectorAtInfinity, other: Flector) -> PointAtInfinity {
    return flector__anti_wedge__line_at_infinity(other, flector_at_infinity__wedge__flector_at_infinity(self_, flector__anti_dual(other)));
}

fn flector_at_infinity__project_orthogonally_onto__line(self_: FlectorAtInfinity, other: Line) -> PointAtInfinity {
    return line__anti_wedge__horizon(other, flector_at_infinity__wedge__line_at_infinity(self_, line__anti_dual(other)));
}

fn flector_at_infinity__project_orthogonally_onto__line_at_origin(self_: FlectorAtInfinity, other: LineAtOrigin) -> PointAtInfinity {
    return line_at_origin__anti_wedge__horizon(other, flector_at_infinity__wedge__line_at_infinity(self_, line_at_origin__anti_dual(other)));
}

fn flector_at_infinity__project_orthogonally_onto__motor(self_: FlectorAtInfinity, other: Motor) -> MultiVectorAtInfinity {
    return motor__anti_wedge__multi_vector_at_infinity(other, flector_at_infinity__wedge__multi_vector_at_infinity(self_, motor__anti_dual(other)));
}

fn flector_at_infinity__project_orthogonally_onto__multi_vector(self_: FlectorAtInfinity, other: MultiVector) -> MultiVectorAtInfinity {
    return multi_vector__anti_wedge__multi_vector_at_infinity(other, flector_at_infinity__wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other)));
}

fn flector_at_infinity__project_orthogonally_onto__multi_vector_at_origin(self_: FlectorAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__anti_wedge__multi_vector_at_infinity(other, flector_at_infinity__wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other)));
}

fn flector_at_infinity__project_orthogonally_onto__plane(self_: FlectorAtInfinity, other: Plane) -> PointAtInfinity {
    return plane__anti_wedge__line_at_infinity(other, flector_at_infinity__wedge__point_at_infinity(self_, plane__anti_dual(other)));
}

fn flector_at_infinity__project_orthogonally_onto__plane_at_origin(self_: FlectorAtInfinity, other: PlaneAtOrigin) -> PointAtInfinity {
    return plane_at_origin__anti_wedge__line_at_infinity(other, flector_at_infinity__wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other)));
}

fn flector_at_infinity__project_orthogonally_onto__rotor(self_: FlectorAtInfinity, other: Rotor) -> MultiVectorAtInfinity {
    return rotor__anti_wedge__multi_vector_at_infinity(other, flector_at_infinity__wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other)));
}

fn flector_at_infinity__project_orthogonally_onto__transflector(self_: FlectorAtInfinity, other: Transflector) -> PointAtInfinity {
    return transflector__anti_wedge__line_at_infinity(other, flector_at_infinity__wedge__point_at_infinity(self_, transflector__anti_dual(other)));
}

fn horizon__project_orthogonally_onto__motor(self_: Horizon, other: Motor) -> FlectorAtInfinity {
    return motor__anti_wedge__horizon(other, horizon__wedge__multi_vector_at_infinity(self_, motor__anti_dual(other)));
}

fn horizon__project_orthogonally_onto__multi_vector(self_: Horizon, other: MultiVector) -> MultiVectorAtInfinity {
    return multi_vector__anti_wedge__horizon(other, horizon__wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other)));
}

fn horizon__project_orthogonally_onto__multi_vector_at_origin(self_: Horizon, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__anti_wedge__horizon(other, horizon__wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other)));
}

fn horizon__project_orthogonally_onto__rotor(self_: Horizon, other: Rotor) -> FlectorAtInfinity {
    return rotor__anti_wedge__horizon(other, horizon__wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other)));
}

fn line__project_orthogonally_onto__flector(self_: Line, other: Flector) -> MultiVector {
    return flector__anti_wedge__plane(other, line__wedge__flector_at_infinity(self_, flector__anti_dual(other)));
}

fn line__project_orthogonally_onto__line(self_: Line, other: Line) -> Line {
    return line__anti_wedge__anti_scalar(other, line__wedge__line_at_infinity(self_, line__anti_dual(other)));
}

fn line__project_orthogonally_onto__line_at_origin(self_: Line, other: LineAtOrigin) -> LineAtOrigin {
    return line_at_origin__anti_wedge__anti_scalar(other, line__wedge__line_at_infinity(self_, line_at_origin__anti_dual(other)));
}

fn line__project_orthogonally_onto__motor(self_: Line, other: Motor) -> MultiVector {
    return motor__anti_wedge__multi_vector(other, line__wedge__multi_vector_at_infinity(self_, motor__anti_dual(other)));
}

fn line__project_orthogonally_onto__multi_vector(self_: Line, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(other, line__wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other)));
}

fn line__project_orthogonally_onto__multi_vector_at_origin(self_: Line, other: MultiVectorAtOrigin) -> MultiVector {
    return multi_vector_at_origin__anti_wedge__multi_vector(other, line__wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other)));
}

fn line__project_orthogonally_onto__plane(self_: Line, other: Plane) -> Line {
    return plane__anti_wedge__plane(other, line__wedge__point_at_infinity(self_, plane__anti_dual(other)));
}

fn line__project_orthogonally_onto__plane_at_origin(self_: Line, other: PlaneAtOrigin) -> Line {
    return plane_at_origin__anti_wedge__plane(other, line__wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other)));
}

fn line__project_orthogonally_onto__rotor(self_: Line, other: Rotor) -> MultiVector {
    return rotor__anti_wedge__multi_vector(other, line__wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other)));
}

fn line__project_orthogonally_onto__transflector(self_: Line, other: Transflector) -> MultiVector {
    return transflector__anti_wedge__plane(other, line__wedge__point_at_infinity(self_, transflector__anti_dual(other)));
}

fn line_at_infinity__project_orthogonally_onto__flector(self_: LineAtInfinity, other: Flector) -> MultiVectorAtInfinity {
    return flector__anti_wedge__horizon(other, line_at_infinity__wedge__flector_at_infinity(self_, flector__anti_dual(other)));
}

fn line_at_infinity__project_orthogonally_onto__motor(self_: LineAtInfinity, other: Motor) -> MultiVectorAtInfinity {
    return motor__anti_wedge__multi_vector_at_infinity(other, line_at_infinity__wedge__multi_vector_at_infinity(self_, motor__anti_dual(other)));
}

fn line_at_infinity__project_orthogonally_onto__multi_vector(self_: LineAtInfinity, other: MultiVector) -> MultiVectorAtInfinity {
    return multi_vector__anti_wedge__multi_vector_at_infinity(other, line_at_infinity__wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other)));
}

fn line_at_infinity__project_orthogonally_onto__multi_vector_at_origin(self_: LineAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__anti_wedge__multi_vector_at_infinity(other, line_at_infinity__wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other)));
}

fn line_at_infinity__project_orthogonally_onto__plane(self_: LineAtInfinity, other: Plane) -> LineAtInfinity {
    return plane__anti_wedge__horizon(other, line_at_infinity__wedge__point_at_infinity(self_, plane__anti_dual(other)));
}

fn line_at_infinity__project_orthogonally_onto__plane_at_origin(self_: LineAtInfinity, other: PlaneAtOrigin) -> LineAtInfinity {
    return plane_at_origin__anti_wedge__horizon(other, line_at_infinity__wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other)));
}

fn line_at_infinity__project_orthogonally_onto__rotor(self_: LineAtInfinity, other: Rotor) -> MultiVectorAtInfinity {
    return rotor__anti_wedge__multi_vector_at_infinity(other, line_at_infinity__wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other)));
}

fn line_at_infinity__project_orthogonally_onto__transflector(self_: LineAtInfinity, other: Transflector) -> LineAtInfinity {
    return transflector__anti_wedge__horizon(other, line_at_infinity__wedge__point_at_infinity(self_, transflector__anti_dual(other)));
}

fn line_at_origin__project_orthogonally_onto__flector(self_: LineAtOrigin, other: Flector) -> MultiVector {
    return flector__anti_wedge__plane_at_origin(other, line_at_origin__wedge__flector_at_infinity(self_, flector__anti_dual(other)));
}

fn line_at_origin__project_orthogonally_onto__line(self_: LineAtOrigin, other: Line) -> Line {
    return line__anti_wedge__anti_scalar(other, line_at_origin__wedge__line_at_infinity(self_, line__anti_dual(other)));
}

fn line_at_origin__project_orthogonally_onto__line_at_origin(self_: LineAtOrigin, other: LineAtOrigin) -> LineAtOrigin {
    return line_at_origin__anti_wedge__anti_scalar(other, line_at_origin__wedge__line_at_infinity(self_, line_at_origin__anti_dual(other)));
}

fn line_at_origin__project_orthogonally_onto__motor(self_: LineAtOrigin, other: Motor) -> MultiVector {
    return motor__anti_wedge__multi_vector_at_origin(other, line_at_origin__wedge__multi_vector_at_infinity(self_, motor__anti_dual(other)));
}

fn line_at_origin__project_orthogonally_onto__multi_vector(self_: LineAtOrigin, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector_at_origin(other, line_at_origin__wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other)));
}

fn line_at_origin__project_orthogonally_onto__multi_vector_at_origin(self_: LineAtOrigin, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__anti_wedge__multi_vector_at_origin(other, line_at_origin__wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other)));
}

fn line_at_origin__project_orthogonally_onto__plane(self_: LineAtOrigin, other: Plane) -> Line {
    return plane__anti_wedge__plane_at_origin(other, line_at_origin__wedge__point_at_infinity(self_, plane__anti_dual(other)));
}

fn line_at_origin__project_orthogonally_onto__plane_at_origin(self_: LineAtOrigin, other: PlaneAtOrigin) -> LineAtOrigin {
    return plane_at_origin__anti_wedge__plane_at_origin(other, line_at_origin__wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other)));
}

fn line_at_origin__project_orthogonally_onto__rotor(self_: LineAtOrigin, other: Rotor) -> MultiVectorAtOrigin {
    return rotor__anti_wedge__multi_vector_at_origin(other, line_at_origin__wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other)));
}

fn line_at_origin__project_orthogonally_onto__transflector(self_: LineAtOrigin, other: Transflector) -> MultiVector {
    return transflector__anti_wedge__plane_at_origin(other, line_at_origin__wedge__point_at_infinity(self_, transflector__anti_dual(other)));
}

fn motor__project_orthogonally_onto__flector(self_: Motor, other: Flector) -> MultiVector {
    return flector__anti_wedge__plane(other, motor__wedge__flector_at_infinity(self_, flector__anti_dual(other)));
}

fn motor__project_orthogonally_onto__line(self_: Motor, other: Line) -> Line {
    return line__anti_wedge__anti_scalar(other, motor__wedge__line_at_infinity(self_, line__anti_dual(other)));
}

fn motor__project_orthogonally_onto__line_at_origin(self_: Motor, other: LineAtOrigin) -> LineAtOrigin {
    return line_at_origin__anti_wedge__anti_scalar(other, motor__wedge__line_at_infinity(self_, line_at_origin__anti_dual(other)));
}

fn motor__project_orthogonally_onto__motor(self_: Motor, other: Motor) -> MultiVector {
    return motor__anti_wedge__multi_vector(other, motor__wedge__multi_vector_at_infinity(self_, motor__anti_dual(other)));
}

fn motor__project_orthogonally_onto__multi_vector(self_: Motor, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(other, motor__wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other)));
}

fn motor__project_orthogonally_onto__multi_vector_at_origin(self_: Motor, other: MultiVectorAtOrigin) -> MultiVector {
    return multi_vector_at_origin__anti_wedge__multi_vector(other, motor__wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other)));
}

fn motor__project_orthogonally_onto__plane(self_: Motor, other: Plane) -> Line {
    return plane__anti_wedge__plane(other, motor__wedge__point_at_infinity(self_, plane__anti_dual(other)));
}

fn motor__project_orthogonally_onto__plane_at_origin(self_: Motor, other: PlaneAtOrigin) -> Line {
    return plane_at_origin__anti_wedge__plane(other, motor__wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other)));
}

fn motor__project_orthogonally_onto__rotor(self_: Motor, other: Rotor) -> MultiVector {
    return rotor__anti_wedge__multi_vector(other, motor__wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other)));
}

fn motor__project_orthogonally_onto__transflector(self_: Motor, other: Transflector) -> MultiVector {
    return transflector__anti_wedge__plane(other, motor__wedge__point_at_infinity(self_, transflector__anti_dual(other)));
}

fn multi_vector__project_orthogonally_onto__flector(self_: MultiVector, other: Flector) -> MultiVector {
    return flector__anti_wedge__multi_vector(other, multi_vector__wedge__flector_at_infinity(self_, flector__anti_dual(other)));
}

fn multi_vector__project_orthogonally_onto__line(self_: MultiVector, other: Line) -> MultiVector {
    return line__anti_wedge__multi_vector(other, multi_vector__wedge__line_at_infinity(self_, line__anti_dual(other)));
}

fn multi_vector__project_orthogonally_onto__line_at_origin(self_: MultiVector, other: LineAtOrigin) -> MultiVector {
    return line_at_origin__anti_wedge__multi_vector(other, multi_vector__wedge__line_at_infinity(self_, line_at_origin__anti_dual(other)));
}

fn multi_vector__project_orthogonally_onto__motor(self_: MultiVector, other: Motor) -> MultiVector {
    return motor__anti_wedge__multi_vector(other, multi_vector__wedge__multi_vector_at_infinity(self_, motor__anti_dual(other)));
}

fn multi_vector__project_orthogonally_onto__multi_vector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(other, multi_vector__wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other)));
}

fn multi_vector__project_orthogonally_onto__multi_vector_at_origin(self_: MultiVector, other: MultiVectorAtOrigin) -> MultiVector {
    return multi_vector_at_origin__anti_wedge__multi_vector(other, multi_vector__wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other)));
}

fn multi_vector__project_orthogonally_onto__origin(self_: MultiVector, other: Origin) -> MultiVector {
    return origin__anti_wedge__multi_vector(other, multi_vector__wedge__horizon(self_, origin__anti_dual(other)));
}

fn multi_vector__project_orthogonally_onto__plane(self_: MultiVector, other: Plane) -> MultiVector {
    return plane__anti_wedge__multi_vector(other, multi_vector__wedge__point_at_infinity(self_, plane__anti_dual(other)));
}

fn multi_vector__project_orthogonally_onto__plane_at_origin(self_: MultiVector, other: PlaneAtOrigin) -> MultiVector {
    return plane_at_origin__anti_wedge__multi_vector(other, multi_vector__wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other)));
}

fn multi_vector__project_orthogonally_onto__point(self_: MultiVector, other: Point) -> MultiVector {
    return point__anti_wedge__multi_vector(other, multi_vector__wedge__horizon(self_, point__anti_dual(other)));
}

fn multi_vector__project_orthogonally_onto__rotor(self_: MultiVector, other: Rotor) -> MultiVector {
    return rotor__anti_wedge__multi_vector(other, multi_vector__wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other)));
}

fn multi_vector__project_orthogonally_onto__transflector(self_: MultiVector, other: Transflector) -> MultiVector {
    return transflector__anti_wedge__multi_vector(other, multi_vector__wedge__point_at_infinity(self_, transflector__anti_dual(other)));
}

fn multi_vector_at_infinity__project_orthogonally_onto__flector(self_: MultiVectorAtInfinity, other: Flector) -> MultiVectorAtInfinity {
    return flector__anti_wedge__multi_vector_at_infinity(other, multi_vector_at_infinity__wedge__flector_at_infinity(self_, flector__anti_dual(other)));
}

fn multi_vector_at_infinity__project_orthogonally_onto__line(self_: MultiVectorAtInfinity, other: Line) -> MultiVectorAtInfinity {
    return line__anti_wedge__multi_vector_at_infinity(other, multi_vector_at_infinity__wedge__line_at_infinity(self_, line__anti_dual(other)));
}

fn multi_vector_at_infinity__project_orthogonally_onto__line_at_origin(self_: MultiVectorAtInfinity, other: LineAtOrigin) -> MultiVectorAtInfinity {
    return line_at_origin__anti_wedge__multi_vector_at_infinity(other, multi_vector_at_infinity__wedge__line_at_infinity(self_, line_at_origin__anti_dual(other)));
}

fn multi_vector_at_infinity__project_orthogonally_onto__motor(self_: MultiVectorAtInfinity, other: Motor) -> MultiVectorAtInfinity {
    return motor__anti_wedge__multi_vector_at_infinity(other, multi_vector_at_infinity__wedge__multi_vector_at_infinity(self_, motor__anti_dual(other)));
}

fn multi_vector_at_infinity__project_orthogonally_onto__multi_vector(self_: MultiVectorAtInfinity, other: MultiVector) -> MultiVectorAtInfinity {
    return multi_vector__anti_wedge__multi_vector_at_infinity(other, multi_vector_at_infinity__wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other)));
}

fn multi_vector_at_infinity__project_orthogonally_onto__multi_vector_at_origin(self_: MultiVectorAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__anti_wedge__multi_vector_at_infinity(other, multi_vector_at_infinity__wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other)));
}

fn multi_vector_at_infinity__project_orthogonally_onto__origin(self_: MultiVectorAtInfinity, other: Origin) -> Scalar {
    return origin__anti_wedge__horizon(other, multi_vector_at_infinity__wedge__horizon(self_, origin__anti_dual(other)));
}

fn multi_vector_at_infinity__project_orthogonally_onto__plane(self_: MultiVectorAtInfinity, other: Plane) -> MultiVectorAtInfinity {
    return plane__anti_wedge__multi_vector_at_infinity(other, multi_vector_at_infinity__wedge__point_at_infinity(self_, plane__anti_dual(other)));
}

fn multi_vector_at_infinity__project_orthogonally_onto__plane_at_origin(self_: MultiVectorAtInfinity, other: PlaneAtOrigin) -> MultiVectorAtInfinity {
    return plane_at_origin__anti_wedge__multi_vector_at_infinity(other, multi_vector_at_infinity__wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other)));
}

fn multi_vector_at_infinity__project_orthogonally_onto__point(self_: MultiVectorAtInfinity, other: Point) -> Scalar {
    return point__anti_wedge__horizon(other, multi_vector_at_infinity__wedge__horizon(self_, point__anti_dual(other)));
}

fn multi_vector_at_infinity__project_orthogonally_onto__rotor(self_: MultiVectorAtInfinity, other: Rotor) -> MultiVectorAtInfinity {
    return rotor__anti_wedge__multi_vector_at_infinity(other, multi_vector_at_infinity__wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other)));
}

fn multi_vector_at_infinity__project_orthogonally_onto__transflector(self_: MultiVectorAtInfinity, other: Transflector) -> MultiVectorAtInfinity {
    return transflector__anti_wedge__multi_vector_at_infinity(other, multi_vector_at_infinity__wedge__point_at_infinity(self_, transflector__anti_dual(other)));
}

fn multi_vector_at_origin__project_orthogonally_onto__flector(self_: MultiVectorAtOrigin, other: Flector) -> MultiVector {
    return flector__anti_wedge__multi_vector_at_origin(other, multi_vector_at_origin__wedge__flector_at_infinity(self_, flector__anti_dual(other)));
}

fn multi_vector_at_origin__project_orthogonally_onto__line(self_: MultiVectorAtOrigin, other: Line) -> MultiVector {
    return line__anti_wedge__multi_vector_at_origin(other, multi_vector_at_origin__wedge__line_at_infinity(self_, line__anti_dual(other)));
}

fn multi_vector_at_origin__project_orthogonally_onto__line_at_origin(self_: MultiVectorAtOrigin, other: LineAtOrigin) -> MultiVectorAtOrigin {
    return line_at_origin__anti_wedge__multi_vector_at_origin(other, multi_vector_at_origin__wedge__line_at_infinity(self_, line_at_origin__anti_dual(other)));
}

fn multi_vector_at_origin__project_orthogonally_onto__motor(self_: MultiVectorAtOrigin, other: Motor) -> MultiVector {
    return motor__anti_wedge__multi_vector_at_origin(other, multi_vector_at_origin__wedge__multi_vector_at_infinity(self_, motor__anti_dual(other)));
}

fn multi_vector_at_origin__project_orthogonally_onto__multi_vector(self_: MultiVectorAtOrigin, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector_at_origin(other, multi_vector_at_origin__wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other)));
}

fn multi_vector_at_origin__project_orthogonally_onto__multi_vector_at_origin(self_: MultiVectorAtOrigin, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__anti_wedge__multi_vector_at_origin(other, multi_vector_at_origin__wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other)));
}

fn multi_vector_at_origin__project_orthogonally_onto__origin(self_: MultiVectorAtOrigin, other: Origin) -> Origin {
    return origin__anti_wedge__anti_scalar(other, multi_vector_at_origin__wedge__horizon(self_, origin__anti_dual(other)));
}

fn multi_vector_at_origin__project_orthogonally_onto__plane(self_: MultiVectorAtOrigin, other: Plane) -> MultiVector {
    return plane__anti_wedge__multi_vector_at_origin(other, multi_vector_at_origin__wedge__point_at_infinity(self_, plane__anti_dual(other)));
}

fn multi_vector_at_origin__project_orthogonally_onto__plane_at_origin(self_: MultiVectorAtOrigin, other: PlaneAtOrigin) -> MultiVectorAtOrigin {
    return plane_at_origin__anti_wedge__multi_vector_at_origin(other, multi_vector_at_origin__wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other)));
}

fn multi_vector_at_origin__project_orthogonally_onto__point(self_: MultiVectorAtOrigin, other: Point) -> Point {
    return point__anti_wedge__anti_scalar(other, multi_vector_at_origin__wedge__horizon(self_, point__anti_dual(other)));
}

fn multi_vector_at_origin__project_orthogonally_onto__rotor(self_: MultiVectorAtOrigin, other: Rotor) -> MultiVectorAtOrigin {
    return rotor__anti_wedge__multi_vector_at_origin(other, multi_vector_at_origin__wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other)));
}

fn multi_vector_at_origin__project_orthogonally_onto__transflector(self_: MultiVectorAtOrigin, other: Transflector) -> MultiVector {
    return transflector__anti_wedge__multi_vector_at_origin(other, multi_vector_at_origin__wedge__point_at_infinity(self_, transflector__anti_dual(other)));
}

fn origin__project_orthogonally_onto__flector(self_: Origin, other: Flector) -> Flector {
    return flector__anti_wedge__rotor(other, origin__wedge__flector_at_infinity(self_, flector__anti_dual(other)));
}

fn origin__project_orthogonally_onto__line(self_: Origin, other: Line) -> Point {
    return line__anti_wedge__plane_at_origin(other, origin__wedge__line_at_infinity(self_, line__anti_dual(other)));
}

fn origin__project_orthogonally_onto__line_at_origin(self_: Origin, other: LineAtOrigin) -> Origin {
    return line_at_origin__anti_wedge__plane_at_origin(other, origin__wedge__line_at_infinity(self_, line_at_origin__anti_dual(other)));
}

fn origin__project_orthogonally_onto__motor(self_: Origin, other: Motor) -> MultiVector {
    return motor__anti_wedge__multi_vector_at_origin(other, origin__wedge__multi_vector_at_infinity(self_, motor__anti_dual(other)));
}

fn origin__project_orthogonally_onto__multi_vector(self_: Origin, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector_at_origin(other, origin__wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other)));
}

fn origin__project_orthogonally_onto__multi_vector_at_origin(self_: Origin, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__anti_wedge__multi_vector_at_origin(other, origin__wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other)));
}

fn origin__project_orthogonally_onto__origin(self_: Origin, other: Origin) -> Origin {
    return origin__anti_wedge__anti_scalar(other, origin__wedge__horizon(self_, origin__anti_dual(other)));
}

fn origin__project_orthogonally_onto__plane(self_: Origin, other: Plane) -> Point {
    return plane__anti_wedge__line_at_origin(other, origin__wedge__point_at_infinity(self_, plane__anti_dual(other)));
}

fn origin__project_orthogonally_onto__plane_at_origin(self_: Origin, other: PlaneAtOrigin) -> Origin {
    return plane_at_origin__anti_wedge__line_at_origin(other, origin__wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other)));
}

fn origin__project_orthogonally_onto__point(self_: Origin, other: Point) -> Point {
    return point__anti_wedge__anti_scalar(other, origin__wedge__horizon(self_, point__anti_dual(other)));
}

fn origin__project_orthogonally_onto__rotor(self_: Origin, other: Rotor) -> MultiVectorAtOrigin {
    return rotor__anti_wedge__multi_vector_at_origin(other, origin__wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other)));
}

fn origin__project_orthogonally_onto__transflector(self_: Origin, other: Transflector) -> Point {
    return transflector__anti_wedge__line_at_origin(other, origin__wedge__point_at_infinity(self_, transflector__anti_dual(other)));
}

fn plane__project_orthogonally_onto__flector(self_: Plane, other: Flector) -> Flector {
    return flector__anti_wedge__anti_scalar(other, plane__wedge__flector_at_infinity(self_, flector__anti_dual(other)));
}

fn plane__project_orthogonally_onto__motor(self_: Plane, other: Motor) -> MultiVector {
    return motor__anti_wedge__multi_vector(other, plane__wedge__multi_vector_at_infinity(self_, motor__anti_dual(other)));
}

fn plane__project_orthogonally_onto__multi_vector(self_: Plane, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(other, plane__wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other)));
}

fn plane__project_orthogonally_onto__multi_vector_at_origin(self_: Plane, other: MultiVectorAtOrigin) -> MultiVector {
    return multi_vector_at_origin__anti_wedge__multi_vector(other, plane__wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other)));
}

fn plane__project_orthogonally_onto__plane(self_: Plane, other: Plane) -> Plane {
    return plane__anti_wedge__anti_scalar(other, plane__wedge__point_at_infinity(self_, plane__anti_dual(other)));
}

fn plane__project_orthogonally_onto__plane_at_origin(self_: Plane, other: PlaneAtOrigin) -> PlaneAtOrigin {
    return plane_at_origin__anti_wedge__anti_scalar(other, plane__wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other)));
}

fn plane__project_orthogonally_onto__rotor(self_: Plane, other: Rotor) -> MultiVector {
    return rotor__anti_wedge__multi_vector(other, plane__wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other)));
}

fn plane__project_orthogonally_onto__transflector(self_: Plane, other: Transflector) -> Transflector {
    return transflector__anti_wedge__anti_scalar(other, plane__wedge__point_at_infinity(self_, transflector__anti_dual(other)));
}

fn plane_at_origin__project_orthogonally_onto__flector(self_: PlaneAtOrigin, other: Flector) -> Flector {
    return flector__anti_wedge__anti_scalar(other, plane_at_origin__wedge__flector_at_infinity(self_, flector__anti_dual(other)));
}

fn plane_at_origin__project_orthogonally_onto__motor(self_: PlaneAtOrigin, other: Motor) -> MultiVector {
    return motor__anti_wedge__multi_vector_at_origin(other, plane_at_origin__wedge__multi_vector_at_infinity(self_, motor__anti_dual(other)));
}

fn plane_at_origin__project_orthogonally_onto__multi_vector(self_: PlaneAtOrigin, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector_at_origin(other, plane_at_origin__wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other)));
}

fn plane_at_origin__project_orthogonally_onto__multi_vector_at_origin(self_: PlaneAtOrigin, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__anti_wedge__multi_vector_at_origin(other, plane_at_origin__wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other)));
}

fn plane_at_origin__project_orthogonally_onto__plane(self_: PlaneAtOrigin, other: Plane) -> Plane {
    return plane__anti_wedge__anti_scalar(other, plane_at_origin__wedge__point_at_infinity(self_, plane__anti_dual(other)));
}

fn plane_at_origin__project_orthogonally_onto__plane_at_origin(self_: PlaneAtOrigin, other: PlaneAtOrigin) -> PlaneAtOrigin {
    return plane_at_origin__anti_wedge__anti_scalar(other, plane_at_origin__wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other)));
}

fn plane_at_origin__project_orthogonally_onto__rotor(self_: PlaneAtOrigin, other: Rotor) -> MultiVectorAtOrigin {
    return rotor__anti_wedge__multi_vector_at_origin(other, plane_at_origin__wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other)));
}

fn plane_at_origin__project_orthogonally_onto__transflector(self_: PlaneAtOrigin, other: Transflector) -> Transflector {
    return transflector__anti_wedge__anti_scalar(other, plane_at_origin__wedge__point_at_infinity(self_, transflector__anti_dual(other)));
}

fn point__project_orthogonally_onto__flector(self_: Point, other: Flector) -> Flector {
    return flector__anti_wedge__motor(other, point__wedge__flector_at_infinity(self_, flector__anti_dual(other)));
}

fn point__project_orthogonally_onto__line(self_: Point, other: Line) -> Point {
    return line__anti_wedge__plane(other, point__wedge__line_at_infinity(self_, line__anti_dual(other)));
}

fn point__project_orthogonally_onto__line_at_origin(self_: Point, other: LineAtOrigin) -> Point {
    return line_at_origin__anti_wedge__plane(other, point__wedge__line_at_infinity(self_, line_at_origin__anti_dual(other)));
}

fn point__project_orthogonally_onto__motor(self_: Point, other: Motor) -> MultiVector {
    return motor__anti_wedge__multi_vector(other, point__wedge__multi_vector_at_infinity(self_, motor__anti_dual(other)));
}

fn point__project_orthogonally_onto__multi_vector(self_: Point, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(other, point__wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other)));
}

fn point__project_orthogonally_onto__multi_vector_at_origin(self_: Point, other: MultiVectorAtOrigin) -> MultiVector {
    return multi_vector_at_origin__anti_wedge__multi_vector(other, point__wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other)));
}

fn point__project_orthogonally_onto__origin(self_: Point, other: Origin) -> Origin {
    return origin__anti_wedge__anti_scalar(other, point__wedge__horizon(self_, origin__anti_dual(other)));
}

fn point__project_orthogonally_onto__plane(self_: Point, other: Plane) -> Point {
    return plane__anti_wedge__line(other, point__wedge__point_at_infinity(self_, plane__anti_dual(other)));
}

fn point__project_orthogonally_onto__plane_at_origin(self_: Point, other: PlaneAtOrigin) -> Point {
    return plane_at_origin__anti_wedge__line(other, point__wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other)));
}

fn point__project_orthogonally_onto__point(self_: Point, other: Point) -> Point {
    return point__anti_wedge__anti_scalar(other, point__wedge__horizon(self_, point__anti_dual(other)));
}

fn point__project_orthogonally_onto__rotor(self_: Point, other: Rotor) -> MultiVector {
    return rotor__anti_wedge__multi_vector(other, point__wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other)));
}

fn point__project_orthogonally_onto__transflector(self_: Point, other: Transflector) -> Point {
    return transflector__anti_wedge__line(other, point__wedge__point_at_infinity(self_, transflector__anti_dual(other)));
}

fn point_at_infinity__project_orthogonally_onto__flector(self_: PointAtInfinity, other: Flector) -> PointAtInfinity {
    return flector__anti_wedge__line_at_infinity(other, point_at_infinity__wedge__flector_at_infinity(self_, flector__anti_dual(other)));
}

fn point_at_infinity__project_orthogonally_onto__line(self_: PointAtInfinity, other: Line) -> PointAtInfinity {
    return line__anti_wedge__horizon(other, point_at_infinity__wedge__line_at_infinity(self_, line__anti_dual(other)));
}

fn point_at_infinity__project_orthogonally_onto__line_at_origin(self_: PointAtInfinity, other: LineAtOrigin) -> PointAtInfinity {
    return line_at_origin__anti_wedge__horizon(other, point_at_infinity__wedge__line_at_infinity(self_, line_at_origin__anti_dual(other)));
}

fn point_at_infinity__project_orthogonally_onto__motor(self_: PointAtInfinity, other: Motor) -> MultiVectorAtInfinity {
    return motor__anti_wedge__multi_vector_at_infinity(other, point_at_infinity__wedge__multi_vector_at_infinity(self_, motor__anti_dual(other)));
}

fn point_at_infinity__project_orthogonally_onto__multi_vector(self_: PointAtInfinity, other: MultiVector) -> MultiVectorAtInfinity {
    return multi_vector__anti_wedge__multi_vector_at_infinity(other, point_at_infinity__wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other)));
}

fn point_at_infinity__project_orthogonally_onto__multi_vector_at_origin(self_: PointAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__anti_wedge__multi_vector_at_infinity(other, point_at_infinity__wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other)));
}

fn point_at_infinity__project_orthogonally_onto__plane(self_: PointAtInfinity, other: Plane) -> PointAtInfinity {
    return plane__anti_wedge__line_at_infinity(other, point_at_infinity__wedge__point_at_infinity(self_, plane__anti_dual(other)));
}

fn point_at_infinity__project_orthogonally_onto__plane_at_origin(self_: PointAtInfinity, other: PlaneAtOrigin) -> PointAtInfinity {
    return plane_at_origin__anti_wedge__line_at_infinity(other, point_at_infinity__wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other)));
}

fn point_at_infinity__project_orthogonally_onto__rotor(self_: PointAtInfinity, other: Rotor) -> MultiVectorAtInfinity {
    return rotor__anti_wedge__multi_vector_at_infinity(other, point_at_infinity__wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other)));
}

fn point_at_infinity__project_orthogonally_onto__transflector(self_: PointAtInfinity, other: Transflector) -> PointAtInfinity {
    return transflector__anti_wedge__line_at_infinity(other, point_at_infinity__wedge__point_at_infinity(self_, transflector__anti_dual(other)));
}

fn rotor__project_orthogonally_onto__flector(self_: Rotor, other: Flector) -> MultiVector {
    return flector__anti_wedge__plane_at_origin(other, rotor__wedge__flector_at_infinity(self_, flector__anti_dual(other)));
}

fn rotor__project_orthogonally_onto__line(self_: Rotor, other: Line) -> Line {
    return line__anti_wedge__anti_scalar(other, rotor__wedge__line_at_infinity(self_, line__anti_dual(other)));
}

fn rotor__project_orthogonally_onto__line_at_origin(self_: Rotor, other: LineAtOrigin) -> LineAtOrigin {
    return line_at_origin__anti_wedge__anti_scalar(other, rotor__wedge__line_at_infinity(self_, line_at_origin__anti_dual(other)));
}

fn rotor__project_orthogonally_onto__motor(self_: Rotor, other: Motor) -> MultiVector {
    return motor__anti_wedge__multi_vector_at_origin(other, rotor__wedge__multi_vector_at_infinity(self_, motor__anti_dual(other)));
}

fn rotor__project_orthogonally_onto__multi_vector(self_: Rotor, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector_at_origin(other, rotor__wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other)));
}

fn rotor__project_orthogonally_onto__multi_vector_at_origin(self_: Rotor, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__anti_wedge__multi_vector_at_origin(other, rotor__wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other)));
}

fn rotor__project_orthogonally_onto__plane(self_: Rotor, other: Plane) -> Line {
    return plane__anti_wedge__plane_at_origin(other, rotor__wedge__point_at_infinity(self_, plane__anti_dual(other)));
}

fn rotor__project_orthogonally_onto__plane_at_origin(self_: Rotor, other: PlaneAtOrigin) -> LineAtOrigin {
    return plane_at_origin__anti_wedge__plane_at_origin(other, rotor__wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other)));
}

fn rotor__project_orthogonally_onto__rotor(self_: Rotor, other: Rotor) -> MultiVectorAtOrigin {
    return rotor__anti_wedge__multi_vector_at_origin(other, rotor__wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other)));
}

fn rotor__project_orthogonally_onto__transflector(self_: Rotor, other: Transflector) -> MultiVector {
    return transflector__anti_wedge__plane_at_origin(other, rotor__wedge__point_at_infinity(self_, transflector__anti_dual(other)));
}

fn transflector__project_orthogonally_onto__flector(self_: Transflector, other: Flector) -> Flector {
    return flector__anti_wedge__translator(other, transflector__wedge__flector_at_infinity(self_, flector__anti_dual(other)));
}

fn transflector__project_orthogonally_onto__line(self_: Transflector, other: Line) -> PointAtInfinity {
    return line__anti_wedge__horizon(other, transflector__wedge__line_at_infinity(self_, line__anti_dual(other)));
}

fn transflector__project_orthogonally_onto__line_at_origin(self_: Transflector, other: LineAtOrigin) -> PointAtInfinity {
    return line_at_origin__anti_wedge__horizon(other, transflector__wedge__line_at_infinity(self_, line_at_origin__anti_dual(other)));
}

fn transflector__project_orthogonally_onto__motor(self_: Transflector, other: Motor) -> MultiVector {
    return motor__anti_wedge__multi_vector(other, transflector__wedge__multi_vector_at_infinity(self_, motor__anti_dual(other)));
}

fn transflector__project_orthogonally_onto__multi_vector(self_: Transflector, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(other, transflector__wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other)));
}

fn transflector__project_orthogonally_onto__multi_vector_at_origin(self_: Transflector, other: MultiVectorAtOrigin) -> MultiVector {
    return multi_vector_at_origin__anti_wedge__multi_vector(other, transflector__wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other)));
}

fn transflector__project_orthogonally_onto__plane(self_: Transflector, other: Plane) -> Transflector {
    return plane__anti_wedge__translator(other, transflector__wedge__point_at_infinity(self_, plane__anti_dual(other)));
}

fn transflector__project_orthogonally_onto__plane_at_origin(self_: Transflector, other: PlaneAtOrigin) -> Transflector {
    return plane_at_origin__anti_wedge__translator(other, transflector__wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other)));
}

fn transflector__project_orthogonally_onto__rotor(self_: Transflector, other: Rotor) -> MultiVector {
    return rotor__anti_wedge__multi_vector(other, transflector__wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other)));
}

fn transflector__project_orthogonally_onto__transflector(self_: Transflector, other: Transflector) -> Transflector {
    return transflector__anti_wedge__translator(other, transflector__wedge__point_at_infinity(self_, transflector__anti_dual(other)));
}

fn translator__project_orthogonally_onto__flector(self_: Translator, other: Flector) -> MultiVectorAtInfinity {
    return flector__anti_wedge__horizon(other, translator__wedge__flector_at_infinity(self_, flector__anti_dual(other)));
}

fn translator__project_orthogonally_onto__motor(self_: Translator, other: Motor) -> MultiVector {
    return motor__anti_wedge__multi_vector(other, translator__wedge__multi_vector_at_infinity(self_, motor__anti_dual(other)));
}

fn translator__project_orthogonally_onto__multi_vector(self_: Translator, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector(other, translator__wedge__multi_vector_at_infinity(self_, multi_vector__anti_dual(other)));
}

fn translator__project_orthogonally_onto__multi_vector_at_origin(self_: Translator, other: MultiVectorAtOrigin) -> MultiVector {
    return multi_vector_at_origin__anti_wedge__multi_vector(other, translator__wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__anti_dual(other)));
}

fn translator__project_orthogonally_onto__plane(self_: Translator, other: Plane) -> LineAtInfinity {
    return plane__anti_wedge__horizon(other, translator__wedge__point_at_infinity(self_, plane__anti_dual(other)));
}

fn translator__project_orthogonally_onto__plane_at_origin(self_: Translator, other: PlaneAtOrigin) -> LineAtInfinity {
    return plane_at_origin__anti_wedge__horizon(other, translator__wedge__point_at_infinity(self_, plane_at_origin__anti_dual(other)));
}

fn translator__project_orthogonally_onto__rotor(self_: Translator, other: Rotor) -> MultiVector {
    return rotor__anti_wedge__multi_vector(other, translator__wedge__multi_vector_at_infinity(self_, rotor__anti_dual(other)));
}

fn translator__project_orthogonally_onto__transflector(self_: Translator, other: Transflector) -> LineAtInfinity {
    return transflector__anti_wedge__horizon(other, translator__wedge__point_at_infinity(self_, transflector__anti_dual(other)));
}

fn flector__project_via_origin_onto__flector(self_: Flector, other: Flector) -> Flector {
    return flector__anti_wedge__motor(other, flector__wedge__flector(self_, flector__dual(other)));
}

fn flector__project_via_origin_onto__flector_at_infinity(self_: Flector, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return flector_at_infinity__anti_wedge__motor(other, flector__wedge__flector(self_, flector_at_infinity__dual(other)));
}

fn flector__project_via_origin_onto__horizon(self_: Flector, other: Horizon) -> FlectorAtInfinity {
    return horizon__anti_wedge__rotor(other, flector__wedge__origin(self_, horizon__dual(other)));
}

fn flector__project_via_origin_onto__line(self_: Flector, other: Line) -> Point {
    return line__anti_wedge__plane_at_origin(other, flector__wedge__line_at_origin(self_, line__dual(other)));
}

fn flector__project_via_origin_onto__line_at_infinity(self_: Flector, other: LineAtInfinity) -> PointAtInfinity {
    return line_at_infinity__anti_wedge__plane_at_origin(other, flector__wedge__line_at_origin(self_, line_at_infinity__dual(other)));
}

fn flector__project_via_origin_onto__motor(self_: Flector, other: Motor) -> Flector {
    return motor__anti_wedge__plane_at_origin(other, flector__wedge__line_at_origin(self_, motor__dual(other)));
}

fn flector__project_via_origin_onto__multi_vector(self_: Flector, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector_at_origin(other, flector__wedge__multi_vector_at_origin(self_, multi_vector__dual(other)));
}

fn flector__project_via_origin_onto__multi_vector_at_infinity(self_: Flector, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__anti_wedge__multi_vector_at_origin(other, flector__wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other)));
}

fn flector__project_via_origin_onto__plane(self_: Flector, other: Plane) -> Flector {
    return plane__anti_wedge__rotor(other, flector__wedge__origin(self_, plane__dual(other)));
}

fn flector__project_via_origin_onto__point(self_: Flector, other: Point) -> Point {
    return point__anti_wedge__anti_scalar(other, flector__wedge__plane_at_origin(self_, point__dual(other)));
}

fn flector__project_via_origin_onto__point_at_infinity(self_: Flector, other: PointAtInfinity) -> PointAtInfinity {
    return point_at_infinity__anti_wedge__anti_scalar(other, flector__wedge__plane_at_origin(self_, point_at_infinity__dual(other)));
}

fn flector__project_via_origin_onto__transflector(self_: Flector, other: Transflector) -> Flector {
    return transflector__anti_wedge__motor(other, flector__wedge__flector(self_, transflector__dual(other)));
}

fn flector__project_via_origin_onto__translator(self_: Flector, other: Translator) -> Transflector {
    return translator__anti_wedge__plane_at_origin(other, flector__wedge__line_at_origin(self_, translator__dual(other)));
}

fn flector_at_infinity__project_via_origin_onto__flector(self_: FlectorAtInfinity, other: Flector) -> Flector {
    return flector__anti_wedge__motor(other, flector_at_infinity__wedge__flector(self_, flector__dual(other)));
}

fn flector_at_infinity__project_via_origin_onto__flector_at_infinity(self_: FlectorAtInfinity, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return flector_at_infinity__anti_wedge__motor(other, flector_at_infinity__wedge__flector(self_, flector_at_infinity__dual(other)));
}

fn flector_at_infinity__project_via_origin_onto__horizon(self_: FlectorAtInfinity, other: Horizon) -> FlectorAtInfinity {
    return horizon__anti_wedge__rotor(other, flector_at_infinity__wedge__origin(self_, horizon__dual(other)));
}

fn flector_at_infinity__project_via_origin_onto__line(self_: FlectorAtInfinity, other: Line) -> Point {
    return line__anti_wedge__plane_at_origin(other, flector_at_infinity__wedge__line_at_origin(self_, line__dual(other)));
}

fn flector_at_infinity__project_via_origin_onto__line_at_infinity(self_: FlectorAtInfinity, other: LineAtInfinity) -> PointAtInfinity {
    return line_at_infinity__anti_wedge__plane_at_origin(other, flector_at_infinity__wedge__line_at_origin(self_, line_at_infinity__dual(other)));
}

fn flector_at_infinity__project_via_origin_onto__motor(self_: FlectorAtInfinity, other: Motor) -> Flector {
    return motor__anti_wedge__plane_at_origin(other, flector_at_infinity__wedge__line_at_origin(self_, motor__dual(other)));
}

fn flector_at_infinity__project_via_origin_onto__multi_vector(self_: FlectorAtInfinity, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector_at_origin(other, flector_at_infinity__wedge__multi_vector_at_origin(self_, multi_vector__dual(other)));
}

fn flector_at_infinity__project_via_origin_onto__multi_vector_at_infinity(self_: FlectorAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__anti_wedge__multi_vector_at_origin(other, flector_at_infinity__wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other)));
}

fn flector_at_infinity__project_via_origin_onto__plane(self_: FlectorAtInfinity, other: Plane) -> Flector {
    return plane__anti_wedge__rotor(other, flector_at_infinity__wedge__origin(self_, plane__dual(other)));
}

fn flector_at_infinity__project_via_origin_onto__point(self_: FlectorAtInfinity, other: Point) -> Point {
    return point__anti_wedge__anti_scalar(other, flector_at_infinity__wedge__plane_at_origin(self_, point__dual(other)));
}

fn flector_at_infinity__project_via_origin_onto__point_at_infinity(self_: FlectorAtInfinity, other: PointAtInfinity) -> PointAtInfinity {
    return point_at_infinity__anti_wedge__anti_scalar(other, flector_at_infinity__wedge__plane_at_origin(self_, point_at_infinity__dual(other)));
}

fn flector_at_infinity__project_via_origin_onto__transflector(self_: FlectorAtInfinity, other: Transflector) -> Flector {
    return transflector__anti_wedge__motor(other, flector_at_infinity__wedge__flector(self_, transflector__dual(other)));
}

fn flector_at_infinity__project_via_origin_onto__translator(self_: FlectorAtInfinity, other: Translator) -> Transflector {
    return translator__anti_wedge__plane_at_origin(other, flector_at_infinity__wedge__line_at_origin(self_, translator__dual(other)));
}

fn horizon__project_via_origin_onto__flector(self_: Horizon, other: Flector) -> Flector {
    return flector__anti_wedge__anti_scalar(other, horizon__wedge__flector(self_, flector__dual(other)));
}

fn horizon__project_via_origin_onto__flector_at_infinity(self_: Horizon, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return flector_at_infinity__anti_wedge__anti_scalar(other, horizon__wedge__flector(self_, flector_at_infinity__dual(other)));
}

fn horizon__project_via_origin_onto__horizon(self_: Horizon, other: Horizon) -> Horizon {
    return horizon__anti_wedge__anti_scalar(other, horizon__wedge__origin(self_, horizon__dual(other)));
}

fn horizon__project_via_origin_onto__multi_vector(self_: Horizon, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__anti_scalar(other, horizon__wedge__multi_vector_at_origin(self_, multi_vector__dual(other)));
}

fn horizon__project_via_origin_onto__multi_vector_at_infinity(self_: Horizon, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__anti_wedge__anti_scalar(other, horizon__wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other)));
}

fn horizon__project_via_origin_onto__plane(self_: Horizon, other: Plane) -> Plane {
    return plane__anti_wedge__anti_scalar(other, horizon__wedge__origin(self_, plane__dual(other)));
}

fn horizon__project_via_origin_onto__transflector(self_: Horizon, other: Transflector) -> Transflector {
    return transflector__anti_wedge__anti_scalar(other, horizon__wedge__flector(self_, transflector__dual(other)));
}

fn line__project_via_origin_onto__flector(self_: Line, other: Flector) -> MultiVector {
    return flector__anti_wedge__plane(other, line__wedge__flector(self_, flector__dual(other)));
}

fn line__project_via_origin_onto__flector_at_infinity(self_: Line, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return flector_at_infinity__anti_wedge__plane(other, line__wedge__flector(self_, flector_at_infinity__dual(other)));
}

fn line__project_via_origin_onto__horizon(self_: Line, other: Horizon) -> LineAtInfinity {
    return horizon__anti_wedge__plane_at_origin(other, line__wedge__origin(self_, horizon__dual(other)));
}

fn line__project_via_origin_onto__line(self_: Line, other: Line) -> Line {
    return line__anti_wedge__anti_scalar(other, line__wedge__line_at_origin(self_, line__dual(other)));
}

fn line__project_via_origin_onto__line_at_infinity(self_: Line, other: LineAtInfinity) -> LineAtInfinity {
    return line_at_infinity__anti_wedge__anti_scalar(other, line__wedge__line_at_origin(self_, line_at_infinity__dual(other)));
}

fn line__project_via_origin_onto__motor(self_: Line, other: Motor) -> Motor {
    return motor__anti_wedge__anti_scalar(other, line__wedge__line_at_origin(self_, motor__dual(other)));
}

fn line__project_via_origin_onto__multi_vector(self_: Line, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector_at_origin(other, line__wedge__multi_vector_at_origin(self_, multi_vector__dual(other)));
}

fn line__project_via_origin_onto__multi_vector_at_infinity(self_: Line, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__anti_wedge__multi_vector_at_origin(other, line__wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other)));
}

fn line__project_via_origin_onto__plane(self_: Line, other: Plane) -> Line {
    return plane__anti_wedge__plane_at_origin(other, line__wedge__origin(self_, plane__dual(other)));
}

fn line__project_via_origin_onto__transflector(self_: Line, other: Transflector) -> MultiVector {
    return transflector__anti_wedge__plane(other, line__wedge__flector(self_, transflector__dual(other)));
}

fn line__project_via_origin_onto__translator(self_: Line, other: Translator) -> Translator {
    return translator__anti_wedge__anti_scalar(other, line__wedge__line_at_origin(self_, translator__dual(other)));
}

fn line_at_infinity__project_via_origin_onto__flector(self_: LineAtInfinity, other: Flector) -> MultiVector {
    return flector__anti_wedge__plane(other, line_at_infinity__wedge__flector(self_, flector__dual(other)));
}

fn line_at_infinity__project_via_origin_onto__flector_at_infinity(self_: LineAtInfinity, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return flector_at_infinity__anti_wedge__plane(other, line_at_infinity__wedge__flector(self_, flector_at_infinity__dual(other)));
}

fn line_at_infinity__project_via_origin_onto__horizon(self_: LineAtInfinity, other: Horizon) -> LineAtInfinity {
    return horizon__anti_wedge__plane_at_origin(other, line_at_infinity__wedge__origin(self_, horizon__dual(other)));
}

fn line_at_infinity__project_via_origin_onto__line(self_: LineAtInfinity, other: Line) -> Line {
    return line__anti_wedge__anti_scalar(other, line_at_infinity__wedge__line_at_origin(self_, line__dual(other)));
}

fn line_at_infinity__project_via_origin_onto__line_at_infinity(self_: LineAtInfinity, other: LineAtInfinity) -> LineAtInfinity {
    return line_at_infinity__anti_wedge__anti_scalar(other, line_at_infinity__wedge__line_at_origin(self_, line_at_infinity__dual(other)));
}

fn line_at_infinity__project_via_origin_onto__motor(self_: LineAtInfinity, other: Motor) -> Motor {
    return motor__anti_wedge__anti_scalar(other, line_at_infinity__wedge__line_at_origin(self_, motor__dual(other)));
}

fn line_at_infinity__project_via_origin_onto__multi_vector(self_: LineAtInfinity, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector_at_origin(other, line_at_infinity__wedge__multi_vector_at_origin(self_, multi_vector__dual(other)));
}

fn line_at_infinity__project_via_origin_onto__multi_vector_at_infinity(self_: LineAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__anti_wedge__multi_vector_at_origin(other, line_at_infinity__wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other)));
}

fn line_at_infinity__project_via_origin_onto__plane(self_: LineAtInfinity, other: Plane) -> Line {
    return plane__anti_wedge__plane_at_origin(other, line_at_infinity__wedge__origin(self_, plane__dual(other)));
}

fn line_at_infinity__project_via_origin_onto__transflector(self_: LineAtInfinity, other: Transflector) -> MultiVector {
    return transflector__anti_wedge__plane(other, line_at_infinity__wedge__flector(self_, transflector__dual(other)));
}

fn line_at_infinity__project_via_origin_onto__translator(self_: LineAtInfinity, other: Translator) -> Translator {
    return translator__anti_wedge__anti_scalar(other, line_at_infinity__wedge__line_at_origin(self_, translator__dual(other)));
}

fn line_at_origin__project_via_origin_onto__flector(self_: LineAtOrigin, other: Flector) -> MultiVector {
    return flector__anti_wedge__plane_at_origin(other, line_at_origin__wedge__flector(self_, flector__dual(other)));
}

fn line_at_origin__project_via_origin_onto__flector_at_infinity(self_: LineAtOrigin, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return flector_at_infinity__anti_wedge__plane_at_origin(other, line_at_origin__wedge__flector(self_, flector_at_infinity__dual(other)));
}

fn line_at_origin__project_via_origin_onto__transflector(self_: LineAtOrigin, other: Transflector) -> MultiVector {
    return transflector__anti_wedge__plane_at_origin(other, line_at_origin__wedge__flector(self_, transflector__dual(other)));
}

fn motor__project_via_origin_onto__flector(self_: Motor, other: Flector) -> MultiVector {
    return flector__anti_wedge__plane(other, motor__wedge__flector(self_, flector__dual(other)));
}

fn motor__project_via_origin_onto__flector_at_infinity(self_: Motor, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return flector_at_infinity__anti_wedge__plane(other, motor__wedge__flector(self_, flector_at_infinity__dual(other)));
}

fn motor__project_via_origin_onto__horizon(self_: Motor, other: Horizon) -> LineAtInfinity {
    return horizon__anti_wedge__plane_at_origin(other, motor__wedge__origin(self_, horizon__dual(other)));
}

fn motor__project_via_origin_onto__line(self_: Motor, other: Line) -> Line {
    return line__anti_wedge__anti_scalar(other, motor__wedge__line_at_origin(self_, line__dual(other)));
}

fn motor__project_via_origin_onto__line_at_infinity(self_: Motor, other: LineAtInfinity) -> LineAtInfinity {
    return line_at_infinity__anti_wedge__anti_scalar(other, motor__wedge__line_at_origin(self_, line_at_infinity__dual(other)));
}

fn motor__project_via_origin_onto__motor(self_: Motor, other: Motor) -> Motor {
    return motor__anti_wedge__anti_scalar(other, motor__wedge__line_at_origin(self_, motor__dual(other)));
}

fn motor__project_via_origin_onto__multi_vector(self_: Motor, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector_at_origin(other, motor__wedge__multi_vector_at_origin(self_, multi_vector__dual(other)));
}

fn motor__project_via_origin_onto__multi_vector_at_infinity(self_: Motor, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__anti_wedge__multi_vector_at_origin(other, motor__wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other)));
}

fn motor__project_via_origin_onto__plane(self_: Motor, other: Plane) -> Line {
    return plane__anti_wedge__plane_at_origin(other, motor__wedge__origin(self_, plane__dual(other)));
}

fn motor__project_via_origin_onto__transflector(self_: Motor, other: Transflector) -> MultiVector {
    return transflector__anti_wedge__plane(other, motor__wedge__flector(self_, transflector__dual(other)));
}

fn motor__project_via_origin_onto__translator(self_: Motor, other: Translator) -> Translator {
    return translator__anti_wedge__anti_scalar(other, motor__wedge__line_at_origin(self_, translator__dual(other)));
}

fn multi_vector__project_via_origin_onto__flector(self_: MultiVector, other: Flector) -> MultiVector {
    return flector__anti_wedge__multi_vector(other, multi_vector__wedge__flector(self_, flector__dual(other)));
}

fn multi_vector__project_via_origin_onto__flector_at_infinity(self_: MultiVector, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return flector_at_infinity__anti_wedge__multi_vector(other, multi_vector__wedge__flector(self_, flector_at_infinity__dual(other)));
}

fn multi_vector__project_via_origin_onto__horizon(self_: MultiVector, other: Horizon) -> MultiVectorAtInfinity {
    return horizon__anti_wedge__multi_vector_at_origin(other, multi_vector__wedge__origin(self_, horizon__dual(other)));
}

fn multi_vector__project_via_origin_onto__line(self_: MultiVector, other: Line) -> MultiVector {
    return line__anti_wedge__multi_vector_at_origin(other, multi_vector__wedge__line_at_origin(self_, line__dual(other)));
}

fn multi_vector__project_via_origin_onto__line_at_infinity(self_: MultiVector, other: LineAtInfinity) -> MultiVectorAtInfinity {
    return line_at_infinity__anti_wedge__multi_vector_at_origin(other, multi_vector__wedge__line_at_origin(self_, line_at_infinity__dual(other)));
}

fn multi_vector__project_via_origin_onto__motor(self_: MultiVector, other: Motor) -> MultiVector {
    return motor__anti_wedge__multi_vector_at_origin(other, multi_vector__wedge__line_at_origin(self_, motor__dual(other)));
}

fn multi_vector__project_via_origin_onto__multi_vector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector_at_origin(other, multi_vector__wedge__multi_vector_at_origin(self_, multi_vector__dual(other)));
}

fn multi_vector__project_via_origin_onto__multi_vector_at_infinity(self_: MultiVector, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__anti_wedge__multi_vector_at_origin(other, multi_vector__wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other)));
}

fn multi_vector__project_via_origin_onto__plane(self_: MultiVector, other: Plane) -> MultiVector {
    return plane__anti_wedge__multi_vector_at_origin(other, multi_vector__wedge__origin(self_, plane__dual(other)));
}

fn multi_vector__project_via_origin_onto__point(self_: MultiVector, other: Point) -> MultiVector {
    return point__anti_wedge__multi_vector_at_origin(other, multi_vector__wedge__plane_at_origin(self_, point__dual(other)));
}

fn multi_vector__project_via_origin_onto__point_at_infinity(self_: MultiVector, other: PointAtInfinity) -> MultiVectorAtInfinity {
    return point_at_infinity__anti_wedge__multi_vector_at_origin(other, multi_vector__wedge__plane_at_origin(self_, point_at_infinity__dual(other)));
}

fn multi_vector__project_via_origin_onto__transflector(self_: MultiVector, other: Transflector) -> MultiVector {
    return transflector__anti_wedge__multi_vector(other, multi_vector__wedge__flector(self_, transflector__dual(other)));
}

fn multi_vector__project_via_origin_onto__translator(self_: MultiVector, other: Translator) -> MultiVector {
    return translator__anti_wedge__multi_vector_at_origin(other, multi_vector__wedge__line_at_origin(self_, translator__dual(other)));
}

fn multi_vector_at_infinity__project_via_origin_onto__flector(self_: MultiVectorAtInfinity, other: Flector) -> MultiVector {
    return flector__anti_wedge__multi_vector(other, multi_vector_at_infinity__wedge__flector(self_, flector__dual(other)));
}

fn multi_vector_at_infinity__project_via_origin_onto__flector_at_infinity(self_: MultiVectorAtInfinity, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return flector_at_infinity__anti_wedge__multi_vector(other, multi_vector_at_infinity__wedge__flector(self_, flector_at_infinity__dual(other)));
}

fn multi_vector_at_infinity__project_via_origin_onto__horizon(self_: MultiVectorAtInfinity, other: Horizon) -> MultiVectorAtInfinity {
    return horizon__anti_wedge__multi_vector_at_origin(other, multi_vector_at_infinity__wedge__origin(self_, horizon__dual(other)));
}

fn multi_vector_at_infinity__project_via_origin_onto__line(self_: MultiVectorAtInfinity, other: Line) -> MultiVector {
    return line__anti_wedge__multi_vector_at_origin(other, multi_vector_at_infinity__wedge__line_at_origin(self_, line__dual(other)));
}

fn multi_vector_at_infinity__project_via_origin_onto__line_at_infinity(self_: MultiVectorAtInfinity, other: LineAtInfinity) -> MultiVectorAtInfinity {
    return line_at_infinity__anti_wedge__multi_vector_at_origin(other, multi_vector_at_infinity__wedge__line_at_origin(self_, line_at_infinity__dual(other)));
}

fn multi_vector_at_infinity__project_via_origin_onto__motor(self_: MultiVectorAtInfinity, other: Motor) -> MultiVector {
    return motor__anti_wedge__multi_vector_at_origin(other, multi_vector_at_infinity__wedge__line_at_origin(self_, motor__dual(other)));
}

fn multi_vector_at_infinity__project_via_origin_onto__multi_vector(self_: MultiVectorAtInfinity, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector_at_origin(other, multi_vector_at_infinity__wedge__multi_vector_at_origin(self_, multi_vector__dual(other)));
}

fn multi_vector_at_infinity__project_via_origin_onto__multi_vector_at_infinity(self_: MultiVectorAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__anti_wedge__multi_vector_at_origin(other, multi_vector_at_infinity__wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other)));
}

fn multi_vector_at_infinity__project_via_origin_onto__plane(self_: MultiVectorAtInfinity, other: Plane) -> MultiVector {
    return plane__anti_wedge__multi_vector_at_origin(other, multi_vector_at_infinity__wedge__origin(self_, plane__dual(other)));
}

fn multi_vector_at_infinity__project_via_origin_onto__point(self_: MultiVectorAtInfinity, other: Point) -> MultiVector {
    return point__anti_wedge__multi_vector_at_origin(other, multi_vector_at_infinity__wedge__plane_at_origin(self_, point__dual(other)));
}

fn multi_vector_at_infinity__project_via_origin_onto__point_at_infinity(self_: MultiVectorAtInfinity, other: PointAtInfinity) -> MultiVectorAtInfinity {
    return point_at_infinity__anti_wedge__multi_vector_at_origin(other, multi_vector_at_infinity__wedge__plane_at_origin(self_, point_at_infinity__dual(other)));
}

fn multi_vector_at_infinity__project_via_origin_onto__transflector(self_: MultiVectorAtInfinity, other: Transflector) -> MultiVector {
    return transflector__anti_wedge__multi_vector(other, multi_vector_at_infinity__wedge__flector(self_, transflector__dual(other)));
}

fn multi_vector_at_infinity__project_via_origin_onto__translator(self_: MultiVectorAtInfinity, other: Translator) -> MultiVector {
    return translator__anti_wedge__multi_vector_at_origin(other, multi_vector_at_infinity__wedge__line_at_origin(self_, translator__dual(other)));
}

fn multi_vector_at_origin__project_via_origin_onto__flector(self_: MultiVectorAtOrigin, other: Flector) -> MultiVector {
    return flector__anti_wedge__multi_vector_at_origin(other, multi_vector_at_origin__wedge__flector(self_, flector__dual(other)));
}

fn multi_vector_at_origin__project_via_origin_onto__flector_at_infinity(self_: MultiVectorAtOrigin, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return flector_at_infinity__anti_wedge__multi_vector_at_origin(other, multi_vector_at_origin__wedge__flector(self_, flector_at_infinity__dual(other)));
}

fn multi_vector_at_origin__project_via_origin_onto__transflector(self_: MultiVectorAtOrigin, other: Transflector) -> MultiVector {
    return transflector__anti_wedge__multi_vector_at_origin(other, multi_vector_at_origin__wedge__flector(self_, transflector__dual(other)));
}

fn origin__project_via_origin_onto__flector(self_: Origin, other: Flector) -> Flector {
    return flector__anti_wedge__rotor(other, origin__wedge__flector(self_, flector__dual(other)));
}

fn origin__project_via_origin_onto__flector_at_infinity(self_: Origin, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return flector_at_infinity__anti_wedge__rotor(other, origin__wedge__flector(self_, flector_at_infinity__dual(other)));
}

fn origin__project_via_origin_onto__transflector(self_: Origin, other: Transflector) -> Flector {
    return transflector__anti_wedge__rotor(other, origin__wedge__flector(self_, transflector__dual(other)));
}

fn plane__project_via_origin_onto__flector(self_: Plane, other: Flector) -> Flector {
    return flector__anti_wedge__anti_scalar(other, plane__wedge__flector(self_, flector__dual(other)));
}

fn plane__project_via_origin_onto__flector_at_infinity(self_: Plane, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return flector_at_infinity__anti_wedge__anti_scalar(other, plane__wedge__flector(self_, flector_at_infinity__dual(other)));
}

fn plane__project_via_origin_onto__horizon(self_: Plane, other: Horizon) -> Horizon {
    return horizon__anti_wedge__anti_scalar(other, plane__wedge__origin(self_, horizon__dual(other)));
}

fn plane__project_via_origin_onto__multi_vector(self_: Plane, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__anti_scalar(other, plane__wedge__multi_vector_at_origin(self_, multi_vector__dual(other)));
}

fn plane__project_via_origin_onto__multi_vector_at_infinity(self_: Plane, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__anti_wedge__anti_scalar(other, plane__wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other)));
}

fn plane__project_via_origin_onto__plane(self_: Plane, other: Plane) -> Plane {
    return plane__anti_wedge__anti_scalar(other, plane__wedge__origin(self_, plane__dual(other)));
}

fn plane__project_via_origin_onto__transflector(self_: Plane, other: Transflector) -> Transflector {
    return transflector__anti_wedge__anti_scalar(other, plane__wedge__flector(self_, transflector__dual(other)));
}

fn plane_at_origin__project_via_origin_onto__flector(self_: PlaneAtOrigin, other: Flector) -> Flector {
    return flector__anti_wedge__anti_scalar(other, plane_at_origin__wedge__flector(self_, flector__dual(other)));
}

fn plane_at_origin__project_via_origin_onto__flector_at_infinity(self_: PlaneAtOrigin, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return flector_at_infinity__anti_wedge__anti_scalar(other, plane_at_origin__wedge__flector(self_, flector_at_infinity__dual(other)));
}

fn plane_at_origin__project_via_origin_onto__transflector(self_: PlaneAtOrigin, other: Transflector) -> Transflector {
    return transflector__anti_wedge__anti_scalar(other, plane_at_origin__wedge__flector(self_, transflector__dual(other)));
}

fn point__project_via_origin_onto__flector(self_: Point, other: Flector) -> Flector {
    return flector__anti_wedge__motor(other, point__wedge__flector(self_, flector__dual(other)));
}

fn point__project_via_origin_onto__flector_at_infinity(self_: Point, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return flector_at_infinity__anti_wedge__motor(other, point__wedge__flector(self_, flector_at_infinity__dual(other)));
}

fn point__project_via_origin_onto__horizon(self_: Point, other: Horizon) -> PointAtInfinity {
    return horizon__anti_wedge__line_at_origin(other, point__wedge__origin(self_, horizon__dual(other)));
}

fn point__project_via_origin_onto__line(self_: Point, other: Line) -> Point {
    return line__anti_wedge__plane_at_origin(other, point__wedge__line_at_origin(self_, line__dual(other)));
}

fn point__project_via_origin_onto__line_at_infinity(self_: Point, other: LineAtInfinity) -> PointAtInfinity {
    return line_at_infinity__anti_wedge__plane_at_origin(other, point__wedge__line_at_origin(self_, line_at_infinity__dual(other)));
}

fn point__project_via_origin_onto__motor(self_: Point, other: Motor) -> Flector {
    return motor__anti_wedge__plane_at_origin(other, point__wedge__line_at_origin(self_, motor__dual(other)));
}

fn point__project_via_origin_onto__multi_vector(self_: Point, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector_at_origin(other, point__wedge__multi_vector_at_origin(self_, multi_vector__dual(other)));
}

fn point__project_via_origin_onto__multi_vector_at_infinity(self_: Point, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__anti_wedge__multi_vector_at_origin(other, point__wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other)));
}

fn point__project_via_origin_onto__plane(self_: Point, other: Plane) -> Point {
    return plane__anti_wedge__line_at_origin(other, point__wedge__origin(self_, plane__dual(other)));
}

fn point__project_via_origin_onto__point(self_: Point, other: Point) -> Point {
    return point__anti_wedge__anti_scalar(other, point__wedge__plane_at_origin(self_, point__dual(other)));
}

fn point__project_via_origin_onto__point_at_infinity(self_: Point, other: PointAtInfinity) -> PointAtInfinity {
    return point_at_infinity__anti_wedge__anti_scalar(other, point__wedge__plane_at_origin(self_, point_at_infinity__dual(other)));
}

fn point__project_via_origin_onto__transflector(self_: Point, other: Transflector) -> Flector {
    return transflector__anti_wedge__motor(other, point__wedge__flector(self_, transflector__dual(other)));
}

fn point__project_via_origin_onto__translator(self_: Point, other: Translator) -> Transflector {
    return translator__anti_wedge__plane_at_origin(other, point__wedge__line_at_origin(self_, translator__dual(other)));
}

fn point_at_infinity__project_via_origin_onto__flector(self_: PointAtInfinity, other: Flector) -> Flector {
    return flector__anti_wedge__motor(other, point_at_infinity__wedge__flector(self_, flector__dual(other)));
}

fn point_at_infinity__project_via_origin_onto__flector_at_infinity(self_: PointAtInfinity, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return flector_at_infinity__anti_wedge__motor(other, point_at_infinity__wedge__flector(self_, flector_at_infinity__dual(other)));
}

fn point_at_infinity__project_via_origin_onto__horizon(self_: PointAtInfinity, other: Horizon) -> PointAtInfinity {
    return horizon__anti_wedge__line_at_origin(other, point_at_infinity__wedge__origin(self_, horizon__dual(other)));
}

fn point_at_infinity__project_via_origin_onto__line(self_: PointAtInfinity, other: Line) -> Point {
    return line__anti_wedge__plane_at_origin(other, point_at_infinity__wedge__line_at_origin(self_, line__dual(other)));
}

fn point_at_infinity__project_via_origin_onto__line_at_infinity(self_: PointAtInfinity, other: LineAtInfinity) -> PointAtInfinity {
    return line_at_infinity__anti_wedge__plane_at_origin(other, point_at_infinity__wedge__line_at_origin(self_, line_at_infinity__dual(other)));
}

fn point_at_infinity__project_via_origin_onto__motor(self_: PointAtInfinity, other: Motor) -> Flector {
    return motor__anti_wedge__plane_at_origin(other, point_at_infinity__wedge__line_at_origin(self_, motor__dual(other)));
}

fn point_at_infinity__project_via_origin_onto__multi_vector(self_: PointAtInfinity, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector_at_origin(other, point_at_infinity__wedge__multi_vector_at_origin(self_, multi_vector__dual(other)));
}

fn point_at_infinity__project_via_origin_onto__multi_vector_at_infinity(self_: PointAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__anti_wedge__multi_vector_at_origin(other, point_at_infinity__wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other)));
}

fn point_at_infinity__project_via_origin_onto__plane(self_: PointAtInfinity, other: Plane) -> Point {
    return plane__anti_wedge__line_at_origin(other, point_at_infinity__wedge__origin(self_, plane__dual(other)));
}

fn point_at_infinity__project_via_origin_onto__point(self_: PointAtInfinity, other: Point) -> Point {
    return point__anti_wedge__anti_scalar(other, point_at_infinity__wedge__plane_at_origin(self_, point__dual(other)));
}

fn point_at_infinity__project_via_origin_onto__point_at_infinity(self_: PointAtInfinity, other: PointAtInfinity) -> PointAtInfinity {
    return point_at_infinity__anti_wedge__anti_scalar(other, point_at_infinity__wedge__plane_at_origin(self_, point_at_infinity__dual(other)));
}

fn point_at_infinity__project_via_origin_onto__transflector(self_: PointAtInfinity, other: Transflector) -> Flector {
    return transflector__anti_wedge__motor(other, point_at_infinity__wedge__flector(self_, transflector__dual(other)));
}

fn point_at_infinity__project_via_origin_onto__translator(self_: PointAtInfinity, other: Translator) -> Transflector {
    return translator__anti_wedge__plane_at_origin(other, point_at_infinity__wedge__line_at_origin(self_, translator__dual(other)));
}

fn rotor__project_via_origin_onto__flector(self_: Rotor, other: Flector) -> MultiVector {
    return flector__anti_wedge__plane_at_origin(other, rotor__wedge__flector(self_, flector__dual(other)));
}

fn rotor__project_via_origin_onto__flector_at_infinity(self_: Rotor, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return flector_at_infinity__anti_wedge__plane_at_origin(other, rotor__wedge__flector(self_, flector_at_infinity__dual(other)));
}

fn rotor__project_via_origin_onto__transflector(self_: Rotor, other: Transflector) -> MultiVector {
    return transflector__anti_wedge__plane_at_origin(other, rotor__wedge__flector(self_, transflector__dual(other)));
}

fn transflector__project_via_origin_onto__flector(self_: Transflector, other: Flector) -> Flector {
    return flector__anti_wedge__motor(other, transflector__wedge__flector(self_, flector__dual(other)));
}

fn transflector__project_via_origin_onto__flector_at_infinity(self_: Transflector, other: FlectorAtInfinity) -> FlectorAtInfinity {
    return flector_at_infinity__anti_wedge__motor(other, transflector__wedge__flector(self_, flector_at_infinity__dual(other)));
}

fn transflector__project_via_origin_onto__horizon(self_: Transflector, other: Horizon) -> FlectorAtInfinity {
    return horizon__anti_wedge__rotor(other, transflector__wedge__origin(self_, horizon__dual(other)));
}

fn transflector__project_via_origin_onto__line(self_: Transflector, other: Line) -> Point {
    return line__anti_wedge__plane_at_origin(other, transflector__wedge__line_at_origin(self_, line__dual(other)));
}

fn transflector__project_via_origin_onto__line_at_infinity(self_: Transflector, other: LineAtInfinity) -> PointAtInfinity {
    return line_at_infinity__anti_wedge__plane_at_origin(other, transflector__wedge__line_at_origin(self_, line_at_infinity__dual(other)));
}

fn transflector__project_via_origin_onto__motor(self_: Transflector, other: Motor) -> Flector {
    return motor__anti_wedge__plane_at_origin(other, transflector__wedge__line_at_origin(self_, motor__dual(other)));
}

fn transflector__project_via_origin_onto__multi_vector(self_: Transflector, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector_at_origin(other, transflector__wedge__multi_vector_at_origin(self_, multi_vector__dual(other)));
}

fn transflector__project_via_origin_onto__multi_vector_at_infinity(self_: Transflector, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__anti_wedge__multi_vector_at_origin(other, transflector__wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other)));
}

fn transflector__project_via_origin_onto__plane(self_: Transflector, other: Plane) -> Flector {
    return plane__anti_wedge__rotor(other, transflector__wedge__origin(self_, plane__dual(other)));
}

fn transflector__project_via_origin_onto__point(self_: Transflector, other: Point) -> Point {
    return point__anti_wedge__anti_scalar(other, transflector__wedge__plane_at_origin(self_, point__dual(other)));
}

fn transflector__project_via_origin_onto__point_at_infinity(self_: Transflector, other: PointAtInfinity) -> PointAtInfinity {
    return point_at_infinity__anti_wedge__anti_scalar(other, transflector__wedge__plane_at_origin(self_, point_at_infinity__dual(other)));
}

fn transflector__project_via_origin_onto__transflector(self_: Transflector, other: Transflector) -> Flector {
    return transflector__anti_wedge__motor(other, transflector__wedge__flector(self_, transflector__dual(other)));
}

fn transflector__project_via_origin_onto__translator(self_: Transflector, other: Translator) -> Transflector {
    return translator__anti_wedge__plane_at_origin(other, transflector__wedge__line_at_origin(self_, translator__dual(other)));
}

fn translator__project_via_origin_onto__flector(self_: Translator, other: Flector) -> MultiVector {
    return flector__anti_wedge__plane(other, translator__wedge__flector(self_, flector__dual(other)));
}

fn translator__project_via_origin_onto__flector_at_infinity(self_: Translator, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return flector_at_infinity__anti_wedge__plane(other, translator__wedge__flector(self_, flector_at_infinity__dual(other)));
}

fn translator__project_via_origin_onto__horizon(self_: Translator, other: Horizon) -> LineAtInfinity {
    return horizon__anti_wedge__plane_at_origin(other, translator__wedge__origin(self_, horizon__dual(other)));
}

fn translator__project_via_origin_onto__line(self_: Translator, other: Line) -> Line {
    return line__anti_wedge__anti_scalar(other, translator__wedge__line_at_origin(self_, line__dual(other)));
}

fn translator__project_via_origin_onto__line_at_infinity(self_: Translator, other: LineAtInfinity) -> LineAtInfinity {
    return line_at_infinity__anti_wedge__anti_scalar(other, translator__wedge__line_at_origin(self_, line_at_infinity__dual(other)));
}

fn translator__project_via_origin_onto__motor(self_: Translator, other: Motor) -> Motor {
    return motor__anti_wedge__anti_scalar(other, translator__wedge__line_at_origin(self_, motor__dual(other)));
}

fn translator__project_via_origin_onto__multi_vector(self_: Translator, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector_at_origin(other, translator__wedge__multi_vector_at_origin(self_, multi_vector__dual(other)));
}

fn translator__project_via_origin_onto__multi_vector_at_infinity(self_: Translator, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__anti_wedge__multi_vector_at_origin(other, translator__wedge__multi_vector_at_origin(self_, multi_vector_at_infinity__dual(other)));
}

fn translator__project_via_origin_onto__plane(self_: Translator, other: Plane) -> Line {
    return plane__anti_wedge__plane_at_origin(other, translator__wedge__origin(self_, plane__dual(other)));
}

fn translator__project_via_origin_onto__transflector(self_: Translator, other: Transflector) -> MultiVector {
    return transflector__anti_wedge__plane(other, translator__wedge__flector(self_, transflector__dual(other)));
}

fn translator__project_via_origin_onto__translator(self_: Translator, other: Translator) -> Translator {
    return translator__anti_wedge__anti_scalar(other, translator__wedge__line_at_origin(self_, translator__dual(other)));
}

fn flector__anti_reject_orthogonally_from__flector(self_: Flector, other: Flector) -> FlectorAtInfinity {
    return motor__anti_wedge__flector_at_infinity(flector__wedge__flector(self_, other), flector__anti_dual(other));
}

fn flector__anti_reject_orthogonally_from__line(self_: Flector, other: Line) -> PointAtInfinity {
    return plane__anti_wedge__line_at_infinity(flector__wedge__line(self_, other), line__anti_dual(other));
}

fn flector__anti_reject_orthogonally_from__line_at_origin(self_: Flector, other: LineAtOrigin) -> PointAtInfinity {
    return plane_at_origin__anti_wedge__line_at_infinity(flector__wedge__line_at_origin(self_, other), line_at_origin__anti_dual(other));
}

fn flector__anti_reject_orthogonally_from__motor(self_: Flector, other: Motor) -> MultiVectorAtInfinity {
    return plane__anti_wedge__multi_vector_at_infinity(flector__wedge__motor(self_, other), motor__anti_dual(other));
}

fn flector__anti_reject_orthogonally_from__multi_vector(self_: Flector, other: MultiVector) -> MultiVectorAtInfinity {
    return multi_vector__anti_wedge__multi_vector_at_infinity(flector__wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn flector__anti_reject_orthogonally_from__multi_vector_at_origin(self_: Flector, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__anti_wedge__multi_vector_at_infinity(flector__wedge__multi_vector_at_origin(self_, other), multi_vector_at_origin__anti_dual(other));
}

fn flector__anti_reject_orthogonally_from__origin(self_: Flector, other: Origin) -> FlectorAtInfinity {
    return rotor__anti_wedge__horizon(flector__wedge__origin(self_, other), origin__anti_dual(other));
}

fn flector__anti_reject_orthogonally_from__plane(self_: Flector, other: Plane) -> PointAtInfinity {
    return anti_scalar__anti_wedge__point_at_infinity(flector__wedge__plane(self_, other), plane__anti_dual(other));
}

fn flector__anti_reject_orthogonally_from__plane_at_origin(self_: Flector, other: PlaneAtOrigin) -> PointAtInfinity {
    return anti_scalar__anti_wedge__point_at_infinity(flector__wedge__plane_at_origin(self_, other), plane_at_origin__anti_dual(other));
}

fn flector__anti_reject_orthogonally_from__point(self_: Flector, other: Point) -> FlectorAtInfinity {
    return motor__anti_wedge__horizon(flector__wedge__point(self_, other), point__anti_dual(other));
}

fn flector__anti_reject_orthogonally_from__rotor(self_: Flector, other: Rotor) -> MultiVectorAtInfinity {
    return plane_at_origin__anti_wedge__multi_vector_at_infinity(flector__wedge__rotor(self_, other), rotor__anti_dual(other));
}

fn flector__anti_reject_orthogonally_from__transflector(self_: Flector, other: Transflector) -> PointAtInfinity {
    return motor__anti_wedge__point_at_infinity(flector__wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn flector_at_infinity__anti_reject_orthogonally_from__flector(self_: FlectorAtInfinity, other: Flector) -> FlectorAtInfinity {
    return motor__anti_wedge__flector_at_infinity(flector_at_infinity__wedge__flector(self_, other), flector__anti_dual(other));
}

fn flector_at_infinity__anti_reject_orthogonally_from__line(self_: FlectorAtInfinity, other: Line) -> PointAtInfinity {
    return plane__anti_wedge__line_at_infinity(flector_at_infinity__wedge__line(self_, other), line__anti_dual(other));
}

fn flector_at_infinity__anti_reject_orthogonally_from__line_at_origin(self_: FlectorAtInfinity, other: LineAtOrigin) -> PointAtInfinity {
    return plane_at_origin__anti_wedge__line_at_infinity(flector_at_infinity__wedge__line_at_origin(self_, other), line_at_origin__anti_dual(other));
}

fn flector_at_infinity__anti_reject_orthogonally_from__motor(self_: FlectorAtInfinity, other: Motor) -> MultiVectorAtInfinity {
    return plane__anti_wedge__multi_vector_at_infinity(flector_at_infinity__wedge__motor(self_, other), motor__anti_dual(other));
}

fn flector_at_infinity__anti_reject_orthogonally_from__multi_vector(self_: FlectorAtInfinity, other: MultiVector) -> MultiVectorAtInfinity {
    return multi_vector__anti_wedge__multi_vector_at_infinity(flector_at_infinity__wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn flector_at_infinity__anti_reject_orthogonally_from__multi_vector_at_origin(self_: FlectorAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__anti_wedge__multi_vector_at_infinity(flector_at_infinity__wedge__multi_vector_at_origin(self_, other), multi_vector_at_origin__anti_dual(other));
}

fn flector_at_infinity__anti_reject_orthogonally_from__origin(self_: FlectorAtInfinity, other: Origin) -> FlectorAtInfinity {
    return rotor__anti_wedge__horizon(flector_at_infinity__wedge__origin(self_, other), origin__anti_dual(other));
}

fn flector_at_infinity__anti_reject_orthogonally_from__plane(self_: FlectorAtInfinity, other: Plane) -> PointAtInfinity {
    return anti_scalar__anti_wedge__point_at_infinity(flector_at_infinity__wedge__plane(self_, other), plane__anti_dual(other));
}

fn flector_at_infinity__anti_reject_orthogonally_from__plane_at_origin(self_: FlectorAtInfinity, other: PlaneAtOrigin) -> PointAtInfinity {
    return anti_scalar__anti_wedge__point_at_infinity(flector_at_infinity__wedge__plane_at_origin(self_, other), plane_at_origin__anti_dual(other));
}

fn flector_at_infinity__anti_reject_orthogonally_from__point(self_: FlectorAtInfinity, other: Point) -> FlectorAtInfinity {
    return motor__anti_wedge__horizon(flector_at_infinity__wedge__point(self_, other), point__anti_dual(other));
}

fn flector_at_infinity__anti_reject_orthogonally_from__rotor(self_: FlectorAtInfinity, other: Rotor) -> MultiVectorAtInfinity {
    return plane_at_origin__anti_wedge__multi_vector_at_infinity(flector_at_infinity__wedge__rotor(self_, other), rotor__anti_dual(other));
}

fn flector_at_infinity__anti_reject_orthogonally_from__transflector(self_: FlectorAtInfinity, other: Transflector) -> PointAtInfinity {
    return translator__anti_wedge__point_at_infinity(flector_at_infinity__wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn horizon__anti_reject_orthogonally_from__flector(self_: Horizon, other: Flector) -> FlectorAtInfinity {
    return anti_scalar__anti_wedge__flector_at_infinity(horizon__wedge__flector(self_, other), flector__anti_dual(other));
}

fn horizon__anti_reject_orthogonally_from__multi_vector(self_: Horizon, other: MultiVector) -> MultiVectorAtInfinity {
    return multi_vector__anti_wedge__multi_vector_at_infinity(horizon__wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn horizon__anti_reject_orthogonally_from__multi_vector_at_origin(self_: Horizon, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return anti_scalar__anti_wedge__multi_vector_at_infinity(horizon__wedge__multi_vector_at_origin(self_, other), multi_vector_at_origin__anti_dual(other));
}

fn horizon__anti_reject_orthogonally_from__origin(self_: Horizon, other: Origin) -> Horizon {
    return anti_scalar__anti_wedge__horizon(horizon__wedge__origin(self_, other), origin__anti_dual(other));
}

fn horizon__anti_reject_orthogonally_from__point(self_: Horizon, other: Point) -> Horizon {
    return anti_scalar__anti_wedge__horizon(horizon__wedge__point(self_, other), point__anti_dual(other));
}

fn line__anti_reject_orthogonally_from__flector(self_: Line, other: Flector) -> MultiVectorAtInfinity {
    return plane__anti_wedge__flector_at_infinity(line__wedge__flector(self_, other), flector__anti_dual(other));
}

fn line__anti_reject_orthogonally_from__line(self_: Line, other: Line) -> LineAtInfinity {
    return anti_scalar__anti_wedge__line_at_infinity(line__wedge__line(self_, other), line__anti_dual(other));
}

fn line__anti_reject_orthogonally_from__line_at_origin(self_: Line, other: LineAtOrigin) -> LineAtInfinity {
    return anti_scalar__anti_wedge__line_at_infinity(line__wedge__line_at_origin(self_, other), line_at_origin__anti_dual(other));
}

fn line__anti_reject_orthogonally_from__motor(self_: Line, other: Motor) -> MultiVectorAtInfinity {
    return anti_scalar__anti_wedge__multi_vector_at_infinity(line__wedge__motor(self_, other), motor__anti_dual(other));
}

fn line__anti_reject_orthogonally_from__multi_vector(self_: Line, other: MultiVector) -> MultiVectorAtInfinity {
    return multi_vector__anti_wedge__multi_vector_at_infinity(line__wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn line__anti_reject_orthogonally_from__multi_vector_at_origin(self_: Line, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__anti_wedge__multi_vector_at_infinity(line__wedge__multi_vector_at_origin(self_, other), multi_vector_at_origin__anti_dual(other));
}

fn line__anti_reject_orthogonally_from__origin(self_: Line, other: Origin) -> LineAtInfinity {
    return plane_at_origin__anti_wedge__horizon(line__wedge__origin(self_, other), origin__anti_dual(other));
}

fn line__anti_reject_orthogonally_from__point(self_: Line, other: Point) -> LineAtInfinity {
    return plane__anti_wedge__horizon(line__wedge__point(self_, other), point__anti_dual(other));
}

fn line__anti_reject_orthogonally_from__rotor(self_: Line, other: Rotor) -> MultiVectorAtInfinity {
    return anti_scalar__anti_wedge__multi_vector_at_infinity(line__wedge__rotor(self_, other), rotor__anti_dual(other));
}

fn line__anti_reject_orthogonally_from__transflector(self_: Line, other: Transflector) -> Scalar {
    return plane__anti_wedge__point_at_infinity(line__wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn line_at_infinity__anti_reject_orthogonally_from__flector(self_: LineAtInfinity, other: Flector) -> MultiVectorAtInfinity {
    return plane__anti_wedge__flector_at_infinity(line_at_infinity__wedge__flector(self_, other), flector__anti_dual(other));
}

fn line_at_infinity__anti_reject_orthogonally_from__line(self_: LineAtInfinity, other: Line) -> LineAtInfinity {
    return anti_scalar__anti_wedge__line_at_infinity(line_at_infinity__wedge__line(self_, other), line__anti_dual(other));
}

fn line_at_infinity__anti_reject_orthogonally_from__line_at_origin(self_: LineAtInfinity, other: LineAtOrigin) -> LineAtInfinity {
    return anti_scalar__anti_wedge__line_at_infinity(line_at_infinity__wedge__line_at_origin(self_, other), line_at_origin__anti_dual(other));
}

fn line_at_infinity__anti_reject_orthogonally_from__motor(self_: LineAtInfinity, other: Motor) -> MultiVectorAtInfinity {
    return anti_scalar__anti_wedge__multi_vector_at_infinity(line_at_infinity__wedge__motor(self_, other), motor__anti_dual(other));
}

fn line_at_infinity__anti_reject_orthogonally_from__multi_vector(self_: LineAtInfinity, other: MultiVector) -> MultiVectorAtInfinity {
    return multi_vector__anti_wedge__multi_vector_at_infinity(line_at_infinity__wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn line_at_infinity__anti_reject_orthogonally_from__multi_vector_at_origin(self_: LineAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__anti_wedge__multi_vector_at_infinity(line_at_infinity__wedge__multi_vector_at_origin(self_, other), multi_vector_at_origin__anti_dual(other));
}

fn line_at_infinity__anti_reject_orthogonally_from__origin(self_: LineAtInfinity, other: Origin) -> LineAtInfinity {
    return plane_at_origin__anti_wedge__horizon(line_at_infinity__wedge__origin(self_, other), origin__anti_dual(other));
}

fn line_at_infinity__anti_reject_orthogonally_from__point(self_: LineAtInfinity, other: Point) -> LineAtInfinity {
    return plane__anti_wedge__horizon(line_at_infinity__wedge__point(self_, other), point__anti_dual(other));
}

fn line_at_infinity__anti_reject_orthogonally_from__rotor(self_: LineAtInfinity, other: Rotor) -> MultiVectorAtInfinity {
    return anti_scalar__anti_wedge__multi_vector_at_infinity(line_at_infinity__wedge__rotor(self_, other), rotor__anti_dual(other));
}

fn line_at_origin__anti_reject_orthogonally_from__flector(self_: LineAtOrigin, other: Flector) -> MultiVectorAtInfinity {
    return plane_at_origin__anti_wedge__flector_at_infinity(line_at_origin__wedge__flector(self_, other), flector__anti_dual(other));
}

fn line_at_origin__anti_reject_orthogonally_from__line(self_: LineAtOrigin, other: Line) -> LineAtInfinity {
    return anti_scalar__anti_wedge__line_at_infinity(line_at_origin__wedge__line(self_, other), line__anti_dual(other));
}

fn line_at_origin__anti_reject_orthogonally_from__motor(self_: LineAtOrigin, other: Motor) -> MultiVectorAtInfinity {
    return anti_scalar__anti_wedge__multi_vector_at_infinity(line_at_origin__wedge__motor(self_, other), motor__anti_dual(other));
}

fn line_at_origin__anti_reject_orthogonally_from__multi_vector(self_: LineAtOrigin, other: MultiVector) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__anti_wedge__multi_vector_at_infinity(line_at_origin__wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn line_at_origin__anti_reject_orthogonally_from__point(self_: LineAtOrigin, other: Point) -> LineAtInfinity {
    return plane_at_origin__anti_wedge__horizon(line_at_origin__wedge__point(self_, other), point__anti_dual(other));
}

fn line_at_origin__anti_reject_orthogonally_from__transflector(self_: LineAtOrigin, other: Transflector) -> Scalar {
    return plane_at_origin__anti_wedge__point_at_infinity(line_at_origin__wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn motor__anti_reject_orthogonally_from__flector(self_: Motor, other: Flector) -> MultiVectorAtInfinity {
    return plane__anti_wedge__flector_at_infinity(motor__wedge__flector(self_, other), flector__anti_dual(other));
}

fn motor__anti_reject_orthogonally_from__line(self_: Motor, other: Line) -> LineAtInfinity {
    return anti_scalar__anti_wedge__line_at_infinity(motor__wedge__line(self_, other), line__anti_dual(other));
}

fn motor__anti_reject_orthogonally_from__line_at_origin(self_: Motor, other: LineAtOrigin) -> LineAtInfinity {
    return anti_scalar__anti_wedge__line_at_infinity(motor__wedge__line_at_origin(self_, other), line_at_origin__anti_dual(other));
}

fn motor__anti_reject_orthogonally_from__motor(self_: Motor, other: Motor) -> MultiVectorAtInfinity {
    return anti_scalar__anti_wedge__multi_vector_at_infinity(motor__wedge__motor(self_, other), motor__anti_dual(other));
}

fn motor__anti_reject_orthogonally_from__multi_vector(self_: Motor, other: MultiVector) -> MultiVectorAtInfinity {
    return multi_vector__anti_wedge__multi_vector_at_infinity(motor__wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn motor__anti_reject_orthogonally_from__multi_vector_at_origin(self_: Motor, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__anti_wedge__multi_vector_at_infinity(motor__wedge__multi_vector_at_origin(self_, other), multi_vector_at_origin__anti_dual(other));
}

fn motor__anti_reject_orthogonally_from__origin(self_: Motor, other: Origin) -> LineAtInfinity {
    return plane_at_origin__anti_wedge__horizon(motor__wedge__origin(self_, other), origin__anti_dual(other));
}

fn motor__anti_reject_orthogonally_from__point(self_: Motor, other: Point) -> LineAtInfinity {
    return plane__anti_wedge__horizon(motor__wedge__point(self_, other), point__anti_dual(other));
}

fn motor__anti_reject_orthogonally_from__rotor(self_: Motor, other: Rotor) -> MultiVectorAtInfinity {
    return anti_scalar__anti_wedge__multi_vector_at_infinity(motor__wedge__rotor(self_, other), rotor__anti_dual(other));
}

fn motor__anti_reject_orthogonally_from__transflector(self_: Motor, other: Transflector) -> Scalar {
    return plane__anti_wedge__point_at_infinity(motor__wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn multi_vector__anti_reject_orthogonally_from__flector(self_: MultiVector, other: Flector) -> MultiVectorAtInfinity {
    return multi_vector__anti_wedge__flector_at_infinity(multi_vector__wedge__flector(self_, other), flector__anti_dual(other));
}

fn multi_vector__anti_reject_orthogonally_from__line(self_: MultiVector, other: Line) -> MultiVectorAtInfinity {
    return multi_vector__anti_wedge__line_at_infinity(multi_vector__wedge__line(self_, other), line__anti_dual(other));
}

fn multi_vector__anti_reject_orthogonally_from__line_at_origin(self_: MultiVector, other: LineAtOrigin) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__anti_wedge__line_at_infinity(multi_vector__wedge__line_at_origin(self_, other), line_at_origin__anti_dual(other));
}

fn multi_vector__anti_reject_orthogonally_from__motor(self_: MultiVector, other: Motor) -> MultiVectorAtInfinity {
    return multi_vector__anti_wedge__multi_vector_at_infinity(multi_vector__wedge__motor(self_, other), motor__anti_dual(other));
}

fn multi_vector__anti_reject_orthogonally_from__multi_vector(self_: MultiVector, other: MultiVector) -> MultiVectorAtInfinity {
    return multi_vector__anti_wedge__multi_vector_at_infinity(multi_vector__wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn multi_vector__anti_reject_orthogonally_from__multi_vector_at_origin(self_: MultiVector, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__anti_wedge__multi_vector_at_infinity(multi_vector__wedge__multi_vector_at_origin(self_, other), multi_vector_at_origin__anti_dual(other));
}

fn multi_vector__anti_reject_orthogonally_from__origin(self_: MultiVector, other: Origin) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__anti_wedge__horizon(multi_vector__wedge__origin(self_, other), origin__anti_dual(other));
}

fn multi_vector__anti_reject_orthogonally_from__plane(self_: MultiVector, other: Plane) -> MultiVectorAtInfinity {
    return multi_vector__anti_wedge__point_at_infinity(multi_vector__wedge__plane(self_, other), plane__anti_dual(other));
}

fn multi_vector__anti_reject_orthogonally_from__plane_at_origin(self_: MultiVector, other: PlaneAtOrigin) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__anti_wedge__point_at_infinity(multi_vector__wedge__plane_at_origin(self_, other), plane_at_origin__anti_dual(other));
}

fn multi_vector__anti_reject_orthogonally_from__point(self_: MultiVector, other: Point) -> MultiVectorAtInfinity {
    return multi_vector__anti_wedge__horizon(multi_vector__wedge__point(self_, other), point__anti_dual(other));
}

fn multi_vector__anti_reject_orthogonally_from__rotor(self_: MultiVector, other: Rotor) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__anti_wedge__multi_vector_at_infinity(multi_vector__wedge__rotor(self_, other), rotor__anti_dual(other));
}

fn multi_vector__anti_reject_orthogonally_from__transflector(self_: MultiVector, other: Transflector) -> MultiVectorAtInfinity {
    return multi_vector__anti_wedge__point_at_infinity(multi_vector__wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn multi_vector_at_infinity__anti_reject_orthogonally_from__flector(self_: MultiVectorAtInfinity, other: Flector) -> MultiVectorAtInfinity {
    return multi_vector__anti_wedge__flector_at_infinity(multi_vector_at_infinity__wedge__flector(self_, other), flector__anti_dual(other));
}

fn multi_vector_at_infinity__anti_reject_orthogonally_from__line(self_: MultiVectorAtInfinity, other: Line) -> MultiVectorAtInfinity {
    return multi_vector__anti_wedge__line_at_infinity(multi_vector_at_infinity__wedge__line(self_, other), line__anti_dual(other));
}

fn multi_vector_at_infinity__anti_reject_orthogonally_from__line_at_origin(self_: MultiVectorAtInfinity, other: LineAtOrigin) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__anti_wedge__line_at_infinity(multi_vector_at_infinity__wedge__line_at_origin(self_, other), line_at_origin__anti_dual(other));
}

fn multi_vector_at_infinity__anti_reject_orthogonally_from__motor(self_: MultiVectorAtInfinity, other: Motor) -> MultiVectorAtInfinity {
    return multi_vector__anti_wedge__multi_vector_at_infinity(multi_vector_at_infinity__wedge__motor(self_, other), motor__anti_dual(other));
}

fn multi_vector_at_infinity__anti_reject_orthogonally_from__multi_vector(self_: MultiVectorAtInfinity, other: MultiVector) -> MultiVectorAtInfinity {
    return multi_vector__anti_wedge__multi_vector_at_infinity(multi_vector_at_infinity__wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn multi_vector_at_infinity__anti_reject_orthogonally_from__multi_vector_at_origin(self_: MultiVectorAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__anti_wedge__multi_vector_at_infinity(multi_vector_at_infinity__wedge__multi_vector_at_origin(self_, other), multi_vector_at_origin__anti_dual(other));
}

fn multi_vector_at_infinity__anti_reject_orthogonally_from__origin(self_: MultiVectorAtInfinity, other: Origin) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__anti_wedge__horizon(multi_vector_at_infinity__wedge__origin(self_, other), origin__anti_dual(other));
}

fn multi_vector_at_infinity__anti_reject_orthogonally_from__plane(self_: MultiVectorAtInfinity, other: Plane) -> MultiVectorAtInfinity {
    return multi_vector__anti_wedge__point_at_infinity(multi_vector_at_infinity__wedge__plane(self_, other), plane__anti_dual(other));
}

fn multi_vector_at_infinity__anti_reject_orthogonally_from__plane_at_origin(self_: MultiVectorAtInfinity, other: PlaneAtOrigin) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__anti_wedge__point_at_infinity(multi_vector_at_infinity__wedge__plane_at_origin(self_, other), plane_at_origin__anti_dual(other));
}

fn multi_vector_at_infinity__anti_reject_orthogonally_from__point(self_: MultiVectorAtInfinity, other: Point) -> MultiVectorAtInfinity {
    return multi_vector__anti_wedge__horizon(multi_vector_at_infinity__wedge__point(self_, other), point__anti_dual(other));
}

fn multi_vector_at_infinity__anti_reject_orthogonally_from__rotor(self_: MultiVectorAtInfinity, other: Rotor) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__anti_wedge__multi_vector_at_infinity(multi_vector_at_infinity__wedge__rotor(self_, other), rotor__anti_dual(other));
}

fn multi_vector_at_infinity__anti_reject_orthogonally_from__transflector(self_: MultiVectorAtInfinity, other: Transflector) -> MultiVectorAtInfinity {
    return multi_vector__anti_wedge__point_at_infinity(multi_vector_at_infinity__wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn multi_vector_at_origin__anti_reject_orthogonally_from__flector(self_: MultiVectorAtOrigin, other: Flector) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__anti_wedge__flector_at_infinity(multi_vector_at_origin__wedge__flector(self_, other), flector__anti_dual(other));
}

fn multi_vector_at_origin__anti_reject_orthogonally_from__line(self_: MultiVectorAtOrigin, other: Line) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__anti_wedge__line_at_infinity(multi_vector_at_origin__wedge__line(self_, other), line__anti_dual(other));
}

fn multi_vector_at_origin__anti_reject_orthogonally_from__motor(self_: MultiVectorAtOrigin, other: Motor) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__anti_wedge__multi_vector_at_infinity(multi_vector_at_origin__wedge__motor(self_, other), motor__anti_dual(other));
}

fn multi_vector_at_origin__anti_reject_orthogonally_from__multi_vector(self_: MultiVectorAtOrigin, other: MultiVector) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__anti_wedge__multi_vector_at_infinity(multi_vector_at_origin__wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn multi_vector_at_origin__anti_reject_orthogonally_from__plane(self_: MultiVectorAtOrigin, other: Plane) -> PointAtInfinity {
    return anti_scalar__anti_wedge__point_at_infinity(multi_vector_at_origin__wedge__plane(self_, other), plane__anti_dual(other));
}

fn multi_vector_at_origin__anti_reject_orthogonally_from__point(self_: MultiVectorAtOrigin, other: Point) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__anti_wedge__horizon(multi_vector_at_origin__wedge__point(self_, other), point__anti_dual(other));
}

fn multi_vector_at_origin__anti_reject_orthogonally_from__transflector(self_: MultiVectorAtOrigin, other: Transflector) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__anti_wedge__point_at_infinity(multi_vector_at_origin__wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn origin__anti_reject_orthogonally_from__flector(self_: Origin, other: Flector) -> FlectorAtInfinity {
    return rotor__anti_wedge__flector_at_infinity(origin__wedge__flector(self_, other), flector__anti_dual(other));
}

fn origin__anti_reject_orthogonally_from__line(self_: Origin, other: Line) -> PointAtInfinity {
    return plane_at_origin__anti_wedge__line_at_infinity(origin__wedge__line(self_, other), line__anti_dual(other));
}

fn origin__anti_reject_orthogonally_from__motor(self_: Origin, other: Motor) -> MultiVectorAtInfinity {
    return plane_at_origin__anti_wedge__multi_vector_at_infinity(origin__wedge__motor(self_, other), motor__anti_dual(other));
}

fn origin__anti_reject_orthogonally_from__multi_vector(self_: Origin, other: MultiVector) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__anti_wedge__multi_vector_at_infinity(origin__wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn origin__anti_reject_orthogonally_from__plane(self_: Origin, other: Plane) -> PointAtInfinity {
    return anti_scalar__anti_wedge__point_at_infinity(origin__wedge__plane(self_, other), plane__anti_dual(other));
}

fn origin__anti_reject_orthogonally_from__point(self_: Origin, other: Point) -> PointAtInfinity {
    return line_at_origin__anti_wedge__horizon(origin__wedge__point(self_, other), point__anti_dual(other));
}

fn origin__anti_reject_orthogonally_from__transflector(self_: Origin, other: Transflector) -> PointAtInfinity {
    return rotor__anti_wedge__point_at_infinity(origin__wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn plane__anti_reject_orthogonally_from__flector(self_: Plane, other: Flector) -> FlectorAtInfinity {
    return anti_scalar__anti_wedge__flector_at_infinity(plane__wedge__flector(self_, other), flector__anti_dual(other));
}

fn plane__anti_reject_orthogonally_from__multi_vector(self_: Plane, other: MultiVector) -> MultiVectorAtInfinity {
    return multi_vector__anti_wedge__multi_vector_at_infinity(plane__wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn plane__anti_reject_orthogonally_from__multi_vector_at_origin(self_: Plane, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return anti_scalar__anti_wedge__multi_vector_at_infinity(plane__wedge__multi_vector_at_origin(self_, other), multi_vector_at_origin__anti_dual(other));
}

fn plane__anti_reject_orthogonally_from__origin(self_: Plane, other: Origin) -> Horizon {
    return anti_scalar__anti_wedge__horizon(plane__wedge__origin(self_, other), origin__anti_dual(other));
}

fn plane__anti_reject_orthogonally_from__point(self_: Plane, other: Point) -> Horizon {
    return anti_scalar__anti_wedge__horizon(plane__wedge__point(self_, other), point__anti_dual(other));
}

fn plane__anti_reject_orthogonally_from__transflector(self_: Plane, other: Transflector) -> PointAtInfinity {
    return anti_scalar__anti_wedge__point_at_infinity(plane__wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn plane_at_origin__anti_reject_orthogonally_from__flector(self_: PlaneAtOrigin, other: Flector) -> FlectorAtInfinity {
    return anti_scalar__anti_wedge__flector_at_infinity(plane_at_origin__wedge__flector(self_, other), flector__anti_dual(other));
}

fn plane_at_origin__anti_reject_orthogonally_from__multi_vector(self_: PlaneAtOrigin, other: MultiVector) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__anti_wedge__multi_vector_at_infinity(plane_at_origin__wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn plane_at_origin__anti_reject_orthogonally_from__point(self_: PlaneAtOrigin, other: Point) -> Horizon {
    return anti_scalar__anti_wedge__horizon(plane_at_origin__wedge__point(self_, other), point__anti_dual(other));
}

fn plane_at_origin__anti_reject_orthogonally_from__transflector(self_: PlaneAtOrigin, other: Transflector) -> PointAtInfinity {
    return anti_scalar__anti_wedge__point_at_infinity(plane_at_origin__wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn point__anti_reject_orthogonally_from__flector(self_: Point, other: Flector) -> FlectorAtInfinity {
    return motor__anti_wedge__flector_at_infinity(point__wedge__flector(self_, other), flector__anti_dual(other));
}

fn point__anti_reject_orthogonally_from__line(self_: Point, other: Line) -> PointAtInfinity {
    return plane__anti_wedge__line_at_infinity(point__wedge__line(self_, other), line__anti_dual(other));
}

fn point__anti_reject_orthogonally_from__line_at_origin(self_: Point, other: LineAtOrigin) -> PointAtInfinity {
    return plane_at_origin__anti_wedge__line_at_infinity(point__wedge__line_at_origin(self_, other), line_at_origin__anti_dual(other));
}

fn point__anti_reject_orthogonally_from__motor(self_: Point, other: Motor) -> MultiVectorAtInfinity {
    return plane__anti_wedge__multi_vector_at_infinity(point__wedge__motor(self_, other), motor__anti_dual(other));
}

fn point__anti_reject_orthogonally_from__multi_vector(self_: Point, other: MultiVector) -> MultiVectorAtInfinity {
    return multi_vector__anti_wedge__multi_vector_at_infinity(point__wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn point__anti_reject_orthogonally_from__multi_vector_at_origin(self_: Point, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__anti_wedge__multi_vector_at_infinity(point__wedge__multi_vector_at_origin(self_, other), multi_vector_at_origin__anti_dual(other));
}

fn point__anti_reject_orthogonally_from__origin(self_: Point, other: Origin) -> PointAtInfinity {
    return line_at_origin__anti_wedge__horizon(point__wedge__origin(self_, other), origin__anti_dual(other));
}

fn point__anti_reject_orthogonally_from__plane(self_: Point, other: Plane) -> PointAtInfinity {
    return anti_scalar__anti_wedge__point_at_infinity(point__wedge__plane(self_, other), plane__anti_dual(other));
}

fn point__anti_reject_orthogonally_from__plane_at_origin(self_: Point, other: PlaneAtOrigin) -> PointAtInfinity {
    return anti_scalar__anti_wedge__point_at_infinity(point__wedge__plane_at_origin(self_, other), plane_at_origin__anti_dual(other));
}

fn point__anti_reject_orthogonally_from__point(self_: Point, other: Point) -> PointAtInfinity {
    return line__anti_wedge__horizon(point__wedge__point(self_, other), point__anti_dual(other));
}

fn point__anti_reject_orthogonally_from__rotor(self_: Point, other: Rotor) -> MultiVectorAtInfinity {
    return plane_at_origin__anti_wedge__multi_vector_at_infinity(point__wedge__rotor(self_, other), rotor__anti_dual(other));
}

fn point__anti_reject_orthogonally_from__transflector(self_: Point, other: Transflector) -> PointAtInfinity {
    return motor__anti_wedge__point_at_infinity(point__wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn point_at_infinity__anti_reject_orthogonally_from__flector(self_: PointAtInfinity, other: Flector) -> FlectorAtInfinity {
    return motor__anti_wedge__flector_at_infinity(point_at_infinity__wedge__flector(self_, other), flector__anti_dual(other));
}

fn point_at_infinity__anti_reject_orthogonally_from__line(self_: PointAtInfinity, other: Line) -> PointAtInfinity {
    return plane__anti_wedge__line_at_infinity(point_at_infinity__wedge__line(self_, other), line__anti_dual(other));
}

fn point_at_infinity__anti_reject_orthogonally_from__line_at_origin(self_: PointAtInfinity, other: LineAtOrigin) -> PointAtInfinity {
    return plane_at_origin__anti_wedge__line_at_infinity(point_at_infinity__wedge__line_at_origin(self_, other), line_at_origin__anti_dual(other));
}

fn point_at_infinity__anti_reject_orthogonally_from__motor(self_: PointAtInfinity, other: Motor) -> MultiVectorAtInfinity {
    return plane__anti_wedge__multi_vector_at_infinity(point_at_infinity__wedge__motor(self_, other), motor__anti_dual(other));
}

fn point_at_infinity__anti_reject_orthogonally_from__multi_vector(self_: PointAtInfinity, other: MultiVector) -> MultiVectorAtInfinity {
    return multi_vector__anti_wedge__multi_vector_at_infinity(point_at_infinity__wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn point_at_infinity__anti_reject_orthogonally_from__multi_vector_at_origin(self_: PointAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__anti_wedge__multi_vector_at_infinity(point_at_infinity__wedge__multi_vector_at_origin(self_, other), multi_vector_at_origin__anti_dual(other));
}

fn point_at_infinity__anti_reject_orthogonally_from__origin(self_: PointAtInfinity, other: Origin) -> PointAtInfinity {
    return line_at_origin__anti_wedge__horizon(point_at_infinity__wedge__origin(self_, other), origin__anti_dual(other));
}

fn point_at_infinity__anti_reject_orthogonally_from__plane(self_: PointAtInfinity, other: Plane) -> PointAtInfinity {
    return anti_scalar__anti_wedge__point_at_infinity(point_at_infinity__wedge__plane(self_, other), plane__anti_dual(other));
}

fn point_at_infinity__anti_reject_orthogonally_from__plane_at_origin(self_: PointAtInfinity, other: PlaneAtOrigin) -> PointAtInfinity {
    return anti_scalar__anti_wedge__point_at_infinity(point_at_infinity__wedge__plane_at_origin(self_, other), plane_at_origin__anti_dual(other));
}

fn point_at_infinity__anti_reject_orthogonally_from__point(self_: PointAtInfinity, other: Point) -> PointAtInfinity {
    return line__anti_wedge__horizon(point_at_infinity__wedge__point(self_, other), point__anti_dual(other));
}

fn point_at_infinity__anti_reject_orthogonally_from__rotor(self_: PointAtInfinity, other: Rotor) -> MultiVectorAtInfinity {
    return plane_at_origin__anti_wedge__multi_vector_at_infinity(point_at_infinity__wedge__rotor(self_, other), rotor__anti_dual(other));
}

fn point_at_infinity__anti_reject_orthogonally_from__transflector(self_: PointAtInfinity, other: Transflector) -> PointAtInfinity {
    return translator__anti_wedge__point_at_infinity(point_at_infinity__wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn rotor__anti_reject_orthogonally_from__flector(self_: Rotor, other: Flector) -> MultiVectorAtInfinity {
    return plane_at_origin__anti_wedge__flector_at_infinity(rotor__wedge__flector(self_, other), flector__anti_dual(other));
}

fn rotor__anti_reject_orthogonally_from__line(self_: Rotor, other: Line) -> LineAtInfinity {
    return anti_scalar__anti_wedge__line_at_infinity(rotor__wedge__line(self_, other), line__anti_dual(other));
}

fn rotor__anti_reject_orthogonally_from__motor(self_: Rotor, other: Motor) -> MultiVectorAtInfinity {
    return anti_scalar__anti_wedge__multi_vector_at_infinity(rotor__wedge__motor(self_, other), motor__anti_dual(other));
}

fn rotor__anti_reject_orthogonally_from__multi_vector(self_: Rotor, other: MultiVector) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__anti_wedge__multi_vector_at_infinity(rotor__wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn rotor__anti_reject_orthogonally_from__point(self_: Rotor, other: Point) -> LineAtInfinity {
    return plane_at_origin__anti_wedge__horizon(rotor__wedge__point(self_, other), point__anti_dual(other));
}

fn rotor__anti_reject_orthogonally_from__transflector(self_: Rotor, other: Transflector) -> Scalar {
    return plane_at_origin__anti_wedge__point_at_infinity(rotor__wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn transflector__anti_reject_orthogonally_from__flector(self_: Transflector, other: Flector) -> FlectorAtInfinity {
    return motor__anti_wedge__flector_at_infinity(transflector__wedge__flector(self_, other), flector__anti_dual(other));
}

fn transflector__anti_reject_orthogonally_from__line(self_: Transflector, other: Line) -> PointAtInfinity {
    return plane__anti_wedge__line_at_infinity(transflector__wedge__line(self_, other), line__anti_dual(other));
}

fn transflector__anti_reject_orthogonally_from__line_at_origin(self_: Transflector, other: LineAtOrigin) -> PointAtInfinity {
    return plane_at_origin__anti_wedge__line_at_infinity(transflector__wedge__line_at_origin(self_, other), line_at_origin__anti_dual(other));
}

fn transflector__anti_reject_orthogonally_from__motor(self_: Transflector, other: Motor) -> MultiVectorAtInfinity {
    return plane__anti_wedge__multi_vector_at_infinity(transflector__wedge__motor(self_, other), motor__anti_dual(other));
}

fn transflector__anti_reject_orthogonally_from__multi_vector(self_: Transflector, other: MultiVector) -> MultiVectorAtInfinity {
    return multi_vector__anti_wedge__multi_vector_at_infinity(transflector__wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn transflector__anti_reject_orthogonally_from__multi_vector_at_origin(self_: Transflector, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__anti_wedge__multi_vector_at_infinity(transflector__wedge__multi_vector_at_origin(self_, other), multi_vector_at_origin__anti_dual(other));
}

fn transflector__anti_reject_orthogonally_from__origin(self_: Transflector, other: Origin) -> FlectorAtInfinity {
    return rotor__anti_wedge__horizon(transflector__wedge__origin(self_, other), origin__anti_dual(other));
}

fn transflector__anti_reject_orthogonally_from__plane(self_: Transflector, other: Plane) -> PointAtInfinity {
    return anti_scalar__anti_wedge__point_at_infinity(transflector__wedge__plane(self_, other), plane__anti_dual(other));
}

fn transflector__anti_reject_orthogonally_from__plane_at_origin(self_: Transflector, other: PlaneAtOrigin) -> PointAtInfinity {
    return anti_scalar__anti_wedge__point_at_infinity(transflector__wedge__plane_at_origin(self_, other), plane_at_origin__anti_dual(other));
}

fn transflector__anti_reject_orthogonally_from__point(self_: Transflector, other: Point) -> FlectorAtInfinity {
    return motor__anti_wedge__horizon(transflector__wedge__point(self_, other), point__anti_dual(other));
}

fn transflector__anti_reject_orthogonally_from__rotor(self_: Transflector, other: Rotor) -> MultiVectorAtInfinity {
    return plane_at_origin__anti_wedge__multi_vector_at_infinity(transflector__wedge__rotor(self_, other), rotor__anti_dual(other));
}

fn transflector__anti_reject_orthogonally_from__transflector(self_: Transflector, other: Transflector) -> PointAtInfinity {
    return translator__anti_wedge__point_at_infinity(transflector__wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn translator__anti_reject_orthogonally_from__flector(self_: Translator, other: Flector) -> MultiVectorAtInfinity {
    return plane__anti_wedge__flector_at_infinity(translator__wedge__flector(self_, other), flector__anti_dual(other));
}

fn translator__anti_reject_orthogonally_from__line(self_: Translator, other: Line) -> LineAtInfinity {
    return anti_scalar__anti_wedge__line_at_infinity(translator__wedge__line(self_, other), line__anti_dual(other));
}

fn translator__anti_reject_orthogonally_from__line_at_origin(self_: Translator, other: LineAtOrigin) -> LineAtInfinity {
    return anti_scalar__anti_wedge__line_at_infinity(translator__wedge__line_at_origin(self_, other), line_at_origin__anti_dual(other));
}

fn translator__anti_reject_orthogonally_from__motor(self_: Translator, other: Motor) -> MultiVectorAtInfinity {
    return anti_scalar__anti_wedge__multi_vector_at_infinity(translator__wedge__motor(self_, other), motor__anti_dual(other));
}

fn translator__anti_reject_orthogonally_from__multi_vector(self_: Translator, other: MultiVector) -> MultiVectorAtInfinity {
    return multi_vector__anti_wedge__multi_vector_at_infinity(translator__wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn translator__anti_reject_orthogonally_from__multi_vector_at_origin(self_: Translator, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return multi_vector_at_origin__anti_wedge__multi_vector_at_infinity(translator__wedge__multi_vector_at_origin(self_, other), multi_vector_at_origin__anti_dual(other));
}

fn translator__anti_reject_orthogonally_from__origin(self_: Translator, other: Origin) -> LineAtInfinity {
    return plane_at_origin__anti_wedge__horizon(translator__wedge__origin(self_, other), origin__anti_dual(other));
}

fn translator__anti_reject_orthogonally_from__point(self_: Translator, other: Point) -> LineAtInfinity {
    return plane__anti_wedge__horizon(translator__wedge__point(self_, other), point__anti_dual(other));
}

fn translator__anti_reject_orthogonally_from__rotor(self_: Translator, other: Rotor) -> MultiVectorAtInfinity {
    return anti_scalar__anti_wedge__multi_vector_at_infinity(translator__wedge__rotor(self_, other), rotor__anti_dual(other));
}

fn flector__anti_reject_via_horizon_from__flector(self_: Flector, other: Flector) -> Flector {
    return motor__anti_wedge__flector(flector__wedge__flector(self_, other), flector__dual(other));
}

fn flector__anti_reject_via_horizon_from__flector_at_infinity(self_: Flector, other: FlectorAtInfinity) -> Flector {
    return motor__anti_wedge__flector(flector__wedge__flector_at_infinity(self_, other), flector_at_infinity__dual(other));
}

fn flector__anti_reject_via_horizon_from__horizon(self_: Flector, other: Horizon) -> Origin {
    return anti_scalar__anti_wedge__origin(flector__wedge__horizon(self_, other), horizon__dual(other));
}

fn flector__anti_reject_via_horizon_from__line(self_: Flector, other: Line) -> Point {
    return plane__anti_wedge__line_at_origin(flector__wedge__line(self_, other), line__dual(other));
}

fn flector__anti_reject_via_horizon_from__line_at_infinity(self_: Flector, other: LineAtInfinity) -> Point {
    return plane__anti_wedge__line_at_origin(flector__wedge__line_at_infinity(self_, other), line_at_infinity__dual(other));
}

fn flector__anti_reject_via_horizon_from__motor(self_: Flector, other: Motor) -> Point {
    return plane__anti_wedge__line_at_origin(flector__wedge__motor(self_, other), motor__dual(other));
}

fn flector__anti_reject_via_horizon_from__multi_vector(self_: Flector, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector_at_origin(flector__wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn flector__anti_reject_via_horizon_from__multi_vector_at_infinity(self_: Flector, other: MultiVectorAtInfinity) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector_at_origin(flector__wedge__multi_vector_at_infinity(self_, other), multi_vector_at_infinity__dual(other));
}

fn flector__anti_reject_via_horizon_from__plane(self_: Flector, other: Plane) -> Origin {
    return anti_scalar__anti_wedge__origin(flector__wedge__plane(self_, other), plane__dual(other));
}

fn flector__anti_reject_via_horizon_from__point(self_: Flector, other: Point) -> Flector {
    return motor__anti_wedge__plane_at_origin(flector__wedge__point(self_, other), point__dual(other));
}

fn flector__anti_reject_via_horizon_from__point_at_infinity(self_: Flector, other: PointAtInfinity) -> Flector {
    return motor__anti_wedge__plane_at_origin(flector__wedge__point_at_infinity(self_, other), point_at_infinity__dual(other));
}

fn flector__anti_reject_via_horizon_from__transflector(self_: Flector, other: Transflector) -> Flector {
    return motor__anti_wedge__flector(flector__wedge__transflector(self_, other), transflector__dual(other));
}

fn flector__anti_reject_via_horizon_from__translator(self_: Flector, other: Translator) -> Point {
    return plane__anti_wedge__line_at_origin(flector__wedge__translator(self_, other), translator__dual(other));
}

fn flector_at_infinity__anti_reject_via_horizon_from__flector(self_: FlectorAtInfinity, other: Flector) -> Flector {
    return motor__anti_wedge__flector(flector_at_infinity__wedge__flector(self_, other), flector__dual(other));
}

fn flector_at_infinity__anti_reject_via_horizon_from__flector_at_infinity(self_: FlectorAtInfinity, other: FlectorAtInfinity) -> PointAtInfinity {
    return line_at_infinity__anti_wedge__flector(flector_at_infinity__wedge__flector_at_infinity(self_, other), flector_at_infinity__dual(other));
}

fn flector_at_infinity__anti_reject_via_horizon_from__line(self_: FlectorAtInfinity, other: Line) -> Point {
    return plane__anti_wedge__line_at_origin(flector_at_infinity__wedge__line(self_, other), line__dual(other));
}

fn flector_at_infinity__anti_reject_via_horizon_from__line_at_infinity(self_: FlectorAtInfinity, other: LineAtInfinity) -> PointAtInfinity {
    return horizon__anti_wedge__line_at_origin(flector_at_infinity__wedge__line_at_infinity(self_, other), line_at_infinity__dual(other));
}

fn flector_at_infinity__anti_reject_via_horizon_from__motor(self_: FlectorAtInfinity, other: Motor) -> Point {
    return plane__anti_wedge__line_at_origin(flector_at_infinity__wedge__motor(self_, other), motor__dual(other));
}

fn flector_at_infinity__anti_reject_via_horizon_from__multi_vector(self_: FlectorAtInfinity, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector_at_origin(flector_at_infinity__wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn flector_at_infinity__anti_reject_via_horizon_from__multi_vector_at_infinity(self_: FlectorAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__anti_wedge__multi_vector_at_origin(flector_at_infinity__wedge__multi_vector_at_infinity(self_, other), multi_vector_at_infinity__dual(other));
}

fn flector_at_infinity__anti_reject_via_horizon_from__plane(self_: FlectorAtInfinity, other: Plane) -> Origin {
    return anti_scalar__anti_wedge__origin(flector_at_infinity__wedge__plane(self_, other), plane__dual(other));
}

fn flector_at_infinity__anti_reject_via_horizon_from__point(self_: FlectorAtInfinity, other: Point) -> Flector {
    return motor__anti_wedge__plane_at_origin(flector_at_infinity__wedge__point(self_, other), point__dual(other));
}

fn flector_at_infinity__anti_reject_via_horizon_from__point_at_infinity(self_: FlectorAtInfinity, other: PointAtInfinity) -> PointAtInfinity {
    return line_at_infinity__anti_wedge__plane_at_origin(flector_at_infinity__wedge__point_at_infinity(self_, other), point_at_infinity__dual(other));
}

fn flector_at_infinity__anti_reject_via_horizon_from__transflector(self_: FlectorAtInfinity, other: Transflector) -> Flector {
    return translator__anti_wedge__flector(flector_at_infinity__wedge__transflector(self_, other), transflector__dual(other));
}

fn flector_at_infinity__anti_reject_via_horizon_from__translator(self_: FlectorAtInfinity, other: Translator) -> PointAtInfinity {
    return horizon__anti_wedge__line_at_origin(flector_at_infinity__wedge__translator(self_, other), translator__dual(other));
}

fn horizon__anti_reject_via_horizon_from__flector(self_: Horizon, other: Flector) -> Flector {
    return anti_scalar__anti_wedge__flector(horizon__wedge__flector(self_, other), flector__dual(other));
}

fn horizon__anti_reject_via_horizon_from__multi_vector(self_: Horizon, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector_at_origin(horizon__wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn horizon__anti_reject_via_horizon_from__multi_vector_at_infinity(self_: Horizon, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return horizon__anti_wedge__multi_vector_at_origin(horizon__wedge__multi_vector_at_infinity(self_, other), multi_vector_at_infinity__dual(other));
}

fn horizon__anti_reject_via_horizon_from__point(self_: Horizon, other: Point) -> PlaneAtOrigin {
    return anti_scalar__anti_wedge__plane_at_origin(horizon__wedge__point(self_, other), point__dual(other));
}

fn line__anti_reject_via_horizon_from__flector(self_: Line, other: Flector) -> MultiVector {
    return plane__anti_wedge__flector(line__wedge__flector(self_, other), flector__dual(other));
}

fn line__anti_reject_via_horizon_from__flector_at_infinity(self_: Line, other: FlectorAtInfinity) -> MultiVector {
    return plane__anti_wedge__flector(line__wedge__flector_at_infinity(self_, other), flector_at_infinity__dual(other));
}

fn line__anti_reject_via_horizon_from__line(self_: Line, other: Line) -> LineAtOrigin {
    return anti_scalar__anti_wedge__line_at_origin(line__wedge__line(self_, other), line__dual(other));
}

fn line__anti_reject_via_horizon_from__line_at_infinity(self_: Line, other: LineAtInfinity) -> LineAtOrigin {
    return anti_scalar__anti_wedge__line_at_origin(line__wedge__line_at_infinity(self_, other), line_at_infinity__dual(other));
}

fn line__anti_reject_via_horizon_from__motor(self_: Line, other: Motor) -> LineAtOrigin {
    return anti_scalar__anti_wedge__line_at_origin(line__wedge__motor(self_, other), motor__dual(other));
}

fn line__anti_reject_via_horizon_from__multi_vector(self_: Line, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector_at_origin(line__wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn line__anti_reject_via_horizon_from__multi_vector_at_infinity(self_: Line, other: MultiVectorAtInfinity) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector_at_origin(line__wedge__multi_vector_at_infinity(self_, other), multi_vector_at_infinity__dual(other));
}

fn line__anti_reject_via_horizon_from__point(self_: Line, other: Point) -> Line {
    return plane__anti_wedge__plane_at_origin(line__wedge__point(self_, other), point__dual(other));
}

fn line__anti_reject_via_horizon_from__point_at_infinity(self_: Line, other: PointAtInfinity) -> Line {
    return plane__anti_wedge__plane_at_origin(line__wedge__point_at_infinity(self_, other), point_at_infinity__dual(other));
}

fn line__anti_reject_via_horizon_from__transflector(self_: Line, other: Transflector) -> MultiVector {
    return plane__anti_wedge__flector(line__wedge__transflector(self_, other), transflector__dual(other));
}

fn line__anti_reject_via_horizon_from__translator(self_: Line, other: Translator) -> LineAtOrigin {
    return anti_scalar__anti_wedge__line_at_origin(line__wedge__translator(self_, other), translator__dual(other));
}

fn line_at_infinity__anti_reject_via_horizon_from__flector(self_: LineAtInfinity, other: Flector) -> MultiVector {
    return plane__anti_wedge__flector(line_at_infinity__wedge__flector(self_, other), flector__dual(other));
}

fn line_at_infinity__anti_reject_via_horizon_from__flector_at_infinity(self_: LineAtInfinity, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return horizon__anti_wedge__flector(line_at_infinity__wedge__flector_at_infinity(self_, other), flector_at_infinity__dual(other));
}

fn line_at_infinity__anti_reject_via_horizon_from__line(self_: LineAtInfinity, other: Line) -> LineAtOrigin {
    return anti_scalar__anti_wedge__line_at_origin(line_at_infinity__wedge__line(self_, other), line__dual(other));
}

fn line_at_infinity__anti_reject_via_horizon_from__motor(self_: LineAtInfinity, other: Motor) -> LineAtOrigin {
    return anti_scalar__anti_wedge__line_at_origin(line_at_infinity__wedge__motor(self_, other), motor__dual(other));
}

fn line_at_infinity__anti_reject_via_horizon_from__multi_vector(self_: LineAtInfinity, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector_at_origin(line_at_infinity__wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn line_at_infinity__anti_reject_via_horizon_from__multi_vector_at_infinity(self_: LineAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__anti_wedge__multi_vector_at_origin(line_at_infinity__wedge__multi_vector_at_infinity(self_, other), multi_vector_at_infinity__dual(other));
}

fn line_at_infinity__anti_reject_via_horizon_from__point(self_: LineAtInfinity, other: Point) -> Line {
    return plane__anti_wedge__plane_at_origin(line_at_infinity__wedge__point(self_, other), point__dual(other));
}

fn line_at_infinity__anti_reject_via_horizon_from__point_at_infinity(self_: LineAtInfinity, other: PointAtInfinity) -> LineAtInfinity {
    return horizon__anti_wedge__plane_at_origin(line_at_infinity__wedge__point_at_infinity(self_, other), point_at_infinity__dual(other));
}

fn line_at_infinity__anti_reject_via_horizon_from__transflector(self_: LineAtInfinity, other: Transflector) -> MultiVectorAtInfinity {
    return horizon__anti_wedge__flector(line_at_infinity__wedge__transflector(self_, other), transflector__dual(other));
}

fn line_at_origin__anti_reject_via_horizon_from__flector(self_: LineAtOrigin, other: Flector) -> MultiVector {
    return plane_at_origin__anti_wedge__flector(line_at_origin__wedge__flector(self_, other), flector__dual(other));
}

fn line_at_origin__anti_reject_via_horizon_from__flector_at_infinity(self_: LineAtOrigin, other: FlectorAtInfinity) -> MultiVector {
    return plane_at_origin__anti_wedge__flector(line_at_origin__wedge__flector_at_infinity(self_, other), flector_at_infinity__dual(other));
}

fn line_at_origin__anti_reject_via_horizon_from__line(self_: LineAtOrigin, other: Line) -> LineAtOrigin {
    return anti_scalar__anti_wedge__line_at_origin(line_at_origin__wedge__line(self_, other), line__dual(other));
}

fn line_at_origin__anti_reject_via_horizon_from__line_at_infinity(self_: LineAtOrigin, other: LineAtInfinity) -> LineAtOrigin {
    return anti_scalar__anti_wedge__line_at_origin(line_at_origin__wedge__line_at_infinity(self_, other), line_at_infinity__dual(other));
}

fn line_at_origin__anti_reject_via_horizon_from__motor(self_: LineAtOrigin, other: Motor) -> LineAtOrigin {
    return anti_scalar__anti_wedge__line_at_origin(line_at_origin__wedge__motor(self_, other), motor__dual(other));
}

fn line_at_origin__anti_reject_via_horizon_from__multi_vector(self_: LineAtOrigin, other: MultiVector) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__anti_wedge__multi_vector_at_origin(line_at_origin__wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn line_at_origin__anti_reject_via_horizon_from__multi_vector_at_infinity(self_: LineAtOrigin, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__anti_wedge__multi_vector_at_origin(line_at_origin__wedge__multi_vector_at_infinity(self_, other), multi_vector_at_infinity__dual(other));
}

fn line_at_origin__anti_reject_via_horizon_from__point(self_: LineAtOrigin, other: Point) -> LineAtOrigin {
    return plane_at_origin__anti_wedge__plane_at_origin(line_at_origin__wedge__point(self_, other), point__dual(other));
}

fn line_at_origin__anti_reject_via_horizon_from__point_at_infinity(self_: LineAtOrigin, other: PointAtInfinity) -> LineAtOrigin {
    return plane_at_origin__anti_wedge__plane_at_origin(line_at_origin__wedge__point_at_infinity(self_, other), point_at_infinity__dual(other));
}

fn line_at_origin__anti_reject_via_horizon_from__transflector(self_: LineAtOrigin, other: Transflector) -> MultiVector {
    return plane_at_origin__anti_wedge__flector(line_at_origin__wedge__transflector(self_, other), transflector__dual(other));
}

fn line_at_origin__anti_reject_via_horizon_from__translator(self_: LineAtOrigin, other: Translator) -> LineAtOrigin {
    return anti_scalar__anti_wedge__line_at_origin(line_at_origin__wedge__translator(self_, other), translator__dual(other));
}

fn motor__anti_reject_via_horizon_from__flector(self_: Motor, other: Flector) -> MultiVector {
    return plane__anti_wedge__flector(motor__wedge__flector(self_, other), flector__dual(other));
}

fn motor__anti_reject_via_horizon_from__flector_at_infinity(self_: Motor, other: FlectorAtInfinity) -> MultiVector {
    return plane__anti_wedge__flector(motor__wedge__flector_at_infinity(self_, other), flector_at_infinity__dual(other));
}

fn motor__anti_reject_via_horizon_from__line(self_: Motor, other: Line) -> LineAtOrigin {
    return anti_scalar__anti_wedge__line_at_origin(motor__wedge__line(self_, other), line__dual(other));
}

fn motor__anti_reject_via_horizon_from__line_at_infinity(self_: Motor, other: LineAtInfinity) -> LineAtOrigin {
    return anti_scalar__anti_wedge__line_at_origin(motor__wedge__line_at_infinity(self_, other), line_at_infinity__dual(other));
}

fn motor__anti_reject_via_horizon_from__motor(self_: Motor, other: Motor) -> LineAtOrigin {
    return anti_scalar__anti_wedge__line_at_origin(motor__wedge__motor(self_, other), motor__dual(other));
}

fn motor__anti_reject_via_horizon_from__multi_vector(self_: Motor, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector_at_origin(motor__wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn motor__anti_reject_via_horizon_from__multi_vector_at_infinity(self_: Motor, other: MultiVectorAtInfinity) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector_at_origin(motor__wedge__multi_vector_at_infinity(self_, other), multi_vector_at_infinity__dual(other));
}

fn motor__anti_reject_via_horizon_from__point(self_: Motor, other: Point) -> Line {
    return plane__anti_wedge__plane_at_origin(motor__wedge__point(self_, other), point__dual(other));
}

fn motor__anti_reject_via_horizon_from__point_at_infinity(self_: Motor, other: PointAtInfinity) -> Line {
    return plane__anti_wedge__plane_at_origin(motor__wedge__point_at_infinity(self_, other), point_at_infinity__dual(other));
}

fn motor__anti_reject_via_horizon_from__transflector(self_: Motor, other: Transflector) -> MultiVector {
    return plane__anti_wedge__flector(motor__wedge__transflector(self_, other), transflector__dual(other));
}

fn motor__anti_reject_via_horizon_from__translator(self_: Motor, other: Translator) -> LineAtOrigin {
    return anti_scalar__anti_wedge__line_at_origin(motor__wedge__translator(self_, other), translator__dual(other));
}

fn multi_vector__anti_reject_via_horizon_from__flector(self_: MultiVector, other: Flector) -> MultiVector {
    return multi_vector__anti_wedge__flector(multi_vector__wedge__flector(self_, other), flector__dual(other));
}

fn multi_vector__anti_reject_via_horizon_from__flector_at_infinity(self_: MultiVector, other: FlectorAtInfinity) -> MultiVector {
    return multi_vector__anti_wedge__flector(multi_vector__wedge__flector_at_infinity(self_, other), flector_at_infinity__dual(other));
}

fn multi_vector__anti_reject_via_horizon_from__horizon(self_: MultiVector, other: Horizon) -> MultiVector {
    return multi_vector__anti_wedge__origin(multi_vector__wedge__horizon(self_, other), horizon__dual(other));
}

fn multi_vector__anti_reject_via_horizon_from__line(self_: MultiVector, other: Line) -> MultiVector {
    return multi_vector__anti_wedge__line_at_origin(multi_vector__wedge__line(self_, other), line__dual(other));
}

fn multi_vector__anti_reject_via_horizon_from__line_at_infinity(self_: MultiVector, other: LineAtInfinity) -> MultiVector {
    return multi_vector__anti_wedge__line_at_origin(multi_vector__wedge__line_at_infinity(self_, other), line_at_infinity__dual(other));
}

fn multi_vector__anti_reject_via_horizon_from__motor(self_: MultiVector, other: Motor) -> MultiVector {
    return multi_vector__anti_wedge__line_at_origin(multi_vector__wedge__motor(self_, other), motor__dual(other));
}

fn multi_vector__anti_reject_via_horizon_from__multi_vector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector_at_origin(multi_vector__wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn multi_vector__anti_reject_via_horizon_from__multi_vector_at_infinity(self_: MultiVector, other: MultiVectorAtInfinity) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector_at_origin(multi_vector__wedge__multi_vector_at_infinity(self_, other), multi_vector_at_infinity__dual(other));
}

fn multi_vector__anti_reject_via_horizon_from__plane(self_: MultiVector, other: Plane) -> MultiVector {
    return multi_vector__anti_wedge__origin(multi_vector__wedge__plane(self_, other), plane__dual(other));
}

fn multi_vector__anti_reject_via_horizon_from__point(self_: MultiVector, other: Point) -> MultiVector {
    return multi_vector__anti_wedge__plane_at_origin(multi_vector__wedge__point(self_, other), point__dual(other));
}

fn multi_vector__anti_reject_via_horizon_from__point_at_infinity(self_: MultiVector, other: PointAtInfinity) -> MultiVector {
    return multi_vector__anti_wedge__plane_at_origin(multi_vector__wedge__point_at_infinity(self_, other), point_at_infinity__dual(other));
}

fn multi_vector__anti_reject_via_horizon_from__transflector(self_: MultiVector, other: Transflector) -> MultiVector {
    return multi_vector__anti_wedge__flector(multi_vector__wedge__transflector(self_, other), transflector__dual(other));
}

fn multi_vector__anti_reject_via_horizon_from__translator(self_: MultiVector, other: Translator) -> MultiVector {
    return multi_vector__anti_wedge__line_at_origin(multi_vector__wedge__translator(self_, other), translator__dual(other));
}

fn multi_vector_at_infinity__anti_reject_via_horizon_from__flector(self_: MultiVectorAtInfinity, other: Flector) -> MultiVector {
    return multi_vector__anti_wedge__flector(multi_vector_at_infinity__wedge__flector(self_, other), flector__dual(other));
}

fn multi_vector_at_infinity__anti_reject_via_horizon_from__flector_at_infinity(self_: MultiVectorAtInfinity, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__anti_wedge__flector(multi_vector_at_infinity__wedge__flector_at_infinity(self_, other), flector_at_infinity__dual(other));
}

fn multi_vector_at_infinity__anti_reject_via_horizon_from__horizon(self_: MultiVectorAtInfinity, other: Horizon) -> Scalar {
    return horizon__anti_wedge__origin(multi_vector_at_infinity__wedge__horizon(self_, other), horizon__dual(other));
}

fn multi_vector_at_infinity__anti_reject_via_horizon_from__line(self_: MultiVectorAtInfinity, other: Line) -> MultiVector {
    return multi_vector__anti_wedge__line_at_origin(multi_vector_at_infinity__wedge__line(self_, other), line__dual(other));
}

fn multi_vector_at_infinity__anti_reject_via_horizon_from__line_at_infinity(self_: MultiVectorAtInfinity, other: LineAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__anti_wedge__line_at_origin(multi_vector_at_infinity__wedge__line_at_infinity(self_, other), line_at_infinity__dual(other));
}

fn multi_vector_at_infinity__anti_reject_via_horizon_from__motor(self_: MultiVectorAtInfinity, other: Motor) -> MultiVector {
    return multi_vector__anti_wedge__line_at_origin(multi_vector_at_infinity__wedge__motor(self_, other), motor__dual(other));
}

fn multi_vector_at_infinity__anti_reject_via_horizon_from__multi_vector(self_: MultiVectorAtInfinity, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector_at_origin(multi_vector_at_infinity__wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn multi_vector_at_infinity__anti_reject_via_horizon_from__multi_vector_at_infinity(self_: MultiVectorAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__anti_wedge__multi_vector_at_origin(multi_vector_at_infinity__wedge__multi_vector_at_infinity(self_, other), multi_vector_at_infinity__dual(other));
}

fn multi_vector_at_infinity__anti_reject_via_horizon_from__plane(self_: MultiVectorAtInfinity, other: Plane) -> MultiVector {
    return multi_vector__anti_wedge__origin(multi_vector_at_infinity__wedge__plane(self_, other), plane__dual(other));
}

fn multi_vector_at_infinity__anti_reject_via_horizon_from__point(self_: MultiVectorAtInfinity, other: Point) -> MultiVector {
    return multi_vector__anti_wedge__plane_at_origin(multi_vector_at_infinity__wedge__point(self_, other), point__dual(other));
}

fn multi_vector_at_infinity__anti_reject_via_horizon_from__point_at_infinity(self_: MultiVectorAtInfinity, other: PointAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__anti_wedge__plane_at_origin(multi_vector_at_infinity__wedge__point_at_infinity(self_, other), point_at_infinity__dual(other));
}

fn multi_vector_at_infinity__anti_reject_via_horizon_from__transflector(self_: MultiVectorAtInfinity, other: Transflector) -> MultiVector {
    return multi_vector__anti_wedge__flector(multi_vector_at_infinity__wedge__transflector(self_, other), transflector__dual(other));
}

fn multi_vector_at_infinity__anti_reject_via_horizon_from__translator(self_: MultiVectorAtInfinity, other: Translator) -> MultiVector {
    return multi_vector__anti_wedge__line_at_origin(multi_vector_at_infinity__wedge__translator(self_, other), translator__dual(other));
}

fn multi_vector_at_origin__anti_reject_via_horizon_from__flector(self_: MultiVectorAtOrigin, other: Flector) -> MultiVector {
    return multi_vector_at_origin__anti_wedge__flector(multi_vector_at_origin__wedge__flector(self_, other), flector__dual(other));
}

fn multi_vector_at_origin__anti_reject_via_horizon_from__flector_at_infinity(self_: MultiVectorAtOrigin, other: FlectorAtInfinity) -> MultiVector {
    return multi_vector_at_origin__anti_wedge__flector(multi_vector_at_origin__wedge__flector_at_infinity(self_, other), flector_at_infinity__dual(other));
}

fn multi_vector_at_origin__anti_reject_via_horizon_from__horizon(self_: MultiVectorAtOrigin, other: Horizon) -> Origin {
    return anti_scalar__anti_wedge__origin(multi_vector_at_origin__wedge__horizon(self_, other), horizon__dual(other));
}

fn multi_vector_at_origin__anti_reject_via_horizon_from__line(self_: MultiVectorAtOrigin, other: Line) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__anti_wedge__line_at_origin(multi_vector_at_origin__wedge__line(self_, other), line__dual(other));
}

fn multi_vector_at_origin__anti_reject_via_horizon_from__line_at_infinity(self_: MultiVectorAtOrigin, other: LineAtInfinity) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__anti_wedge__line_at_origin(multi_vector_at_origin__wedge__line_at_infinity(self_, other), line_at_infinity__dual(other));
}

fn multi_vector_at_origin__anti_reject_via_horizon_from__motor(self_: MultiVectorAtOrigin, other: Motor) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__anti_wedge__line_at_origin(multi_vector_at_origin__wedge__motor(self_, other), motor__dual(other));
}

fn multi_vector_at_origin__anti_reject_via_horizon_from__multi_vector(self_: MultiVectorAtOrigin, other: MultiVector) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__anti_wedge__multi_vector_at_origin(multi_vector_at_origin__wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn multi_vector_at_origin__anti_reject_via_horizon_from__multi_vector_at_infinity(self_: MultiVectorAtOrigin, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__anti_wedge__multi_vector_at_origin(multi_vector_at_origin__wedge__multi_vector_at_infinity(self_, other), multi_vector_at_infinity__dual(other));
}

fn multi_vector_at_origin__anti_reject_via_horizon_from__plane(self_: MultiVectorAtOrigin, other: Plane) -> Origin {
    return anti_scalar__anti_wedge__origin(multi_vector_at_origin__wedge__plane(self_, other), plane__dual(other));
}

fn multi_vector_at_origin__anti_reject_via_horizon_from__point(self_: MultiVectorAtOrigin, other: Point) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__anti_wedge__plane_at_origin(multi_vector_at_origin__wedge__point(self_, other), point__dual(other));
}

fn multi_vector_at_origin__anti_reject_via_horizon_from__point_at_infinity(self_: MultiVectorAtOrigin, other: PointAtInfinity) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__anti_wedge__plane_at_origin(multi_vector_at_origin__wedge__point_at_infinity(self_, other), point_at_infinity__dual(other));
}

fn multi_vector_at_origin__anti_reject_via_horizon_from__transflector(self_: MultiVectorAtOrigin, other: Transflector) -> MultiVector {
    return multi_vector_at_origin__anti_wedge__flector(multi_vector_at_origin__wedge__transflector(self_, other), transflector__dual(other));
}

fn multi_vector_at_origin__anti_reject_via_horizon_from__translator(self_: MultiVectorAtOrigin, other: Translator) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__anti_wedge__line_at_origin(multi_vector_at_origin__wedge__translator(self_, other), translator__dual(other));
}

fn origin__anti_reject_via_horizon_from__flector(self_: Origin, other: Flector) -> Flector {
    return rotor__anti_wedge__flector(origin__wedge__flector(self_, other), flector__dual(other));
}

fn origin__anti_reject_via_horizon_from__flector_at_infinity(self_: Origin, other: FlectorAtInfinity) -> Flector {
    return rotor__anti_wedge__flector(origin__wedge__flector_at_infinity(self_, other), flector_at_infinity__dual(other));
}

fn origin__anti_reject_via_horizon_from__horizon(self_: Origin, other: Horizon) -> Origin {
    return anti_scalar__anti_wedge__origin(origin__wedge__horizon(self_, other), horizon__dual(other));
}

fn origin__anti_reject_via_horizon_from__line(self_: Origin, other: Line) -> Origin {
    return plane_at_origin__anti_wedge__line_at_origin(origin__wedge__line(self_, other), line__dual(other));
}

fn origin__anti_reject_via_horizon_from__line_at_infinity(self_: Origin, other: LineAtInfinity) -> Origin {
    return plane_at_origin__anti_wedge__line_at_origin(origin__wedge__line_at_infinity(self_, other), line_at_infinity__dual(other));
}

fn origin__anti_reject_via_horizon_from__motor(self_: Origin, other: Motor) -> Origin {
    return plane_at_origin__anti_wedge__line_at_origin(origin__wedge__motor(self_, other), motor__dual(other));
}

fn origin__anti_reject_via_horizon_from__multi_vector(self_: Origin, other: MultiVector) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__anti_wedge__multi_vector_at_origin(origin__wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn origin__anti_reject_via_horizon_from__multi_vector_at_infinity(self_: Origin, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__anti_wedge__multi_vector_at_origin(origin__wedge__multi_vector_at_infinity(self_, other), multi_vector_at_infinity__dual(other));
}

fn origin__anti_reject_via_horizon_from__plane(self_: Origin, other: Plane) -> Origin {
    return anti_scalar__anti_wedge__origin(origin__wedge__plane(self_, other), plane__dual(other));
}

fn origin__anti_reject_via_horizon_from__point(self_: Origin, other: Point) -> Origin {
    return line_at_origin__anti_wedge__plane_at_origin(origin__wedge__point(self_, other), point__dual(other));
}

fn origin__anti_reject_via_horizon_from__point_at_infinity(self_: Origin, other: PointAtInfinity) -> Origin {
    return line_at_origin__anti_wedge__plane_at_origin(origin__wedge__point_at_infinity(self_, other), point_at_infinity__dual(other));
}

fn origin__anti_reject_via_horizon_from__transflector(self_: Origin, other: Transflector) -> Flector {
    return rotor__anti_wedge__flector(origin__wedge__transflector(self_, other), transflector__dual(other));
}

fn origin__anti_reject_via_horizon_from__translator(self_: Origin, other: Translator) -> Origin {
    return plane_at_origin__anti_wedge__line_at_origin(origin__wedge__translator(self_, other), translator__dual(other));
}

fn plane__anti_reject_via_horizon_from__flector(self_: Plane, other: Flector) -> Flector {
    return anti_scalar__anti_wedge__flector(plane__wedge__flector(self_, other), flector__dual(other));
}

fn plane__anti_reject_via_horizon_from__flector_at_infinity(self_: Plane, other: FlectorAtInfinity) -> Flector {
    return anti_scalar__anti_wedge__flector(plane__wedge__flector_at_infinity(self_, other), flector_at_infinity__dual(other));
}

fn plane__anti_reject_via_horizon_from__multi_vector(self_: Plane, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector_at_origin(plane__wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn plane__anti_reject_via_horizon_from__multi_vector_at_infinity(self_: Plane, other: MultiVectorAtInfinity) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector_at_origin(plane__wedge__multi_vector_at_infinity(self_, other), multi_vector_at_infinity__dual(other));
}

fn plane__anti_reject_via_horizon_from__point(self_: Plane, other: Point) -> PlaneAtOrigin {
    return anti_scalar__anti_wedge__plane_at_origin(plane__wedge__point(self_, other), point__dual(other));
}

fn plane__anti_reject_via_horizon_from__point_at_infinity(self_: Plane, other: PointAtInfinity) -> PlaneAtOrigin {
    return anti_scalar__anti_wedge__plane_at_origin(plane__wedge__point_at_infinity(self_, other), point_at_infinity__dual(other));
}

fn plane__anti_reject_via_horizon_from__transflector(self_: Plane, other: Transflector) -> Flector {
    return anti_scalar__anti_wedge__flector(plane__wedge__transflector(self_, other), transflector__dual(other));
}

fn plane_at_origin__anti_reject_via_horizon_from__flector(self_: PlaneAtOrigin, other: Flector) -> Flector {
    return anti_scalar__anti_wedge__flector(plane_at_origin__wedge__flector(self_, other), flector__dual(other));
}

fn plane_at_origin__anti_reject_via_horizon_from__flector_at_infinity(self_: PlaneAtOrigin, other: FlectorAtInfinity) -> Flector {
    return anti_scalar__anti_wedge__flector(plane_at_origin__wedge__flector_at_infinity(self_, other), flector_at_infinity__dual(other));
}

fn plane_at_origin__anti_reject_via_horizon_from__multi_vector(self_: PlaneAtOrigin, other: MultiVector) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__anti_wedge__multi_vector_at_origin(plane_at_origin__wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn plane_at_origin__anti_reject_via_horizon_from__multi_vector_at_infinity(self_: PlaneAtOrigin, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__anti_wedge__multi_vector_at_origin(plane_at_origin__wedge__multi_vector_at_infinity(self_, other), multi_vector_at_infinity__dual(other));
}

fn plane_at_origin__anti_reject_via_horizon_from__point(self_: PlaneAtOrigin, other: Point) -> PlaneAtOrigin {
    return anti_scalar__anti_wedge__plane_at_origin(plane_at_origin__wedge__point(self_, other), point__dual(other));
}

fn plane_at_origin__anti_reject_via_horizon_from__point_at_infinity(self_: PlaneAtOrigin, other: PointAtInfinity) -> PlaneAtOrigin {
    return anti_scalar__anti_wedge__plane_at_origin(plane_at_origin__wedge__point_at_infinity(self_, other), point_at_infinity__dual(other));
}

fn plane_at_origin__anti_reject_via_horizon_from__transflector(self_: PlaneAtOrigin, other: Transflector) -> Flector {
    return anti_scalar__anti_wedge__flector(plane_at_origin__wedge__transflector(self_, other), transflector__dual(other));
}

fn point__anti_reject_via_horizon_from__flector(self_: Point, other: Flector) -> Flector {
    return motor__anti_wedge__flector(point__wedge__flector(self_, other), flector__dual(other));
}

fn point__anti_reject_via_horizon_from__flector_at_infinity(self_: Point, other: FlectorAtInfinity) -> Flector {
    return motor__anti_wedge__flector(point__wedge__flector_at_infinity(self_, other), flector_at_infinity__dual(other));
}

fn point__anti_reject_via_horizon_from__horizon(self_: Point, other: Horizon) -> Origin {
    return anti_scalar__anti_wedge__origin(point__wedge__horizon(self_, other), horizon__dual(other));
}

fn point__anti_reject_via_horizon_from__line(self_: Point, other: Line) -> Point {
    return plane__anti_wedge__line_at_origin(point__wedge__line(self_, other), line__dual(other));
}

fn point__anti_reject_via_horizon_from__line_at_infinity(self_: Point, other: LineAtInfinity) -> Point {
    return plane__anti_wedge__line_at_origin(point__wedge__line_at_infinity(self_, other), line_at_infinity__dual(other));
}

fn point__anti_reject_via_horizon_from__motor(self_: Point, other: Motor) -> Point {
    return plane__anti_wedge__line_at_origin(point__wedge__motor(self_, other), motor__dual(other));
}

fn point__anti_reject_via_horizon_from__multi_vector(self_: Point, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector_at_origin(point__wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn point__anti_reject_via_horizon_from__multi_vector_at_infinity(self_: Point, other: MultiVectorAtInfinity) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector_at_origin(point__wedge__multi_vector_at_infinity(self_, other), multi_vector_at_infinity__dual(other));
}

fn point__anti_reject_via_horizon_from__plane(self_: Point, other: Plane) -> Origin {
    return anti_scalar__anti_wedge__origin(point__wedge__plane(self_, other), plane__dual(other));
}

fn point__anti_reject_via_horizon_from__point(self_: Point, other: Point) -> Point {
    return line__anti_wedge__plane_at_origin(point__wedge__point(self_, other), point__dual(other));
}

fn point__anti_reject_via_horizon_from__point_at_infinity(self_: Point, other: PointAtInfinity) -> Point {
    return line__anti_wedge__plane_at_origin(point__wedge__point_at_infinity(self_, other), point_at_infinity__dual(other));
}

fn point__anti_reject_via_horizon_from__transflector(self_: Point, other: Transflector) -> Flector {
    return motor__anti_wedge__flector(point__wedge__transflector(self_, other), transflector__dual(other));
}

fn point__anti_reject_via_horizon_from__translator(self_: Point, other: Translator) -> Point {
    return plane__anti_wedge__line_at_origin(point__wedge__translator(self_, other), translator__dual(other));
}

fn point_at_infinity__anti_reject_via_horizon_from__flector(self_: PointAtInfinity, other: Flector) -> Flector {
    return motor__anti_wedge__flector(point_at_infinity__wedge__flector(self_, other), flector__dual(other));
}

fn point_at_infinity__anti_reject_via_horizon_from__flector_at_infinity(self_: PointAtInfinity, other: FlectorAtInfinity) -> PointAtInfinity {
    return line_at_infinity__anti_wedge__flector(point_at_infinity__wedge__flector_at_infinity(self_, other), flector_at_infinity__dual(other));
}

fn point_at_infinity__anti_reject_via_horizon_from__line(self_: PointAtInfinity, other: Line) -> Point {
    return plane__anti_wedge__line_at_origin(point_at_infinity__wedge__line(self_, other), line__dual(other));
}

fn point_at_infinity__anti_reject_via_horizon_from__line_at_infinity(self_: PointAtInfinity, other: LineAtInfinity) -> PointAtInfinity {
    return horizon__anti_wedge__line_at_origin(point_at_infinity__wedge__line_at_infinity(self_, other), line_at_infinity__dual(other));
}

fn point_at_infinity__anti_reject_via_horizon_from__motor(self_: PointAtInfinity, other: Motor) -> Point {
    return plane__anti_wedge__line_at_origin(point_at_infinity__wedge__motor(self_, other), motor__dual(other));
}

fn point_at_infinity__anti_reject_via_horizon_from__multi_vector(self_: PointAtInfinity, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector_at_origin(point_at_infinity__wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn point_at_infinity__anti_reject_via_horizon_from__multi_vector_at_infinity(self_: PointAtInfinity, other: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__anti_wedge__multi_vector_at_origin(point_at_infinity__wedge__multi_vector_at_infinity(self_, other), multi_vector_at_infinity__dual(other));
}

fn point_at_infinity__anti_reject_via_horizon_from__plane(self_: PointAtInfinity, other: Plane) -> Origin {
    return anti_scalar__anti_wedge__origin(point_at_infinity__wedge__plane(self_, other), plane__dual(other));
}

fn point_at_infinity__anti_reject_via_horizon_from__point(self_: PointAtInfinity, other: Point) -> Point {
    return line__anti_wedge__plane_at_origin(point_at_infinity__wedge__point(self_, other), point__dual(other));
}

fn point_at_infinity__anti_reject_via_horizon_from__point_at_infinity(self_: PointAtInfinity, other: PointAtInfinity) -> PointAtInfinity {
    return line_at_infinity__anti_wedge__plane_at_origin(point_at_infinity__wedge__point_at_infinity(self_, other), point_at_infinity__dual(other));
}

fn point_at_infinity__anti_reject_via_horizon_from__transflector(self_: PointAtInfinity, other: Transflector) -> Flector {
    return translator__anti_wedge__flector(point_at_infinity__wedge__transflector(self_, other), transflector__dual(other));
}

fn point_at_infinity__anti_reject_via_horizon_from__translator(self_: PointAtInfinity, other: Translator) -> PointAtInfinity {
    return horizon__anti_wedge__line_at_origin(point_at_infinity__wedge__translator(self_, other), translator__dual(other));
}

fn rotor__anti_reject_via_horizon_from__flector(self_: Rotor, other: Flector) -> MultiVector {
    return plane_at_origin__anti_wedge__flector(rotor__wedge__flector(self_, other), flector__dual(other));
}

fn rotor__anti_reject_via_horizon_from__flector_at_infinity(self_: Rotor, other: FlectorAtInfinity) -> MultiVector {
    return plane_at_origin__anti_wedge__flector(rotor__wedge__flector_at_infinity(self_, other), flector_at_infinity__dual(other));
}

fn rotor__anti_reject_via_horizon_from__line(self_: Rotor, other: Line) -> LineAtOrigin {
    return anti_scalar__anti_wedge__line_at_origin(rotor__wedge__line(self_, other), line__dual(other));
}

fn rotor__anti_reject_via_horizon_from__line_at_infinity(self_: Rotor, other: LineAtInfinity) -> LineAtOrigin {
    return anti_scalar__anti_wedge__line_at_origin(rotor__wedge__line_at_infinity(self_, other), line_at_infinity__dual(other));
}

fn rotor__anti_reject_via_horizon_from__motor(self_: Rotor, other: Motor) -> LineAtOrigin {
    return anti_scalar__anti_wedge__line_at_origin(rotor__wedge__motor(self_, other), motor__dual(other));
}

fn rotor__anti_reject_via_horizon_from__multi_vector(self_: Rotor, other: MultiVector) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__anti_wedge__multi_vector_at_origin(rotor__wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn rotor__anti_reject_via_horizon_from__multi_vector_at_infinity(self_: Rotor, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__anti_wedge__multi_vector_at_origin(rotor__wedge__multi_vector_at_infinity(self_, other), multi_vector_at_infinity__dual(other));
}

fn rotor__anti_reject_via_horizon_from__point(self_: Rotor, other: Point) -> LineAtOrigin {
    return plane_at_origin__anti_wedge__plane_at_origin(rotor__wedge__point(self_, other), point__dual(other));
}

fn rotor__anti_reject_via_horizon_from__point_at_infinity(self_: Rotor, other: PointAtInfinity) -> LineAtOrigin {
    return plane_at_origin__anti_wedge__plane_at_origin(rotor__wedge__point_at_infinity(self_, other), point_at_infinity__dual(other));
}

fn rotor__anti_reject_via_horizon_from__transflector(self_: Rotor, other: Transflector) -> MultiVector {
    return plane_at_origin__anti_wedge__flector(rotor__wedge__transflector(self_, other), transflector__dual(other));
}

fn rotor__anti_reject_via_horizon_from__translator(self_: Rotor, other: Translator) -> LineAtOrigin {
    return anti_scalar__anti_wedge__line_at_origin(rotor__wedge__translator(self_, other), translator__dual(other));
}

fn transflector__anti_reject_via_horizon_from__flector(self_: Transflector, other: Flector) -> Flector {
    return motor__anti_wedge__flector(transflector__wedge__flector(self_, other), flector__dual(other));
}

fn transflector__anti_reject_via_horizon_from__flector_at_infinity(self_: Transflector, other: FlectorAtInfinity) -> Flector {
    return translator__anti_wedge__flector(transflector__wedge__flector_at_infinity(self_, other), flector_at_infinity__dual(other));
}

fn transflector__anti_reject_via_horizon_from__line(self_: Transflector, other: Line) -> Point {
    return plane__anti_wedge__line_at_origin(transflector__wedge__line(self_, other), line__dual(other));
}

fn transflector__anti_reject_via_horizon_from__line_at_infinity(self_: Transflector, other: LineAtInfinity) -> PointAtInfinity {
    return horizon__anti_wedge__line_at_origin(transflector__wedge__line_at_infinity(self_, other), line_at_infinity__dual(other));
}

fn transflector__anti_reject_via_horizon_from__motor(self_: Transflector, other: Motor) -> Point {
    return plane__anti_wedge__line_at_origin(transflector__wedge__motor(self_, other), motor__dual(other));
}

fn transflector__anti_reject_via_horizon_from__multi_vector(self_: Transflector, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector_at_origin(transflector__wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn transflector__anti_reject_via_horizon_from__multi_vector_at_infinity(self_: Transflector, other: MultiVectorAtInfinity) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector_at_origin(transflector__wedge__multi_vector_at_infinity(self_, other), multi_vector_at_infinity__dual(other));
}

fn transflector__anti_reject_via_horizon_from__plane(self_: Transflector, other: Plane) -> Origin {
    return anti_scalar__anti_wedge__origin(transflector__wedge__plane(self_, other), plane__dual(other));
}

fn transflector__anti_reject_via_horizon_from__point(self_: Transflector, other: Point) -> Flector {
    return motor__anti_wedge__plane_at_origin(transflector__wedge__point(self_, other), point__dual(other));
}

fn transflector__anti_reject_via_horizon_from__point_at_infinity(self_: Transflector, other: PointAtInfinity) -> Transflector {
    return translator__anti_wedge__plane_at_origin(transflector__wedge__point_at_infinity(self_, other), point_at_infinity__dual(other));
}

fn transflector__anti_reject_via_horizon_from__transflector(self_: Transflector, other: Transflector) -> Flector {
    return translator__anti_wedge__flector(transflector__wedge__transflector(self_, other), transflector__dual(other));
}

fn transflector__anti_reject_via_horizon_from__translator(self_: Transflector, other: Translator) -> PointAtInfinity {
    return horizon__anti_wedge__line_at_origin(transflector__wedge__translator(self_, other), translator__dual(other));
}

fn translator__anti_reject_via_horizon_from__flector(self_: Translator, other: Flector) -> MultiVector {
    return plane__anti_wedge__flector(translator__wedge__flector(self_, other), flector__dual(other));
}

fn translator__anti_reject_via_horizon_from__flector_at_infinity(self_: Translator, other: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return horizon__anti_wedge__flector(translator__wedge__flector_at_infinity(self_, other), flector_at_infinity__dual(other));
}

fn translator__anti_reject_via_horizon_from__line(self_: Translator, other: Line) -> LineAtOrigin {
    return anti_scalar__anti_wedge__line_at_origin(translator__wedge__line(self_, other), line__dual(other));
}

fn translator__anti_reject_via_horizon_from__motor(self_: Translator, other: Motor) -> LineAtOrigin {
    return anti_scalar__anti_wedge__line_at_origin(translator__wedge__motor(self_, other), motor__dual(other));
}

fn translator__anti_reject_via_horizon_from__multi_vector(self_: Translator, other: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector_at_origin(translator__wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn translator__anti_reject_via_horizon_from__multi_vector_at_infinity(self_: Translator, other: MultiVectorAtInfinity) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector_at_origin(translator__wedge__multi_vector_at_infinity(self_, other), multi_vector_at_infinity__dual(other));
}

fn translator__anti_reject_via_horizon_from__point(self_: Translator, other: Point) -> Line {
    return plane__anti_wedge__plane_at_origin(translator__wedge__point(self_, other), point__dual(other));
}

fn translator__anti_reject_via_horizon_from__point_at_infinity(self_: Translator, other: PointAtInfinity) -> LineAtInfinity {
    return horizon__anti_wedge__plane_at_origin(translator__wedge__point_at_infinity(self_, other), point_at_infinity__dual(other));
}

fn translator__anti_reject_via_horizon_from__transflector(self_: Translator, other: Transflector) -> MultiVectorAtInfinity {
    return horizon__anti_wedge__flector(translator__wedge__transflector(self_, other), transflector__dual(other));
}

fn flector__reject_orthogonally_from__flector(self_: Flector, other: Flector) -> MultiVector {
    return multi_vector__wedge__flector_at_infinity(flector__anti_wedge__flector(self_, other), flector__anti_dual(other));
}

fn flector__reject_orthogonally_from__line(self_: Flector, other: Line) -> Plane {
    return point__wedge__line_at_infinity(flector__anti_wedge__line(self_, other), line__anti_dual(other));
}

fn flector__reject_orthogonally_from__line_at_origin(self_: Flector, other: LineAtOrigin) -> Plane {
    return point__wedge__line_at_infinity(flector__anti_wedge__line_at_origin(self_, other), line_at_origin__anti_dual(other));
}

fn flector__reject_orthogonally_from__motor(self_: Flector, other: Motor) -> MultiVector {
    return flector__wedge__multi_vector_at_infinity(flector__anti_wedge__motor(self_, other), motor__anti_dual(other));
}

fn flector__reject_orthogonally_from__multi_vector(self_: Flector, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(flector__anti_wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn flector__reject_orthogonally_from__multi_vector_at_origin(self_: Flector, other: MultiVectorAtOrigin) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(flector__anti_wedge__multi_vector_at_origin(self_, other), multi_vector_at_origin__anti_dual(other));
}

fn flector__reject_orthogonally_from__origin(self_: Flector, other: Origin) -> Horizon {
    return scalar__wedge__horizon(flector__anti_wedge__origin(self_, other), origin__anti_dual(other));
}

fn flector__reject_orthogonally_from__plane(self_: Flector, other: Plane) -> MultiVector {
    return multi_vector__wedge__point_at_infinity(flector__anti_wedge__plane(self_, other), plane__anti_dual(other));
}

fn flector__reject_orthogonally_from__plane_at_origin(self_: Flector, other: PlaneAtOrigin) -> MultiVector {
    return multi_vector__wedge__point_at_infinity(flector__anti_wedge__plane_at_origin(self_, other), plane_at_origin__anti_dual(other));
}

fn flector__reject_orthogonally_from__point(self_: Flector, other: Point) -> Horizon {
    return scalar__wedge__horizon(flector__anti_wedge__point(self_, other), point__anti_dual(other));
}

fn flector__reject_orthogonally_from__rotor(self_: Flector, other: Rotor) -> MultiVector {
    return flector__wedge__multi_vector_at_infinity(flector__anti_wedge__rotor(self_, other), rotor__anti_dual(other));
}

fn flector__reject_orthogonally_from__transflector(self_: Flector, other: Transflector) -> MultiVector {
    return multi_vector__wedge__point_at_infinity(flector__anti_wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn flector_at_infinity__reject_orthogonally_from__flector(self_: FlectorAtInfinity, other: Flector) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__wedge__flector_at_infinity(flector_at_infinity__anti_wedge__flector(self_, other), flector__anti_dual(other));
}

fn flector_at_infinity__reject_orthogonally_from__line(self_: FlectorAtInfinity, other: Line) -> Horizon {
    return point_at_infinity__wedge__line_at_infinity(flector_at_infinity__anti_wedge__line(self_, other), line__anti_dual(other));
}

fn flector_at_infinity__reject_orthogonally_from__line_at_origin(self_: FlectorAtInfinity, other: LineAtOrigin) -> Horizon {
    return point_at_infinity__wedge__line_at_infinity(flector_at_infinity__anti_wedge__line_at_origin(self_, other), line_at_origin__anti_dual(other));
}

fn flector_at_infinity__reject_orthogonally_from__motor(self_: FlectorAtInfinity, other: Motor) -> MultiVectorAtInfinity {
    return flector_at_infinity__wedge__multi_vector_at_infinity(flector_at_infinity__anti_wedge__motor(self_, other), motor__anti_dual(other));
}

fn flector_at_infinity__reject_orthogonally_from__multi_vector(self_: FlectorAtInfinity, other: MultiVector) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__wedge__multi_vector_at_infinity(flector_at_infinity__anti_wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn flector_at_infinity__reject_orthogonally_from__multi_vector_at_origin(self_: FlectorAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__wedge__multi_vector_at_infinity(flector_at_infinity__anti_wedge__multi_vector_at_origin(self_, other), multi_vector_at_origin__anti_dual(other));
}

fn flector_at_infinity__reject_orthogonally_from__origin(self_: FlectorAtInfinity, other: Origin) -> Horizon {
    return scalar__wedge__horizon(flector_at_infinity__anti_wedge__origin(self_, other), origin__anti_dual(other));
}

fn flector_at_infinity__reject_orthogonally_from__plane(self_: FlectorAtInfinity, other: Plane) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__wedge__point_at_infinity(flector_at_infinity__anti_wedge__plane(self_, other), plane__anti_dual(other));
}

fn flector_at_infinity__reject_orthogonally_from__plane_at_origin(self_: FlectorAtInfinity, other: PlaneAtOrigin) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__wedge__point_at_infinity(flector_at_infinity__anti_wedge__plane_at_origin(self_, other), plane_at_origin__anti_dual(other));
}

fn flector_at_infinity__reject_orthogonally_from__point(self_: FlectorAtInfinity, other: Point) -> Horizon {
    return scalar__wedge__horizon(flector_at_infinity__anti_wedge__point(self_, other), point__anti_dual(other));
}

fn flector_at_infinity__reject_orthogonally_from__rotor(self_: FlectorAtInfinity, other: Rotor) -> MultiVectorAtInfinity {
    return flector_at_infinity__wedge__multi_vector_at_infinity(flector_at_infinity__anti_wedge__rotor(self_, other), rotor__anti_dual(other));
}

fn flector_at_infinity__reject_orthogonally_from__transflector(self_: FlectorAtInfinity, other: Transflector) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__wedge__point_at_infinity(flector_at_infinity__anti_wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn horizon__reject_orthogonally_from__flector(self_: Horizon, other: Flector) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__wedge__flector_at_infinity(horizon__anti_wedge__flector(self_, other), flector__anti_dual(other));
}

fn horizon__reject_orthogonally_from__line(self_: Horizon, other: Line) -> Horizon {
    return point_at_infinity__wedge__line_at_infinity(horizon__anti_wedge__line(self_, other), line__anti_dual(other));
}

fn horizon__reject_orthogonally_from__line_at_origin(self_: Horizon, other: LineAtOrigin) -> Horizon {
    return point_at_infinity__wedge__line_at_infinity(horizon__anti_wedge__line_at_origin(self_, other), line_at_origin__anti_dual(other));
}

fn horizon__reject_orthogonally_from__motor(self_: Horizon, other: Motor) -> MultiVectorAtInfinity {
    return flector_at_infinity__wedge__multi_vector_at_infinity(horizon__anti_wedge__motor(self_, other), motor__anti_dual(other));
}

fn horizon__reject_orthogonally_from__multi_vector(self_: Horizon, other: MultiVector) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__wedge__multi_vector_at_infinity(horizon__anti_wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn horizon__reject_orthogonally_from__multi_vector_at_origin(self_: Horizon, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__wedge__multi_vector_at_infinity(horizon__anti_wedge__multi_vector_at_origin(self_, other), multi_vector_at_origin__anti_dual(other));
}

fn horizon__reject_orthogonally_from__origin(self_: Horizon, other: Origin) -> Horizon {
    return scalar__wedge__horizon(horizon__anti_wedge__origin(self_, other), origin__anti_dual(other));
}

fn horizon__reject_orthogonally_from__plane(self_: Horizon, other: Plane) -> Horizon {
    return line_at_infinity__wedge__point_at_infinity(horizon__anti_wedge__plane(self_, other), plane__anti_dual(other));
}

fn horizon__reject_orthogonally_from__plane_at_origin(self_: Horizon, other: PlaneAtOrigin) -> Horizon {
    return line_at_infinity__wedge__point_at_infinity(horizon__anti_wedge__plane_at_origin(self_, other), plane_at_origin__anti_dual(other));
}

fn horizon__reject_orthogonally_from__point(self_: Horizon, other: Point) -> Horizon {
    return scalar__wedge__horizon(horizon__anti_wedge__point(self_, other), point__anti_dual(other));
}

fn horizon__reject_orthogonally_from__rotor(self_: Horizon, other: Rotor) -> MultiVectorAtInfinity {
    return flector_at_infinity__wedge__multi_vector_at_infinity(horizon__anti_wedge__rotor(self_, other), rotor__anti_dual(other));
}

fn horizon__reject_orthogonally_from__transflector(self_: Horizon, other: Transflector) -> Horizon {
    return line_at_infinity__wedge__point_at_infinity(horizon__anti_wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn line__reject_orthogonally_from__flector(self_: Line, other: Flector) -> Motor {
    return point__wedge__flector_at_infinity(line__anti_wedge__flector(self_, other), flector__anti_dual(other));
}

fn line__reject_orthogonally_from__line(self_: Line, other: Line) -> LineAtInfinity {
    return scalar__wedge__line_at_infinity(line__anti_wedge__line(self_, other), line__anti_dual(other));
}

fn line__reject_orthogonally_from__line_at_origin(self_: Line, other: LineAtOrigin) -> LineAtInfinity {
    return scalar__wedge__line_at_infinity(line__anti_wedge__line_at_origin(self_, other), line_at_origin__anti_dual(other));
}

fn line__reject_orthogonally_from__motor(self_: Line, other: Motor) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(line__anti_wedge__motor(self_, other), motor__anti_dual(other));
}

fn line__reject_orthogonally_from__multi_vector(self_: Line, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(line__anti_wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn line__reject_orthogonally_from__multi_vector_at_origin(self_: Line, other: MultiVectorAtOrigin) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(line__anti_wedge__multi_vector_at_origin(self_, other), multi_vector_at_origin__anti_dual(other));
}

fn line__reject_orthogonally_from__plane(self_: Line, other: Plane) -> Line {
    return point__wedge__point_at_infinity(line__anti_wedge__plane(self_, other), plane__anti_dual(other));
}

fn line__reject_orthogonally_from__plane_at_origin(self_: Line, other: PlaneAtOrigin) -> Line {
    return point__wedge__point_at_infinity(line__anti_wedge__plane_at_origin(self_, other), plane_at_origin__anti_dual(other));
}

fn line__reject_orthogonally_from__rotor(self_: Line, other: Rotor) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(line__anti_wedge__rotor(self_, other), rotor__anti_dual(other));
}

fn line__reject_orthogonally_from__transflector(self_: Line, other: Transflector) -> Line {
    return point__wedge__point_at_infinity(line__anti_wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn line_at_infinity__reject_orthogonally_from__flector(self_: LineAtInfinity, other: Flector) -> LineAtInfinity {
    return point_at_infinity__wedge__flector_at_infinity(line_at_infinity__anti_wedge__flector(self_, other), flector__anti_dual(other));
}

fn line_at_infinity__reject_orthogonally_from__line(self_: LineAtInfinity, other: Line) -> LineAtInfinity {
    return scalar__wedge__line_at_infinity(line_at_infinity__anti_wedge__line(self_, other), line__anti_dual(other));
}

fn line_at_infinity__reject_orthogonally_from__line_at_origin(self_: LineAtInfinity, other: LineAtOrigin) -> LineAtInfinity {
    return scalar__wedge__line_at_infinity(line_at_infinity__anti_wedge__line_at_origin(self_, other), line_at_origin__anti_dual(other));
}

fn line_at_infinity__reject_orthogonally_from__motor(self_: LineAtInfinity, other: Motor) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__wedge__multi_vector_at_infinity(line_at_infinity__anti_wedge__motor(self_, other), motor__anti_dual(other));
}

fn line_at_infinity__reject_orthogonally_from__multi_vector(self_: LineAtInfinity, other: MultiVector) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__wedge__multi_vector_at_infinity(line_at_infinity__anti_wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn line_at_infinity__reject_orthogonally_from__multi_vector_at_origin(self_: LineAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__wedge__multi_vector_at_infinity(line_at_infinity__anti_wedge__multi_vector_at_origin(self_, other), multi_vector_at_origin__anti_dual(other));
}

fn line_at_infinity__reject_orthogonally_from__plane(self_: LineAtInfinity, other: Plane) -> LineAtInfinity {
    return point_at_infinity__wedge__point_at_infinity(line_at_infinity__anti_wedge__plane(self_, other), plane__anti_dual(other));
}

fn line_at_infinity__reject_orthogonally_from__plane_at_origin(self_: LineAtInfinity, other: PlaneAtOrigin) -> LineAtInfinity {
    return point_at_infinity__wedge__point_at_infinity(line_at_infinity__anti_wedge__plane_at_origin(self_, other), plane_at_origin__anti_dual(other));
}

fn line_at_infinity__reject_orthogonally_from__rotor(self_: LineAtInfinity, other: Rotor) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__wedge__multi_vector_at_infinity(line_at_infinity__anti_wedge__rotor(self_, other), rotor__anti_dual(other));
}

fn line_at_infinity__reject_orthogonally_from__transflector(self_: LineAtInfinity, other: Transflector) -> LineAtInfinity {
    return point_at_infinity__wedge__point_at_infinity(line_at_infinity__anti_wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn line_at_origin__reject_orthogonally_from__flector(self_: LineAtOrigin, other: Flector) -> Motor {
    return point__wedge__flector_at_infinity(line_at_origin__anti_wedge__flector(self_, other), flector__anti_dual(other));
}

fn line_at_origin__reject_orthogonally_from__line(self_: LineAtOrigin, other: Line) -> LineAtInfinity {
    return scalar__wedge__line_at_infinity(line_at_origin__anti_wedge__line(self_, other), line__anti_dual(other));
}

fn line_at_origin__reject_orthogonally_from__motor(self_: LineAtOrigin, other: Motor) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(line_at_origin__anti_wedge__motor(self_, other), motor__anti_dual(other));
}

fn line_at_origin__reject_orthogonally_from__multi_vector(self_: LineAtOrigin, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(line_at_origin__anti_wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn line_at_origin__reject_orthogonally_from__multi_vector_at_origin(self_: LineAtOrigin, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__wedge__multi_vector_at_infinity(line_at_origin__anti_wedge__multi_vector_at_origin(self_, other), multi_vector_at_origin__anti_dual(other));
}

fn line_at_origin__reject_orthogonally_from__plane(self_: LineAtOrigin, other: Plane) -> Line {
    return point__wedge__point_at_infinity(line_at_origin__anti_wedge__plane(self_, other), plane__anti_dual(other));
}

fn line_at_origin__reject_orthogonally_from__plane_at_origin(self_: LineAtOrigin, other: PlaneAtOrigin) -> LineAtOrigin {
    return origin__wedge__point_at_infinity(line_at_origin__anti_wedge__plane_at_origin(self_, other), plane_at_origin__anti_dual(other));
}

fn line_at_origin__reject_orthogonally_from__rotor(self_: LineAtOrigin, other: Rotor) -> MultiVectorAtOrigin {
    return line_at_origin__wedge__multi_vector_at_infinity(line_at_origin__anti_wedge__rotor(self_, other), rotor__anti_dual(other));
}

fn line_at_origin__reject_orthogonally_from__transflector(self_: LineAtOrigin, other: Transflector) -> Line {
    return point__wedge__point_at_infinity(line_at_origin__anti_wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn motor__reject_orthogonally_from__flector(self_: Motor, other: Flector) -> Motor {
    return flector__wedge__flector_at_infinity(motor__anti_wedge__flector(self_, other), flector__anti_dual(other));
}

fn motor__reject_orthogonally_from__line(self_: Motor, other: Line) -> MultiVector {
    return multi_vector__wedge__line_at_infinity(motor__anti_wedge__line(self_, other), line__anti_dual(other));
}

fn motor__reject_orthogonally_from__line_at_origin(self_: Motor, other: LineAtOrigin) -> MultiVector {
    return multi_vector__wedge__line_at_infinity(motor__anti_wedge__line_at_origin(self_, other), line_at_origin__anti_dual(other));
}

fn motor__reject_orthogonally_from__motor(self_: Motor, other: Motor) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(motor__anti_wedge__motor(self_, other), motor__anti_dual(other));
}

fn motor__reject_orthogonally_from__multi_vector(self_: Motor, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(motor__anti_wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn motor__reject_orthogonally_from__multi_vector_at_origin(self_: Motor, other: MultiVectorAtOrigin) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(motor__anti_wedge__multi_vector_at_origin(self_, other), multi_vector_at_origin__anti_dual(other));
}

fn motor__reject_orthogonally_from__origin(self_: Motor, other: Origin) -> AntiScalar {
    return origin__wedge__horizon(motor__anti_wedge__origin(self_, other), origin__anti_dual(other));
}

fn motor__reject_orthogonally_from__plane(self_: Motor, other: Plane) -> Motor {
    return flector__wedge__point_at_infinity(motor__anti_wedge__plane(self_, other), plane__anti_dual(other));
}

fn motor__reject_orthogonally_from__plane_at_origin(self_: Motor, other: PlaneAtOrigin) -> Motor {
    return flector__wedge__point_at_infinity(motor__anti_wedge__plane_at_origin(self_, other), plane_at_origin__anti_dual(other));
}

fn motor__reject_orthogonally_from__point(self_: Motor, other: Point) -> AntiScalar {
    return point__wedge__horizon(motor__anti_wedge__point(self_, other), point__anti_dual(other));
}

fn motor__reject_orthogonally_from__rotor(self_: Motor, other: Rotor) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(motor__anti_wedge__rotor(self_, other), rotor__anti_dual(other));
}

fn motor__reject_orthogonally_from__transflector(self_: Motor, other: Transflector) -> Motor {
    return flector__wedge__point_at_infinity(motor__anti_wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn multi_vector__reject_orthogonally_from__flector(self_: MultiVector, other: Flector) -> MultiVector {
    return multi_vector__wedge__flector_at_infinity(multi_vector__anti_wedge__flector(self_, other), flector__anti_dual(other));
}

fn multi_vector__reject_orthogonally_from__line(self_: MultiVector, other: Line) -> MultiVector {
    return multi_vector__wedge__line_at_infinity(multi_vector__anti_wedge__line(self_, other), line__anti_dual(other));
}

fn multi_vector__reject_orthogonally_from__line_at_origin(self_: MultiVector, other: LineAtOrigin) -> MultiVector {
    return multi_vector__wedge__line_at_infinity(multi_vector__anti_wedge__line_at_origin(self_, other), line_at_origin__anti_dual(other));
}

fn multi_vector__reject_orthogonally_from__motor(self_: MultiVector, other: Motor) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(multi_vector__anti_wedge__motor(self_, other), motor__anti_dual(other));
}

fn multi_vector__reject_orthogonally_from__multi_vector(self_: MultiVector, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(multi_vector__anti_wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn multi_vector__reject_orthogonally_from__multi_vector_at_origin(self_: MultiVector, other: MultiVectorAtOrigin) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(multi_vector__anti_wedge__multi_vector_at_origin(self_, other), multi_vector_at_origin__anti_dual(other));
}

fn multi_vector__reject_orthogonally_from__origin(self_: MultiVector, other: Origin) -> MultiVector {
    return multi_vector__wedge__horizon(multi_vector__anti_wedge__origin(self_, other), origin__anti_dual(other));
}

fn multi_vector__reject_orthogonally_from__plane(self_: MultiVector, other: Plane) -> MultiVector {
    return multi_vector__wedge__point_at_infinity(multi_vector__anti_wedge__plane(self_, other), plane__anti_dual(other));
}

fn multi_vector__reject_orthogonally_from__plane_at_origin(self_: MultiVector, other: PlaneAtOrigin) -> MultiVector {
    return multi_vector__wedge__point_at_infinity(multi_vector__anti_wedge__plane_at_origin(self_, other), plane_at_origin__anti_dual(other));
}

fn multi_vector__reject_orthogonally_from__point(self_: MultiVector, other: Point) -> MultiVector {
    return multi_vector__wedge__horizon(multi_vector__anti_wedge__point(self_, other), point__anti_dual(other));
}

fn multi_vector__reject_orthogonally_from__rotor(self_: MultiVector, other: Rotor) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(multi_vector__anti_wedge__rotor(self_, other), rotor__anti_dual(other));
}

fn multi_vector__reject_orthogonally_from__transflector(self_: MultiVector, other: Transflector) -> MultiVector {
    return multi_vector__wedge__point_at_infinity(multi_vector__anti_wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn multi_vector_at_infinity__reject_orthogonally_from__flector(self_: MultiVectorAtInfinity, other: Flector) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__wedge__flector_at_infinity(multi_vector_at_infinity__anti_wedge__flector(self_, other), flector__anti_dual(other));
}

fn multi_vector_at_infinity__reject_orthogonally_from__line(self_: MultiVectorAtInfinity, other: Line) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__wedge__line_at_infinity(multi_vector_at_infinity__anti_wedge__line(self_, other), line__anti_dual(other));
}

fn multi_vector_at_infinity__reject_orthogonally_from__line_at_origin(self_: MultiVectorAtInfinity, other: LineAtOrigin) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__wedge__line_at_infinity(multi_vector_at_infinity__anti_wedge__line_at_origin(self_, other), line_at_origin__anti_dual(other));
}

fn multi_vector_at_infinity__reject_orthogonally_from__motor(self_: MultiVectorAtInfinity, other: Motor) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__wedge__multi_vector_at_infinity(multi_vector_at_infinity__anti_wedge__motor(self_, other), motor__anti_dual(other));
}

fn multi_vector_at_infinity__reject_orthogonally_from__multi_vector(self_: MultiVectorAtInfinity, other: MultiVector) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__wedge__multi_vector_at_infinity(multi_vector_at_infinity__anti_wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn multi_vector_at_infinity__reject_orthogonally_from__multi_vector_at_origin(self_: MultiVectorAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__wedge__multi_vector_at_infinity(multi_vector_at_infinity__anti_wedge__multi_vector_at_origin(self_, other), multi_vector_at_origin__anti_dual(other));
}

fn multi_vector_at_infinity__reject_orthogonally_from__origin(self_: MultiVectorAtInfinity, other: Origin) -> Horizon {
    return scalar__wedge__horizon(multi_vector_at_infinity__anti_wedge__origin(self_, other), origin__anti_dual(other));
}

fn multi_vector_at_infinity__reject_orthogonally_from__plane(self_: MultiVectorAtInfinity, other: Plane) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__wedge__point_at_infinity(multi_vector_at_infinity__anti_wedge__plane(self_, other), plane__anti_dual(other));
}

fn multi_vector_at_infinity__reject_orthogonally_from__plane_at_origin(self_: MultiVectorAtInfinity, other: PlaneAtOrigin) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__wedge__point_at_infinity(multi_vector_at_infinity__anti_wedge__plane_at_origin(self_, other), plane_at_origin__anti_dual(other));
}

fn multi_vector_at_infinity__reject_orthogonally_from__point(self_: MultiVectorAtInfinity, other: Point) -> Horizon {
    return scalar__wedge__horizon(multi_vector_at_infinity__anti_wedge__point(self_, other), point__anti_dual(other));
}

fn multi_vector_at_infinity__reject_orthogonally_from__rotor(self_: MultiVectorAtInfinity, other: Rotor) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__wedge__multi_vector_at_infinity(multi_vector_at_infinity__anti_wedge__rotor(self_, other), rotor__anti_dual(other));
}

fn multi_vector_at_infinity__reject_orthogonally_from__transflector(self_: MultiVectorAtInfinity, other: Transflector) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__wedge__point_at_infinity(multi_vector_at_infinity__anti_wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn multi_vector_at_origin__reject_orthogonally_from__flector(self_: MultiVectorAtOrigin, other: Flector) -> MultiVector {
    return multi_vector__wedge__flector_at_infinity(multi_vector_at_origin__anti_wedge__flector(self_, other), flector__anti_dual(other));
}

fn multi_vector_at_origin__reject_orthogonally_from__line(self_: MultiVectorAtOrigin, other: Line) -> MultiVector {
    return multi_vector__wedge__line_at_infinity(multi_vector_at_origin__anti_wedge__line(self_, other), line__anti_dual(other));
}

fn multi_vector_at_origin__reject_orthogonally_from__line_at_origin(self_: MultiVectorAtOrigin, other: LineAtOrigin) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__wedge__line_at_infinity(multi_vector_at_origin__anti_wedge__line_at_origin(self_, other), line_at_origin__anti_dual(other));
}

fn multi_vector_at_origin__reject_orthogonally_from__motor(self_: MultiVectorAtOrigin, other: Motor) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(multi_vector_at_origin__anti_wedge__motor(self_, other), motor__anti_dual(other));
}

fn multi_vector_at_origin__reject_orthogonally_from__multi_vector(self_: MultiVectorAtOrigin, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(multi_vector_at_origin__anti_wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn multi_vector_at_origin__reject_orthogonally_from__multi_vector_at_origin(self_: MultiVectorAtOrigin, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__wedge__multi_vector_at_infinity(multi_vector_at_origin__anti_wedge__multi_vector_at_origin(self_, other), multi_vector_at_origin__anti_dual(other));
}

fn multi_vector_at_origin__reject_orthogonally_from__origin(self_: MultiVectorAtOrigin, other: Origin) -> AntiScalar {
    return origin__wedge__horizon(multi_vector_at_origin__anti_wedge__origin(self_, other), origin__anti_dual(other));
}

fn multi_vector_at_origin__reject_orthogonally_from__plane(self_: MultiVectorAtOrigin, other: Plane) -> MultiVector {
    return multi_vector__wedge__point_at_infinity(multi_vector_at_origin__anti_wedge__plane(self_, other), plane__anti_dual(other));
}

fn multi_vector_at_origin__reject_orthogonally_from__plane_at_origin(self_: MultiVectorAtOrigin, other: PlaneAtOrigin) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__wedge__point_at_infinity(multi_vector_at_origin__anti_wedge__plane_at_origin(self_, other), plane_at_origin__anti_dual(other));
}

fn multi_vector_at_origin__reject_orthogonally_from__point(self_: MultiVectorAtOrigin, other: Point) -> MultiVector {
    return multi_vector__wedge__horizon(multi_vector_at_origin__anti_wedge__point(self_, other), point__anti_dual(other));
}

fn multi_vector_at_origin__reject_orthogonally_from__rotor(self_: MultiVectorAtOrigin, other: Rotor) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__wedge__multi_vector_at_infinity(multi_vector_at_origin__anti_wedge__rotor(self_, other), rotor__anti_dual(other));
}

fn multi_vector_at_origin__reject_orthogonally_from__transflector(self_: MultiVectorAtOrigin, other: Transflector) -> MultiVector {
    return multi_vector__wedge__point_at_infinity(multi_vector_at_origin__anti_wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn origin__reject_orthogonally_from__flector(self_: Origin, other: Flector) -> FlectorAtInfinity {
    return scalar__wedge__flector_at_infinity(origin__anti_wedge__flector(self_, other), flector__anti_dual(other));
}

fn origin__reject_orthogonally_from__motor(self_: Origin, other: Motor) -> MultiVectorAtOrigin {
    return origin__wedge__multi_vector_at_infinity(origin__anti_wedge__motor(self_, other), motor__anti_dual(other));
}

fn origin__reject_orthogonally_from__multi_vector(self_: Origin, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(origin__anti_wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn origin__reject_orthogonally_from__multi_vector_at_origin(self_: Origin, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return origin__wedge__multi_vector_at_infinity(origin__anti_wedge__multi_vector_at_origin(self_, other), multi_vector_at_origin__anti_dual(other));
}

fn origin__reject_orthogonally_from__plane(self_: Origin, other: Plane) -> PointAtInfinity {
    return scalar__wedge__point_at_infinity(origin__anti_wedge__plane(self_, other), plane__anti_dual(other));
}

fn origin__reject_orthogonally_from__rotor(self_: Origin, other: Rotor) -> MultiVectorAtOrigin {
    return origin__wedge__multi_vector_at_infinity(origin__anti_wedge__rotor(self_, other), rotor__anti_dual(other));
}

fn origin__reject_orthogonally_from__transflector(self_: Origin, other: Transflector) -> PointAtInfinity {
    return scalar__wedge__point_at_infinity(origin__anti_wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn plane__reject_orthogonally_from__flector(self_: Plane, other: Flector) -> MultiVector {
    return multi_vector__wedge__flector_at_infinity(plane__anti_wedge__flector(self_, other), flector__anti_dual(other));
}

fn plane__reject_orthogonally_from__line(self_: Plane, other: Line) -> Plane {
    return point__wedge__line_at_infinity(plane__anti_wedge__line(self_, other), line__anti_dual(other));
}

fn plane__reject_orthogonally_from__line_at_origin(self_: Plane, other: LineAtOrigin) -> Plane {
    return point__wedge__line_at_infinity(plane__anti_wedge__line_at_origin(self_, other), line_at_origin__anti_dual(other));
}

fn plane__reject_orthogonally_from__motor(self_: Plane, other: Motor) -> MultiVector {
    return flector__wedge__multi_vector_at_infinity(plane__anti_wedge__motor(self_, other), motor__anti_dual(other));
}

fn plane__reject_orthogonally_from__multi_vector(self_: Plane, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(plane__anti_wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn plane__reject_orthogonally_from__multi_vector_at_origin(self_: Plane, other: MultiVectorAtOrigin) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(plane__anti_wedge__multi_vector_at_origin(self_, other), multi_vector_at_origin__anti_dual(other));
}

fn plane__reject_orthogonally_from__origin(self_: Plane, other: Origin) -> Horizon {
    return scalar__wedge__horizon(plane__anti_wedge__origin(self_, other), origin__anti_dual(other));
}

fn plane__reject_orthogonally_from__plane(self_: Plane, other: Plane) -> Plane {
    return line__wedge__point_at_infinity(plane__anti_wedge__plane(self_, other), plane__anti_dual(other));
}

fn plane__reject_orthogonally_from__plane_at_origin(self_: Plane, other: PlaneAtOrigin) -> Plane {
    return line__wedge__point_at_infinity(plane__anti_wedge__plane_at_origin(self_, other), plane_at_origin__anti_dual(other));
}

fn plane__reject_orthogonally_from__point(self_: Plane, other: Point) -> Horizon {
    return scalar__wedge__horizon(plane__anti_wedge__point(self_, other), point__anti_dual(other));
}

fn plane__reject_orthogonally_from__rotor(self_: Plane, other: Rotor) -> MultiVector {
    return flector__wedge__multi_vector_at_infinity(plane__anti_wedge__rotor(self_, other), rotor__anti_dual(other));
}

fn plane__reject_orthogonally_from__transflector(self_: Plane, other: Transflector) -> MultiVector {
    return multi_vector__wedge__point_at_infinity(plane__anti_wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn plane_at_origin__reject_orthogonally_from__flector(self_: PlaneAtOrigin, other: Flector) -> MultiVector {
    return multi_vector__wedge__flector_at_infinity(plane_at_origin__anti_wedge__flector(self_, other), flector__anti_dual(other));
}

fn plane_at_origin__reject_orthogonally_from__line(self_: PlaneAtOrigin, other: Line) -> Plane {
    return point__wedge__line_at_infinity(plane_at_origin__anti_wedge__line(self_, other), line__anti_dual(other));
}

fn plane_at_origin__reject_orthogonally_from__line_at_origin(self_: PlaneAtOrigin, other: LineAtOrigin) -> PlaneAtOrigin {
    return origin__wedge__line_at_infinity(plane_at_origin__anti_wedge__line_at_origin(self_, other), line_at_origin__anti_dual(other));
}

fn plane_at_origin__reject_orthogonally_from__motor(self_: PlaneAtOrigin, other: Motor) -> MultiVector {
    return flector__wedge__multi_vector_at_infinity(plane_at_origin__anti_wedge__motor(self_, other), motor__anti_dual(other));
}

fn plane_at_origin__reject_orthogonally_from__multi_vector(self_: PlaneAtOrigin, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(plane_at_origin__anti_wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn plane_at_origin__reject_orthogonally_from__multi_vector_at_origin(self_: PlaneAtOrigin, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__wedge__multi_vector_at_infinity(plane_at_origin__anti_wedge__multi_vector_at_origin(self_, other), multi_vector_at_origin__anti_dual(other));
}

fn plane_at_origin__reject_orthogonally_from__plane(self_: PlaneAtOrigin, other: Plane) -> Plane {
    return line__wedge__point_at_infinity(plane_at_origin__anti_wedge__plane(self_, other), plane__anti_dual(other));
}

fn plane_at_origin__reject_orthogonally_from__plane_at_origin(self_: PlaneAtOrigin, other: PlaneAtOrigin) -> PlaneAtOrigin {
    return line_at_origin__wedge__point_at_infinity(plane_at_origin__anti_wedge__plane_at_origin(self_, other), plane_at_origin__anti_dual(other));
}

fn plane_at_origin__reject_orthogonally_from__point(self_: PlaneAtOrigin, other: Point) -> Horizon {
    return scalar__wedge__horizon(plane_at_origin__anti_wedge__point(self_, other), point__anti_dual(other));
}

fn plane_at_origin__reject_orthogonally_from__rotor(self_: PlaneAtOrigin, other: Rotor) -> MultiVector {
    return flector__wedge__multi_vector_at_infinity(plane_at_origin__anti_wedge__rotor(self_, other), rotor__anti_dual(other));
}

fn plane_at_origin__reject_orthogonally_from__transflector(self_: PlaneAtOrigin, other: Transflector) -> MultiVector {
    return multi_vector__wedge__point_at_infinity(plane_at_origin__anti_wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn point__reject_orthogonally_from__flector(self_: Point, other: Flector) -> FlectorAtInfinity {
    return scalar__wedge__flector_at_infinity(point__anti_wedge__flector(self_, other), flector__anti_dual(other));
}

fn point__reject_orthogonally_from__motor(self_: Point, other: Motor) -> MultiVector {
    return point__wedge__multi_vector_at_infinity(point__anti_wedge__motor(self_, other), motor__anti_dual(other));
}

fn point__reject_orthogonally_from__multi_vector(self_: Point, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(point__anti_wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn point__reject_orthogonally_from__multi_vector_at_origin(self_: Point, other: MultiVectorAtOrigin) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(point__anti_wedge__multi_vector_at_origin(self_, other), multi_vector_at_origin__anti_dual(other));
}

fn point__reject_orthogonally_from__plane(self_: Point, other: Plane) -> PointAtInfinity {
    return scalar__wedge__point_at_infinity(point__anti_wedge__plane(self_, other), plane__anti_dual(other));
}

fn point__reject_orthogonally_from__plane_at_origin(self_: Point, other: PlaneAtOrigin) -> PointAtInfinity {
    return scalar__wedge__point_at_infinity(point__anti_wedge__plane_at_origin(self_, other), plane_at_origin__anti_dual(other));
}

fn point__reject_orthogonally_from__rotor(self_: Point, other: Rotor) -> MultiVector {
    return point__wedge__multi_vector_at_infinity(point__anti_wedge__rotor(self_, other), rotor__anti_dual(other));
}

fn point__reject_orthogonally_from__transflector(self_: Point, other: Transflector) -> PointAtInfinity {
    return scalar__wedge__point_at_infinity(point__anti_wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn point_at_infinity__reject_orthogonally_from__flector(self_: PointAtInfinity, other: Flector) -> FlectorAtInfinity {
    return scalar__wedge__flector_at_infinity(point_at_infinity__anti_wedge__flector(self_, other), flector__anti_dual(other));
}

fn point_at_infinity__reject_orthogonally_from__motor(self_: PointAtInfinity, other: Motor) -> MultiVectorAtInfinity {
    return point_at_infinity__wedge__multi_vector_at_infinity(point_at_infinity__anti_wedge__motor(self_, other), motor__anti_dual(other));
}

fn point_at_infinity__reject_orthogonally_from__multi_vector(self_: PointAtInfinity, other: MultiVector) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__wedge__multi_vector_at_infinity(point_at_infinity__anti_wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn point_at_infinity__reject_orthogonally_from__multi_vector_at_origin(self_: PointAtInfinity, other: MultiVectorAtOrigin) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__wedge__multi_vector_at_infinity(point_at_infinity__anti_wedge__multi_vector_at_origin(self_, other), multi_vector_at_origin__anti_dual(other));
}

fn point_at_infinity__reject_orthogonally_from__plane(self_: PointAtInfinity, other: Plane) -> PointAtInfinity {
    return scalar__wedge__point_at_infinity(point_at_infinity__anti_wedge__plane(self_, other), plane__anti_dual(other));
}

fn point_at_infinity__reject_orthogonally_from__plane_at_origin(self_: PointAtInfinity, other: PlaneAtOrigin) -> PointAtInfinity {
    return scalar__wedge__point_at_infinity(point_at_infinity__anti_wedge__plane_at_origin(self_, other), plane_at_origin__anti_dual(other));
}

fn point_at_infinity__reject_orthogonally_from__rotor(self_: PointAtInfinity, other: Rotor) -> MultiVectorAtInfinity {
    return point_at_infinity__wedge__multi_vector_at_infinity(point_at_infinity__anti_wedge__rotor(self_, other), rotor__anti_dual(other));
}

fn point_at_infinity__reject_orthogonally_from__transflector(self_: PointAtInfinity, other: Transflector) -> PointAtInfinity {
    return scalar__wedge__point_at_infinity(point_at_infinity__anti_wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn rotor__reject_orthogonally_from__flector(self_: Rotor, other: Flector) -> Motor {
    return flector__wedge__flector_at_infinity(rotor__anti_wedge__flector(self_, other), flector__anti_dual(other));
}

fn rotor__reject_orthogonally_from__line(self_: Rotor, other: Line) -> MultiVector {
    return multi_vector__wedge__line_at_infinity(rotor__anti_wedge__line(self_, other), line__anti_dual(other));
}

fn rotor__reject_orthogonally_from__line_at_origin(self_: Rotor, other: LineAtOrigin) -> AntiScalar {
    return line_at_origin__wedge__line_at_infinity(rotor__anti_wedge__line_at_origin(self_, other), line_at_origin__anti_dual(other));
}

fn rotor__reject_orthogonally_from__motor(self_: Rotor, other: Motor) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(rotor__anti_wedge__motor(self_, other), motor__anti_dual(other));
}

fn rotor__reject_orthogonally_from__multi_vector(self_: Rotor, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(rotor__anti_wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn rotor__reject_orthogonally_from__multi_vector_at_origin(self_: Rotor, other: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__wedge__multi_vector_at_infinity(rotor__anti_wedge__multi_vector_at_origin(self_, other), multi_vector_at_origin__anti_dual(other));
}

fn rotor__reject_orthogonally_from__origin(self_: Rotor, other: Origin) -> AntiScalar {
    return origin__wedge__horizon(rotor__anti_wedge__origin(self_, other), origin__anti_dual(other));
}

fn rotor__reject_orthogonally_from__plane(self_: Rotor, other: Plane) -> Motor {
    return flector__wedge__point_at_infinity(rotor__anti_wedge__plane(self_, other), plane__anti_dual(other));
}

fn rotor__reject_orthogonally_from__plane_at_origin(self_: Rotor, other: PlaneAtOrigin) -> Motor {
    return flector__wedge__point_at_infinity(rotor__anti_wedge__plane_at_origin(self_, other), plane_at_origin__anti_dual(other));
}

fn rotor__reject_orthogonally_from__point(self_: Rotor, other: Point) -> AntiScalar {
    return point__wedge__horizon(rotor__anti_wedge__point(self_, other), point__anti_dual(other));
}

fn rotor__reject_orthogonally_from__rotor(self_: Rotor, other: Rotor) -> MultiVectorAtOrigin {
    return rotor__wedge__multi_vector_at_infinity(rotor__anti_wedge__rotor(self_, other), rotor__anti_dual(other));
}

fn rotor__reject_orthogonally_from__transflector(self_: Rotor, other: Transflector) -> Motor {
    return flector__wedge__point_at_infinity(rotor__anti_wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn transflector__reject_orthogonally_from__flector(self_: Transflector, other: Flector) -> MultiVector {
    return multi_vector__wedge__flector_at_infinity(transflector__anti_wedge__flector(self_, other), flector__anti_dual(other));
}

fn transflector__reject_orthogonally_from__line(self_: Transflector, other: Line) -> Plane {
    return point__wedge__line_at_infinity(transflector__anti_wedge__line(self_, other), line__anti_dual(other));
}

fn transflector__reject_orthogonally_from__line_at_origin(self_: Transflector, other: LineAtOrigin) -> Plane {
    return point__wedge__line_at_infinity(transflector__anti_wedge__line_at_origin(self_, other), line_at_origin__anti_dual(other));
}

fn transflector__reject_orthogonally_from__motor(self_: Transflector, other: Motor) -> MultiVector {
    return flector__wedge__multi_vector_at_infinity(transflector__anti_wedge__motor(self_, other), motor__anti_dual(other));
}

fn transflector__reject_orthogonally_from__multi_vector(self_: Transflector, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(transflector__anti_wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn transflector__reject_orthogonally_from__multi_vector_at_origin(self_: Transflector, other: MultiVectorAtOrigin) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(transflector__anti_wedge__multi_vector_at_origin(self_, other), multi_vector_at_origin__anti_dual(other));
}

fn transflector__reject_orthogonally_from__origin(self_: Transflector, other: Origin) -> Horizon {
    return scalar__wedge__horizon(transflector__anti_wedge__origin(self_, other), origin__anti_dual(other));
}

fn transflector__reject_orthogonally_from__plane(self_: Transflector, other: Plane) -> MultiVector {
    return multi_vector__wedge__point_at_infinity(transflector__anti_wedge__plane(self_, other), plane__anti_dual(other));
}

fn transflector__reject_orthogonally_from__plane_at_origin(self_: Transflector, other: PlaneAtOrigin) -> MultiVector {
    return multi_vector__wedge__point_at_infinity(transflector__anti_wedge__plane_at_origin(self_, other), plane_at_origin__anti_dual(other));
}

fn transflector__reject_orthogonally_from__point(self_: Transflector, other: Point) -> Horizon {
    return scalar__wedge__horizon(transflector__anti_wedge__point(self_, other), point__anti_dual(other));
}

fn transflector__reject_orthogonally_from__rotor(self_: Transflector, other: Rotor) -> MultiVector {
    return flector__wedge__multi_vector_at_infinity(transflector__anti_wedge__rotor(self_, other), rotor__anti_dual(other));
}

fn transflector__reject_orthogonally_from__transflector(self_: Transflector, other: Transflector) -> MultiVector {
    return multi_vector__wedge__point_at_infinity(transflector__anti_wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn translator__reject_orthogonally_from__flector(self_: Translator, other: Flector) -> Motor {
    return flector__wedge__flector_at_infinity(translator__anti_wedge__flector(self_, other), flector__anti_dual(other));
}

fn translator__reject_orthogonally_from__line(self_: Translator, other: Line) -> MultiVector {
    return multi_vector__wedge__line_at_infinity(translator__anti_wedge__line(self_, other), line__anti_dual(other));
}

fn translator__reject_orthogonally_from__line_at_origin(self_: Translator, other: LineAtOrigin) -> MultiVector {
    return multi_vector__wedge__line_at_infinity(translator__anti_wedge__line_at_origin(self_, other), line_at_origin__anti_dual(other));
}

fn translator__reject_orthogonally_from__motor(self_: Translator, other: Motor) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(translator__anti_wedge__motor(self_, other), motor__anti_dual(other));
}

fn translator__reject_orthogonally_from__multi_vector(self_: Translator, other: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(translator__anti_wedge__multi_vector(self_, other), multi_vector__anti_dual(other));
}

fn translator__reject_orthogonally_from__multi_vector_at_origin(self_: Translator, other: MultiVectorAtOrigin) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(translator__anti_wedge__multi_vector_at_origin(self_, other), multi_vector_at_origin__anti_dual(other));
}

fn translator__reject_orthogonally_from__origin(self_: Translator, other: Origin) -> AntiScalar {
    return origin__wedge__horizon(translator__anti_wedge__origin(self_, other), origin__anti_dual(other));
}

fn translator__reject_orthogonally_from__plane(self_: Translator, other: Plane) -> Translator {
    return transflector__wedge__point_at_infinity(translator__anti_wedge__plane(self_, other), plane__anti_dual(other));
}

fn translator__reject_orthogonally_from__plane_at_origin(self_: Translator, other: PlaneAtOrigin) -> Translator {
    return transflector__wedge__point_at_infinity(translator__anti_wedge__plane_at_origin(self_, other), plane_at_origin__anti_dual(other));
}

fn translator__reject_orthogonally_from__point(self_: Translator, other: Point) -> AntiScalar {
    return point__wedge__horizon(translator__anti_wedge__point(self_, other), point__anti_dual(other));
}

fn translator__reject_orthogonally_from__rotor(self_: Translator, other: Rotor) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(translator__anti_wedge__rotor(self_, other), rotor__anti_dual(other));
}

fn translator__reject_orthogonally_from__transflector(self_: Translator, other: Transflector) -> Translator {
    return transflector__wedge__point_at_infinity(translator__anti_wedge__transflector(self_, other), transflector__anti_dual(other));
}

fn flector__reject_via_origin_from__flector(self_: Flector, other: Flector) -> MultiVector {
    return multi_vector__wedge__flector(flector__anti_wedge__flector(self_, other), flector__dual(other));
}

fn flector__reject_via_origin_from__flector_at_infinity(self_: Flector, other: FlectorAtInfinity) -> MultiVector {
    return multi_vector_at_infinity__wedge__flector(flector__anti_wedge__flector_at_infinity(self_, other), flector_at_infinity__dual(other));
}

fn flector__reject_via_origin_from__horizon(self_: Flector, other: Horizon) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__wedge__origin(flector__anti_wedge__horizon(self_, other), horizon__dual(other));
}

fn flector__reject_via_origin_from__line(self_: Flector, other: Line) -> PlaneAtOrigin {
    return point__wedge__line_at_origin(flector__anti_wedge__line(self_, other), line__dual(other));
}

fn flector__reject_via_origin_from__line_at_infinity(self_: Flector, other: LineAtInfinity) -> PlaneAtOrigin {
    return point_at_infinity__wedge__line_at_origin(flector__anti_wedge__line_at_infinity(self_, other), line_at_infinity__dual(other));
}

fn flector__reject_via_origin_from__motor(self_: Flector, other: Motor) -> PlaneAtOrigin {
    return flector__wedge__line_at_origin(flector__anti_wedge__motor(self_, other), motor__dual(other));
}

fn flector__reject_via_origin_from__multi_vector(self_: Flector, other: MultiVector) -> MultiVectorAtOrigin {
    return multi_vector__wedge__multi_vector_at_origin(flector__anti_wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn flector__reject_via_origin_from__multi_vector_at_infinity(self_: Flector, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__wedge__multi_vector_at_origin(flector__anti_wedge__multi_vector_at_infinity(self_, other), multi_vector_at_infinity__dual(other));
}

fn flector__reject_via_origin_from__plane(self_: Flector, other: Plane) -> MultiVectorAtOrigin {
    return multi_vector__wedge__origin(flector__anti_wedge__plane(self_, other), plane__dual(other));
}

fn flector__reject_via_origin_from__point(self_: Flector, other: Point) -> PlaneAtOrigin {
    return scalar__wedge__plane_at_origin(flector__anti_wedge__point(self_, other), point__dual(other));
}

fn flector__reject_via_origin_from__point_at_infinity(self_: Flector, other: PointAtInfinity) -> PlaneAtOrigin {
    return scalar__wedge__plane_at_origin(flector__anti_wedge__point_at_infinity(self_, other), point_at_infinity__dual(other));
}

fn flector__reject_via_origin_from__transflector(self_: Flector, other: Transflector) -> MultiVector {
    return multi_vector__wedge__flector(flector__anti_wedge__transflector(self_, other), transflector__dual(other));
}

fn flector__reject_via_origin_from__translator(self_: Flector, other: Translator) -> PlaneAtOrigin {
    return flector__wedge__line_at_origin(flector__anti_wedge__translator(self_, other), translator__dual(other));
}

fn flector_at_infinity__reject_via_origin_from__flector(self_: FlectorAtInfinity, other: Flector) -> MultiVector {
    return multi_vector_at_infinity__wedge__flector(flector_at_infinity__anti_wedge__flector(self_, other), flector__dual(other));
}

fn flector_at_infinity__reject_via_origin_from__line(self_: FlectorAtInfinity, other: Line) -> PlaneAtOrigin {
    return point_at_infinity__wedge__line_at_origin(flector_at_infinity__anti_wedge__line(self_, other), line__dual(other));
}

fn flector_at_infinity__reject_via_origin_from__motor(self_: FlectorAtInfinity, other: Motor) -> PlaneAtOrigin {
    return flector_at_infinity__wedge__line_at_origin(flector_at_infinity__anti_wedge__motor(self_, other), motor__dual(other));
}

fn flector_at_infinity__reject_via_origin_from__multi_vector(self_: FlectorAtInfinity, other: MultiVector) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__wedge__multi_vector_at_origin(flector_at_infinity__anti_wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn flector_at_infinity__reject_via_origin_from__plane(self_: FlectorAtInfinity, other: Plane) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__wedge__origin(flector_at_infinity__anti_wedge__plane(self_, other), plane__dual(other));
}

fn flector_at_infinity__reject_via_origin_from__point(self_: FlectorAtInfinity, other: Point) -> PlaneAtOrigin {
    return scalar__wedge__plane_at_origin(flector_at_infinity__anti_wedge__point(self_, other), point__dual(other));
}

fn flector_at_infinity__reject_via_origin_from__transflector(self_: FlectorAtInfinity, other: Transflector) -> MultiVector {
    return multi_vector_at_infinity__wedge__flector(flector_at_infinity__anti_wedge__transflector(self_, other), transflector__dual(other));
}

fn flector_at_infinity__reject_via_origin_from__translator(self_: FlectorAtInfinity, other: Translator) -> PlaneAtOrigin {
    return flector_at_infinity__wedge__line_at_origin(flector_at_infinity__anti_wedge__translator(self_, other), translator__dual(other));
}

fn horizon__reject_via_origin_from__flector(self_: Horizon, other: Flector) -> MultiVector {
    return multi_vector_at_infinity__wedge__flector(horizon__anti_wedge__flector(self_, other), flector__dual(other));
}

fn horizon__reject_via_origin_from__line(self_: Horizon, other: Line) -> PlaneAtOrigin {
    return point_at_infinity__wedge__line_at_origin(horizon__anti_wedge__line(self_, other), line__dual(other));
}

fn horizon__reject_via_origin_from__motor(self_: Horizon, other: Motor) -> PlaneAtOrigin {
    return flector_at_infinity__wedge__line_at_origin(horizon__anti_wedge__motor(self_, other), motor__dual(other));
}

fn horizon__reject_via_origin_from__multi_vector(self_: Horizon, other: MultiVector) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__wedge__multi_vector_at_origin(horizon__anti_wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn horizon__reject_via_origin_from__plane(self_: Horizon, other: Plane) -> PlaneAtOrigin {
    return line_at_infinity__wedge__origin(horizon__anti_wedge__plane(self_, other), plane__dual(other));
}

fn horizon__reject_via_origin_from__point(self_: Horizon, other: Point) -> PlaneAtOrigin {
    return scalar__wedge__plane_at_origin(horizon__anti_wedge__point(self_, other), point__dual(other));
}

fn horizon__reject_via_origin_from__transflector(self_: Horizon, other: Transflector) -> Plane {
    return line_at_infinity__wedge__flector(horizon__anti_wedge__transflector(self_, other), transflector__dual(other));
}

fn line__reject_via_origin_from__flector(self_: Line, other: Flector) -> Motor {
    return point__wedge__flector(line__anti_wedge__flector(self_, other), flector__dual(other));
}

fn line__reject_via_origin_from__flector_at_infinity(self_: Line, other: FlectorAtInfinity) -> Motor {
    return point_at_infinity__wedge__flector(line__anti_wedge__flector_at_infinity(self_, other), flector_at_infinity__dual(other));
}

fn line__reject_via_origin_from__horizon(self_: Line, other: Horizon) -> LineAtOrigin {
    return point_at_infinity__wedge__origin(line__anti_wedge__horizon(self_, other), horizon__dual(other));
}

fn line__reject_via_origin_from__line(self_: Line, other: Line) -> LineAtOrigin {
    return scalar__wedge__line_at_origin(line__anti_wedge__line(self_, other), line__dual(other));
}

fn line__reject_via_origin_from__line_at_infinity(self_: Line, other: LineAtInfinity) -> LineAtOrigin {
    return scalar__wedge__line_at_origin(line__anti_wedge__line_at_infinity(self_, other), line_at_infinity__dual(other));
}

fn line__reject_via_origin_from__motor(self_: Line, other: Motor) -> MultiVectorAtOrigin {
    return multi_vector__wedge__line_at_origin(line__anti_wedge__motor(self_, other), motor__dual(other));
}

fn line__reject_via_origin_from__multi_vector(self_: Line, other: MultiVector) -> MultiVectorAtOrigin {
    return multi_vector__wedge__multi_vector_at_origin(line__anti_wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn line__reject_via_origin_from__multi_vector_at_infinity(self_: Line, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__wedge__multi_vector_at_origin(line__anti_wedge__multi_vector_at_infinity(self_, other), multi_vector_at_infinity__dual(other));
}

fn line__reject_via_origin_from__plane(self_: Line, other: Plane) -> LineAtOrigin {
    return point__wedge__origin(line__anti_wedge__plane(self_, other), plane__dual(other));
}

fn line__reject_via_origin_from__transflector(self_: Line, other: Transflector) -> Motor {
    return point__wedge__flector(line__anti_wedge__transflector(self_, other), transflector__dual(other));
}

fn line__reject_via_origin_from__translator(self_: Line, other: Translator) -> MultiVectorAtOrigin {
    return multi_vector__wedge__line_at_origin(line__anti_wedge__translator(self_, other), translator__dual(other));
}

fn line_at_infinity__reject_via_origin_from__flector(self_: LineAtInfinity, other: Flector) -> Motor {
    return point_at_infinity__wedge__flector(line_at_infinity__anti_wedge__flector(self_, other), flector__dual(other));
}

fn line_at_infinity__reject_via_origin_from__line(self_: LineAtInfinity, other: Line) -> LineAtOrigin {
    return scalar__wedge__line_at_origin(line_at_infinity__anti_wedge__line(self_, other), line__dual(other));
}

fn line_at_infinity__reject_via_origin_from__motor(self_: LineAtInfinity, other: Motor) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__wedge__line_at_origin(line_at_infinity__anti_wedge__motor(self_, other), motor__dual(other));
}

fn line_at_infinity__reject_via_origin_from__multi_vector(self_: LineAtInfinity, other: MultiVector) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__wedge__multi_vector_at_origin(line_at_infinity__anti_wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn line_at_infinity__reject_via_origin_from__plane(self_: LineAtInfinity, other: Plane) -> LineAtOrigin {
    return point_at_infinity__wedge__origin(line_at_infinity__anti_wedge__plane(self_, other), plane__dual(other));
}

fn line_at_infinity__reject_via_origin_from__transflector(self_: LineAtInfinity, other: Transflector) -> Motor {
    return point_at_infinity__wedge__flector(line_at_infinity__anti_wedge__transflector(self_, other), transflector__dual(other));
}

fn line_at_infinity__reject_via_origin_from__translator(self_: LineAtInfinity, other: Translator) -> AntiScalar {
    return line_at_infinity__wedge__line_at_origin(line_at_infinity__anti_wedge__translator(self_, other), translator__dual(other));
}

fn line_at_origin__reject_via_origin_from__flector(self_: LineAtOrigin, other: Flector) -> Motor {
    return point__wedge__flector(line_at_origin__anti_wedge__flector(self_, other), flector__dual(other));
}

fn line_at_origin__reject_via_origin_from__flector_at_infinity(self_: LineAtOrigin, other: FlectorAtInfinity) -> Motor {
    return point_at_infinity__wedge__flector(line_at_origin__anti_wedge__flector_at_infinity(self_, other), flector_at_infinity__dual(other));
}

fn line_at_origin__reject_via_origin_from__horizon(self_: LineAtOrigin, other: Horizon) -> LineAtOrigin {
    return point_at_infinity__wedge__origin(line_at_origin__anti_wedge__horizon(self_, other), horizon__dual(other));
}

fn line_at_origin__reject_via_origin_from__line(self_: LineAtOrigin, other: Line) -> LineAtOrigin {
    return scalar__wedge__line_at_origin(line_at_origin__anti_wedge__line(self_, other), line__dual(other));
}

fn line_at_origin__reject_via_origin_from__line_at_infinity(self_: LineAtOrigin, other: LineAtInfinity) -> LineAtOrigin {
    return scalar__wedge__line_at_origin(line_at_origin__anti_wedge__line_at_infinity(self_, other), line_at_infinity__dual(other));
}

fn line_at_origin__reject_via_origin_from__motor(self_: LineAtOrigin, other: Motor) -> MultiVectorAtOrigin {
    return multi_vector__wedge__line_at_origin(line_at_origin__anti_wedge__motor(self_, other), motor__dual(other));
}

fn line_at_origin__reject_via_origin_from__multi_vector(self_: LineAtOrigin, other: MultiVector) -> MultiVectorAtOrigin {
    return multi_vector__wedge__multi_vector_at_origin(line_at_origin__anti_wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn line_at_origin__reject_via_origin_from__multi_vector_at_infinity(self_: LineAtOrigin, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__wedge__multi_vector_at_origin(line_at_origin__anti_wedge__multi_vector_at_infinity(self_, other), multi_vector_at_infinity__dual(other));
}

fn line_at_origin__reject_via_origin_from__plane(self_: LineAtOrigin, other: Plane) -> LineAtOrigin {
    return point__wedge__origin(line_at_origin__anti_wedge__plane(self_, other), plane__dual(other));
}

fn line_at_origin__reject_via_origin_from__transflector(self_: LineAtOrigin, other: Transflector) -> Motor {
    return point__wedge__flector(line_at_origin__anti_wedge__transflector(self_, other), transflector__dual(other));
}

fn line_at_origin__reject_via_origin_from__translator(self_: LineAtOrigin, other: Translator) -> MultiVectorAtOrigin {
    return multi_vector__wedge__line_at_origin(line_at_origin__anti_wedge__translator(self_, other), translator__dual(other));
}

fn motor__reject_via_origin_from__flector(self_: Motor, other: Flector) -> Motor {
    return flector__wedge__flector(motor__anti_wedge__flector(self_, other), flector__dual(other));
}

fn motor__reject_via_origin_from__flector_at_infinity(self_: Motor, other: FlectorAtInfinity) -> Motor {
    return flector_at_infinity__wedge__flector(motor__anti_wedge__flector_at_infinity(self_, other), flector_at_infinity__dual(other));
}

fn motor__reject_via_origin_from__horizon(self_: Motor, other: Horizon) -> Rotor {
    return flector_at_infinity__wedge__origin(motor__anti_wedge__horizon(self_, other), horizon__dual(other));
}

fn motor__reject_via_origin_from__line(self_: Motor, other: Line) -> MultiVectorAtOrigin {
    return multi_vector__wedge__line_at_origin(motor__anti_wedge__line(self_, other), line__dual(other));
}

fn motor__reject_via_origin_from__line_at_infinity(self_: Motor, other: LineAtInfinity) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__wedge__line_at_origin(motor__anti_wedge__line_at_infinity(self_, other), line_at_infinity__dual(other));
}

fn motor__reject_via_origin_from__motor(self_: Motor, other: Motor) -> MultiVectorAtOrigin {
    return multi_vector__wedge__line_at_origin(motor__anti_wedge__motor(self_, other), motor__dual(other));
}

fn motor__reject_via_origin_from__multi_vector(self_: Motor, other: MultiVector) -> MultiVectorAtOrigin {
    return multi_vector__wedge__multi_vector_at_origin(motor__anti_wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn motor__reject_via_origin_from__multi_vector_at_infinity(self_: Motor, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__wedge__multi_vector_at_origin(motor__anti_wedge__multi_vector_at_infinity(self_, other), multi_vector_at_infinity__dual(other));
}

fn motor__reject_via_origin_from__plane(self_: Motor, other: Plane) -> Rotor {
    return flector__wedge__origin(motor__anti_wedge__plane(self_, other), plane__dual(other));
}

fn motor__reject_via_origin_from__point(self_: Motor, other: Point) -> AntiScalar {
    return point__wedge__plane_at_origin(motor__anti_wedge__point(self_, other), point__dual(other));
}

fn motor__reject_via_origin_from__point_at_infinity(self_: Motor, other: PointAtInfinity) -> AntiScalar {
    return point_at_infinity__wedge__plane_at_origin(motor__anti_wedge__point_at_infinity(self_, other), point_at_infinity__dual(other));
}

fn motor__reject_via_origin_from__transflector(self_: Motor, other: Transflector) -> Motor {
    return flector__wedge__flector(motor__anti_wedge__transflector(self_, other), transflector__dual(other));
}

fn motor__reject_via_origin_from__translator(self_: Motor, other: Translator) -> MultiVectorAtOrigin {
    return multi_vector__wedge__line_at_origin(motor__anti_wedge__translator(self_, other), translator__dual(other));
}

fn multi_vector__reject_via_origin_from__flector(self_: MultiVector, other: Flector) -> MultiVector {
    return multi_vector__wedge__flector(multi_vector__anti_wedge__flector(self_, other), flector__dual(other));
}

fn multi_vector__reject_via_origin_from__flector_at_infinity(self_: MultiVector, other: FlectorAtInfinity) -> MultiVector {
    return multi_vector_at_infinity__wedge__flector(multi_vector__anti_wedge__flector_at_infinity(self_, other), flector_at_infinity__dual(other));
}

fn multi_vector__reject_via_origin_from__horizon(self_: MultiVector, other: Horizon) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__wedge__origin(multi_vector__anti_wedge__horizon(self_, other), horizon__dual(other));
}

fn multi_vector__reject_via_origin_from__line(self_: MultiVector, other: Line) -> MultiVectorAtOrigin {
    return multi_vector__wedge__line_at_origin(multi_vector__anti_wedge__line(self_, other), line__dual(other));
}

fn multi_vector__reject_via_origin_from__line_at_infinity(self_: MultiVector, other: LineAtInfinity) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__wedge__line_at_origin(multi_vector__anti_wedge__line_at_infinity(self_, other), line_at_infinity__dual(other));
}

fn multi_vector__reject_via_origin_from__motor(self_: MultiVector, other: Motor) -> MultiVectorAtOrigin {
    return multi_vector__wedge__line_at_origin(multi_vector__anti_wedge__motor(self_, other), motor__dual(other));
}

fn multi_vector__reject_via_origin_from__multi_vector(self_: MultiVector, other: MultiVector) -> MultiVectorAtOrigin {
    return multi_vector__wedge__multi_vector_at_origin(multi_vector__anti_wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn multi_vector__reject_via_origin_from__multi_vector_at_infinity(self_: MultiVector, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__wedge__multi_vector_at_origin(multi_vector__anti_wedge__multi_vector_at_infinity(self_, other), multi_vector_at_infinity__dual(other));
}

fn multi_vector__reject_via_origin_from__plane(self_: MultiVector, other: Plane) -> MultiVectorAtOrigin {
    return multi_vector__wedge__origin(multi_vector__anti_wedge__plane(self_, other), plane__dual(other));
}

fn multi_vector__reject_via_origin_from__point(self_: MultiVector, other: Point) -> MultiVectorAtOrigin {
    return multi_vector__wedge__plane_at_origin(multi_vector__anti_wedge__point(self_, other), point__dual(other));
}

fn multi_vector__reject_via_origin_from__point_at_infinity(self_: MultiVector, other: PointAtInfinity) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__wedge__plane_at_origin(multi_vector__anti_wedge__point_at_infinity(self_, other), point_at_infinity__dual(other));
}

fn multi_vector__reject_via_origin_from__transflector(self_: MultiVector, other: Transflector) -> MultiVector {
    return multi_vector__wedge__flector(multi_vector__anti_wedge__transflector(self_, other), transflector__dual(other));
}

fn multi_vector__reject_via_origin_from__translator(self_: MultiVector, other: Translator) -> MultiVectorAtOrigin {
    return multi_vector__wedge__line_at_origin(multi_vector__anti_wedge__translator(self_, other), translator__dual(other));
}

fn multi_vector_at_infinity__reject_via_origin_from__flector(self_: MultiVectorAtInfinity, other: Flector) -> MultiVector {
    return multi_vector_at_infinity__wedge__flector(multi_vector_at_infinity__anti_wedge__flector(self_, other), flector__dual(other));
}

fn multi_vector_at_infinity__reject_via_origin_from__line(self_: MultiVectorAtInfinity, other: Line) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__wedge__line_at_origin(multi_vector_at_infinity__anti_wedge__line(self_, other), line__dual(other));
}

fn multi_vector_at_infinity__reject_via_origin_from__motor(self_: MultiVectorAtInfinity, other: Motor) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__wedge__line_at_origin(multi_vector_at_infinity__anti_wedge__motor(self_, other), motor__dual(other));
}

fn multi_vector_at_infinity__reject_via_origin_from__multi_vector(self_: MultiVectorAtInfinity, other: MultiVector) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__wedge__multi_vector_at_origin(multi_vector_at_infinity__anti_wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn multi_vector_at_infinity__reject_via_origin_from__plane(self_: MultiVectorAtInfinity, other: Plane) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__wedge__origin(multi_vector_at_infinity__anti_wedge__plane(self_, other), plane__dual(other));
}

fn multi_vector_at_infinity__reject_via_origin_from__point(self_: MultiVectorAtInfinity, other: Point) -> PlaneAtOrigin {
    return scalar__wedge__plane_at_origin(multi_vector_at_infinity__anti_wedge__point(self_, other), point__dual(other));
}

fn multi_vector_at_infinity__reject_via_origin_from__transflector(self_: MultiVectorAtInfinity, other: Transflector) -> MultiVector {
    return multi_vector_at_infinity__wedge__flector(multi_vector_at_infinity__anti_wedge__transflector(self_, other), transflector__dual(other));
}

fn multi_vector_at_infinity__reject_via_origin_from__translator(self_: MultiVectorAtInfinity, other: Translator) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__wedge__line_at_origin(multi_vector_at_infinity__anti_wedge__translator(self_, other), translator__dual(other));
}

fn multi_vector_at_origin__reject_via_origin_from__flector(self_: MultiVectorAtOrigin, other: Flector) -> MultiVector {
    return multi_vector__wedge__flector(multi_vector_at_origin__anti_wedge__flector(self_, other), flector__dual(other));
}

fn multi_vector_at_origin__reject_via_origin_from__flector_at_infinity(self_: MultiVectorAtOrigin, other: FlectorAtInfinity) -> MultiVector {
    return multi_vector_at_infinity__wedge__flector(multi_vector_at_origin__anti_wedge__flector_at_infinity(self_, other), flector_at_infinity__dual(other));
}

fn multi_vector_at_origin__reject_via_origin_from__horizon(self_: MultiVectorAtOrigin, other: Horizon) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__wedge__origin(multi_vector_at_origin__anti_wedge__horizon(self_, other), horizon__dual(other));
}

fn multi_vector_at_origin__reject_via_origin_from__line(self_: MultiVectorAtOrigin, other: Line) -> MultiVectorAtOrigin {
    return multi_vector__wedge__line_at_origin(multi_vector_at_origin__anti_wedge__line(self_, other), line__dual(other));
}

fn multi_vector_at_origin__reject_via_origin_from__line_at_infinity(self_: MultiVectorAtOrigin, other: LineAtInfinity) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__wedge__line_at_origin(multi_vector_at_origin__anti_wedge__line_at_infinity(self_, other), line_at_infinity__dual(other));
}

fn multi_vector_at_origin__reject_via_origin_from__motor(self_: MultiVectorAtOrigin, other: Motor) -> MultiVectorAtOrigin {
    return multi_vector__wedge__line_at_origin(multi_vector_at_origin__anti_wedge__motor(self_, other), motor__dual(other));
}

fn multi_vector_at_origin__reject_via_origin_from__multi_vector(self_: MultiVectorAtOrigin, other: MultiVector) -> MultiVectorAtOrigin {
    return multi_vector__wedge__multi_vector_at_origin(multi_vector_at_origin__anti_wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn multi_vector_at_origin__reject_via_origin_from__multi_vector_at_infinity(self_: MultiVectorAtOrigin, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__wedge__multi_vector_at_origin(multi_vector_at_origin__anti_wedge__multi_vector_at_infinity(self_, other), multi_vector_at_infinity__dual(other));
}

fn multi_vector_at_origin__reject_via_origin_from__plane(self_: MultiVectorAtOrigin, other: Plane) -> MultiVectorAtOrigin {
    return multi_vector__wedge__origin(multi_vector_at_origin__anti_wedge__plane(self_, other), plane__dual(other));
}

fn multi_vector_at_origin__reject_via_origin_from__point(self_: MultiVectorAtOrigin, other: Point) -> MultiVectorAtOrigin {
    return multi_vector__wedge__plane_at_origin(multi_vector_at_origin__anti_wedge__point(self_, other), point__dual(other));
}

fn multi_vector_at_origin__reject_via_origin_from__point_at_infinity(self_: MultiVectorAtOrigin, other: PointAtInfinity) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__wedge__plane_at_origin(multi_vector_at_origin__anti_wedge__point_at_infinity(self_, other), point_at_infinity__dual(other));
}

fn multi_vector_at_origin__reject_via_origin_from__transflector(self_: MultiVectorAtOrigin, other: Transflector) -> MultiVector {
    return multi_vector__wedge__flector(multi_vector_at_origin__anti_wedge__transflector(self_, other), transflector__dual(other));
}

fn multi_vector_at_origin__reject_via_origin_from__translator(self_: MultiVectorAtOrigin, other: Translator) -> MultiVectorAtOrigin {
    return multi_vector__wedge__line_at_origin(multi_vector_at_origin__anti_wedge__translator(self_, other), translator__dual(other));
}

fn origin__reject_via_origin_from__flector(self_: Origin, other: Flector) -> Flector {
    return scalar__wedge__flector(origin__anti_wedge__flector(self_, other), flector__dual(other));
}

fn origin__reject_via_origin_from__flector_at_infinity(self_: Origin, other: FlectorAtInfinity) -> Flector {
    return scalar__wedge__flector(origin__anti_wedge__flector_at_infinity(self_, other), flector_at_infinity__dual(other));
}

fn origin__reject_via_origin_from__horizon(self_: Origin, other: Horizon) -> Origin {
    return scalar__wedge__origin(origin__anti_wedge__horizon(self_, other), horizon__dual(other));
}

fn origin__reject_via_origin_from__multi_vector(self_: Origin, other: MultiVector) -> MultiVectorAtOrigin {
    return multi_vector__wedge__multi_vector_at_origin(origin__anti_wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn origin__reject_via_origin_from__multi_vector_at_infinity(self_: Origin, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return scalar__wedge__multi_vector_at_origin(origin__anti_wedge__multi_vector_at_infinity(self_, other), multi_vector_at_infinity__dual(other));
}

fn origin__reject_via_origin_from__plane(self_: Origin, other: Plane) -> Origin {
    return scalar__wedge__origin(origin__anti_wedge__plane(self_, other), plane__dual(other));
}

fn origin__reject_via_origin_from__transflector(self_: Origin, other: Transflector) -> Flector {
    return scalar__wedge__flector(origin__anti_wedge__transflector(self_, other), transflector__dual(other));
}

fn plane__reject_via_origin_from__flector(self_: Plane, other: Flector) -> MultiVector {
    return multi_vector__wedge__flector(plane__anti_wedge__flector(self_, other), flector__dual(other));
}

fn plane__reject_via_origin_from__flector_at_infinity(self_: Plane, other: FlectorAtInfinity) -> MultiVector {
    return multi_vector_at_infinity__wedge__flector(plane__anti_wedge__flector_at_infinity(self_, other), flector_at_infinity__dual(other));
}

fn plane__reject_via_origin_from__horizon(self_: Plane, other: Horizon) -> PlaneAtOrigin {
    return line_at_infinity__wedge__origin(plane__anti_wedge__horizon(self_, other), horizon__dual(other));
}

fn plane__reject_via_origin_from__line(self_: Plane, other: Line) -> PlaneAtOrigin {
    return point__wedge__line_at_origin(plane__anti_wedge__line(self_, other), line__dual(other));
}

fn plane__reject_via_origin_from__line_at_infinity(self_: Plane, other: LineAtInfinity) -> PlaneAtOrigin {
    return point_at_infinity__wedge__line_at_origin(plane__anti_wedge__line_at_infinity(self_, other), line_at_infinity__dual(other));
}

fn plane__reject_via_origin_from__motor(self_: Plane, other: Motor) -> PlaneAtOrigin {
    return flector__wedge__line_at_origin(plane__anti_wedge__motor(self_, other), motor__dual(other));
}

fn plane__reject_via_origin_from__multi_vector(self_: Plane, other: MultiVector) -> MultiVectorAtOrigin {
    return multi_vector__wedge__multi_vector_at_origin(plane__anti_wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn plane__reject_via_origin_from__multi_vector_at_infinity(self_: Plane, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__wedge__multi_vector_at_origin(plane__anti_wedge__multi_vector_at_infinity(self_, other), multi_vector_at_infinity__dual(other));
}

fn plane__reject_via_origin_from__plane(self_: Plane, other: Plane) -> PlaneAtOrigin {
    return line__wedge__origin(plane__anti_wedge__plane(self_, other), plane__dual(other));
}

fn plane__reject_via_origin_from__point(self_: Plane, other: Point) -> PlaneAtOrigin {
    return scalar__wedge__plane_at_origin(plane__anti_wedge__point(self_, other), point__dual(other));
}

fn plane__reject_via_origin_from__point_at_infinity(self_: Plane, other: PointAtInfinity) -> PlaneAtOrigin {
    return scalar__wedge__plane_at_origin(plane__anti_wedge__point_at_infinity(self_, other), point_at_infinity__dual(other));
}

fn plane__reject_via_origin_from__transflector(self_: Plane, other: Transflector) -> MultiVector {
    return multi_vector__wedge__flector(plane__anti_wedge__transflector(self_, other), transflector__dual(other));
}

fn plane__reject_via_origin_from__translator(self_: Plane, other: Translator) -> PlaneAtOrigin {
    return transflector__wedge__line_at_origin(plane__anti_wedge__translator(self_, other), translator__dual(other));
}

fn plane_at_origin__reject_via_origin_from__flector(self_: PlaneAtOrigin, other: Flector) -> MultiVector {
    return multi_vector__wedge__flector(plane_at_origin__anti_wedge__flector(self_, other), flector__dual(other));
}

fn plane_at_origin__reject_via_origin_from__flector_at_infinity(self_: PlaneAtOrigin, other: FlectorAtInfinity) -> MultiVector {
    return multi_vector_at_infinity__wedge__flector(plane_at_origin__anti_wedge__flector_at_infinity(self_, other), flector_at_infinity__dual(other));
}

fn plane_at_origin__reject_via_origin_from__horizon(self_: PlaneAtOrigin, other: Horizon) -> PlaneAtOrigin {
    return line_at_infinity__wedge__origin(plane_at_origin__anti_wedge__horizon(self_, other), horizon__dual(other));
}

fn plane_at_origin__reject_via_origin_from__line(self_: PlaneAtOrigin, other: Line) -> PlaneAtOrigin {
    return point__wedge__line_at_origin(plane_at_origin__anti_wedge__line(self_, other), line__dual(other));
}

fn plane_at_origin__reject_via_origin_from__line_at_infinity(self_: PlaneAtOrigin, other: LineAtInfinity) -> PlaneAtOrigin {
    return point_at_infinity__wedge__line_at_origin(plane_at_origin__anti_wedge__line_at_infinity(self_, other), line_at_infinity__dual(other));
}

fn plane_at_origin__reject_via_origin_from__motor(self_: PlaneAtOrigin, other: Motor) -> PlaneAtOrigin {
    return flector__wedge__line_at_origin(plane_at_origin__anti_wedge__motor(self_, other), motor__dual(other));
}

fn plane_at_origin__reject_via_origin_from__multi_vector(self_: PlaneAtOrigin, other: MultiVector) -> MultiVectorAtOrigin {
    return multi_vector__wedge__multi_vector_at_origin(plane_at_origin__anti_wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn plane_at_origin__reject_via_origin_from__multi_vector_at_infinity(self_: PlaneAtOrigin, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__wedge__multi_vector_at_origin(plane_at_origin__anti_wedge__multi_vector_at_infinity(self_, other), multi_vector_at_infinity__dual(other));
}

fn plane_at_origin__reject_via_origin_from__plane(self_: PlaneAtOrigin, other: Plane) -> PlaneAtOrigin {
    return line__wedge__origin(plane_at_origin__anti_wedge__plane(self_, other), plane__dual(other));
}

fn plane_at_origin__reject_via_origin_from__point(self_: PlaneAtOrigin, other: Point) -> PlaneAtOrigin {
    return scalar__wedge__plane_at_origin(plane_at_origin__anti_wedge__point(self_, other), point__dual(other));
}

fn plane_at_origin__reject_via_origin_from__point_at_infinity(self_: PlaneAtOrigin, other: PointAtInfinity) -> PlaneAtOrigin {
    return scalar__wedge__plane_at_origin(plane_at_origin__anti_wedge__point_at_infinity(self_, other), point_at_infinity__dual(other));
}

fn plane_at_origin__reject_via_origin_from__transflector(self_: PlaneAtOrigin, other: Transflector) -> MultiVector {
    return multi_vector__wedge__flector(plane_at_origin__anti_wedge__transflector(self_, other), transflector__dual(other));
}

fn plane_at_origin__reject_via_origin_from__translator(self_: PlaneAtOrigin, other: Translator) -> PlaneAtOrigin {
    return transflector__wedge__line_at_origin(plane_at_origin__anti_wedge__translator(self_, other), translator__dual(other));
}

fn point__reject_via_origin_from__flector(self_: Point, other: Flector) -> Flector {
    return scalar__wedge__flector(point__anti_wedge__flector(self_, other), flector__dual(other));
}

fn point__reject_via_origin_from__flector_at_infinity(self_: Point, other: FlectorAtInfinity) -> Flector {
    return scalar__wedge__flector(point__anti_wedge__flector_at_infinity(self_, other), flector_at_infinity__dual(other));
}

fn point__reject_via_origin_from__horizon(self_: Point, other: Horizon) -> Origin {
    return scalar__wedge__origin(point__anti_wedge__horizon(self_, other), horizon__dual(other));
}

fn point__reject_via_origin_from__motor(self_: Point, other: Motor) -> PlaneAtOrigin {
    return point__wedge__line_at_origin(point__anti_wedge__motor(self_, other), motor__dual(other));
}

fn point__reject_via_origin_from__multi_vector(self_: Point, other: MultiVector) -> MultiVectorAtOrigin {
    return multi_vector__wedge__multi_vector_at_origin(point__anti_wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn point__reject_via_origin_from__multi_vector_at_infinity(self_: Point, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return scalar__wedge__multi_vector_at_origin(point__anti_wedge__multi_vector_at_infinity(self_, other), multi_vector_at_infinity__dual(other));
}

fn point__reject_via_origin_from__plane(self_: Point, other: Plane) -> Origin {
    return scalar__wedge__origin(point__anti_wedge__plane(self_, other), plane__dual(other));
}

fn point__reject_via_origin_from__transflector(self_: Point, other: Transflector) -> Flector {
    return scalar__wedge__flector(point__anti_wedge__transflector(self_, other), transflector__dual(other));
}

fn point__reject_via_origin_from__translator(self_: Point, other: Translator) -> PlaneAtOrigin {
    return point__wedge__line_at_origin(point__anti_wedge__translator(self_, other), translator__dual(other));
}

fn point_at_infinity__reject_via_origin_from__flector(self_: PointAtInfinity, other: Flector) -> Flector {
    return scalar__wedge__flector(point_at_infinity__anti_wedge__flector(self_, other), flector__dual(other));
}

fn point_at_infinity__reject_via_origin_from__motor(self_: PointAtInfinity, other: Motor) -> PlaneAtOrigin {
    return point_at_infinity__wedge__line_at_origin(point_at_infinity__anti_wedge__motor(self_, other), motor__dual(other));
}

fn point_at_infinity__reject_via_origin_from__multi_vector(self_: PointAtInfinity, other: MultiVector) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__wedge__multi_vector_at_origin(point_at_infinity__anti_wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn point_at_infinity__reject_via_origin_from__plane(self_: PointAtInfinity, other: Plane) -> Origin {
    return scalar__wedge__origin(point_at_infinity__anti_wedge__plane(self_, other), plane__dual(other));
}

fn point_at_infinity__reject_via_origin_from__transflector(self_: PointAtInfinity, other: Transflector) -> Flector {
    return scalar__wedge__flector(point_at_infinity__anti_wedge__transflector(self_, other), transflector__dual(other));
}

fn point_at_infinity__reject_via_origin_from__translator(self_: PointAtInfinity, other: Translator) -> PlaneAtOrigin {
    return point_at_infinity__wedge__line_at_origin(point_at_infinity__anti_wedge__translator(self_, other), translator__dual(other));
}

fn rotor__reject_via_origin_from__flector(self_: Rotor, other: Flector) -> Motor {
    return flector__wedge__flector(rotor__anti_wedge__flector(self_, other), flector__dual(other));
}

fn rotor__reject_via_origin_from__flector_at_infinity(self_: Rotor, other: FlectorAtInfinity) -> Motor {
    return flector_at_infinity__wedge__flector(rotor__anti_wedge__flector_at_infinity(self_, other), flector_at_infinity__dual(other));
}

fn rotor__reject_via_origin_from__horizon(self_: Rotor, other: Horizon) -> Rotor {
    return flector_at_infinity__wedge__origin(rotor__anti_wedge__horizon(self_, other), horizon__dual(other));
}

fn rotor__reject_via_origin_from__line(self_: Rotor, other: Line) -> MultiVectorAtOrigin {
    return multi_vector__wedge__line_at_origin(rotor__anti_wedge__line(self_, other), line__dual(other));
}

fn rotor__reject_via_origin_from__line_at_infinity(self_: Rotor, other: LineAtInfinity) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__wedge__line_at_origin(rotor__anti_wedge__line_at_infinity(self_, other), line_at_infinity__dual(other));
}

fn rotor__reject_via_origin_from__motor(self_: Rotor, other: Motor) -> MultiVectorAtOrigin {
    return multi_vector__wedge__line_at_origin(rotor__anti_wedge__motor(self_, other), motor__dual(other));
}

fn rotor__reject_via_origin_from__multi_vector(self_: Rotor, other: MultiVector) -> MultiVectorAtOrigin {
    return multi_vector__wedge__multi_vector_at_origin(rotor__anti_wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn rotor__reject_via_origin_from__multi_vector_at_infinity(self_: Rotor, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__wedge__multi_vector_at_origin(rotor__anti_wedge__multi_vector_at_infinity(self_, other), multi_vector_at_infinity__dual(other));
}

fn rotor__reject_via_origin_from__plane(self_: Rotor, other: Plane) -> Rotor {
    return flector__wedge__origin(rotor__anti_wedge__plane(self_, other), plane__dual(other));
}

fn rotor__reject_via_origin_from__point(self_: Rotor, other: Point) -> AntiScalar {
    return point__wedge__plane_at_origin(rotor__anti_wedge__point(self_, other), point__dual(other));
}

fn rotor__reject_via_origin_from__point_at_infinity(self_: Rotor, other: PointAtInfinity) -> AntiScalar {
    return point_at_infinity__wedge__plane_at_origin(rotor__anti_wedge__point_at_infinity(self_, other), point_at_infinity__dual(other));
}

fn rotor__reject_via_origin_from__transflector(self_: Rotor, other: Transflector) -> Motor {
    return flector__wedge__flector(rotor__anti_wedge__transflector(self_, other), transflector__dual(other));
}

fn rotor__reject_via_origin_from__translator(self_: Rotor, other: Translator) -> MultiVectorAtOrigin {
    return multi_vector__wedge__line_at_origin(rotor__anti_wedge__translator(self_, other), translator__dual(other));
}

fn transflector__reject_via_origin_from__flector(self_: Transflector, other: Flector) -> MultiVector {
    return multi_vector__wedge__flector(transflector__anti_wedge__flector(self_, other), flector__dual(other));
}

fn transflector__reject_via_origin_from__flector_at_infinity(self_: Transflector, other: FlectorAtInfinity) -> MultiVector {
    return multi_vector_at_infinity__wedge__flector(transflector__anti_wedge__flector_at_infinity(self_, other), flector_at_infinity__dual(other));
}

fn transflector__reject_via_origin_from__horizon(self_: Transflector, other: Horizon) -> PlaneAtOrigin {
    return line_at_infinity__wedge__origin(transflector__anti_wedge__horizon(self_, other), horizon__dual(other));
}

fn transflector__reject_via_origin_from__line(self_: Transflector, other: Line) -> PlaneAtOrigin {
    return point__wedge__line_at_origin(transflector__anti_wedge__line(self_, other), line__dual(other));
}

fn transflector__reject_via_origin_from__line_at_infinity(self_: Transflector, other: LineAtInfinity) -> PlaneAtOrigin {
    return point_at_infinity__wedge__line_at_origin(transflector__anti_wedge__line_at_infinity(self_, other), line_at_infinity__dual(other));
}

fn transflector__reject_via_origin_from__motor(self_: Transflector, other: Motor) -> PlaneAtOrigin {
    return flector__wedge__line_at_origin(transflector__anti_wedge__motor(self_, other), motor__dual(other));
}

fn transflector__reject_via_origin_from__multi_vector(self_: Transflector, other: MultiVector) -> MultiVectorAtOrigin {
    return multi_vector__wedge__multi_vector_at_origin(transflector__anti_wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn transflector__reject_via_origin_from__multi_vector_at_infinity(self_: Transflector, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__wedge__multi_vector_at_origin(transflector__anti_wedge__multi_vector_at_infinity(self_, other), multi_vector_at_infinity__dual(other));
}

fn transflector__reject_via_origin_from__plane(self_: Transflector, other: Plane) -> MultiVectorAtOrigin {
    return multi_vector__wedge__origin(transflector__anti_wedge__plane(self_, other), plane__dual(other));
}

fn transflector__reject_via_origin_from__point(self_: Transflector, other: Point) -> PlaneAtOrigin {
    return scalar__wedge__plane_at_origin(transflector__anti_wedge__point(self_, other), point__dual(other));
}

fn transflector__reject_via_origin_from__point_at_infinity(self_: Transflector, other: PointAtInfinity) -> PlaneAtOrigin {
    return scalar__wedge__plane_at_origin(transflector__anti_wedge__point_at_infinity(self_, other), point_at_infinity__dual(other));
}

fn transflector__reject_via_origin_from__transflector(self_: Transflector, other: Transflector) -> MultiVector {
    return multi_vector__wedge__flector(transflector__anti_wedge__transflector(self_, other), transflector__dual(other));
}

fn transflector__reject_via_origin_from__translator(self_: Transflector, other: Translator) -> PlaneAtOrigin {
    return transflector__wedge__line_at_origin(transflector__anti_wedge__translator(self_, other), translator__dual(other));
}

fn translator__reject_via_origin_from__flector(self_: Translator, other: Flector) -> Motor {
    return flector__wedge__flector(translator__anti_wedge__flector(self_, other), flector__dual(other));
}

fn translator__reject_via_origin_from__flector_at_infinity(self_: Translator, other: FlectorAtInfinity) -> Motor {
    return flector_at_infinity__wedge__flector(translator__anti_wedge__flector_at_infinity(self_, other), flector_at_infinity__dual(other));
}

fn translator__reject_via_origin_from__horizon(self_: Translator, other: Horizon) -> AntiScalar {
    return horizon__wedge__origin(translator__anti_wedge__horizon(self_, other), horizon__dual(other));
}

fn translator__reject_via_origin_from__line(self_: Translator, other: Line) -> MultiVectorAtOrigin {
    return multi_vector__wedge__line_at_origin(translator__anti_wedge__line(self_, other), line__dual(other));
}

fn translator__reject_via_origin_from__line_at_infinity(self_: Translator, other: LineAtInfinity) -> AntiScalar {
    return line_at_infinity__wedge__line_at_origin(translator__anti_wedge__line_at_infinity(self_, other), line_at_infinity__dual(other));
}

fn translator__reject_via_origin_from__motor(self_: Translator, other: Motor) -> MultiVectorAtOrigin {
    return multi_vector__wedge__line_at_origin(translator__anti_wedge__motor(self_, other), motor__dual(other));
}

fn translator__reject_via_origin_from__multi_vector(self_: Translator, other: MultiVector) -> MultiVectorAtOrigin {
    return multi_vector__wedge__multi_vector_at_origin(translator__anti_wedge__multi_vector(self_, other), multi_vector__dual(other));
}

fn translator__reject_via_origin_from__multi_vector_at_infinity(self_: Translator, other: MultiVectorAtInfinity) -> MultiVectorAtOrigin {
    return multi_vector_at_infinity__wedge__multi_vector_at_origin(translator__anti_wedge__multi_vector_at_infinity(self_, other), multi_vector_at_infinity__dual(other));
}

fn translator__reject_via_origin_from__plane(self_: Translator, other: Plane) -> Rotor {
    return transflector__wedge__origin(translator__anti_wedge__plane(self_, other), plane__dual(other));
}

fn translator__reject_via_origin_from__point(self_: Translator, other: Point) -> AntiScalar {
    return point__wedge__plane_at_origin(translator__anti_wedge__point(self_, other), point__dual(other));
}

fn translator__reject_via_origin_from__point_at_infinity(self_: Translator, other: PointAtInfinity) -> AntiScalar {
    return point_at_infinity__wedge__plane_at_origin(translator__anti_wedge__point_at_infinity(self_, other), point_at_infinity__dual(other));
}

fn translator__reject_via_origin_from__transflector(self_: Translator, other: Transflector) -> Motor {
    return transflector__wedge__flector(translator__anti_wedge__transflector(self_, other), transflector__dual(other));
}

fn translator__reject_via_origin_from__translator(self_: Translator, other: Translator) -> AntiScalar {
    return translator__wedge__line_at_origin(translator__anti_wedge__translator(self_, other), translator__dual(other));
}

fn flector__anti_support(self_: Flector) -> MultiVector {
    return flector__wedge__multi_vector_at_infinity(self_, horizon__anti_wedge__flector(origin__right_complement(origin__one()), flector__dual(self_)));
}

fn flector_at_infinity__anti_support(self_: FlectorAtInfinity) -> MultiVectorAtInfinity {
    return flector_at_infinity__wedge__multi_vector_at_infinity(self_, horizon__anti_wedge__flector(origin__right_complement(origin__one()), flector_at_infinity__dual(self_)));
}

fn horizon__anti_support(self_: Horizon) -> Horizon {
    return horizon__wedge__scalar(self_, horizon__anti_wedge__origin(origin__right_complement(origin__one()), horizon__dual(self_)));
}

fn line__anti_support(self_: Line) -> Plane {
    return line__wedge__point_at_infinity(self_, horizon__anti_wedge__line_at_origin(origin__right_complement(origin__one()), line__dual(self_)));
}

fn line_at_infinity__anti_support(self_: LineAtInfinity) -> Horizon {
    return line_at_infinity__wedge__point_at_infinity(self_, horizon__anti_wedge__line_at_origin(origin__right_complement(origin__one()), line_at_infinity__dual(self_)));
}

fn magnitude__anti_support(self_: Magnitude) -> Horizon {
    return magnitude__wedge__horizon(self_, horizon__anti_wedge__anti_scalar(origin__right_complement(origin__one()), magnitude__dual(self_)));
}

fn motor__anti_support(self_: Motor) -> Plane {
    return motor__wedge__point_at_infinity(self_, horizon__anti_wedge__line_at_origin(origin__right_complement(origin__one()), motor__dual(self_)));
}

fn multi_vector__anti_support(self_: MultiVector) -> MultiVector {
    return multi_vector__wedge__multi_vector_at_infinity(self_, horizon__anti_wedge__multi_vector_at_origin(origin__right_complement(origin__one()), multi_vector__dual(self_)));
}

fn multi_vector_at_infinity__anti_support(self_: MultiVectorAtInfinity) -> MultiVectorAtInfinity {
    return multi_vector_at_infinity__wedge__multi_vector_at_infinity(self_, horizon__anti_wedge__multi_vector_at_origin(origin__right_complement(origin__one()), multi_vector_at_infinity__dual(self_)));
}

fn plane__anti_support(self_: Plane) -> Plane {
    return plane__wedge__scalar(self_, horizon__anti_wedge__origin(origin__right_complement(origin__one()), plane__dual(self_)));
}

fn point__anti_support(self_: Point) -> Plane {
    return point__wedge__line_at_infinity(self_, horizon__anti_wedge__plane_at_origin(origin__right_complement(origin__one()), point__dual(self_)));
}

fn point_at_infinity__anti_support(self_: PointAtInfinity) -> Horizon {
    return point_at_infinity__wedge__line_at_infinity(self_, horizon__anti_wedge__plane_at_origin(origin__right_complement(origin__one()), point_at_infinity__dual(self_)));
}

fn scalar__anti_support(self_: Scalar) -> Horizon {
    return scalar__wedge__horizon(self_, horizon__anti_wedge__anti_scalar(origin__right_complement(origin__one()), scalar__dual(self_)));
}

fn transflector__anti_support(self_: Transflector) -> MultiVector {
    return transflector__wedge__multi_vector_at_infinity(self_, horizon__anti_wedge__flector(origin__right_complement(origin__one()), transflector__dual(self_)));
}

fn translator__anti_support(self_: Translator) -> Horizon {
    return translator__wedge__point_at_infinity(self_, horizon__anti_wedge__line_at_origin(origin__right_complement(origin__one()), translator__dual(self_)));
}

fn flector__support(self_: Flector) -> Flector {
    return flector__anti_wedge__rotor(self_, origin__wedge__flector_at_infinity(origin__one(), flector__anti_dual(self_)));
}

fn line__support(self_: Line) -> Point {
    return line__anti_wedge__plane_at_origin(self_, origin__wedge__line_at_infinity(origin__one(), line__anti_dual(self_)));
}

fn line_at_origin__support(self_: LineAtOrigin) -> Origin {
    return line_at_origin__anti_wedge__plane_at_origin(self_, origin__wedge__line_at_infinity(origin__one(), line_at_origin__anti_dual(self_)));
}

fn motor__support(self_: Motor) -> MultiVector {
    return motor__anti_wedge__multi_vector_at_origin(self_, origin__wedge__multi_vector_at_infinity(origin__one(), motor__anti_dual(self_)));
}

fn multi_vector__support(self_: MultiVector) -> MultiVector {
    return multi_vector__anti_wedge__multi_vector_at_origin(self_, origin__wedge__multi_vector_at_infinity(origin__one(), multi_vector__anti_dual(self_)));
}

fn multi_vector_at_origin__support(self_: MultiVectorAtOrigin) -> MultiVectorAtOrigin {
    return multi_vector_at_origin__anti_wedge__multi_vector_at_origin(self_, origin__wedge__multi_vector_at_infinity(origin__one(), multi_vector_at_origin__anti_dual(self_)));
}

fn origin__support(self_: Origin) -> Origin {
    return origin__anti_wedge__anti_scalar(self_, origin__wedge__horizon(origin__one(), origin__anti_dual(self_)));
}

fn plane__support(self_: Plane) -> Point {
    return plane__anti_wedge__line_at_origin(self_, origin__wedge__point_at_infinity(origin__one(), plane__anti_dual(self_)));
}

fn plane_at_origin__support(self_: PlaneAtOrigin) -> Origin {
    return plane_at_origin__anti_wedge__line_at_origin(self_, origin__wedge__point_at_infinity(origin__one(), plane_at_origin__anti_dual(self_)));
}

fn point__support(self_: Point) -> Point {
    return point__anti_wedge__anti_scalar(self_, origin__wedge__horizon(origin__one(), point__anti_dual(self_)));
}

fn rotor__support(self_: Rotor) -> MultiVectorAtOrigin {
    return rotor__anti_wedge__multi_vector_at_origin(self_, origin__wedge__multi_vector_at_infinity(origin__one(), rotor__anti_dual(self_)));
}

fn transflector__support(self_: Transflector) -> Point {
    return transflector__anti_wedge__line_at_origin(self_, origin__wedge__point_at_infinity(origin__one(), transflector__anti_dual(self_)));
}

fn line__cosine_angle__line(self_: Line, other: Line) -> f32 {
    return line__weight_contraction__line(line__unitize(self_), line__unitize(other)).g0;
}

fn line__cosine_angle__line_at_origin(self_: Line, other: LineAtOrigin) -> f32 {
    return line__weight_contraction__line_at_origin(line__unitize(self_), line_at_origin__unitize(other)).g0;
}

fn line__cosine_angle__origin(self_: Line, other: Origin) -> f32 {
    return point_at_infinity__bulk_norm(line__weight_contraction__origin(line__unitize(self_), origin__unitize(other))).g0;
}

fn line__cosine_angle__point(self_: Line, other: Point) -> f32 {
    return point_at_infinity__bulk_norm(line__weight_contraction__point(line__unitize(self_), point__unitize(other))).g0;
}

fn line_at_origin__cosine_angle__line(self_: LineAtOrigin, other: Line) -> f32 {
    return line_at_origin__weight_contraction__line(line_at_origin__unitize(self_), line__unitize(other)).g0;
}

fn line_at_origin__cosine_angle__line_at_origin(self_: LineAtOrigin, other: LineAtOrigin) -> f32 {
    return line_at_origin__weight_contraction__line_at_origin(line_at_origin__unitize(self_), line_at_origin__unitize(other)).g0;
}

fn line_at_origin__cosine_angle__origin(self_: LineAtOrigin, other: Origin) -> f32 {
    return point_at_infinity__bulk_norm(line_at_origin__weight_contraction__origin(line_at_origin__unitize(self_), origin__unitize(other))).g0;
}

fn line_at_origin__cosine_angle__point(self_: LineAtOrigin, other: Point) -> f32 {
    return point_at_infinity__bulk_norm(line_at_origin__weight_contraction__point(line_at_origin__unitize(self_), point__unitize(other))).g0;
}

fn origin__cosine_angle__origin(self_: Origin, other: Origin) -> f32 {
    return origin__weight_contraction__origin(origin__unitize(self_), origin__unitize(other)).g0;
}

fn origin__cosine_angle__point(self_: Origin, other: Point) -> f32 {
    return origin__weight_contraction__point(origin__unitize(self_), point__unitize(other)).g0;
}

fn plane__cosine_angle__line(self_: Plane, other: Line) -> f32 {
    return point_at_infinity__bulk_norm(plane__weight_contraction__line(plane__unitize(self_), line__unitize(other))).g0;
}

fn plane__cosine_angle__line_at_origin(self_: Plane, other: LineAtOrigin) -> f32 {
    return point_at_infinity__bulk_norm(plane__weight_contraction__line_at_origin(plane__unitize(self_), line_at_origin__unitize(other))).g0;
}

fn plane__cosine_angle__origin(self_: Plane, other: Origin) -> f32 {
    return line_at_infinity__bulk_norm(plane__weight_contraction__origin(plane__unitize(self_), origin__unitize(other))).g0;
}

fn plane__cosine_angle__plane(self_: Plane, other: Plane) -> f32 {
    return plane__weight_contraction__plane(plane__unitize(self_), plane__unitize(other)).g0;
}

fn plane__cosine_angle__plane_at_origin(self_: Plane, other: PlaneAtOrigin) -> f32 {
    return plane__weight_contraction__plane_at_origin(plane__unitize(self_), plane_at_origin__unitize(other)).g0;
}

fn plane__cosine_angle__point(self_: Plane, other: Point) -> f32 {
    return line_at_infinity__bulk_norm(plane__weight_contraction__point(plane__unitize(self_), point__unitize(other))).g0;
}

fn plane_at_origin__cosine_angle__line(self_: PlaneAtOrigin, other: Line) -> f32 {
    return point_at_infinity__bulk_norm(plane_at_origin__weight_contraction__line(plane_at_origin__unitize(self_), line__unitize(other))).g0;
}

fn plane_at_origin__cosine_angle__line_at_origin(self_: PlaneAtOrigin, other: LineAtOrigin) -> f32 {
    return point_at_infinity__bulk_norm(plane_at_origin__weight_contraction__line_at_origin(plane_at_origin__unitize(self_), line_at_origin__unitize(other))).g0;
}

fn plane_at_origin__cosine_angle__origin(self_: PlaneAtOrigin, other: Origin) -> f32 {
    return line_at_infinity__bulk_norm(plane_at_origin__weight_contraction__origin(plane_at_origin__unitize(self_), origin__unitize(other))).g0;
}

fn plane_at_origin__cosine_angle__plane(self_: PlaneAtOrigin, other: Plane) -> f32 {
    return plane_at_origin__weight_contraction__plane(plane_at_origin__unitize(self_), plane__unitize(other)).g0;
}

fn plane_at_origin__cosine_angle__plane_at_origin(self_: PlaneAtOrigin, other: PlaneAtOrigin) -> f32 {
    return plane_at_origin__weight_contraction__plane_at_origin(plane_at_origin__unitize(self_), plane_at_origin__unitize(other)).g0;
}

fn plane_at_origin__cosine_angle__point(self_: PlaneAtOrigin, other: Point) -> f32 {
    return line_at_infinity__bulk_norm(plane_at_origin__weight_contraction__point(plane_at_origin__unitize(self_), point__unitize(other))).g0;
}

fn point__cosine_angle__origin(self_: Point, other: Origin) -> f32 {
    return point__weight_contraction__origin(point__unitize(self_), origin__unitize(other)).g0;
}

fn point__cosine_angle__point(self_: Point, other: Point) -> f32 {
    return point__weight_contraction__point(point__unitize(self_), point__unitize(other)).g0;
}

fn anti_scalar__distance__multi_vector(self_: AntiScalar, other: MultiVector) -> Magnitude {
    return scalar__add__anti_scalar(horizon__bulk_norm(anti_scalar__attitude(anti_scalar__wedge__multi_vector(self_, other))), anti_scalar__weight_norm(anti_scalar__wedge__multi_vector_at_infinity(self_, multi_vector__attitude(other))));
}

fn flector__distance__flector(self_: Flector, other: Flector) -> Magnitude {
    return scalar__add__anti_scalar(flector_at_infinity__bulk_norm(motor__attitude(flector__wedge__flector(self_, other))), multi_vector__weight_norm(flector__wedge__multi_vector_at_infinity(self_, flector__attitude(other))));
}

fn flector__distance__line(self_: Flector, other: Line) -> Magnitude {
    return scalar__add__anti_scalar(line_at_infinity__bulk_norm(plane__attitude(flector__wedge__line(self_, other))), motor__weight_norm(flector__wedge__point_at_infinity(self_, line__attitude(other))));
}

fn flector__distance__line_at_origin(self_: Flector, other: LineAtOrigin) -> Magnitude {
    return scalar__add__anti_scalar(line_at_infinity__bulk_norm(plane_at_origin__attitude(flector__wedge__line_at_origin(self_, other))), motor__weight_norm(flector__wedge__point_at_infinity(self_, line_at_origin__attitude(other))));
}

fn flector__distance__magnitude(self_: Flector, other: Magnitude) -> Magnitude {
    return scalar__add__anti_scalar(multi_vector_at_infinity__bulk_norm(flector__attitude(flector__wedge__magnitude(self_, other))), anti_scalar__weight_norm(flector__wedge__horizon(self_, magnitude__attitude(other))));
}

fn flector__distance__motor(self_: Flector, other: Motor) -> Magnitude {
    return scalar__add__anti_scalar(line_at_infinity__bulk_norm(plane__attitude(flector__wedge__motor(self_, other))), motor__weight_norm(flector__wedge__flector_at_infinity(self_, motor__attitude(other))));
}

fn flector__distance__multi_vector(self_: Flector, other: MultiVector) -> Magnitude {
    return scalar__add__anti_scalar(multi_vector_at_infinity__bulk_norm(multi_vector__attitude(flector__wedge__multi_vector(self_, other))), multi_vector__weight_norm(flector__wedge__multi_vector_at_infinity(self_, multi_vector__attitude(other))));
}

fn flector__distance__multi_vector_at_origin(self_: Flector, other: MultiVectorAtOrigin) -> Magnitude {
    return scalar__add__anti_scalar(multi_vector_at_infinity__bulk_norm(multi_vector_at_origin__attitude(flector__wedge__multi_vector_at_origin(self_, other))), multi_vector__weight_norm(flector__wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__attitude(other))));
}

fn flector__distance__origin(self_: Flector, other: Origin) -> Magnitude {
    return scalar__add__anti_scalar(flector_at_infinity__bulk_norm(rotor__attitude(flector__wedge__origin(self_, other))), flector__weight_norm(flector__wedge__scalar(self_, origin__attitude(other))));
}

fn flector__distance__plane(self_: Flector, other: Plane) -> Magnitude {
    return scalar__add__anti_scalar(horizon__bulk_norm(anti_scalar__attitude(flector__wedge__plane(self_, other))), plane__weight_norm(flector__wedge__line_at_infinity(self_, plane__attitude(other))));
}

fn flector__distance__plane_at_origin(self_: Flector, other: PlaneAtOrigin) -> Magnitude {
    return scalar__add__anti_scalar(horizon__bulk_norm(anti_scalar__attitude(flector__wedge__plane_at_origin(self_, other))), plane__weight_norm(flector__wedge__line_at_infinity(self_, plane_at_origin__attitude(other))));
}

fn flector__distance__point(self_: Flector, other: Point) -> Magnitude {
    return scalar__add__anti_scalar(flector_at_infinity__bulk_norm(motor__attitude(flector__wedge__point(self_, other))), flector__weight_norm(flector__wedge__scalar(self_, point__attitude(other))));
}

fn flector__distance__rotor(self_: Flector, other: Rotor) -> Magnitude {
    return scalar__add__anti_scalar(line_at_infinity__bulk_norm(plane_at_origin__attitude(flector__wedge__rotor(self_, other))), motor__weight_norm(flector__wedge__flector_at_infinity(self_, rotor__attitude(other))));
}

fn flector__distance__transflector(self_: Flector, other: Transflector) -> Magnitude {
    return scalar__add__anti_scalar(flector_at_infinity__bulk_norm(motor__attitude(flector__wedge__transflector(self_, other))), plane__weight_norm(flector__wedge__line_at_infinity(self_, transflector__attitude(other))));
}

fn flector__distance__translator(self_: Flector, other: Translator) -> Magnitude {
    return scalar__add__anti_scalar(line_at_infinity__bulk_norm(plane__attitude(flector__wedge__translator(self_, other))), anti_scalar__weight_norm(flector__wedge__horizon(self_, translator__attitude(other))));
}

fn line__distance__flector(self_: Line, other: Flector) -> Magnitude {
    return scalar__add__anti_scalar(line_at_infinity__bulk_norm(plane__attitude(line__wedge__flector(self_, other))), multi_vector__weight_norm(line__wedge__multi_vector_at_infinity(self_, flector__attitude(other))));
}

fn line__distance__line(self_: Line, other: Line) -> Magnitude {
    return scalar__add__anti_scalar(horizon__bulk_norm(anti_scalar__attitude(line__wedge__line(self_, other))), plane__weight_norm(line__wedge__point_at_infinity(self_, line__attitude(other))));
}

fn line__distance__line_at_origin(self_: Line, other: LineAtOrigin) -> Magnitude {
    return scalar__add__anti_scalar(horizon__bulk_norm(anti_scalar__attitude(line__wedge__line_at_origin(self_, other))), plane__weight_norm(line__wedge__point_at_infinity(self_, line_at_origin__attitude(other))));
}

fn line__distance__motor(self_: Line, other: Motor) -> Magnitude {
    return scalar__add__anti_scalar(horizon__bulk_norm(anti_scalar__attitude(line__wedge__motor(self_, other))), plane__weight_norm(line__wedge__flector_at_infinity(self_, motor__attitude(other))));
}

fn line__distance__multi_vector(self_: Line, other: MultiVector) -> Magnitude {
    return scalar__add__anti_scalar(multi_vector_at_infinity__bulk_norm(multi_vector__attitude(line__wedge__multi_vector(self_, other))), multi_vector__weight_norm(line__wedge__multi_vector_at_infinity(self_, multi_vector__attitude(other))));
}

fn line__distance__multi_vector_at_origin(self_: Line, other: MultiVectorAtOrigin) -> Magnitude {
    return scalar__add__anti_scalar(multi_vector_at_infinity__bulk_norm(multi_vector_at_origin__attitude(line__wedge__multi_vector_at_origin(self_, other))), multi_vector__weight_norm(line__wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__attitude(other))));
}

fn line__distance__origin(self_: Line, other: Origin) -> Magnitude {
    return scalar__add__anti_scalar(line_at_infinity__bulk_norm(plane_at_origin__attitude(line__wedge__origin(self_, other))), line__weight_norm(line__wedge__scalar(self_, origin__attitude(other))));
}

fn line__distance__point(self_: Line, other: Point) -> Magnitude {
    return scalar__add__anti_scalar(line_at_infinity__bulk_norm(plane__attitude(line__wedge__point(self_, other))), line__weight_norm(line__wedge__scalar(self_, point__attitude(other))));
}

fn line__distance__rotor(self_: Line, other: Rotor) -> Magnitude {
    return scalar__add__anti_scalar(horizon__bulk_norm(anti_scalar__attitude(line__wedge__rotor(self_, other))), plane__weight_norm(line__wedge__flector_at_infinity(self_, rotor__attitude(other))));
}

fn line__distance__transflector(self_: Line, other: Transflector) -> Magnitude {
    return scalar__add__anti_scalar(line_at_infinity__bulk_norm(plane__attitude(line__wedge__transflector(self_, other))), anti_scalar__weight_norm(line__wedge__line_at_infinity(self_, transflector__attitude(other))));
}

fn line_at_origin__distance__flector(self_: LineAtOrigin, other: Flector) -> Magnitude {
    return scalar__add__anti_scalar(line_at_infinity__bulk_norm(plane_at_origin__attitude(line_at_origin__wedge__flector(self_, other))), multi_vector_at_origin__weight_norm(line_at_origin__wedge__multi_vector_at_infinity(self_, flector__attitude(other))));
}

fn line_at_origin__distance__line(self_: LineAtOrigin, other: Line) -> Magnitude {
    return scalar__add__anti_scalar(horizon__bulk_norm(anti_scalar__attitude(line_at_origin__wedge__line(self_, other))), plane_at_origin__weight_norm(line_at_origin__wedge__point_at_infinity(self_, line__attitude(other))));
}

fn line_at_origin__distance__motor(self_: LineAtOrigin, other: Motor) -> Magnitude {
    return scalar__add__anti_scalar(horizon__bulk_norm(anti_scalar__attitude(line_at_origin__wedge__motor(self_, other))), plane_at_origin__weight_norm(line_at_origin__wedge__flector_at_infinity(self_, motor__attitude(other))));
}

fn line_at_origin__distance__multi_vector(self_: LineAtOrigin, other: MultiVector) -> Magnitude {
    return scalar__add__anti_scalar(multi_vector_at_infinity__bulk_norm(multi_vector_at_origin__attitude(line_at_origin__wedge__multi_vector(self_, other))), multi_vector_at_origin__weight_norm(line_at_origin__wedge__multi_vector_at_infinity(self_, multi_vector__attitude(other))));
}

fn line_at_origin__distance__point(self_: LineAtOrigin, other: Point) -> Magnitude {
    return scalar__add__anti_scalar(line_at_infinity__bulk_norm(plane_at_origin__attitude(line_at_origin__wedge__point(self_, other))), line_at_origin__weight_norm(line_at_origin__wedge__scalar(self_, point__attitude(other))));
}

fn line_at_origin__distance__transflector(self_: LineAtOrigin, other: Transflector) -> Magnitude {
    return scalar__add__anti_scalar(line_at_infinity__bulk_norm(plane_at_origin__attitude(line_at_origin__wedge__transflector(self_, other))), anti_scalar__weight_norm(line_at_origin__wedge__line_at_infinity(self_, transflector__attitude(other))));
}

fn magnitude__distance__flector(self_: Magnitude, other: Flector) -> Magnitude {
    return scalar__add__anti_scalar(multi_vector_at_infinity__bulk_norm(flector__attitude(magnitude__wedge__flector(self_, other))), multi_vector__weight_norm(magnitude__wedge__multi_vector_at_infinity(self_, flector__attitude(other))));
}

fn magnitude__distance__multi_vector(self_: Magnitude, other: MultiVector) -> Magnitude {
    return scalar__add__anti_scalar(multi_vector_at_infinity__bulk_norm(multi_vector__attitude(magnitude__wedge__multi_vector(self_, other))), multi_vector__weight_norm(magnitude__wedge__multi_vector_at_infinity(self_, multi_vector__attitude(other))));
}

fn magnitude__distance__multi_vector_at_origin(self_: Magnitude, other: MultiVectorAtOrigin) -> Magnitude {
    return scalar__add__anti_scalar(multi_vector_at_infinity__bulk_norm(multi_vector_at_origin__attitude(magnitude__wedge__multi_vector_at_origin(self_, other))), multi_vector__weight_norm(magnitude__wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__attitude(other))));
}

fn magnitude__distance__origin(self_: Magnitude, other: Origin) -> Magnitude {
    return scalar__add__anti_scalar(scalar__bulk_norm(origin__attitude(magnitude__wedge__origin(self_, other))), magnitude__weight_norm(magnitude__wedge__scalar(self_, origin__attitude(other))));
}

fn magnitude__distance__point(self_: Magnitude, other: Point) -> Magnitude {
    return scalar__add__anti_scalar(scalar__bulk_norm(point__attitude(magnitude__wedge__point(self_, other))), magnitude__weight_norm(magnitude__wedge__scalar(self_, point__attitude(other))));
}

fn motor__distance__flector(self_: Motor, other: Flector) -> Magnitude {
    return scalar__add__anti_scalar(line_at_infinity__bulk_norm(plane__attitude(motor__wedge__flector(self_, other))), multi_vector__weight_norm(motor__wedge__multi_vector_at_infinity(self_, flector__attitude(other))));
}

fn motor__distance__line(self_: Motor, other: Line) -> Magnitude {
    return scalar__add__anti_scalar(horizon__bulk_norm(anti_scalar__attitude(motor__wedge__line(self_, other))), plane__weight_norm(motor__wedge__point_at_infinity(self_, line__attitude(other))));
}

fn motor__distance__line_at_origin(self_: Motor, other: LineAtOrigin) -> Magnitude {
    return scalar__add__anti_scalar(horizon__bulk_norm(anti_scalar__attitude(motor__wedge__line_at_origin(self_, other))), plane__weight_norm(motor__wedge__point_at_infinity(self_, line_at_origin__attitude(other))));
}

fn motor__distance__motor(self_: Motor, other: Motor) -> Magnitude {
    return scalar__add__anti_scalar(horizon__bulk_norm(anti_scalar__attitude(motor__wedge__motor(self_, other))), plane__weight_norm(motor__wedge__flector_at_infinity(self_, motor__attitude(other))));
}

fn motor__distance__multi_vector(self_: Motor, other: MultiVector) -> Magnitude {
    return scalar__add__anti_scalar(multi_vector_at_infinity__bulk_norm(multi_vector__attitude(motor__wedge__multi_vector(self_, other))), multi_vector__weight_norm(motor__wedge__multi_vector_at_infinity(self_, multi_vector__attitude(other))));
}

fn motor__distance__multi_vector_at_origin(self_: Motor, other: MultiVectorAtOrigin) -> Magnitude {
    return scalar__add__anti_scalar(multi_vector_at_infinity__bulk_norm(multi_vector_at_origin__attitude(motor__wedge__multi_vector_at_origin(self_, other))), multi_vector__weight_norm(motor__wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__attitude(other))));
}

fn motor__distance__origin(self_: Motor, other: Origin) -> Magnitude {
    return scalar__add__anti_scalar(line_at_infinity__bulk_norm(plane_at_origin__attitude(motor__wedge__origin(self_, other))), motor__weight_norm(motor__wedge__scalar(self_, origin__attitude(other))));
}

fn motor__distance__point(self_: Motor, other: Point) -> Magnitude {
    return scalar__add__anti_scalar(line_at_infinity__bulk_norm(plane__attitude(motor__wedge__point(self_, other))), motor__weight_norm(motor__wedge__scalar(self_, point__attitude(other))));
}

fn motor__distance__rotor(self_: Motor, other: Rotor) -> Magnitude {
    return scalar__add__anti_scalar(horizon__bulk_norm(anti_scalar__attitude(motor__wedge__rotor(self_, other))), plane__weight_norm(motor__wedge__flector_at_infinity(self_, rotor__attitude(other))));
}

fn motor__distance__transflector(self_: Motor, other: Transflector) -> Magnitude {
    return scalar__add__anti_scalar(line_at_infinity__bulk_norm(plane__attitude(motor__wedge__transflector(self_, other))), anti_scalar__weight_norm(motor__wedge__line_at_infinity(self_, transflector__attitude(other))));
}

fn multi_vector__distance__anti_scalar(self_: MultiVector, other: AntiScalar) -> Magnitude {
    return scalar__add__anti_scalar(horizon__bulk_norm(anti_scalar__attitude(multi_vector__wedge__anti_scalar(self_, other))), multi_vector__weight_norm(multi_vector__wedge__horizon(self_, anti_scalar__attitude(other))));
}

fn multi_vector__distance__flector(self_: MultiVector, other: Flector) -> Magnitude {
    return scalar__add__anti_scalar(multi_vector_at_infinity__bulk_norm(multi_vector__attitude(multi_vector__wedge__flector(self_, other))), multi_vector__weight_norm(multi_vector__wedge__multi_vector_at_infinity(self_, flector__attitude(other))));
}

fn multi_vector__distance__line(self_: MultiVector, other: Line) -> Magnitude {
    return scalar__add__anti_scalar(multi_vector_at_infinity__bulk_norm(multi_vector__attitude(multi_vector__wedge__line(self_, other))), multi_vector__weight_norm(multi_vector__wedge__point_at_infinity(self_, line__attitude(other))));
}

fn multi_vector__distance__line_at_origin(self_: MultiVector, other: LineAtOrigin) -> Magnitude {
    return scalar__add__anti_scalar(multi_vector_at_infinity__bulk_norm(multi_vector_at_origin__attitude(multi_vector__wedge__line_at_origin(self_, other))), multi_vector__weight_norm(multi_vector__wedge__point_at_infinity(self_, line_at_origin__attitude(other))));
}

fn multi_vector__distance__magnitude(self_: MultiVector, other: Magnitude) -> Magnitude {
    return scalar__add__anti_scalar(multi_vector_at_infinity__bulk_norm(multi_vector__attitude(multi_vector__wedge__magnitude(self_, other))), multi_vector__weight_norm(multi_vector__wedge__horizon(self_, magnitude__attitude(other))));
}

fn multi_vector__distance__motor(self_: MultiVector, other: Motor) -> Magnitude {
    return scalar__add__anti_scalar(multi_vector_at_infinity__bulk_norm(multi_vector__attitude(multi_vector__wedge__motor(self_, other))), multi_vector__weight_norm(multi_vector__wedge__flector_at_infinity(self_, motor__attitude(other))));
}

fn multi_vector__distance__multi_vector(self_: MultiVector, other: MultiVector) -> Magnitude {
    return scalar__add__anti_scalar(multi_vector_at_infinity__bulk_norm(multi_vector__attitude(multi_vector__wedge__multi_vector(self_, other))), multi_vector__weight_norm(multi_vector__wedge__multi_vector_at_infinity(self_, multi_vector__attitude(other))));
}

fn multi_vector__distance__multi_vector_at_origin(self_: MultiVector, other: MultiVectorAtOrigin) -> Magnitude {
    return scalar__add__anti_scalar(multi_vector_at_infinity__bulk_norm(multi_vector_at_origin__attitude(multi_vector__wedge__multi_vector_at_origin(self_, other))), multi_vector__weight_norm(multi_vector__wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__attitude(other))));
}

fn multi_vector__distance__origin(self_: MultiVector, other: Origin) -> Magnitude {
    return scalar__add__anti_scalar(multi_vector_at_infinity__bulk_norm(multi_vector_at_origin__attitude(multi_vector__wedge__origin(self_, other))), multi_vector__weight_norm(multi_vector__wedge__scalar(self_, origin__attitude(other))));
}

fn multi_vector__distance__plane(self_: MultiVector, other: Plane) -> Magnitude {
    return scalar__add__anti_scalar(multi_vector_at_infinity__bulk_norm(multi_vector__attitude(multi_vector__wedge__plane(self_, other))), multi_vector__weight_norm(multi_vector__wedge__line_at_infinity(self_, plane__attitude(other))));
}

fn multi_vector__distance__plane_at_origin(self_: MultiVector, other: PlaneAtOrigin) -> Magnitude {
    return scalar__add__anti_scalar(multi_vector_at_infinity__bulk_norm(multi_vector_at_origin__attitude(multi_vector__wedge__plane_at_origin(self_, other))), multi_vector__weight_norm(multi_vector__wedge__line_at_infinity(self_, plane_at_origin__attitude(other))));
}

fn multi_vector__distance__point(self_: MultiVector, other: Point) -> Magnitude {
    return scalar__add__anti_scalar(multi_vector_at_infinity__bulk_norm(multi_vector__attitude(multi_vector__wedge__point(self_, other))), multi_vector__weight_norm(multi_vector__wedge__scalar(self_, point__attitude(other))));
}

fn multi_vector__distance__rotor(self_: MultiVector, other: Rotor) -> Magnitude {
    return scalar__add__anti_scalar(multi_vector_at_infinity__bulk_norm(multi_vector_at_origin__attitude(multi_vector__wedge__rotor(self_, other))), multi_vector__weight_norm(multi_vector__wedge__flector_at_infinity(self_, rotor__attitude(other))));
}

fn multi_vector__distance__transflector(self_: MultiVector, other: Transflector) -> Magnitude {
    return scalar__add__anti_scalar(multi_vector_at_infinity__bulk_norm(multi_vector__attitude(multi_vector__wedge__transflector(self_, other))), multi_vector__weight_norm(multi_vector__wedge__line_at_infinity(self_, transflector__attitude(other))));
}

fn multi_vector__distance__translator(self_: MultiVector, other: Translator) -> Magnitude {
    return scalar__add__anti_scalar(multi_vector_at_infinity__bulk_norm(multi_vector__attitude(multi_vector__wedge__translator(self_, other))), multi_vector__weight_norm(multi_vector__wedge__horizon(self_, translator__attitude(other))));
}

fn multi_vector_at_origin__distance__flector(self_: MultiVectorAtOrigin, other: Flector) -> Magnitude {
    return scalar__add__anti_scalar(multi_vector_at_infinity__bulk_norm(multi_vector_at_origin__attitude(multi_vector_at_origin__wedge__flector(self_, other))), multi_vector_at_origin__weight_norm(multi_vector_at_origin__wedge__multi_vector_at_infinity(self_, flector__attitude(other))));
}

fn multi_vector_at_origin__distance__line(self_: MultiVectorAtOrigin, other: Line) -> Magnitude {
    return scalar__add__anti_scalar(multi_vector_at_infinity__bulk_norm(multi_vector_at_origin__attitude(multi_vector_at_origin__wedge__line(self_, other))), multi_vector_at_origin__weight_norm(multi_vector_at_origin__wedge__point_at_infinity(self_, line__attitude(other))));
}

fn multi_vector_at_origin__distance__magnitude(self_: MultiVectorAtOrigin, other: Magnitude) -> Magnitude {
    return scalar__add__anti_scalar(multi_vector_at_infinity__bulk_norm(multi_vector_at_origin__attitude(multi_vector_at_origin__wedge__magnitude(self_, other))), anti_scalar__weight_norm(multi_vector_at_origin__wedge__horizon(self_, magnitude__attitude(other))));
}

fn multi_vector_at_origin__distance__motor(self_: MultiVectorAtOrigin, other: Motor) -> Magnitude {
    return scalar__add__anti_scalar(multi_vector_at_infinity__bulk_norm(multi_vector_at_origin__attitude(multi_vector_at_origin__wedge__motor(self_, other))), multi_vector_at_origin__weight_norm(multi_vector_at_origin__wedge__flector_at_infinity(self_, motor__attitude(other))));
}

fn multi_vector_at_origin__distance__multi_vector(self_: MultiVectorAtOrigin, other: MultiVector) -> Magnitude {
    return scalar__add__anti_scalar(multi_vector_at_infinity__bulk_norm(multi_vector_at_origin__attitude(multi_vector_at_origin__wedge__multi_vector(self_, other))), multi_vector_at_origin__weight_norm(multi_vector_at_origin__wedge__multi_vector_at_infinity(self_, multi_vector__attitude(other))));
}

fn multi_vector_at_origin__distance__plane(self_: MultiVectorAtOrigin, other: Plane) -> Magnitude {
    return scalar__add__anti_scalar(horizon__bulk_norm(anti_scalar__attitude(multi_vector_at_origin__wedge__plane(self_, other))), multi_vector_at_origin__weight_norm(multi_vector_at_origin__wedge__line_at_infinity(self_, plane__attitude(other))));
}

fn multi_vector_at_origin__distance__point(self_: MultiVectorAtOrigin, other: Point) -> Magnitude {
    return scalar__add__anti_scalar(multi_vector_at_infinity__bulk_norm(multi_vector_at_origin__attitude(multi_vector_at_origin__wedge__point(self_, other))), multi_vector_at_origin__weight_norm(multi_vector_at_origin__wedge__scalar(self_, point__attitude(other))));
}

fn multi_vector_at_origin__distance__transflector(self_: MultiVectorAtOrigin, other: Transflector) -> Magnitude {
    return scalar__add__anti_scalar(multi_vector_at_infinity__bulk_norm(multi_vector_at_origin__attitude(multi_vector_at_origin__wedge__transflector(self_, other))), multi_vector_at_origin__weight_norm(multi_vector_at_origin__wedge__line_at_infinity(self_, transflector__attitude(other))));
}

fn multi_vector_at_origin__distance__translator(self_: MultiVectorAtOrigin, other: Translator) -> Magnitude {
    return scalar__add__anti_scalar(multi_vector_at_infinity__bulk_norm(multi_vector_at_origin__attitude(multi_vector_at_origin__wedge__translator(self_, other))), anti_scalar__weight_norm(multi_vector_at_origin__wedge__horizon(self_, translator__attitude(other))));
}

fn origin__distance__flector(self_: Origin, other: Flector) -> Magnitude {
    return scalar__add__anti_scalar(flector_at_infinity__bulk_norm(rotor__attitude(origin__wedge__flector(self_, other))), multi_vector_at_origin__weight_norm(origin__wedge__multi_vector_at_infinity(self_, flector__attitude(other))));
}

fn origin__distance__line(self_: Origin, other: Line) -> Magnitude {
    return scalar__add__anti_scalar(line_at_infinity__bulk_norm(plane_at_origin__attitude(origin__wedge__line(self_, other))), line_at_origin__weight_norm(origin__wedge__point_at_infinity(self_, line__attitude(other))));
}

fn origin__distance__magnitude(self_: Origin, other: Magnitude) -> Magnitude {
    return scalar__add__anti_scalar(scalar__bulk_norm(origin__attitude(origin__wedge__magnitude(self_, other))), anti_scalar__weight_norm(origin__wedge__horizon(self_, magnitude__attitude(other))));
}

fn origin__distance__motor(self_: Origin, other: Motor) -> Magnitude {
    return scalar__add__anti_scalar(line_at_infinity__bulk_norm(plane_at_origin__attitude(origin__wedge__motor(self_, other))), rotor__weight_norm(origin__wedge__flector_at_infinity(self_, motor__attitude(other))));
}

fn origin__distance__multi_vector(self_: Origin, other: MultiVector) -> Magnitude {
    return scalar__add__anti_scalar(multi_vector_at_infinity__bulk_norm(multi_vector_at_origin__attitude(origin__wedge__multi_vector(self_, other))), multi_vector_at_origin__weight_norm(origin__wedge__multi_vector_at_infinity(self_, multi_vector__attitude(other))));
}

fn origin__distance__plane(self_: Origin, other: Plane) -> Magnitude {
    return scalar__add__anti_scalar(horizon__bulk_norm(anti_scalar__attitude(origin__wedge__plane(self_, other))), plane_at_origin__weight_norm(origin__wedge__line_at_infinity(self_, plane__attitude(other))));
}

fn origin__distance__point(self_: Origin, other: Point) -> Magnitude {
    return scalar__add__anti_scalar(point_at_infinity__bulk_norm(line_at_origin__attitude(origin__wedge__point(self_, other))), origin__weight_norm(origin__wedge__scalar(self_, point__attitude(other))));
}

fn origin__distance__transflector(self_: Origin, other: Transflector) -> Magnitude {
    return scalar__add__anti_scalar(flector_at_infinity__bulk_norm(rotor__attitude(origin__wedge__transflector(self_, other))), plane_at_origin__weight_norm(origin__wedge__line_at_infinity(self_, transflector__attitude(other))));
}

fn origin__distance__translator(self_: Origin, other: Translator) -> Magnitude {
    return scalar__add__anti_scalar(line_at_infinity__bulk_norm(plane_at_origin__attitude(origin__wedge__translator(self_, other))), anti_scalar__weight_norm(origin__wedge__horizon(self_, translator__attitude(other))));
}

fn plane__distance__flector(self_: Plane, other: Flector) -> Magnitude {
    return scalar__add__anti_scalar(horizon__bulk_norm(anti_scalar__attitude(plane__wedge__flector(self_, other))), multi_vector__weight_norm(plane__wedge__multi_vector_at_infinity(self_, flector__attitude(other))));
}

fn plane__distance__multi_vector(self_: Plane, other: MultiVector) -> Magnitude {
    return scalar__add__anti_scalar(multi_vector_at_infinity__bulk_norm(multi_vector__attitude(plane__wedge__multi_vector(self_, other))), multi_vector__weight_norm(plane__wedge__multi_vector_at_infinity(self_, multi_vector__attitude(other))));
}

fn plane__distance__multi_vector_at_origin(self_: Plane, other: MultiVectorAtOrigin) -> Magnitude {
    return scalar__add__anti_scalar(horizon__bulk_norm(anti_scalar__attitude(plane__wedge__multi_vector_at_origin(self_, other))), multi_vector__weight_norm(plane__wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__attitude(other))));
}

fn plane__distance__origin(self_: Plane, other: Origin) -> Magnitude {
    return scalar__add__anti_scalar(horizon__bulk_norm(anti_scalar__attitude(plane__wedge__origin(self_, other))), plane__weight_norm(plane__wedge__scalar(self_, origin__attitude(other))));
}

fn plane__distance__point(self_: Plane, other: Point) -> Magnitude {
    return scalar__add__anti_scalar(horizon__bulk_norm(anti_scalar__attitude(plane__wedge__point(self_, other))), plane__weight_norm(plane__wedge__scalar(self_, point__attitude(other))));
}

fn plane_at_origin__distance__flector(self_: PlaneAtOrigin, other: Flector) -> Magnitude {
    return scalar__add__anti_scalar(horizon__bulk_norm(anti_scalar__attitude(plane_at_origin__wedge__flector(self_, other))), multi_vector_at_origin__weight_norm(plane_at_origin__wedge__multi_vector_at_infinity(self_, flector__attitude(other))));
}

fn plane_at_origin__distance__multi_vector(self_: PlaneAtOrigin, other: MultiVector) -> Magnitude {
    return scalar__add__anti_scalar(multi_vector_at_infinity__bulk_norm(multi_vector_at_origin__attitude(plane_at_origin__wedge__multi_vector(self_, other))), multi_vector_at_origin__weight_norm(plane_at_origin__wedge__multi_vector_at_infinity(self_, multi_vector__attitude(other))));
}

fn plane_at_origin__distance__point(self_: PlaneAtOrigin, other: Point) -> Magnitude {
    return scalar__add__anti_scalar(horizon__bulk_norm(anti_scalar__attitude(plane_at_origin__wedge__point(self_, other))), plane_at_origin__weight_norm(plane_at_origin__wedge__scalar(self_, point__attitude(other))));
}

fn point__distance__flector(self_: Point, other: Flector) -> Magnitude {
    return scalar__add__anti_scalar(flector_at_infinity__bulk_norm(motor__attitude(point__wedge__flector(self_, other))), multi_vector__weight_norm(point__wedge__multi_vector_at_infinity(self_, flector__attitude(other))));
}

fn point__distance__line(self_: Point, other: Line) -> Magnitude {
    return scalar__add__anti_scalar(line_at_infinity__bulk_norm(plane__attitude(point__wedge__line(self_, other))), line__weight_norm(point__wedge__point_at_infinity(self_, line__attitude(other))));
}

fn point__distance__line_at_origin(self_: Point, other: LineAtOrigin) -> Magnitude {
    return scalar__add__anti_scalar(line_at_infinity__bulk_norm(plane_at_origin__attitude(point__wedge__line_at_origin(self_, other))), line__weight_norm(point__wedge__point_at_infinity(self_, line_at_origin__attitude(other))));
}

fn point__distance__magnitude(self_: Point, other: Magnitude) -> Magnitude {
    return scalar__add__anti_scalar(scalar__bulk_norm(point__attitude(point__wedge__magnitude(self_, other))), anti_scalar__weight_norm(point__wedge__horizon(self_, magnitude__attitude(other))));
}

fn point__distance__motor(self_: Point, other: Motor) -> Magnitude {
    return scalar__add__anti_scalar(line_at_infinity__bulk_norm(plane__attitude(point__wedge__motor(self_, other))), motor__weight_norm(point__wedge__flector_at_infinity(self_, motor__attitude(other))));
}

fn point__distance__multi_vector(self_: Point, other: MultiVector) -> Magnitude {
    return scalar__add__anti_scalar(multi_vector_at_infinity__bulk_norm(multi_vector__attitude(point__wedge__multi_vector(self_, other))), multi_vector__weight_norm(point__wedge__multi_vector_at_infinity(self_, multi_vector__attitude(other))));
}

fn point__distance__multi_vector_at_origin(self_: Point, other: MultiVectorAtOrigin) -> Magnitude {
    return scalar__add__anti_scalar(multi_vector_at_infinity__bulk_norm(multi_vector_at_origin__attitude(point__wedge__multi_vector_at_origin(self_, other))), multi_vector__weight_norm(point__wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__attitude(other))));
}

fn point__distance__origin(self_: Point, other: Origin) -> Magnitude {
    return scalar__add__anti_scalar(point_at_infinity__bulk_norm(line_at_origin__attitude(point__wedge__origin(self_, other))), point__weight_norm(point__wedge__scalar(self_, origin__attitude(other))));
}

fn point__distance__plane(self_: Point, other: Plane) -> Magnitude {
    return scalar__add__anti_scalar(horizon__bulk_norm(anti_scalar__attitude(point__wedge__plane(self_, other))), plane__weight_norm(point__wedge__line_at_infinity(self_, plane__attitude(other))));
}

fn point__distance__plane_at_origin(self_: Point, other: PlaneAtOrigin) -> Magnitude {
    return scalar__add__anti_scalar(horizon__bulk_norm(anti_scalar__attitude(point__wedge__plane_at_origin(self_, other))), plane__weight_norm(point__wedge__line_at_infinity(self_, plane_at_origin__attitude(other))));
}

fn point__distance__point(self_: Point, other: Point) -> Magnitude {
    return scalar__add__anti_scalar(point_at_infinity__bulk_norm(line__attitude(point__wedge__point(self_, other))), point__weight_norm(point__wedge__scalar(self_, point__attitude(other))));
}

fn point__distance__rotor(self_: Point, other: Rotor) -> Magnitude {
    return scalar__add__anti_scalar(line_at_infinity__bulk_norm(plane_at_origin__attitude(point__wedge__rotor(self_, other))), motor__weight_norm(point__wedge__flector_at_infinity(self_, rotor__attitude(other))));
}

fn point__distance__transflector(self_: Point, other: Transflector) -> Magnitude {
    return scalar__add__anti_scalar(flector_at_infinity__bulk_norm(motor__attitude(point__wedge__transflector(self_, other))), plane__weight_norm(point__wedge__line_at_infinity(self_, transflector__attitude(other))));
}

fn point__distance__translator(self_: Point, other: Translator) -> Magnitude {
    return scalar__add__anti_scalar(line_at_infinity__bulk_norm(plane__attitude(point__wedge__translator(self_, other))), anti_scalar__weight_norm(point__wedge__horizon(self_, translator__attitude(other))));
}

fn rotor__distance__flector(self_: Rotor, other: Flector) -> Magnitude {
    return scalar__add__anti_scalar(line_at_infinity__bulk_norm(plane_at_origin__attitude(rotor__wedge__flector(self_, other))), multi_vector_at_origin__weight_norm(rotor__wedge__multi_vector_at_infinity(self_, flector__attitude(other))));
}

fn rotor__distance__line(self_: Rotor, other: Line) -> Magnitude {
    return scalar__add__anti_scalar(horizon__bulk_norm(anti_scalar__attitude(rotor__wedge__line(self_, other))), plane_at_origin__weight_norm(rotor__wedge__point_at_infinity(self_, line__attitude(other))));
}

fn rotor__distance__motor(self_: Rotor, other: Motor) -> Magnitude {
    return scalar__add__anti_scalar(horizon__bulk_norm(anti_scalar__attitude(rotor__wedge__motor(self_, other))), plane_at_origin__weight_norm(rotor__wedge__flector_at_infinity(self_, motor__attitude(other))));
}

fn rotor__distance__multi_vector(self_: Rotor, other: MultiVector) -> Magnitude {
    return scalar__add__anti_scalar(multi_vector_at_infinity__bulk_norm(multi_vector_at_origin__attitude(rotor__wedge__multi_vector(self_, other))), multi_vector_at_origin__weight_norm(rotor__wedge__multi_vector_at_infinity(self_, multi_vector__attitude(other))));
}

fn rotor__distance__point(self_: Rotor, other: Point) -> Magnitude {
    return scalar__add__anti_scalar(line_at_infinity__bulk_norm(plane_at_origin__attitude(rotor__wedge__point(self_, other))), rotor__weight_norm(rotor__wedge__scalar(self_, point__attitude(other))));
}

fn rotor__distance__transflector(self_: Rotor, other: Transflector) -> Magnitude {
    return scalar__add__anti_scalar(line_at_infinity__bulk_norm(plane_at_origin__attitude(rotor__wedge__transflector(self_, other))), anti_scalar__weight_norm(rotor__wedge__line_at_infinity(self_, transflector__attitude(other))));
}

fn transflector__distance__flector(self_: Transflector, other: Flector) -> Magnitude {
    return scalar__add__anti_scalar(flector_at_infinity__bulk_norm(motor__attitude(transflector__wedge__flector(self_, other))), multi_vector__weight_norm(transflector__wedge__multi_vector_at_infinity(self_, flector__attitude(other))));
}

fn transflector__distance__line(self_: Transflector, other: Line) -> Magnitude {
    return scalar__add__anti_scalar(line_at_infinity__bulk_norm(plane__attitude(transflector__wedge__line(self_, other))), translator__weight_norm(transflector__wedge__point_at_infinity(self_, line__attitude(other))));
}

fn transflector__distance__line_at_origin(self_: Transflector, other: LineAtOrigin) -> Magnitude {
    return scalar__add__anti_scalar(line_at_infinity__bulk_norm(plane_at_origin__attitude(transflector__wedge__line_at_origin(self_, other))), translator__weight_norm(transflector__wedge__point_at_infinity(self_, line_at_origin__attitude(other))));
}

fn transflector__distance__motor(self_: Transflector, other: Motor) -> Magnitude {
    return scalar__add__anti_scalar(line_at_infinity__bulk_norm(plane__attitude(transflector__wedge__motor(self_, other))), translator__weight_norm(transflector__wedge__flector_at_infinity(self_, motor__attitude(other))));
}

fn transflector__distance__multi_vector(self_: Transflector, other: MultiVector) -> Magnitude {
    return scalar__add__anti_scalar(multi_vector_at_infinity__bulk_norm(multi_vector__attitude(transflector__wedge__multi_vector(self_, other))), multi_vector__weight_norm(transflector__wedge__multi_vector_at_infinity(self_, multi_vector__attitude(other))));
}

fn transflector__distance__multi_vector_at_origin(self_: Transflector, other: MultiVectorAtOrigin) -> Magnitude {
    return scalar__add__anti_scalar(multi_vector_at_infinity__bulk_norm(multi_vector_at_origin__attitude(transflector__wedge__multi_vector_at_origin(self_, other))), multi_vector__weight_norm(transflector__wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__attitude(other))));
}

fn transflector__distance__origin(self_: Transflector, other: Origin) -> Magnitude {
    return scalar__add__anti_scalar(flector_at_infinity__bulk_norm(rotor__attitude(transflector__wedge__origin(self_, other))), transflector__weight_norm(transflector__wedge__scalar(self_, origin__attitude(other))));
}

fn transflector__distance__point(self_: Transflector, other: Point) -> Magnitude {
    return scalar__add__anti_scalar(flector_at_infinity__bulk_norm(motor__attitude(transflector__wedge__point(self_, other))), transflector__weight_norm(transflector__wedge__scalar(self_, point__attitude(other))));
}

fn transflector__distance__rotor(self_: Transflector, other: Rotor) -> Magnitude {
    return scalar__add__anti_scalar(line_at_infinity__bulk_norm(plane_at_origin__attitude(transflector__wedge__rotor(self_, other))), translator__weight_norm(transflector__wedge__flector_at_infinity(self_, rotor__attitude(other))));
}

fn translator__distance__flector(self_: Translator, other: Flector) -> Magnitude {
    return scalar__add__anti_scalar(line_at_infinity__bulk_norm(plane__attitude(translator__wedge__flector(self_, other))), multi_vector__weight_norm(translator__wedge__multi_vector_at_infinity(self_, flector__attitude(other))));
}

fn translator__distance__multi_vector(self_: Translator, other: MultiVector) -> Magnitude {
    return scalar__add__anti_scalar(multi_vector_at_infinity__bulk_norm(multi_vector__attitude(translator__wedge__multi_vector(self_, other))), multi_vector__weight_norm(translator__wedge__multi_vector_at_infinity(self_, multi_vector__attitude(other))));
}

fn translator__distance__multi_vector_at_origin(self_: Translator, other: MultiVectorAtOrigin) -> Magnitude {
    return scalar__add__anti_scalar(multi_vector_at_infinity__bulk_norm(multi_vector_at_origin__attitude(translator__wedge__multi_vector_at_origin(self_, other))), multi_vector__weight_norm(translator__wedge__multi_vector_at_infinity(self_, multi_vector_at_origin__attitude(other))));
}

fn translator__distance__origin(self_: Translator, other: Origin) -> Magnitude {
    return scalar__add__anti_scalar(line_at_infinity__bulk_norm(plane_at_origin__attitude(translator__wedge__origin(self_, other))), translator__weight_norm(translator__wedge__scalar(self_, origin__attitude(other))));
}

fn translator__distance__point(self_: Translator, other: Point) -> Magnitude {
    return scalar__add__anti_scalar(line_at_infinity__bulk_norm(plane__attitude(translator__wedge__point(self_, other))), translator__weight_norm(translator__wedge__scalar(self_, point__attitude(other))));
}

fn line__sine_angle__line(self_: Line, other: Line) -> f32 {
    let cos: f32 = line__cosine_angle__line(self_, other);
    let cos_squared: f32 = cos * cos;
    let sub: f32 = 1.0 - cos_squared;
    return sqrt(sub);
}

fn line__sine_angle__line_at_origin(self_: Line, other: LineAtOrigin) -> f32 {
    let cos: f32 = line__cosine_angle__line_at_origin(self_, other);
    let cos_squared: f32 = cos * cos;
    let sub: f32 = 1.0 - cos_squared;
    return sqrt(sub);
}

fn line__sine_angle__origin(self_: Line, other: Origin) -> f32 {
    let cos: f32 = line__cosine_angle__origin(self_, other);
    let cos_squared: f32 = cos * cos;
    let sub: f32 = 1.0 - cos_squared;
    return sqrt(sub);
}

fn line__sine_angle__point(self_: Line, other: Point) -> f32 {
    let cos: f32 = line__cosine_angle__point(self_, other);
    let cos_squared: f32 = cos * cos;
    let sub: f32 = 1.0 - cos_squared;
    return sqrt(sub);
}

fn line_at_origin__sine_angle__line(self_: LineAtOrigin, other: Line) -> f32 {
    let cos: f32 = line_at_origin__cosine_angle__line(self_, other);
    let cos_squared: f32 = cos * cos;
    let sub: f32 = 1.0 - cos_squared;
    return sqrt(sub);
}

fn line_at_origin__sine_angle__line_at_origin(self_: LineAtOrigin, other: LineAtOrigin) -> f32 {
    let cos: f32 = line_at_origin__cosine_angle__line_at_origin(self_, other);
    let cos_squared: f32 = cos * cos;
    let sub: f32 = 1.0 - cos_squared;
    return sqrt(sub);
}

fn line_at_origin__sine_angle__origin(self_: LineAtOrigin, other: Origin) -> f32 {
    let cos: f32 = line_at_origin__cosine_angle__origin(self_, other);
    let cos_squared: f32 = cos * cos;
    let sub: f32 = 1.0 - cos_squared;
    return sqrt(sub);
}

fn line_at_origin__sine_angle__point(self_: LineAtOrigin, other: Point) -> f32 {
    let cos: f32 = line_at_origin__cosine_angle__point(self_, other);
    let cos_squared: f32 = cos * cos;
    let sub: f32 = 1.0 - cos_squared;
    return sqrt(sub);
}

fn origin__sine_angle__origin(self_: Origin, other: Origin) -> f32 {
    let cos: f32 = origin__cosine_angle__origin(self_, other);
    let cos_squared: f32 = cos * cos;
    let sub: f32 = 1.0 - cos_squared;
    return sqrt(sub);
}

fn origin__sine_angle__point(self_: Origin, other: Point) -> f32 {
    let cos: f32 = origin__cosine_angle__point(self_, other);
    let cos_squared: f32 = cos * cos;
    let sub: f32 = 1.0 - cos_squared;
    return sqrt(sub);
}

fn plane__sine_angle__line(self_: Plane, other: Line) -> f32 {
    let cos: f32 = plane__cosine_angle__line(self_, other);
    let cos_squared: f32 = cos * cos;
    let sub: f32 = 1.0 - cos_squared;
    return sqrt(sub);
}

fn plane__sine_angle__line_at_origin(self_: Plane, other: LineAtOrigin) -> f32 {
    let cos: f32 = plane__cosine_angle__line_at_origin(self_, other);
    let cos_squared: f32 = cos * cos;
    let sub: f32 = 1.0 - cos_squared;
    return sqrt(sub);
}

fn plane__sine_angle__origin(self_: Plane, other: Origin) -> f32 {
    let cos: f32 = plane__cosine_angle__origin(self_, other);
    let cos_squared: f32 = cos * cos;
    let sub: f32 = 1.0 - cos_squared;
    return sqrt(sub);
}

fn plane__sine_angle__plane(self_: Plane, other: Plane) -> f32 {
    let cos: f32 = plane__cosine_angle__plane(self_, other);
    let cos_squared: f32 = cos * cos;
    let sub: f32 = 1.0 - cos_squared;
    return sqrt(sub);
}

fn plane__sine_angle__plane_at_origin(self_: Plane, other: PlaneAtOrigin) -> f32 {
    let cos: f32 = plane__cosine_angle__plane_at_origin(self_, other);
    let cos_squared: f32 = cos * cos;
    let sub: f32 = 1.0 - cos_squared;
    return sqrt(sub);
}

fn plane__sine_angle__point(self_: Plane, other: Point) -> f32 {
    let cos: f32 = plane__cosine_angle__point(self_, other);
    let cos_squared: f32 = cos * cos;
    let sub: f32 = 1.0 - cos_squared;
    return sqrt(sub);
}

fn plane_at_origin__sine_angle__line(self_: PlaneAtOrigin, other: Line) -> f32 {
    let cos: f32 = plane_at_origin__cosine_angle__line(self_, other);
    let cos_squared: f32 = cos * cos;
    let sub: f32 = 1.0 - cos_squared;
    return sqrt(sub);
}

fn plane_at_origin__sine_angle__line_at_origin(self_: PlaneAtOrigin, other: LineAtOrigin) -> f32 {
    let cos: f32 = plane_at_origin__cosine_angle__line_at_origin(self_, other);
    let cos_squared: f32 = cos * cos;
    let sub: f32 = 1.0 - cos_squared;
    return sqrt(sub);
}

fn plane_at_origin__sine_angle__origin(self_: PlaneAtOrigin, other: Origin) -> f32 {
    let cos: f32 = plane_at_origin__cosine_angle__origin(self_, other);
    let cos_squared: f32 = cos * cos;
    let sub: f32 = 1.0 - cos_squared;
    return sqrt(sub);
}

fn plane_at_origin__sine_angle__plane(self_: PlaneAtOrigin, other: Plane) -> f32 {
    let cos: f32 = plane_at_origin__cosine_angle__plane(self_, other);
    let cos_squared: f32 = cos * cos;
    let sub: f32 = 1.0 - cos_squared;
    return sqrt(sub);
}

fn plane_at_origin__sine_angle__plane_at_origin(self_: PlaneAtOrigin, other: PlaneAtOrigin) -> f32 {
    let cos: f32 = plane_at_origin__cosine_angle__plane_at_origin(self_, other);
    let cos_squared: f32 = cos * cos;
    let sub: f32 = 1.0 - cos_squared;
    return sqrt(sub);
}

fn plane_at_origin__sine_angle__point(self_: PlaneAtOrigin, other: Point) -> f32 {
    let cos: f32 = plane_at_origin__cosine_angle__point(self_, other);
    let cos_squared: f32 = cos * cos;
    let sub: f32 = 1.0 - cos_squared;
    return sqrt(sub);
}

fn point__sine_angle__origin(self_: Point, other: Origin) -> f32 {
    let cos: f32 = point__cosine_angle__origin(self_, other);
    let cos_squared: f32 = cos * cos;
    let sub: f32 = 1.0 - cos_squared;
    return sqrt(sub);
}

fn point__sine_angle__point(self_: Point, other: Point) -> f32 {
    let cos: f32 = point__cosine_angle__point(self_, other);
    let cos_squared: f32 = cos * cos;
    let sub: f32 = 1.0 - cos_squared;
    return sqrt(sub);
}

