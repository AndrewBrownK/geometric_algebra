impl InfixAntiWedge for AntiCircleOnOrigin {}
impl AntiWedge<AntiFlatPoint> for AntiCircleOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiFlatPoint) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiFlector> for AntiCircleOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiFlector) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiMotor> for AntiCircleOnOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiMotor) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (self.group0() * Simd32x3::from(other.group1()[3])));
    }
}
impl AntiWedge<AntiScalar> for AntiCircleOnOrigin {
    type Output = AntiCircleOnOrigin;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiCircleOnOrigin::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other[e12345])),
            // e23, e31, e12
            (self.group1() * Simd32x3::from(other[e12345])),
        );
    }
}
impl AntiWedge<Circle> for AntiCircleOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: Circle) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group1()[2])
                - (self.group1()[1] * other.group1()[1])
                - (self.group1()[0] * other.group1()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl AntiWedge<CircleAligningOrigin> for AntiCircleOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group1()[2])
                - (self.group1()[1] * other.group1()[1])
                - (self.group1()[0] * other.group1()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl AntiWedge<CircleAtInfinity> for AntiCircleOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleAtInfinity) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[3])
                - (self.group1()[1] * other.group0()[2])
                - (self.group1()[0] * other.group0()[1])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<CircleAtOrigin> for AntiCircleOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleAtOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<CircleOnOrigin> for AntiCircleOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<CircleOrthogonalOrigin> for AntiCircleOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<DualNum> for AntiCircleOnOrigin {
    type Output = AntiCircleOnOrigin;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        return AntiCircleOnOrigin::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other.group0()[1])),
            // e23, e31, e12
            (self.group1() * Simd32x3::from(other.group0()[1])),
        );
    }
}
impl AntiWedge<Flector> for AntiCircleOnOrigin {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from([
            ((self.group0()[0] * other.group1()[3]) + (self.group1()[1] * other.group1()[2])),
            ((self.group0()[1] * other.group1()[3]) + (self.group1()[2] * other.group1()[0])),
            ((self.group0()[2] * other.group1()[3]) + (self.group1()[0] * other.group1()[1])),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<FlectorAtInfinity> for AntiCircleOnOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (self.group0() * Simd32x3::from(other.group0()[3])));
    }
}
impl AntiWedge<FlectorOnOrigin> for AntiCircleOnOrigin {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from([
            (self.group1()[1] * other.group0()[3]),
            (self.group1()[2] * other.group0()[1]),
            (self.group1()[0] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
        ]));
    }
}
impl AntiWedge<Horizon> for AntiCircleOnOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (self.group0() * Simd32x3::from(other[e3215])));
    }
}
impl AntiWedge<Line> for AntiCircleOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: Line) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<LineAtInfinity> for AntiCircleOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: LineAtInfinity) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<LineOnOrigin> for AntiCircleOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: LineOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<Motor> for AntiCircleOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            (self.group1() * Simd32x3::from(other.group0()[3])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<MotorAtInfinity> for AntiCircleOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: MotorAtInfinity) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<MotorOnOrigin> for AntiCircleOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            (self.group1() * Simd32x3::from(other.group0()[3])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<MultiVector> for AntiCircleOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group1()[2] * other.group6()[3])
                    - (self.group1()[1] * other.group6()[2])
                    - (self.group1()[0] * other.group6()[1])
                    - (self.group0()[2] * other.group8()[2])
                    - (self.group0()[0] * other.group8()[0])
                    - (self.group0()[1] * other.group8()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other[e45]) + (self.group1()[1] * other.group9()[2])),
                ((self.group0()[1] * other[e45]) + (self.group1()[2] * other.group9()[0])),
                ((self.group0()[2] * other[e45]) + (self.group1()[0] * other.group9()[1])),
                (-(self.group0()[2] * other.group9()[2]) - (self.group0()[0] * other.group9()[0]) - (self.group0()[1] * other.group9()[1])),
            ]),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[2] * other.group0()[1]),
                0.0,
            ]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            (self.group1() * Simd32x3::from(other.group0()[1])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<Plane> for AntiCircleOnOrigin {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from([
            ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2])),
            ((self.group0()[1] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
            ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1])),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<PlaneOnOrigin> for AntiCircleOnOrigin {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from([
            (self.group1()[1] * other.group0()[2]),
            (self.group1()[2] * other.group0()[0]),
            (self.group1()[0] * other.group0()[1]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<Sphere> for AntiCircleOnOrigin {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from([
            ((self.group0()[0] * other.group1()[1]) + (self.group1()[1] * other.group0()[2])),
            ((self.group0()[1] * other.group1()[1]) + (self.group1()[2] * other.group0()[0])),
            ((self.group0()[2] * other.group1()[1]) + (self.group1()[0] * other.group0()[1])),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<SphereAtOrigin> for AntiCircleOnOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: SphereAtOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (self.group0() * Simd32x3::from(other.group0()[1])));
    }
}
impl AntiWedge<SphereOnOrigin> for AntiCircleOnOrigin {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from([
            (self.group1()[1] * other.group0()[2]),
            (self.group1()[2] * other.group0()[0]),
            (self.group1()[0] * other.group0()[1]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl InfixAntiWedge for AntiDipoleOnOrigin {}
impl AntiWedge<AntiFlatPoint> for AntiDipoleOnOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ Simd32x3::from([
            (self.group0()[2] * other.group0()[1]),
            (self.group0()[0] * other.group0()[2]),
            (self.group0()[1] * other.group0()[0]),
        ]));
    }
}
impl AntiWedge<AntiFlector> for AntiDipoleOnOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiFlector) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ Simd32x3::from([
            (self.group0()[2] * other.group0()[1]),
            (self.group0()[0] * other.group0()[2]),
            (self.group0()[1] * other.group0()[0]),
        ]));
    }
}
impl AntiWedge<AntiLine> for AntiDipoleOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiLine) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<AntiMotor> for AntiDipoleOnOrigin {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: AntiMotor) -> Self::Output {
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ Simd32x4::from([
            (self.group0()[0] * other.group1()[3]),
            (self.group0()[1] * other.group1()[3]),
            (self.group0()[2] * other.group1()[3]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<AntiScalar> for AntiDipoleOnOrigin {
    type Output = AntiDipoleOnOrigin;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleOnOrigin::from_groups(/* e423, e431, e412, e321 */ (self.group0() * Simd32x4::from(other[e12345])));
    }
}
impl AntiWedge<Circle> for AntiDipoleOnOrigin {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: Circle) -> Self::Output {
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from([
            ((self.group0()[2] * other.group2()[1]) + (self.group0()[3] * other.group1()[0])),
            ((self.group0()[0] * other.group2()[2]) + (self.group0()[3] * other.group1()[1])),
            ((self.group0()[1] * other.group2()[0]) + (self.group0()[3] * other.group1()[2])),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<CircleAligningOrigin> for AntiDipoleOnOrigin {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from([
            ((self.group0()[2] * other.group2()[1]) + (self.group0()[3] * other.group1()[0])),
            ((self.group0()[0] * other.group2()[2]) + (self.group0()[3] * other.group1()[1])),
            ((self.group0()[1] * other.group2()[0]) + (self.group0()[3] * other.group1()[2])),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<CircleAtInfinity> for AntiDipoleOnOrigin {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: CircleAtInfinity) -> Self::Output {
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from([
            ((self.group0()[2] * other.group1()[1]) + (self.group0()[3] * other.group0()[1])),
            ((self.group0()[0] * other.group1()[2]) + (self.group0()[3] * other.group0()[2])),
            ((self.group0()[1] * other.group1()[0]) + (self.group0()[3] * other.group0()[3])),
            (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
        ]));
    }
}
impl AntiWedge<CircleAtOrigin> for AntiDipoleOnOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: CircleAtOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(
            // e1, e2, e3
            (swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]])),
        );
    }
}
impl AntiWedge<CircleOnOrigin> for AntiDipoleOnOrigin {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: CircleOnOrigin) -> Self::Output {
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from([
            (self.group0()[3] * other.group1()[0]),
            (self.group0()[3] * other.group1()[1]),
            (self.group0()[3] * other.group1()[2]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<CircleOrthogonalOrigin> for AntiDipoleOnOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(
            // e1, e2, e3
            (swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]])),
        );
    }
}
impl AntiWedge<Dipole> for AntiDipoleOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: Dipole) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[3] * other.group2()[3]) - (self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl AntiWedge<DipoleAligningOrigin> for AntiDipoleOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[3] * other.group1()[3]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<DipoleAtInfinity> for AntiDipoleOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[3] * other.group1()[3]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<DipoleAtOrigin> for AntiDipoleOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<DipoleOnOrigin> for AntiDipoleOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return Scalar::from_groups(/* scalar */ (self.group0()[3] * other.group0()[3] * -1.0));
    }
}
impl AntiWedge<DipoleOrthogonalOrigin> for AntiDipoleOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl AntiWedge<DualNum> for AntiDipoleOnOrigin {
    type Output = AntiDipoleOnOrigin;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        return AntiDipoleOnOrigin::from_groups(/* e423, e431, e412, e321 */ (self.group0() * Simd32x4::from(other.group0()[1])));
    }
}
impl AntiWedge<FlatOrigin> for AntiDipoleOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self.group0()[3] * other[e45] * -1.0));
    }
}
impl AntiWedge<FlatPoint> for AntiDipoleOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: FlatPoint) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<FlatPointAtInfinity> for AntiDipoleOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<Flector> for AntiDipoleOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[1] * other.group1()[2] * -1.0),
                (self.group0()[2] * other.group1()[0] * -1.0),
                (self.group0()[0] * other.group1()[1] * -1.0),
                0.0,
            ]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            (Simd32x3::from([(self.group0()[0] * other.group1()[3]), (self.group0()[3] * other.group1()[1]), (self.group0()[2] * other.group1()[3])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<FlectorAtInfinity> for AntiDipoleOnOrigin {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<FlectorOnOrigin> for AntiDipoleOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(self.group0()[3] * other.group0()[0] * -1.0), 0.0]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[3]]) * Simd32x3::from(-1.0)),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<Horizon> for AntiDipoleOnOrigin {
    type Output = AntiLineOnOrigin;
    fn anti_wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return AntiLineOnOrigin::from_groups(
            // e23, e31, e12
            (Simd32x3::from(other[e3215]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
        );
    }
}
impl AntiWedge<Line> for AntiDipoleOnOrigin {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: Line) -> Self::Output {
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from([
            ((self.group0()[2] * other.group1()[1]) + (self.group0()[3] * other.group0()[0])),
            ((self.group0()[0] * other.group1()[2]) + (self.group0()[3] * other.group0()[1])),
            ((self.group0()[1] * other.group1()[0]) + (self.group0()[3] * other.group0()[2])),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<LineAtInfinity> for AntiDipoleOnOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: LineAtInfinity) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(
            // e1, e2, e3
            (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]])),
        );
    }
}
impl AntiWedge<LineOnOrigin> for AntiDipoleOnOrigin {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: LineOnOrigin) -> Self::Output {
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<Motor> for AntiDipoleOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[2] * other.group1()[1]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([(self.group0()[3] * other.group0()[3]), 0.0, 0.0, 0.0]),
            // e423, e431, e412
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<MotorAtInfinity> for AntiDipoleOnOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: MotorAtInfinity) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ Simd32x3::from([
            (self.group0()[2] * other.group0()[1]),
            (self.group0()[0] * other.group0()[2]),
            (self.group0()[1] * other.group0()[0]),
        ]));
    }
}
impl AntiWedge<MotorOnOrigin> for AntiDipoleOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([(self.group0()[3] * other.group0()[3]), 0.0, 0.0, 0.0]),
            // e423, e431, e412
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<MultiVector> for AntiDipoleOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[3] * other.group3()[3])
                    - (self.group0()[2] * other.group4()[2])
                    - (self.group0()[0] * other.group4()[0])
                    - (self.group0()[1] * other.group4()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[2] * other.group8()[1]) + (self.group0()[3] * other.group6()[1])),
                ((self.group0()[0] * other.group8()[2]) + (self.group0()[3] * other.group6()[2])),
                ((self.group0()[1] * other.group8()[0]) + (self.group0()[3] * other.group6()[3])),
                (-(self.group0()[2] * other.group6()[3]) - (self.group0()[0] * other.group6()[1]) - (self.group0()[1] * other.group6()[2])),
            ]),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[1] * other.group9()[2] * -1.0),
                (self.group0()[2] * other.group9()[0] * -1.0),
                (self.group0()[0] * other.group9()[1] * -1.0),
                0.0,
            ]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            (Simd32x3::from([(self.group0()[0] * other[e45]), (self.group0()[3] * other.group9()[1]), (self.group0()[2] * other[e45])]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e321, e415, e425, e435
            Simd32x4::from([(self.group0()[3] * other.group0()[1]), 0.0, 0.0, 0.0]),
            // e423, e431, e412
            (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<Plane> for AntiDipoleOnOrigin {
    type Output = AntiCircleOnOrigin;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        return AntiCircleOnOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from([(self.group0()[1] * other.group0()[2]), (self.group0()[2] * other.group0()[0]), (self.group0()[0] * other.group0()[1])]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (Simd32x3::from([(self.group0()[0] * other.group0()[3]), (self.group0()[3] * other.group0()[1]), (self.group0()[2] * other.group0()[3])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl AntiWedge<PlaneOnOrigin> for AntiDipoleOnOrigin {
    type Output = AntiCircleOnOrigin;
    fn anti_wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return AntiCircleOnOrigin::from_groups(
            // e41, e42, e43
            (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[3]) * other.group0() * Simd32x3::from(-1.0)),
        );
    }
}
impl AntiWedge<Sphere> for AntiDipoleOnOrigin {
    type Output = AntiCircleOnOrigin;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        return AntiCircleOnOrigin::from_groups(
            // e41, e42, e43
            (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (Simd32x3::from([(self.group0()[0] * other.group1()[1]), (self.group0()[3] * other.group0()[1]), (self.group0()[2] * other.group1()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl AntiWedge<SphereAtOrigin> for AntiDipoleOnOrigin {
    type Output = AntiLineOnOrigin;
    fn anti_wedge(self, other: SphereAtOrigin) -> Self::Output {
        return AntiLineOnOrigin::from_groups(
            // e23, e31, e12
            (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
        );
    }
}
impl AntiWedge<SphereOnOrigin> for AntiDipoleOnOrigin {
    type Output = AntiCircleOnOrigin;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        return AntiCircleOnOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from([(self.group0()[1] * other.group0()[2]), (self.group0()[2] * other.group0()[0]), (self.group0()[0] * other.group0()[1])]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
        );
    }
}
impl InfixAntiWedge for AntiFlatOrigin {}
impl AntiWedge<AntiScalar> for AntiFlatOrigin {
    type Output = AntiFlatOrigin;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiFlatOrigin::from_groups(/* e321 */ (self[e321] * other[e12345]));
    }
}
impl AntiWedge<Circle> for AntiFlatOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (Simd32x3::from(self[e321]) * other.group1()));
    }
}
impl AntiWedge<CircleAligningOrigin> for AntiFlatOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: CircleAligningOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (Simd32x3::from(self[e321]) * other.group1()));
    }
}
impl AntiWedge<CircleAtInfinity> for AntiFlatOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: CircleAtInfinity) -> Self::Output {
        use crate::elements::*;
        return AntiPlaneOnOrigin::from_groups(
            // e1, e2, e3
            (Simd32x3::from(self[e321]) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[3]])),
        );
    }
}
impl AntiWedge<CircleOnOrigin> for AntiFlatOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: CircleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (Simd32x3::from(self[e321]) * other.group1()));
    }
}
impl AntiWedge<Dipole> for AntiFlatOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self[e321] * other.group2()[3] * -1.0));
    }
}
impl AntiWedge<DipoleAligningOrigin> for AntiFlatOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self[e321] * other.group1()[3] * -1.0));
    }
}
impl AntiWedge<DipoleAtInfinity> for AntiFlatOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleAtInfinity) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self[e321] * other.group1()[3] * -1.0));
    }
}
impl AntiWedge<DipoleOnOrigin> for AntiFlatOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self[e321] * other.group0()[3] * -1.0));
    }
}
impl AntiWedge<DualNum> for AntiFlatOrigin {
    type Output = AntiFlatOrigin;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return AntiFlatOrigin::from_groups(/* e321 */ (self[e321] * other.group0()[1]));
    }
}
impl AntiWedge<FlatOrigin> for AntiFlatOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self[e321] * other[e45] * -1.0));
    }
}
impl AntiWedge<FlatPoint> for AntiFlatOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self[e321] * other.group0()[3] * -1.0));
    }
}
impl AntiWedge<Flector> for AntiFlatOrigin {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return AntiMotorOnOrigin::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(self[e321]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl AntiWedge<FlectorOnOrigin> for AntiFlatOrigin {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: FlectorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiMotorOnOrigin::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(self[e321]) * swizzle!(other.group0(), 1, 2, 3, 0) * Simd32x4::from(-1.0)),
        );
    }
}
impl AntiWedge<Line> for AntiFlatOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (Simd32x3::from(self[e321]) * other.group0()));
    }
}
impl AntiWedge<LineOnOrigin> for AntiFlatOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: LineOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (Simd32x3::from(self[e321]) * other.group0()));
    }
}
impl AntiWedge<Motor> for AntiFlatOrigin {
    type Output = AntiFlectorOnOrigin;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return AntiFlectorOnOrigin::from_groups(/* e321, e1, e2, e3 */ (Simd32x4::from(self[e321]) * swizzle!(other.group0(), 3, 0, 1, 2)));
    }
}
impl AntiWedge<MotorOnOrigin> for AntiFlatOrigin {
    type Output = AntiFlectorOnOrigin;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiFlectorOnOrigin::from_groups(/* e321, e1, e2, e3 */ (Simd32x4::from(self[e321]) * swizzle!(other.group0(), 3, 0, 1, 2)));
    }
}
impl AntiWedge<MultiVector> for AntiFlatOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(self[e321] * other.group3()[3] * -1.0), 0.0]),
            // e1, e2, e3, e4
            Simd32x4::from([(self[e321] * other.group6()[1]), (self[e321] * other.group6()[2]), (self[e321] * other.group6()[3]), 0.0]),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            (Simd32x3::from(self[e321]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]) * Simd32x3::from(-1.0)),
            // e321, e415, e425, e435
            Simd32x4::from([(self[e321] * other.group0()[1]), 0.0, 0.0, 0.0]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<Plane> for AntiFlatOrigin {
    type Output = AntiLineOnOrigin;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return AntiLineOnOrigin::from_groups(
            // e23, e31, e12
            (Simd32x3::from(self[e321]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
        );
    }
}
impl AntiWedge<PlaneOnOrigin> for AntiFlatOrigin {
    type Output = AntiLineOnOrigin;
    fn anti_wedge(self, other: PlaneOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiLineOnOrigin::from_groups(/* e23, e31, e12 */ (Simd32x3::from(self[e321]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl AntiWedge<Sphere> for AntiFlatOrigin {
    type Output = AntiLineOnOrigin;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiLineOnOrigin::from_groups(/* e23, e31, e12 */ (Simd32x3::from(self[e321]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl AntiWedge<SphereOnOrigin> for AntiFlatOrigin {
    type Output = AntiLineOnOrigin;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiLineOnOrigin::from_groups(
            // e23, e31, e12
            (Simd32x3::from(self[e321]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
        );
    }
}
impl InfixAntiWedge for AntiFlatPoint {}
impl AntiWedge<AntiCircleOnOrigin> for AntiFlatPoint {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiDipoleOnOrigin> for AntiFlatPoint {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ Simd32x3::from([
            (self.group0()[1] * other.group0()[2]),
            (self.group0()[2] * other.group0()[0]),
            (self.group0()[0] * other.group0()[1]),
        ]));
    }
}
impl AntiWedge<AntiScalar> for AntiFlatPoint {
    type Output = AntiFlatPoint;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ (self.group0() * Simd32x4::from(other[e12345])));
    }
}
impl AntiWedge<Circle> for AntiFlatPoint {
    type Output = AntiPlane;
    fn anti_wedge(self, other: Circle) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            ((self.group0()[1] * other.group0()[2]) + (self.group0()[3] * other.group1()[0])),
            ((self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group1()[1])),
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[3] * other.group1()[2])),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<CircleAligningOrigin> for AntiFlatPoint {
    type Output = AntiPlane;
    fn anti_wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            ((self.group0()[1] * other.group0()[2]) + (self.group0()[3] * other.group1()[0])),
            ((self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group1()[1])),
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[3] * other.group1()[2])),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<CircleAtInfinity> for AntiFlatPoint {
    type Output = AntiPlane;
    fn anti_wedge(self, other: CircleAtInfinity) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (self.group0()[3] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
        ]));
    }
}
impl AntiWedge<CircleAtOrigin> for AntiFlatPoint {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: CircleAtOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(
            // e1, e2, e3
            (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]])),
        );
    }
}
impl AntiWedge<CircleOnOrigin> for AntiFlatPoint {
    type Output = AntiPlane;
    fn anti_wedge(self, other: CircleOnOrigin) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            ((self.group0()[1] * other.group0()[2]) + (self.group0()[3] * other.group1()[0])),
            ((self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group1()[1])),
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[3] * other.group1()[2])),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<CircleOrthogonalOrigin> for AntiFlatPoint {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ Simd32x3::from([
            (self.group0()[1] * other.group0()[2]),
            (self.group0()[2] * other.group0()[0]),
            (self.group0()[0] * other.group0()[1]),
        ]));
    }
}
impl AntiWedge<Dipole> for AntiFlatPoint {
    type Output = Scalar;
    fn anti_wedge(self, other: Dipole) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[3] * other.group2()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<DipoleAligningOrigin> for AntiFlatPoint {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[3] * other.group1()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<DipoleAtInfinity> for AntiFlatPoint {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return Scalar::from_groups(/* scalar */ (self.group0()[3] * other.group1()[3] * -1.0));
    }
}
impl AntiWedge<DipoleAtOrigin> for AntiFlatPoint {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<DipoleOnOrigin> for AntiFlatPoint {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<DipoleOrthogonalOrigin> for AntiFlatPoint {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<DualNum> for AntiFlatPoint {
    type Output = AntiFlatPoint;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ (self.group0() * Simd32x4::from(other.group0()[1])));
    }
}
impl AntiWedge<FlatOrigin> for AntiFlatPoint {
    type Output = Scalar;
    fn anti_wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self.group0()[3] * other[e45] * -1.0));
    }
}
impl AntiWedge<FlatPoint> for AntiFlatPoint {
    type Output = Scalar;
    fn anti_wedge(self, other: FlatPoint) -> Self::Output {
        return Scalar::from_groups(/* scalar */ (self.group0()[3] * other.group0()[3] * -1.0));
    }
}
impl AntiWedge<Flector> for AntiFlatPoint {
    type Output = AntiMotor;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]) * Simd32x4::from(-1.0)),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group0()[1] * other.group1()[2]),
                (self.group0()[2] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                0.0,
            ]),
        );
    }
}
impl AntiWedge<FlectorOnOrigin> for AntiFlatPoint {
    type Output = AntiMotor;
    fn anti_wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(self.group0()[3]) * swizzle!(other.group0(), 1, 2, 3, 0) * Simd32x4::from(-1.0)),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl AntiWedge<Line> for AntiFlatPoint {
    type Output = AntiPlane;
    fn anti_wedge(self, other: Line) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<LineOnOrigin> for AntiFlatPoint {
    type Output = AntiPlane;
    fn anti_wedge(self, other: LineOnOrigin) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<Motor> for AntiFlatPoint {
    type Output = AntiFlector;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl AntiWedge<MotorOnOrigin> for AntiFlatPoint {
    type Output = AntiFlector;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl AntiWedge<MultiVector> for AntiFlatPoint {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[3] * other.group3()[3])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group3()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[1] * other.group7()[2]) + (self.group0()[3] * other.group6()[1])),
                ((self.group0()[2] * other.group7()[0]) + (self.group0()[3] * other.group6()[2])),
                ((self.group0()[0] * other.group7()[1]) + (self.group0()[3] * other.group6()[3])),
                0.0,
            ]),
            // e5
            (-(self.group0()[2] * other.group6()[3]) - (self.group0()[0] * other.group6()[1]) - (self.group0()[1] * other.group6()[2])),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from([(self.group0()[1] * other.group9()[2]), (self.group0()[2] * other.group9()[0]), (self.group0()[0] * other.group9()[1])]),
            // e23, e31, e12
            (Simd32x3::from([(self.group0()[0] * other.group9()[3]), (self.group0()[3] * other.group9()[1]), (self.group0()[2] * other.group9()[3])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e321, e415, e425, e435
            Simd32x4::from([(self.group0()[3] * other.group0()[1]), 0.0, 0.0, 0.0]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<NullCircleAtOrigin> for AntiFlatPoint {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(
            // e1, e2, e3
            (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]])),
        );
    }
}
impl AntiWedge<NullDipoleAtOrigin> for AntiFlatPoint {
    type Output = Scalar;
    fn anti_wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<NullSphereAtOrigin> for AntiFlatPoint {
    type Output = AntiLineOnOrigin;
    fn anti_wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiLineOnOrigin::from_groups(
            // e23, e31, e12
            (Simd32x3::from(other[e1234]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
        );
    }
}
impl AntiWedge<Plane> for AntiFlatPoint {
    type Output = AntiLine;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        return AntiLine::from_groups(
            // e23, e31, e12
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
            // e15, e25, e35
            Simd32x3::from([(self.group0()[1] * other.group0()[2]), (self.group0()[2] * other.group0()[0]), (self.group0()[0] * other.group0()[1])]),
        );
    }
}
impl AntiWedge<PlaneOnOrigin> for AntiFlatPoint {
    type Output = AntiLine;
    fn anti_wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return AntiLine::from_groups(
            // e23, e31, e12
            (Simd32x3::from(self.group0()[3]) * other.group0() * Simd32x3::from(-1.0)),
            // e15, e25, e35
            (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]])),
        );
    }
}
impl AntiWedge<Sphere> for AntiFlatPoint {
    type Output = AntiLine;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        return AntiLine::from_groups(
            // e23, e31, e12
            (Simd32x3::from([(self.group0()[0] * other.group1()[0]), (self.group0()[3] * other.group0()[1]), (self.group0()[2] * other.group1()[0])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e15, e25, e35
            (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]])),
        );
    }
}
impl AntiWedge<SphereAtOrigin> for AntiFlatPoint {
    type Output = AntiLineOnOrigin;
    fn anti_wedge(self, other: SphereAtOrigin) -> Self::Output {
        return AntiLineOnOrigin::from_groups(
            // e23, e31, e12
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
        );
    }
}
impl AntiWedge<SphereOnOrigin> for AntiFlatPoint {
    type Output = AntiLine;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        return AntiLine::from_groups(
            // e23, e31, e12
            (Simd32x3::from([(self.group0()[0] * other.group0()[3]), (self.group0()[3] * other.group0()[1]), (self.group0()[2] * other.group0()[3])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e15, e25, e35
            Simd32x3::from([(self.group0()[1] * other.group0()[2]), (self.group0()[2] * other.group0()[0]), (self.group0()[0] * other.group0()[1])]),
        );
    }
}
impl InfixAntiWedge for AntiFlector {}
impl AntiWedge<AntiCircleOnOrigin> for AntiFlector {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiDipoleOnOrigin> for AntiFlector {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ Simd32x3::from([
            (self.group0()[1] * other.group0()[2]),
            (self.group0()[2] * other.group0()[0]),
            (self.group0()[0] * other.group0()[1]),
        ]));
    }
}
impl AntiWedge<AntiScalar> for AntiFlector {
    type Output = AntiFlector;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (self.group0() * Simd32x4::from(other[e12345])),
            // e1, e2, e3, e5
            (self.group1() * Simd32x4::from(other[e12345])),
        );
    }
}
impl AntiWedge<Circle> for AntiFlector {
    type Output = AntiPlane;
    fn anti_wedge(self, other: Circle) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            ((self.group0()[1] * other.group0()[2]) + (self.group0()[3] * other.group1()[0])),
            ((self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group1()[1])),
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[3] * other.group1()[2])),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<CircleAligningOrigin> for AntiFlector {
    type Output = AntiPlane;
    fn anti_wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            ((self.group0()[1] * other.group0()[2]) + (self.group0()[3] * other.group1()[0])),
            ((self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group1()[1])),
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[3] * other.group1()[2])),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<CircleAtInfinity> for AntiFlector {
    type Output = AntiPlane;
    fn anti_wedge(self, other: CircleAtInfinity) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (self.group0()[3] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
        ]));
    }
}
impl AntiWedge<CircleAtOrigin> for AntiFlector {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: CircleAtOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(
            // e1, e2, e3
            (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]])),
        );
    }
}
impl AntiWedge<CircleOnOrigin> for AntiFlector {
    type Output = AntiPlane;
    fn anti_wedge(self, other: CircleOnOrigin) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            ((self.group0()[1] * other.group0()[2]) + (self.group0()[3] * other.group1()[0])),
            ((self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group1()[1])),
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[3] * other.group1()[2])),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<CircleOrthogonalOrigin> for AntiFlector {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ Simd32x3::from([
            (self.group0()[1] * other.group0()[2]),
            (self.group0()[2] * other.group0()[0]),
            (self.group0()[0] * other.group0()[1]),
        ]));
    }
}
impl AntiWedge<Dipole> for AntiFlector {
    type Output = Scalar;
    fn anti_wedge(self, other: Dipole) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[3] * other.group2()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<DipoleAligningOrigin> for AntiFlector {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[3] * other.group1()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<DipoleAtInfinity> for AntiFlector {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return Scalar::from_groups(/* scalar */ (self.group0()[3] * other.group1()[3] * -1.0));
    }
}
impl AntiWedge<DipoleAtOrigin> for AntiFlector {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<DipoleOnOrigin> for AntiFlector {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<DipoleOrthogonalOrigin> for AntiFlector {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<DualNum> for AntiFlector {
    type Output = AntiFlector;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (self.group0() * Simd32x4::from(other.group0()[1])),
            // e1, e2, e3, e5
            (self.group1() * Simd32x4::from(other.group0()[1])),
        );
    }
}
impl AntiWedge<FlatOrigin> for AntiFlector {
    type Output = Scalar;
    fn anti_wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self.group0()[3] * other[e45] * -1.0));
    }
}
impl AntiWedge<FlatPoint> for AntiFlector {
    type Output = Scalar;
    fn anti_wedge(self, other: FlatPoint) -> Self::Output {
        return Scalar::from_groups(/* scalar */ (self.group0()[3] * other.group0()[3] * -1.0));
    }
}
impl AntiWedge<Flector> for AntiFlector {
    type Output = AntiMotor;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0] * -1.0),
                (self.group0()[3] * other.group1()[1] * -1.0),
                (self.group0()[3] * other.group1()[2] * -1.0),
                ((self.group1()[2] * other.group1()[2]) + (self.group1()[0] * other.group1()[0]) + (self.group1()[1] * other.group1()[1])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group0()[1] * other.group1()[2]),
                (self.group0()[2] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                0.0,
            ]),
        );
    }
}
impl AntiWedge<FlectorOnOrigin> for AntiFlector {
    type Output = AntiMotor;
    fn anti_wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                (self.group0()[3] * other.group0()[3] * -1.0),
                ((self.group1()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl AntiWedge<Line> for AntiFlector {
    type Output = AntiPlane;
    fn anti_wedge(self, other: Line) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<LineOnOrigin> for AntiFlector {
    type Output = AntiPlane;
    fn anti_wedge(self, other: LineOnOrigin) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<Motor> for AntiFlector {
    type Output = AntiFlector;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e1, e2, e3, e5
            Simd32x4::from([
                ((self.group0()[3] * other.group0()[0]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[3] * other.group0()[1]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[3] * other.group0()[2]) + (self.group1()[2] * other.group0()[3])),
                (self.group1()[3] * other.group0()[3]),
            ]),
        );
    }
}
impl AntiWedge<MotorOnOrigin> for AntiFlector {
    type Output = AntiFlector;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e1, e2, e3, e5
            Simd32x4::from([
                ((self.group0()[3] * other.group0()[0]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[3] * other.group0()[1]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[3] * other.group0()[2]) + (self.group1()[2] * other.group0()[3])),
                (self.group1()[3] * other.group0()[3]),
            ]),
        );
    }
}
impl AntiWedge<MultiVector> for AntiFlector {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group1()[3] * other.group9()[3]) + (self.group1()[2] * other.group9()[2]) + (self.group1()[0] * other.group9()[0]) + (self.group1()[1] * other.group9()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[1]) + (self.group0()[1] * other.group7()[2]) + (self.group0()[3] * other.group6()[1])),
                ((self.group1()[1] * other.group0()[1]) + (self.group0()[2] * other.group7()[0]) + (self.group0()[3] * other.group6()[2])),
                ((self.group1()[2] * other.group0()[1]) + (self.group0()[0] * other.group7()[1]) + (self.group0()[3] * other.group6()[3])),
                0.0,
            ]),
            // e5
            (self.group1()[3] * other.group0()[1]),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from([(self.group0()[1] * other.group9()[2]), (self.group0()[2] * other.group9()[0]), (self.group0()[0] * other.group9()[1])]),
            // e23, e31, e12
            (Simd32x3::from([(self.group0()[0] * other.group9()[3]), (self.group0()[3] * other.group9()[1]), (self.group0()[2] * other.group9()[3])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e321, e415, e425, e435
            Simd32x4::from([(self.group0()[3] * other.group0()[1]), 0.0, 0.0, 0.0]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<NullCircleAtOrigin> for AntiFlector {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(
            // e1, e2, e3
            (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]])),
        );
    }
}
impl AntiWedge<NullDipoleAtOrigin> for AntiFlector {
    type Output = Scalar;
    fn anti_wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<NullSphereAtOrigin> for AntiFlector {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiMotorOnOrigin::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(other[e1234]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
        );
    }
}
impl AntiWedge<Plane> for AntiFlector {
    type Output = AntiMotor;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                0.0,
            ]),
        );
    }
}
impl AntiWedge<PlaneOnOrigin> for AntiFlector {
    type Output = AntiMotor;
    fn anti_wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                0.0,
            ]),
        );
    }
}
impl AntiWedge<Sphere> for AntiFlector {
    type Output = AntiMotor;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[2] * other.group1()[0]),
                ((self.group1()[3] * other.group1()[0]) + (self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                0.0,
            ]),
        );
    }
}
impl AntiWedge<SphereAtOrigin> for AntiFlector {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: SphereAtOrigin) -> Self::Output {
        return AntiMotorOnOrigin::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
        );
    }
}
impl AntiWedge<SphereOnOrigin> for AntiFlector {
    type Output = AntiMotor;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[2] * other.group0()[3]),
                ((self.group1()[3] * other.group0()[3]) + (self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                0.0,
            ]),
        );
    }
}
impl InfixAntiWedge for AntiFlectorOnOrigin {}
impl AntiWedge<AntiScalar> for AntiFlectorOnOrigin {
    type Output = AntiFlectorOnOrigin;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiFlectorOnOrigin::from_groups(/* e321, e1, e2, e3 */ (self.group0() * Simd32x4::from(other[e12345])));
    }
}
impl AntiWedge<Circle> for AntiFlectorOnOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: Circle) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (Simd32x3::from(self.group0()[0]) * other.group1()));
    }
}
impl AntiWedge<CircleAligningOrigin> for AntiFlectorOnOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (Simd32x3::from(self.group0()[0]) * other.group1()));
    }
}
impl AntiWedge<CircleAtInfinity> for AntiFlectorOnOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: CircleAtInfinity) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(
            // e1, e2, e3
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[3]])),
        );
    }
}
impl AntiWedge<CircleOnOrigin> for AntiFlectorOnOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: CircleOnOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (Simd32x3::from(self.group0()[0]) * other.group1()));
    }
}
impl AntiWedge<Dipole> for AntiFlectorOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: Dipole) -> Self::Output {
        return Scalar::from_groups(/* scalar */ (self.group0()[0] * other.group2()[3] * -1.0));
    }
}
impl AntiWedge<DipoleAligningOrigin> for AntiFlectorOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return Scalar::from_groups(/* scalar */ (self.group0()[0] * other.group1()[3] * -1.0));
    }
}
impl AntiWedge<DipoleAtInfinity> for AntiFlectorOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return Scalar::from_groups(/* scalar */ (self.group0()[0] * other.group1()[3] * -1.0));
    }
}
impl AntiWedge<DipoleOnOrigin> for AntiFlectorOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return Scalar::from_groups(/* scalar */ (self.group0()[0] * other.group0()[3] * -1.0));
    }
}
impl AntiWedge<DualNum> for AntiFlectorOnOrigin {
    type Output = AntiFlectorOnOrigin;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        return AntiFlectorOnOrigin::from_groups(/* e321, e1, e2, e3 */ (self.group0() * Simd32x4::from(other.group0()[1])));
    }
}
impl AntiWedge<FlatOrigin> for AntiFlectorOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self.group0()[0] * other[e45] * -1.0));
    }
}
impl AntiWedge<FlatPoint> for AntiFlectorOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: FlatPoint) -> Self::Output {
        return Scalar::from_groups(/* scalar */ (self.group0()[0] * other.group0()[3] * -1.0));
    }
}
impl AntiWedge<Flector> for AntiFlectorOnOrigin {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ Simd32x4::from([
            (self.group0()[0] * other.group1()[0] * -1.0),
            (self.group0()[0] * other.group1()[1] * -1.0),
            (self.group0()[0] * other.group1()[2] * -1.0),
            ((self.group0()[3] * other.group1()[2]) + (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<FlectorOnOrigin> for AntiFlectorOnOrigin {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ Simd32x4::from([
            (self.group0()[0] * other.group0()[1] * -1.0),
            (self.group0()[0] * other.group0()[2] * -1.0),
            (self.group0()[0] * other.group0()[3] * -1.0),
            ((self.group0()[3] * other.group0()[3]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
        ]));
    }
}
impl AntiWedge<Line> for AntiFlectorOnOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: Line) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (Simd32x3::from(self.group0()[0]) * other.group0()));
    }
}
impl AntiWedge<LineOnOrigin> for AntiFlectorOnOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: LineOnOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (Simd32x3::from(self.group0()[0]) * other.group0()));
    }
}
impl AntiWedge<Motor> for AntiFlectorOnOrigin {
    type Output = AntiFlectorOnOrigin;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        return AntiFlectorOnOrigin::from_groups(/* e321, e1, e2, e3 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[3])),
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[2] * other.group0()[3])),
            ((self.group0()[0] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
        ]));
    }
}
impl AntiWedge<MotorOnOrigin> for AntiFlectorOnOrigin {
    type Output = AntiFlectorOnOrigin;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        return AntiFlectorOnOrigin::from_groups(/* e321, e1, e2, e3 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[3])),
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[2] * other.group0()[3])),
            ((self.group0()[0] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
        ]));
    }
}
impl AntiWedge<MultiVector> for AntiFlectorOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group0()[3] * other.group9()[2]) + (self.group0()[1] * other.group9()[0]) + (self.group0()[2] * other.group9()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group6()[1]) + (self.group0()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group6()[2]) + (self.group0()[2] * other.group0()[1])),
                ((self.group0()[0] * other.group6()[3]) + (self.group0()[3] * other.group0()[1])),
                0.0,
            ]),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]) * Simd32x3::from(-1.0)),
            // e321, e415, e425, e435
            Simd32x4::from([(self.group0()[0] * other.group0()[1]), 0.0, 0.0, 0.0]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<Plane> for AntiFlectorOnOrigin {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ Simd32x4::from([
            (self.group0()[0] * other.group0()[0] * -1.0),
            (self.group0()[0] * other.group0()[1] * -1.0),
            (self.group0()[0] * other.group0()[2] * -1.0),
            ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<PlaneOnOrigin> for AntiFlectorOnOrigin {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ Simd32x4::from([
            (self.group0()[0] * other.group0()[0] * -1.0),
            (self.group0()[0] * other.group0()[1] * -1.0),
            (self.group0()[0] * other.group0()[2] * -1.0),
            ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<Sphere> for AntiFlectorOnOrigin {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ Simd32x4::from([
            (self.group0()[0] * other.group0()[0] * -1.0),
            (self.group0()[0] * other.group0()[1] * -1.0),
            (self.group0()[0] * other.group0()[2] * -1.0),
            ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<SphereOnOrigin> for AntiFlectorOnOrigin {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ Simd32x4::from([
            (self.group0()[0] * other.group0()[0] * -1.0),
            (self.group0()[0] * other.group0()[1] * -1.0),
            (self.group0()[0] * other.group0()[2] * -1.0),
            ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
        ]));
    }
}
impl InfixAntiWedge for AntiLine {}
impl AntiWedge<AntiDipoleOnOrigin> for AntiLine {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiScalar> for AntiLine {
    type Output = AntiLine;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiLine::from_groups(
            // e23, e31, e12
            (self.group0() * Simd32x3::from(other[e12345])),
            // e15, e25, e35
            (self.group1() * Simd32x3::from(other[e12345])),
        );
    }
}
impl AntiWedge<Circle> for AntiLine {
    type Output = Scalar;
    fn anti_wedge(self, other: Circle) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<CircleAligningOrigin> for AntiLine {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<CircleAtInfinity> for AntiLine {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleAtInfinity) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
        );
    }
}
impl AntiWedge<CircleAtOrigin> for AntiLine {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleAtOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<CircleOnOrigin> for AntiLine {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<CircleOrthogonalOrigin> for AntiLine {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<DualNum> for AntiLine {
    type Output = AntiLine;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        return AntiLine::from_groups(
            // e23, e31, e12
            (self.group0() * Simd32x3::from(other.group0()[1])),
            // e15, e25, e35
            (self.group1() * Simd32x3::from(other.group0()[1])),
        );
    }
}
impl AntiWedge<Flector> for AntiLine {
    type Output = AntiPlane;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group0()[1] * other.group1()[2]),
            (self.group0()[2] * other.group1()[0]),
            (self.group0()[0] * other.group1()[1]),
            ((self.group1()[2] * other.group1()[2]) + (self.group1()[0] * other.group1()[0]) + (self.group1()[1] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<FlectorOnOrigin> for AntiLine {
    type Output = AntiPlane;
    fn anti_wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[1]),
            (self.group0()[0] * other.group0()[2]),
            ((self.group1()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])),
        ]));
    }
}
impl AntiWedge<Line> for AntiLine {
    type Output = Scalar;
    fn anti_wedge(self, other: Line) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<LineOnOrigin> for AntiLine {
    type Output = Scalar;
    fn anti_wedge(self, other: LineOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<Motor> for AntiLine {
    type Output = AntiMotor;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl AntiWedge<MotorOnOrigin> for AntiLine {
    type Output = AntiMotor;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl AntiWedge<MultiVector> for AntiLine {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group1()[2] * other.group7()[2])
                    - (self.group1()[1] * other.group7()[1])
                    - (self.group1()[0] * other.group7()[0])
                    - (self.group0()[2] * other.group6()[3])
                    - (self.group0()[0] * other.group6()[1])
                    - (self.group0()[1] * other.group6()[2])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[1] * other.group9()[2]),
                (self.group0()[2] * other.group9()[0]),
                (self.group0()[0] * other.group9()[1]),
                0.0,
            ]),
            // e5
            ((self.group1()[2] * other.group9()[2]) + (self.group1()[0] * other.group9()[0]) + (self.group1()[1] * other.group9()[1])),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            (self.group1() * Simd32x3::from(other.group0()[1])),
            // e23, e31, e12
            (self.group0() * Simd32x3::from(other.group0()[1])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<NullCircleAtOrigin> for AntiLine {
    type Output = Scalar;
    fn anti_wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<NullSphereAtOrigin> for AntiLine {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (self.group1() * Simd32x3::from(other[e1234]) * Simd32x3::from(-1.0)));
    }
}
impl AntiWedge<Plane> for AntiLine {
    type Output = AntiPlane;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group0()[1] * other.group0()[2]),
            (self.group0()[2] * other.group0()[0]),
            (self.group0()[0] * other.group0()[1]),
            ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<PlaneOnOrigin> for AntiLine {
    type Output = AntiPlane;
    fn anti_wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group0()[1] * other.group0()[2]),
            (self.group0()[2] * other.group0()[0]),
            (self.group0()[0] * other.group0()[1]),
            ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<Sphere> for AntiLine {
    type Output = AntiPlane;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group0()[1] * other.group0()[2]),
            (self.group0()[2] * other.group0()[0]),
            (self.group0()[0] * other.group0()[1]),
            ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<SphereAtOrigin> for AntiLine {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: SphereAtOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (self.group1() * Simd32x3::from(other.group0()[0]) * Simd32x3::from(-1.0)));
    }
}
impl AntiWedge<SphereOnOrigin> for AntiLine {
    type Output = AntiPlane;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group0()[1] * other.group0()[2]),
            (self.group0()[2] * other.group0()[0]),
            (self.group0()[0] * other.group0()[1]),
            ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl InfixAntiWedge for AntiLineOnOrigin {}
impl AntiWedge<AntiScalar> for AntiLineOnOrigin {
    type Output = AntiLineOnOrigin;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiLineOnOrigin::from_groups(/* e23, e31, e12 */ (self.group0() * Simd32x3::from(other[e12345])));
    }
}
impl AntiWedge<Circle> for AntiLineOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: Circle) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<CircleAligningOrigin> for AntiLineOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<CircleAtInfinity> for AntiLineOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleAtInfinity) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
        );
    }
}
impl AntiWedge<CircleOnOrigin> for AntiLineOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<DualNum> for AntiLineOnOrigin {
    type Output = AntiLineOnOrigin;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        return AntiLineOnOrigin::from_groups(/* e23, e31, e12 */ (self.group0() * Simd32x3::from(other.group0()[1])));
    }
}
impl AntiWedge<Flector> for AntiLineOnOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(
            // e1, e2, e3
            (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]])),
        );
    }
}
impl AntiWedge<FlectorOnOrigin> for AntiLineOnOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(
            // e1, e2, e3
            (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[3], other.group0()[1], other.group0()[2]])),
        );
    }
}
impl AntiWedge<Line> for AntiLineOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: Line) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<LineOnOrigin> for AntiLineOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: LineOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<Motor> for AntiLineOnOrigin {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<MotorOnOrigin> for AntiLineOnOrigin {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<MultiVector> for AntiLineOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[2] * other.group6()[3]) - (self.group0()[0] * other.group6()[1]) - (self.group0()[1] * other.group6()[2])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[1] * other.group9()[2]),
                (self.group0()[2] * other.group9()[0]),
                (self.group0()[0] * other.group9()[1]),
                0.0,
            ]),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            (self.group0() * Simd32x3::from(other.group0()[1])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<Plane> for AntiLineOnOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(
            // e1, e2, e3
            (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]])),
        );
    }
}
impl AntiWedge<PlaneOnOrigin> for AntiLineOnOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1)));
    }
}
impl AntiWedge<Sphere> for AntiLineOnOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1)));
    }
}
impl AntiWedge<SphereOnOrigin> for AntiLineOnOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(
            // e1, e2, e3
            (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]])),
        );
    }
}
impl InfixAntiWedge for AntiMotor {}
impl AntiWedge<AntiCircleOnOrigin> for AntiMotor {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (Simd32x3::from(self.group1()[3]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl AntiWedge<AntiDipoleOnOrigin> for AntiMotor {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ Simd32x4::from([
            (self.group1()[3] * other.group0()[0]),
            (self.group1()[3] * other.group0()[1]),
            (self.group1()[3] * other.group0()[2]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<AntiScalar> for AntiMotor {
    type Output = AntiMotor;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (self.group0() * Simd32x4::from(other[e12345])),
            // e15, e25, e35, e3215
            (self.group1() * Simd32x4::from(other[e12345])),
        );
    }
}
impl AntiWedge<AntiSphereOnOrigin> for AntiMotor {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return Scalar::from_groups(/* scalar */ (self.group1()[3] * other.group0()[3]));
    }
}
impl AntiWedge<Circle> for AntiMotor {
    type Output = AntiMotor;
    fn anti_wedge(self, other: Circle) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group1()[3] * other.group1()[0]),
                (self.group1()[3] * other.group1()[1]),
                (self.group1()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl AntiWedge<CircleAligningOrigin> for AntiMotor {
    type Output = AntiMotor;
    fn anti_wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group1()[3] * other.group1()[0]),
                (self.group1()[3] * other.group1()[1]),
                (self.group1()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl AntiWedge<CircleAtInfinity> for AntiMotor {
    type Output = AntiMotor;
    fn anti_wedge(self, other: CircleAtInfinity) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                (self.group1()[3] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl AntiWedge<CircleAtOrigin> for AntiMotor {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: CircleAtOrigin) -> Self::Output {
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ Simd32x4::from([
            (self.group1()[3] * other.group0()[0]),
            (self.group1()[3] * other.group0()[1]),
            (self.group1()[3] * other.group0()[2]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<CircleOnOrigin> for AntiMotor {
    type Output = AntiMotor;
    fn anti_wedge(self, other: CircleOnOrigin) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group1()[3] * other.group1()[0]),
                (self.group1()[3] * other.group1()[1]),
                (self.group1()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl AntiWedge<CircleOrthogonalOrigin> for AntiMotor {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ Simd32x4::from([
            (self.group1()[3] * other.group0()[0]),
            (self.group1()[3] * other.group0()[1]),
            (self.group1()[3] * other.group0()[2]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<Dipole> for AntiMotor {
    type Output = AntiPlane;
    fn anti_wedge(self, other: Dipole) -> Self::Output {
        return AntiPlane::from_groups(
            // e1, e2, e3, e5
            (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl AntiWedge<DipoleAligningOrigin> for AntiMotor {
    type Output = AntiPlane;
    fn anti_wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return AntiPlane::from_groups(
            // e1, e2, e3, e5
            (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl AntiWedge<DipoleAtInfinity> for AntiMotor {
    type Output = Infinity;
    fn anti_wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return Infinity::from_groups(/* e5 */ (self.group1()[3] * other.group1()[3] * -1.0));
    }
}
impl AntiWedge<DipoleAtOrigin> for AntiMotor {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (Simd32x3::from(self.group1()[3]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl AntiWedge<DipoleOnOrigin> for AntiMotor {
    type Output = AntiPlane;
    fn anti_wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ (Simd32x4::from(self.group1()[3]) * other.group0() * Simd32x4::from(-1.0)));
    }
}
impl AntiWedge<DipoleOrthogonalOrigin> for AntiMotor {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (Simd32x3::from(self.group1()[3]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl AntiWedge<DualNum> for AntiMotor {
    type Output = AntiMotor;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (self.group0() * Simd32x4::from(other.group0()[1])),
            // e15, e25, e35, e3215
            (self.group1() * Simd32x4::from(other.group0()[1])),
        );
    }
}
impl AntiWedge<FlatOrigin> for AntiMotor {
    type Output = Infinity;
    fn anti_wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return Infinity::from_groups(/* e5 */ (self.group1()[3] * other[e45] * -1.0));
    }
}
impl AntiWedge<FlatPoint> for AntiMotor {
    type Output = Infinity;
    fn anti_wedge(self, other: FlatPoint) -> Self::Output {
        return Infinity::from_groups(/* e5 */ (self.group1()[3] * other.group0()[3] * -1.0));
    }
}
impl AntiWedge<Flector> for AntiMotor {
    type Output = AntiFlector;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self.group1()[3] * other.group1()[0] * -1.0),
                (self.group1()[3] * other.group1()[1] * -1.0),
                (self.group1()[3] * other.group1()[2] * -1.0),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[1] * other.group1()[2]),
                (self.group0()[2] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                ((self.group1()[2] * other.group1()[2]) + (self.group1()[0] * other.group1()[0]) + (self.group1()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl AntiWedge<FlectorOnOrigin> for AntiMotor {
    type Output = AntiFlector;
    fn anti_wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self.group1()[3] * other.group0()[1] * -1.0),
                (self.group1()[3] * other.group0()[2] * -1.0),
                (self.group1()[3] * other.group0()[3] * -1.0),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                ((self.group1()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])),
            ]),
        );
    }
}
impl AntiWedge<Line> for AntiMotor {
    type Output = AntiMotor;
    fn anti_wedge(self, other: Line) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl AntiWedge<LineOnOrigin> for AntiMotor {
    type Output = AntiMotor;
    fn anti_wedge(self, other: LineOnOrigin) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl AntiWedge<Motor> for AntiMotor {
    type Output = AntiMotor;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e15, e25, e35, e3215
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
                ((self.group1()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                (self.group1()[3] * other.group0()[3]),
            ]),
        );
    }
}
impl AntiWedge<MotorOnOrigin> for AntiMotor {
    type Output = AntiMotor;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e15, e25, e35, e3215
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
                ((self.group1()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                (self.group1()[3] * other.group0()[3]),
            ]),
        );
    }
}
impl AntiWedge<MultiVector> for AntiMotor {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([((self.group0()[3] * other.group0()[1]) + (self.group1()[3] * other.group1()[3])), 0.0]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[1] * other.group9()[2]),
                (self.group0()[2] * other.group9()[0]),
                (self.group0()[0] * other.group9()[1]),
                0.0,
            ]),
            // e5
            ((self.group1()[2] * other.group9()[2]) + (self.group1()[0] * other.group9()[0]) + (self.group1()[1] * other.group9()[1])),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            ((Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group6()[1], other.group6()[2], other.group6()[3]]))),
            // e23, e31, e12
            ((Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])) + (Simd32x3::from(self.group1()[3]) * other.group7())),
            // e321, e415, e425, e435
            Simd32x4::from([(self.group1()[3] * other.group9()[3] * -1.0), 0.0, 0.0, 0.0]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]) * Simd32x3::from(-1.0)),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            (self.group1()[3] * other.group0()[1]),
        );
    }
}
impl AntiWedge<NullCircleAtOrigin> for AntiMotor {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ Simd32x4::from([
            (self.group1()[3] * other.group0()[0]),
            (self.group1()[3] * other.group0()[1]),
            (self.group1()[3] * other.group0()[2]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<NullDipoleAtOrigin> for AntiMotor {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (Simd32x3::from(self.group1()[3]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl AntiWedge<NullSphereAtOrigin> for AntiMotor {
    type Output = AntiFlectorOnOrigin;
    fn anti_wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiFlectorOnOrigin::from_groups(/* e321, e1, e2, e3 */ (swizzle!(self.group1(), 3, 0, 1, 2) * Simd32x4::from(other[e1234]) * Simd32x4::from(-1.0)));
    }
}
impl AntiWedge<Origin> for AntiMotor {
    type Output = Scalar;
    fn anti_wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self.group1()[3] * other[e4]));
    }
}
impl AntiWedge<Plane> for AntiMotor {
    type Output = AntiFlector;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0] * -1.0),
                (self.group1()[3] * other.group0()[1] * -1.0),
                (self.group1()[3] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl AntiWedge<PlaneOnOrigin> for AntiMotor {
    type Output = AntiFlector;
    fn anti_wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0] * -1.0),
                (self.group1()[3] * other.group0()[1] * -1.0),
                (self.group1()[3] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl AntiWedge<RoundPoint> for AntiMotor {
    type Output = Scalar;
    fn anti_wedge(self, other: RoundPoint) -> Self::Output {
        return Scalar::from_groups(/* scalar */ (self.group1()[3] * other.group1()[0]));
    }
}
impl AntiWedge<RoundPointAtOrigin> for AntiMotor {
    type Output = Scalar;
    fn anti_wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return Scalar::from_groups(/* scalar */ (self.group1()[3] * other.group0()[0]));
    }
}
impl AntiWedge<Sphere> for AntiMotor {
    type Output = AntiFlector;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * Simd32x4::from(-1.0)),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl AntiWedge<SphereAtOrigin> for AntiMotor {
    type Output = AntiFlectorOnOrigin;
    fn anti_wedge(self, other: SphereAtOrigin) -> Self::Output {
        return AntiFlectorOnOrigin::from_groups(
            // e321, e1, e2, e3
            (swizzle!(self.group1(), 3, 0, 1, 2) * Simd32x4::from(other.group0()[0]) * Simd32x4::from(-1.0)),
        );
    }
}
impl AntiWedge<SphereOnOrigin> for AntiMotor {
    type Output = AntiFlector;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(self.group1()[3]) * other.group0() * Simd32x4::from(-1.0)),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl InfixAntiWedge for AntiMotorOnOrigin {}
impl AntiWedge<AntiScalar> for AntiMotorOnOrigin {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ (self.group0() * Simd32x4::from(other[e12345])));
    }
}
impl AntiWedge<Circle> for AntiMotorOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: Circle) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<CircleAligningOrigin> for AntiMotorOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<CircleAtInfinity> for AntiMotorOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleAtInfinity) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
        );
    }
}
impl AntiWedge<CircleOnOrigin> for AntiMotorOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<DualNum> for AntiMotorOnOrigin {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ (self.group0() * Simd32x4::from(other.group0()[1])));
    }
}
impl AntiWedge<Flector> for AntiMotorOnOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ Simd32x3::from([
            (self.group0()[1] * other.group1()[2]),
            (self.group0()[2] * other.group1()[0]),
            (self.group0()[0] * other.group1()[1]),
        ]));
    }
}
impl AntiWedge<FlectorOnOrigin> for AntiMotorOnOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ Simd32x3::from([
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[1]),
            (self.group0()[0] * other.group0()[2]),
        ]));
    }
}
impl AntiWedge<Line> for AntiMotorOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: Line) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<LineOnOrigin> for AntiMotorOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: LineOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<Motor> for AntiMotorOnOrigin {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ (self.group0() * Simd32x4::from(other.group0()[3])));
    }
}
impl AntiWedge<MotorOnOrigin> for AntiMotorOnOrigin {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ (self.group0() * Simd32x4::from(other.group0()[3])));
    }
}
impl AntiWedge<MultiVector> for AntiMotorOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(self.group0()[3] * other.group0()[1]), 0.0]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[1] * other.group9()[2]),
                (self.group0()[2] * other.group9()[0]),
                (self.group0()[0] * other.group9()[1]),
                0.0,
            ]),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<Plane> for AntiMotorOnOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ Simd32x3::from([
            (self.group0()[1] * other.group0()[2]),
            (self.group0()[2] * other.group0()[0]),
            (self.group0()[0] * other.group0()[1]),
        ]));
    }
}
impl AntiWedge<PlaneOnOrigin> for AntiMotorOnOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(
            // e1, e2, e3
            (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]])),
        );
    }
}
impl AntiWedge<Sphere> for AntiMotorOnOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(
            // e1, e2, e3
            (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]])),
        );
    }
}
impl AntiWedge<SphereOnOrigin> for AntiMotorOnOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ Simd32x3::from([
            (self.group0()[1] * other.group0()[2]),
            (self.group0()[2] * other.group0()[0]),
            (self.group0()[0] * other.group0()[1]),
        ]));
    }
}
impl InfixAntiWedge for AntiPlane {}
impl AntiWedge<AntiScalar> for AntiPlane {
    type Output = AntiPlane;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ (self.group0() * Simd32x4::from(other[e12345])));
    }
}
impl AntiWedge<DualNum> for AntiPlane {
    type Output = AntiPlane;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ (self.group0() * Simd32x4::from(other.group0()[1])));
    }
}
impl AntiWedge<Flector> for AntiPlane {
    type Output = Scalar;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            ((self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<FlectorOnOrigin> for AntiPlane {
    type Output = Scalar;
    fn anti_wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
        );
    }
}
impl AntiWedge<Motor> for AntiPlane {
    type Output = AntiPlane;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ (self.group0() * Simd32x4::from(other.group0()[3])));
    }
}
impl AntiWedge<MotorOnOrigin> for AntiPlane {
    type Output = AntiPlane;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ (self.group0() * Simd32x4::from(other.group0()[3])));
    }
}
impl AntiWedge<MultiVector> for AntiPlane {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group0()[3] * other.group9()[3]) + (self.group0()[2] * other.group9()[2]) + (self.group0()[0] * other.group9()[0]) + (self.group0()[1] * other.group9()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[2] * other.group0()[1]),
                0.0,
            ]),
            // e5
            (self.group0()[3] * other.group0()[1]),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<NullSphereAtOrigin> for AntiPlane {
    type Output = Scalar;
    fn anti_wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self.group0()[3] * other[e1234]));
    }
}
impl AntiWedge<Plane> for AntiPlane {
    type Output = Scalar;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<PlaneOnOrigin> for AntiPlane {
    type Output = Scalar;
    fn anti_wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<Sphere> for AntiPlane {
    type Output = Scalar;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            ((self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<SphereAtOrigin> for AntiPlane {
    type Output = Scalar;
    fn anti_wedge(self, other: SphereAtOrigin) -> Self::Output {
        return Scalar::from_groups(/* scalar */ (self.group0()[3] * other.group0()[0]));
    }
}
impl AntiWedge<SphereOnOrigin> for AntiPlane {
    type Output = Scalar;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            ((self.group0()[3] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl InfixAntiWedge for AntiPlaneOnOrigin {}
impl AntiWedge<AntiScalar> for AntiPlaneOnOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (self.group0() * Simd32x3::from(other[e12345])));
    }
}
impl AntiWedge<DualNum> for AntiPlaneOnOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (self.group0() * Simd32x3::from(other.group0()[1])));
    }
}
impl AntiWedge<Flector> for AntiPlaneOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            ((self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<FlectorOnOrigin> for AntiPlaneOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
        );
    }
}
impl AntiWedge<Motor> for AntiPlaneOnOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (self.group0() * Simd32x3::from(other.group0()[3])));
    }
}
impl AntiWedge<MotorOnOrigin> for AntiPlaneOnOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (self.group0() * Simd32x3::from(other.group0()[3])));
    }
}
impl AntiWedge<MultiVector> for AntiPlaneOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group0()[2] * other.group9()[2]) + (self.group0()[0] * other.group9()[0]) + (self.group0()[1] * other.group9()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[2] * other.group0()[1]),
                0.0,
            ]),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<Plane> for AntiPlaneOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<PlaneOnOrigin> for AntiPlaneOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<Sphere> for AntiPlaneOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<SphereOnOrigin> for AntiPlaneOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl InfixAntiWedge for AntiScalar {}
impl AntiWedge<AntiCircleOnOrigin> for AntiScalar {
    type Output = AntiCircleOnOrigin;
    fn anti_wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiCircleOnOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e12345]) * other.group0()),
            // e23, e31, e12
            (Simd32x3::from(self[e12345]) * other.group1()),
        );
    }
}
impl AntiWedge<AntiDipoleOnOrigin> for AntiScalar {
    type Output = AntiDipoleOnOrigin;
    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleOnOrigin::from_groups(/* e423, e431, e412, e321 */ (Simd32x4::from(self[e12345]) * other.group0()));
    }
}
impl AntiWedge<AntiFlatOrigin> for AntiScalar {
    type Output = AntiFlatOrigin;
    fn anti_wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiFlatOrigin::from_groups(/* e321 */ (self[e12345] * other[e321]));
    }
}
impl AntiWedge<AntiFlatPoint> for AntiScalar {
    type Output = AntiFlatPoint;
    fn anti_wedge(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ (Simd32x4::from(self[e12345]) * other.group0()));
    }
}
impl AntiWedge<AntiFlector> for AntiScalar {
    type Output = AntiFlector;
    fn anti_wedge(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(self[e12345]) * other.group0()),
            // e1, e2, e3, e5
            (Simd32x4::from(self[e12345]) * other.group1()),
        );
    }
}
impl AntiWedge<AntiFlectorOnOrigin> for AntiScalar {
    type Output = AntiFlectorOnOrigin;
    fn anti_wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiFlectorOnOrigin::from_groups(/* e321, e1, e2, e3 */ (Simd32x4::from(self[e12345]) * other.group0()));
    }
}
impl AntiWedge<AntiLine> for AntiScalar {
    type Output = AntiLine;
    fn anti_wedge(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return AntiLine::from_groups(
            // e23, e31, e12
            (Simd32x3::from(self[e12345]) * other.group0()),
            // e15, e25, e35
            (Simd32x3::from(self[e12345]) * other.group1()),
        );
    }
}
impl AntiWedge<AntiLineOnOrigin> for AntiScalar {
    type Output = AntiLineOnOrigin;
    fn anti_wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiLineOnOrigin::from_groups(/* e23, e31, e12 */ (Simd32x3::from(self[e12345]) * other.group0()));
    }
}
impl AntiWedge<AntiMotor> for AntiScalar {
    type Output = AntiMotor;
    fn anti_wedge(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(self[e12345]) * other.group0()),
            // e15, e25, e35, e3215
            (Simd32x4::from(self[e12345]) * other.group1()),
        );
    }
}
impl AntiWedge<AntiMotorOnOrigin> for AntiScalar {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ (Simd32x4::from(self[e12345]) * other.group0()));
    }
}
impl AntiWedge<AntiPlane> for AntiScalar {
    type Output = AntiPlane;
    fn anti_wedge(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ (Simd32x4::from(self[e12345]) * other.group0()));
    }
}
impl AntiWedge<AntiPlaneOnOrigin> for AntiScalar {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (Simd32x3::from(self[e12345]) * other.group0()));
    }
}
impl AntiWedge<AntiScalar> for AntiScalar {
    type Output = AntiScalar;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e12345] * other[e12345]));
    }
}
impl AntiWedge<AntiSphereOnOrigin> for AntiScalar {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ (Simd32x4::from(self[e12345]) * other.group0()));
    }
}
impl AntiWedge<Circle> for AntiScalar {
    type Output = Circle;
    fn anti_wedge(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return Circle::from_groups(
            // e423, e431, e412, e321
            (Simd32x4::from(self[e12345]) * other.group0()),
            // e415, e425, e435
            (Simd32x3::from(self[e12345]) * other.group1()),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * other.group2()),
        );
    }
}
impl AntiWedge<CircleAligningOrigin> for AntiScalar {
    type Output = CircleAligningOrigin;
    fn anti_wedge(self, other: CircleAligningOrigin) -> Self::Output {
        use crate::elements::*;
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e12345]) * other.group0()),
            // e415, e425, e435
            (Simd32x3::from(self[e12345]) * other.group1()),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * other.group2()),
        );
    }
}
impl AntiWedge<CircleAtInfinity> for AntiScalar {
    type Output = CircleAtInfinity;
    fn anti_wedge(self, other: CircleAtInfinity) -> Self::Output {
        use crate::elements::*;
        return CircleAtInfinity::from_groups(
            // e321, e415, e425, e435
            (Simd32x4::from(self[e12345]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * other.group1()),
        );
    }
}
impl AntiWedge<CircleAtOrigin> for AntiScalar {
    type Output = CircleAtOrigin;
    fn anti_wedge(self, other: CircleAtOrigin) -> Self::Output {
        use crate::elements::*;
        return CircleAtOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e12345]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * other.group1()),
        );
    }
}
impl AntiWedge<CircleOnOrigin> for AntiScalar {
    type Output = CircleOnOrigin;
    fn anti_wedge(self, other: CircleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e12345]) * other.group0()),
            // e415, e425, e435
            (Simd32x3::from(self[e12345]) * other.group1()),
        );
    }
}
impl AntiWedge<CircleOrthogonalOrigin> for AntiScalar {
    type Output = CircleOrthogonalOrigin;
    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return CircleOrthogonalOrigin::from_groups(
            // e423, e431, e412, e321
            (Simd32x4::from(self[e12345]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * other.group1()),
        );
    }
}
impl AntiWedge<Dipole> for AntiScalar {
    type Output = Dipole;
    fn anti_wedge(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e12345]) * other.group0()),
            // e23, e31, e12
            (Simd32x3::from(self[e12345]) * other.group1()),
            // e15, e25, e35, e45
            (Simd32x4::from(self[e12345]) * other.group2()),
        );
    }
}
impl AntiWedge<DipoleAligningOrigin> for AntiScalar {
    type Output = DipoleAligningOrigin;
    fn anti_wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        use crate::elements::*;
        return DipoleAligningOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e12345]) * other.group0()),
            // e15, e25, e35, e45
            (Simd32x4::from(self[e12345]) * other.group1()),
        );
    }
}
impl AntiWedge<DipoleAtInfinity> for AntiScalar {
    type Output = DipoleAtInfinity;
    fn anti_wedge(self, other: DipoleAtInfinity) -> Self::Output {
        use crate::elements::*;
        return DipoleAtInfinity::from_groups(
            // e23, e31, e12
            (Simd32x3::from(self[e12345]) * other.group0()),
            // e15, e25, e35, e45
            (Simd32x4::from(self[e12345]) * other.group1()),
        );
    }
}
impl AntiWedge<DipoleAtOrigin> for AntiScalar {
    type Output = DipoleAtOrigin;
    fn anti_wedge(self, other: DipoleAtOrigin) -> Self::Output {
        use crate::elements::*;
        return DipoleAtOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e12345]) * other.group0()),
            // e15, e25, e35
            (Simd32x3::from(self[e12345]) * other.group1()),
        );
    }
}
impl AntiWedge<DipoleOnOrigin> for AntiScalar {
    type Output = DipoleOnOrigin;
    fn anti_wedge(self, other: DipoleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return DipoleOnOrigin::from_groups(/* e41, e42, e43, e45 */ (Simd32x4::from(self[e12345]) * other.group0()));
    }
}
impl AntiWedge<DipoleOrthogonalOrigin> for AntiScalar {
    type Output = DipoleOrthogonalOrigin;
    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return DipoleOrthogonalOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e12345]) * other.group0()),
            // e23, e31, e12
            (Simd32x3::from(self[e12345]) * other.group1()),
            // e15, e25, e35
            (Simd32x3::from(self[e12345]) * other.group2()),
        );
    }
}
impl AntiWedge<DualNum> for AntiScalar {
    type Output = DualNum;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return DualNum::from_groups(/* scalar, e12345 */ (Simd32x2::from(self[e12345]) * other.group0()));
    }
}
impl AntiWedge<FlatOrigin> for AntiScalar {
    type Output = FlatOrigin;
    fn anti_wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return FlatOrigin::from_groups(/* e45 */ (self[e12345] * other[e45]));
    }
}
impl AntiWedge<FlatPoint> for AntiScalar {
    type Output = FlatPoint;
    fn anti_wedge(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ (Simd32x4::from(self[e12345]) * other.group0()));
    }
}
impl AntiWedge<FlatPointAtInfinity> for AntiScalar {
    type Output = FlatPointAtInfinity;
    fn anti_wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        use crate::elements::*;
        return FlatPointAtInfinity::from_groups(/* e15, e25, e35 */ (Simd32x3::from(self[e12345]) * other.group0()));
    }
}
impl AntiWedge<Flector> for AntiScalar {
    type Output = Flector;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self[e12345]) * other.group0()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[e12345]) * other.group1()),
        );
    }
}
impl AntiWedge<FlectorAtInfinity> for AntiScalar {
    type Output = FlectorAtInfinity;
    fn anti_wedge(self, other: FlectorAtInfinity) -> Self::Output {
        use crate::elements::*;
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ (Simd32x4::from(self[e12345]) * other.group0()));
    }
}
impl AntiWedge<FlectorOnOrigin> for AntiScalar {
    type Output = FlectorOnOrigin;
    fn anti_wedge(self, other: FlectorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ (Simd32x4::from(self[e12345]) * other.group0()));
    }
}
impl AntiWedge<Horizon> for AntiScalar {
    type Output = Horizon;
    fn anti_wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self[e12345] * other[e3215]));
    }
}
impl AntiWedge<Infinity> for AntiScalar {
    type Output = Infinity;
    fn anti_wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return Infinity::from_groups(/* e5 */ (self[e12345] * other[e5]));
    }
}
impl AntiWedge<Line> for AntiScalar {
    type Output = Line;
    fn anti_wedge(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self[e12345]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * other.group1()),
        );
    }
}
impl AntiWedge<LineAtInfinity> for AntiScalar {
    type Output = LineAtInfinity;
    fn anti_wedge(self, other: LineAtInfinity) -> Self::Output {
        use crate::elements::*;
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ (Simd32x3::from(self[e12345]) * other.group0()));
    }
}
impl AntiWedge<LineOnOrigin> for AntiScalar {
    type Output = LineOnOrigin;
    fn anti_wedge(self, other: LineOnOrigin) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (Simd32x3::from(self[e12345]) * other.group0()));
    }
}
impl AntiWedge<Motor> for AntiScalar {
    type Output = Motor;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self[e12345]) * other.group0()),
            // e235, e315, e125, e5
            (Simd32x4::from(self[e12345]) * other.group1()),
        );
    }
}
impl AntiWedge<MotorAtInfinity> for AntiScalar {
    type Output = MotorAtInfinity;
    fn anti_wedge(self, other: MotorAtInfinity) -> Self::Output {
        use crate::elements::*;
        return MotorAtInfinity::from_groups(/* e235, e315, e125, e5 */ (Simd32x4::from(self[e12345]) * other.group0()));
    }
}
impl AntiWedge<MotorOnOrigin> for AntiScalar {
    type Output = MotorOnOrigin;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ (Simd32x4::from(self[e12345]) * other.group0()));
    }
}
impl AntiWedge<MultiVector> for AntiScalar {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(self[e12345]) * other.group0()),
            // e1, e2, e3, e4
            (Simd32x4::from(self[e12345]) * other.group1()),
            // e5
            (self[e12345] * other[e1]),
            // e41, e42, e43, e45
            (Simd32x4::from(self[e12345]) * other.group3()),
            // e15, e25, e35
            (Simd32x3::from(self[e12345]) * other.group4()),
            // e23, e31, e12
            (Simd32x3::from(self[e12345]) * other.group5()),
            // e321, e415, e425, e435
            (Simd32x4::from(self[e12345]) * other.group6()),
            // e423, e431, e412
            (Simd32x3::from(self[e12345]) * other.group7()),
            // e235, e315, e125
            (Simd32x3::from(self[e12345]) * other.group8()),
            // e4235, e4315, e4125, e1234
            (Simd32x4::from(self[e12345]) * other.group9()),
            // e3215
            (self[e12345] * other[e45]),
        );
    }
}
impl AntiWedge<NullCircleAtOrigin> for AntiScalar {
    type Output = NullCircleAtOrigin;
    fn anti_wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        use crate::elements::*;
        return NullCircleAtOrigin::from_groups(/* e423, e431, e412 */ (Simd32x3::from(self[e12345]) * other.group0()));
    }
}
impl AntiWedge<NullDipoleAtOrigin> for AntiScalar {
    type Output = NullDipoleAtOrigin;
    fn anti_wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        use crate::elements::*;
        return NullDipoleAtOrigin::from_groups(/* e41, e42, e43 */ (Simd32x3::from(self[e12345]) * other.group0()));
    }
}
impl AntiWedge<NullSphereAtOrigin> for AntiScalar {
    type Output = NullSphereAtOrigin;
    fn anti_wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self[e12345] * other[e1234]));
    }
}
impl AntiWedge<Origin> for AntiScalar {
    type Output = Origin;
    fn anti_wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return Origin::from_groups(/* e4 */ (self[e12345] * other[e4]));
    }
}
impl AntiWedge<Plane> for AntiScalar {
    type Output = Plane;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (Simd32x4::from(self[e12345]) * other.group0()));
    }
}
impl AntiWedge<PlaneOnOrigin> for AntiScalar {
    type Output = PlaneOnOrigin;
    fn anti_wedge(self, other: PlaneOnOrigin) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self[e12345]) * other.group0()));
    }
}
impl AntiWedge<RoundPoint> for AntiScalar {
    type Output = RoundPoint;
    fn anti_wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return RoundPoint::from_groups(
            // e1, e2, e3
            (Simd32x3::from(self[e12345]) * other.group0()),
            // e4, e5
            (Simd32x2::from(self[e12345]) * other.group1()),
        );
    }
}
impl AntiWedge<RoundPointAtOrigin> for AntiScalar {
    type Output = RoundPointAtOrigin;
    fn anti_wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        use crate::elements::*;
        return RoundPointAtOrigin::from_groups(/* e4, e5 */ (Simd32x2::from(self[e12345]) * other.group0()));
    }
}
impl AntiWedge<Scalar> for AntiScalar {
    type Output = Scalar;
    fn anti_wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self[e12345] * other[scalar]));
    }
}
impl AntiWedge<Sphere> for AntiScalar {
    type Output = Sphere;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from(self[e12345]) * other.group0()),
            // e1234, e3215
            (Simd32x2::from(self[e12345]) * other.group1()),
        );
    }
}
impl AntiWedge<SphereAtOrigin> for AntiScalar {
    type Output = SphereAtOrigin;
    fn anti_wedge(self, other: SphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return SphereAtOrigin::from_groups(/* e1234, e3215 */ (Simd32x2::from(self[e12345]) * other.group0()));
    }
}
impl AntiWedge<SphereOnOrigin> for AntiScalar {
    type Output = SphereOnOrigin;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        use crate::elements::*;
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ (Simd32x4::from(self[e12345]) * other.group0()));
    }
}
impl InfixAntiWedge for AntiSphereOnOrigin {}
impl AntiWedge<AntiMotor> for AntiSphereOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiMotor) -> Self::Output {
        return Scalar::from_groups(/* scalar */ (self.group0()[3] * other.group1()[3]));
    }
}
impl AntiWedge<AntiScalar> for AntiSphereOnOrigin {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ (self.group0() * Simd32x4::from(other[e12345])));
    }
}
impl AntiWedge<DualNum> for AntiSphereOnOrigin {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ (self.group0() * Simd32x4::from(other.group0()[1])));
    }
}
impl AntiWedge<Flector> for AntiSphereOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            ((self.group0()[3] * other.group1()[3]) + (self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<FlectorAtInfinity> for AntiSphereOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return Scalar::from_groups(/* scalar */ (self.group0()[3] * other.group0()[3]));
    }
}
impl AntiWedge<FlectorOnOrigin> for AntiSphereOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
        );
    }
}
impl AntiWedge<Horizon> for AntiSphereOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self.group0()[3] * other[e3215]));
    }
}
impl AntiWedge<Motor> for AntiSphereOnOrigin {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ (self.group0() * Simd32x4::from(other.group0()[3])));
    }
}
impl AntiWedge<MotorOnOrigin> for AntiSphereOnOrigin {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ (self.group0() * Simd32x4::from(other.group0()[3])));
    }
}
impl AntiWedge<MultiVector> for AntiSphereOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group0()[3] * other[e45]) + (self.group0()[2] * other.group9()[2]) + (self.group0()[0] * other.group9()[0]) + (self.group0()[1] * other.group9()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            (self.group0() * Simd32x4::from(other.group0()[1])),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<Plane> for AntiSphereOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            ((self.group0()[3] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<PlaneOnOrigin> for AntiSphereOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<Sphere> for AntiSphereOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            ((self.group0()[3] * other.group1()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<SphereAtOrigin> for AntiSphereOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: SphereAtOrigin) -> Self::Output {
        return Scalar::from_groups(/* scalar */ (self.group0()[3] * other.group0()[1]));
    }
}
impl AntiWedge<SphereOnOrigin> for AntiSphereOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl InfixAntiWedge for Circle {}
impl AntiWedge<AntiCircleOnOrigin> for Circle {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group1()[2] * other.group1()[2])
                - (self.group1()[0] * other.group1()[0])
                - (self.group1()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<AntiDipoleOnOrigin> for Circle {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from([
            ((self.group1()[0] * other.group0()[3]) + (self.group2()[1] * other.group0()[2])),
            ((self.group1()[1] * other.group0()[3]) + (self.group2()[2] * other.group0()[0])),
            ((self.group1()[2] * other.group0()[3]) + (self.group2()[0] * other.group0()[1])),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<AntiFlatOrigin> for Circle {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (self.group1() * Simd32x3::from(other[e321])));
    }
}
impl AntiWedge<AntiFlatPoint> for Circle {
    type Output = AntiPlane;
    fn anti_wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            ((self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3])),
            ((self.group0()[0] * other.group0()[2]) + (self.group1()[1] * other.group0()[3])),
            ((self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<AntiFlector> for Circle {
    type Output = AntiPlane;
    fn anti_wedge(self, other: AntiFlector) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            ((self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3])),
            ((self.group0()[0] * other.group0()[2]) + (self.group1()[1] * other.group0()[3])),
            ((self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<AntiFlectorOnOrigin> for Circle {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (self.group1() * Simd32x3::from(other.group0()[0])));
    }
}
impl AntiWedge<AntiLine> for Circle {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiLine) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<AntiLineOnOrigin> for Circle {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiMotor> for Circle {
    type Output = AntiMotor;
    fn anti_wedge(self, other: AntiMotor) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group1()[0] * other.group1()[3]),
                (self.group1()[1] * other.group1()[3]),
                (self.group1()[2] * other.group1()[3]),
                0.0,
            ]),
        );
    }
}
impl AntiWedge<AntiMotorOnOrigin> for Circle {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiScalar> for Circle {
    type Output = Circle;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Circle::from_groups(
            // e423, e431, e412, e321
            (self.group0() * Simd32x4::from(other[e12345])),
            // e415, e425, e435
            (self.group1() * Simd32x3::from(other[e12345])),
            // e235, e315, e125
            (self.group2() * Simd32x3::from(other[e12345])),
        );
    }
}
impl AntiWedge<Circle> for Circle {
    type Output = RoundPoint;
    fn anti_wedge(self, other: Circle) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            ((swizzle!(self.group2(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (self.group1() * Simd32x3::from(other.group0()[3]))
                + (swizzle!(other.group2(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))
                + (Simd32x3::from(self.group0()[3]) * other.group1())),
            // e4, e5
            (-(Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]]))
                - (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group0()[2], self.group2()[2]]))
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group0()[0], self.group2()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group0()[1], self.group2()[1]]))),
        );
    }
}
impl AntiWedge<CircleAligningOrigin> for Circle {
    type Output = RoundPoint;
    fn anti_wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            ((swizzle!(self.group2(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1))
                + (swizzle!(other.group2(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))
                + (Simd32x3::from(self.group0()[3]) * other.group1())),
            // e4, e5
            (-(Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]]))
                - (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group0()[2], self.group2()[2]]))
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group0()[0], self.group2()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group0()[1], self.group2()[1]]))),
        );
    }
}
impl AntiWedge<CircleAtInfinity> for Circle {
    type Output = RoundPoint;
    fn anti_wedge(self, other: CircleAtInfinity) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            ((self.group1() * Simd32x3::from(other.group0()[0]))
                + (swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[3]]))),
            // e4, e5
            (-(Simd32x2::from(other.group0()[3]) * Simd32x2::from([self.group0()[2], self.group2()[2]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group0()[0], self.group2()[0]]))
                - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group0()[1], self.group2()[1]]))
                + Simd32x2::from([
                    0.0,
                    (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl AntiWedge<CircleAtOrigin> for Circle {
    type Output = RoundPoint;
    fn anti_wedge(self, other: CircleAtOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            ((swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))
                + (swizzle!(self.group2(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1))),
            // e4, e5
            (-(Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]]))),
        );
    }
}
impl AntiWedge<CircleOnOrigin> for Circle {
    type Output = RoundPoint;
    fn anti_wedge(self, other: CircleOnOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            ((Simd32x3::from(self.group0()[3]) * other.group1()) + (swizzle!(self.group2(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1))),
            // e4, e5
            (-(Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group0()[2], self.group2()[2]]))
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group0()[0], self.group2()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group0()[1], self.group2()[1]]))
                + Simd32x2::from([
                    (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[0] * other.group0()[0])),
                    0.0,
                ])),
        );
    }
}
impl AntiWedge<CircleOrthogonalOrigin> for Circle {
    type Output = RoundPoint;
    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            ((swizzle!(self.group2(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))
                + (self.group1() * Simd32x3::from(other.group0()[3]))),
            // e4, e5
            (-(Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]]))),
        );
    }
}
impl AntiWedge<Dipole> for Circle {
    type Output = Scalar;
    fn anti_wedge(self, other: Dipole) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group1()[2] * other.group1()[2])
                - (self.group1()[1] * other.group1()[1])
                - (self.group1()[0] * other.group1()[0])
                - (self.group0()[3] * other.group2()[3])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl AntiWedge<DipoleAligningOrigin> for Circle {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group0()[3] * other.group1()[3])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<DipoleAtInfinity> for Circle {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[3] * other.group1()[3])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<DipoleAtOrigin> for Circle {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<DipoleOnOrigin> for Circle {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group2()[2] * other.group0()[2]) - (self.group2()[1] * other.group0()[1]) - (self.group0()[3] * other.group0()[3]) - (self.group2()[0] * other.group0()[0])),
        );
    }
}
impl AntiWedge<DipoleOrthogonalOrigin> for Circle {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group1()[2] * other.group1()[2])
                - (self.group1()[1] * other.group1()[1])
                - (self.group1()[0] * other.group1()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl AntiWedge<DualNum> for Circle {
    type Output = Circle;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412, e321
            (self.group0() * Simd32x4::from(other.group0()[1])),
            // e415, e425, e435
            (self.group1() * Simd32x3::from(other.group0()[1])),
            // e235, e315, e125
            (self.group2() * Simd32x3::from(other.group0()[1])),
        );
    }
}
impl AntiWedge<FlatOrigin> for Circle {
    type Output = Scalar;
    fn anti_wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self.group0()[3] * other[e45] * -1.0));
    }
}
impl AntiWedge<FlatPoint> for Circle {
    type Output = Scalar;
    fn anti_wedge(self, other: FlatPoint) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<FlatPointAtInfinity> for Circle {
    type Output = Scalar;
    fn anti_wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<Flector> for Circle {
    type Output = MultiVector;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[1] * other.group1()[2] * -1.0),
                (self.group0()[2] * other.group1()[0] * -1.0),
                (self.group0()[0] * other.group1()[1] * -1.0),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
            // e15, e25, e35
            ((self.group1() * Simd32x3::from(other.group1()[3])) + (swizzle!(self.group2(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))),
            // e23, e31, e12
            (Simd32x3::from([(self.group0()[0] * other.group1()[3]), (self.group0()[3] * other.group1()[1]), (self.group0()[2] * other.group1()[3])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<FlectorAtInfinity> for Circle {
    type Output = AntiMotor;
    fn anti_wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl AntiWedge<FlectorOnOrigin> for Circle {
    type Output = MultiVector;
    fn anti_wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(self.group0()[3] * other.group0()[0] * -1.0), 0.0]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                (-(self.group1()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[2])),
            ]),
            // e15, e25, e35
            (swizzle!(self.group2(), 1, 2, 0) * Simd32x3::from([other.group0()[3], other.group0()[1], other.group0()[2]])),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[3]]) * Simd32x3::from(-1.0)),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<Horizon> for Circle {
    type Output = AntiLine;
    fn anti_wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return AntiLine::from_groups(
            // e23, e31, e12
            (Simd32x3::from(other[e3215]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e15, e25, e35
            (self.group1() * Simd32x3::from(other[e3215])),
        );
    }
}
impl AntiWedge<Line> for Circle {
    type Output = RoundPoint;
    fn anti_wedge(self, other: Line) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            ((swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]])) + (Simd32x3::from(self.group0()[3]) * other.group0())),
            // e4, e5
            (-(Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group0()[2], self.group2()[2]]))
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group0()[0], self.group2()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group0()[1], self.group2()[1]]))
                + Simd32x2::from([
                    0.0,
                    (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl AntiWedge<LineAtInfinity> for Circle {
    type Output = AntiPlane;
    fn anti_wedge(self, other: LineAtInfinity) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group0()[2] * other.group0()[1]),
            (self.group0()[0] * other.group0()[2]),
            (self.group0()[1] * other.group0()[0]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<LineOnOrigin> for Circle {
    type Output = RoundPoint;
    fn anti_wedge(self, other: LineOnOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e4, e5
            (-(Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group0()[2], self.group2()[2]]))
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group0()[0], self.group2()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group0()[1], self.group2()[1]]))),
        );
    }
}
impl AntiWedge<Motor> for Circle {
    type Output = MultiVector;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[2] * other.group1()[1]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e5
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group1()[2] * other.group1()[2])
                - (self.group1()[0] * other.group1()[0])
                - (self.group1()[1] * other.group1()[1])),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[3], self.group1()[0], self.group1()[1], self.group1()[2]])),
            // e423, e431, e412
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e235, e315, e125
            (self.group2() * Simd32x3::from(other.group0()[3])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<MotorAtInfinity> for Circle {
    type Output = AntiPlane;
    fn anti_wedge(self, other: MotorAtInfinity) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group0()[2] * other.group0()[1]),
            (self.group0()[0] * other.group0()[2]),
            (self.group0()[1] * other.group0()[0]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<MotorOnOrigin> for Circle {
    type Output = MultiVector;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e5
            (-(self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[3], self.group1()[0], self.group1()[1], self.group1()[2]])),
            // e423, e431, e412
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e235, e315, e125
            (self.group2() * Simd32x3::from(other.group0()[3])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<MultiVector> for Circle {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group2()[2] * other.group3()[2])
                    - (self.group2()[1] * other.group3()[1])
                    - (self.group2()[0] * other.group3()[0])
                    - (self.group1()[2] * other.group5()[2])
                    - (self.group1()[1] * other.group5()[1])
                    - (self.group1()[0] * other.group5()[0])
                    - (self.group0()[3] * other.group3()[3])
                    - (self.group0()[2] * other.group4()[2])
                    - (self.group0()[0] * other.group4()[0])
                    - (self.group0()[1] * other.group4()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group2()[1] * other.group7()[2]) + (self.group1()[0] * other.group6()[0]) + (self.group0()[2] * other.group8()[1]) + (self.group0()[3] * other.group6()[1])),
                ((self.group2()[2] * other.group7()[0]) + (self.group1()[1] * other.group6()[0]) + (self.group0()[0] * other.group8()[2]) + (self.group0()[3] * other.group6()[2])),
                ((self.group2()[0] * other.group7()[1]) + (self.group1()[2] * other.group6()[0]) + (self.group0()[1] * other.group8()[0]) + (self.group0()[3] * other.group6()[3])),
                (-(self.group1()[2] * other.group7()[2])
                    - (self.group1()[1] * other.group7()[1])
                    - (self.group1()[0] * other.group7()[0])
                    - (self.group0()[2] * other.group6()[3])
                    - (self.group0()[0] * other.group6()[1])
                    - (self.group0()[1] * other.group6()[2])),
            ]),
            // e5
            (-(self.group2()[2] * other.group6()[3])
                - (self.group2()[1] * other.group6()[2])
                - (self.group2()[0] * other.group6()[1])
                - (self.group1()[2] * other.group8()[2])
                - (self.group1()[0] * other.group8()[0])
                - (self.group1()[1] * other.group8()[1])),
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[1] * other.group9()[2] * -1.0),
                (self.group0()[2] * other.group9()[0] * -1.0),
                (self.group0()[0] * other.group9()[1] * -1.0),
                (-(self.group1()[2] * other.group9()[2]) - (self.group1()[0] * other.group9()[0]) - (self.group1()[1] * other.group9()[1])),
            ]),
            // e15, e25, e35
            ((self.group1() * Simd32x3::from(other[e45])) + (swizzle!(self.group2(), 1, 2, 0) * Simd32x3::from([other.group9()[2], other.group9()[0], other.group9()[1]]))),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group0()[0] * other[e45]) + (self.group2()[0] * other.group9()[3])),
                (self.group0()[3] * other.group9()[1] * -1.0),
                ((self.group0()[2] * other[e45]) + (self.group2()[2] * other.group9()[3])),
            ]),
            // e321, e415, e425, e435
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[3], self.group1()[0], self.group1()[1], self.group1()[2]])),
            // e423, e431, e412
            (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e235, e315, e125
            (self.group2() * Simd32x3::from(other.group0()[1])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<NullCircleAtOrigin> for Circle {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from([
            (self.group2()[1] * other.group0()[2]),
            (self.group2()[2] * other.group0()[0]),
            (self.group2()[0] * other.group0()[1]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<NullDipoleAtOrigin> for Circle {
    type Output = Scalar;
    fn anti_wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<NullSphereAtOrigin> for Circle {
    type Output = AntiCircleOnOrigin;
    fn anti_wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiCircleOnOrigin::from_groups(
            // e41, e42, e43
            (self.group1() * Simd32x3::from(other[e1234])),
            // e23, e31, e12
            (self.group2() * Simd32x3::from(other[e1234])),
        );
    }
}
impl AntiWedge<Plane> for Circle {
    type Output = Dipole;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        return Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from([(self.group0()[1] * other.group0()[2]), (self.group0()[2] * other.group0()[0]), (self.group0()[0] * other.group0()[1])]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (Simd32x3::from([(self.group0()[0] * other.group0()[3]), (self.group0()[3] * other.group0()[1]), (self.group0()[2] * other.group0()[3])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group2()[1] * other.group0()[2])),
                ((self.group1()[1] * other.group0()[3]) + (self.group2()[2] * other.group0()[0])),
                ((self.group1()[2] * other.group0()[3]) + (self.group2()[0] * other.group0()[1])),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl AntiWedge<PlaneOnOrigin> for Circle {
    type Output = Dipole;
    fn anti_wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return Dipole::from_groups(
            // e41, e42, e43
            (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[3]) * other.group0() * Simd32x3::from(-1.0)),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group2()[1] * other.group0()[2]),
                (self.group2()[2] * other.group0()[0]),
                (self.group2()[0] * other.group0()[1]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl AntiWedge<Sphere> for Circle {
    type Output = Dipole;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        return Dipole::from_groups(
            // e41, e42, e43
            (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group0()[0] * other.group1()[1]) + (self.group2()[0] * other.group1()[0])),
                (self.group0()[3] * other.group0()[1] * -1.0),
                ((self.group0()[2] * other.group1()[1]) + (self.group2()[2] * other.group1()[0])),
            ]),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group1()[0] * other.group1()[1]) + (self.group2()[1] * other.group0()[2])),
                ((self.group1()[1] * other.group1()[1]) + (self.group2()[2] * other.group0()[0])),
                ((self.group1()[2] * other.group1()[1]) + (self.group2()[0] * other.group0()[1])),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl AntiWedge<SphereAtOrigin> for Circle {
    type Output = DipoleOrthogonalOrigin;
    fn anti_wedge(self, other: SphereAtOrigin) -> Self::Output {
        return DipoleOrthogonalOrigin::from_groups(
            // e41, e42, e43
            (self.group1() * Simd32x3::from(other.group0()[0])),
            // e23, e31, e12
            ((Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])) + (self.group2() * Simd32x3::from(other.group0()[0]))),
            // e15, e25, e35
            (self.group1() * Simd32x3::from(other.group0()[1])),
        );
    }
}
impl AntiWedge<SphereOnOrigin> for Circle {
    type Output = Dipole;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        return Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from([(self.group0()[1] * other.group0()[2]), (self.group0()[2] * other.group0()[0]), (self.group0()[0] * other.group0()[1])]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (Simd32x3::from([(self.group2()[0] * other.group0()[3]), (self.group0()[3] * other.group0()[1]), (self.group2()[2] * other.group0()[3])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group2()[1] * other.group0()[2]),
                (self.group2()[2] * other.group0()[0]),
                (self.group2()[0] * other.group0()[1]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl InfixAntiWedge for CircleAligningOrigin {}
impl AntiWedge<AntiCircleOnOrigin> for CircleAligningOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group1()[2] * other.group1()[2])
                - (self.group1()[0] * other.group1()[0])
                - (self.group1()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<AntiDipoleOnOrigin> for CircleAligningOrigin {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from([
            ((self.group1()[0] * other.group0()[3]) + (self.group2()[1] * other.group0()[2])),
            ((self.group1()[1] * other.group0()[3]) + (self.group2()[2] * other.group0()[0])),
            ((self.group1()[2] * other.group0()[3]) + (self.group2()[0] * other.group0()[1])),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<AntiFlatOrigin> for CircleAligningOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (self.group1() * Simd32x3::from(other[e321])));
    }
}
impl AntiWedge<AntiFlatPoint> for CircleAligningOrigin {
    type Output = AntiPlane;
    fn anti_wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            ((self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3])),
            ((self.group0()[0] * other.group0()[2]) + (self.group1()[1] * other.group0()[3])),
            ((self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<AntiFlector> for CircleAligningOrigin {
    type Output = AntiPlane;
    fn anti_wedge(self, other: AntiFlector) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            ((self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3])),
            ((self.group0()[0] * other.group0()[2]) + (self.group1()[1] * other.group0()[3])),
            ((self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<AntiFlectorOnOrigin> for CircleAligningOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (self.group1() * Simd32x3::from(other.group0()[0])));
    }
}
impl AntiWedge<AntiLine> for CircleAligningOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiLine) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<AntiLineOnOrigin> for CircleAligningOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiMotor> for CircleAligningOrigin {
    type Output = AntiMotor;
    fn anti_wedge(self, other: AntiMotor) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group1()[0] * other.group1()[3]),
                (self.group1()[1] * other.group1()[3]),
                (self.group1()[2] * other.group1()[3]),
                0.0,
            ]),
        );
    }
}
impl AntiWedge<AntiMotorOnOrigin> for CircleAligningOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiScalar> for CircleAligningOrigin {
    type Output = CircleAligningOrigin;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other[e12345])),
            // e415, e425, e435
            (self.group1() * Simd32x3::from(other[e12345])),
            // e235, e315, e125
            (self.group2() * Simd32x3::from(other[e12345])),
        );
    }
}
impl AntiWedge<Circle> for CircleAligningOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: Circle) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            ((swizzle!(self.group2(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group2(), 1, 2, 0))
                + (self.group1() * Simd32x3::from(other.group0()[3]))),
            // e4, e5
            (-(Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]]))
                - (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group0()[2], self.group2()[2]]))
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group0()[0], self.group2()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group0()[1], self.group2()[1]]))),
        );
    }
}
impl AntiWedge<CircleAligningOrigin> for CircleAligningOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            ((swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group2(), 1, 2, 0)) + (swizzle!(self.group2(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1))),
            // e4, e5
            (-(Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]]))
                - (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group0()[2], self.group2()[2]]))
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group0()[0], self.group2()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group0()[1], self.group2()[1]]))),
        );
    }
}
impl AntiWedge<CircleAtInfinity> for CircleAligningOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: CircleAtInfinity) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            ((swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group1(), 1, 2, 0)) + (self.group1() * Simd32x3::from(other.group0()[0]))),
            // e4, e5
            (-(Simd32x2::from(other.group0()[3]) * Simd32x2::from([self.group0()[2], self.group2()[2]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group0()[0], self.group2()[0]]))
                - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group0()[1], self.group2()[1]]))
                + Simd32x2::from([
                    0.0,
                    (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl AntiWedge<CircleAtOrigin> for CircleAligningOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: CircleAtOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            ((swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group1(), 1, 2, 0)) + (swizzle!(self.group2(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1))),
            // e4, e5
            (-(Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]]))),
        );
    }
}
impl AntiWedge<CircleOnOrigin> for CircleAligningOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: CircleOnOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (swizzle!(self.group2(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1)),
            // e4, e5
            (-(Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group0()[2], self.group2()[2]]))
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group0()[0], self.group2()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group0()[1], self.group2()[1]]))
                + Simd32x2::from([
                    (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[0] * other.group0()[0])),
                    0.0,
                ])),
        );
    }
}
impl AntiWedge<CircleOrthogonalOrigin> for CircleAligningOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            ((swizzle!(self.group2(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group1(), 1, 2, 0))
                + (self.group1() * Simd32x3::from(other.group0()[3]))),
            // e4, e5
            (-(Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]]))),
        );
    }
}
impl AntiWedge<Dipole> for CircleAligningOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: Dipole) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group1()[2] * other.group1()[2])
                - (self.group1()[1] * other.group1()[1])
                - (self.group1()[0] * other.group1()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl AntiWedge<DipoleAligningOrigin> for CircleAligningOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<DipoleAtInfinity> for CircleAligningOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<DipoleAtOrigin> for CircleAligningOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<DipoleOnOrigin> for CircleAligningOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<DipoleOrthogonalOrigin> for CircleAligningOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group1()[2] * other.group1()[2])
                - (self.group1()[1] * other.group1()[1])
                - (self.group1()[0] * other.group1()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl AntiWedge<DualNum> for CircleAligningOrigin {
    type Output = CircleAligningOrigin;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group0()[1])),
            // e415, e425, e435
            (self.group1() * Simd32x3::from(other.group0()[1])),
            // e235, e315, e125
            (self.group2() * Simd32x3::from(other.group0()[1])),
        );
    }
}
impl AntiWedge<FlatPoint> for CircleAligningOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: FlatPoint) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<FlatPointAtInfinity> for CircleAligningOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<Flector> for CircleAligningOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[1] * other.group1()[2] * -1.0),
                (self.group0()[2] * other.group1()[0] * -1.0),
                (self.group0()[0] * other.group1()[1] * -1.0),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
            // e15, e25, e35
            ((self.group1() * Simd32x3::from(other.group1()[3])) + (swizzle!(self.group2(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))),
            // e23, e31, e12
            (self.group0() * Simd32x3::from(other.group1()[3])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<FlectorAtInfinity> for CircleAligningOrigin {
    type Output = AntiMotor;
    fn anti_wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl AntiWedge<FlectorOnOrigin> for CircleAligningOrigin {
    type Output = DipoleAligningOrigin;
    fn anti_wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return DipoleAligningOrigin::from_groups(
            // e41, e42, e43
            (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[3], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group2()[1] * other.group0()[3]),
                (self.group2()[2] * other.group0()[1]),
                (self.group2()[0] * other.group0()[2]),
                (-(self.group1()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[2])),
            ]),
        );
    }
}
impl AntiWedge<Horizon> for CircleAligningOrigin {
    type Output = AntiLine;
    fn anti_wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return AntiLine::from_groups(
            // e23, e31, e12
            (self.group0() * Simd32x3::from(other[e3215])),
            // e15, e25, e35
            (self.group1() * Simd32x3::from(other[e3215])),
        );
    }
}
impl AntiWedge<Line> for CircleAligningOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: Line) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group1(), 1, 2, 0)),
            // e4, e5
            (-(Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group0()[2], self.group2()[2]]))
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group0()[0], self.group2()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group0()[1], self.group2()[1]]))
                + Simd32x2::from([
                    0.0,
                    (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl AntiWedge<LineAtInfinity> for CircleAligningOrigin {
    type Output = AntiPlane;
    fn anti_wedge(self, other: LineAtInfinity) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group0()[2] * other.group0()[1]),
            (self.group0()[0] * other.group0()[2]),
            (self.group0()[1] * other.group0()[0]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<LineOnOrigin> for CircleAligningOrigin {
    type Output = RoundPointAtOrigin;
    fn anti_wedge(self, other: LineOnOrigin) -> Self::Output {
        return RoundPointAtOrigin::from_groups(
            // e4, e5
            (-(Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group0()[2], self.group2()[2]]))
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group0()[0], self.group2()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group0()[1], self.group2()[1]]))),
        );
    }
}
impl AntiWedge<Motor> for CircleAligningOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[2] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                (self.group0()[1] * other.group1()[0]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e5
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group1()[2] * other.group1()[2])
                - (self.group1()[0] * other.group1()[0])
                - (self.group1()[1] * other.group1()[1])),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
            ]),
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group0()[3])),
            // e235, e315, e125
            (self.group2() * Simd32x3::from(other.group0()[3])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<MotorAtInfinity> for CircleAligningOrigin {
    type Output = AntiPlane;
    fn anti_wedge(self, other: MotorAtInfinity) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group0()[2] * other.group0()[1]),
            (self.group0()[0] * other.group0()[2]),
            (self.group0()[1] * other.group0()[0]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<MotorOnOrigin> for CircleAligningOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e5
            (-(self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
            ]),
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group0()[3])),
            // e235, e315, e125
            (self.group2() * Simd32x3::from(other.group0()[3])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<MultiVector> for CircleAligningOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group2()[2] * other.group3()[2])
                    - (self.group2()[1] * other.group3()[1])
                    - (self.group2()[0] * other.group3()[0])
                    - (self.group1()[2] * other.group5()[2])
                    - (self.group1()[1] * other.group5()[1])
                    - (self.group1()[0] * other.group5()[0])
                    - (self.group0()[2] * other.group4()[2])
                    - (self.group0()[0] * other.group4()[0])
                    - (self.group0()[1] * other.group4()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group2()[1] * other.group7()[2]) + (self.group0()[2] * other.group8()[1]) + (self.group1()[0] * other.group6()[0])),
                ((self.group2()[2] * other.group7()[0]) + (self.group0()[0] * other.group8()[2]) + (self.group1()[1] * other.group6()[0])),
                ((self.group2()[0] * other.group7()[1]) + (self.group0()[1] * other.group8()[0]) + (self.group1()[2] * other.group6()[0])),
                (-(self.group1()[2] * other.group7()[2])
                    - (self.group1()[1] * other.group7()[1])
                    - (self.group1()[0] * other.group7()[0])
                    - (self.group0()[2] * other.group6()[3])
                    - (self.group0()[0] * other.group6()[1])
                    - (self.group0()[1] * other.group6()[2])),
            ]),
            // e5
            (-(self.group2()[2] * other.group6()[3])
                - (self.group2()[1] * other.group6()[2])
                - (self.group2()[0] * other.group6()[1])
                - (self.group1()[2] * other.group8()[2])
                - (self.group1()[0] * other.group8()[0])
                - (self.group1()[1] * other.group8()[1])),
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[1] * other.group9()[2] * -1.0),
                (self.group0()[2] * other.group9()[0] * -1.0),
                (self.group0()[0] * other.group9()[1] * -1.0),
                (-(self.group1()[2] * other.group9()[2]) - (self.group1()[0] * other.group9()[0]) - (self.group1()[1] * other.group9()[1])),
            ]),
            // e15, e25, e35
            ((self.group1() * Simd32x3::from(other[e45])) + (swizzle!(self.group2(), 1, 2, 0) * Simd32x3::from([other.group9()[2], other.group9()[0], other.group9()[1]]))),
            // e23, e31, e12
            ((self.group0() * Simd32x3::from(other[e45])) + (self.group2() * Simd32x3::from(other.group9()[3]))),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group1()[0] * other.group0()[1]),
                (self.group1()[1] * other.group0()[1]),
                (self.group1()[2] * other.group0()[1]),
            ]),
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group0()[1])),
            // e235, e315, e125
            (self.group2() * Simd32x3::from(other.group0()[1])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<NullCircleAtOrigin> for CircleAligningOrigin {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from([
            (self.group2()[1] * other.group0()[2]),
            (self.group2()[2] * other.group0()[0]),
            (self.group2()[0] * other.group0()[1]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<NullDipoleAtOrigin> for CircleAligningOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<NullSphereAtOrigin> for CircleAligningOrigin {
    type Output = AntiCircleOnOrigin;
    fn anti_wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiCircleOnOrigin::from_groups(
            // e41, e42, e43
            (self.group1() * Simd32x3::from(other[e1234])),
            // e23, e31, e12
            (self.group2() * Simd32x3::from(other[e1234])),
        );
    }
}
impl AntiWedge<Plane> for CircleAligningOrigin {
    type Output = Dipole;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        return Dipole::from_groups(
            // e41, e42, e43
            (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (self.group0() * Simd32x3::from(other.group0()[3])),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group2()[1] * other.group0()[2])),
                ((self.group1()[1] * other.group0()[3]) + (self.group2()[2] * other.group0()[0])),
                ((self.group1()[2] * other.group0()[3]) + (self.group2()[0] * other.group0()[1])),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl AntiWedge<PlaneOnOrigin> for CircleAligningOrigin {
    type Output = DipoleAligningOrigin;
    fn anti_wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return DipoleAligningOrigin::from_groups(
            // e41, e42, e43
            (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from(-1.0)),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group2()[1] * other.group0()[2]),
                (self.group2()[2] * other.group0()[0]),
                (self.group2()[0] * other.group0()[1]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl AntiWedge<Sphere> for CircleAligningOrigin {
    type Output = Dipole;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        return Dipole::from_groups(
            // e41, e42, e43
            (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            ((self.group0() * Simd32x3::from(other.group1()[1])) + (self.group2() * Simd32x3::from(other.group1()[0]))),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group1()[0] * other.group1()[1]) + (self.group2()[1] * other.group0()[2])),
                ((self.group1()[1] * other.group1()[1]) + (self.group2()[2] * other.group0()[0])),
                ((self.group1()[2] * other.group1()[1]) + (self.group2()[0] * other.group0()[1])),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl AntiWedge<SphereAtOrigin> for CircleAligningOrigin {
    type Output = DipoleOrthogonalOrigin;
    fn anti_wedge(self, other: SphereAtOrigin) -> Self::Output {
        return DipoleOrthogonalOrigin::from_groups(
            // e41, e42, e43
            (self.group1() * Simd32x3::from(other.group0()[0])),
            // e23, e31, e12
            ((self.group0() * Simd32x3::from(other.group0()[1])) + (self.group2() * Simd32x3::from(other.group0()[0]))),
            // e15, e25, e35
            (self.group1() * Simd32x3::from(other.group0()[1])),
        );
    }
}
impl AntiWedge<SphereOnOrigin> for CircleAligningOrigin {
    type Output = Dipole;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        return Dipole::from_groups(
            // e41, e42, e43
            (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (self.group2() * Simd32x3::from(other.group0()[3])),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group2()[1] * other.group0()[2]),
                (self.group2()[2] * other.group0()[0]),
                (self.group2()[0] * other.group0()[1]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl InfixAntiWedge for CircleAtInfinity {}
impl AntiWedge<AntiCircleOnOrigin> for CircleAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[3] * other.group1()[2])
                - (self.group0()[1] * other.group1()[0])
                - (self.group0()[2] * other.group1()[1])),
        );
    }
}
impl AntiWedge<AntiDipoleOnOrigin> for CircleAtInfinity {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from([
            ((self.group0()[1] * other.group0()[3]) + (self.group1()[1] * other.group0()[2])),
            ((self.group0()[2] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
            ((self.group0()[3] * other.group0()[3]) + (self.group1()[0] * other.group0()[1])),
            (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<AntiFlatOrigin> for CircleAtInfinity {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiPlaneOnOrigin::from_groups(
            // e1, e2, e3
            (Simd32x3::from(other[e321]) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[3]])),
        );
    }
}
impl AntiWedge<AntiFlatPoint> for CircleAtInfinity {
    type Output = AntiPlane;
    fn anti_wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (self.group0()[3] * other.group0()[3]),
            (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<AntiFlector> for CircleAtInfinity {
    type Output = AntiPlane;
    fn anti_wedge(self, other: AntiFlector) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (self.group0()[3] * other.group0()[3]),
            (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<AntiFlectorOnOrigin> for CircleAtInfinity {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(
            // e1, e2, e3
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[3]])),
        );
    }
}
impl AntiWedge<AntiLine> for CircleAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiLine) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiLineOnOrigin> for CircleAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiMotor> for CircleAtInfinity {
    type Output = AntiMotor;
    fn anti_wedge(self, other: AntiMotor) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                (self.group0()[3] * other.group1()[3]),
                0.0,
            ]),
        );
    }
}
impl AntiWedge<AntiMotorOnOrigin> for CircleAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiScalar> for CircleAtInfinity {
    type Output = CircleAtInfinity;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return CircleAtInfinity::from_groups(
            // e321, e415, e425, e435
            (self.group0() * Simd32x4::from(other[e12345])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other[e12345])),
        );
    }
}
impl AntiWedge<Circle> for CircleAtInfinity {
    type Output = RoundPoint;
    fn anti_wedge(self, other: Circle) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            ((swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (Simd32x3::from(self.group0()[0]) * other.group1())
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[3]]))),
            // e4, e5
            (-(Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group0()[2], other.group2()[2]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[0], other.group2()[0]]))
                - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[1], other.group2()[1]]))
                + Simd32x2::from([
                    0.0,
                    (-(self.group1()[2] * other.group1()[2]) - (self.group1()[1] * other.group1()[1]) - (self.group1()[0] * other.group1()[0])),
                ])),
        );
    }
}
impl AntiWedge<CircleAligningOrigin> for CircleAtInfinity {
    type Output = RoundPoint;
    fn anti_wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            ((Simd32x3::from(self.group0()[0]) * other.group1()) + (swizzle!(self.group1(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1))),
            // e4, e5
            (-(Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group0()[2], other.group2()[2]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[0], other.group2()[0]]))
                - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[1], other.group2()[1]]))
                + Simd32x2::from([
                    0.0,
                    (-(self.group1()[2] * other.group1()[2]) - (self.group1()[1] * other.group1()[1]) - (self.group1()[0] * other.group1()[0])),
                ])),
        );
    }
}
impl AntiWedge<CircleAtInfinity> for CircleAtInfinity {
    type Output = AntiPlane;
    fn anti_wedge(self, other: CircleAtInfinity) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
            ((self.group0()[0] * other.group0()[2]) + (self.group0()[2] * other.group0()[0])),
            ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
            (-(self.group1()[2] * other.group0()[3])
                - (self.group1()[1] * other.group0()[2])
                - (self.group1()[0] * other.group0()[1])
                - (self.group0()[3] * other.group1()[2])
                - (self.group0()[1] * other.group1()[0])
                - (self.group0()[2] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<CircleAtOrigin> for CircleAtInfinity {
    type Output = RoundPoint;
    fn anti_wedge(self, other: CircleAtOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (swizzle!(self.group1(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1)),
            // e4, e5
            (-(Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group0()[2], other.group1()[2]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[0], other.group1()[0]]))
                - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[1], other.group1()[1]]))),
        );
    }
}
impl AntiWedge<CircleOnOrigin> for CircleAtInfinity {
    type Output = RoundPoint;
    fn anti_wedge(self, other: CircleOnOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            ((Simd32x3::from(self.group0()[0]) * other.group1()) + (swizzle!(self.group1(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1))),
            // e4, e5
            Simd32x2::from([
                (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl AntiWedge<CircleOrthogonalOrigin> for CircleAtInfinity {
    type Output = RoundPoint;
    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            ((Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[3]]))
                + (swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))),
            // e4, e5
            (-(Simd32x2::from(self.group0()[3]) * Simd32x2::from([other.group0()[2], other.group1()[2]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[0], other.group1()[0]]))
                - (Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[1], other.group1()[1]]))),
        );
    }
}
impl AntiWedge<Dipole> for CircleAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: Dipole) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[3] * other.group1()[2])
                - (self.group0()[2] * other.group1()[1])
                - (self.group0()[0] * other.group2()[3])
                - (self.group0()[1] * other.group1()[0])),
        );
    }
}
impl AntiWedge<DipoleAligningOrigin> for CircleAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) - (self.group0()[0] * other.group1()[3]) - (self.group1()[0] * other.group0()[0])),
        );
    }
}
impl AntiWedge<DipoleAtInfinity> for CircleAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[3] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) - (self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group0()[0])),
        );
    }
}
impl AntiWedge<DipoleAtOrigin> for CircleAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<DipoleOnOrigin> for CircleAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) - (self.group0()[0] * other.group0()[3]) - (self.group1()[0] * other.group0()[0])),
        );
    }
}
impl AntiWedge<DipoleOrthogonalOrigin> for CircleAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[3] * other.group1()[2])
                - (self.group0()[1] * other.group1()[0])
                - (self.group0()[2] * other.group1()[1])),
        );
    }
}
impl AntiWedge<DualNum> for CircleAtInfinity {
    type Output = CircleAtInfinity;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        return CircleAtInfinity::from_groups(
            // e321, e415, e425, e435
            (self.group0() * Simd32x4::from(other.group0()[1])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other.group0()[1])),
        );
    }
}
impl AntiWedge<FlatOrigin> for CircleAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self.group0()[0] * other[e45] * -1.0));
    }
}
impl AntiWedge<FlatPoint> for CircleAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: FlatPoint) -> Self::Output {
        return Scalar::from_groups(/* scalar */ (self.group0()[0] * other.group0()[3] * -1.0));
    }
}
impl AntiWedge<Flector> for CircleAtInfinity {
    type Output = MultiVector;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(self.group0()[0] * other.group0()[3] * -1.0), 0.0]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[3] * other.group1()[2]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[1])),
            ]),
            // e15, e25, e35
            ((Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[3]]))
                + (swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]) * Simd32x3::from(-1.0)),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<FlectorAtInfinity> for CircleAtInfinity {
    type Output = FlatPointAtInfinity;
    fn anti_wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return FlatPointAtInfinity::from_groups(
            // e15, e25, e35
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[3]])),
        );
    }
}
impl AntiWedge<FlectorOnOrigin> for CircleAtInfinity {
    type Output = MultiVector;
    fn anti_wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(self.group0()[0] * other.group0()[0] * -1.0), 0.0]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[3] * other.group0()[3]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35
            (swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group0()[3], other.group0()[1], other.group0()[2]])),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[3]]) * Simd32x3::from(-1.0)),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<Horizon> for CircleAtInfinity {
    type Output = FlatPointAtInfinity;
    fn anti_wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return FlatPointAtInfinity::from_groups(
            // e15, e25, e35
            (Simd32x3::from(other[e3215]) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[3]])),
        );
    }
}
impl AntiWedge<Line> for CircleAtInfinity {
    type Output = AntiPlane;
    fn anti_wedge(self, other: Line) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[0]),
            (self.group0()[0] * other.group0()[1]),
            (self.group0()[0] * other.group0()[2]),
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[3] * other.group1()[2])
                - (self.group0()[1] * other.group1()[0])
                - (self.group0()[2] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<LineAtInfinity> for CircleAtInfinity {
    type Output = Infinity;
    fn anti_wedge(self, other: LineAtInfinity) -> Self::Output {
        return Infinity::from_groups(
            // e5
            (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
        );
    }
}
impl AntiWedge<LineOnOrigin> for CircleAtInfinity {
    type Output = AntiPlane;
    fn anti_wedge(self, other: LineOnOrigin) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[0]),
            (self.group0()[0] * other.group0()[1]),
            (self.group0()[0] * other.group0()[2]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<Motor> for CircleAtInfinity {
    type Output = MultiVector;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
            // e5
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[3] * other.group1()[2])
                - (self.group0()[1] * other.group1()[0])
                - (self.group0()[2] * other.group1()[1])),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other.group0()[3])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<MotorAtInfinity> for CircleAtInfinity {
    type Output = Infinity;
    fn anti_wedge(self, other: MotorAtInfinity) -> Self::Output {
        return Infinity::from_groups(
            // e5
            (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
        );
    }
}
impl AntiWedge<MotorOnOrigin> for CircleAtInfinity {
    type Output = MultiVector;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
            // e5
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other.group0()[3])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<MultiVector> for CircleAtInfinity {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group1()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[0] * other.group3()[0])
                    - (self.group0()[3] * other.group5()[2])
                    - (self.group0()[2] * other.group5()[1])
                    - (self.group0()[0] * other.group3()[3])
                    - (self.group0()[1] * other.group5()[0])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group1()[1] * other.group7()[2]) + (self.group0()[0] * other.group6()[1]) + (self.group0()[1] * other.group6()[0])),
                ((self.group1()[2] * other.group7()[0]) + (self.group0()[0] * other.group6()[2]) + (self.group0()[2] * other.group6()[0])),
                ((self.group1()[0] * other.group7()[1]) + (self.group0()[0] * other.group6()[3]) + (self.group0()[3] * other.group6()[0])),
                (-(self.group0()[3] * other.group7()[2]) - (self.group0()[1] * other.group7()[0]) - (self.group0()[2] * other.group7()[1])),
            ]),
            // e5
            (-(self.group1()[2] * other.group6()[3])
                - (self.group1()[1] * other.group6()[2])
                - (self.group1()[0] * other.group6()[1])
                - (self.group0()[3] * other.group8()[2])
                - (self.group0()[1] * other.group8()[0])
                - (self.group0()[2] * other.group8()[1])),
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[1] * other.group9()[3]),
                (self.group0()[2] * other.group9()[3]),
                (self.group0()[3] * other.group9()[3]),
                (-(self.group0()[3] * other.group9()[2]) - (self.group0()[1] * other.group9()[0]) - (self.group0()[2] * other.group9()[1])),
            ]),
            // e15, e25, e35
            ((Simd32x3::from(other[e45]) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[3]]))
                + (swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group9()[2], other.group9()[0], other.group9()[1]]))),
            // e23, e31, e12
            (Simd32x3::from([(self.group1()[0] * other.group9()[3]), (self.group0()[0] * other.group9()[1]), (self.group1()[2] * other.group9()[3])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e321, e415, e425, e435
            (self.group0() * Simd32x4::from(other.group0()[1])),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other.group0()[1])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<NullCircleAtOrigin> for CircleAtInfinity {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from([
            (self.group1()[1] * other.group0()[2]),
            (self.group1()[2] * other.group0()[0]),
            (self.group1()[0] * other.group0()[1]),
            (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<NullDipoleAtOrigin> for CircleAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<NullSphereAtOrigin> for CircleAtInfinity {
    type Output = AntiCircleOnOrigin;
    fn anti_wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiCircleOnOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[e1234]) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[3]])),
            // e23, e31, e12
            (self.group1() * Simd32x3::from(other[e1234])),
        );
    }
}
impl AntiWedge<Plane> for CircleAtInfinity {
    type Output = DipoleAtInfinity;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        return DipoleAtInfinity::from_groups(
            // e23, e31, e12
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[1] * other.group0()[2])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[3] * other.group0()[3]) + (self.group1()[0] * other.group0()[1])),
                (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
            ]),
        );
    }
}
impl AntiWedge<PlaneOnOrigin> for CircleAtInfinity {
    type Output = DipoleAtInfinity;
    fn anti_wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return DipoleAtInfinity::from_groups(
            // e23, e31, e12
            (Simd32x3::from(self.group0()[0]) * other.group0() * Simd32x3::from(-1.0)),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group1()[1] * other.group0()[2]),
                (self.group1()[2] * other.group0()[0]),
                (self.group1()[0] * other.group0()[1]),
                (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
            ]),
        );
    }
}
impl AntiWedge<Sphere> for CircleAtInfinity {
    type Output = Dipole;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        return Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other.group1()[0]) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[3]])),
            // e23, e31, e12
            (Simd32x3::from([(self.group1()[0] * other.group1()[0]), (self.group0()[0] * other.group0()[1]), (self.group1()[2] * other.group1()[0])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[1]) + (self.group1()[1] * other.group0()[2])),
                ((self.group0()[2] * other.group1()[1]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[3] * other.group1()[1]) + (self.group1()[0] * other.group0()[1])),
                (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
            ]),
        );
    }
}
impl AntiWedge<SphereAtOrigin> for CircleAtInfinity {
    type Output = DipoleOrthogonalOrigin;
    fn anti_wedge(self, other: SphereAtOrigin) -> Self::Output {
        return DipoleOrthogonalOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[3]])),
            // e23, e31, e12
            (self.group1() * Simd32x3::from(other.group0()[0])),
            // e15, e25, e35
            (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[3]])),
        );
    }
}
impl AntiWedge<SphereOnOrigin> for CircleAtInfinity {
    type Output = Dipole;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        return Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[3]])),
            // e23, e31, e12
            (Simd32x3::from([(self.group1()[0] * other.group0()[3]), (self.group0()[0] * other.group0()[1]), (self.group1()[2] * other.group0()[3])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group1()[1] * other.group0()[2]),
                (self.group1()[2] * other.group0()[0]),
                (self.group1()[0] * other.group0()[1]),
                (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
            ]),
        );
    }
}
impl InfixAntiWedge for CircleAtOrigin {}
impl AntiWedge<AntiCircleOnOrigin> for CircleAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiDipoleOnOrigin> for CircleAtOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(
            // e1, e2, e3
            (swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]])),
        );
    }
}
impl AntiWedge<AntiFlatPoint> for CircleAtOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(
            // e1, e2, e3
            (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]])),
        );
    }
}
impl AntiWedge<AntiFlector> for CircleAtOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiFlector) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(
            // e1, e2, e3
            (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]])),
        );
    }
}
impl AntiWedge<AntiLine> for CircleAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiLine) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<AntiMotor> for CircleAtOrigin {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: AntiMotor) -> Self::Output {
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ Simd32x4::from([
            (self.group0()[0] * other.group1()[3]),
            (self.group0()[1] * other.group1()[3]),
            (self.group0()[2] * other.group1()[3]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<AntiScalar> for CircleAtOrigin {
    type Output = CircleAtOrigin;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return CircleAtOrigin::from_groups(
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other[e12345])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other[e12345])),
        );
    }
}
impl AntiWedge<Circle> for CircleAtOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: Circle) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            ((swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group2(), 1, 2, 0))
                + (swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))),
            // e4, e5
            (-(Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group0()[2], self.group1()[2]]))
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group0()[0], self.group1()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group0()[1], self.group1()[1]]))),
        );
    }
}
impl AntiWedge<CircleAligningOrigin> for CircleAtOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            ((swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group2(), 1, 2, 0)) + (swizzle!(self.group1(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1))),
            // e4, e5
            (-(Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group0()[2], self.group1()[2]]))
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group0()[0], self.group1()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group0()[1], self.group1()[1]]))),
        );
    }
}
impl AntiWedge<CircleAtInfinity> for CircleAtOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: CircleAtInfinity) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group1(), 1, 2, 0)),
            // e4, e5
            (-(Simd32x2::from(other.group0()[3]) * Simd32x2::from([self.group0()[2], self.group1()[2]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group0()[0], self.group1()[0]]))
                - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group0()[1], self.group1()[1]]))),
        );
    }
}
impl AntiWedge<CircleAtOrigin> for CircleAtOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: CircleAtOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(
            // e1, e2, e3
            ((swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group1(), 1, 2, 0)) + (swizzle!(self.group1(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1))),
        );
    }
}
impl AntiWedge<CircleOnOrigin> for CircleAtOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: CircleOnOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (swizzle!(self.group1(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1)),
            // e4, e5
            (-(Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group0()[2], self.group1()[2]]))
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group0()[0], self.group1()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group0()[1], self.group1()[1]]))),
        );
    }
}
impl AntiWedge<CircleOrthogonalOrigin> for CircleAtOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(
            // e1, e2, e3
            ((swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group1(), 1, 2, 0))
                + (swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))),
        );
    }
}
impl AntiWedge<Dipole> for CircleAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: Dipole) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl AntiWedge<DipoleAligningOrigin> for CircleAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<DipoleAtInfinity> for CircleAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<DipoleAtOrigin> for CircleAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<DipoleOnOrigin> for CircleAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<DipoleOrthogonalOrigin> for CircleAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl AntiWedge<DualNum> for CircleAtOrigin {
    type Output = CircleAtOrigin;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        return CircleAtOrigin::from_groups(
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group0()[1])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other.group0()[1])),
        );
    }
}
impl AntiWedge<FlatPoint> for CircleAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: FlatPoint) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<FlatPointAtInfinity> for CircleAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<Flector> for CircleAtOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[1] * other.group1()[2] * -1.0),
                (self.group0()[2] * other.group1()[0] * -1.0),
                (self.group0()[0] * other.group1()[1] * -1.0),
                0.0,
            ]),
            // e15, e25, e35
            (swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]])),
            // e23, e31, e12
            (self.group0() * Simd32x3::from(other.group1()[3])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<FlectorAtInfinity> for CircleAtOrigin {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<FlectorOnOrigin> for CircleAtOrigin {
    type Output = DipoleAtOrigin;
    fn anti_wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return DipoleAtOrigin::from_groups(
            // e41, e42, e43
            (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[3], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
            // e15, e25, e35
            (swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group0()[3], other.group0()[1], other.group0()[2]])),
        );
    }
}
impl AntiWedge<Horizon> for CircleAtOrigin {
    type Output = AntiLineOnOrigin;
    fn anti_wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return AntiLineOnOrigin::from_groups(/* e23, e31, e12 */ (self.group0() * Simd32x3::from(other[e3215])));
    }
}
impl AntiWedge<Line> for CircleAtOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: Line) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group1(), 1, 2, 0)),
            // e4, e5
            (-(Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group0()[2], self.group1()[2]]))
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group0()[0], self.group1()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group0()[1], self.group1()[1]]))),
        );
    }
}
impl AntiWedge<LineAtInfinity> for CircleAtOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: LineAtInfinity) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group0(), 1, 2, 0)));
    }
}
impl AntiWedge<LineOnOrigin> for CircleAtOrigin {
    type Output = RoundPointAtOrigin;
    fn anti_wedge(self, other: LineOnOrigin) -> Self::Output {
        return RoundPointAtOrigin::from_groups(
            // e4, e5
            (-(Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group0()[2], self.group1()[2]]))
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group0()[0], self.group1()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group0()[1], self.group1()[1]]))),
        );
    }
}
impl AntiWedge<Motor> for CircleAtOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[2] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                (self.group0()[1] * other.group1()[0]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e5
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group0()[3])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other.group0()[3])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<MotorAtInfinity> for CircleAtOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: MotorAtInfinity) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(
            // e1, e2, e3
            (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]])),
        );
    }
}
impl AntiWedge<MotorOnOrigin> for CircleAtOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e5
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group0()[3])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other.group0()[3])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<MultiVector> for CircleAtOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group1()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[0] * other.group3()[0])
                    - (self.group0()[2] * other.group4()[2])
                    - (self.group0()[0] * other.group4()[0])
                    - (self.group0()[1] * other.group4()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[2] * other.group8()[1]) + (self.group1()[1] * other.group7()[2])),
                ((self.group0()[0] * other.group8()[2]) + (self.group1()[2] * other.group7()[0])),
                ((self.group0()[1] * other.group8()[0]) + (self.group1()[0] * other.group7()[1])),
                (-(self.group0()[2] * other.group6()[3]) - (self.group0()[0] * other.group6()[1]) - (self.group0()[1] * other.group6()[2])),
            ]),
            // e5
            (-(self.group1()[2] * other.group6()[3]) - (self.group1()[0] * other.group6()[1]) - (self.group1()[1] * other.group6()[2])),
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[1] * other.group9()[2] * -1.0),
                (self.group0()[2] * other.group9()[0] * -1.0),
                (self.group0()[0] * other.group9()[1] * -1.0),
                0.0,
            ]),
            // e15, e25, e35
            (swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group9()[2], other.group9()[0], other.group9()[1]])),
            // e23, e31, e12
            ((self.group0() * Simd32x3::from(other[e45])) + (self.group1() * Simd32x3::from(other.group9()[3]))),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group0()[1])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other.group0()[1])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<NullCircleAtOrigin> for CircleAtOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (swizzle!(self.group1(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1)));
    }
}
impl AntiWedge<NullDipoleAtOrigin> for CircleAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<NullSphereAtOrigin> for CircleAtOrigin {
    type Output = AntiLineOnOrigin;
    fn anti_wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiLineOnOrigin::from_groups(/* e23, e31, e12 */ (self.group1() * Simd32x3::from(other[e1234])));
    }
}
impl AntiWedge<Plane> for CircleAtOrigin {
    type Output = DipoleOrthogonalOrigin;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        return DipoleOrthogonalOrigin::from_groups(
            // e41, e42, e43
            (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (self.group0() * Simd32x3::from(other.group0()[3])),
            // e15, e25, e35
            (swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]])),
        );
    }
}
impl AntiWedge<PlaneOnOrigin> for CircleAtOrigin {
    type Output = DipoleAtOrigin;
    fn anti_wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return DipoleAtOrigin::from_groups(
            // e41, e42, e43
            (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from(-1.0)),
            // e15, e25, e35
            (swizzle!(self.group1(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1)),
        );
    }
}
impl AntiWedge<Sphere> for CircleAtOrigin {
    type Output = DipoleOrthogonalOrigin;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        return DipoleOrthogonalOrigin::from_groups(
            // e41, e42, e43
            (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            ((self.group0() * Simd32x3::from(other.group1()[1])) + (self.group1() * Simd32x3::from(other.group1()[0]))),
            // e15, e25, e35
            (swizzle!(self.group1(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1)),
        );
    }
}
impl AntiWedge<SphereAtOrigin> for CircleAtOrigin {
    type Output = AntiLineOnOrigin;
    fn anti_wedge(self, other: SphereAtOrigin) -> Self::Output {
        return AntiLineOnOrigin::from_groups(
            // e23, e31, e12
            ((self.group0() * Simd32x3::from(other.group0()[1])) + (self.group1() * Simd32x3::from(other.group0()[0]))),
        );
    }
}
impl AntiWedge<SphereOnOrigin> for CircleAtOrigin {
    type Output = DipoleOrthogonalOrigin;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        return DipoleOrthogonalOrigin::from_groups(
            // e41, e42, e43
            (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (self.group1() * Simd32x3::from(other.group0()[3])),
            // e15, e25, e35
            (swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]])),
        );
    }
}
impl InfixAntiWedge for CircleOnOrigin {}
impl AntiWedge<AntiCircleOnOrigin> for CircleOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<AntiDipoleOnOrigin> for CircleOnOrigin {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from([
            (self.group1()[0] * other.group0()[3]),
            (self.group1()[1] * other.group0()[3]),
            (self.group1()[2] * other.group0()[3]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<AntiFlatOrigin> for CircleOnOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (self.group1() * Simd32x3::from(other[e321])));
    }
}
impl AntiWedge<AntiFlatPoint> for CircleOnOrigin {
    type Output = AntiPlane;
    fn anti_wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            ((self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3])),
            ((self.group0()[0] * other.group0()[2]) + (self.group1()[1] * other.group0()[3])),
            ((self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<AntiFlector> for CircleOnOrigin {
    type Output = AntiPlane;
    fn anti_wedge(self, other: AntiFlector) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            ((self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group0()[3])),
            ((self.group0()[0] * other.group0()[2]) + (self.group1()[1] * other.group0()[3])),
            ((self.group0()[1] * other.group0()[0]) + (self.group1()[2] * other.group0()[3])),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<AntiFlectorOnOrigin> for CircleOnOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (self.group1() * Simd32x3::from(other.group0()[0])));
    }
}
impl AntiWedge<AntiLine> for CircleOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiLine) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<AntiLineOnOrigin> for CircleOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiMotor> for CircleOnOrigin {
    type Output = AntiMotor;
    fn anti_wedge(self, other: AntiMotor) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group1()[0] * other.group1()[3]),
                (self.group1()[1] * other.group1()[3]),
                (self.group1()[2] * other.group1()[3]),
                0.0,
            ]),
        );
    }
}
impl AntiWedge<AntiMotorOnOrigin> for CircleOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiScalar> for CircleOnOrigin {
    type Output = CircleOnOrigin;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other[e12345])),
            // e415, e425, e435
            (self.group1() * Simd32x3::from(other[e12345])),
        );
    }
}
impl AntiWedge<Circle> for CircleOnOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: Circle) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            ((swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group2(), 1, 2, 0)) + (self.group1() * Simd32x3::from(other.group0()[3]))),
            // e4, e5
            (-(Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]]))
                + Simd32x2::from([
                    (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                    0.0,
                ])),
        );
    }
}
impl AntiWedge<CircleAligningOrigin> for CircleOnOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group2(), 1, 2, 0)),
            // e4, e5
            (-(Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]]))
                + Simd32x2::from([
                    (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                    0.0,
                ])),
        );
    }
}
impl AntiWedge<CircleAtInfinity> for CircleOnOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: CircleAtInfinity) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            ((swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group1(), 1, 2, 0)) + (self.group1() * Simd32x3::from(other.group0()[0]))),
            // e4, e5
            Simd32x2::from([
                (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl AntiWedge<CircleAtOrigin> for CircleOnOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: CircleAtOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group1(), 1, 2, 0)),
            // e4, e5
            (-(Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]]))),
        );
    }
}
impl AntiWedge<CircleOnOrigin> for CircleOnOrigin {
    type Output = Origin;
    fn anti_wedge(self, other: CircleOnOrigin) -> Self::Output {
        return Origin::from_groups(
            // e4
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<CircleOrthogonalOrigin> for CircleOnOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            ((swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group1(), 1, 2, 0)) + (self.group1() * Simd32x3::from(other.group0()[3]))),
            // e4, e5
            (-(Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]]))),
        );
    }
}
impl AntiWedge<Dipole> for CircleOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: Dipole) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group1()[2])
                - (self.group1()[1] * other.group1()[1])
                - (self.group1()[0] * other.group1()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl AntiWedge<DipoleAligningOrigin> for CircleOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<DipoleAtInfinity> for CircleOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<DipoleAtOrigin> for CircleOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<DipoleOrthogonalOrigin> for CircleOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group1()[2])
                - (self.group1()[1] * other.group1()[1])
                - (self.group1()[0] * other.group1()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl AntiWedge<DualNum> for CircleOnOrigin {
    type Output = CircleOnOrigin;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group0()[1])),
            // e415, e425, e435
            (self.group1() * Simd32x3::from(other.group0()[1])),
        );
    }
}
impl AntiWedge<FlatPoint> for CircleOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: FlatPoint) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<FlatPointAtInfinity> for CircleOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<Flector> for CircleOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[1] * other.group1()[2] * -1.0),
                (self.group0()[2] * other.group1()[0] * -1.0),
                (self.group0()[0] * other.group1()[1] * -1.0),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
            // e15, e25, e35
            (self.group1() * Simd32x3::from(other.group1()[3])),
            // e23, e31, e12
            (self.group0() * Simd32x3::from(other.group1()[3])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<FlectorAtInfinity> for CircleOnOrigin {
    type Output = AntiMotor;
    fn anti_wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl AntiWedge<FlectorOnOrigin> for CircleOnOrigin {
    type Output = DipoleOnOrigin;
    fn anti_wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return DipoleOnOrigin::from_groups(/* e41, e42, e43, e45 */ Simd32x4::from([
            (self.group0()[1] * other.group0()[3] * -1.0),
            (self.group0()[2] * other.group0()[1] * -1.0),
            (self.group0()[0] * other.group0()[2] * -1.0),
            (-(self.group1()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[2])),
        ]));
    }
}
impl AntiWedge<Horizon> for CircleOnOrigin {
    type Output = AntiLine;
    fn anti_wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return AntiLine::from_groups(
            // e23, e31, e12
            (self.group0() * Simd32x3::from(other[e3215])),
            // e15, e25, e35
            (self.group1() * Simd32x3::from(other[e3215])),
        );
    }
}
impl AntiWedge<Line> for CircleOnOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: Line) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group1(), 1, 2, 0)),
            // e4, e5
            Simd32x2::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl AntiWedge<LineAtInfinity> for CircleOnOrigin {
    type Output = AntiPlane;
    fn anti_wedge(self, other: LineAtInfinity) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group0()[2] * other.group0()[1]),
            (self.group0()[0] * other.group0()[2]),
            (self.group0()[1] * other.group0()[0]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<LineOnOrigin> for CircleOnOrigin {
    type Output = Origin;
    fn anti_wedge(self, other: LineOnOrigin) -> Self::Output {
        return Origin::from_groups(
            // e4
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<Motor> for CircleOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[2] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                (self.group0()[1] * other.group1()[0]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e5
            (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
            ]),
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group0()[3])),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<MotorAtInfinity> for CircleOnOrigin {
    type Output = AntiPlane;
    fn anti_wedge(self, other: MotorAtInfinity) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group0()[2] * other.group0()[1]),
            (self.group0()[0] * other.group0()[2]),
            (self.group0()[1] * other.group0()[0]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<MotorOnOrigin> for CircleOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
            ]),
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group0()[3])),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<MultiVector> for CircleOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group1()[2] * other.group5()[2])
                    - (self.group1()[1] * other.group5()[1])
                    - (self.group1()[0] * other.group5()[0])
                    - (self.group0()[2] * other.group4()[2])
                    - (self.group0()[0] * other.group4()[0])
                    - (self.group0()[1] * other.group4()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[2] * other.group8()[1]) + (self.group1()[0] * other.group6()[0])),
                ((self.group0()[0] * other.group8()[2]) + (self.group1()[1] * other.group6()[0])),
                ((self.group0()[1] * other.group8()[0]) + (self.group1()[2] * other.group6()[0])),
                (-(self.group1()[2] * other.group7()[2])
                    - (self.group1()[1] * other.group7()[1])
                    - (self.group1()[0] * other.group7()[0])
                    - (self.group0()[2] * other.group6()[3])
                    - (self.group0()[0] * other.group6()[1])
                    - (self.group0()[1] * other.group6()[2])),
            ]),
            // e5
            (-(self.group1()[2] * other.group8()[2]) - (self.group1()[0] * other.group8()[0]) - (self.group1()[1] * other.group8()[1])),
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[1] * other.group9()[2] * -1.0),
                (self.group0()[2] * other.group9()[0] * -1.0),
                (self.group0()[0] * other.group9()[1] * -1.0),
                (-(self.group1()[2] * other.group9()[2]) - (self.group1()[0] * other.group9()[0]) - (self.group1()[1] * other.group9()[1])),
            ]),
            // e15, e25, e35
            (self.group1() * Simd32x3::from(other[e45])),
            // e23, e31, e12
            (self.group0() * Simd32x3::from(other[e45])),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group1()[0] * other.group0()[1]),
                (self.group1()[1] * other.group0()[1]),
                (self.group1()[2] * other.group0()[1]),
            ]),
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group0()[1])),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<NullCircleAtOrigin> for CircleOnOrigin {
    type Output = Origin;
    fn anti_wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return Origin::from_groups(
            // e4
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<NullSphereAtOrigin> for CircleOnOrigin {
    type Output = NullDipoleAtOrigin;
    fn anti_wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return NullDipoleAtOrigin::from_groups(/* e41, e42, e43 */ (self.group1() * Simd32x3::from(other[e1234])));
    }
}
impl AntiWedge<Plane> for CircleOnOrigin {
    type Output = Dipole;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        return Dipole::from_groups(
            // e41, e42, e43
            (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (self.group0() * Simd32x3::from(other.group0()[3])),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl AntiWedge<PlaneOnOrigin> for CircleOnOrigin {
    type Output = DipoleOnOrigin;
    fn anti_wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return DipoleOnOrigin::from_groups(/* e41, e42, e43, e45 */ Simd32x4::from([
            (self.group0()[1] * other.group0()[2] * -1.0),
            (self.group0()[2] * other.group0()[0] * -1.0),
            (self.group0()[0] * other.group0()[1] * -1.0),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<Sphere> for CircleOnOrigin {
    type Output = Dipole;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        return Dipole::from_groups(
            // e41, e42, e43
            (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (self.group0() * Simd32x3::from(other.group1()[1])),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group1()[0] * other.group1()[1]),
                (self.group1()[1] * other.group1()[1]),
                (self.group1()[2] * other.group1()[1]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl AntiWedge<SphereAtOrigin> for CircleOnOrigin {
    type Output = DipoleOrthogonalOrigin;
    fn anti_wedge(self, other: SphereAtOrigin) -> Self::Output {
        return DipoleOrthogonalOrigin::from_groups(
            // e41, e42, e43
            (self.group1() * Simd32x3::from(other.group0()[0])),
            // e23, e31, e12
            (self.group0() * Simd32x3::from(other.group0()[1])),
            // e15, e25, e35
            (self.group1() * Simd32x3::from(other.group0()[1])),
        );
    }
}
impl AntiWedge<SphereOnOrigin> for CircleOnOrigin {
    type Output = DipoleOnOrigin;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        return DipoleOnOrigin::from_groups(/* e41, e42, e43, e45 */ Simd32x4::from([
            (self.group0()[1] * other.group0()[2] * -1.0),
            (self.group0()[2] * other.group0()[0] * -1.0),
            (self.group0()[0] * other.group0()[1] * -1.0),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl InfixAntiWedge for CircleOrthogonalOrigin {}
impl AntiWedge<AntiCircleOnOrigin> for CircleOrthogonalOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiDipoleOnOrigin> for CircleOrthogonalOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(
            // e1, e2, e3
            (swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]])),
        );
    }
}
impl AntiWedge<AntiFlatPoint> for CircleOrthogonalOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ Simd32x3::from([
            (self.group0()[2] * other.group0()[1]),
            (self.group0()[0] * other.group0()[2]),
            (self.group0()[1] * other.group0()[0]),
        ]));
    }
}
impl AntiWedge<AntiFlector> for CircleOrthogonalOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiFlector) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ Simd32x3::from([
            (self.group0()[2] * other.group0()[1]),
            (self.group0()[0] * other.group0()[2]),
            (self.group0()[1] * other.group0()[0]),
        ]));
    }
}
impl AntiWedge<AntiLine> for CircleOrthogonalOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiLine) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<AntiMotor> for CircleOrthogonalOrigin {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: AntiMotor) -> Self::Output {
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ Simd32x4::from([
            (self.group0()[0] * other.group1()[3]),
            (self.group0()[1] * other.group1()[3]),
            (self.group0()[2] * other.group1()[3]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<AntiScalar> for CircleOrthogonalOrigin {
    type Output = CircleOrthogonalOrigin;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return CircleOrthogonalOrigin::from_groups(
            // e423, e431, e412, e321
            (self.group0() * Simd32x4::from(other[e12345])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other[e12345])),
        );
    }
}
impl AntiWedge<Circle> for CircleOrthogonalOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: Circle) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            ((swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))
                + (swizzle!(other.group2(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))
                + (Simd32x3::from(self.group0()[3]) * other.group1())),
            // e4, e5
            (-(Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group0()[2], self.group1()[2]]))
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group0()[0], self.group1()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group0()[1], self.group1()[1]]))),
        );
    }
}
impl AntiWedge<CircleAligningOrigin> for CircleOrthogonalOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            ((swizzle!(self.group1(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1))
                + (swizzle!(other.group2(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))
                + (Simd32x3::from(self.group0()[3]) * other.group1())),
            // e4, e5
            (-(Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group0()[2], self.group1()[2]]))
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group0()[0], self.group1()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group0()[1], self.group1()[1]]))),
        );
    }
}
impl AntiWedge<CircleAtInfinity> for CircleOrthogonalOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: CircleAtInfinity) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            ((swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[3]]))),
            // e4, e5
            (-(Simd32x2::from(other.group0()[3]) * Simd32x2::from([self.group0()[2], self.group1()[2]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group0()[0], self.group1()[0]]))
                - (Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group0()[1], self.group1()[1]]))),
        );
    }
}
impl AntiWedge<CircleAtOrigin> for CircleOrthogonalOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: CircleAtOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(
            // e1, e2, e3
            ((swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))
                + (swizzle!(self.group1(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1))),
        );
    }
}
impl AntiWedge<CircleOnOrigin> for CircleOrthogonalOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: CircleOnOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            ((Simd32x3::from(self.group0()[3]) * other.group1()) + (swizzle!(self.group1(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1))),
            // e4, e5
            (-(Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group0()[2], self.group1()[2]]))
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group0()[0], self.group1()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group0()[1], self.group1()[1]]))),
        );
    }
}
impl AntiWedge<CircleOrthogonalOrigin> for CircleOrthogonalOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(
            // e1, e2, e3
            ((swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))
                + (swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))),
        );
    }
}
impl AntiWedge<Dipole> for CircleOrthogonalOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: Dipole) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[3] * other.group2()[3])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl AntiWedge<DipoleAligningOrigin> for CircleOrthogonalOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[3] * other.group1()[3])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<DipoleAtInfinity> for CircleOrthogonalOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[3] * other.group1()[3]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<DipoleAtOrigin> for CircleOrthogonalOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<DipoleOnOrigin> for CircleOrthogonalOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) - (self.group0()[3] * other.group0()[3]) - (self.group1()[0] * other.group0()[0])),
        );
    }
}
impl AntiWedge<DipoleOrthogonalOrigin> for CircleOrthogonalOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl AntiWedge<DualNum> for CircleOrthogonalOrigin {
    type Output = CircleOrthogonalOrigin;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        return CircleOrthogonalOrigin::from_groups(
            // e423, e431, e412, e321
            (self.group0() * Simd32x4::from(other.group0()[1])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other.group0()[1])),
        );
    }
}
impl AntiWedge<FlatOrigin> for CircleOrthogonalOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self.group0()[3] * other[e45] * -1.0));
    }
}
impl AntiWedge<FlatPoint> for CircleOrthogonalOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: FlatPoint) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<FlatPointAtInfinity> for CircleOrthogonalOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<Flector> for CircleOrthogonalOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[1] * other.group1()[2] * -1.0),
                (self.group0()[2] * other.group1()[0] * -1.0),
                (self.group0()[0] * other.group1()[1] * -1.0),
                0.0,
            ]),
            // e15, e25, e35
            (swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]])),
            // e23, e31, e12
            (Simd32x3::from([(self.group0()[0] * other.group1()[3]), (self.group0()[3] * other.group1()[1]), (self.group0()[2] * other.group1()[3])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<FlectorAtInfinity> for CircleOrthogonalOrigin {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<FlectorOnOrigin> for CircleOrthogonalOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(self.group0()[3] * other.group0()[0] * -1.0), 0.0]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e15, e25, e35
            (swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group0()[3], other.group0()[1], other.group0()[2]])),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[3]]) * Simd32x3::from(-1.0)),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<Horizon> for CircleOrthogonalOrigin {
    type Output = AntiLineOnOrigin;
    fn anti_wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return AntiLineOnOrigin::from_groups(
            // e23, e31, e12
            (Simd32x3::from(other[e3215]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
        );
    }
}
impl AntiWedge<Line> for CircleOrthogonalOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: Line) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            ((swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]])) + (Simd32x3::from(self.group0()[3]) * other.group0())),
            // e4, e5
            (-(Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group0()[2], self.group1()[2]]))
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group0()[0], self.group1()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group0()[1], self.group1()[1]]))),
        );
    }
}
impl AntiWedge<LineAtInfinity> for CircleOrthogonalOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: LineAtInfinity) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(
            // e1, e2, e3
            (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]])),
        );
    }
}
impl AntiWedge<LineOnOrigin> for CircleOrthogonalOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: LineOnOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e4, e5
            (-(Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group0()[2], self.group1()[2]]))
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group0()[0], self.group1()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group0()[1], self.group1()[1]]))),
        );
    }
}
impl AntiWedge<Motor> for CircleOrthogonalOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[2] * other.group1()[1]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e5
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([(self.group0()[3] * other.group0()[3]), 0.0, 0.0, 0.0]),
            // e423, e431, e412
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other.group0()[3])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<MotorAtInfinity> for CircleOrthogonalOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: MotorAtInfinity) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ Simd32x3::from([
            (self.group0()[2] * other.group0()[1]),
            (self.group0()[0] * other.group0()[2]),
            (self.group0()[1] * other.group0()[0]),
        ]));
    }
}
impl AntiWedge<MotorOnOrigin> for CircleOrthogonalOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e5
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([(self.group0()[3] * other.group0()[3]), 0.0, 0.0, 0.0]),
            // e423, e431, e412
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other.group0()[3])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<MultiVector> for CircleOrthogonalOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group1()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[0] * other.group3()[0])
                    - (self.group0()[3] * other.group3()[3])
                    - (self.group0()[2] * other.group4()[2])
                    - (self.group0()[0] * other.group4()[0])
                    - (self.group0()[1] * other.group4()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group1()[1] * other.group7()[2]) + (self.group0()[2] * other.group8()[1]) + (self.group0()[3] * other.group6()[1])),
                ((self.group1()[2] * other.group7()[0]) + (self.group0()[0] * other.group8()[2]) + (self.group0()[3] * other.group6()[2])),
                ((self.group1()[0] * other.group7()[1]) + (self.group0()[1] * other.group8()[0]) + (self.group0()[3] * other.group6()[3])),
                (-(self.group0()[2] * other.group6()[3]) - (self.group0()[0] * other.group6()[1]) - (self.group0()[1] * other.group6()[2])),
            ]),
            // e5
            (-(self.group1()[2] * other.group6()[3]) - (self.group1()[0] * other.group6()[1]) - (self.group1()[1] * other.group6()[2])),
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[1] * other.group9()[2] * -1.0),
                (self.group0()[2] * other.group9()[0] * -1.0),
                (self.group0()[0] * other.group9()[1] * -1.0),
                0.0,
            ]),
            // e15, e25, e35
            (swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group9()[2], other.group9()[0], other.group9()[1]])),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group0()[0] * other[e45]) + (self.group1()[0] * other.group9()[3])),
                (self.group0()[3] * other.group9()[1] * -1.0),
                ((self.group0()[2] * other[e45]) + (self.group1()[2] * other.group9()[3])),
            ]),
            // e321, e415, e425, e435
            Simd32x4::from([(self.group0()[3] * other.group0()[1]), 0.0, 0.0, 0.0]),
            // e423, e431, e412
            (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other.group0()[1])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<NullCircleAtOrigin> for CircleOrthogonalOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (swizzle!(self.group1(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1)));
    }
}
impl AntiWedge<NullDipoleAtOrigin> for CircleOrthogonalOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<NullSphereAtOrigin> for CircleOrthogonalOrigin {
    type Output = AntiLineOnOrigin;
    fn anti_wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiLineOnOrigin::from_groups(/* e23, e31, e12 */ (self.group1() * Simd32x3::from(other[e1234])));
    }
}
impl AntiWedge<Plane> for CircleOrthogonalOrigin {
    type Output = DipoleOrthogonalOrigin;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        return DipoleOrthogonalOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from([(self.group0()[1] * other.group0()[2]), (self.group0()[2] * other.group0()[0]), (self.group0()[0] * other.group0()[1])]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (Simd32x3::from([(self.group0()[0] * other.group0()[3]), (self.group0()[3] * other.group0()[1]), (self.group0()[2] * other.group0()[3])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e15, e25, e35
            (swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]])),
        );
    }
}
impl AntiWedge<PlaneOnOrigin> for CircleOrthogonalOrigin {
    type Output = DipoleOrthogonalOrigin;
    fn anti_wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return DipoleOrthogonalOrigin::from_groups(
            // e41, e42, e43
            (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[3]) * other.group0() * Simd32x3::from(-1.0)),
            // e15, e25, e35
            (swizzle!(self.group1(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1)),
        );
    }
}
impl AntiWedge<Sphere> for CircleOrthogonalOrigin {
    type Output = DipoleOrthogonalOrigin;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        return DipoleOrthogonalOrigin::from_groups(
            // e41, e42, e43
            (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group0()[0] * other.group1()[1]) + (self.group1()[0] * other.group1()[0])),
                (self.group0()[3] * other.group0()[1] * -1.0),
                ((self.group0()[2] * other.group1()[1]) + (self.group1()[2] * other.group1()[0])),
            ]),
            // e15, e25, e35
            (swizzle!(self.group1(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1)),
        );
    }
}
impl AntiWedge<SphereAtOrigin> for CircleOrthogonalOrigin {
    type Output = AntiLineOnOrigin;
    fn anti_wedge(self, other: SphereAtOrigin) -> Self::Output {
        return AntiLineOnOrigin::from_groups(
            // e23, e31, e12
            ((Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])) + (self.group1() * Simd32x3::from(other.group0()[0]))),
        );
    }
}
impl AntiWedge<SphereOnOrigin> for CircleOrthogonalOrigin {
    type Output = DipoleOrthogonalOrigin;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        return DipoleOrthogonalOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from([(self.group0()[1] * other.group0()[2]), (self.group0()[2] * other.group0()[0]), (self.group0()[0] * other.group0()[1])]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (Simd32x3::from([(self.group1()[0] * other.group0()[3]), (self.group0()[3] * other.group0()[1]), (self.group1()[2] * other.group0()[3])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e15, e25, e35
            (swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]])),
        );
    }
}
impl InfixAntiWedge for Dipole {}
impl AntiWedge<AntiDipoleOnOrigin> for Dipole {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group2()[3] * other.group0()[3]) - (self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiFlatOrigin> for Dipole {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self.group2()[3] * other[e321] * -1.0));
    }
}
impl AntiWedge<AntiFlatPoint> for Dipole {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiFlatPoint) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group2()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiFlector> for Dipole {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiFlector) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group2()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiFlectorOnOrigin> for Dipole {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return Scalar::from_groups(/* scalar */ (self.group2()[3] * other.group0()[0] * -1.0));
    }
}
impl AntiWedge<AntiMotor> for Dipole {
    type Output = AntiPlane;
    fn anti_wedge(self, other: AntiMotor) -> Self::Output {
        return AntiPlane::from_groups(
            // e1, e2, e3, e5
            (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]])),
        );
    }
}
impl AntiWedge<AntiScalar> for Dipole {
    type Output = Dipole;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Dipole::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other[e12345])),
            // e23, e31, e12
            (self.group1() * Simd32x3::from(other[e12345])),
            // e15, e25, e35, e45
            (self.group2() * Simd32x4::from(other[e12345])),
        );
    }
}
impl AntiWedge<Circle> for Dipole {
    type Output = Scalar;
    fn anti_wedge(self, other: Circle) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group2()[3] * other.group0()[3])
                - (self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group1()[2] * other.group1()[2])
                - (self.group1()[1] * other.group1()[1])
                - (self.group1()[0] * other.group1()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl AntiWedge<CircleAligningOrigin> for Dipole {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group1()[2] * other.group1()[2])
                - (self.group1()[1] * other.group1()[1])
                - (self.group1()[0] * other.group1()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl AntiWedge<CircleAtInfinity> for Dipole {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleAtInfinity) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group2()[3] * other.group0()[0])
                - (self.group1()[2] * other.group0()[3])
                - (self.group1()[1] * other.group0()[2])
                - (self.group1()[0] * other.group0()[1])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<CircleAtOrigin> for Dipole {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleAtOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<CircleOnOrigin> for Dipole {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group1()[2] * other.group1()[2])
                - (self.group1()[0] * other.group1()[0])
                - (self.group1()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<CircleOrthogonalOrigin> for Dipole {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group2()[3] * other.group0()[3])
                - (self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<DualNum> for Dipole {
    type Output = Dipole;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        return Dipole::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other.group0()[1])),
            // e23, e31, e12
            (self.group1() * Simd32x3::from(other.group0()[1])),
            // e15, e25, e35, e45
            (self.group2() * Simd32x4::from(other.group0()[1])),
        );
    }
}
impl AntiWedge<Flector> for Dipole {
    type Output = RoundPoint;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            ((self.group0() * Simd32x3::from(other.group1()[3])) + (swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))),
            // e4, e5
            Simd32x2::from([
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ((self.group2()[3] * other.group1()[3]) + (self.group2()[2] * other.group1()[2]) + (self.group2()[0] * other.group1()[0]) + (self.group2()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl AntiWedge<FlectorAtInfinity> for Dipole {
    type Output = AntiPlane;
    fn anti_wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return AntiPlane::from_groups(
            // e1, e2, e3, e5
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]])),
        );
    }
}
impl AntiWedge<FlectorOnOrigin> for Dipole {
    type Output = RoundPoint;
    fn anti_wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group0()[3], other.group0()[1], other.group0()[2]])),
            // e4, e5
            Simd32x2::from([
                (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
                ((self.group2()[2] * other.group0()[3]) + (self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[2])),
            ]),
        );
    }
}
impl AntiWedge<Horizon> for Dipole {
    type Output = AntiPlane;
    fn anti_wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return AntiPlane::from_groups(
            // e1, e2, e3, e5
            (Simd32x4::from(other[e3215]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]])),
        );
    }
}
impl AntiWedge<Line> for Dipole {
    type Output = Scalar;
    fn anti_wedge(self, other: Line) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<LineAtInfinity> for Dipole {
    type Output = Scalar;
    fn anti_wedge(self, other: LineAtInfinity) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<LineOnOrigin> for Dipole {
    type Output = Scalar;
    fn anti_wedge(self, other: LineOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<Motor> for Dipole {
    type Output = MultiVector;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]])),
            // e15, e25, e35
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]])),
            // e23, e31, e12
            (self.group1() * Simd32x3::from(other.group0()[3])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<MotorAtInfinity> for Dipole {
    type Output = Scalar;
    fn anti_wedge(self, other: MotorAtInfinity) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<MotorOnOrigin> for Dipole {
    type Output = MultiVector;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]])),
            // e15, e25, e35
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]])),
            // e23, e31, e12
            (self.group1() * Simd32x3::from(other.group0()[3])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<MultiVector> for Dipole {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group2()[3] * other.group6()[0])
                    - (self.group2()[2] * other.group7()[2])
                    - (self.group2()[1] * other.group7()[1])
                    - (self.group2()[0] * other.group7()[0])
                    - (self.group1()[2] * other.group6()[3])
                    - (self.group1()[1] * other.group6()[2])
                    - (self.group1()[0] * other.group6()[1])
                    - (self.group0()[2] * other.group8()[2])
                    - (self.group0()[0] * other.group8()[0])
                    - (self.group0()[1] * other.group8()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other[e45]) + (self.group1()[1] * other.group9()[2])),
                ((self.group0()[1] * other[e45]) + (self.group1()[2] * other.group9()[0])),
                ((self.group0()[2] * other[e45]) + (self.group1()[0] * other.group9()[1])),
                (-(self.group2()[3] * other.group9()[3])
                    - (self.group0()[2] * other.group9()[2])
                    - (self.group0()[0] * other.group9()[0])
                    - (self.group0()[1] * other.group9()[1])),
            ]),
            // e5
            ((self.group2()[3] * other[e45]) + (self.group2()[2] * other.group9()[2]) + (self.group2()[0] * other.group9()[0]) + (self.group2()[1] * other.group9()[1])),
            // e41, e42, e43, e45
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]])),
            // e15, e25, e35
            (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]])),
            // e23, e31, e12
            (self.group1() * Simd32x3::from(other.group0()[1])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<NullCircleAtOrigin> for Dipole {
    type Output = Scalar;
    fn anti_wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<NullSphereAtOrigin> for Dipole {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ (self.group2() * Simd32x4::from(other[e1234]) * Simd32x4::from(-1.0)));
    }
}
impl AntiWedge<Plane> for Dipole {
    type Output = RoundPoint;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            ((self.group0() * Simd32x3::from(other.group0()[3])) + (swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))),
            // e4, e5
            Simd32x2::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ((self.group2()[3] * other.group0()[3]) + (self.group2()[2] * other.group0()[2]) + (self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl AntiWedge<PlaneOnOrigin> for Dipole {
    type Output = RoundPoint;
    fn anti_wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (swizzle!(self.group1(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1)),
            // e4, e5
            Simd32x2::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ((self.group2()[2] * other.group0()[2]) + (self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl AntiWedge<Sphere> for Dipole {
    type Output = RoundPoint;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            ((self.group0() * Simd32x3::from(other.group1()[1])) + (swizzle!(self.group1(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1))),
            // e4, e5
            Simd32x2::from([
                (-(self.group2()[3] * other.group1()[0])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
                ((self.group2()[3] * other.group1()[1]) + (self.group2()[2] * other.group0()[2]) + (self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl AntiWedge<SphereAtOrigin> for Dipole {
    type Output = RoundPoint;
    fn anti_wedge(self, other: SphereAtOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (self.group0() * Simd32x3::from(other.group0()[1])),
            // e4, e5
            (Simd32x2::from(self.group2()[3]) * other.group0() * Simd32x2::from([-1.0, 1.0])),
        );
    }
}
impl AntiWedge<SphereOnOrigin> for Dipole {
    type Output = RoundPoint;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]])),
            // e4, e5
            Simd32x2::from([
                (-(self.group2()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
                ((self.group2()[2] * other.group0()[2]) + (self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl InfixAntiWedge for DipoleAligningOrigin {}
impl AntiWedge<AntiDipoleOnOrigin> for DipoleAligningOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[3] * other.group0()[3]) - (self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiFlatOrigin> for DipoleAligningOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self.group1()[3] * other[e321] * -1.0));
    }
}
impl AntiWedge<AntiFlatPoint> for DipoleAligningOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiFlatPoint) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiFlector> for DipoleAligningOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiFlector) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiFlectorOnOrigin> for DipoleAligningOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return Scalar::from_groups(/* scalar */ (self.group1()[3] * other.group0()[0] * -1.0));
    }
}
impl AntiWedge<AntiMotor> for DipoleAligningOrigin {
    type Output = AntiPlane;
    fn anti_wedge(self, other: AntiMotor) -> Self::Output {
        return AntiPlane::from_groups(
            // e1, e2, e3, e5
            (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
        );
    }
}
impl AntiWedge<AntiScalar> for DipoleAligningOrigin {
    type Output = DipoleAligningOrigin;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return DipoleAligningOrigin::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other[e12345])),
            // e15, e25, e35, e45
            (self.group1() * Simd32x4::from(other[e12345])),
        );
    }
}
impl AntiWedge<Circle> for DipoleAligningOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: Circle) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[3] * other.group0()[3])
                - (self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl AntiWedge<CircleAligningOrigin> for DipoleAligningOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl AntiWedge<CircleAtInfinity> for DipoleAligningOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleAtInfinity) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[3] * other.group0()[0]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<CircleAtOrigin> for DipoleAligningOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleAtOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<CircleOnOrigin> for DipoleAligningOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<CircleOrthogonalOrigin> for DipoleAligningOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[3] * other.group0()[3])
                - (self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<DualNum> for DipoleAligningOrigin {
    type Output = DipoleAligningOrigin;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        return DipoleAligningOrigin::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other.group0()[1])),
            // e15, e25, e35, e45
            (self.group1() * Simd32x4::from(other.group0()[1])),
        );
    }
}
impl AntiWedge<Flector> for DipoleAligningOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (self.group0() * Simd32x3::from(other.group1()[3])),
            // e4, e5
            Simd32x2::from([
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ((self.group1()[3] * other.group1()[3]) + (self.group1()[2] * other.group1()[2]) + (self.group1()[0] * other.group1()[0]) + (self.group1()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl AntiWedge<FlectorAtInfinity> for DipoleAligningOrigin {
    type Output = AntiPlane;
    fn anti_wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return AntiPlane::from_groups(
            // e1, e2, e3, e5
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
        );
    }
}
impl AntiWedge<FlectorOnOrigin> for DipoleAligningOrigin {
    type Output = RoundPointAtOrigin;
    fn anti_wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return RoundPointAtOrigin::from_groups(/* e4, e5 */ Simd32x2::from([
            (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
            ((self.group1()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])),
        ]));
    }
}
impl AntiWedge<Horizon> for DipoleAligningOrigin {
    type Output = AntiPlane;
    fn anti_wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return AntiPlane::from_groups(
            // e1, e2, e3, e5
            (Simd32x4::from(other[e3215]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
        );
    }
}
impl AntiWedge<Line> for DipoleAligningOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: Line) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<LineAtInfinity> for DipoleAligningOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: LineAtInfinity) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<Motor> for DipoleAligningOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
            // e15, e25, e35
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<MotorAtInfinity> for DipoleAligningOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: MotorAtInfinity) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<MotorOnOrigin> for DipoleAligningOrigin {
    type Output = DipoleAligningOrigin;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        return DipoleAligningOrigin::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other.group0()[3])),
            // e15, e25, e35, e45
            (self.group1() * Simd32x4::from(other.group0()[3])),
        );
    }
}
impl AntiWedge<MultiVector> for DipoleAligningOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group1()[3] * other.group6()[0])
                    - (self.group1()[2] * other.group7()[2])
                    - (self.group1()[1] * other.group7()[1])
                    - (self.group1()[0] * other.group7()[0])
                    - (self.group0()[2] * other.group8()[2])
                    - (self.group0()[0] * other.group8()[0])
                    - (self.group0()[1] * other.group8()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other[e45]),
                (self.group0()[1] * other[e45]),
                (self.group0()[2] * other[e45]),
                (-(self.group1()[3] * other.group9()[3])
                    - (self.group0()[2] * other.group9()[2])
                    - (self.group0()[0] * other.group9()[0])
                    - (self.group0()[1] * other.group9()[1])),
            ]),
            // e5
            ((self.group1()[3] * other[e45]) + (self.group1()[2] * other.group9()[2]) + (self.group1()[0] * other.group9()[0]) + (self.group1()[1] * other.group9()[1])),
            // e41, e42, e43, e45
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
            // e15, e25, e35
            (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<NullCircleAtOrigin> for DipoleAligningOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<NullSphereAtOrigin> for DipoleAligningOrigin {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ (self.group1() * Simd32x4::from(other[e1234]) * Simd32x4::from(-1.0)));
    }
}
impl AntiWedge<Plane> for DipoleAligningOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (self.group0() * Simd32x3::from(other.group0()[3])),
            // e4, e5
            Simd32x2::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ((self.group1()[3] * other.group0()[3]) + (self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl AntiWedge<PlaneOnOrigin> for DipoleAligningOrigin {
    type Output = RoundPointAtOrigin;
    fn anti_wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return RoundPointAtOrigin::from_groups(/* e4, e5 */ Simd32x2::from([
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<Sphere> for DipoleAligningOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (self.group0() * Simd32x3::from(other.group1()[1])),
            // e4, e5
            Simd32x2::from([
                (-(self.group1()[3] * other.group1()[0])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
                ((self.group1()[3] * other.group1()[1]) + (self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl AntiWedge<SphereAtOrigin> for DipoleAligningOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: SphereAtOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (self.group0() * Simd32x3::from(other.group0()[1])),
            // e4, e5
            (Simd32x2::from(self.group1()[3]) * other.group0() * Simd32x2::from([-1.0, 1.0])),
        );
    }
}
impl AntiWedge<SphereOnOrigin> for DipoleAligningOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(-1.0)),
            // e4, e5
            Simd32x2::from([
                (-(self.group1()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl InfixAntiWedge for DipoleAtInfinity {}
impl AntiWedge<AntiDipoleOnOrigin> for DipoleAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[3] * other.group0()[3]) - (self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiFlatOrigin> for DipoleAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self.group1()[3] * other[e321] * -1.0));
    }
}
impl AntiWedge<AntiFlatPoint> for DipoleAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiFlatPoint) -> Self::Output {
        return Scalar::from_groups(/* scalar */ (self.group1()[3] * other.group0()[3] * -1.0));
    }
}
impl AntiWedge<AntiFlector> for DipoleAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiFlector) -> Self::Output {
        return Scalar::from_groups(/* scalar */ (self.group1()[3] * other.group0()[3] * -1.0));
    }
}
impl AntiWedge<AntiFlectorOnOrigin> for DipoleAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return Scalar::from_groups(/* scalar */ (self.group1()[3] * other.group0()[0] * -1.0));
    }
}
impl AntiWedge<AntiMotor> for DipoleAtInfinity {
    type Output = Infinity;
    fn anti_wedge(self, other: AntiMotor) -> Self::Output {
        return Infinity::from_groups(/* e5 */ (self.group1()[3] * other.group1()[3]));
    }
}
impl AntiWedge<AntiScalar> for DipoleAtInfinity {
    type Output = DipoleAtInfinity;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return DipoleAtInfinity::from_groups(
            // e23, e31, e12
            (self.group0() * Simd32x3::from(other[e12345])),
            // e15, e25, e35, e45
            (self.group1() * Simd32x4::from(other[e12345])),
        );
    }
}
impl AntiWedge<Circle> for DipoleAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: Circle) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[3] * other.group0()[3])
                - (self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<CircleAligningOrigin> for DipoleAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<CircleAtInfinity> for DipoleAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleAtInfinity) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[3] * other.group0()[0]) - (self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
        );
    }
}
impl AntiWedge<CircleAtOrigin> for DipoleAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleAtOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<CircleOnOrigin> for DipoleAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<CircleOrthogonalOrigin> for DipoleAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[3] * other.group0()[3]) - (self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<DualNum> for DipoleAtInfinity {
    type Output = DipoleAtInfinity;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        return DipoleAtInfinity::from_groups(
            // e23, e31, e12
            (self.group0() * Simd32x3::from(other.group0()[1])),
            // e15, e25, e35, e45
            (self.group1() * Simd32x4::from(other.group0()[1])),
        );
    }
}
impl AntiWedge<Flector> for DipoleAtInfinity {
    type Output = AntiPlane;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group0()[1] * other.group1()[2]),
            (self.group0()[2] * other.group1()[0]),
            (self.group0()[0] * other.group1()[1]),
            ((self.group1()[3] * other.group1()[3]) + (self.group1()[2] * other.group1()[2]) + (self.group1()[0] * other.group1()[0]) + (self.group1()[1] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<FlectorAtInfinity> for DipoleAtInfinity {
    type Output = Infinity;
    fn anti_wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return Infinity::from_groups(/* e5 */ (self.group1()[3] * other.group0()[3]));
    }
}
impl AntiWedge<FlectorOnOrigin> for DipoleAtInfinity {
    type Output = AntiPlane;
    fn anti_wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[1]),
            (self.group0()[0] * other.group0()[2]),
            ((self.group1()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])),
        ]));
    }
}
impl AntiWedge<Horizon> for DipoleAtInfinity {
    type Output = Infinity;
    fn anti_wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return Infinity::from_groups(/* e5 */ (self.group1()[3] * other[e3215]));
    }
}
impl AntiWedge<Line> for DipoleAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: Line) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<LineOnOrigin> for DipoleAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: LineOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<Motor> for DipoleAtInfinity {
    type Output = MultiVector;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group1()[3] * other.group0()[3])]),
            // e15, e25, e35
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])),
            // e23, e31, e12
            (self.group0() * Simd32x3::from(other.group0()[3])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<MotorOnOrigin> for DipoleAtInfinity {
    type Output = MultiVector;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group1()[3] * other.group0()[3])]),
            // e15, e25, e35
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])),
            // e23, e31, e12
            (self.group0() * Simd32x3::from(other.group0()[3])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<MultiVector> for DipoleAtInfinity {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group1()[3] * other.group6()[0])
                    - (self.group1()[2] * other.group7()[2])
                    - (self.group1()[1] * other.group7()[1])
                    - (self.group1()[0] * other.group7()[0])
                    - (self.group0()[2] * other.group6()[3])
                    - (self.group0()[0] * other.group6()[1])
                    - (self.group0()[1] * other.group6()[2])),
                0.0,
            ]),
            // e1, e2, e3, e4
            (swizzle!(other.group9(), 2, 0, 1, 3)
                * Simd32x4::from([self.group0()[1], self.group0()[2], self.group0()[0], self.group1()[3]])
                * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e5
            ((self.group1()[3] * other[e45]) + (self.group1()[2] * other.group9()[2]) + (self.group1()[0] * other.group9()[0]) + (self.group1()[1] * other.group9()[1])),
            // e41, e42, e43, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group1()[3] * other.group0()[1])]),
            // e15, e25, e35
            (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])),
            // e23, e31, e12
            (self.group0() * Simd32x3::from(other.group0()[1])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<NullCircleAtOrigin> for DipoleAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<NullSphereAtOrigin> for DipoleAtInfinity {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ (self.group1() * Simd32x4::from(other[e1234]) * Simd32x4::from(-1.0)));
    }
}
impl AntiWedge<Plane> for DipoleAtInfinity {
    type Output = AntiPlane;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group0()[1] * other.group0()[2]),
            (self.group0()[2] * other.group0()[0]),
            (self.group0()[0] * other.group0()[1]),
            ((self.group1()[3] * other.group0()[3]) + (self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<PlaneOnOrigin> for DipoleAtInfinity {
    type Output = AntiPlane;
    fn anti_wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group0()[1] * other.group0()[2]),
            (self.group0()[2] * other.group0()[0]),
            (self.group0()[0] * other.group0()[1]),
            ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<Sphere> for DipoleAtInfinity {
    type Output = RoundPoint;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1)),
            // e4, e5
            Simd32x2::from([
                (self.group1()[3] * other.group1()[0] * -1.0),
                ((self.group1()[3] * other.group1()[1]) + (self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl AntiWedge<SphereAtOrigin> for DipoleAtInfinity {
    type Output = RoundPoint;
    fn anti_wedge(self, other: SphereAtOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(-1.0)),
            // e4, e5
            (Simd32x2::from(self.group1()[3]) * other.group0() * Simd32x2::from([-1.0, 1.0])),
        );
    }
}
impl AntiWedge<SphereOnOrigin> for DipoleAtInfinity {
    type Output = RoundPoint;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]])),
            // e4, e5
            Simd32x2::from([
                (self.group1()[3] * other.group0()[3] * -1.0),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl InfixAntiWedge for DipoleAtOrigin {}
impl AntiWedge<AntiDipoleOnOrigin> for DipoleAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiFlatPoint> for DipoleAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiFlatPoint) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiFlector> for DipoleAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiFlector) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiMotor> for DipoleAtOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiMotor) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (self.group0() * Simd32x3::from(other.group1()[3])));
    }
}
impl AntiWedge<AntiScalar> for DipoleAtOrigin {
    type Output = DipoleAtOrigin;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return DipoleAtOrigin::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other[e12345])),
            // e15, e25, e35
            (self.group1() * Simd32x3::from(other[e12345])),
        );
    }
}
impl AntiWedge<Circle> for DipoleAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: Circle) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl AntiWedge<CircleAligningOrigin> for DipoleAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl AntiWedge<CircleAtInfinity> for DipoleAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleAtInfinity) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<CircleAtOrigin> for DipoleAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleAtOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<CircleOnOrigin> for DipoleAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<CircleOrthogonalOrigin> for DipoleAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<DualNum> for DipoleAtOrigin {
    type Output = DipoleAtOrigin;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        return DipoleAtOrigin::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other.group0()[1])),
            // e15, e25, e35
            (self.group1() * Simd32x3::from(other.group0()[1])),
        );
    }
}
impl AntiWedge<Flector> for DipoleAtOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (self.group0() * Simd32x3::from(other.group1()[3])),
            // e4, e5
            Simd32x2::from([
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ((self.group1()[2] * other.group1()[2]) + (self.group1()[0] * other.group1()[0]) + (self.group1()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl AntiWedge<FlectorAtInfinity> for DipoleAtOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (self.group0() * Simd32x3::from(other.group0()[3])));
    }
}
impl AntiWedge<FlectorOnOrigin> for DipoleAtOrigin {
    type Output = RoundPointAtOrigin;
    fn anti_wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return RoundPointAtOrigin::from_groups(/* e4, e5 */ Simd32x2::from([
            (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
            ((self.group1()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])),
        ]));
    }
}
impl AntiWedge<Horizon> for DipoleAtOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (self.group0() * Simd32x3::from(other[e3215])));
    }
}
impl AntiWedge<Line> for DipoleAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: Line) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<LineAtInfinity> for DipoleAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: LineAtInfinity) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<Motor> for DipoleAtOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e15, e25, e35
            (self.group1() * Simd32x3::from(other.group0()[3])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<MotorAtInfinity> for DipoleAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: MotorAtInfinity) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<MotorOnOrigin> for DipoleAtOrigin {
    type Output = DipoleAtOrigin;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        return DipoleAtOrigin::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other.group0()[3])),
            // e15, e25, e35
            (self.group1() * Simd32x3::from(other.group0()[3])),
        );
    }
}
impl AntiWedge<MultiVector> for DipoleAtOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group1()[2] * other.group7()[2])
                    - (self.group1()[1] * other.group7()[1])
                    - (self.group1()[0] * other.group7()[0])
                    - (self.group0()[2] * other.group8()[2])
                    - (self.group0()[0] * other.group8()[0])
                    - (self.group0()[1] * other.group8()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other[e45]),
                (self.group0()[1] * other[e45]),
                (self.group0()[2] * other[e45]),
                (-(self.group0()[2] * other.group9()[2]) - (self.group0()[0] * other.group9()[0]) - (self.group0()[1] * other.group9()[1])),
            ]),
            // e5
            ((self.group1()[2] * other.group9()[2]) + (self.group1()[0] * other.group9()[0]) + (self.group1()[1] * other.group9()[1])),
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[2] * other.group0()[1]),
                0.0,
            ]),
            // e15, e25, e35
            (self.group1() * Simd32x3::from(other.group0()[1])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<NullCircleAtOrigin> for DipoleAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<NullSphereAtOrigin> for DipoleAtOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (self.group1() * Simd32x3::from(other[e1234]) * Simd32x3::from(-1.0)));
    }
}
impl AntiWedge<Plane> for DipoleAtOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (self.group0() * Simd32x3::from(other.group0()[3])),
            // e4, e5
            Simd32x2::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl AntiWedge<PlaneOnOrigin> for DipoleAtOrigin {
    type Output = RoundPointAtOrigin;
    fn anti_wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return RoundPointAtOrigin::from_groups(/* e4, e5 */ Simd32x2::from([
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<Sphere> for DipoleAtOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (self.group0() * Simd32x3::from(other.group1()[1])),
            // e4, e5
            Simd32x2::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl AntiWedge<SphereAtOrigin> for DipoleAtOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: SphereAtOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (self.group0() * Simd32x3::from(other.group0()[1])));
    }
}
impl AntiWedge<SphereOnOrigin> for DipoleAtOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (self.group1() * Simd32x3::from(other.group0()[3]) * Simd32x3::from(-1.0)),
            // e4, e5
            Simd32x2::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl InfixAntiWedge for DipoleOnOrigin {}
impl AntiWedge<AntiDipoleOnOrigin> for DipoleOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return Scalar::from_groups(/* scalar */ (self.group0()[3] * other.group0()[3] * -1.0));
    }
}
impl AntiWedge<AntiFlatOrigin> for DipoleOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self.group0()[3] * other[e321] * -1.0));
    }
}
impl AntiWedge<AntiFlatPoint> for DipoleOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiFlatPoint) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiFlector> for DipoleOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiFlector) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiFlectorOnOrigin> for DipoleOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return Scalar::from_groups(/* scalar */ (self.group0()[3] * other.group0()[0] * -1.0));
    }
}
impl AntiWedge<AntiMotor> for DipoleOnOrigin {
    type Output = AntiPlane;
    fn anti_wedge(self, other: AntiMotor) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ (self.group0() * Simd32x4::from(other.group1()[3])));
    }
}
impl AntiWedge<AntiScalar> for DipoleOnOrigin {
    type Output = DipoleOnOrigin;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return DipoleOnOrigin::from_groups(/* e41, e42, e43, e45 */ (self.group0() * Simd32x4::from(other[e12345])));
    }
}
impl AntiWedge<Circle> for DipoleOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: Circle) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl AntiWedge<CircleAligningOrigin> for DipoleOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl AntiWedge<CircleAtInfinity> for DipoleOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleAtInfinity) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[3] * other.group0()[0]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<CircleAtOrigin> for DipoleOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleAtOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<CircleOrthogonalOrigin> for DipoleOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<DualNum> for DipoleOnOrigin {
    type Output = DipoleOnOrigin;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        return DipoleOnOrigin::from_groups(/* e41, e42, e43, e45 */ (self.group0() * Simd32x4::from(other.group0()[1])));
    }
}
impl AntiWedge<Flector> for DipoleOnOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e4, e5
            Simd32x2::from([
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                (self.group0()[3] * other.group1()[3]),
            ]),
        );
    }
}
impl AntiWedge<FlectorAtInfinity> for DipoleOnOrigin {
    type Output = AntiPlane;
    fn anti_wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ (self.group0() * Simd32x4::from(other.group0()[3])));
    }
}
impl AntiWedge<FlectorOnOrigin> for DipoleOnOrigin {
    type Output = Origin;
    fn anti_wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return Origin::from_groups(
            // e4
            (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
        );
    }
}
impl AntiWedge<Horizon> for DipoleOnOrigin {
    type Output = AntiPlane;
    fn anti_wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ (self.group0() * Simd32x4::from(other[e3215])));
    }
}
impl AntiWedge<Line> for DipoleOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: Line) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<LineAtInfinity> for DipoleOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: LineAtInfinity) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<Motor> for DipoleOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<MotorAtInfinity> for DipoleOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: MotorAtInfinity) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<MotorOnOrigin> for DipoleOnOrigin {
    type Output = DipoleOnOrigin;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        return DipoleOnOrigin::from_groups(/* e41, e42, e43, e45 */ (self.group0() * Simd32x4::from(other.group0()[3])));
    }
}
impl AntiWedge<MultiVector> for DipoleOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[3] * other.group6()[0])
                    - (self.group0()[2] * other.group8()[2])
                    - (self.group0()[0] * other.group8()[0])
                    - (self.group0()[1] * other.group8()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other[e45]),
                (self.group0()[1] * other[e45]),
                (self.group0()[2] * other[e45]),
                (-(self.group0()[3] * other.group9()[3])
                    - (self.group0()[2] * other.group9()[2])
                    - (self.group0()[0] * other.group9()[0])
                    - (self.group0()[1] * other.group9()[1])),
            ]),
            // e5
            (self.group0()[3] * other[e45]),
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from(other.group0()[1])),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<NullSphereAtOrigin> for DipoleOnOrigin {
    type Output = Origin;
    fn anti_wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return Origin::from_groups(/* e4 */ (self.group0()[3] * other[e1234] * -1.0));
    }
}
impl AntiWedge<Plane> for DipoleOnOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e4, e5
            Simd32x2::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                (self.group0()[3] * other.group0()[3]),
            ]),
        );
    }
}
impl AntiWedge<PlaneOnOrigin> for DipoleOnOrigin {
    type Output = Origin;
    fn anti_wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return Origin::from_groups(
            // e4
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<Sphere> for DipoleOnOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (Simd32x3::from(other.group1()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e4, e5
            Simd32x2::from([
                (-(self.group0()[3] * other.group1()[0])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
                (self.group0()[3] * other.group1()[1]),
            ]),
        );
    }
}
impl AntiWedge<SphereAtOrigin> for DipoleOnOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: SphereAtOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e4, e5
            (Simd32x2::from(self.group0()[3]) * other.group0() * Simd32x2::from([-1.0, 1.0])),
        );
    }
}
impl AntiWedge<SphereOnOrigin> for DipoleOnOrigin {
    type Output = Origin;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        return Origin::from_groups(
            // e4
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl InfixAntiWedge for DipoleOrthogonalOrigin {}
impl AntiWedge<AntiDipoleOnOrigin> for DipoleOrthogonalOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiFlatPoint> for DipoleOrthogonalOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiFlatPoint) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiFlector> for DipoleOrthogonalOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiFlector) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiMotor> for DipoleOrthogonalOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiMotor) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (self.group0() * Simd32x3::from(other.group1()[3])));
    }
}
impl AntiWedge<AntiScalar> for DipoleOrthogonalOrigin {
    type Output = DipoleOrthogonalOrigin;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return DipoleOrthogonalOrigin::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other[e12345])),
            // e23, e31, e12
            (self.group1() * Simd32x3::from(other[e12345])),
            // e15, e25, e35
            (self.group2() * Simd32x3::from(other[e12345])),
        );
    }
}
impl AntiWedge<Circle> for DipoleOrthogonalOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: Circle) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group1()[2] * other.group1()[2])
                - (self.group1()[1] * other.group1()[1])
                - (self.group1()[0] * other.group1()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl AntiWedge<CircleAligningOrigin> for DipoleOrthogonalOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group1()[2] * other.group1()[2])
                - (self.group1()[1] * other.group1()[1])
                - (self.group1()[0] * other.group1()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl AntiWedge<CircleAtInfinity> for DipoleOrthogonalOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleAtInfinity) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[3])
                - (self.group1()[1] * other.group0()[2])
                - (self.group1()[0] * other.group0()[1])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<CircleAtOrigin> for DipoleOrthogonalOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleAtOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<CircleOnOrigin> for DipoleOrthogonalOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group1()[2] * other.group1()[2])
                - (self.group1()[0] * other.group1()[0])
                - (self.group1()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<CircleOrthogonalOrigin> for DipoleOrthogonalOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<DualNum> for DipoleOrthogonalOrigin {
    type Output = DipoleOrthogonalOrigin;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        return DipoleOrthogonalOrigin::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other.group0()[1])),
            // e23, e31, e12
            (self.group1() * Simd32x3::from(other.group0()[1])),
            // e15, e25, e35
            (self.group2() * Simd32x3::from(other.group0()[1])),
        );
    }
}
impl AntiWedge<Flector> for DipoleOrthogonalOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            ((self.group0() * Simd32x3::from(other.group1()[3])) + (swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))),
            // e4, e5
            Simd32x2::from([
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ((self.group2()[2] * other.group1()[2]) + (self.group2()[0] * other.group1()[0]) + (self.group2()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl AntiWedge<FlectorAtInfinity> for DipoleOrthogonalOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (self.group0() * Simd32x3::from(other.group0()[3])));
    }
}
impl AntiWedge<FlectorOnOrigin> for DipoleOrthogonalOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group0()[3], other.group0()[1], other.group0()[2]])),
            // e4, e5
            Simd32x2::from([
                (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
                ((self.group2()[2] * other.group0()[3]) + (self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[2])),
            ]),
        );
    }
}
impl AntiWedge<Horizon> for DipoleOrthogonalOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (self.group0() * Simd32x3::from(other[e3215])));
    }
}
impl AntiWedge<Line> for DipoleOrthogonalOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: Line) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<LineAtInfinity> for DipoleOrthogonalOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: LineAtInfinity) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<LineOnOrigin> for DipoleOrthogonalOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: LineOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<Motor> for DipoleOrthogonalOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e15, e25, e35
            (self.group2() * Simd32x3::from(other.group0()[3])),
            // e23, e31, e12
            (self.group1() * Simd32x3::from(other.group0()[3])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<MotorAtInfinity> for DipoleOrthogonalOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: MotorAtInfinity) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<MotorOnOrigin> for DipoleOrthogonalOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e15, e25, e35
            (self.group2() * Simd32x3::from(other.group0()[3])),
            // e23, e31, e12
            (self.group1() * Simd32x3::from(other.group0()[3])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<MultiVector> for DipoleOrthogonalOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group2()[2] * other.group7()[2])
                    - (self.group2()[1] * other.group7()[1])
                    - (self.group2()[0] * other.group7()[0])
                    - (self.group1()[2] * other.group6()[3])
                    - (self.group1()[1] * other.group6()[2])
                    - (self.group1()[0] * other.group6()[1])
                    - (self.group0()[2] * other.group8()[2])
                    - (self.group0()[0] * other.group8()[0])
                    - (self.group0()[1] * other.group8()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other[e45]) + (self.group1()[1] * other.group9()[2])),
                ((self.group0()[1] * other[e45]) + (self.group1()[2] * other.group9()[0])),
                ((self.group0()[2] * other[e45]) + (self.group1()[0] * other.group9()[1])),
                (-(self.group0()[2] * other.group9()[2]) - (self.group0()[0] * other.group9()[0]) - (self.group0()[1] * other.group9()[1])),
            ]),
            // e5
            ((self.group2()[2] * other.group9()[2]) + (self.group2()[0] * other.group9()[0]) + (self.group2()[1] * other.group9()[1])),
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[2] * other.group0()[1]),
                0.0,
            ]),
            // e15, e25, e35
            (self.group2() * Simd32x3::from(other.group0()[1])),
            // e23, e31, e12
            (self.group1() * Simd32x3::from(other.group0()[1])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<NullCircleAtOrigin> for DipoleOrthogonalOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<NullSphereAtOrigin> for DipoleOrthogonalOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (self.group2() * Simd32x3::from(other[e1234]) * Simd32x3::from(-1.0)));
    }
}
impl AntiWedge<Plane> for DipoleOrthogonalOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            ((self.group0() * Simd32x3::from(other.group0()[3])) + (swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))),
            // e4, e5
            Simd32x2::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ((self.group2()[2] * other.group0()[2]) + (self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl AntiWedge<PlaneOnOrigin> for DipoleOrthogonalOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (swizzle!(self.group1(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1)),
            // e4, e5
            Simd32x2::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ((self.group2()[2] * other.group0()[2]) + (self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl AntiWedge<Sphere> for DipoleOrthogonalOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            ((self.group0() * Simd32x3::from(other.group1()[1])) + (swizzle!(self.group1(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1))),
            // e4, e5
            Simd32x2::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ((self.group2()[2] * other.group0()[2]) + (self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl AntiWedge<SphereAtOrigin> for DipoleOrthogonalOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: SphereAtOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (self.group0() * Simd32x3::from(other.group0()[1])));
    }
}
impl AntiWedge<SphereOnOrigin> for DipoleOrthogonalOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]])),
            // e4, e5
            Simd32x2::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ((self.group2()[2] * other.group0()[2]) + (self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl InfixAntiWedge for DualNum {}
impl AntiWedge<AntiCircleOnOrigin> for DualNum {
    type Output = AntiCircleOnOrigin;
    fn anti_wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return AntiCircleOnOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[1]) * other.group0()),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[1]) * other.group1()),
        );
    }
}
impl AntiWedge<AntiDipoleOnOrigin> for DualNum {
    type Output = AntiDipoleOnOrigin;
    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiDipoleOnOrigin::from_groups(/* e423, e431, e412, e321 */ (Simd32x4::from(self.group0()[1]) * other.group0()));
    }
}
impl AntiWedge<AntiFlatOrigin> for DualNum {
    type Output = AntiFlatOrigin;
    fn anti_wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiFlatOrigin::from_groups(/* e321 */ (self.group0()[1] * other[e321]));
    }
}
impl AntiWedge<AntiFlatPoint> for DualNum {
    type Output = AntiFlatPoint;
    fn anti_wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ (Simd32x4::from(self.group0()[1]) * other.group0()));
    }
}
impl AntiWedge<AntiFlector> for DualNum {
    type Output = AntiFlector;
    fn anti_wedge(self, other: AntiFlector) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(self.group0()[1]) * other.group0()),
            // e1, e2, e3, e5
            (Simd32x4::from(self.group0()[1]) * other.group1()),
        );
    }
}
impl AntiWedge<AntiFlectorOnOrigin> for DualNum {
    type Output = AntiFlectorOnOrigin;
    fn anti_wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return AntiFlectorOnOrigin::from_groups(/* e321, e1, e2, e3 */ (Simd32x4::from(self.group0()[1]) * other.group0()));
    }
}
impl AntiWedge<AntiLine> for DualNum {
    type Output = AntiLine;
    fn anti_wedge(self, other: AntiLine) -> Self::Output {
        return AntiLine::from_groups(
            // e23, e31, e12
            (Simd32x3::from(self.group0()[1]) * other.group0()),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[1]) * other.group1()),
        );
    }
}
impl AntiWedge<AntiLineOnOrigin> for DualNum {
    type Output = AntiLineOnOrigin;
    fn anti_wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return AntiLineOnOrigin::from_groups(/* e23, e31, e12 */ (Simd32x3::from(self.group0()[1]) * other.group0()));
    }
}
impl AntiWedge<AntiMotor> for DualNum {
    type Output = AntiMotor;
    fn anti_wedge(self, other: AntiMotor) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(self.group0()[1]) * other.group0()),
            // e15, e25, e35, e3215
            (Simd32x4::from(self.group0()[1]) * other.group1()),
        );
    }
}
impl AntiWedge<AntiMotorOnOrigin> for DualNum {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ (Simd32x4::from(self.group0()[1]) * other.group0()));
    }
}
impl AntiWedge<AntiPlane> for DualNum {
    type Output = AntiPlane;
    fn anti_wedge(self, other: AntiPlane) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ (Simd32x4::from(self.group0()[1]) * other.group0()));
    }
}
impl AntiWedge<AntiPlaneOnOrigin> for DualNum {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (Simd32x3::from(self.group0()[1]) * other.group0()));
    }
}
impl AntiWedge<AntiScalar> for DualNum {
    type Output = DualNum;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return DualNum::from_groups(/* scalar, e12345 */ (self.group0() * Simd32x2::from(other[e12345])));
    }
}
impl AntiWedge<AntiSphereOnOrigin> for DualNum {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ (Simd32x4::from(self.group0()[1]) * other.group0()));
    }
}
impl AntiWedge<Circle> for DualNum {
    type Output = Circle;
    fn anti_wedge(self, other: Circle) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412, e321
            (Simd32x4::from(self.group0()[1]) * other.group0()),
            // e415, e425, e435
            (Simd32x3::from(self.group0()[1]) * other.group1()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * other.group2()),
        );
    }
}
impl AntiWedge<CircleAligningOrigin> for DualNum {
    type Output = CircleAligningOrigin;
    fn anti_wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[1]) * other.group0()),
            // e415, e425, e435
            (Simd32x3::from(self.group0()[1]) * other.group1()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * other.group2()),
        );
    }
}
impl AntiWedge<CircleAtInfinity> for DualNum {
    type Output = CircleAtInfinity;
    fn anti_wedge(self, other: CircleAtInfinity) -> Self::Output {
        return CircleAtInfinity::from_groups(
            // e321, e415, e425, e435
            (Simd32x4::from(self.group0()[1]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * other.group1()),
        );
    }
}
impl AntiWedge<CircleAtOrigin> for DualNum {
    type Output = CircleAtOrigin;
    fn anti_wedge(self, other: CircleAtOrigin) -> Self::Output {
        return CircleAtOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[1]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * other.group1()),
        );
    }
}
impl AntiWedge<CircleOnOrigin> for DualNum {
    type Output = CircleOnOrigin;
    fn anti_wedge(self, other: CircleOnOrigin) -> Self::Output {
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[1]) * other.group0()),
            // e415, e425, e435
            (Simd32x3::from(self.group0()[1]) * other.group1()),
        );
    }
}
impl AntiWedge<CircleOrthogonalOrigin> for DualNum {
    type Output = CircleOrthogonalOrigin;
    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return CircleOrthogonalOrigin::from_groups(
            // e423, e431, e412, e321
            (Simd32x4::from(self.group0()[1]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * other.group1()),
        );
    }
}
impl AntiWedge<Dipole> for DualNum {
    type Output = Dipole;
    fn anti_wedge(self, other: Dipole) -> Self::Output {
        return Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[1]) * other.group0()),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[1]) * other.group1()),
            // e15, e25, e35, e45
            (Simd32x4::from(self.group0()[1]) * other.group2()),
        );
    }
}
impl AntiWedge<DipoleAligningOrigin> for DualNum {
    type Output = DipoleAligningOrigin;
    fn anti_wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return DipoleAligningOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[1]) * other.group0()),
            // e15, e25, e35, e45
            (Simd32x4::from(self.group0()[1]) * other.group1()),
        );
    }
}
impl AntiWedge<DipoleAtInfinity> for DualNum {
    type Output = DipoleAtInfinity;
    fn anti_wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return DipoleAtInfinity::from_groups(
            // e23, e31, e12
            (Simd32x3::from(self.group0()[1]) * other.group0()),
            // e15, e25, e35, e45
            (Simd32x4::from(self.group0()[1]) * other.group1()),
        );
    }
}
impl AntiWedge<DipoleAtOrigin> for DualNum {
    type Output = DipoleAtOrigin;
    fn anti_wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return DipoleAtOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[1]) * other.group0()),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[1]) * other.group1()),
        );
    }
}
impl AntiWedge<DipoleOnOrigin> for DualNum {
    type Output = DipoleOnOrigin;
    fn anti_wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return DipoleOnOrigin::from_groups(/* e41, e42, e43, e45 */ (Simd32x4::from(self.group0()[1]) * other.group0()));
    }
}
impl AntiWedge<DipoleOrthogonalOrigin> for DualNum {
    type Output = DipoleOrthogonalOrigin;
    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return DipoleOrthogonalOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[1]) * other.group0()),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[1]) * other.group1()),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[1]) * other.group2()),
        );
    }
}
impl AntiWedge<DualNum> for DualNum {
    type Output = DualNum;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        return DualNum::from_groups(/* scalar, e12345 */ Simd32x2::from([
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
            (self.group0()[1] * other.group0()[1]),
        ]));
    }
}
impl AntiWedge<FlatOrigin> for DualNum {
    type Output = FlatOrigin;
    fn anti_wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return FlatOrigin::from_groups(/* e45 */ (self.group0()[1] * other[e45]));
    }
}
impl AntiWedge<FlatPoint> for DualNum {
    type Output = FlatPoint;
    fn anti_wedge(self, other: FlatPoint) -> Self::Output {
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ (Simd32x4::from(self.group0()[1]) * other.group0()));
    }
}
impl AntiWedge<FlatPointAtInfinity> for DualNum {
    type Output = FlatPointAtInfinity;
    fn anti_wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return FlatPointAtInfinity::from_groups(/* e15, e25, e35 */ (Simd32x3::from(self.group0()[1]) * other.group0()));
    }
}
impl AntiWedge<Flector> for DualNum {
    type Output = Flector;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self.group0()[1]) * other.group0()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[1]) * other.group1()),
        );
    }
}
impl AntiWedge<FlectorAtInfinity> for DualNum {
    type Output = FlectorAtInfinity;
    fn anti_wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ (Simd32x4::from(self.group0()[1]) * other.group0()));
    }
}
impl AntiWedge<FlectorOnOrigin> for DualNum {
    type Output = FlectorOnOrigin;
    fn anti_wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ (Simd32x4::from(self.group0()[1]) * other.group0()));
    }
}
impl AntiWedge<Horizon> for DualNum {
    type Output = Horizon;
    fn anti_wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self.group0()[1] * other[e3215]));
    }
}
impl AntiWedge<Infinity> for DualNum {
    type Output = Infinity;
    fn anti_wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return Infinity::from_groups(/* e5 */ (self.group0()[1] * other[e5]));
    }
}
impl AntiWedge<Line> for DualNum {
    type Output = Line;
    fn anti_wedge(self, other: Line) -> Self::Output {
        return Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self.group0()[1]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * other.group1()),
        );
    }
}
impl AntiWedge<LineAtInfinity> for DualNum {
    type Output = LineAtInfinity;
    fn anti_wedge(self, other: LineAtInfinity) -> Self::Output {
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ (Simd32x3::from(self.group0()[1]) * other.group0()));
    }
}
impl AntiWedge<LineOnOrigin> for DualNum {
    type Output = LineOnOrigin;
    fn anti_wedge(self, other: LineOnOrigin) -> Self::Output {
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (Simd32x3::from(self.group0()[1]) * other.group0()));
    }
}
impl AntiWedge<Motor> for DualNum {
    type Output = MultiVector;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            (self.group0() * Simd32x2::from(other.group0()[3])),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            (self.group0()[1] * other.group1()[3]),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<MotorAtInfinity> for DualNum {
    type Output = MotorAtInfinity;
    fn anti_wedge(self, other: MotorAtInfinity) -> Self::Output {
        return MotorAtInfinity::from_groups(/* e235, e315, e125, e5 */ (Simd32x4::from(self.group0()[1]) * other.group0()));
    }
}
impl AntiWedge<MotorOnOrigin> for DualNum {
    type Output = MultiVector;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            (self.group0() * Simd32x2::from(other.group0()[3])),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<MultiVector> for DualNum {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self.group0()[1] * other.group0()[1]),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[1]) * other.group1()),
            // e5
            (self.group0()[1] * other[e1]),
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[1]) * other.group3()),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[1]) * other.group4()),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[1]) * other.group5()),
            // e321, e415, e425, e435
            (Simd32x4::from(self.group0()[1]) * other.group6()),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[1]) * other.group7()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * other.group8()),
            // e4235, e4315, e4125, e1234
            (Simd32x4::from(self.group0()[1]) * other.group9()),
            // e3215
            (self.group0()[1] * other[e45]),
        );
    }
}
impl AntiWedge<NullCircleAtOrigin> for DualNum {
    type Output = NullCircleAtOrigin;
    fn anti_wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return NullCircleAtOrigin::from_groups(/* e423, e431, e412 */ (Simd32x3::from(self.group0()[1]) * other.group0()));
    }
}
impl AntiWedge<NullDipoleAtOrigin> for DualNum {
    type Output = NullDipoleAtOrigin;
    fn anti_wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return NullDipoleAtOrigin::from_groups(/* e41, e42, e43 */ (Simd32x3::from(self.group0()[1]) * other.group0()));
    }
}
impl AntiWedge<NullSphereAtOrigin> for DualNum {
    type Output = NullSphereAtOrigin;
    fn anti_wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self.group0()[1] * other[e1234]));
    }
}
impl AntiWedge<Origin> for DualNum {
    type Output = Origin;
    fn anti_wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return Origin::from_groups(/* e4 */ (self.group0()[1] * other[e4]));
    }
}
impl AntiWedge<Plane> for DualNum {
    type Output = Plane;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (Simd32x4::from(self.group0()[1]) * other.group0()));
    }
}
impl AntiWedge<PlaneOnOrigin> for DualNum {
    type Output = PlaneOnOrigin;
    fn anti_wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group0()[1]) * other.group0()));
    }
}
impl AntiWedge<RoundPoint> for DualNum {
    type Output = RoundPoint;
    fn anti_wedge(self, other: RoundPoint) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (Simd32x3::from(self.group0()[1]) * other.group0()),
            // e4, e5
            (Simd32x2::from(self.group0()[1]) * other.group1()),
        );
    }
}
impl AntiWedge<RoundPointAtOrigin> for DualNum {
    type Output = RoundPointAtOrigin;
    fn anti_wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return RoundPointAtOrigin::from_groups(/* e4, e5 */ (Simd32x2::from(self.group0()[1]) * other.group0()));
    }
}
impl AntiWedge<Scalar> for DualNum {
    type Output = Scalar;
    fn anti_wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self.group0()[1] * other[scalar]));
    }
}
impl AntiWedge<Sphere> for DualNum {
    type Output = Sphere;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from(self.group0()[1]) * other.group0()),
            // e1234, e3215
            (Simd32x2::from(self.group0()[1]) * other.group1()),
        );
    }
}
impl AntiWedge<SphereAtOrigin> for DualNum {
    type Output = SphereAtOrigin;
    fn anti_wedge(self, other: SphereAtOrigin) -> Self::Output {
        return SphereAtOrigin::from_groups(/* e1234, e3215 */ (Simd32x2::from(self.group0()[1]) * other.group0()));
    }
}
impl AntiWedge<SphereOnOrigin> for DualNum {
    type Output = SphereOnOrigin;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ (Simd32x4::from(self.group0()[1]) * other.group0()));
    }
}
impl InfixAntiWedge for FlatOrigin {}
impl AntiWedge<AntiDipoleOnOrigin> for FlatOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self[e45] * other.group0()[3] * -1.0));
    }
}
impl AntiWedge<AntiFlatOrigin> for FlatOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self[e45] * other[e321] * -1.0));
    }
}
impl AntiWedge<AntiFlatPoint> for FlatOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self[e45] * other.group0()[3] * -1.0));
    }
}
impl AntiWedge<AntiFlector> for FlatOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self[e45] * other.group0()[3] * -1.0));
    }
}
impl AntiWedge<AntiFlectorOnOrigin> for FlatOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self[e45] * other.group0()[0] * -1.0));
    }
}
impl AntiWedge<AntiMotor> for FlatOrigin {
    type Output = Infinity;
    fn anti_wedge(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return Infinity::from_groups(/* e5 */ (self[e45] * other.group1()[3]));
    }
}
impl AntiWedge<AntiScalar> for FlatOrigin {
    type Output = FlatOrigin;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return FlatOrigin::from_groups(/* e45 */ (self[e45] * other[e12345]));
    }
}
impl AntiWedge<Circle> for FlatOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self[e45] * other.group0()[3] * -1.0));
    }
}
impl AntiWedge<CircleAtInfinity> for FlatOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleAtInfinity) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self[e45] * other.group0()[0] * -1.0));
    }
}
impl AntiWedge<CircleOrthogonalOrigin> for FlatOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self[e45] * other.group0()[3] * -1.0));
    }
}
impl AntiWedge<DualNum> for FlatOrigin {
    type Output = FlatOrigin;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return FlatOrigin::from_groups(/* e45 */ (self[e45] * other.group0()[1]));
    }
}
impl AntiWedge<Flector> for FlatOrigin {
    type Output = Infinity;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return Infinity::from_groups(/* e5 */ (self[e45] * other.group1()[3]));
    }
}
impl AntiWedge<FlectorAtInfinity> for FlatOrigin {
    type Output = Infinity;
    fn anti_wedge(self, other: FlectorAtInfinity) -> Self::Output {
        use crate::elements::*;
        return Infinity::from_groups(/* e5 */ (self[e45] * other.group0()[3]));
    }
}
impl AntiWedge<Horizon> for FlatOrigin {
    type Output = Infinity;
    fn anti_wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return Infinity::from_groups(/* e5 */ (self[e45] * other[e3215]));
    }
}
impl AntiWedge<Motor> for FlatOrigin {
    type Output = FlatOrigin;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return FlatOrigin::from_groups(/* e45 */ (self[e45] * other.group0()[3]));
    }
}
impl AntiWedge<MotorOnOrigin> for FlatOrigin {
    type Output = FlatOrigin;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return FlatOrigin::from_groups(/* e45 */ (self[e45] * other.group0()[3]));
    }
}
impl AntiWedge<MultiVector> for FlatOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(self[e45] * other.group6()[0] * -1.0), 0.0]),
            // e1, e2, e3, e4
            Simd32x4::from([0.0, 0.0, 0.0, (self[e45] * other.group9()[3] * -1.0)]),
            // e5
            (self[e45] * other[e45]),
            // e41, e42, e43, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self[e45] * other.group0()[1])]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<NullSphereAtOrigin> for FlatOrigin {
    type Output = Origin;
    fn anti_wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return Origin::from_groups(/* e4 */ (self[e45] * other[e1234] * -1.0));
    }
}
impl AntiWedge<Plane> for FlatOrigin {
    type Output = Infinity;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return Infinity::from_groups(/* e5 */ (self[e45] * other.group0()[3]));
    }
}
impl AntiWedge<Sphere> for FlatOrigin {
    type Output = RoundPointAtOrigin;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return RoundPointAtOrigin::from_groups(/* e4, e5 */ (Simd32x2::from(self[e45]) * other.group1() * Simd32x2::from([-1.0, 1.0])));
    }
}
impl AntiWedge<SphereAtOrigin> for FlatOrigin {
    type Output = RoundPointAtOrigin;
    fn anti_wedge(self, other: SphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return RoundPointAtOrigin::from_groups(/* e4, e5 */ (Simd32x2::from(self[e45]) * other.group0() * Simd32x2::from([-1.0, 1.0])));
    }
}
impl AntiWedge<SphereOnOrigin> for FlatOrigin {
    type Output = Origin;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        use crate::elements::*;
        return Origin::from_groups(/* e4 */ (self[e45] * other.group0()[3] * -1.0));
    }
}
impl InfixAntiWedge for FlatPoint {}
impl AntiWedge<AntiDipoleOnOrigin> for FlatPoint {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiFlatOrigin> for FlatPoint {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self.group0()[3] * other[e321] * -1.0));
    }
}
impl AntiWedge<AntiFlatPoint> for FlatPoint {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiFlatPoint) -> Self::Output {
        return Scalar::from_groups(/* scalar */ (self.group0()[3] * other.group0()[3] * -1.0));
    }
}
impl AntiWedge<AntiFlector> for FlatPoint {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiFlector) -> Self::Output {
        return Scalar::from_groups(/* scalar */ (self.group0()[3] * other.group0()[3] * -1.0));
    }
}
impl AntiWedge<AntiFlectorOnOrigin> for FlatPoint {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return Scalar::from_groups(/* scalar */ (self.group0()[3] * other.group0()[0] * -1.0));
    }
}
impl AntiWedge<AntiMotor> for FlatPoint {
    type Output = Infinity;
    fn anti_wedge(self, other: AntiMotor) -> Self::Output {
        return Infinity::from_groups(/* e5 */ (self.group0()[3] * other.group1()[3]));
    }
}
impl AntiWedge<AntiScalar> for FlatPoint {
    type Output = FlatPoint;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ (self.group0() * Simd32x4::from(other[e12345])));
    }
}
impl AntiWedge<Circle> for FlatPoint {
    type Output = Scalar;
    fn anti_wedge(self, other: Circle) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<CircleAligningOrigin> for FlatPoint {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<CircleAtInfinity> for FlatPoint {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleAtInfinity) -> Self::Output {
        return Scalar::from_groups(/* scalar */ (self.group0()[3] * other.group0()[0] * -1.0));
    }
}
impl AntiWedge<CircleAtOrigin> for FlatPoint {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleAtOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<CircleOnOrigin> for FlatPoint {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<CircleOrthogonalOrigin> for FlatPoint {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<DualNum> for FlatPoint {
    type Output = FlatPoint;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ (self.group0() * Simd32x4::from(other.group0()[1])));
    }
}
impl AntiWedge<Flector> for FlatPoint {
    type Output = Infinity;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        return Infinity::from_groups(
            // e5
            ((self.group0()[3] * other.group1()[3]) + (self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<FlectorAtInfinity> for FlatPoint {
    type Output = Infinity;
    fn anti_wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return Infinity::from_groups(/* e5 */ (self.group0()[3] * other.group0()[3]));
    }
}
impl AntiWedge<FlectorOnOrigin> for FlatPoint {
    type Output = Infinity;
    fn anti_wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return Infinity::from_groups(
            // e5
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
        );
    }
}
impl AntiWedge<Horizon> for FlatPoint {
    type Output = Infinity;
    fn anti_wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return Infinity::from_groups(/* e5 */ (self.group0()[3] * other[e3215]));
    }
}
impl AntiWedge<Motor> for FlatPoint {
    type Output = FlatPoint;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ (self.group0() * Simd32x4::from(other.group0()[3])));
    }
}
impl AntiWedge<MotorOnOrigin> for FlatPoint {
    type Output = FlatPoint;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ (self.group0() * Simd32x4::from(other.group0()[3])));
    }
}
impl AntiWedge<MultiVector> for FlatPoint {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[3] * other.group6()[0])
                    - (self.group0()[2] * other.group7()[2])
                    - (self.group0()[0] * other.group7()[0])
                    - (self.group0()[1] * other.group7()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            (self.group0() * Simd32x4::from(other.group9()[3]) * Simd32x4::from(-1.0)),
            // e5
            ((self.group0()[3] * other[e45]) + (self.group0()[2] * other.group9()[2]) + (self.group0()[0] * other.group9()[0]) + (self.group0()[1] * other.group9()[1])),
            // e41, e42, e43, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[1])]),
            // e15, e25, e35
            (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<NullCircleAtOrigin> for FlatPoint {
    type Output = Scalar;
    fn anti_wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<NullSphereAtOrigin> for FlatPoint {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ (self.group0() * Simd32x4::from(other[e1234]) * Simd32x4::from(-1.0)));
    }
}
impl AntiWedge<Plane> for FlatPoint {
    type Output = Infinity;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        return Infinity::from_groups(
            // e5
            ((self.group0()[3] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<PlaneOnOrigin> for FlatPoint {
    type Output = Infinity;
    fn anti_wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return Infinity::from_groups(
            // e5
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<Sphere> for FlatPoint {
    type Output = RoundPoint;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (Simd32x3::from(other.group1()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
            // e4, e5
            Simd32x2::from([
                (self.group0()[3] * other.group1()[0] * -1.0),
                ((self.group0()[3] * other.group1()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl AntiWedge<SphereAtOrigin> for FlatPoint {
    type Output = RoundPoint;
    fn anti_wedge(self, other: SphereAtOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
            // e4, e5
            (Simd32x2::from(self.group0()[3]) * other.group0() * Simd32x2::from([-1.0, 1.0])),
        );
    }
}
impl AntiWedge<SphereOnOrigin> for FlatPoint {
    type Output = RoundPoint;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
            // e4, e5
            Simd32x2::from([
                (self.group0()[3] * other.group0()[3] * -1.0),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl InfixAntiWedge for FlatPointAtInfinity {}
impl AntiWedge<AntiDipoleOnOrigin> for FlatPointAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiScalar> for FlatPointAtInfinity {
    type Output = FlatPointAtInfinity;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return FlatPointAtInfinity::from_groups(/* e15, e25, e35 */ (self.group0() * Simd32x3::from(other[e12345])));
    }
}
impl AntiWedge<Circle> for FlatPointAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: Circle) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<CircleAligningOrigin> for FlatPointAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<CircleAtOrigin> for FlatPointAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleAtOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<CircleOnOrigin> for FlatPointAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<CircleOrthogonalOrigin> for FlatPointAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<DualNum> for FlatPointAtInfinity {
    type Output = FlatPointAtInfinity;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        return FlatPointAtInfinity::from_groups(/* e15, e25, e35 */ (self.group0() * Simd32x3::from(other.group0()[1])));
    }
}
impl AntiWedge<Flector> for FlatPointAtInfinity {
    type Output = Infinity;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        return Infinity::from_groups(
            // e5
            ((self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<FlectorOnOrigin> for FlatPointAtInfinity {
    type Output = Infinity;
    fn anti_wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return Infinity::from_groups(
            // e5
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
        );
    }
}
impl AntiWedge<Motor> for FlatPointAtInfinity {
    type Output = FlatPointAtInfinity;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        return FlatPointAtInfinity::from_groups(/* e15, e25, e35 */ (self.group0() * Simd32x3::from(other.group0()[3])));
    }
}
impl AntiWedge<MotorOnOrigin> for FlatPointAtInfinity {
    type Output = FlatPointAtInfinity;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        return FlatPointAtInfinity::from_groups(/* e15, e25, e35 */ (self.group0() * Simd32x3::from(other.group0()[3])));
    }
}
impl AntiWedge<MultiVector> for FlatPointAtInfinity {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[2] * other.group7()[2]) - (self.group0()[0] * other.group7()[0]) - (self.group0()[1] * other.group7()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group9()[3] * -1.0),
                (self.group0()[1] * other.group9()[3] * -1.0),
                (self.group0()[2] * other.group9()[3] * -1.0),
                0.0,
            ]),
            // e5
            ((self.group0()[2] * other.group9()[2]) + (self.group0()[0] * other.group9()[0]) + (self.group0()[1] * other.group9()[1])),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            (self.group0() * Simd32x3::from(other.group0()[1])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<NullCircleAtOrigin> for FlatPointAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<NullSphereAtOrigin> for FlatPointAtInfinity {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (self.group0() * Simd32x3::from(other[e1234]) * Simd32x3::from(-1.0)));
    }
}
impl AntiWedge<Plane> for FlatPointAtInfinity {
    type Output = Infinity;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        return Infinity::from_groups(
            // e5
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<PlaneOnOrigin> for FlatPointAtInfinity {
    type Output = Infinity;
    fn anti_wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return Infinity::from_groups(
            // e5
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<Sphere> for FlatPointAtInfinity {
    type Output = AntiPlane;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group0()[0] * other.group1()[0] * -1.0),
            (self.group0()[1] * other.group1()[0] * -1.0),
            (self.group0()[2] * other.group1()[0] * -1.0),
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<SphereAtOrigin> for FlatPointAtInfinity {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: SphereAtOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (self.group0() * Simd32x3::from(other.group0()[0]) * Simd32x3::from(-1.0)));
    }
}
impl AntiWedge<SphereOnOrigin> for FlatPointAtInfinity {
    type Output = AntiPlane;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3] * -1.0),
            (self.group0()[1] * other.group0()[3] * -1.0),
            (self.group0()[2] * other.group0()[3] * -1.0),
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl InfixAntiWedge for Flector {}
impl AntiWedge<AntiCircleOnOrigin> for Flector {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from([
            (self.group1()[1] * other.group1()[2]),
            (self.group1()[2] * other.group1()[0]),
            (self.group1()[0] * other.group1()[1]),
            ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<AntiDipoleOnOrigin> for Flector {
    type Output = MultiVector;
    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group1()[2] * other.group0()[1] * -1.0),
                (self.group1()[0] * other.group0()[2] * -1.0),
                (self.group1()[1] * other.group0()[0] * -1.0),
                0.0,
            ]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            (Simd32x3::from([(self.group1()[3] * other.group0()[0]), (self.group1()[1] * other.group0()[3]), (self.group1()[3] * other.group0()[2])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<AntiFlatOrigin> for Flector {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiMotorOnOrigin::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(other[e321]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl AntiWedge<AntiFlatPoint> for Flector {
    type Output = AntiMotor;
    fn anti_wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]) * Simd32x4::from(-1.0)),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group1()[2] * other.group0()[1]),
                (self.group1()[0] * other.group0()[2]),
                (self.group1()[1] * other.group0()[0]),
                0.0,
            ]),
        );
    }
}
impl AntiWedge<AntiFlector> for Flector {
    type Output = AntiMotor;
    fn anti_wedge(self, other: AntiFlector) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3] * -1.0),
                (self.group1()[1] * other.group0()[3] * -1.0),
                (self.group1()[2] * other.group0()[3] * -1.0),
                ((self.group1()[2] * other.group1()[2]) + (self.group1()[0] * other.group1()[0]) + (self.group1()[1] * other.group1()[1])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group1()[2] * other.group0()[1]),
                (self.group1()[0] * other.group0()[2]),
                (self.group1()[1] * other.group0()[0]),
                0.0,
            ]),
        );
    }
}
impl AntiWedge<AntiFlectorOnOrigin> for Flector {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ Simd32x4::from([
            (self.group1()[0] * other.group0()[0] * -1.0),
            (self.group1()[1] * other.group0()[0] * -1.0),
            (self.group1()[2] * other.group0()[0] * -1.0),
            ((self.group1()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])),
        ]));
    }
}
impl AntiWedge<AntiLine> for Flector {
    type Output = AntiPlane;
    fn anti_wedge(self, other: AntiLine) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group1()[1] * other.group0()[2]),
            (self.group1()[2] * other.group0()[0]),
            (self.group1()[0] * other.group0()[1]),
            (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<AntiLineOnOrigin> for Flector {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(
            // e1, e2, e3
            (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]])),
        );
    }
}
impl AntiWedge<AntiMotor> for Flector {
    type Output = AntiFlector;
    fn anti_wedge(self, other: AntiMotor) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self.group1()[0] * other.group1()[3]),
                (self.group1()[1] * other.group1()[3]),
                (self.group1()[2] * other.group1()[3]),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group1()[1] * other.group0()[2]),
                (self.group1()[2] * other.group0()[0]),
                (self.group1()[0] * other.group0()[1]),
                (self.group0()[3] * other.group1()[3]),
            ]),
        );
    }
}
impl AntiWedge<AntiMotorOnOrigin> for Flector {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ Simd32x3::from([
            (self.group1()[1] * other.group0()[2]),
            (self.group1()[2] * other.group0()[0]),
            (self.group1()[0] * other.group0()[1]),
        ]));
    }
}
impl AntiWedge<AntiPlane> for Flector {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiPlane) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiPlaneOnOrigin> for Flector {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiScalar> for Flector {
    type Output = Flector;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            (self.group0() * Simd32x4::from(other[e12345])),
            // e4235, e4315, e4125, e3215
            (self.group1() * Simd32x4::from(other[e12345])),
        );
    }
}
impl AntiWedge<AntiSphereOnOrigin> for Flector {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            ((self.group1()[3] * other.group0()[3]) + (self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<Circle> for Flector {
    type Output = MultiVector;
    fn anti_wedge(self, other: Circle) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group1()[2] * other.group0()[1] * -1.0),
                (self.group1()[0] * other.group0()[2] * -1.0),
                (self.group1()[1] * other.group0()[0] * -1.0),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
            // e15, e25, e35
            ((swizzle!(other.group2(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]])) + (Simd32x3::from(self.group1()[3]) * other.group1())),
            // e23, e31, e12
            (Simd32x3::from([(self.group1()[3] * other.group0()[0]), (self.group1()[1] * other.group0()[3]), (self.group1()[3] * other.group0()[2])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<CircleAligningOrigin> for Flector {
    type Output = MultiVector;
    fn anti_wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group1()[2] * other.group0()[1] * -1.0),
                (self.group1()[0] * other.group0()[2] * -1.0),
                (self.group1()[1] * other.group0()[0] * -1.0),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
            // e15, e25, e35
            ((swizzle!(other.group2(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]])) + (Simd32x3::from(self.group1()[3]) * other.group1())),
            // e23, e31, e12
            (Simd32x3::from(self.group1()[3]) * other.group0()),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<CircleAtInfinity> for Flector {
    type Output = MultiVector;
    fn anti_wedge(self, other: CircleAtInfinity) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(self.group0()[3] * other.group0()[0] * -1.0), 0.0]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group1()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[2])),
            ]),
            // e15, e25, e35
            ((swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))
                + (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[3]]))),
            // e23, e31, e12
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(-1.0)),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<CircleAtOrigin> for Flector {
    type Output = MultiVector;
    fn anti_wedge(self, other: CircleAtOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group1()[2] * other.group0()[1] * -1.0),
                (self.group1()[0] * other.group0()[2] * -1.0),
                (self.group1()[1] * other.group0()[0] * -1.0),
                0.0,
            ]),
            // e15, e25, e35
            (swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]])),
            // e23, e31, e12
            (Simd32x3::from(self.group1()[3]) * other.group0()),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<CircleOnOrigin> for Flector {
    type Output = MultiVector;
    fn anti_wedge(self, other: CircleOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group1()[2] * other.group0()[1] * -1.0),
                (self.group1()[0] * other.group0()[2] * -1.0),
                (self.group1()[1] * other.group0()[0] * -1.0),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
            // e15, e25, e35
            (Simd32x3::from(self.group1()[3]) * other.group1()),
            // e23, e31, e12
            (Simd32x3::from(self.group1()[3]) * other.group0()),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<CircleOrthogonalOrigin> for Flector {
    type Output = MultiVector;
    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group1()[2] * other.group0()[1] * -1.0),
                (self.group1()[0] * other.group0()[2] * -1.0),
                (self.group1()[1] * other.group0()[0] * -1.0),
                0.0,
            ]),
            // e15, e25, e35
            (swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]])),
            // e23, e31, e12
            (Simd32x3::from([(self.group1()[3] * other.group0()[0]), (self.group1()[1] * other.group0()[3]), (self.group1()[3] * other.group0()[2])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<Dipole> for Flector {
    type Output = RoundPoint;
    fn anti_wedge(self, other: Dipole) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (swizzle!(other.group1(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]])),
            // e4, e5
            Simd32x2::from([
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                (-(self.group1()[3] * other.group2()[3])
                    - (self.group1()[2] * other.group2()[2])
                    - (self.group1()[0] * other.group2()[0])
                    - (self.group1()[1] * other.group2()[1])),
            ]),
        );
    }
}
impl AntiWedge<DipoleAligningOrigin> for Flector {
    type Output = RoundPoint;
    fn anti_wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (Simd32x3::from(self.group1()[3]) * other.group0() * Simd32x3::from(-1.0)),
            // e4, e5
            Simd32x2::from([
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                (-(self.group1()[3] * other.group1()[3])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl AntiWedge<DipoleAtInfinity> for Flector {
    type Output = AntiPlane;
    fn anti_wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group1()[1] * other.group0()[2]),
            (self.group1()[2] * other.group0()[0]),
            (self.group1()[0] * other.group0()[1]),
            (-(self.group1()[3] * other.group1()[3]) - (self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<DipoleAtOrigin> for Flector {
    type Output = RoundPoint;
    fn anti_wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (Simd32x3::from(self.group1()[3]) * other.group0() * Simd32x3::from(-1.0)),
            // e4, e5
            Simd32x2::from([
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl AntiWedge<DipoleOnOrigin> for Flector {
    type Output = RoundPoint;
    fn anti_wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
            // e4, e5
            Simd32x2::from([
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                (self.group1()[3] * other.group0()[3] * -1.0),
            ]),
        );
    }
}
impl AntiWedge<DipoleOrthogonalOrigin> for Flector {
    type Output = RoundPoint;
    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (swizzle!(other.group1(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]])),
            // e4, e5
            Simd32x2::from([
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                (-(self.group1()[2] * other.group2()[2]) - (self.group1()[0] * other.group2()[0]) - (self.group1()[1] * other.group2()[1])),
            ]),
        );
    }
}
impl AntiWedge<DualNum> for Flector {
    type Output = Flector;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (self.group0() * Simd32x4::from(other.group0()[1])),
            // e4235, e4315, e4125, e3215
            (self.group1() * Simd32x4::from(other.group0()[1])),
        );
    }
}
impl AntiWedge<FlatOrigin> for Flector {
    type Output = Infinity;
    fn anti_wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return Infinity::from_groups(/* e5 */ (self.group1()[3] * other[e45] * -1.0));
    }
}
impl AntiWedge<FlatPoint> for Flector {
    type Output = Infinity;
    fn anti_wedge(self, other: FlatPoint) -> Self::Output {
        return Infinity::from_groups(
            // e5
            (-(self.group1()[3] * other.group0()[3]) - (self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<FlatPointAtInfinity> for Flector {
    type Output = Infinity;
    fn anti_wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return Infinity::from_groups(
            // e5
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<Flector> for Flector {
    type Output = Motor;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group1()[1] * other.group1()[2] * -1.0),
                (self.group1()[2] * other.group1()[0] * -1.0),
                (self.group1()[0] * other.group1()[1] * -1.0),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group1()[3]),
                (self.group1()[3] * other.group1()[1] * -1.0),
                (self.group1()[2] * other.group1()[3]),
                ((self.group0()[3] * other.group1()[3]) + (self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl AntiWedge<FlectorAtInfinity> for Flector {
    type Output = MotorAtInfinity;
    fn anti_wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return MotorAtInfinity::from_groups(
            // e235, e315, e125, e5
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]])),
        );
    }
}
impl AntiWedge<FlectorOnOrigin> for Flector {
    type Output = Motor;
    fn anti_wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group1()[1] * other.group0()[3] * -1.0),
                (self.group1()[2] * other.group0()[1] * -1.0),
                (self.group1()[0] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[3] * other.group0()[1] * -1.0),
                (self.group1()[3] * other.group0()[2] * -1.0),
                (self.group1()[3] * other.group0()[3] * -1.0),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
            ]),
        );
    }
}
impl AntiWedge<Horizon> for Flector {
    type Output = MotorAtInfinity;
    fn anti_wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return MotorAtInfinity::from_groups(
            // e235, e315, e125, e5
            (Simd32x4::from(other[e3215]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]])),
        );
    }
}
impl AntiWedge<Line> for Flector {
    type Output = FlatPoint;
    fn anti_wedge(self, other: Line) -> Self::Output {
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ Simd32x4::from([
            ((self.group1()[2] * other.group1()[1]) + (self.group1()[3] * other.group0()[0])),
            ((self.group1()[0] * other.group1()[2]) + (self.group1()[3] * other.group0()[1])),
            ((self.group1()[1] * other.group1()[0]) + (self.group1()[3] * other.group0()[2])),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<LineAtInfinity> for Flector {
    type Output = FlatPointAtInfinity;
    fn anti_wedge(self, other: LineAtInfinity) -> Self::Output {
        return FlatPointAtInfinity::from_groups(
            // e15, e25, e35
            (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]])),
        );
    }
}
impl AntiWedge<LineOnOrigin> for Flector {
    type Output = FlatPoint;
    fn anti_wedge(self, other: LineOnOrigin) -> Self::Output {
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ Simd32x4::from([
            (self.group1()[3] * other.group0()[0]),
            (self.group1()[3] * other.group0()[1]),
            (self.group1()[3] * other.group0()[2]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<Motor> for Flector {
    type Output = Flector;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group1()[3] * other.group0()[0]) + (self.group0()[0] * other.group0()[3]) + (self.group1()[2] * other.group1()[1])),
                ((self.group1()[3] * other.group0()[1]) + (self.group0()[1] * other.group0()[3]) + (self.group1()[0] * other.group1()[2])),
                ((self.group1()[3] * other.group0()[2]) + (self.group0()[2] * other.group0()[3]) + (self.group1()[1] * other.group1()[0])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (self.group1() * Simd32x4::from(other.group0()[3])),
        );
    }
}
impl AntiWedge<MotorAtInfinity> for Flector {
    type Output = FlatPointAtInfinity;
    fn anti_wedge(self, other: MotorAtInfinity) -> Self::Output {
        return FlatPointAtInfinity::from_groups(/* e15, e25, e35 */ Simd32x3::from([
            (self.group1()[2] * other.group0()[1]),
            (self.group1()[0] * other.group0()[2]),
            (self.group1()[1] * other.group0()[0]),
        ]));
    }
}
impl AntiWedge<MotorOnOrigin> for Flector {
    type Output = Flector;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (self.group1() * Simd32x4::from(other.group0()[3])),
        );
    }
}
impl AntiWedge<MultiVector> for Flector {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group1()[3] * other.group1()[3]) + (self.group1()[2] * other.group1()[2]) + (self.group1()[0] * other.group1()[0]) + (self.group1()[1] * other.group1()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group1()[1] * other.group5()[2]),
                (self.group1()[2] * other.group5()[0]),
                (self.group1()[0] * other.group5()[1]),
                ((self.group1()[2] * other.group3()[2]) + (self.group1()[0] * other.group3()[0]) + (self.group1()[1] * other.group3()[1])),
            ]),
            // e5
            ((self.group0()[3] * other[e45]) + (self.group0()[2] * other.group9()[2]) + (self.group0()[0] * other.group9()[0]) + (self.group0()[1] * other.group9()[1])),
            // e41, e42, e43, e45
            (Simd32x4::from([
                (self.group1()[2] * other.group7()[1]),
                (self.group1()[0] * other.group7()[2]),
                (self.group1()[1] * other.group7()[0]),
                (self.group0()[3] * other.group0()[1]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35
            ((Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group6()[1], other.group6()[2], other.group6()[3]]))
                + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (swizzle!(other.group8(), 1, 2, 0) * Simd32x3::from([self.group1()[2], self.group1()[0], self.group1()[1]]))),
            // e23, e31, e12
            (Simd32x3::from([(self.group1()[3] * other.group7()[0]), (self.group1()[1] * other.group6()[0]), (self.group1()[3] * other.group7()[2])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e321, e415, e425, e435
            (swizzle!(self.group1(), 3, 1, 2, 0) * swizzle!(other.group9(), 3, 2, 0, 1) * Simd32x4::from(-1.0)),
            // e423, e431, e412
            (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from([(self.group1()[0] * other[e45]), (self.group1()[3] * other.group9()[1]), (self.group1()[2] * other[e45])]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group1()[0] * other.group0()[1]),
                (self.group1()[1] * other.group0()[1]),
                (self.group1()[2] * other.group0()[1]),
                0.0,
            ]),
            // e3215
            (self.group1()[3] * other.group0()[1]),
        );
    }
}
impl AntiWedge<NullCircleAtOrigin> for Flector {
    type Output = MultiVector;
    fn anti_wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group1()[2] * other.group0()[1] * -1.0),
                (self.group1()[0] * other.group0()[2] * -1.0),
                (self.group1()[1] * other.group0()[0] * -1.0),
                0.0,
            ]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            (Simd32x3::from(self.group1()[3]) * other.group0()),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<NullDipoleAtOrigin> for Flector {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from([
            (self.group1()[3] * other.group0()[0] * -1.0),
            (self.group1()[3] * other.group0()[1] * -1.0),
            (self.group1()[3] * other.group0()[2] * -1.0),
            ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<NullSphereAtOrigin> for Flector {
    type Output = MultiVector;
    fn anti_wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            (self.group0() * Simd32x4::from(other[e1234]) * Simd32x4::from(-1.0)),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([(self.group1()[3] * other[e1234] * -1.0), 0.0, 0.0, 0.0]),
            // e423, e431, e412
            (Simd32x3::from(other[e1234]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<Origin> for Flector {
    type Output = Scalar;
    fn anti_wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self.group1()[3] * other[e4]));
    }
}
impl AntiWedge<Plane> for Flector {
    type Output = Motor;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group1()[1] * other.group0()[2] * -1.0),
                (self.group1()[2] * other.group0()[0] * -1.0),
                (self.group1()[0] * other.group0()[1] * -1.0),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[3] * other.group0()[1] * -1.0),
                (self.group1()[2] * other.group0()[3]),
                ((self.group0()[3] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl AntiWedge<PlaneOnOrigin> for Flector {
    type Output = Motor;
    fn anti_wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group1()[1] * other.group0()[2] * -1.0),
                (self.group1()[2] * other.group0()[0] * -1.0),
                (self.group1()[0] * other.group0()[1] * -1.0),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0] * -1.0),
                (self.group1()[3] * other.group0()[1] * -1.0),
                (self.group1()[3] * other.group0()[2] * -1.0),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl AntiWedge<RoundPoint> for Flector {
    type Output = Scalar;
    fn anti_wedge(self, other: RoundPoint) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            ((self.group1()[3] * other.group1()[0]) + (self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<RoundPointAtOrigin> for Flector {
    type Output = Scalar;
    fn anti_wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return Scalar::from_groups(/* scalar */ (self.group1()[3] * other.group0()[0]));
    }
}
impl AntiWedge<Sphere> for Flector {
    type Output = MultiVector;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            (self.group0() * Simd32x4::from(other.group1()[0]) * Simd32x4::from(-1.0)),
            // e5
            ((self.group0()[3] * other.group1()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            (swizzle!(self.group1(), 3, 1, 2, 0) * Simd32x4::from([other.group1()[0], other.group0()[2], other.group0()[0], other.group0()[1]]) * Simd32x4::from(-1.0)),
            // e423, e431, e412
            (Simd32x3::from(other.group1()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from([(self.group1()[0] * other.group1()[1]), (self.group1()[3] * other.group0()[1]), (self.group1()[2] * other.group1()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<SphereAtOrigin> for Flector {
    type Output = MultiVector;
    fn anti_wedge(self, other: SphereAtOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            (self.group0() * Simd32x4::from(other.group0()[0]) * Simd32x4::from(-1.0)),
            // e5
            (self.group0()[3] * other.group0()[1]),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([(self.group1()[3] * other.group0()[0] * -1.0), 0.0, 0.0, 0.0]),
            // e423, e431, e412
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<SphereOnOrigin> for Flector {
    type Output = MultiVector;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            (self.group0() * Simd32x4::from(other.group0()[3]) * Simd32x4::from(-1.0)),
            // e5
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            (swizzle!(self.group1(), 3, 1, 2, 0) * swizzle!(other.group0(), 3, 2, 0, 1) * Simd32x4::from(-1.0)),
            // e423, e431, e412
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl InfixAntiWedge for FlectorAtInfinity {}
impl AntiWedge<AntiCircleOnOrigin> for FlectorAtInfinity {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (Simd32x3::from(self.group0()[3]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl AntiWedge<AntiDipoleOnOrigin> for FlectorAtInfinity {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<AntiScalar> for FlectorAtInfinity {
    type Output = FlectorAtInfinity;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ (self.group0() * Simd32x4::from(other[e12345])));
    }
}
impl AntiWedge<AntiSphereOnOrigin> for FlectorAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return Scalar::from_groups(/* scalar */ (self.group0()[3] * other.group0()[3]));
    }
}
impl AntiWedge<Circle> for FlectorAtInfinity {
    type Output = AntiMotor;
    fn anti_wedge(self, other: Circle) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl AntiWedge<CircleAligningOrigin> for FlectorAtInfinity {
    type Output = AntiMotor;
    fn anti_wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl AntiWedge<CircleAtInfinity> for FlectorAtInfinity {
    type Output = FlatPointAtInfinity;
    fn anti_wedge(self, other: CircleAtInfinity) -> Self::Output {
        return FlatPointAtInfinity::from_groups(
            // e15, e25, e35
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[3]])),
        );
    }
}
impl AntiWedge<CircleAtOrigin> for FlectorAtInfinity {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: CircleAtOrigin) -> Self::Output {
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<CircleOnOrigin> for FlectorAtInfinity {
    type Output = AntiMotor;
    fn anti_wedge(self, other: CircleOnOrigin) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl AntiWedge<CircleOrthogonalOrigin> for FlectorAtInfinity {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<Dipole> for FlectorAtInfinity {
    type Output = AntiPlane;
    fn anti_wedge(self, other: Dipole) -> Self::Output {
        return AntiPlane::from_groups(
            // e1, e2, e3, e5
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl AntiWedge<DipoleAligningOrigin> for FlectorAtInfinity {
    type Output = AntiPlane;
    fn anti_wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return AntiPlane::from_groups(
            // e1, e2, e3, e5
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl AntiWedge<DipoleAtInfinity> for FlectorAtInfinity {
    type Output = Infinity;
    fn anti_wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return Infinity::from_groups(/* e5 */ (self.group0()[3] * other.group1()[3] * -1.0));
    }
}
impl AntiWedge<DipoleAtOrigin> for FlectorAtInfinity {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (Simd32x3::from(self.group0()[3]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl AntiWedge<DipoleOnOrigin> for FlectorAtInfinity {
    type Output = AntiPlane;
    fn anti_wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ (Simd32x4::from(self.group0()[3]) * other.group0() * Simd32x4::from(-1.0)));
    }
}
impl AntiWedge<DipoleOrthogonalOrigin> for FlectorAtInfinity {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (Simd32x3::from(self.group0()[3]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl AntiWedge<DualNum> for FlectorAtInfinity {
    type Output = FlectorAtInfinity;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ (self.group0() * Simd32x4::from(other.group0()[1])));
    }
}
impl AntiWedge<FlatOrigin> for FlectorAtInfinity {
    type Output = Infinity;
    fn anti_wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return Infinity::from_groups(/* e5 */ (self.group0()[3] * other[e45] * -1.0));
    }
}
impl AntiWedge<FlatPoint> for FlectorAtInfinity {
    type Output = Infinity;
    fn anti_wedge(self, other: FlatPoint) -> Self::Output {
        return Infinity::from_groups(/* e5 */ (self.group0()[3] * other.group0()[3] * -1.0));
    }
}
impl AntiWedge<Flector> for FlectorAtInfinity {
    type Output = MotorAtInfinity;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        return MotorAtInfinity::from_groups(/* e235, e315, e125, e5 */ Simd32x4::from([
            (self.group0()[3] * other.group1()[0] * -1.0),
            (self.group0()[3] * other.group1()[1] * -1.0),
            (self.group0()[3] * other.group1()[2] * -1.0),
            ((self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<FlectorOnOrigin> for FlectorAtInfinity {
    type Output = MotorAtInfinity;
    fn anti_wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return MotorAtInfinity::from_groups(/* e235, e315, e125, e5 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[1] * -1.0),
            (self.group0()[3] * other.group0()[2] * -1.0),
            (self.group0()[3] * other.group0()[3] * -1.0),
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
        ]));
    }
}
impl AntiWedge<Line> for FlectorAtInfinity {
    type Output = FlatPointAtInfinity;
    fn anti_wedge(self, other: Line) -> Self::Output {
        return FlatPointAtInfinity::from_groups(/* e15, e25, e35 */ (Simd32x3::from(self.group0()[3]) * other.group0()));
    }
}
impl AntiWedge<LineOnOrigin> for FlectorAtInfinity {
    type Output = FlatPointAtInfinity;
    fn anti_wedge(self, other: LineOnOrigin) -> Self::Output {
        return FlatPointAtInfinity::from_groups(/* e15, e25, e35 */ (Simd32x3::from(self.group0()[3]) * other.group0()));
    }
}
impl AntiWedge<Motor> for FlectorAtInfinity {
    type Output = FlectorAtInfinity;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ Simd32x4::from([
            ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
            ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
            (self.group0()[3] * other.group0()[3]),
        ]));
    }
}
impl AntiWedge<MotorOnOrigin> for FlectorAtInfinity {
    type Output = FlectorAtInfinity;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ Simd32x4::from([
            ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
            ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
            (self.group0()[3] * other.group0()[3]),
        ]));
    }
}
impl AntiWedge<MultiVector> for FlectorAtInfinity {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(self.group0()[3] * other.group1()[3]), 0.0]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (-(self.group0()[0] * other.group9()[3]) - (self.group0()[3] * other.group3()[0])),
                (-(self.group0()[1] * other.group9()[3]) - (self.group0()[3] * other.group3()[1])),
                (-(self.group0()[2] * other.group9()[3]) - (self.group0()[3] * other.group3()[2])),
                0.0,
            ]),
            // e5
            ((self.group0()[2] * other.group9()[2]) + (self.group0()[0] * other.group9()[0]) + (self.group0()[1] * other.group9()[1])),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            ((Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group6()[1], other.group6()[2], other.group6()[3]]))),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[3]) * other.group7()),
            // e321, e415, e425, e435
            Simd32x4::from([(self.group0()[3] * other.group9()[3] * -1.0), 0.0, 0.0, 0.0]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]) * Simd32x3::from(-1.0)),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            (self.group0()[3] * other.group0()[1]),
        );
    }
}
impl AntiWedge<NullCircleAtOrigin> for FlectorAtInfinity {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<NullDipoleAtOrigin> for FlectorAtInfinity {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (Simd32x3::from(self.group0()[3]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl AntiWedge<NullSphereAtOrigin> for FlectorAtInfinity {
    type Output = AntiFlectorOnOrigin;
    fn anti_wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiFlectorOnOrigin::from_groups(/* e321, e1, e2, e3 */ (swizzle!(self.group0(), 3, 0, 1, 2) * Simd32x4::from(other[e1234]) * Simd32x4::from(-1.0)));
    }
}
impl AntiWedge<Origin> for FlectorAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self.group0()[3] * other[e4]));
    }
}
impl AntiWedge<Plane> for FlectorAtInfinity {
    type Output = MotorAtInfinity;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        return MotorAtInfinity::from_groups(/* e235, e315, e125, e5 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0] * -1.0),
            (self.group0()[3] * other.group0()[1] * -1.0),
            (self.group0()[3] * other.group0()[2] * -1.0),
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<PlaneOnOrigin> for FlectorAtInfinity {
    type Output = MotorAtInfinity;
    fn anti_wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return MotorAtInfinity::from_groups(/* e235, e315, e125, e5 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0] * -1.0),
            (self.group0()[3] * other.group0()[1] * -1.0),
            (self.group0()[3] * other.group0()[2] * -1.0),
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<RoundPoint> for FlectorAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: RoundPoint) -> Self::Output {
        return Scalar::from_groups(/* scalar */ (self.group0()[3] * other.group1()[0]));
    }
}
impl AntiWedge<RoundPointAtOrigin> for FlectorAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return Scalar::from_groups(/* scalar */ (self.group0()[3] * other.group0()[0]));
    }
}
impl AntiWedge<Sphere> for FlectorAtInfinity {
    type Output = AntiFlector;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * Simd32x4::from(-1.0)),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0] * -1.0),
                (self.group0()[1] * other.group1()[0] * -1.0),
                (self.group0()[2] * other.group1()[0] * -1.0),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl AntiWedge<SphereAtOrigin> for FlectorAtInfinity {
    type Output = AntiFlectorOnOrigin;
    fn anti_wedge(self, other: SphereAtOrigin) -> Self::Output {
        return AntiFlectorOnOrigin::from_groups(
            // e321, e1, e2, e3
            (swizzle!(self.group0(), 3, 0, 1, 2) * Simd32x4::from(other.group0()[0]) * Simd32x4::from(-1.0)),
        );
    }
}
impl AntiWedge<SphereOnOrigin> for FlectorAtInfinity {
    type Output = AntiFlector;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(self.group0()[3]) * other.group0() * Simd32x4::from(-1.0)),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl InfixAntiWedge for FlectorOnOrigin {}
impl AntiWedge<AntiCircleOnOrigin> for FlectorOnOrigin {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from([
            (self.group0()[2] * other.group1()[2]),
            (self.group0()[3] * other.group1()[0]),
            (self.group0()[1] * other.group1()[1]),
            ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<AntiDipoleOnOrigin> for FlectorOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(self.group0()[0] * other.group0()[3] * -1.0), 0.0]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                (self.group0()[2] * other.group0()[0] * -1.0),
                0.0,
            ]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[3]]) * Simd32x3::from(-1.0)),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<AntiFlatOrigin> for FlectorOnOrigin {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiMotorOnOrigin::from_groups(
            // e23, e31, e12, scalar
            (swizzle!(self.group0(), 1, 2, 3, 0) * Simd32x4::from(other[e321]) * Simd32x4::from(-1.0)),
        );
    }
}
impl AntiWedge<AntiFlatPoint> for FlectorOnOrigin {
    type Output = AntiMotor;
    fn anti_wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (swizzle!(self.group0(), 1, 2, 3, 0) * Simd32x4::from(other.group0()[3]) * Simd32x4::from(-1.0)),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[0]),
                0.0,
            ]),
        );
    }
}
impl AntiWedge<AntiFlector> for FlectorOnOrigin {
    type Output = AntiMotor;
    fn anti_wedge(self, other: AntiFlector) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (self.group0()[3] * other.group0()[3] * -1.0),
                ((self.group0()[3] * other.group1()[2]) + (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[1])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[0]),
                0.0,
            ]),
        );
    }
}
impl AntiWedge<AntiFlectorOnOrigin> for FlectorOnOrigin {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ Simd32x4::from([
            (self.group0()[1] * other.group0()[0] * -1.0),
            (self.group0()[2] * other.group0()[0] * -1.0),
            (self.group0()[3] * other.group0()[0] * -1.0),
            ((self.group0()[3] * other.group0()[3]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
        ]));
    }
}
impl AntiWedge<AntiLine> for FlectorOnOrigin {
    type Output = AntiPlane;
    fn anti_wedge(self, other: AntiLine) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group0()[2] * other.group0()[2]),
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[1] * other.group0()[1]),
            (-(self.group0()[3] * other.group1()[2]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<AntiLineOnOrigin> for FlectorOnOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(
            // e1, e2, e3
            (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[2], self.group0()[3], self.group0()[1]])),
        );
    }
}
impl AntiWedge<AntiMotor> for FlectorOnOrigin {
    type Output = AntiFlector;
    fn anti_wedge(self, other: AntiMotor) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                (self.group0()[3] * other.group1()[3]),
                0.0,
            ]),
            // e1, e2, e3, e5
            (swizzle!(self.group0(), 2, 3, 1, 0) * Simd32x4::from([other.group0()[2], other.group0()[0], other.group0()[1], other.group1()[3]])),
        );
    }
}
impl AntiWedge<AntiMotorOnOrigin> for FlectorOnOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ Simd32x3::from([
            (self.group0()[2] * other.group0()[2]),
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[1] * other.group0()[1]),
        ]));
    }
}
impl AntiWedge<AntiPlane> for FlectorOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiPlane) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiPlaneOnOrigin> for FlectorOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiScalar> for FlectorOnOrigin {
    type Output = FlectorOnOrigin;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ (self.group0() * Simd32x4::from(other[e12345])));
    }
}
impl AntiWedge<AntiSphereOnOrigin> for FlectorOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
        );
    }
}
impl AntiWedge<Circle> for FlectorOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: Circle) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(self.group0()[0] * other.group0()[3] * -1.0), 0.0]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                (self.group0()[2] * other.group0()[0] * -1.0),
                (-(self.group0()[3] * other.group1()[2]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[1])),
            ]),
            // e15, e25, e35
            (swizzle!(other.group2(), 1, 2, 0) * Simd32x3::from([self.group0()[3], self.group0()[1], self.group0()[2]])),
            // e23, e31, e12
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[3]]) * Simd32x3::from(-1.0)),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<CircleAligningOrigin> for FlectorOnOrigin {
    type Output = DipoleAligningOrigin;
    fn anti_wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return DipoleAligningOrigin::from_groups(
            // e41, e42, e43
            (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[3], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[3] * other.group2()[1]),
                (self.group0()[1] * other.group2()[2]),
                (self.group0()[2] * other.group2()[0]),
                (-(self.group0()[3] * other.group1()[2]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[1])),
            ]),
        );
    }
}
impl AntiWedge<CircleAtInfinity> for FlectorOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: CircleAtInfinity) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(self.group0()[0] * other.group0()[0] * -1.0), 0.0]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[3] * other.group0()[3]) - (self.group0()[1] * other.group0()[1]) - (self.group0()[2] * other.group0()[2])),
            ]),
            // e15, e25, e35
            (swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group0()[3], self.group0()[1], self.group0()[2]])),
            // e23, e31, e12
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[3]]) * Simd32x3::from(-1.0)),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<CircleAtOrigin> for FlectorOnOrigin {
    type Output = DipoleAtOrigin;
    fn anti_wedge(self, other: CircleAtOrigin) -> Self::Output {
        return DipoleAtOrigin::from_groups(
            // e41, e42, e43
            (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[3], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
            // e15, e25, e35
            (swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group0()[3], self.group0()[1], self.group0()[2]])),
        );
    }
}
impl AntiWedge<CircleOnOrigin> for FlectorOnOrigin {
    type Output = DipoleOnOrigin;
    fn anti_wedge(self, other: CircleOnOrigin) -> Self::Output {
        return DipoleOnOrigin::from_groups(/* e41, e42, e43, e45 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[1] * -1.0),
            (self.group0()[1] * other.group0()[2] * -1.0),
            (self.group0()[2] * other.group0()[0] * -1.0),
            (-(self.group0()[3] * other.group1()[2]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<CircleOrthogonalOrigin> for FlectorOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(self.group0()[0] * other.group0()[3] * -1.0), 0.0]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[2] * -1.0),
                (self.group0()[2] * other.group0()[0] * -1.0),
                0.0,
            ]),
            // e15, e25, e35
            (swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group0()[3], self.group0()[1], self.group0()[2]])),
            // e23, e31, e12
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[3]]) * Simd32x3::from(-1.0)),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<Dipole> for FlectorOnOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: Dipole) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (swizzle!(other.group1(), 2, 0, 1) * Simd32x3::from([self.group0()[2], self.group0()[3], self.group0()[1]])),
            // e4, e5
            Simd32x2::from([
                ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[3] * other.group2()[2]) - (self.group0()[1] * other.group2()[0]) - (self.group0()[2] * other.group2()[1])),
            ]),
        );
    }
}
impl AntiWedge<DipoleAligningOrigin> for FlectorOnOrigin {
    type Output = RoundPointAtOrigin;
    fn anti_wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return RoundPointAtOrigin::from_groups(/* e4, e5 */ Simd32x2::from([
            ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
            (-(self.group0()[3] * other.group1()[2]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<DipoleAtInfinity> for FlectorOnOrigin {
    type Output = AntiPlane;
    fn anti_wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group0()[2] * other.group0()[2]),
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[1] * other.group0()[1]),
            (-(self.group0()[3] * other.group1()[2]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<DipoleAtOrigin> for FlectorOnOrigin {
    type Output = RoundPointAtOrigin;
    fn anti_wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return RoundPointAtOrigin::from_groups(/* e4, e5 */ Simd32x2::from([
            ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
            (-(self.group0()[3] * other.group1()[2]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<DipoleOnOrigin> for FlectorOnOrigin {
    type Output = Origin;
    fn anti_wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return Origin::from_groups(
            // e4
            ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
        );
    }
}
impl AntiWedge<DipoleOrthogonalOrigin> for FlectorOnOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (swizzle!(other.group1(), 2, 0, 1) * Simd32x3::from([self.group0()[2], self.group0()[3], self.group0()[1]])),
            // e4, e5
            Simd32x2::from([
                ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[3] * other.group2()[2]) - (self.group0()[1] * other.group2()[0]) - (self.group0()[2] * other.group2()[1])),
            ]),
        );
    }
}
impl AntiWedge<DualNum> for FlectorOnOrigin {
    type Output = FlectorOnOrigin;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ (self.group0() * Simd32x4::from(other.group0()[1])));
    }
}
impl AntiWedge<FlatPoint> for FlectorOnOrigin {
    type Output = Infinity;
    fn anti_wedge(self, other: FlatPoint) -> Self::Output {
        return Infinity::from_groups(
            // e5
            (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
        );
    }
}
impl AntiWedge<FlatPointAtInfinity> for FlectorOnOrigin {
    type Output = Infinity;
    fn anti_wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return Infinity::from_groups(
            // e5
            (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
        );
    }
}
impl AntiWedge<Flector> for FlectorOnOrigin {
    type Output = Motor;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[2] * other.group1()[2] * -1.0),
                (self.group0()[3] * other.group1()[0] * -1.0),
                (self.group0()[1] * other.group1()[1] * -1.0),
                0.0,
            ]),
            // e235, e315, e125, e5
            (swizzle!(self.group0(), 1, 2, 3, 0) * Simd32x4::from(other.group1()[3])),
        );
    }
}
impl AntiWedge<FlectorAtInfinity> for FlectorOnOrigin {
    type Output = MotorAtInfinity;
    fn anti_wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return MotorAtInfinity::from_groups(/* e235, e315, e125, e5 */ (swizzle!(self.group0(), 1, 2, 3, 0) * Simd32x4::from(other.group0()[3])));
    }
}
impl AntiWedge<FlectorOnOrigin> for FlectorOnOrigin {
    type Output = LineOnOrigin;
    fn anti_wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return LineOnOrigin::from_groups(
            // e415, e425, e435
            (Simd32x3::from([(self.group0()[2] * other.group0()[3]), (self.group0()[3] * other.group0()[1]), (self.group0()[1] * other.group0()[2])]) * Simd32x3::from(-1.0)),
        );
    }
}
impl AntiWedge<Horizon> for FlectorOnOrigin {
    type Output = MotorAtInfinity;
    fn anti_wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return MotorAtInfinity::from_groups(/* e235, e315, e125, e5 */ (swizzle!(self.group0(), 1, 2, 3, 0) * Simd32x4::from(other[e3215])));
    }
}
impl AntiWedge<Line> for FlectorOnOrigin {
    type Output = FlatPoint;
    fn anti_wedge(self, other: Line) -> Self::Output {
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ Simd32x4::from([
            (self.group0()[3] * other.group1()[1]),
            (self.group0()[1] * other.group1()[2]),
            (self.group0()[2] * other.group1()[0]),
            (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<LineAtInfinity> for FlectorOnOrigin {
    type Output = FlatPointAtInfinity;
    fn anti_wedge(self, other: LineAtInfinity) -> Self::Output {
        return FlatPointAtInfinity::from_groups(
            // e15, e25, e35
            (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[3], self.group0()[1], self.group0()[2]])),
        );
    }
}
impl AntiWedge<LineOnOrigin> for FlectorOnOrigin {
    type Output = FlatOrigin;
    fn anti_wedge(self, other: LineOnOrigin) -> Self::Output {
        return FlatOrigin::from_groups(
            // e45
            (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
        );
    }
}
impl AntiWedge<Motor> for FlectorOnOrigin {
    type Output = Flector;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (swizzle!(self.group0(), 3, 1, 2, 0) * Simd32x4::from([other.group1()[1], other.group1()[2], other.group1()[0], other.group0()[3]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (self.group0()[3] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl AntiWedge<MotorAtInfinity> for FlectorOnOrigin {
    type Output = FlatPointAtInfinity;
    fn anti_wedge(self, other: MotorAtInfinity) -> Self::Output {
        return FlatPointAtInfinity::from_groups(/* e15, e25, e35 */ Simd32x3::from([
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[1] * other.group0()[2]),
            (self.group0()[2] * other.group0()[0]),
        ]));
    }
}
impl AntiWedge<MotorOnOrigin> for FlectorOnOrigin {
    type Output = FlectorOnOrigin;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ (self.group0() * Simd32x4::from(other.group0()[3])));
    }
}
impl AntiWedge<MultiVector> for FlectorOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group0()[3] * other.group1()[2]) + (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[2] * other.group5()[2]),
                (self.group0()[3] * other.group5()[0]),
                (self.group0()[1] * other.group5()[1]),
                ((self.group0()[3] * other.group3()[2]) + (self.group0()[1] * other.group3()[0]) + (self.group0()[2] * other.group3()[1])),
            ]),
            // e5
            (self.group0()[0] * other[e45]),
            // e41, e42, e43, e45
            (swizzle!(self.group0(), 3, 1, 2, 0)
                * Simd32x4::from([other.group7()[1], other.group7()[2], other.group7()[0], other.group0()[1]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35
            (swizzle!(other.group8(), 1, 2, 0) * Simd32x3::from([self.group0()[3], self.group0()[1], self.group0()[2]])),
            // e23, e31, e12
            (Simd32x3::from(other.group6()[0]) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[3]]) * Simd32x3::from(-1.0)),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group0()[2] * other.group9()[2] * -1.0),
                (self.group0()[3] * other.group9()[0] * -1.0),
                (self.group0()[1] * other.group9()[1] * -1.0),
            ]),
            // e423, e431, e412
            (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[3]]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from(other[e45]) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[3]])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[3] * other.group0()[1]),
                0.0,
            ]),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<NullCircleAtOrigin> for FlectorOnOrigin {
    type Output = NullDipoleAtOrigin;
    fn anti_wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return NullDipoleAtOrigin::from_groups(
            // e41, e42, e43
            (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[3], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
        );
    }
}
impl AntiWedge<NullDipoleAtOrigin> for FlectorOnOrigin {
    type Output = Origin;
    fn anti_wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return Origin::from_groups(
            // e4
            ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
        );
    }
}
impl AntiWedge<NullSphereAtOrigin> for FlectorOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other[e1234] * -1.0)]),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            (Simd32x3::from(other[e1234]) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[3]]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<Plane> for FlectorOnOrigin {
    type Output = Motor;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[2] * other.group0()[2] * -1.0),
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
                0.0,
            ]),
            // e235, e315, e125, e5
            (swizzle!(self.group0(), 1, 2, 3, 0) * Simd32x4::from(other.group0()[3])),
        );
    }
}
impl AntiWedge<PlaneOnOrigin> for FlectorOnOrigin {
    type Output = LineOnOrigin;
    fn anti_wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return LineOnOrigin::from_groups(
            // e415, e425, e435
            (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[2], self.group0()[3], self.group0()[1]]) * Simd32x3::from(-1.0)),
        );
    }
}
impl AntiWedge<RoundPoint> for FlectorOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: RoundPoint) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
        );
    }
}
impl AntiWedge<Sphere> for FlectorOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group1()[0] * -1.0)]),
            // e5
            (self.group0()[0] * other.group1()[1]),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group0()[2] * other.group0()[2] * -1.0),
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
            ]),
            // e423, e431, e412
            (Simd32x3::from(other.group1()[0]) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[3]]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from(other.group1()[1]) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[3]])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<SphereAtOrigin> for FlectorOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: SphereAtOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[0] * -1.0)]),
            // e5
            (self.group0()[0] * other.group0()[1]),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[3]]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[3]])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<SphereOnOrigin> for FlectorOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3] * -1.0)]),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group0()[2] * other.group0()[2] * -1.0),
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[1] * -1.0),
            ]),
            // e423, e431, e412
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[3]]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl InfixAntiWedge for Horizon {}
impl AntiWedge<AntiCircleOnOrigin> for Horizon {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (Simd32x3::from(self[e3215]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl AntiWedge<AntiDipoleOnOrigin> for Horizon {
    type Output = AntiLineOnOrigin;
    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiLineOnOrigin::from_groups(
            // e23, e31, e12
            (Simd32x3::from(self[e3215]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
        );
    }
}
impl AntiWedge<AntiScalar> for Horizon {
    type Output = Horizon;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self[e3215] * other[e12345]));
    }
}
impl AntiWedge<AntiSphereOnOrigin> for Horizon {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self[e3215] * other.group0()[3]));
    }
}
impl AntiWedge<Circle> for Horizon {
    type Output = AntiLine;
    fn anti_wedge(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return AntiLine::from_groups(
            // e23, e31, e12
            (Simd32x3::from(self[e3215]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e15, e25, e35
            (Simd32x3::from(self[e3215]) * other.group1()),
        );
    }
}
impl AntiWedge<CircleAligningOrigin> for Horizon {
    type Output = AntiLine;
    fn anti_wedge(self, other: CircleAligningOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiLine::from_groups(
            // e23, e31, e12
            (Simd32x3::from(self[e3215]) * other.group0()),
            // e15, e25, e35
            (Simd32x3::from(self[e3215]) * other.group1()),
        );
    }
}
impl AntiWedge<CircleAtInfinity> for Horizon {
    type Output = FlatPointAtInfinity;
    fn anti_wedge(self, other: CircleAtInfinity) -> Self::Output {
        use crate::elements::*;
        return FlatPointAtInfinity::from_groups(
            // e15, e25, e35
            (Simd32x3::from(self[e3215]) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[3]])),
        );
    }
}
impl AntiWedge<CircleAtOrigin> for Horizon {
    type Output = AntiLineOnOrigin;
    fn anti_wedge(self, other: CircleAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiLineOnOrigin::from_groups(/* e23, e31, e12 */ (Simd32x3::from(self[e3215]) * other.group0()));
    }
}
impl AntiWedge<CircleOnOrigin> for Horizon {
    type Output = AntiLine;
    fn anti_wedge(self, other: CircleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiLine::from_groups(
            // e23, e31, e12
            (Simd32x3::from(self[e3215]) * other.group0()),
            // e15, e25, e35
            (Simd32x3::from(self[e3215]) * other.group1()),
        );
    }
}
impl AntiWedge<CircleOrthogonalOrigin> for Horizon {
    type Output = AntiLineOnOrigin;
    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiLineOnOrigin::from_groups(
            // e23, e31, e12
            (Simd32x3::from(self[e3215]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
        );
    }
}
impl AntiWedge<Dipole> for Horizon {
    type Output = AntiPlane;
    fn anti_wedge(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return AntiPlane::from_groups(
            // e1, e2, e3, e5
            (Simd32x4::from(self[e3215]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl AntiWedge<DipoleAligningOrigin> for Horizon {
    type Output = AntiPlane;
    fn anti_wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiPlane::from_groups(
            // e1, e2, e3, e5
            (Simd32x4::from(self[e3215]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl AntiWedge<DipoleAtInfinity> for Horizon {
    type Output = Infinity;
    fn anti_wedge(self, other: DipoleAtInfinity) -> Self::Output {
        use crate::elements::*;
        return Infinity::from_groups(/* e5 */ (self[e3215] * other.group1()[3] * -1.0));
    }
}
impl AntiWedge<DipoleAtOrigin> for Horizon {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: DipoleAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (Simd32x3::from(self[e3215]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl AntiWedge<DipoleOnOrigin> for Horizon {
    type Output = AntiPlane;
    fn anti_wedge(self, other: DipoleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ (Simd32x4::from(self[e3215]) * other.group0() * Simd32x4::from(-1.0)));
    }
}
impl AntiWedge<DipoleOrthogonalOrigin> for Horizon {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (Simd32x3::from(self[e3215]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl AntiWedge<DualNum> for Horizon {
    type Output = Horizon;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self[e3215] * other.group0()[1]));
    }
}
impl AntiWedge<FlatOrigin> for Horizon {
    type Output = Infinity;
    fn anti_wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return Infinity::from_groups(/* e5 */ (self[e3215] * other[e45] * -1.0));
    }
}
impl AntiWedge<FlatPoint> for Horizon {
    type Output = Infinity;
    fn anti_wedge(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return Infinity::from_groups(/* e5 */ (self[e3215] * other.group0()[3] * -1.0));
    }
}
impl AntiWedge<Flector> for Horizon {
    type Output = MotorAtInfinity;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return MotorAtInfinity::from_groups(
            // e235, e315, e125, e5
            (Simd32x4::from(self[e3215]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl AntiWedge<FlectorOnOrigin> for Horizon {
    type Output = MotorAtInfinity;
    fn anti_wedge(self, other: FlectorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return MotorAtInfinity::from_groups(
            // e235, e315, e125, e5
            (Simd32x4::from(self[e3215]) * swizzle!(other.group0(), 1, 2, 3, 0) * Simd32x4::from(-1.0)),
        );
    }
}
impl AntiWedge<Line> for Horizon {
    type Output = FlatPointAtInfinity;
    fn anti_wedge(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return FlatPointAtInfinity::from_groups(/* e15, e25, e35 */ (Simd32x3::from(self[e3215]) * other.group0()));
    }
}
impl AntiWedge<LineOnOrigin> for Horizon {
    type Output = FlatPointAtInfinity;
    fn anti_wedge(self, other: LineOnOrigin) -> Self::Output {
        use crate::elements::*;
        return FlatPointAtInfinity::from_groups(/* e15, e25, e35 */ (Simd32x3::from(self[e3215]) * other.group0()));
    }
}
impl AntiWedge<Motor> for Horizon {
    type Output = FlectorAtInfinity;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ (Simd32x4::from(self[e3215]) * other.group0()));
    }
}
impl AntiWedge<MotorOnOrigin> for Horizon {
    type Output = FlectorAtInfinity;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ (Simd32x4::from(self[e3215]) * other.group0()));
    }
}
impl AntiWedge<MultiVector> for Horizon {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(self[e3215] * other.group1()[3]), 0.0]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e3215] * other.group3()[0] * -1.0),
                (self[e3215] * other.group3()[1] * -1.0),
                (self[e3215] * other.group3()[2] * -1.0),
                0.0,
            ]),
            // e5
            (self[e3215] * other.group3()[3] * -1.0),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            (Simd32x3::from(self[e3215]) * Simd32x3::from([other.group6()[1], other.group6()[2], other.group6()[3]])),
            // e23, e31, e12
            (Simd32x3::from(self[e3215]) * other.group7()),
            // e321, e415, e425, e435
            Simd32x4::from([(self[e3215] * other.group9()[3] * -1.0), 0.0, 0.0, 0.0]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (Simd32x3::from(self[e3215]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]) * Simd32x3::from(-1.0)),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            (self[e3215] * other.group0()[1]),
        );
    }
}
impl AntiWedge<NullCircleAtOrigin> for Horizon {
    type Output = AntiLineOnOrigin;
    fn anti_wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiLineOnOrigin::from_groups(/* e23, e31, e12 */ (Simd32x3::from(self[e3215]) * other.group0()));
    }
}
impl AntiWedge<NullDipoleAtOrigin> for Horizon {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (Simd32x3::from(self[e3215]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl AntiWedge<NullSphereAtOrigin> for Horizon {
    type Output = AntiFlatOrigin;
    fn anti_wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiFlatOrigin::from_groups(/* e321 */ (self[e3215] * other[e1234] * -1.0));
    }
}
impl AntiWedge<Origin> for Horizon {
    type Output = Scalar;
    fn anti_wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self[e3215] * other[e4]));
    }
}
impl AntiWedge<Plane> for Horizon {
    type Output = LineAtInfinity;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return LineAtInfinity::from_groups(
            // e235, e315, e125
            (Simd32x3::from(self[e3215]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
        );
    }
}
impl AntiWedge<PlaneOnOrigin> for Horizon {
    type Output = LineAtInfinity;
    fn anti_wedge(self, other: PlaneOnOrigin) -> Self::Output {
        use crate::elements::*;
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ (Simd32x3::from(self[e3215]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl AntiWedge<RoundPoint> for Horizon {
    type Output = Scalar;
    fn anti_wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self[e3215] * other.group1()[0]));
    }
}
impl AntiWedge<RoundPointAtOrigin> for Horizon {
    type Output = Scalar;
    fn anti_wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self[e3215] * other.group0()[0]));
    }
}
impl AntiWedge<Sphere> for Horizon {
    type Output = AntiFlatPoint;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(self[e3215]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl AntiWedge<SphereAtOrigin> for Horizon {
    type Output = AntiFlatOrigin;
    fn anti_wedge(self, other: SphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiFlatOrigin::from_groups(/* e321 */ (self[e3215] * other.group0()[0] * -1.0));
    }
}
impl AntiWedge<SphereOnOrigin> for Horizon {
    type Output = AntiFlatPoint;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ (Simd32x4::from(self[e3215]) * other.group0() * Simd32x4::from(-1.0)));
    }
}
impl InfixAntiWedge for Infinity {}
impl AntiWedge<AntiScalar> for Infinity {
    type Output = Infinity;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Infinity::from_groups(/* e5 */ (self[e5] * other[e12345]));
    }
}
impl AntiWedge<DualNum> for Infinity {
    type Output = Infinity;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return Infinity::from_groups(/* e5 */ (self[e5] * other.group0()[1]));
    }
}
impl AntiWedge<Motor> for Infinity {
    type Output = Infinity;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return Infinity::from_groups(/* e5 */ (self[e5] * other.group0()[3]));
    }
}
impl AntiWedge<MotorOnOrigin> for Infinity {
    type Output = Infinity;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return Infinity::from_groups(/* e5 */ (self[e5] * other.group0()[3]));
    }
}
impl AntiWedge<MultiVector> for Infinity {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(self[e5] * other.group9()[3]), 0.0]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            (self[e5] * other.group0()[1]),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<NullSphereAtOrigin> for Infinity {
    type Output = Scalar;
    fn anti_wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self[e5] * other[e1234]));
    }
}
impl AntiWedge<Sphere> for Infinity {
    type Output = Scalar;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self[e5] * other.group1()[0]));
    }
}
impl AntiWedge<SphereAtOrigin> for Infinity {
    type Output = Scalar;
    fn anti_wedge(self, other: SphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self[e5] * other.group0()[0]));
    }
}
impl AntiWedge<SphereOnOrigin> for Infinity {
    type Output = Scalar;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self[e5] * other.group0()[3]));
    }
}
impl InfixAntiWedge for Line {}
impl AntiWedge<AntiCircleOnOrigin> for Line {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<AntiDipoleOnOrigin> for Line {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from([
            ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2])),
            ((self.group0()[1] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
            ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1])),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<AntiFlatOrigin> for Line {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (self.group0() * Simd32x3::from(other[e321])));
    }
}
impl AntiWedge<AntiFlatPoint> for Line {
    type Output = AntiPlane;
    fn anti_wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<AntiFlector> for Line {
    type Output = AntiPlane;
    fn anti_wedge(self, other: AntiFlector) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<AntiFlectorOnOrigin> for Line {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (self.group0() * Simd32x3::from(other.group0()[0])));
    }
}
impl AntiWedge<AntiLine> for Line {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiLine) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiLineOnOrigin> for Line {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiMotor> for Line {
    type Output = AntiMotor;
    fn anti_wedge(self, other: AntiMotor) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                0.0,
            ]),
        );
    }
}
impl AntiWedge<AntiMotorOnOrigin> for Line {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiScalar> for Line {
    type Output = Line;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            (self.group0() * Simd32x3::from(other[e12345])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other[e12345])),
        );
    }
}
impl AntiWedge<Circle> for Line {
    type Output = RoundPoint;
    fn anti_wedge(self, other: Circle) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            ((self.group0() * Simd32x3::from(other.group0()[3])) + (swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))),
            // e4, e5
            (-(Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]]))
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]]))
                + Simd32x2::from([
                    0.0,
                    (-(self.group1()[2] * other.group1()[2]) - (self.group1()[1] * other.group1()[1]) - (self.group1()[0] * other.group1()[0])),
                ])),
        );
    }
}
impl AntiWedge<CircleAligningOrigin> for Line {
    type Output = RoundPoint;
    fn anti_wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (swizzle!(self.group1(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1)),
            // e4, e5
            (-(Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]]))
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]]))
                + Simd32x2::from([
                    0.0,
                    (-(self.group1()[2] * other.group1()[2]) - (self.group1()[1] * other.group1()[1]) - (self.group1()[0] * other.group1()[0])),
                ])),
        );
    }
}
impl AntiWedge<CircleAtInfinity> for Line {
    type Output = AntiPlane;
    fn anti_wedge(self, other: CircleAtInfinity) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[0]),
            (self.group0()[1] * other.group0()[0]),
            (self.group0()[2] * other.group0()[0]),
            (-(self.group1()[2] * other.group0()[3])
                - (self.group1()[1] * other.group0()[2])
                - (self.group1()[0] * other.group0()[1])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<CircleAtOrigin> for Line {
    type Output = RoundPoint;
    fn anti_wedge(self, other: CircleAtOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (swizzle!(self.group1(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1)),
            // e4, e5
            (-(Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]))
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]]))),
        );
    }
}
impl AntiWedge<CircleOnOrigin> for Line {
    type Output = RoundPoint;
    fn anti_wedge(self, other: CircleOnOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (swizzle!(self.group1(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1)),
            // e4, e5
            Simd32x2::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl AntiWedge<CircleOrthogonalOrigin> for Line {
    type Output = RoundPoint;
    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            ((self.group0() * Simd32x3::from(other.group0()[3])) + (swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))),
            // e4, e5
            (-(Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]))
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]]))),
        );
    }
}
impl AntiWedge<Dipole> for Line {
    type Output = Scalar;
    fn anti_wedge(self, other: Dipole) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<DipoleAligningOrigin> for Line {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<DipoleAtInfinity> for Line {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<DipoleAtOrigin> for Line {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<DipoleOnOrigin> for Line {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<DipoleOrthogonalOrigin> for Line {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<DualNum> for Line {
    type Output = Line;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        return Line::from_groups(
            // e415, e425, e435
            (self.group0() * Simd32x3::from(other.group0()[1])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other.group0()[1])),
        );
    }
}
impl AntiWedge<Flector> for Line {
    type Output = FlatPoint;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ Simd32x4::from([
            ((self.group0()[0] * other.group1()[3]) + (self.group1()[1] * other.group1()[2])),
            ((self.group0()[1] * other.group1()[3]) + (self.group1()[2] * other.group1()[0])),
            ((self.group0()[2] * other.group1()[3]) + (self.group1()[0] * other.group1()[1])),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<FlectorAtInfinity> for Line {
    type Output = FlatPointAtInfinity;
    fn anti_wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return FlatPointAtInfinity::from_groups(/* e15, e25, e35 */ (self.group0() * Simd32x3::from(other.group0()[3])));
    }
}
impl AntiWedge<FlectorOnOrigin> for Line {
    type Output = FlatPoint;
    fn anti_wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ Simd32x4::from([
            (self.group1()[1] * other.group0()[3]),
            (self.group1()[2] * other.group0()[1]),
            (self.group1()[0] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
        ]));
    }
}
impl AntiWedge<Horizon> for Line {
    type Output = FlatPointAtInfinity;
    fn anti_wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return FlatPointAtInfinity::from_groups(/* e15, e25, e35 */ (self.group0() * Simd32x3::from(other[e3215])));
    }
}
impl AntiWedge<Line> for Line {
    type Output = Infinity;
    fn anti_wedge(self, other: Line) -> Self::Output {
        return Infinity::from_groups(
            // e5
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<LineAtInfinity> for Line {
    type Output = Infinity;
    fn anti_wedge(self, other: LineAtInfinity) -> Self::Output {
        return Infinity::from_groups(
            // e5
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<LineOnOrigin> for Line {
    type Output = Infinity;
    fn anti_wedge(self, other: LineOnOrigin) -> Self::Output {
        return Infinity::from_groups(
            // e5
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<Motor> for Line {
    type Output = Motor;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl AntiWedge<MotorAtInfinity> for Line {
    type Output = Infinity;
    fn anti_wedge(self, other: MotorAtInfinity) -> Self::Output {
        return Infinity::from_groups(
            // e5
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<MotorOnOrigin> for Line {
    type Output = Motor;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl AntiWedge<MultiVector> for Line {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group1()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[0] * other.group3()[0])
                    - (self.group0()[2] * other.group5()[2])
                    - (self.group0()[0] * other.group5()[0])
                    - (self.group0()[1] * other.group5()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group6()[0]) + (self.group1()[1] * other.group7()[2])),
                ((self.group0()[1] * other.group6()[0]) + (self.group1()[2] * other.group7()[0])),
                ((self.group0()[2] * other.group6()[0]) + (self.group1()[0] * other.group7()[1])),
                (-(self.group0()[2] * other.group7()[2]) - (self.group0()[0] * other.group7()[0]) - (self.group0()[1] * other.group7()[1])),
            ]),
            // e5
            (-(self.group1()[2] * other.group6()[3])
                - (self.group1()[1] * other.group6()[2])
                - (self.group1()[0] * other.group6()[1])
                - (self.group0()[2] * other.group8()[2])
                - (self.group0()[0] * other.group8()[0])
                - (self.group0()[1] * other.group8()[1])),
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group9()[3]),
                (self.group0()[1] * other.group9()[3]),
                (self.group0()[2] * other.group9()[3]),
                (-(self.group0()[2] * other.group9()[2]) - (self.group0()[0] * other.group9()[0]) - (self.group0()[1] * other.group9()[1])),
            ]),
            // e15, e25, e35
            ((self.group0() * Simd32x3::from(other[e45])) + (swizzle!(self.group1(), 1, 2, 0) * Simd32x3::from([other.group9()[2], other.group9()[0], other.group9()[1]]))),
            // e23, e31, e12
            (self.group1() * Simd32x3::from(other.group9()[3])),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[2] * other.group0()[1]),
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other.group0()[1])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<NullCircleAtOrigin> for Line {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from([
            (self.group1()[1] * other.group0()[2]),
            (self.group1()[2] * other.group0()[0]),
            (self.group1()[0] * other.group0()[1]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<NullDipoleAtOrigin> for Line {
    type Output = Scalar;
    fn anti_wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<NullSphereAtOrigin> for Line {
    type Output = AntiCircleOnOrigin;
    fn anti_wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiCircleOnOrigin::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other[e1234])),
            // e23, e31, e12
            (self.group1() * Simd32x3::from(other[e1234])),
        );
    }
}
impl AntiWedge<Plane> for Line {
    type Output = FlatPoint;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ Simd32x4::from([
            ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2])),
            ((self.group0()[1] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
            ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1])),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<PlaneOnOrigin> for Line {
    type Output = FlatPoint;
    fn anti_wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ Simd32x4::from([
            (self.group1()[1] * other.group0()[2]),
            (self.group1()[2] * other.group0()[0]),
            (self.group1()[0] * other.group0()[1]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<Sphere> for Line {
    type Output = Dipole;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        return Dipole::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other.group1()[0])),
            // e23, e31, e12
            (self.group1() * Simd32x3::from(other.group1()[0])),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[1]) + (self.group1()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group1()[1]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group1()[1]) + (self.group1()[0] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl AntiWedge<SphereAtOrigin> for Line {
    type Output = DipoleOrthogonalOrigin;
    fn anti_wedge(self, other: SphereAtOrigin) -> Self::Output {
        return DipoleOrthogonalOrigin::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other.group0()[0])),
            // e23, e31, e12
            (self.group1() * Simd32x3::from(other.group0()[0])),
            // e15, e25, e35
            (self.group0() * Simd32x3::from(other.group0()[1])),
        );
    }
}
impl AntiWedge<SphereOnOrigin> for Line {
    type Output = Dipole;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        return Dipole::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other.group0()[3])),
            // e23, e31, e12
            (self.group1() * Simd32x3::from(other.group0()[3])),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group1()[1] * other.group0()[2]),
                (self.group1()[2] * other.group0()[0]),
                (self.group1()[0] * other.group0()[1]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl InfixAntiWedge for LineAtInfinity {}
impl AntiWedge<AntiCircleOnOrigin> for LineAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiDipoleOnOrigin> for LineAtInfinity {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(
            // e1, e2, e3
            (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]])),
        );
    }
}
impl AntiWedge<AntiScalar> for LineAtInfinity {
    type Output = LineAtInfinity;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ (self.group0() * Simd32x3::from(other[e12345])));
    }
}
impl AntiWedge<Circle> for LineAtInfinity {
    type Output = AntiPlane;
    fn anti_wedge(self, other: Circle) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group0()[1] * other.group0()[2]),
            (self.group0()[2] * other.group0()[0]),
            (self.group0()[0] * other.group0()[1]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<CircleAligningOrigin> for LineAtInfinity {
    type Output = AntiPlane;
    fn anti_wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group0()[1] * other.group0()[2]),
            (self.group0()[2] * other.group0()[0]),
            (self.group0()[0] * other.group0()[1]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<CircleAtInfinity> for LineAtInfinity {
    type Output = Infinity;
    fn anti_wedge(self, other: CircleAtInfinity) -> Self::Output {
        return Infinity::from_groups(
            // e5
            (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
        );
    }
}
impl AntiWedge<CircleAtOrigin> for LineAtInfinity {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: CircleAtOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1)));
    }
}
impl AntiWedge<CircleOnOrigin> for LineAtInfinity {
    type Output = AntiPlane;
    fn anti_wedge(self, other: CircleOnOrigin) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group0()[1] * other.group0()[2]),
            (self.group0()[2] * other.group0()[0]),
            (self.group0()[0] * other.group0()[1]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<CircleOrthogonalOrigin> for LineAtInfinity {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(
            // e1, e2, e3
            (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]])),
        );
    }
}
impl AntiWedge<Dipole> for LineAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: Dipole) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<DipoleAligningOrigin> for LineAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<DipoleAtOrigin> for LineAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<DipoleOnOrigin> for LineAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<DipoleOrthogonalOrigin> for LineAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<DualNum> for LineAtInfinity {
    type Output = LineAtInfinity;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ (self.group0() * Simd32x3::from(other.group0()[1])));
    }
}
impl AntiWedge<Flector> for LineAtInfinity {
    type Output = FlatPointAtInfinity;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        return FlatPointAtInfinity::from_groups(
            // e15, e25, e35
            (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]])),
        );
    }
}
impl AntiWedge<FlectorOnOrigin> for LineAtInfinity {
    type Output = FlatPointAtInfinity;
    fn anti_wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return FlatPointAtInfinity::from_groups(
            // e15, e25, e35
            (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[3], other.group0()[1], other.group0()[2]])),
        );
    }
}
impl AntiWedge<Line> for LineAtInfinity {
    type Output = Infinity;
    fn anti_wedge(self, other: Line) -> Self::Output {
        return Infinity::from_groups(
            // e5
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<LineOnOrigin> for LineAtInfinity {
    type Output = Infinity;
    fn anti_wedge(self, other: LineOnOrigin) -> Self::Output {
        return Infinity::from_groups(
            // e5
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<Motor> for LineAtInfinity {
    type Output = MotorAtInfinity;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        return MotorAtInfinity::from_groups(/* e235, e315, e125, e5 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<MotorOnOrigin> for LineAtInfinity {
    type Output = MotorAtInfinity;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        return MotorAtInfinity::from_groups(/* e235, e315, e125, e5 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<MultiVector> for LineAtInfinity {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[2] * other.group3()[2]) - (self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[1] * other.group7()[2]),
                (self.group0()[2] * other.group7()[0]),
                (self.group0()[0] * other.group7()[1]),
                0.0,
            ]),
            // e5
            (-(self.group0()[2] * other.group6()[3]) - (self.group0()[0] * other.group6()[1]) - (self.group0()[1] * other.group6()[2])),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group9()[2], other.group9()[0], other.group9()[1]])),
            // e23, e31, e12
            (self.group0() * Simd32x3::from(other.group9()[3])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (self.group0() * Simd32x3::from(other.group0()[1])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<NullCircleAtOrigin> for LineAtInfinity {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1)));
    }
}
impl AntiWedge<NullDipoleAtOrigin> for LineAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<NullSphereAtOrigin> for LineAtInfinity {
    type Output = AntiLineOnOrigin;
    fn anti_wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiLineOnOrigin::from_groups(/* e23, e31, e12 */ (self.group0() * Simd32x3::from(other[e1234])));
    }
}
impl AntiWedge<Plane> for LineAtInfinity {
    type Output = FlatPointAtInfinity;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        return FlatPointAtInfinity::from_groups(
            // e15, e25, e35
            (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]])),
        );
    }
}
impl AntiWedge<PlaneOnOrigin> for LineAtInfinity {
    type Output = FlatPointAtInfinity;
    fn anti_wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return FlatPointAtInfinity::from_groups(/* e15, e25, e35 */ (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1)));
    }
}
impl AntiWedge<Sphere> for LineAtInfinity {
    type Output = AntiLine;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        return AntiLine::from_groups(
            // e23, e31, e12
            (self.group0() * Simd32x3::from(other.group1()[0])),
            // e15, e25, e35
            (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1)),
        );
    }
}
impl AntiWedge<SphereAtOrigin> for LineAtInfinity {
    type Output = AntiLineOnOrigin;
    fn anti_wedge(self, other: SphereAtOrigin) -> Self::Output {
        return AntiLineOnOrigin::from_groups(/* e23, e31, e12 */ (self.group0() * Simd32x3::from(other.group0()[0])));
    }
}
impl AntiWedge<SphereOnOrigin> for LineAtInfinity {
    type Output = AntiLine;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        return AntiLine::from_groups(
            // e23, e31, e12
            (self.group0() * Simd32x3::from(other.group0()[3])),
            // e15, e25, e35
            (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]])),
        );
    }
}
impl InfixAntiWedge for LineOnOrigin {}
impl AntiWedge<AntiCircleOnOrigin> for LineOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<AntiDipoleOnOrigin> for LineOnOrigin {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<AntiFlatOrigin> for LineOnOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (self.group0() * Simd32x3::from(other[e321])));
    }
}
impl AntiWedge<AntiFlatPoint> for LineOnOrigin {
    type Output = AntiPlane;
    fn anti_wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<AntiFlector> for LineOnOrigin {
    type Output = AntiPlane;
    fn anti_wedge(self, other: AntiFlector) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<AntiFlectorOnOrigin> for LineOnOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (self.group0() * Simd32x3::from(other.group0()[0])));
    }
}
impl AntiWedge<AntiLine> for LineOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiLine) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiLineOnOrigin> for LineOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiMotor> for LineOnOrigin {
    type Output = AntiMotor;
    fn anti_wedge(self, other: AntiMotor) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                0.0,
            ]),
        );
    }
}
impl AntiWedge<AntiMotorOnOrigin> for LineOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiScalar> for LineOnOrigin {
    type Output = LineOnOrigin;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (self.group0() * Simd32x3::from(other[e12345])));
    }
}
impl AntiWedge<Circle> for LineOnOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: Circle) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (self.group0() * Simd32x3::from(other.group0()[3])),
            // e4, e5
            (-(Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]]))
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]]))),
        );
    }
}
impl AntiWedge<CircleAligningOrigin> for LineOnOrigin {
    type Output = RoundPointAtOrigin;
    fn anti_wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return RoundPointAtOrigin::from_groups(
            // e4, e5
            (-(Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]]))
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]]))),
        );
    }
}
impl AntiWedge<CircleAtInfinity> for LineOnOrigin {
    type Output = AntiPlane;
    fn anti_wedge(self, other: CircleAtInfinity) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[0]),
            (self.group0()[1] * other.group0()[0]),
            (self.group0()[2] * other.group0()[0]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<CircleAtOrigin> for LineOnOrigin {
    type Output = RoundPointAtOrigin;
    fn anti_wedge(self, other: CircleAtOrigin) -> Self::Output {
        return RoundPointAtOrigin::from_groups(
            // e4, e5
            (-(Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]))
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]]))),
        );
    }
}
impl AntiWedge<CircleOnOrigin> for LineOnOrigin {
    type Output = Origin;
    fn anti_wedge(self, other: CircleOnOrigin) -> Self::Output {
        return Origin::from_groups(
            // e4
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<CircleOrthogonalOrigin> for LineOnOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (self.group0() * Simd32x3::from(other.group0()[3])),
            // e4, e5
            (-(Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]))
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]]))),
        );
    }
}
impl AntiWedge<Dipole> for LineOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: Dipole) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<DipoleAtInfinity> for LineOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<DipoleOrthogonalOrigin> for LineOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<DualNum> for LineOnOrigin {
    type Output = LineOnOrigin;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (self.group0() * Simd32x3::from(other.group0()[1])));
    }
}
impl AntiWedge<Flector> for LineOnOrigin {
    type Output = FlatPoint;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ Simd32x4::from([
            (self.group0()[0] * other.group1()[3]),
            (self.group0()[1] * other.group1()[3]),
            (self.group0()[2] * other.group1()[3]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<FlectorAtInfinity> for LineOnOrigin {
    type Output = FlatPointAtInfinity;
    fn anti_wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return FlatPointAtInfinity::from_groups(/* e15, e25, e35 */ (self.group0() * Simd32x3::from(other.group0()[3])));
    }
}
impl AntiWedge<FlectorOnOrigin> for LineOnOrigin {
    type Output = FlatOrigin;
    fn anti_wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return FlatOrigin::from_groups(
            // e45
            (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
        );
    }
}
impl AntiWedge<Horizon> for LineOnOrigin {
    type Output = FlatPointAtInfinity;
    fn anti_wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return FlatPointAtInfinity::from_groups(/* e15, e25, e35 */ (self.group0() * Simd32x3::from(other[e3215])));
    }
}
impl AntiWedge<Line> for LineOnOrigin {
    type Output = Infinity;
    fn anti_wedge(self, other: Line) -> Self::Output {
        return Infinity::from_groups(
            // e5
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<LineAtInfinity> for LineOnOrigin {
    type Output = Infinity;
    fn anti_wedge(self, other: LineAtInfinity) -> Self::Output {
        return Infinity::from_groups(
            // e5
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<Motor> for LineOnOrigin {
    type Output = Motor;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl AntiWedge<MotorAtInfinity> for LineOnOrigin {
    type Output = Infinity;
    fn anti_wedge(self, other: MotorAtInfinity) -> Self::Output {
        return Infinity::from_groups(
            // e5
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<MotorOnOrigin> for LineOnOrigin {
    type Output = LineOnOrigin;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (self.group0() * Simd32x3::from(other.group0()[3])));
    }
}
impl AntiWedge<MultiVector> for LineOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[2] * other.group5()[2]) - (self.group0()[0] * other.group5()[0]) - (self.group0()[1] * other.group5()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group6()[0]),
                (self.group0()[1] * other.group6()[0]),
                (self.group0()[2] * other.group6()[0]),
                (-(self.group0()[2] * other.group7()[2]) - (self.group0()[0] * other.group7()[0]) - (self.group0()[1] * other.group7()[1])),
            ]),
            // e5
            (-(self.group0()[2] * other.group8()[2]) - (self.group0()[0] * other.group8()[0]) - (self.group0()[1] * other.group8()[1])),
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group9()[3]),
                (self.group0()[1] * other.group9()[3]),
                (self.group0()[2] * other.group9()[3]),
                (-(self.group0()[2] * other.group9()[2]) - (self.group0()[0] * other.group9()[0]) - (self.group0()[1] * other.group9()[1])),
            ]),
            // e15, e25, e35
            (self.group0() * Simd32x3::from(other[e45])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[2] * other.group0()[1]),
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<NullCircleAtOrigin> for LineOnOrigin {
    type Output = Origin;
    fn anti_wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return Origin::from_groups(
            // e4
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<NullSphereAtOrigin> for LineOnOrigin {
    type Output = NullDipoleAtOrigin;
    fn anti_wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return NullDipoleAtOrigin::from_groups(/* e41, e42, e43 */ (self.group0() * Simd32x3::from(other[e1234])));
    }
}
impl AntiWedge<Plane> for LineOnOrigin {
    type Output = FlatPoint;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<PlaneOnOrigin> for LineOnOrigin {
    type Output = FlatOrigin;
    fn anti_wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return FlatOrigin::from_groups(
            // e45
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<Sphere> for LineOnOrigin {
    type Output = DipoleAligningOrigin;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        return DipoleAligningOrigin::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other.group1()[0])),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[2] * other.group1()[1]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl AntiWedge<SphereAtOrigin> for LineOnOrigin {
    type Output = DipoleAtOrigin;
    fn anti_wedge(self, other: SphereAtOrigin) -> Self::Output {
        return DipoleAtOrigin::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other.group0()[0])),
            // e15, e25, e35
            (self.group0() * Simd32x3::from(other.group0()[1])),
        );
    }
}
impl AntiWedge<SphereOnOrigin> for LineOnOrigin {
    type Output = DipoleOnOrigin;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        return DipoleOnOrigin::from_groups(/* e41, e42, e43, e45 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl InfixAntiWedge for Motor {}
impl AntiWedge<AntiCircleOnOrigin> for Motor {
    type Output = MultiVector;
    fn anti_wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[3]) * other.group1()),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<AntiDipoleOnOrigin> for Motor {
    type Output = MultiVector;
    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([(self.group0()[3] * other.group0()[3]), 0.0, 0.0, 0.0]),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<AntiFlatOrigin> for Motor {
    type Output = AntiFlectorOnOrigin;
    fn anti_wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiFlectorOnOrigin::from_groups(/* e321, e1, e2, e3 */ (swizzle!(self.group0(), 3, 0, 1, 2) * Simd32x4::from(other[e321])));
    }
}
impl AntiWedge<AntiFlatPoint> for Motor {
    type Output = AntiFlector;
    fn anti_wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl AntiWedge<AntiFlector> for Motor {
    type Output = AntiFlector;
    fn anti_wedge(self, other: AntiFlector) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e1, e2, e3, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group1()[3]),
            ]),
        );
    }
}
impl AntiWedge<AntiFlectorOnOrigin> for Motor {
    type Output = AntiFlectorOnOrigin;
    fn anti_wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return AntiFlectorOnOrigin::from_groups(/* e321, e1, e2, e3 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            ((self.group0()[0] * other.group0()[0]) + (self.group0()[3] * other.group0()[1])),
            ((self.group0()[1] * other.group0()[0]) + (self.group0()[3] * other.group0()[2])),
            ((self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group0()[3])),
        ]));
    }
}
impl AntiWedge<AntiLine> for Motor {
    type Output = AntiMotor;
    fn anti_wedge(self, other: AntiLine) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl AntiWedge<AntiLineOnOrigin> for Motor {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<AntiMotor> for Motor {
    type Output = AntiMotor;
    fn anti_wedge(self, other: AntiMotor) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e15, e25, e35, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group1()[3]),
            ]),
        );
    }
}
impl AntiWedge<AntiMotorOnOrigin> for Motor {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ (Simd32x4::from(self.group0()[3]) * other.group0()));
    }
}
impl AntiWedge<AntiPlane> for Motor {
    type Output = AntiPlane;
    fn anti_wedge(self, other: AntiPlane) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ (Simd32x4::from(self.group0()[3]) * other.group0()));
    }
}
impl AntiWedge<AntiPlaneOnOrigin> for Motor {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (Simd32x3::from(self.group0()[3]) * other.group0()));
    }
}
impl AntiWedge<AntiScalar> for Motor {
    type Output = Motor;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (self.group0() * Simd32x4::from(other[e12345])),
            // e235, e315, e125, e5
            (self.group1() * Simd32x4::from(other[e12345])),
        );
    }
}
impl AntiWedge<AntiSphereOnOrigin> for Motor {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ (Simd32x4::from(self.group0()[3]) * other.group0()));
    }
}
impl AntiWedge<Circle> for Motor {
    type Output = MultiVector;
    fn anti_wedge(self, other: Circle) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e5
            (-(self.group1()[2] * other.group1()[2])
                - (self.group1()[1] * other.group1()[1])
                - (self.group1()[0] * other.group1()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[3], other.group1()[0], other.group1()[1], other.group1()[2]])),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[3]) * other.group2()),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<CircleAligningOrigin> for Motor {
    type Output = MultiVector;
    fn anti_wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group1()[1] * other.group0()[2]),
                (self.group1()[2] * other.group0()[0]),
                (self.group1()[0] * other.group0()[1]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e5
            (-(self.group1()[2] * other.group1()[2])
                - (self.group1()[1] * other.group1()[1])
                - (self.group1()[0] * other.group1()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
            ]),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[3]) * other.group2()),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<CircleAtInfinity> for Motor {
    type Output = MultiVector;
    fn anti_wedge(self, other: CircleAtInfinity) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                0.0,
            ]),
            // e5
            (-(self.group1()[2] * other.group0()[3])
                - (self.group1()[1] * other.group0()[2])
                - (self.group1()[0] * other.group0()[1])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[3]) * other.group1()),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<CircleAtOrigin> for Motor {
    type Output = MultiVector;
    fn anti_wedge(self, other: CircleAtOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group1()[1] * other.group0()[2]),
                (self.group1()[2] * other.group0()[0]),
                (self.group1()[0] * other.group0()[1]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e5
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[3]) * other.group1()),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<CircleOnOrigin> for Motor {
    type Output = MultiVector;
    fn anti_wedge(self, other: CircleOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group1()[1] * other.group0()[2]),
                (self.group1()[2] * other.group0()[0]),
                (self.group1()[0] * other.group0()[1]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e5
            (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
            ]),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<CircleOrthogonalOrigin> for Motor {
    type Output = MultiVector;
    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e5
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([(self.group0()[3] * other.group0()[3]), 0.0, 0.0, 0.0]),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[3]) * other.group1()),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<Dipole> for Motor {
    type Output = MultiVector;
    fn anti_wedge(self, other: Dipole) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]])),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]])),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[3]) * other.group1()),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<DipoleAligningOrigin> for Motor {
    type Output = MultiVector;
    fn anti_wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<DipoleAtInfinity> for Motor {
    type Output = MultiVector;
    fn anti_wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group1()[3])]),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<DipoleAtOrigin> for Motor {
    type Output = MultiVector;
    fn anti_wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[3]) * other.group1()),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<DipoleOnOrigin> for Motor {
    type Output = MultiVector;
    fn anti_wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<DipoleOrthogonalOrigin> for Motor {
    type Output = MultiVector;
    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[3]) * other.group2()),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[3]) * other.group1()),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<DualNum> for Motor {
    type Output = MultiVector;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(self.group0()[3]) * other.group0()),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            (self.group1()[3] * other.group0()[1]),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[2] * other.group0()[1]),
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<FlatOrigin> for Motor {
    type Output = FlatOrigin;
    fn anti_wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return FlatOrigin::from_groups(/* e45 */ (self.group0()[3] * other[e45]));
    }
}
impl AntiWedge<FlatPoint> for Motor {
    type Output = FlatPoint;
    fn anti_wedge(self, other: FlatPoint) -> Self::Output {
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ (Simd32x4::from(self.group0()[3]) * other.group0()));
    }
}
impl AntiWedge<FlatPointAtInfinity> for Motor {
    type Output = FlatPointAtInfinity;
    fn anti_wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return FlatPointAtInfinity::from_groups(/* e15, e25, e35 */ (Simd32x3::from(self.group0()[3]) * other.group0()));
    }
}
impl AntiWedge<Flector> for Motor {
    type Output = Flector;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group1()[1] * other.group1()[2]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[3] * other.group0()[0])),
                ((self.group1()[2] * other.group1()[0]) + (self.group0()[1] * other.group1()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group1()[0] * other.group1()[1]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group0()[2])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[3]) * other.group1()),
        );
    }
}
impl AntiWedge<FlectorAtInfinity> for Motor {
    type Output = FlectorAtInfinity;
    fn anti_wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ Simd32x4::from([
            ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
            ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
            (self.group0()[3] * other.group0()[3]),
        ]));
    }
}
impl AntiWedge<FlectorOnOrigin> for Motor {
    type Output = Flector;
    fn anti_wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (swizzle!(other.group0(), 3, 1, 2, 0) * Simd32x4::from([self.group1()[1], self.group1()[2], self.group1()[0], self.group0()[3]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (self.group0()[3] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl AntiWedge<Horizon> for Motor {
    type Output = FlectorAtInfinity;
    fn anti_wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ (self.group0() * Simd32x4::from(other[e3215])));
    }
}
impl AntiWedge<Infinity> for Motor {
    type Output = Infinity;
    fn anti_wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return Infinity::from_groups(/* e5 */ (self.group0()[3] * other[e5]));
    }
}
impl AntiWedge<Line> for Motor {
    type Output = Motor;
    fn anti_wedge(self, other: Line) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl AntiWedge<LineAtInfinity> for Motor {
    type Output = MotorAtInfinity;
    fn anti_wedge(self, other: LineAtInfinity) -> Self::Output {
        return MotorAtInfinity::from_groups(/* e235, e315, e125, e5 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<LineOnOrigin> for Motor {
    type Output = Motor;
    fn anti_wedge(self, other: LineOnOrigin) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl AntiWedge<Motor> for Motor {
    type Output = Motor;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e235, e315, e125, e5
            ((Simd32x4::from(self.group0()[3]) * other.group1()) + (self.group1() * Simd32x4::from(other.group0()[3]))),
        );
    }
}
impl AntiWedge<MotorAtInfinity> for Motor {
    type Output = MotorAtInfinity;
    fn anti_wedge(self, other: MotorAtInfinity) -> Self::Output {
        return MotorAtInfinity::from_groups(/* e235, e315, e125, e5 */ (Simd32x4::from(self.group0()[3]) * other.group0()));
    }
}
impl AntiWedge<MotorOnOrigin> for Motor {
    type Output = Motor;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e235, e315, e125, e5
            (self.group1() * Simd32x4::from(other.group0()[3])),
        );
    }
}
impl AntiWedge<MultiVector> for Motor {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group0()[3] * other.group0()[0]) + (self.group1()[3] * other.group9()[3])),
                (self.group0()[3] * other.group0()[1]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group1()[1] * other.group7()[2]) + (self.group0()[0] * other.group6()[0]) + (self.group0()[3] * other.group1()[0])),
                ((self.group1()[2] * other.group7()[0]) + (self.group0()[1] * other.group6()[0]) + (self.group0()[3] * other.group1()[1])),
                ((self.group1()[0] * other.group7()[1]) + (self.group0()[2] * other.group6()[0]) + (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group1()[3]),
            ]),
            // e5
            ((self.group0()[3] * other[e1]) + (self.group1()[3] * other.group0()[1])),
            // e41, e42, e43, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group9()[3]) + (self.group0()[3] * other.group3()[0])),
                ((self.group0()[1] * other.group9()[3]) + (self.group0()[3] * other.group3()[1])),
                ((self.group0()[2] * other.group9()[3]) + (self.group0()[3] * other.group3()[2])),
                (self.group0()[3] * other.group3()[3]),
            ]),
            // e15, e25, e35
            ((Simd32x3::from(other[e45]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (Simd32x3::from(self.group0()[3]) * other.group4())
                + Simd32x3::from([(self.group1()[1] * other.group9()[2]), (self.group1()[2] * other.group9()[0]), (self.group1()[0] * other.group9()[1])])),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[3]) * other.group5()) + (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))),
            // e321, e415, e425, e435
            Simd32x4::from([
                (self.group0()[3] * other.group6()[0]),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[3] * other.group6()[1])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[3] * other.group6()[2])),
                ((self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group6()[3])),
            ]),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * other.group7()),
            // e235, e315, e125
            ((Simd32x3::from(self.group0()[3]) * other.group8()) + (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))),
            // e4235, e4315, e4125, e1234
            (Simd32x4::from(self.group0()[3]) * other.group9()),
            // e3215
            (self.group0()[3] * other[e45]),
        );
    }
}
impl AntiWedge<NullCircleAtOrigin> for Motor {
    type Output = MultiVector;
    fn anti_wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group1()[1] * other.group0()[2]),
                (self.group1()[2] * other.group0()[0]),
                (self.group1()[0] * other.group0()[1]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<NullDipoleAtOrigin> for Motor {
    type Output = MultiVector;
    fn anti_wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<NullSphereAtOrigin> for Motor {
    type Output = MultiVector;
    fn anti_wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(self.group1()[3] * other[e1234]), 0.0]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([(self.group0()[0] * other[e1234]), (self.group0()[1] * other[e1234]), (self.group0()[2] * other[e1234]), 0.0]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            (Simd32x3::from(other[e1234]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other[e1234])]),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<Origin> for Motor {
    type Output = Origin;
    fn anti_wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return Origin::from_groups(/* e4 */ (self.group0()[3] * other[e4]));
    }
}
impl AntiWedge<Plane> for Motor {
    type Output = Flector;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[2] * other.group0()[0])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[3]) * other.group0()),
        );
    }
}
impl AntiWedge<PlaneOnOrigin> for Motor {
    type Output = Flector;
    fn anti_wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group1()[1] * other.group0()[2]),
                (self.group1()[2] * other.group0()[0]),
                (self.group1()[0] * other.group0()[1]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl AntiWedge<RoundPoint> for Motor {
    type Output = RoundPoint;
    fn anti_wedge(self, other: RoundPoint) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e4, e5
            (Simd32x2::from(self.group0()[3]) * other.group1()),
        );
    }
}
impl AntiWedge<RoundPointAtOrigin> for Motor {
    type Output = RoundPointAtOrigin;
    fn anti_wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return RoundPointAtOrigin::from_groups(/* e4, e5 */ (Simd32x2::from(self.group0()[3]) * other.group0()));
    }
}
impl AntiWedge<Scalar> for Motor {
    type Output = Scalar;
    fn anti_wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self.group0()[3] * other[scalar]));
    }
}
impl AntiWedge<Sphere> for Motor {
    type Output = MultiVector;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(self.group1()[3] * other.group1()[0]), 0.0]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[2] * other.group1()[0]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35
            ((Simd32x3::from(other.group1()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]))
                + (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group1()[1], self.group1()[2], self.group1()[0]]))),
            // e23, e31, e12
            (Simd32x3::from(other.group1()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]])),
            // e3215
            (self.group0()[3] * other.group1()[1]),
        );
    }
}
impl AntiWedge<SphereAtOrigin> for Motor {
    type Output = MultiVector;
    fn anti_wedge(self, other: SphereAtOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(self.group1()[3] * other.group0()[0]), 0.0]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                0.0,
            ]),
            // e15, e25, e35
            (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e23, e31, e12
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[0])]),
            // e3215
            (self.group0()[3] * other.group0()[1]),
        );
    }
}
impl AntiWedge<SphereOnOrigin> for Motor {
    type Output = MultiVector;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(self.group1()[3] * other.group0()[3]), 0.0]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35
            Simd32x3::from([(self.group1()[1] * other.group0()[2]), (self.group1()[2] * other.group0()[0]), (self.group1()[0] * other.group0()[1])]),
            // e23, e31, e12
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e3215
            0.0,
        );
    }
}
impl InfixAntiWedge for MotorAtInfinity {}
impl AntiWedge<AntiCircleOnOrigin> for MotorAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiDipoleOnOrigin> for MotorAtInfinity {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ Simd32x3::from([
            (self.group0()[1] * other.group0()[2]),
            (self.group0()[2] * other.group0()[0]),
            (self.group0()[0] * other.group0()[1]),
        ]));
    }
}
impl AntiWedge<AntiScalar> for MotorAtInfinity {
    type Output = MotorAtInfinity;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return MotorAtInfinity::from_groups(/* e235, e315, e125, e5 */ (self.group0() * Simd32x4::from(other[e12345])));
    }
}
impl AntiWedge<Circle> for MotorAtInfinity {
    type Output = AntiPlane;
    fn anti_wedge(self, other: Circle) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group0()[1] * other.group0()[2]),
            (self.group0()[2] * other.group0()[0]),
            (self.group0()[0] * other.group0()[1]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<CircleAligningOrigin> for MotorAtInfinity {
    type Output = AntiPlane;
    fn anti_wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group0()[1] * other.group0()[2]),
            (self.group0()[2] * other.group0()[0]),
            (self.group0()[0] * other.group0()[1]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<CircleAtInfinity> for MotorAtInfinity {
    type Output = Infinity;
    fn anti_wedge(self, other: CircleAtInfinity) -> Self::Output {
        return Infinity::from_groups(
            // e5
            (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
        );
    }
}
impl AntiWedge<CircleAtOrigin> for MotorAtInfinity {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: CircleAtOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(
            // e1, e2, e3
            (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]])),
        );
    }
}
impl AntiWedge<CircleOnOrigin> for MotorAtInfinity {
    type Output = AntiPlane;
    fn anti_wedge(self, other: CircleOnOrigin) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group0()[1] * other.group0()[2]),
            (self.group0()[2] * other.group0()[0]),
            (self.group0()[0] * other.group0()[1]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<CircleOrthogonalOrigin> for MotorAtInfinity {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ Simd32x3::from([
            (self.group0()[1] * other.group0()[2]),
            (self.group0()[2] * other.group0()[0]),
            (self.group0()[0] * other.group0()[1]),
        ]));
    }
}
impl AntiWedge<Dipole> for MotorAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: Dipole) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<DipoleAligningOrigin> for MotorAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<DipoleAtOrigin> for MotorAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<DipoleOnOrigin> for MotorAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<DipoleOrthogonalOrigin> for MotorAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<DualNum> for MotorAtInfinity {
    type Output = MotorAtInfinity;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        return MotorAtInfinity::from_groups(/* e235, e315, e125, e5 */ (self.group0() * Simd32x4::from(other.group0()[1])));
    }
}
impl AntiWedge<Flector> for MotorAtInfinity {
    type Output = FlatPointAtInfinity;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        return FlatPointAtInfinity::from_groups(/* e15, e25, e35 */ Simd32x3::from([
            (self.group0()[1] * other.group1()[2]),
            (self.group0()[2] * other.group1()[0]),
            (self.group0()[0] * other.group1()[1]),
        ]));
    }
}
impl AntiWedge<FlectorOnOrigin> for MotorAtInfinity {
    type Output = FlatPointAtInfinity;
    fn anti_wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return FlatPointAtInfinity::from_groups(/* e15, e25, e35 */ Simd32x3::from([
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[1]),
            (self.group0()[0] * other.group0()[2]),
        ]));
    }
}
impl AntiWedge<Line> for MotorAtInfinity {
    type Output = Infinity;
    fn anti_wedge(self, other: Line) -> Self::Output {
        return Infinity::from_groups(
            // e5
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<LineOnOrigin> for MotorAtInfinity {
    type Output = Infinity;
    fn anti_wedge(self, other: LineOnOrigin) -> Self::Output {
        return Infinity::from_groups(
            // e5
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<Motor> for MotorAtInfinity {
    type Output = MotorAtInfinity;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        return MotorAtInfinity::from_groups(/* e235, e315, e125, e5 */ (self.group0() * Simd32x4::from(other.group0()[3])));
    }
}
impl AntiWedge<MotorOnOrigin> for MotorAtInfinity {
    type Output = MotorAtInfinity;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        return MotorAtInfinity::from_groups(/* e235, e315, e125, e5 */ (self.group0() * Simd32x4::from(other.group0()[3])));
    }
}
impl AntiWedge<MultiVector> for MotorAtInfinity {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(self.group0()[3] * other.group9()[3]), 0.0]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[1] * other.group7()[2]),
                (self.group0()[2] * other.group7()[0]),
                (self.group0()[0] * other.group7()[1]),
                0.0,
            ]),
            // e5
            (self.group0()[3] * other.group0()[1]),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from([(self.group0()[1] * other.group9()[2]), (self.group0()[2] * other.group9()[0]), (self.group0()[0] * other.group9()[1])]),
            // e23, e31, e12
            (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<NullCircleAtOrigin> for MotorAtInfinity {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(
            // e1, e2, e3
            (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]])),
        );
    }
}
impl AntiWedge<NullDipoleAtOrigin> for MotorAtInfinity {
    type Output = Scalar;
    fn anti_wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<NullSphereAtOrigin> for MotorAtInfinity {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ (self.group0() * Simd32x4::from(other[e1234])));
    }
}
impl AntiWedge<Plane> for MotorAtInfinity {
    type Output = FlatPointAtInfinity;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        return FlatPointAtInfinity::from_groups(/* e15, e25, e35 */ Simd32x3::from([
            (self.group0()[1] * other.group0()[2]),
            (self.group0()[2] * other.group0()[0]),
            (self.group0()[0] * other.group0()[1]),
        ]));
    }
}
impl AntiWedge<PlaneOnOrigin> for MotorAtInfinity {
    type Output = FlatPointAtInfinity;
    fn anti_wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return FlatPointAtInfinity::from_groups(
            // e15, e25, e35
            (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]])),
        );
    }
}
impl AntiWedge<Sphere> for MotorAtInfinity {
    type Output = AntiMotor;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (self.group0() * Simd32x4::from(other.group1()[0])),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                0.0,
            ]),
        );
    }
}
impl AntiWedge<SphereAtOrigin> for MotorAtInfinity {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: SphereAtOrigin) -> Self::Output {
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ (self.group0() * Simd32x4::from(other.group0()[0])));
    }
}
impl AntiWedge<SphereOnOrigin> for MotorAtInfinity {
    type Output = AntiMotor;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                0.0,
            ]),
        );
    }
}
impl InfixAntiWedge for MotorOnOrigin {}
impl AntiWedge<AntiCircleOnOrigin> for MotorOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[3]) * other.group1()),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<AntiDipoleOnOrigin> for MotorOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([(self.group0()[3] * other.group0()[3]), 0.0, 0.0, 0.0]),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<AntiFlatOrigin> for MotorOnOrigin {
    type Output = AntiFlectorOnOrigin;
    fn anti_wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiFlectorOnOrigin::from_groups(/* e321, e1, e2, e3 */ (swizzle!(self.group0(), 3, 0, 1, 2) * Simd32x4::from(other[e321])));
    }
}
impl AntiWedge<AntiFlatPoint> for MotorOnOrigin {
    type Output = AntiFlector;
    fn anti_wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl AntiWedge<AntiFlector> for MotorOnOrigin {
    type Output = AntiFlector;
    fn anti_wedge(self, other: AntiFlector) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e1, e2, e3, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group1()[3]),
            ]),
        );
    }
}
impl AntiWedge<AntiFlectorOnOrigin> for MotorOnOrigin {
    type Output = AntiFlectorOnOrigin;
    fn anti_wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return AntiFlectorOnOrigin::from_groups(/* e321, e1, e2, e3 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            ((self.group0()[0] * other.group0()[0]) + (self.group0()[3] * other.group0()[1])),
            ((self.group0()[1] * other.group0()[0]) + (self.group0()[3] * other.group0()[2])),
            ((self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group0()[3])),
        ]));
    }
}
impl AntiWedge<AntiLine> for MotorOnOrigin {
    type Output = AntiMotor;
    fn anti_wedge(self, other: AntiLine) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl AntiWedge<AntiLineOnOrigin> for MotorOnOrigin {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<AntiMotor> for MotorOnOrigin {
    type Output = AntiMotor;
    fn anti_wedge(self, other: AntiMotor) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e15, e25, e35, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group1()[3]),
            ]),
        );
    }
}
impl AntiWedge<AntiMotorOnOrigin> for MotorOnOrigin {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ (Simd32x4::from(self.group0()[3]) * other.group0()));
    }
}
impl AntiWedge<AntiPlane> for MotorOnOrigin {
    type Output = AntiPlane;
    fn anti_wedge(self, other: AntiPlane) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ (Simd32x4::from(self.group0()[3]) * other.group0()));
    }
}
impl AntiWedge<AntiPlaneOnOrigin> for MotorOnOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (Simd32x3::from(self.group0()[3]) * other.group0()));
    }
}
impl AntiWedge<AntiScalar> for MotorOnOrigin {
    type Output = MotorOnOrigin;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ (self.group0() * Simd32x4::from(other[e12345])));
    }
}
impl AntiWedge<AntiSphereOnOrigin> for MotorOnOrigin {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ (Simd32x4::from(self.group0()[3]) * other.group0()));
    }
}
impl AntiWedge<Circle> for MotorOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: Circle) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e5
            (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[3], other.group1()[0], other.group1()[1], other.group1()[2]])),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[3]) * other.group2()),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<CircleAligningOrigin> for MotorOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e5
            (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
            ]),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[3]) * other.group2()),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<CircleAtInfinity> for MotorOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: CircleAtInfinity) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                0.0,
            ]),
            // e5
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[3]) * other.group1()),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<CircleAtOrigin> for MotorOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: CircleAtOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e5
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[3]) * other.group1()),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<CircleOnOrigin> for MotorOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: CircleOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
            ]),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<CircleOrthogonalOrigin> for MotorOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e5
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([(self.group0()[3] * other.group0()[3]), 0.0, 0.0, 0.0]),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[3]) * other.group1()),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<Dipole> for MotorOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: Dipole) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]])),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]])),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[3]) * other.group1()),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<DipoleAligningOrigin> for MotorOnOrigin {
    type Output = DipoleAligningOrigin;
    fn anti_wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return DipoleAligningOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e15, e25, e35, e45
            (Simd32x4::from(self.group0()[3]) * other.group1()),
        );
    }
}
impl AntiWedge<DipoleAtInfinity> for MotorOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group1()[3])]),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<DipoleAtOrigin> for MotorOnOrigin {
    type Output = DipoleAtOrigin;
    fn anti_wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return DipoleAtOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[3]) * other.group1()),
        );
    }
}
impl AntiWedge<DipoleOnOrigin> for MotorOnOrigin {
    type Output = DipoleOnOrigin;
    fn anti_wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return DipoleOnOrigin::from_groups(/* e41, e42, e43, e45 */ (Simd32x4::from(self.group0()[3]) * other.group0()));
    }
}
impl AntiWedge<DipoleOrthogonalOrigin> for MotorOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[3]) * other.group2()),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[3]) * other.group1()),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<DualNum> for MotorOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(self.group0()[3]) * other.group0()),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[2] * other.group0()[1]),
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<FlatOrigin> for MotorOnOrigin {
    type Output = FlatOrigin;
    fn anti_wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return FlatOrigin::from_groups(/* e45 */ (self.group0()[3] * other[e45]));
    }
}
impl AntiWedge<FlatPoint> for MotorOnOrigin {
    type Output = FlatPoint;
    fn anti_wedge(self, other: FlatPoint) -> Self::Output {
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ (Simd32x4::from(self.group0()[3]) * other.group0()));
    }
}
impl AntiWedge<FlatPointAtInfinity> for MotorOnOrigin {
    type Output = FlatPointAtInfinity;
    fn anti_wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return FlatPointAtInfinity::from_groups(/* e15, e25, e35 */ (Simd32x3::from(self.group0()[3]) * other.group0()));
    }
}
impl AntiWedge<Flector> for MotorOnOrigin {
    type Output = Flector;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group0()[2])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[3]) * other.group1()),
        );
    }
}
impl AntiWedge<FlectorAtInfinity> for MotorOnOrigin {
    type Output = FlectorAtInfinity;
    fn anti_wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ Simd32x4::from([
            ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
            ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
            (self.group0()[3] * other.group0()[3]),
        ]));
    }
}
impl AntiWedge<FlectorOnOrigin> for MotorOnOrigin {
    type Output = FlectorOnOrigin;
    fn anti_wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ (Simd32x4::from(self.group0()[3]) * other.group0()));
    }
}
impl AntiWedge<Horizon> for MotorOnOrigin {
    type Output = FlectorAtInfinity;
    fn anti_wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ (self.group0() * Simd32x4::from(other[e3215])));
    }
}
impl AntiWedge<Infinity> for MotorOnOrigin {
    type Output = Infinity;
    fn anti_wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return Infinity::from_groups(/* e5 */ (self.group0()[3] * other[e5]));
    }
}
impl AntiWedge<Line> for MotorOnOrigin {
    type Output = Motor;
    fn anti_wedge(self, other: Line) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl AntiWedge<LineAtInfinity> for MotorOnOrigin {
    type Output = MotorAtInfinity;
    fn anti_wedge(self, other: LineAtInfinity) -> Self::Output {
        return MotorAtInfinity::from_groups(/* e235, e315, e125, e5 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<LineOnOrigin> for MotorOnOrigin {
    type Output = LineOnOrigin;
    fn anti_wedge(self, other: LineOnOrigin) -> Self::Output {
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (Simd32x3::from(self.group0()[3]) * other.group0()));
    }
}
impl AntiWedge<Motor> for MotorOnOrigin {
    type Output = Motor;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[3]) * other.group1()),
        );
    }
}
impl AntiWedge<MotorAtInfinity> for MotorOnOrigin {
    type Output = MotorAtInfinity;
    fn anti_wedge(self, other: MotorAtInfinity) -> Self::Output {
        return MotorAtInfinity::from_groups(/* e235, e315, e125, e5 */ (Simd32x4::from(self.group0()[3]) * other.group0()));
    }
}
impl AntiWedge<MotorOnOrigin> for MotorOnOrigin {
    type Output = MotorOnOrigin;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
            ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
            (self.group0()[3] * other.group0()[3]),
        ]));
    }
}
impl AntiWedge<MultiVector> for MotorOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(self.group0()[3]) * other.group0()),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[0] * other.group6()[0]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group6()[0]) + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group6()[0]) + (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group1()[3]),
            ]),
            // e5
            (self.group0()[3] * other[e1]),
            // e41, e42, e43, e45
            Simd32x4::from([
                ((self.group0()[0] * other.group9()[3]) + (self.group0()[3] * other.group3()[0])),
                ((self.group0()[1] * other.group9()[3]) + (self.group0()[3] * other.group3()[1])),
                ((self.group0()[2] * other.group9()[3]) + (self.group0()[3] * other.group3()[2])),
                (self.group0()[3] * other.group3()[3]),
            ]),
            // e15, e25, e35
            ((Simd32x3::from(other[e45]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])) + (Simd32x3::from(self.group0()[3]) * other.group4())),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[3]) * other.group5()),
            // e321, e415, e425, e435
            Simd32x4::from([
                (self.group0()[3] * other.group6()[0]),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[3] * other.group6()[1])),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[3] * other.group6()[2])),
                ((self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group6()[3])),
            ]),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * other.group7()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[3]) * other.group8()),
            // e4235, e4315, e4125, e1234
            (Simd32x4::from(self.group0()[3]) * other.group9()),
            // e3215
            (self.group0()[3] * other[e45]),
        );
    }
}
impl AntiWedge<NullCircleAtOrigin> for MotorOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<NullDipoleAtOrigin> for MotorOnOrigin {
    type Output = NullDipoleAtOrigin;
    fn anti_wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return NullDipoleAtOrigin::from_groups(/* e41, e42, e43 */ (Simd32x3::from(self.group0()[3]) * other.group0()));
    }
}
impl AntiWedge<NullSphereAtOrigin> for MotorOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([(self.group0()[0] * other[e1234]), (self.group0()[1] * other[e1234]), (self.group0()[2] * other[e1234]), 0.0]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other[e1234])]),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<Origin> for MotorOnOrigin {
    type Output = Origin;
    fn anti_wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return Origin::from_groups(/* e4 */ (self.group0()[3] * other[e4]));
    }
}
impl AntiWedge<Plane> for MotorOnOrigin {
    type Output = Flector;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[3]) * other.group0()),
        );
    }
}
impl AntiWedge<PlaneOnOrigin> for MotorOnOrigin {
    type Output = FlectorOnOrigin;
    fn anti_wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ Simd32x4::from([
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
        ]));
    }
}
impl AntiWedge<RoundPoint> for MotorOnOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: RoundPoint) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e4, e5
            (Simd32x2::from(self.group0()[3]) * other.group1()),
        );
    }
}
impl AntiWedge<RoundPointAtOrigin> for MotorOnOrigin {
    type Output = RoundPointAtOrigin;
    fn anti_wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return RoundPointAtOrigin::from_groups(/* e4, e5 */ (Simd32x2::from(self.group0()[3]) * other.group0()));
    }
}
impl AntiWedge<Scalar> for MotorOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self.group0()[3] * other[scalar]));
    }
}
impl AntiWedge<Sphere> for MotorOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[2] * other.group1()[0]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35
            (Simd32x3::from(other.group1()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]])),
            // e3215
            (self.group0()[3] * other.group1()[1]),
        );
    }
}
impl AntiWedge<SphereAtOrigin> for MotorOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: SphereAtOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                0.0,
            ]),
            // e15, e25, e35
            (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[0])]),
            // e3215
            (self.group0()[3] * other.group0()[1]),
        );
    }
}
impl AntiWedge<SphereOnOrigin> for MotorOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e3215
            0.0,
        );
    }
}
impl InfixAntiWedge for MultiVector {}
impl AntiWedge<AntiCircleOnOrigin> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group8()[2] * other.group0()[2])
                    - (self.group8()[1] * other.group0()[1])
                    - (self.group8()[0] * other.group0()[0])
                    - (self.group6()[3] * other.group1()[2])
                    - (self.group6()[1] * other.group1()[0])
                    - (self.group6()[2] * other.group1()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group9()[1] * other.group1()[2]),
                (self.group9()[2] * other.group1()[0]),
                (self.group9()[0] * other.group1()[1]),
                ((self.group9()[2] * other.group0()[2]) + (self.group9()[0] * other.group0()[0]) + (self.group9()[1] * other.group0()[1])),
            ]),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[1]) * other.group1()),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<AntiDipoleOnOrigin> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group4()[2] * other.group0()[2])
                    - (self.group4()[1] * other.group0()[1])
                    - (self.group3()[3] * other.group0()[3])
                    - (self.group4()[0] * other.group0()[0])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group6()[1] * other.group0()[3]) + (self.group8()[1] * other.group0()[2])),
                ((self.group6()[2] * other.group0()[3]) + (self.group8()[2] * other.group0()[0])),
                ((self.group6()[3] * other.group0()[3]) + (self.group8()[0] * other.group0()[1])),
                (-(self.group6()[3] * other.group0()[2]) - (self.group6()[1] * other.group0()[0]) - (self.group6()[2] * other.group0()[1])),
            ]),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group9()[2] * other.group0()[1] * -1.0),
                (self.group9()[0] * other.group0()[2] * -1.0),
                (self.group9()[1] * other.group0()[0] * -1.0),
                0.0,
            ]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            (Simd32x3::from([(self[e45] * other.group0()[0]), (self.group9()[1] * other.group0()[3]), (self[e45] * other.group0()[2])]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e321, e415, e425, e435
            Simd32x4::from([(self.group0()[1] * other.group0()[3]), 0.0, 0.0, 0.0]),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<AntiFlatOrigin> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(self.group3()[3] * other[e321] * -1.0), 0.0]),
            // e1, e2, e3, e4
            Simd32x4::from([(self.group6()[1] * other[e321]), (self.group6()[2] * other[e321]), (self.group6()[3] * other[e321]), 0.0]),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            (Simd32x3::from(other[e321]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]) * Simd32x3::from(-1.0)),
            // e321, e415, e425, e435
            Simd32x4::from([(self.group0()[1] * other[e321]), 0.0, 0.0, 0.0]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<AntiFlatPoint> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: AntiFlatPoint) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group3()[3] * other.group0()[3])
                    - (self.group3()[2] * other.group0()[2])
                    - (self.group3()[0] * other.group0()[0])
                    - (self.group3()[1] * other.group0()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group6()[1] * other.group0()[3]) + (self.group7()[2] * other.group0()[1])),
                ((self.group6()[2] * other.group0()[3]) + (self.group7()[0] * other.group0()[2])),
                ((self.group6()[3] * other.group0()[3]) + (self.group7()[1] * other.group0()[0])),
                0.0,
            ]),
            // e5
            (-(self.group6()[3] * other.group0()[2]) - (self.group6()[1] * other.group0()[0]) - (self.group6()[2] * other.group0()[1])),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from([(self.group9()[2] * other.group0()[1]), (self.group9()[0] * other.group0()[2]), (self.group9()[1] * other.group0()[0])]),
            // e23, e31, e12
            (Simd32x3::from([(self.group9()[3] * other.group0()[0]), (self.group9()[1] * other.group0()[3]), (self.group9()[3] * other.group0()[2])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e321, e415, e425, e435
            Simd32x4::from([(self.group0()[1] * other.group0()[3]), 0.0, 0.0, 0.0]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<AntiFlector> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: AntiFlector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group9()[3] * other.group1()[3]) + (self.group9()[2] * other.group1()[2]) + (self.group9()[0] * other.group1()[0]) + (self.group9()[1] * other.group1()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group7()[2] * other.group0()[1]) + (self.group0()[1] * other.group1()[0]) + (self.group6()[1] * other.group0()[3])),
                ((self.group7()[0] * other.group0()[2]) + (self.group0()[1] * other.group1()[1]) + (self.group6()[2] * other.group0()[3])),
                ((self.group7()[1] * other.group0()[0]) + (self.group0()[1] * other.group1()[2]) + (self.group6()[3] * other.group0()[3])),
                0.0,
            ]),
            // e5
            (self.group0()[1] * other.group1()[3]),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from([(self.group9()[2] * other.group0()[1]), (self.group9()[0] * other.group0()[2]), (self.group9()[1] * other.group0()[0])]),
            // e23, e31, e12
            (Simd32x3::from([(self.group9()[3] * other.group0()[0]), (self.group9()[1] * other.group0()[3]), (self.group9()[3] * other.group0()[2])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e321, e415, e425, e435
            Simd32x4::from([(self.group0()[1] * other.group0()[3]), 0.0, 0.0, 0.0]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<AntiFlectorOnOrigin> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group9()[2] * other.group0()[3]) + (self.group9()[0] * other.group0()[1]) + (self.group9()[1] * other.group0()[2])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[1]) + (self.group6()[1] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[2]) + (self.group6()[2] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group6()[3] * other.group0()[0])),
                0.0,
            ]),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]) * Simd32x3::from(-1.0)),
            // e321, e415, e425, e435
            Simd32x4::from([(self.group0()[1] * other.group0()[0]), 0.0, 0.0, 0.0]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<AntiLine> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: AntiLine) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group7()[2] * other.group1()[2])
                    - (self.group7()[1] * other.group1()[1])
                    - (self.group7()[0] * other.group1()[0])
                    - (self.group6()[3] * other.group0()[2])
                    - (self.group6()[1] * other.group0()[0])
                    - (self.group6()[2] * other.group0()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group9()[1] * other.group0()[2]) + (self.group9()[3] * other.group1()[0])),
                ((self.group9()[2] * other.group0()[0]) + (self.group9()[3] * other.group1()[1])),
                ((self.group9()[0] * other.group0()[1]) + (self.group9()[3] * other.group1()[2])),
                0.0,
            ]),
            // e5
            (-(self.group9()[2] * other.group1()[2]) - (self.group9()[0] * other.group1()[0]) - (self.group9()[1] * other.group1()[1])),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[1]) * other.group1()),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[1]) * other.group0()),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<AntiLineOnOrigin> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group6()[3] * other.group0()[2]) - (self.group6()[1] * other.group0()[0]) - (self.group6()[2] * other.group0()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group9()[1] * other.group0()[2]),
                (self.group9()[2] * other.group0()[0]),
                (self.group9()[0] * other.group0()[1]),
                0.0,
            ]),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[1]) * other.group0()),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<AntiMotor> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: AntiMotor) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([((self.group0()[1] * other.group0()[3]) + (self.group1()[3] * other.group1()[3])), 0.0]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group9()[3] * other.group1()[0]) + (self.group3()[0] * other.group1()[3]) + (self.group9()[1] * other.group0()[2])),
                ((self.group9()[3] * other.group1()[1]) + (self.group3()[1] * other.group1()[3]) + (self.group9()[2] * other.group0()[0])),
                ((self.group9()[3] * other.group1()[2]) + (self.group3()[2] * other.group1()[3]) + (self.group9()[0] * other.group0()[1])),
                0.0,
            ]),
            // e5
            (self.group3()[3] * other.group1()[3]),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            ((Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group6()[1], self.group6()[2], self.group6()[3]]))),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])) + (self.group7() * Simd32x3::from(other.group1()[3]))),
            // e321, e415, e425, e435
            Simd32x4::from([(self.group9()[3] * other.group1()[3]), 0.0, 0.0, 0.0]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            (self.group0()[1] * other.group1()[3]),
        );
    }
}
impl AntiWedge<AntiMotorOnOrigin> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(self.group0()[1] * other.group0()[3]), 0.0]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group9()[1] * other.group0()[2]),
                (self.group9()[2] * other.group0()[0]),
                (self.group9()[0] * other.group0()[1]),
                0.0,
            ]),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<AntiPlane> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: AntiPlane) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group9()[3] * other.group0()[3]) + (self.group9()[2] * other.group0()[2]) + (self.group9()[0] * other.group0()[0]) + (self.group9()[1] * other.group0()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                0.0,
            ]),
            // e5
            (self.group0()[1] * other.group0()[3]),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<AntiPlaneOnOrigin> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group9()[2] * other.group0()[2]) + (self.group9()[0] * other.group0()[0]) + (self.group9()[1] * other.group0()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                0.0,
            ]),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<AntiScalar> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (self.group0() * Simd32x2::from(other[e12345])),
            // e1, e2, e3, e4
            (self.group1() * Simd32x4::from(other[e12345])),
            // e5
            (self[e1] * other[e12345]),
            // e41, e42, e43, e45
            (self.group3() * Simd32x4::from(other[e12345])),
            // e15, e25, e35
            (self.group4() * Simd32x3::from(other[e12345])),
            // e23, e31, e12
            (self.group5() * Simd32x3::from(other[e12345])),
            // e321, e415, e425, e435
            (self.group6() * Simd32x4::from(other[e12345])),
            // e423, e431, e412
            (self.group7() * Simd32x3::from(other[e12345])),
            // e235, e315, e125
            (self.group8() * Simd32x3::from(other[e12345])),
            // e4235, e4315, e4125, e1234
            (self.group9() * Simd32x4::from(other[e12345])),
            // e3215
            (self[e45] * other[e12345]),
        );
    }
}
impl AntiWedge<AntiSphereOnOrigin> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self[e45] * other.group0()[3]) + (self.group9()[2] * other.group0()[2]) + (self.group9()[0] * other.group0()[0]) + (self.group9()[1] * other.group0()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[1]) * other.group0()),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<Circle> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group5()[2] * other.group1()[2])
                    - (self.group5()[1] * other.group1()[1])
                    - (self.group5()[0] * other.group1()[0])
                    - (self.group4()[2] * other.group0()[2])
                    - (self.group4()[1] * other.group0()[1])
                    - (self.group4()[0] * other.group0()[0])
                    - (self.group3()[3] * other.group0()[3])
                    - (self.group3()[2] * other.group2()[2])
                    - (self.group3()[0] * other.group2()[0])
                    - (self.group3()[1] * other.group2()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group8()[1] * other.group0()[2]) + (self.group7()[2] * other.group2()[1]) + (self.group6()[0] * other.group1()[0]) + (self.group6()[1] * other.group0()[3])),
                ((self.group8()[2] * other.group0()[0]) + (self.group7()[0] * other.group2()[2]) + (self.group6()[0] * other.group1()[1]) + (self.group6()[2] * other.group0()[3])),
                ((self.group8()[0] * other.group0()[1]) + (self.group7()[1] * other.group2()[0]) + (self.group6()[0] * other.group1()[2]) + (self.group6()[3] * other.group0()[3])),
                (-(self.group7()[2] * other.group1()[2])
                    - (self.group7()[1] * other.group1()[1])
                    - (self.group7()[0] * other.group1()[0])
                    - (self.group6()[3] * other.group0()[2])
                    - (self.group6()[1] * other.group0()[0])
                    - (self.group6()[2] * other.group0()[1])),
            ]),
            // e5
            (-(self.group8()[2] * other.group1()[2])
                - (self.group8()[1] * other.group1()[1])
                - (self.group8()[0] * other.group1()[0])
                - (self.group6()[3] * other.group2()[2])
                - (self.group6()[1] * other.group2()[0])
                - (self.group6()[2] * other.group2()[1])),
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group9()[2] * other.group0()[1] * -1.0),
                (self.group9()[0] * other.group0()[2] * -1.0),
                (self.group9()[1] * other.group0()[0] * -1.0),
                (-(self.group9()[2] * other.group1()[2]) - (self.group9()[0] * other.group1()[0]) - (self.group9()[1] * other.group1()[1])),
            ]),
            // e15, e25, e35
            ((swizzle!(other.group2(), 1, 2, 0) * Simd32x3::from([self.group9()[2], self.group9()[0], self.group9()[1]])) + (Simd32x3::from(self[e45]) * other.group1())),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group9()[3] * other.group2()[0]) + (self[e45] * other.group0()[0])),
                (self.group9()[1] * other.group0()[3] * -1.0),
                ((self.group9()[3] * other.group2()[2]) + (self[e45] * other.group0()[2])),
            ]),
            // e321, e415, e425, e435
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[3], other.group1()[0], other.group1()[1], other.group1()[2]])),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * other.group2()),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<CircleAligningOrigin> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: CircleAligningOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group5()[2] * other.group1()[2])
                    - (self.group5()[1] * other.group1()[1])
                    - (self.group5()[0] * other.group1()[0])
                    - (self.group4()[2] * other.group0()[2])
                    - (self.group4()[1] * other.group0()[1])
                    - (self.group4()[0] * other.group0()[0])
                    - (self.group3()[2] * other.group2()[2])
                    - (self.group3()[0] * other.group2()[0])
                    - (self.group3()[1] * other.group2()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group8()[1] * other.group0()[2]) + (self.group6()[0] * other.group1()[0]) + (self.group7()[2] * other.group2()[1])),
                ((self.group8()[2] * other.group0()[0]) + (self.group6()[0] * other.group1()[1]) + (self.group7()[0] * other.group2()[2])),
                ((self.group8()[0] * other.group0()[1]) + (self.group6()[0] * other.group1()[2]) + (self.group7()[1] * other.group2()[0])),
                (-(self.group7()[2] * other.group1()[2])
                    - (self.group7()[1] * other.group1()[1])
                    - (self.group7()[0] * other.group1()[0])
                    - (self.group6()[3] * other.group0()[2])
                    - (self.group6()[1] * other.group0()[0])
                    - (self.group6()[2] * other.group0()[1])),
            ]),
            // e5
            (-(self.group8()[2] * other.group1()[2])
                - (self.group8()[1] * other.group1()[1])
                - (self.group8()[0] * other.group1()[0])
                - (self.group6()[3] * other.group2()[2])
                - (self.group6()[1] * other.group2()[0])
                - (self.group6()[2] * other.group2()[1])),
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group9()[2] * other.group0()[1] * -1.0),
                (self.group9()[0] * other.group0()[2] * -1.0),
                (self.group9()[1] * other.group0()[0] * -1.0),
                (-(self.group9()[2] * other.group1()[2]) - (self.group9()[0] * other.group1()[0]) - (self.group9()[1] * other.group1()[1])),
            ]),
            // e15, e25, e35
            ((swizzle!(other.group2(), 1, 2, 0) * Simd32x3::from([self.group9()[2], self.group9()[0], self.group9()[1]])) + (Simd32x3::from(self[e45]) * other.group1())),
            // e23, e31, e12
            ((Simd32x3::from(self.group9()[3]) * other.group2()) + (Simd32x3::from(self[e45]) * other.group0())),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
            ]),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[1]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * other.group2()),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<CircleAtInfinity> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: CircleAtInfinity) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group5()[2] * other.group0()[3])
                    - (self.group5()[1] * other.group0()[2])
                    - (self.group5()[0] * other.group0()[1])
                    - (self.group3()[3] * other.group0()[0])
                    - (self.group3()[2] * other.group1()[2])
                    - (self.group3()[0] * other.group1()[0])
                    - (self.group3()[1] * other.group1()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group7()[2] * other.group1()[1]) + (self.group6()[0] * other.group0()[1]) + (self.group6()[1] * other.group0()[0])),
                ((self.group7()[0] * other.group1()[2]) + (self.group6()[0] * other.group0()[2]) + (self.group6()[2] * other.group0()[0])),
                ((self.group7()[1] * other.group1()[0]) + (self.group6()[0] * other.group0()[3]) + (self.group6()[3] * other.group0()[0])),
                (-(self.group7()[2] * other.group0()[3]) - (self.group7()[0] * other.group0()[1]) - (self.group7()[1] * other.group0()[2])),
            ]),
            // e5
            (-(self.group8()[2] * other.group0()[3])
                - (self.group8()[1] * other.group0()[2])
                - (self.group8()[0] * other.group0()[1])
                - (self.group6()[3] * other.group1()[2])
                - (self.group6()[1] * other.group1()[0])
                - (self.group6()[2] * other.group1()[1])),
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group9()[3] * other.group0()[1]),
                (self.group9()[3] * other.group0()[2]),
                (self.group9()[3] * other.group0()[3]),
                (-(self.group9()[2] * other.group0()[3]) - (self.group9()[0] * other.group0()[1]) - (self.group9()[1] * other.group0()[2])),
            ]),
            // e15, e25, e35
            ((swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group9()[2], self.group9()[0], self.group9()[1]]))
                + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[3]]))),
            // e23, e31, e12
            (Simd32x3::from([(self.group9()[3] * other.group1()[0]), (self.group9()[1] * other.group0()[0]), (self.group9()[3] * other.group1()[2])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e321, e415, e425, e435
            (Simd32x4::from(self.group0()[1]) * other.group0()),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * other.group1()),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<CircleAtOrigin> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: CircleAtOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group4()[2] * other.group0()[2])
                    - (self.group4()[1] * other.group0()[1])
                    - (self.group4()[0] * other.group0()[0])
                    - (self.group3()[2] * other.group1()[2])
                    - (self.group3()[0] * other.group1()[0])
                    - (self.group3()[1] * other.group1()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group7()[2] * other.group1()[1]) + (self.group8()[1] * other.group0()[2])),
                ((self.group7()[0] * other.group1()[2]) + (self.group8()[2] * other.group0()[0])),
                ((self.group7()[1] * other.group1()[0]) + (self.group8()[0] * other.group0()[1])),
                (-(self.group6()[3] * other.group0()[2]) - (self.group6()[1] * other.group0()[0]) - (self.group6()[2] * other.group0()[1])),
            ]),
            // e5
            (-(self.group6()[3] * other.group1()[2]) - (self.group6()[1] * other.group1()[0]) - (self.group6()[2] * other.group1()[1])),
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group9()[2] * other.group0()[1] * -1.0),
                (self.group9()[0] * other.group0()[2] * -1.0),
                (self.group9()[1] * other.group0()[0] * -1.0),
                0.0,
            ]),
            // e15, e25, e35
            (swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group9()[2], self.group9()[0], self.group9()[1]])),
            // e23, e31, e12
            ((Simd32x3::from(self.group9()[3]) * other.group1()) + (Simd32x3::from(self[e45]) * other.group0())),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[1]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * other.group1()),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<CircleOnOrigin> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: CircleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group5()[2] * other.group1()[2])
                    - (self.group5()[1] * other.group1()[1])
                    - (self.group5()[0] * other.group1()[0])
                    - (self.group4()[2] * other.group0()[2])
                    - (self.group4()[0] * other.group0()[0])
                    - (self.group4()[1] * other.group0()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group6()[0] * other.group1()[0]) + (self.group8()[1] * other.group0()[2])),
                ((self.group6()[0] * other.group1()[1]) + (self.group8()[2] * other.group0()[0])),
                ((self.group6()[0] * other.group1()[2]) + (self.group8()[0] * other.group0()[1])),
                (-(self.group7()[2] * other.group1()[2])
                    - (self.group7()[1] * other.group1()[1])
                    - (self.group7()[0] * other.group1()[0])
                    - (self.group6()[3] * other.group0()[2])
                    - (self.group6()[1] * other.group0()[0])
                    - (self.group6()[2] * other.group0()[1])),
            ]),
            // e5
            (-(self.group8()[2] * other.group1()[2]) - (self.group8()[0] * other.group1()[0]) - (self.group8()[1] * other.group1()[1])),
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group9()[2] * other.group0()[1] * -1.0),
                (self.group9()[0] * other.group0()[2] * -1.0),
                (self.group9()[1] * other.group0()[0] * -1.0),
                (-(self.group9()[2] * other.group1()[2]) - (self.group9()[0] * other.group1()[0]) - (self.group9()[1] * other.group1()[1])),
            ]),
            // e15, e25, e35
            (Simd32x3::from(self[e45]) * other.group1()),
            // e23, e31, e12
            (Simd32x3::from(self[e45]) * other.group0()),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
            ]),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[1]) * other.group0()),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<CircleOrthogonalOrigin> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group4()[2] * other.group0()[2])
                    - (self.group4()[1] * other.group0()[1])
                    - (self.group4()[0] * other.group0()[0])
                    - (self.group3()[3] * other.group0()[3])
                    - (self.group3()[2] * other.group1()[2])
                    - (self.group3()[0] * other.group1()[0])
                    - (self.group3()[1] * other.group1()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group8()[1] * other.group0()[2]) + (self.group6()[1] * other.group0()[3]) + (self.group7()[2] * other.group1()[1])),
                ((self.group8()[2] * other.group0()[0]) + (self.group6()[2] * other.group0()[3]) + (self.group7()[0] * other.group1()[2])),
                ((self.group8()[0] * other.group0()[1]) + (self.group6()[3] * other.group0()[3]) + (self.group7()[1] * other.group1()[0])),
                (-(self.group6()[3] * other.group0()[2]) - (self.group6()[1] * other.group0()[0]) - (self.group6()[2] * other.group0()[1])),
            ]),
            // e5
            (-(self.group6()[3] * other.group1()[2]) - (self.group6()[1] * other.group1()[0]) - (self.group6()[2] * other.group1()[1])),
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group9()[2] * other.group0()[1] * -1.0),
                (self.group9()[0] * other.group0()[2] * -1.0),
                (self.group9()[1] * other.group0()[0] * -1.0),
                0.0,
            ]),
            // e15, e25, e35
            (swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group9()[2], self.group9()[0], self.group9()[1]])),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group9()[3] * other.group1()[0]) + (self[e45] * other.group0()[0])),
                (self.group9()[1] * other.group0()[3] * -1.0),
                ((self.group9()[3] * other.group1()[2]) + (self[e45] * other.group0()[2])),
            ]),
            // e321, e415, e425, e435
            Simd32x4::from([(self.group0()[1] * other.group0()[3]), 0.0, 0.0, 0.0]),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * other.group1()),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<Dipole> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group8()[2] * other.group0()[2])
                    - (self.group8()[1] * other.group0()[1])
                    - (self.group8()[0] * other.group0()[0])
                    - (self.group7()[2] * other.group2()[2])
                    - (self.group7()[1] * other.group2()[1])
                    - (self.group7()[0] * other.group2()[0])
                    - (self.group6()[3] * other.group1()[2])
                    - (self.group6()[2] * other.group1()[1])
                    - (self.group6()[0] * other.group2()[3])
                    - (self.group6()[1] * other.group1()[0])),
                0.0,
            ]),
            // e1, e2, e3, e4
            ((swizzle!(self.group9(), 1, 2, 0, 3) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group2()[3]]))
                + (swizzle!(self.group9(), 3, 3, 3, 2) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[2]]))
                + Simd32x4::from([0.0, 0.0, 0.0, ((self.group9()[0] * other.group0()[0]) + (self.group9()[1] * other.group0()[1]))])),
            // e5
            (-(self[e45] * other.group2()[3]) - (self.group9()[2] * other.group2()[2]) - (self.group9()[0] * other.group2()[0]) - (self.group9()[1] * other.group2()[1])),
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]])),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]])),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[1]) * other.group1()),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<DipoleAligningOrigin> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group8()[2] * other.group0()[2])
                    - (self.group8()[1] * other.group0()[1])
                    - (self.group8()[0] * other.group0()[0])
                    - (self.group7()[2] * other.group1()[2])
                    - (self.group7()[1] * other.group1()[1])
                    - (self.group6()[0] * other.group1()[3])
                    - (self.group7()[0] * other.group1()[0])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group9()[3] * other.group1()[0]),
                (self.group9()[3] * other.group1()[1]),
                (self.group9()[3] * other.group1()[2]),
                ((self.group9()[3] * other.group1()[3]) + (self.group9()[2] * other.group0()[2]) + (self.group9()[0] * other.group0()[0]) + (self.group9()[1] * other.group0()[1])),
            ]),
            // e5
            (-(self[e45] * other.group1()[3]) - (self.group9()[2] * other.group1()[2]) - (self.group9()[0] * other.group1()[0]) - (self.group9()[1] * other.group1()[1])),
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<DipoleAtInfinity> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: DipoleAtInfinity) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group7()[2] * other.group1()[2])
                    - (self.group7()[1] * other.group1()[1])
                    - (self.group7()[0] * other.group1()[0])
                    - (self.group6()[3] * other.group0()[2])
                    - (self.group6()[2] * other.group0()[1])
                    - (self.group6()[0] * other.group1()[3])
                    - (self.group6()[1] * other.group0()[0])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group9()[1] * other.group0()[2]) + (self.group9()[3] * other.group1()[0])),
                ((self.group9()[2] * other.group0()[0]) + (self.group9()[3] * other.group1()[1])),
                ((self.group9()[0] * other.group0()[1]) + (self.group9()[3] * other.group1()[2])),
                (self.group9()[3] * other.group1()[3]),
            ]),
            // e5
            (-(self[e45] * other.group1()[3]) - (self.group9()[2] * other.group1()[2]) - (self.group9()[0] * other.group1()[0]) - (self.group9()[1] * other.group1()[1])),
            // e41, e42, e43, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group1()[3])]),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[1]) * other.group0()),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<DipoleAtOrigin> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group8()[2] * other.group0()[2])
                    - (self.group8()[1] * other.group0()[1])
                    - (self.group8()[0] * other.group0()[0])
                    - (self.group7()[2] * other.group1()[2])
                    - (self.group7()[0] * other.group1()[0])
                    - (self.group7()[1] * other.group1()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group9()[3] * other.group1()[0]),
                (self.group9()[3] * other.group1()[1]),
                (self.group9()[3] * other.group1()[2]),
                ((self.group9()[2] * other.group0()[2]) + (self.group9()[0] * other.group0()[0]) + (self.group9()[1] * other.group0()[1])),
            ]),
            // e5
            (-(self.group9()[2] * other.group1()[2]) - (self.group9()[0] * other.group1()[0]) - (self.group9()[1] * other.group1()[1])),
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[1]) * other.group1()),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<DipoleOnOrigin> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: DipoleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group8()[2] * other.group0()[2])
                    - (self.group8()[1] * other.group0()[1])
                    - (self.group6()[0] * other.group0()[3])
                    - (self.group8()[0] * other.group0()[0])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e45] * other.group0()[0] * -1.0),
                (self[e45] * other.group0()[1] * -1.0),
                (self[e45] * other.group0()[2] * -1.0),
                ((self.group9()[3] * other.group0()[3]) + (self.group9()[2] * other.group0()[2]) + (self.group9()[0] * other.group0()[0]) + (self.group9()[1] * other.group0()[1])),
            ]),
            // e5
            (self[e45] * other.group0()[3] * -1.0),
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[1]) * other.group0()),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<DipoleOrthogonalOrigin> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group8()[2] * other.group0()[2])
                    - (self.group8()[1] * other.group0()[1])
                    - (self.group8()[0] * other.group0()[0])
                    - (self.group7()[2] * other.group2()[2])
                    - (self.group7()[1] * other.group2()[1])
                    - (self.group7()[0] * other.group2()[0])
                    - (self.group6()[3] * other.group1()[2])
                    - (self.group6()[1] * other.group1()[0])
                    - (self.group6()[2] * other.group1()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            ((swizzle!(self.group9(), 1, 2, 0, 2) * Simd32x4::from([other.group1()[2], other.group1()[0], other.group1()[1], other.group0()[2]]))
                + (swizzle!(self.group9(), 3, 3, 3, 0) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[0]]))
                + Simd32x4::from([0.0, 0.0, 0.0, (self.group9()[1] * other.group0()[1])])),
            // e5
            (-(self.group9()[2] * other.group2()[2]) - (self.group9()[0] * other.group2()[0]) - (self.group9()[1] * other.group2()[1])),
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[1]) * other.group2()),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[1]) * other.group1()),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<DualNum> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
                (self.group0()[1] * other.group0()[1]),
            ]),
            // e1, e2, e3, e4
            (self.group1() * Simd32x4::from(other.group0()[1])),
            // e5
            (self[e1] * other.group0()[1]),
            // e41, e42, e43, e45
            (self.group3() * Simd32x4::from(other.group0()[1])),
            // e15, e25, e35
            (self.group4() * Simd32x3::from(other.group0()[1])),
            // e23, e31, e12
            (self.group5() * Simd32x3::from(other.group0()[1])),
            // e321, e415, e425, e435
            (self.group6() * Simd32x4::from(other.group0()[1])),
            // e423, e431, e412
            (self.group7() * Simd32x3::from(other.group0()[1])),
            // e235, e315, e125
            (self.group8() * Simd32x3::from(other.group0()[1])),
            // e4235, e4315, e4125, e1234
            (self.group9() * Simd32x4::from(other.group0()[1])),
            // e3215
            (self[e45] * other.group0()[1]),
        );
    }
}
impl AntiWedge<FlatOrigin> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(self.group6()[0] * other[e45] * -1.0), 0.0]),
            // e1, e2, e3, e4
            Simd32x4::from([0.0, 0.0, 0.0, (self.group9()[3] * other[e45])]),
            // e5
            (self[e45] * other[e45] * -1.0),
            // e41, e42, e43, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other[e45])]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<FlatPoint> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group7()[2] * other.group0()[2])
                    - (self.group7()[1] * other.group0()[1])
                    - (self.group6()[0] * other.group0()[3])
                    - (self.group7()[0] * other.group0()[0])),
                0.0,
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group9()[3]) * other.group0()),
            // e5
            (-(self[e45] * other.group0()[3]) - (self.group9()[2] * other.group0()[2]) - (self.group9()[0] * other.group0()[0]) - (self.group9()[1] * other.group0()[1])),
            // e41, e42, e43, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[3])]),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<FlatPointAtInfinity> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group7()[2] * other.group0()[2]) - (self.group7()[0] * other.group0()[0]) - (self.group7()[1] * other.group0()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group9()[3] * other.group0()[0]),
                (self.group9()[3] * other.group0()[1]),
                (self.group9()[3] * other.group0()[2]),
                0.0,
            ]),
            // e5
            (-(self.group9()[2] * other.group0()[2]) - (self.group9()[0] * other.group0()[0]) - (self.group9()[1] * other.group0()[1])),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[1]) * other.group0()),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<Flector> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group1()[3] * other.group1()[3]) + (self.group1()[2] * other.group1()[2]) + (self.group1()[0] * other.group1()[0]) + (self.group1()[1] * other.group1()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group9()[3] * other.group0()[0]) + (self.group3()[0] * other.group1()[3]) + (self.group5()[1] * other.group1()[2])),
                ((self.group9()[3] * other.group0()[1]) + (self.group3()[1] * other.group1()[3]) + (self.group5()[2] * other.group1()[0])),
                ((self.group9()[3] * other.group0()[2]) + (self.group3()[2] * other.group1()[3]) + (self.group5()[0] * other.group1()[1])),
                (self.group9()[3] * other.group0()[3]),
            ]),
            // e5
            ((self.group4()[2] * other.group1()[2]) + (self.group4()[1] * other.group1()[1]) + (self.group3()[3] * other.group1()[3]) + (self.group4()[0] * other.group1()[0])),
            // e41, e42, e43, e45
            (Simd32x4::from([
                (self.group7()[1] * other.group1()[2]),
                (self.group7()[2] * other.group1()[0]),
                (self.group7()[0] * other.group1()[1]),
                (self.group0()[1] * other.group0()[3]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35
            ((swizzle!(self.group8(), 1, 2, 0) * Simd32x3::from([other.group1()[2], other.group1()[0], other.group1()[1]]))
                + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group6()[1], self.group6()[2], self.group6()[3]]))),
            // e23, e31, e12
            (Simd32x3::from([(self.group7()[0] * other.group1()[3]), (self.group6()[0] * other.group1()[1]), (self.group7()[2] * other.group1()[3])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e321, e415, e425, e435
            (swizzle!(self.group9(), 3, 1, 2, 0) * swizzle!(other.group1(), 3, 2, 0, 1) * Simd32x4::from([1.0, -1.0, -1.0, -1.0])),
            // e423, e431, e412
            (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])),
            // e235, e315, e125
            (Simd32x3::from([(self.group9()[0] * other.group1()[3]), (self[e45] * other.group1()[1]), (self.group9()[2] * other.group1()[3])]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[1] * other.group1()[1]),
                (self.group0()[1] * other.group1()[2]),
                0.0,
            ]),
            // e3215
            (self.group0()[1] * other.group1()[3]),
        );
    }
}
impl AntiWedge<FlectorAtInfinity> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(self.group1()[3] * other.group0()[3]), 0.0]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group3()[0] * other.group0()[3]) + (self.group9()[3] * other.group0()[0])),
                ((self.group3()[1] * other.group0()[3]) + (self.group9()[3] * other.group0()[1])),
                ((self.group3()[2] * other.group0()[3]) + (self.group9()[3] * other.group0()[2])),
                0.0,
            ]),
            // e5
            (self.group3()[3] * other.group0()[3]),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            ((Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group6()[1], self.group6()[2], self.group6()[3]]))),
            // e23, e31, e12
            (self.group7() * Simd32x3::from(other.group0()[3])),
            // e321, e415, e425, e435
            Simd32x4::from([(self.group9()[3] * other.group0()[3]), 0.0, 0.0, 0.0]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            (self.group0()[1] * other.group0()[3]),
        );
    }
}
impl AntiWedge<FlectorOnOrigin> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: FlectorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group1()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])),
                0.0,
            ]),
            // e1, e2, e3, e4
            (swizzle!(other.group0(), 3, 1, 2, 0) * Simd32x4::from([self.group5()[1], self.group5()[2], self.group5()[0], self.group9()[3]])),
            // e5
            ((self.group4()[2] * other.group0()[3]) + (self.group4()[0] * other.group0()[1]) + (self.group4()[1] * other.group0()[2])),
            // e41, e42, e43, e45
            (swizzle!(other.group0(), 3, 1, 2, 0)
                * Simd32x4::from([self.group7()[1], self.group7()[2], self.group7()[0], self.group0()[1]])
                * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35
            (swizzle!(self.group8(), 1, 2, 0) * Simd32x3::from([other.group0()[3], other.group0()[1], other.group0()[2]])),
            // e23, e31, e12
            (Simd32x3::from(self.group6()[0]) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[3]]) * Simd32x3::from(-1.0)),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group9()[1] * other.group0()[3] * -1.0),
                (self.group9()[2] * other.group0()[1] * -1.0),
                (self.group9()[0] * other.group0()[2] * -1.0),
            ]),
            // e423, e431, e412
            (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[3]])),
            // e235, e315, e125
            (Simd32x3::from(self[e45]) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[3]]) * Simd32x3::from(-1.0)),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[1] * other.group0()[3]),
                0.0,
            ]),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<Horizon> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(self.group1()[3] * other[e3215]), 0.0]),
            // e1, e2, e3, e4
            Simd32x4::from([(self.group3()[0] * other[e3215]), (self.group3()[1] * other[e3215]), (self.group3()[2] * other[e3215]), 0.0]),
            // e5
            (self.group3()[3] * other[e3215]),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            (Simd32x3::from(other[e3215]) * Simd32x3::from([self.group6()[1], self.group6()[2], self.group6()[3]])),
            // e23, e31, e12
            (self.group7() * Simd32x3::from(other[e3215])),
            // e321, e415, e425, e435
            Simd32x4::from([(self.group9()[3] * other[e3215]), 0.0, 0.0, 0.0]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (Simd32x3::from(other[e3215]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            (self.group0()[1] * other[e3215]),
        );
    }
}
impl AntiWedge<Infinity> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(self.group9()[3] * other[e5]), 0.0]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            (self.group0()[1] * other[e5]),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<Line> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group5()[2] * other.group0()[2])
                    - (self.group5()[1] * other.group0()[1])
                    - (self.group5()[0] * other.group0()[0])
                    - (self.group3()[2] * other.group1()[2])
                    - (self.group3()[0] * other.group1()[0])
                    - (self.group3()[1] * other.group1()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group6()[0] * other.group0()[0]) + (self.group7()[2] * other.group1()[1])),
                ((self.group6()[0] * other.group0()[1]) + (self.group7()[0] * other.group1()[2])),
                ((self.group6()[0] * other.group0()[2]) + (self.group7()[1] * other.group1()[0])),
                (-(self.group7()[2] * other.group0()[2]) - (self.group7()[0] * other.group0()[0]) - (self.group7()[1] * other.group0()[1])),
            ]),
            // e5
            (-(self.group8()[2] * other.group0()[2])
                - (self.group8()[1] * other.group0()[1])
                - (self.group8()[0] * other.group0()[0])
                - (self.group6()[3] * other.group1()[2])
                - (self.group6()[1] * other.group1()[0])
                - (self.group6()[2] * other.group1()[1])),
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group9()[3] * other.group0()[0]),
                (self.group9()[3] * other.group0()[1]),
                (self.group9()[3] * other.group0()[2]),
                (-(self.group9()[2] * other.group0()[2]) - (self.group9()[0] * other.group0()[0]) - (self.group9()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35
            ((swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group9()[2], self.group9()[0], self.group9()[1]])) + (Simd32x3::from(self[e45]) * other.group0())),
            // e23, e31, e12
            (Simd32x3::from(self.group9()[3]) * other.group1()),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * other.group1()),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<LineAtInfinity> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: LineAtInfinity) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group3()[2] * other.group0()[2]) - (self.group3()[0] * other.group0()[0]) - (self.group3()[1] * other.group0()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group7()[2] * other.group0()[1]),
                (self.group7()[0] * other.group0()[2]),
                (self.group7()[1] * other.group0()[0]),
                0.0,
            ]),
            // e5
            (-(self.group6()[3] * other.group0()[2]) - (self.group6()[1] * other.group0()[0]) - (self.group6()[2] * other.group0()[1])),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group9()[2], self.group9()[0], self.group9()[1]])),
            // e23, e31, e12
            (Simd32x3::from(self.group9()[3]) * other.group0()),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * other.group0()),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<LineOnOrigin> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: LineOnOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group5()[2] * other.group0()[2]) - (self.group5()[0] * other.group0()[0]) - (self.group5()[1] * other.group0()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group6()[0] * other.group0()[0]),
                (self.group6()[0] * other.group0()[1]),
                (self.group6()[0] * other.group0()[2]),
                (-(self.group7()[2] * other.group0()[2]) - (self.group7()[0] * other.group0()[0]) - (self.group7()[1] * other.group0()[1])),
            ]),
            // e5
            (-(self.group8()[2] * other.group0()[2]) - (self.group8()[0] * other.group0()[0]) - (self.group8()[1] * other.group0()[1])),
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group9()[3] * other.group0()[0]),
                (self.group9()[3] * other.group0()[1]),
                (self.group9()[3] * other.group0()[2]),
                (-(self.group9()[2] * other.group0()[2]) - (self.group9()[0] * other.group0()[0]) - (self.group9()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35
            (Simd32x3::from(self[e45]) * other.group0()),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<Motor> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group9()[3] * other.group1()[3])),
                (self.group0()[1] * other.group0()[3]),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group7()[2] * other.group1()[1]) + (self.group1()[0] * other.group0()[3]) + (self.group6()[0] * other.group0()[0])),
                ((self.group7()[0] * other.group1()[2]) + (self.group1()[1] * other.group0()[3]) + (self.group6()[0] * other.group0()[1])),
                ((self.group7()[1] * other.group1()[0]) + (self.group1()[2] * other.group0()[3]) + (self.group6()[0] * other.group0()[2])),
                (self.group1()[3] * other.group0()[3]),
            ]),
            // e5
            ((self.group0()[1] * other.group1()[3]) + (self[e1] * other.group0()[3])),
            // e41, e42, e43, e45
            Simd32x4::from([
                ((self.group3()[0] * other.group0()[3]) + (self.group9()[3] * other.group0()[0])),
                ((self.group3()[1] * other.group0()[3]) + (self.group9()[3] * other.group0()[1])),
                ((self.group3()[2] * other.group0()[3]) + (self.group9()[3] * other.group0()[2])),
                (self.group3()[3] * other.group0()[3]),
            ]),
            // e15, e25, e35
            ((Simd32x3::from(self[e45]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))
                + (self.group4() * Simd32x3::from(other.group0()[3]))
                + Simd32x3::from([(self.group9()[2] * other.group1()[1]), (self.group9()[0] * other.group1()[2]), (self.group9()[1] * other.group1()[0])])),
            // e23, e31, e12
            ((self.group5() * Simd32x3::from(other.group0()[3])) + (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))),
            // e321, e415, e425, e435
            Simd32x4::from([
                (self.group6()[0] * other.group0()[3]),
                ((self.group0()[1] * other.group0()[0]) + (self.group6()[1] * other.group0()[3])),
                ((self.group0()[1] * other.group0()[1]) + (self.group6()[2] * other.group0()[3])),
                ((self.group0()[1] * other.group0()[2]) + (self.group6()[3] * other.group0()[3])),
            ]),
            // e423, e431, e412
            (self.group7() * Simd32x3::from(other.group0()[3])),
            // e235, e315, e125
            ((Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])) + (self.group8() * Simd32x3::from(other.group0()[3]))),
            // e4235, e4315, e4125, e1234
            (self.group9() * Simd32x4::from(other.group0()[3])),
            // e3215
            (self[e45] * other.group0()[3]),
        );
    }
}
impl AntiWedge<MotorAtInfinity> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: MotorAtInfinity) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(self.group9()[3] * other.group0()[3]), 0.0]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group7()[2] * other.group0()[1]),
                (self.group7()[0] * other.group0()[2]),
                (self.group7()[1] * other.group0()[0]),
                0.0,
            ]),
            // e5
            (self.group0()[1] * other.group0()[3]),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from([(self.group9()[2] * other.group0()[1]), (self.group9()[0] * other.group0()[2]), (self.group9()[1] * other.group0()[0])]),
            // e23, e31, e12
            (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<MotorOnOrigin> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (self.group0() * Simd32x2::from(other.group0()[3])),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group6()[0] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[3]) + (self.group6()[0] * other.group0()[1])),
                ((self.group1()[2] * other.group0()[3]) + (self.group6()[0] * other.group0()[2])),
                (self.group1()[3] * other.group0()[3]),
            ]),
            // e5
            (self[e1] * other.group0()[3]),
            // e41, e42, e43, e45
            Simd32x4::from([
                ((self.group3()[0] * other.group0()[3]) + (self.group9()[3] * other.group0()[0])),
                ((self.group3()[1] * other.group0()[3]) + (self.group9()[3] * other.group0()[1])),
                ((self.group3()[2] * other.group0()[3]) + (self.group9()[3] * other.group0()[2])),
                (self.group3()[3] * other.group0()[3]),
            ]),
            // e15, e25, e35
            ((self.group4() * Simd32x3::from(other.group0()[3])) + (Simd32x3::from(self[e45]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e23, e31, e12
            (self.group5() * Simd32x3::from(other.group0()[3])),
            // e321, e415, e425, e435
            Simd32x4::from([
                (self.group6()[0] * other.group0()[3]),
                ((self.group0()[1] * other.group0()[0]) + (self.group6()[1] * other.group0()[3])),
                ((self.group0()[1] * other.group0()[1]) + (self.group6()[2] * other.group0()[3])),
                ((self.group0()[1] * other.group0()[2]) + (self.group6()[3] * other.group0()[3])),
            ]),
            // e423, e431, e412
            (self.group7() * Simd32x3::from(other.group0()[3])),
            // e235, e315, e125
            (self.group8() * Simd32x3::from(other.group0()[3])),
            // e4235, e4315, e4125, e1234
            (self.group9() * Simd32x4::from(other.group0()[3])),
            // e3215
            (self[e45] * other.group0()[3]),
        );
    }
}
impl AntiWedge<MultiVector> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self[e45] * other.group1()[3])
                    + (self.group9()[3] * other[e1])
                    + (self.group9()[2] * other.group1()[2])
                    + (self.group9()[1] * other.group1()[1])
                    + (self.group9()[0] * other.group1()[0])
                    + (self[e1] * other.group9()[3])
                    + (self.group1()[3] * other[e45])
                    + (self.group1()[2] * other.group9()[2])
                    + (self.group1()[1] * other.group9()[1])
                    + (self.group1()[0] * other.group9()[0])
                    + (self.group0()[0] * other.group0()[1])
                    + (self.group0()[1] * other.group0()[0])),
                (self.group0()[1] * other.group0()[1]),
            ]),
            // e1, e2, e3, e4
            ((Simd32x4::from(self.group9()[3]) * Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group3()[3]]))
                + (swizzle!(self.group9(), 1, 2, 0, 2) * Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group3()[2]]))
                + (Simd32x4::from(self.group0()[1]) * other.group1())
                + (self.group1() * Simd32x4::from(other.group0()[1]))
                + Simd32x4::from([
                    ((self.group8()[1] * other.group7()[2])
                        + (self.group7()[2] * other.group8()[1])
                        + (self.group6()[1] * other.group6()[0])
                        + (self.group6()[0] * other.group6()[1])
                        + (self.group5()[1] * other.group9()[2])
                        + (self.group3()[0] * other[e45])),
                    ((self.group8()[2] * other.group7()[0])
                        + (self.group7()[0] * other.group8()[2])
                        + (self.group6()[2] * other.group6()[0])
                        + (self.group6()[0] * other.group6()[2])
                        + (self.group5()[2] * other.group9()[0])
                        + (self.group3()[1] * other[e45])),
                    ((self.group8()[0] * other.group7()[1])
                        + (self.group7()[1] * other.group8()[0])
                        + (self.group6()[3] * other.group6()[0])
                        + (self.group6()[0] * other.group6()[3])
                        + (self.group5()[0] * other.group9()[1])
                        + (self.group3()[2] * other[e45])),
                    ((self.group9()[1] * other.group3()[1]) + (self.group9()[0] * other.group3()[0])),
                ])),
            // e5
            ((self.group4()[2] * other.group9()[2])
                + (self.group4()[1] * other.group9()[1])
                + (self.group4()[0] * other.group9()[0])
                + (self.group3()[3] * other[e45])
                + (self.group0()[1] * other[e1])
                + (self[e1] * other.group0()[1])),
            // e41, e42, e43, e45
            Simd32x4::from([
                (-(self.group7()[1] * other.group9()[2]) - (self.group9()[2] * other.group7()[1])),
                (-(self.group7()[2] * other.group9()[0]) - (self.group9()[0] * other.group7()[2])),
                (-(self.group7()[0] * other.group9()[1]) - (self.group9()[1] * other.group7()[0])),
                ((self.group0()[1] * other.group3()[3]) + (self.group3()[3] * other.group0()[1])),
            ]),
            // e15, e25, e35
            ((Simd32x3::from(self[e45]) * Simd32x3::from([other.group6()[1], other.group6()[2], other.group6()[3]]))
                + (swizzle!(other.group8(), 1, 2, 0) * Simd32x3::from([self.group9()[2], self.group9()[0], self.group9()[1]]))
                + (swizzle!(self.group8(), 1, 2, 0) * Simd32x3::from([other.group9()[2], other.group9()[0], other.group9()[1]]))
                + (Simd32x3::from(other[e45]) * Simd32x3::from([self.group6()[1], self.group6()[2], self.group6()[3]]))
                + (Simd32x3::from(self.group0()[1]) * other.group4())
                + (self.group4() * Simd32x3::from(other.group0()[1]))),
            // e23, e31, e12
            Simd32x3::from([
                ((self[e45] * other.group7()[0])
                    + (self.group9()[3] * other.group8()[0])
                    + (self.group8()[0] * other.group9()[3])
                    + (self.group7()[0] * other[e45])
                    + (self.group0()[1] * other.group5()[0])
                    + (self.group5()[0] * other.group0()[1])),
                (-(self.group6()[0] * other.group9()[1]) - (self.group9()[1] * other.group6()[0])),
                ((self[e45] * other.group7()[2])
                    + (self.group9()[3] * other.group8()[2])
                    + (self.group8()[2] * other.group9()[3])
                    + (self.group7()[2] * other[e45])
                    + (self.group0()[1] * other.group5()[2])
                    + (self.group5()[2] * other.group0()[1])),
            ]),
            // e321, e415, e425, e435
            (swizzle!(other.group9(), 3, 2, 0, 1) * Simd32x4::from([self[e45], self.group9()[1], self.group9()[2], self.group9()[0]]) * Simd32x4::from(-1.0)),
            // e423, e431, e412
            Simd32x3::from([
                ((self.group9()[3] * other.group9()[0]) + (self.group0()[1] * other.group7()[0]) + (self.group7()[0] * other.group0()[1])),
                (self.group9()[1] * other.group9()[3] * -1.0),
                ((self.group9()[3] * other.group9()[2]) + (self.group0()[1] * other.group7()[2]) + (self.group7()[2] * other.group0()[1])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group9()[0] * other[e45]) + (self.group0()[1] * other.group8()[0]) + (self.group8()[0] * other.group0()[1])),
                (self[e45] * other.group9()[1] * -1.0),
                ((self.group9()[2] * other[e45]) + (self.group0()[1] * other.group8()[2]) + (self.group8()[2] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e1234
            ((Simd32x4::from(self.group0()[1]) * other.group9()) + (self.group9() * Simd32x4::from(other.group0()[1]))),
            // e3215
            ((self.group0()[1] * other[e45]) + (self[e45] * other.group0()[1])),
        );
    }
}
impl AntiWedge<NullCircleAtOrigin> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group4()[2] * other.group0()[2]) - (self.group4()[0] * other.group0()[0]) - (self.group4()[1] * other.group0()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group8()[1] * other.group0()[2]),
                (self.group8()[2] * other.group0()[0]),
                (self.group8()[0] * other.group0()[1]),
                (-(self.group6()[3] * other.group0()[2]) - (self.group6()[1] * other.group0()[0]) - (self.group6()[2] * other.group0()[1])),
            ]),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group9()[2] * other.group0()[1] * -1.0),
                (self.group9()[0] * other.group0()[2] * -1.0),
                (self.group9()[1] * other.group0()[0] * -1.0),
                0.0,
            ]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            (Simd32x3::from(self[e45]) * other.group0()),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[1]) * other.group0()),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<NullDipoleAtOrigin> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group8()[2] * other.group0()[2]) - (self.group8()[0] * other.group0()[0]) - (self.group8()[1] * other.group0()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self[e45] * other.group0()[0] * -1.0),
                (self[e45] * other.group0()[1] * -1.0),
                (self[e45] * other.group0()[2] * -1.0),
                ((self.group9()[2] * other.group0()[2]) + (self.group9()[0] * other.group0()[0]) + (self.group9()[1] * other.group0()[1])),
            ]),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<NullSphereAtOrigin> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(self[e1] * other[e1234]), 0.0]),
            // e1, e2, e3, e4
            (Simd32x4::from(other[e1234]) * Simd32x4::from([self.group4()[0], self.group4()[1], self.group4()[2], self.group3()[3]]) * Simd32x4::from(-1.0)),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([(self.group6()[1] * other[e1234]), (self.group6()[2] * other[e1234]), (self.group6()[3] * other[e1234]), 0.0]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            (self.group8() * Simd32x3::from(other[e1234])),
            // e321, e415, e425, e435
            Simd32x4::from([(self[e45] * other[e1234] * -1.0), 0.0, 0.0, 0.0]),
            // e423, e431, e412
            (Simd32x3::from(other[e1234]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other[e1234])]),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<Origin> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(self[e45] * other[e4]), 0.0]),
            // e1, e2, e3, e4
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other[e4])]),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<Plane> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group1()[3] * other.group0()[3]) + (self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group3()[0] * other.group0()[3]) + (self.group5()[1] * other.group0()[2])),
                ((self.group3()[1] * other.group0()[3]) + (self.group5()[2] * other.group0()[0])),
                ((self.group3()[2] * other.group0()[3]) + (self.group5()[0] * other.group0()[1])),
                (-(self.group3()[2] * other.group0()[2]) - (self.group3()[0] * other.group0()[0]) - (self.group3()[1] * other.group0()[1])),
            ]),
            // e5
            ((self.group4()[2] * other.group0()[2]) + (self.group4()[1] * other.group0()[1]) + (self.group3()[3] * other.group0()[3]) + (self.group4()[0] * other.group0()[0])),
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group7()[1] * other.group0()[2] * -1.0),
                (self.group7()[2] * other.group0()[0] * -1.0),
                (self.group7()[0] * other.group0()[1] * -1.0),
                (-(self.group6()[3] * other.group0()[2]) - (self.group6()[1] * other.group0()[0]) - (self.group6()[2] * other.group0()[1])),
            ]),
            // e15, e25, e35
            ((Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group6()[1], self.group6()[2], self.group6()[3]]))
                + (swizzle!(self.group8(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]))),
            // e23, e31, e12
            (Simd32x3::from([(self.group7()[0] * other.group0()[3]), (self.group6()[0] * other.group0()[1]), (self.group7()[2] * other.group0()[3])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e321, e415, e425, e435
            (swizzle!(self.group9(), 3, 1, 2, 0) * swizzle!(other.group0(), 3, 2, 0, 1) * Simd32x4::from([1.0, -1.0, -1.0, -1.0])),
            // e423, e431, e412
            (Simd32x3::from(self.group9()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e235, e315, e125
            (Simd32x3::from([(self.group9()[0] * other.group0()[3]), (self[e45] * other.group0()[1]), (self.group9()[2] * other.group0()[3])]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                0.0,
            ]),
            // e3215
            (self.group0()[1] * other.group0()[3]),
        );
    }
}
impl AntiWedge<PlaneOnOrigin> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: PlaneOnOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group5()[1] * other.group0()[2]),
                (self.group5()[2] * other.group0()[0]),
                (self.group5()[0] * other.group0()[1]),
                (-(self.group3()[2] * other.group0()[2]) - (self.group3()[0] * other.group0()[0]) - (self.group3()[1] * other.group0()[1])),
            ]),
            // e5
            ((self.group4()[2] * other.group0()[2]) + (self.group4()[0] * other.group0()[0]) + (self.group4()[1] * other.group0()[1])),
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group7()[1] * other.group0()[2] * -1.0),
                (self.group7()[2] * other.group0()[0] * -1.0),
                (self.group7()[0] * other.group0()[1] * -1.0),
                (-(self.group6()[3] * other.group0()[2]) - (self.group6()[1] * other.group0()[0]) - (self.group6()[2] * other.group0()[1])),
            ]),
            // e15, e25, e35
            (swizzle!(self.group8(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1)),
            // e23, e31, e12
            (Simd32x3::from(self.group6()[0]) * other.group0() * Simd32x3::from(-1.0)),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group9()[1] * other.group0()[2] * -1.0),
                (self.group9()[2] * other.group0()[0] * -1.0),
                (self.group9()[0] * other.group0()[1] * -1.0),
            ]),
            // e423, e431, e412
            (Simd32x3::from(self.group9()[3]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self[e45]) * other.group0() * Simd32x3::from(-1.0)),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                0.0,
            ]),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<RoundPoint> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self[e45] * other.group1()[0])
                    + (self.group9()[3] * other.group1()[1])
                    + (self.group9()[2] * other.group0()[2])
                    + (self.group9()[0] * other.group0()[0])
                    + (self.group9()[1] * other.group0()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]])),
            // e5
            (self.group0()[1] * other.group1()[1]),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<RoundPointAtOrigin> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([((self.group9()[3] * other.group0()[1]) + (self[e45] * other.group0()[0])), 0.0]),
            // e1, e2, e3, e4
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[0])]),
            // e5
            (self.group0()[1] * other.group0()[1]),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<Scalar> for MultiVector {
    type Output = Scalar;
    fn anti_wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self.group0()[1] * other[scalar]));
    }
}
impl AntiWedge<Sphere> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self[e1] * other.group1()[0])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group1()[2] * other.group0()[2])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                ((self.group3()[0] * other.group1()[1]) + (self.group5()[1] * other.group0()[2])),
                ((self.group3()[1] * other.group1()[1]) + (self.group5()[2] * other.group0()[0])),
                ((self.group3()[2] * other.group1()[1]) + (self.group5()[0] * other.group0()[1])),
                (-(self.group3()[3] * other.group1()[0])
                    - (self.group3()[2] * other.group0()[2])
                    - (self.group3()[0] * other.group0()[0])
                    - (self.group3()[1] * other.group0()[1])),
            ]),
            // e5
            ((self.group4()[2] * other.group0()[2]) + (self.group4()[1] * other.group0()[1]) + (self.group3()[3] * other.group1()[1]) + (self.group4()[0] * other.group0()[0])),
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group7()[1] * other.group0()[2] * -1.0),
                (self.group7()[2] * other.group0()[0] * -1.0),
                (self.group7()[0] * other.group0()[1] * -1.0),
                (-(self.group6()[3] * other.group0()[2]) - (self.group6()[1] * other.group0()[0]) - (self.group6()[2] * other.group0()[1])),
            ]),
            // e15, e25, e35
            ((Simd32x3::from(other.group1()[1]) * Simd32x3::from([self.group6()[1], self.group6()[2], self.group6()[3]]))
                + (swizzle!(self.group8(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1))),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group7()[0] * other.group1()[1]) + (self.group8()[0] * other.group1()[0])),
                (self.group6()[0] * other.group0()[1] * -1.0),
                ((self.group7()[2] * other.group1()[1]) + (self.group8()[2] * other.group1()[0])),
            ]),
            // e321, e415, e425, e435
            (Simd32x4::from([
                (self[e45] * other.group1()[0]),
                (self.group9()[1] * other.group0()[2]),
                (self.group9()[2] * other.group0()[0]),
                (self.group9()[0] * other.group0()[1]),
            ]) * Simd32x4::from(-1.0)),
            // e423, e431, e412
            (Simd32x3::from([(self.group9()[3] * other.group0()[0]), (self.group9()[1] * other.group1()[0]), (self.group9()[3] * other.group0()[2])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e235, e315, e125
            (Simd32x3::from([(self.group9()[0] * other.group1()[1]), (self[e45] * other.group0()[1]), (self.group9()[2] * other.group1()[1])]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e1234
            (Simd32x4::from(self.group0()[1]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]])),
            // e3215
            (self.group0()[1] * other.group1()[1]),
        );
    }
}
impl AntiWedge<SphereAtOrigin> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: SphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([((self.group1()[3] * other.group0()[1]) + (self[e1] * other.group0()[0])), 0.0]),
            // e1, e2, e3, e4
            (self.group3() * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e5
            (self.group3()[3] * other.group0()[1]),
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group6()[1] * other.group0()[0]),
                (self.group6()[2] * other.group0()[0]),
                (self.group6()[3] * other.group0()[0]),
                0.0,
            ]),
            // e15, e25, e35
            (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group6()[1], self.group6()[2], self.group6()[3]])),
            // e23, e31, e12
            ((self.group7() * Simd32x3::from(other.group0()[1])) + (self.group8() * Simd32x3::from(other.group0()[0]))),
            // e321, e415, e425, e435
            Simd32x4::from([(self[e45] * other.group0()[0] * -1.0), 0.0, 0.0, 0.0]),
            // e423, e431, e412
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group9()[0], self.group9()[1], self.group9()[2]])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[1] * other.group0()[0])]),
            // e3215
            (self.group0()[1] * other.group0()[1]),
        );
    }
}
impl AntiWedge<SphereOnOrigin> for MultiVector {
    type Output = MultiVector;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self[e1] * other.group0()[3]) + (self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group5()[1] * other.group0()[2]),
                (self.group5()[2] * other.group0()[0]),
                (self.group5()[0] * other.group0()[1]),
                (-(self.group3()[3] * other.group0()[3])
                    - (self.group3()[2] * other.group0()[2])
                    - (self.group3()[0] * other.group0()[0])
                    - (self.group3()[1] * other.group0()[1])),
            ]),
            // e5
            ((self.group4()[2] * other.group0()[2]) + (self.group4()[0] * other.group0()[0]) + (self.group4()[1] * other.group0()[1])),
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group7()[1] * other.group0()[2] * -1.0),
                (self.group7()[2] * other.group0()[0] * -1.0),
                (self.group7()[0] * other.group0()[1] * -1.0),
                (-(self.group6()[3] * other.group0()[2]) - (self.group6()[1] * other.group0()[0]) - (self.group6()[2] * other.group0()[1])),
            ]),
            // e15, e25, e35
            (swizzle!(self.group8(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]])),
            // e23, e31, e12
            (Simd32x3::from([(self.group8()[0] * other.group0()[3]), (self.group6()[0] * other.group0()[1]), (self.group8()[2] * other.group0()[3])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e321, e415, e425, e435
            (swizzle!(other.group0(), 3, 2, 0, 1) * Simd32x4::from([self[e45], self.group9()[1], self.group9()[2], self.group9()[0]]) * Simd32x4::from(-1.0)),
            // e423, e431, e412
            (Simd32x3::from([(self.group9()[3] * other.group0()[0]), (self.group9()[1] * other.group0()[3]), (self.group9()[3] * other.group0()[2])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e235, e315, e125
            (Simd32x3::from(self[e45]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
            // e4235, e4315, e4125, e1234
            (Simd32x4::from(self.group0()[1]) * other.group0()),
            // e3215
            0.0,
        );
    }
}
impl InfixAntiWedge for NullCircleAtOrigin {}
impl AntiWedge<AntiFlatPoint> for NullCircleAtOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(
            // e1, e2, e3
            (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]])),
        );
    }
}
impl AntiWedge<AntiFlector> for NullCircleAtOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiFlector) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(
            // e1, e2, e3
            (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]])),
        );
    }
}
impl AntiWedge<AntiLine> for NullCircleAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiLine) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<AntiMotor> for NullCircleAtOrigin {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: AntiMotor) -> Self::Output {
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ Simd32x4::from([
            (self.group0()[0] * other.group1()[3]),
            (self.group0()[1] * other.group1()[3]),
            (self.group0()[2] * other.group1()[3]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<AntiScalar> for NullCircleAtOrigin {
    type Output = NullCircleAtOrigin;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return NullCircleAtOrigin::from_groups(/* e423, e431, e412 */ (self.group0() * Simd32x3::from(other[e12345])));
    }
}
impl AntiWedge<Circle> for NullCircleAtOrigin {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: Circle) -> Self::Output {
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from([
            (self.group0()[2] * other.group2()[1]),
            (self.group0()[0] * other.group2()[2]),
            (self.group0()[1] * other.group2()[0]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<CircleAligningOrigin> for NullCircleAtOrigin {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from([
            (self.group0()[2] * other.group2()[1]),
            (self.group0()[0] * other.group2()[2]),
            (self.group0()[1] * other.group2()[0]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<CircleAtInfinity> for NullCircleAtOrigin {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: CircleAtInfinity) -> Self::Output {
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from([
            (self.group0()[2] * other.group1()[1]),
            (self.group0()[0] * other.group1()[2]),
            (self.group0()[1] * other.group1()[0]),
            (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
        ]));
    }
}
impl AntiWedge<CircleAtOrigin> for NullCircleAtOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: CircleAtOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group1(), 1, 2, 0)));
    }
}
impl AntiWedge<CircleOnOrigin> for NullCircleAtOrigin {
    type Output = Origin;
    fn anti_wedge(self, other: CircleOnOrigin) -> Self::Output {
        return Origin::from_groups(
            // e4
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<CircleOrthogonalOrigin> for NullCircleAtOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group1(), 1, 2, 0)));
    }
}
impl AntiWedge<Dipole> for NullCircleAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: Dipole) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl AntiWedge<DipoleAligningOrigin> for NullCircleAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<DipoleAtInfinity> for NullCircleAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<DipoleAtOrigin> for NullCircleAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<DipoleOrthogonalOrigin> for NullCircleAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl AntiWedge<DualNum> for NullCircleAtOrigin {
    type Output = NullCircleAtOrigin;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        return NullCircleAtOrigin::from_groups(/* e423, e431, e412 */ (self.group0() * Simd32x3::from(other.group0()[1])));
    }
}
impl AntiWedge<FlatPoint> for NullCircleAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: FlatPoint) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<FlatPointAtInfinity> for NullCircleAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<Flector> for NullCircleAtOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[1] * other.group1()[2] * -1.0),
                (self.group0()[2] * other.group1()[0] * -1.0),
                (self.group0()[0] * other.group1()[1] * -1.0),
                0.0,
            ]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            (self.group0() * Simd32x3::from(other.group1()[3])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<FlectorAtInfinity> for NullCircleAtOrigin {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<FlectorOnOrigin> for NullCircleAtOrigin {
    type Output = NullDipoleAtOrigin;
    fn anti_wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return NullDipoleAtOrigin::from_groups(
            // e41, e42, e43
            (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[3], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
        );
    }
}
impl AntiWedge<Horizon> for NullCircleAtOrigin {
    type Output = AntiLineOnOrigin;
    fn anti_wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return AntiLineOnOrigin::from_groups(/* e23, e31, e12 */ (self.group0() * Simd32x3::from(other[e3215])));
    }
}
impl AntiWedge<Line> for NullCircleAtOrigin {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: Line) -> Self::Output {
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from([
            (self.group0()[2] * other.group1()[1]),
            (self.group0()[0] * other.group1()[2]),
            (self.group0()[1] * other.group1()[0]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<LineAtInfinity> for NullCircleAtOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: LineAtInfinity) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group0(), 1, 2, 0)));
    }
}
impl AntiWedge<LineOnOrigin> for NullCircleAtOrigin {
    type Output = Origin;
    fn anti_wedge(self, other: LineOnOrigin) -> Self::Output {
        return Origin::from_groups(
            // e4
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<Motor> for NullCircleAtOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[2] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                (self.group0()[1] * other.group1()[0]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group0()[3])),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<MotorAtInfinity> for NullCircleAtOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: MotorAtInfinity) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(
            // e1, e2, e3
            (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]])),
        );
    }
}
impl AntiWedge<MotorOnOrigin> for NullCircleAtOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group0()[3])),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<MultiVector> for NullCircleAtOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[2] * other.group4()[2]) - (self.group0()[0] * other.group4()[0]) - (self.group0()[1] * other.group4()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[2] * other.group8()[1]),
                (self.group0()[0] * other.group8()[2]),
                (self.group0()[1] * other.group8()[0]),
                (-(self.group0()[2] * other.group6()[3]) - (self.group0()[0] * other.group6()[1]) - (self.group0()[1] * other.group6()[2])),
            ]),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[1] * other.group9()[2] * -1.0),
                (self.group0()[2] * other.group9()[0] * -1.0),
                (self.group0()[0] * other.group9()[1] * -1.0),
                0.0,
            ]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            (self.group0() * Simd32x3::from(other[e45])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group0()[1])),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<Plane> for NullCircleAtOrigin {
    type Output = AntiCircleOnOrigin;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        return AntiCircleOnOrigin::from_groups(
            // e41, e42, e43
            (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (self.group0() * Simd32x3::from(other.group0()[3])),
        );
    }
}
impl AntiWedge<PlaneOnOrigin> for NullCircleAtOrigin {
    type Output = NullDipoleAtOrigin;
    fn anti_wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return NullDipoleAtOrigin::from_groups(/* e41, e42, e43 */ (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from(-1.0)));
    }
}
impl AntiWedge<Sphere> for NullCircleAtOrigin {
    type Output = AntiCircleOnOrigin;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        return AntiCircleOnOrigin::from_groups(
            // e41, e42, e43
            (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (self.group0() * Simd32x3::from(other.group1()[1])),
        );
    }
}
impl AntiWedge<SphereAtOrigin> for NullCircleAtOrigin {
    type Output = AntiLineOnOrigin;
    fn anti_wedge(self, other: SphereAtOrigin) -> Self::Output {
        return AntiLineOnOrigin::from_groups(/* e23, e31, e12 */ (self.group0() * Simd32x3::from(other.group0()[1])));
    }
}
impl AntiWedge<SphereOnOrigin> for NullCircleAtOrigin {
    type Output = NullDipoleAtOrigin;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        return NullDipoleAtOrigin::from_groups(
            // e41, e42, e43
            (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * Simd32x3::from(-1.0)),
        );
    }
}
impl InfixAntiWedge for NullDipoleAtOrigin {}
impl AntiWedge<AntiFlatPoint> for NullDipoleAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiFlatPoint) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiFlector> for NullDipoleAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiFlector) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiMotor> for NullDipoleAtOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiMotor) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (self.group0() * Simd32x3::from(other.group1()[3])));
    }
}
impl AntiWedge<AntiScalar> for NullDipoleAtOrigin {
    type Output = NullDipoleAtOrigin;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return NullDipoleAtOrigin::from_groups(/* e41, e42, e43 */ (self.group0() * Simd32x3::from(other[e12345])));
    }
}
impl AntiWedge<Circle> for NullDipoleAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: Circle) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl AntiWedge<CircleAligningOrigin> for NullDipoleAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl AntiWedge<CircleAtInfinity> for NullDipoleAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleAtInfinity) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<CircleAtOrigin> for NullDipoleAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleAtOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<CircleOrthogonalOrigin> for NullDipoleAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<DualNum> for NullDipoleAtOrigin {
    type Output = NullDipoleAtOrigin;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        return NullDipoleAtOrigin::from_groups(/* e41, e42, e43 */ (self.group0() * Simd32x3::from(other.group0()[1])));
    }
}
impl AntiWedge<Flector> for NullDipoleAtOrigin {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from([
            (self.group0()[0] * other.group1()[3]),
            (self.group0()[1] * other.group1()[3]),
            (self.group0()[2] * other.group1()[3]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<FlectorAtInfinity> for NullDipoleAtOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (self.group0() * Simd32x3::from(other.group0()[3])));
    }
}
impl AntiWedge<FlectorOnOrigin> for NullDipoleAtOrigin {
    type Output = Origin;
    fn anti_wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return Origin::from_groups(
            // e4
            (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
        );
    }
}
impl AntiWedge<Horizon> for NullDipoleAtOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (self.group0() * Simd32x3::from(other[e3215])));
    }
}
impl AntiWedge<Line> for NullDipoleAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: Line) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<LineAtInfinity> for NullDipoleAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: LineAtInfinity) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<Motor> for NullDipoleAtOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<MotorAtInfinity> for NullDipoleAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: MotorAtInfinity) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<MotorOnOrigin> for NullDipoleAtOrigin {
    type Output = NullDipoleAtOrigin;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        return NullDipoleAtOrigin::from_groups(/* e41, e42, e43 */ (self.group0() * Simd32x3::from(other.group0()[3])));
    }
}
impl AntiWedge<MultiVector> for NullDipoleAtOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (-(self.group0()[2] * other.group8()[2]) - (self.group0()[0] * other.group8()[0]) - (self.group0()[1] * other.group8()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other[e45]),
                (self.group0()[1] * other[e45]),
                (self.group0()[2] * other[e45]),
                (-(self.group0()[2] * other.group9()[2]) - (self.group0()[0] * other.group9()[0]) - (self.group0()[1] * other.group9()[1])),
            ]),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[2] * other.group0()[1]),
                0.0,
            ]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<Plane> for NullDipoleAtOrigin {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<PlaneOnOrigin> for NullDipoleAtOrigin {
    type Output = Origin;
    fn anti_wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return Origin::from_groups(
            // e4
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<Sphere> for NullDipoleAtOrigin {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from([
            (self.group0()[0] * other.group1()[1]),
            (self.group0()[1] * other.group1()[1]),
            (self.group0()[2] * other.group1()[1]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<SphereAtOrigin> for NullDipoleAtOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: SphereAtOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (self.group0() * Simd32x3::from(other.group0()[1])));
    }
}
impl AntiWedge<SphereOnOrigin> for NullDipoleAtOrigin {
    type Output = Origin;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        return Origin::from_groups(
            // e4
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl InfixAntiWedge for NullSphereAtOrigin {}
impl AntiWedge<AntiFlatPoint> for NullSphereAtOrigin {
    type Output = AntiLineOnOrigin;
    fn anti_wedge(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiLineOnOrigin::from_groups(
            // e23, e31, e12
            (Simd32x3::from(self[e1234]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
        );
    }
}
impl AntiWedge<AntiFlector> for NullSphereAtOrigin {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return AntiMotorOnOrigin::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(self[e1234]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])),
        );
    }
}
impl AntiWedge<AntiLine> for NullSphereAtOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (Simd32x3::from(self[e1234]) * other.group1()));
    }
}
impl AntiWedge<AntiMotor> for NullSphereAtOrigin {
    type Output = AntiFlectorOnOrigin;
    fn anti_wedge(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return AntiFlectorOnOrigin::from_groups(/* e321, e1, e2, e3 */ (Simd32x4::from(self[e1234]) * swizzle!(other.group1(), 3, 0, 1, 2)));
    }
}
impl AntiWedge<AntiPlane> for NullSphereAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self[e1234] * other.group0()[3]));
    }
}
impl AntiWedge<AntiScalar> for NullSphereAtOrigin {
    type Output = NullSphereAtOrigin;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self[e1234] * other[e12345]));
    }
}
impl AntiWedge<Circle> for NullSphereAtOrigin {
    type Output = AntiCircleOnOrigin;
    fn anti_wedge(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return AntiCircleOnOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * other.group1()),
            // e23, e31, e12
            (Simd32x3::from(self[e1234]) * other.group2()),
        );
    }
}
impl AntiWedge<CircleAligningOrigin> for NullSphereAtOrigin {
    type Output = AntiCircleOnOrigin;
    fn anti_wedge(self, other: CircleAligningOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiCircleOnOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * other.group1()),
            // e23, e31, e12
            (Simd32x3::from(self[e1234]) * other.group2()),
        );
    }
}
impl AntiWedge<CircleAtInfinity> for NullSphereAtOrigin {
    type Output = AntiCircleOnOrigin;
    fn anti_wedge(self, other: CircleAtInfinity) -> Self::Output {
        use crate::elements::*;
        return AntiCircleOnOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[3]])),
            // e23, e31, e12
            (Simd32x3::from(self[e1234]) * other.group1()),
        );
    }
}
impl AntiWedge<CircleAtOrigin> for NullSphereAtOrigin {
    type Output = AntiLineOnOrigin;
    fn anti_wedge(self, other: CircleAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiLineOnOrigin::from_groups(/* e23, e31, e12 */ (Simd32x3::from(self[e1234]) * other.group1()));
    }
}
impl AntiWedge<CircleOnOrigin> for NullSphereAtOrigin {
    type Output = NullDipoleAtOrigin;
    fn anti_wedge(self, other: CircleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return NullDipoleAtOrigin::from_groups(/* e41, e42, e43 */ (Simd32x3::from(self[e1234]) * other.group1()));
    }
}
impl AntiWedge<CircleOrthogonalOrigin> for NullSphereAtOrigin {
    type Output = AntiLineOnOrigin;
    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiLineOnOrigin::from_groups(/* e23, e31, e12 */ (Simd32x3::from(self[e1234]) * other.group1()));
    }
}
impl AntiWedge<Dipole> for NullSphereAtOrigin {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ (Simd32x4::from(self[e1234]) * other.group2()));
    }
}
impl AntiWedge<DipoleAligningOrigin> for NullSphereAtOrigin {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ (Simd32x4::from(self[e1234]) * other.group1()));
    }
}
impl AntiWedge<DipoleAtInfinity> for NullSphereAtOrigin {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: DipoleAtInfinity) -> Self::Output {
        use crate::elements::*;
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ (Simd32x4::from(self[e1234]) * other.group1()));
    }
}
impl AntiWedge<DipoleAtOrigin> for NullSphereAtOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: DipoleAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (Simd32x3::from(self[e1234]) * other.group1()));
    }
}
impl AntiWedge<DipoleOnOrigin> for NullSphereAtOrigin {
    type Output = Origin;
    fn anti_wedge(self, other: DipoleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return Origin::from_groups(/* e4 */ (self[e1234] * other.group0()[3]));
    }
}
impl AntiWedge<DipoleOrthogonalOrigin> for NullSphereAtOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (Simd32x3::from(self[e1234]) * other.group2()));
    }
}
impl AntiWedge<DualNum> for NullSphereAtOrigin {
    type Output = NullSphereAtOrigin;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self[e1234] * other.group0()[1]));
    }
}
impl AntiWedge<FlatOrigin> for NullSphereAtOrigin {
    type Output = Origin;
    fn anti_wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return Origin::from_groups(/* e4 */ (self[e1234] * other[e45]));
    }
}
impl AntiWedge<FlatPoint> for NullSphereAtOrigin {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ (Simd32x4::from(self[e1234]) * other.group0()));
    }
}
impl AntiWedge<FlatPointAtInfinity> for NullSphereAtOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        use crate::elements::*;
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (Simd32x3::from(self[e1234]) * other.group0()));
    }
}
impl AntiWedge<Flector> for NullSphereAtOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            (Simd32x4::from(self[e1234]) * other.group0()),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([(self[e1234] * other.group1()[3]), 0.0, 0.0, 0.0]),
            // e423, e431, e412
            (Simd32x3::from(self[e1234]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<FlectorAtInfinity> for NullSphereAtOrigin {
    type Output = AntiFlectorOnOrigin;
    fn anti_wedge(self, other: FlectorAtInfinity) -> Self::Output {
        use crate::elements::*;
        return AntiFlectorOnOrigin::from_groups(/* e321, e1, e2, e3 */ (Simd32x4::from(self[e1234]) * swizzle!(other.group0(), 3, 0, 1, 2)));
    }
}
impl AntiWedge<FlectorOnOrigin> for NullSphereAtOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: FlectorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from([0.0, 0.0, 0.0, (self[e1234] * other.group0()[0])]),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            (Simd32x3::from(self[e1234]) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[3]])),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<Horizon> for NullSphereAtOrigin {
    type Output = AntiFlatOrigin;
    fn anti_wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return AntiFlatOrigin::from_groups(/* e321 */ (self[e1234] * other[e3215]));
    }
}
impl AntiWedge<Infinity> for NullSphereAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self[e1234] * other[e5]));
    }
}
impl AntiWedge<Line> for NullSphereAtOrigin {
    type Output = AntiCircleOnOrigin;
    fn anti_wedge(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return AntiCircleOnOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e1234]) * other.group0()),
            // e23, e31, e12
            (Simd32x3::from(self[e1234]) * other.group1()),
        );
    }
}
impl AntiWedge<LineAtInfinity> for NullSphereAtOrigin {
    type Output = AntiLineOnOrigin;
    fn anti_wedge(self, other: LineAtInfinity) -> Self::Output {
        use crate::elements::*;
        return AntiLineOnOrigin::from_groups(/* e23, e31, e12 */ (Simd32x3::from(self[e1234]) * other.group0()));
    }
}
impl AntiWedge<LineOnOrigin> for NullSphereAtOrigin {
    type Output = NullDipoleAtOrigin;
    fn anti_wedge(self, other: LineOnOrigin) -> Self::Output {
        use crate::elements::*;
        return NullDipoleAtOrigin::from_groups(/* e41, e42, e43 */ (Simd32x3::from(self[e1234]) * other.group0()));
    }
}
impl AntiWedge<Motor> for NullSphereAtOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(self[e1234] * other.group1()[3]), 0.0]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([(self[e1234] * other.group0()[0]), (self[e1234] * other.group0()[1]), (self[e1234] * other.group0()[2]), 0.0]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            (Simd32x3::from(self[e1234]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (self[e1234] * other.group0()[3])]),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<MotorAtInfinity> for NullSphereAtOrigin {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: MotorAtInfinity) -> Self::Output {
        use crate::elements::*;
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ (Simd32x4::from(self[e1234]) * other.group0()));
    }
}
impl AntiWedge<MotorOnOrigin> for NullSphereAtOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([(self[e1234] * other.group0()[0]), (self[e1234] * other.group0()[1]), (self[e1234] * other.group0()[2]), 0.0]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (self[e1234] * other.group0()[3])]),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<MultiVector> for NullSphereAtOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(self[e1234] * other[e1]), 0.0]),
            // e1, e2, e3, e4
            (Simd32x4::from(self[e1234]) * Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group3()[3]])),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([(self[e1234] * other.group6()[1]), (self[e1234] * other.group6()[2]), (self[e1234] * other.group6()[3]), 0.0]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            (Simd32x3::from(self[e1234]) * other.group8()),
            // e321, e415, e425, e435
            Simd32x4::from([(self[e1234] * other[e45]), 0.0, 0.0, 0.0]),
            // e423, e431, e412
            (Simd32x3::from(self[e1234]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]])),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (self[e1234] * other.group0()[1])]),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<Plane> for NullSphereAtOrigin {
    type Output = AntiDipoleOnOrigin;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleOnOrigin::from_groups(/* e423, e431, e412, e321 */ (Simd32x4::from(self[e1234]) * other.group0()));
    }
}
impl AntiWedge<PlaneOnOrigin> for NullSphereAtOrigin {
    type Output = NullCircleAtOrigin;
    fn anti_wedge(self, other: PlaneOnOrigin) -> Self::Output {
        use crate::elements::*;
        return NullCircleAtOrigin::from_groups(/* e423, e431, e412 */ (Simd32x3::from(self[e1234]) * other.group0()));
    }
}
impl AntiWedge<RoundPoint> for NullSphereAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self[e1234] * other.group1()[1]));
    }
}
impl AntiWedge<RoundPointAtOrigin> for NullSphereAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self[e1234] * other.group0()[1]));
    }
}
impl AntiWedge<Sphere> for NullSphereAtOrigin {
    type Output = AntiDipoleOnOrigin;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleOnOrigin::from_groups(
            // e423, e431, e412, e321
            (Simd32x4::from(self[e1234]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]])),
        );
    }
}
impl AntiWedge<SphereAtOrigin> for NullSphereAtOrigin {
    type Output = AntiFlatOrigin;
    fn anti_wedge(self, other: SphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiFlatOrigin::from_groups(/* e321 */ (self[e1234] * other.group0()[1]));
    }
}
impl AntiWedge<SphereOnOrigin> for NullSphereAtOrigin {
    type Output = NullCircleAtOrigin;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        use crate::elements::*;
        return NullCircleAtOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e1234]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
        );
    }
}
impl InfixAntiWedge for Origin {}
impl AntiWedge<AntiMotor> for Origin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self[e4] * other.group1()[3]));
    }
}
impl AntiWedge<AntiScalar> for Origin {
    type Output = Origin;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Origin::from_groups(/* e4 */ (self[e4] * other[e12345]));
    }
}
impl AntiWedge<DualNum> for Origin {
    type Output = Origin;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return Origin::from_groups(/* e4 */ (self[e4] * other.group0()[1]));
    }
}
impl AntiWedge<Flector> for Origin {
    type Output = Scalar;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self[e4] * other.group1()[3]));
    }
}
impl AntiWedge<FlectorAtInfinity> for Origin {
    type Output = Scalar;
    fn anti_wedge(self, other: FlectorAtInfinity) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self[e4] * other.group0()[3]));
    }
}
impl AntiWedge<Horizon> for Origin {
    type Output = Scalar;
    fn anti_wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self[e4] * other[e3215]));
    }
}
impl AntiWedge<Motor> for Origin {
    type Output = Origin;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return Origin::from_groups(/* e4 */ (self[e4] * other.group0()[3]));
    }
}
impl AntiWedge<MotorOnOrigin> for Origin {
    type Output = Origin;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return Origin::from_groups(/* e4 */ (self[e4] * other.group0()[3]));
    }
}
impl AntiWedge<MultiVector> for Origin {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(self[e4] * other[e45]), 0.0]),
            // e1, e2, e3, e4
            Simd32x4::from([0.0, 0.0, 0.0, (self[e4] * other.group0()[1])]),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<Plane> for Origin {
    type Output = Scalar;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self[e4] * other.group0()[3]));
    }
}
impl AntiWedge<Sphere> for Origin {
    type Output = Scalar;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self[e4] * other.group1()[1]));
    }
}
impl AntiWedge<SphereAtOrigin> for Origin {
    type Output = Scalar;
    fn anti_wedge(self, other: SphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self[e4] * other.group0()[1]));
    }
}
impl InfixAntiWedge for Plane {}
impl AntiWedge<AntiCircleOnOrigin> for Plane {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from([
            (self.group0()[1] * other.group1()[2]),
            (self.group0()[2] * other.group1()[0]),
            (self.group0()[0] * other.group1()[1]),
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<AntiDipoleOnOrigin> for Plane {
    type Output = AntiCircleOnOrigin;
    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiCircleOnOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from([(self.group0()[2] * other.group0()[1]), (self.group0()[0] * other.group0()[2]), (self.group0()[1] * other.group0()[0])]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (Simd32x3::from([(self.group0()[3] * other.group0()[0]), (self.group0()[1] * other.group0()[3]), (self.group0()[3] * other.group0()[2])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl AntiWedge<AntiFlatOrigin> for Plane {
    type Output = AntiLineOnOrigin;
    fn anti_wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiLineOnOrigin::from_groups(
            // e23, e31, e12
            (Simd32x3::from(other[e321]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
        );
    }
}
impl AntiWedge<AntiFlatPoint> for Plane {
    type Output = AntiLine;
    fn anti_wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiLine::from_groups(
            // e23, e31, e12
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
            // e15, e25, e35
            Simd32x3::from([(self.group0()[2] * other.group0()[1]), (self.group0()[0] * other.group0()[2]), (self.group0()[1] * other.group0()[0])]),
        );
    }
}
impl AntiWedge<AntiFlector> for Plane {
    type Output = AntiMotor;
    fn anti_wedge(self, other: AntiFlector) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                ((self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[1] * other.group0()[0]),
                0.0,
            ]),
        );
    }
}
impl AntiWedge<AntiFlectorOnOrigin> for Plane {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ Simd32x4::from([
            (self.group0()[0] * other.group0()[0] * -1.0),
            (self.group0()[1] * other.group0()[0] * -1.0),
            (self.group0()[2] * other.group0()[0] * -1.0),
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
        ]));
    }
}
impl AntiWedge<AntiLine> for Plane {
    type Output = AntiPlane;
    fn anti_wedge(self, other: AntiLine) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group0()[1] * other.group0()[2]),
            (self.group0()[2] * other.group0()[0]),
            (self.group0()[0] * other.group0()[1]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<AntiLineOnOrigin> for Plane {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(
            // e1, e2, e3
            (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]])),
        );
    }
}
impl AntiWedge<AntiMotor> for Plane {
    type Output = AntiFlector;
    fn anti_wedge(self, other: AntiMotor) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl AntiWedge<AntiMotorOnOrigin> for Plane {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ Simd32x3::from([
            (self.group0()[1] * other.group0()[2]),
            (self.group0()[2] * other.group0()[0]),
            (self.group0()[0] * other.group0()[1]),
        ]));
    }
}
impl AntiWedge<AntiPlane> for Plane {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiPlane) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiPlaneOnOrigin> for Plane {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiScalar> for Plane {
    type Output = Plane;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (self.group0() * Simd32x4::from(other[e12345])));
    }
}
impl AntiWedge<AntiSphereOnOrigin> for Plane {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            ((self.group0()[3] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<Circle> for Plane {
    type Output = Dipole;
    fn anti_wedge(self, other: Circle) -> Self::Output {
        return Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from([(self.group0()[2] * other.group0()[1]), (self.group0()[0] * other.group0()[2]), (self.group0()[1] * other.group0()[0])]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (Simd32x3::from([(self.group0()[3] * other.group0()[0]), (self.group0()[1] * other.group0()[3]), (self.group0()[3] * other.group0()[2])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[2] * other.group2()[1]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[1] * other.group2()[0]) + (self.group0()[3] * other.group1()[2])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl AntiWedge<CircleAligningOrigin> for Plane {
    type Output = Dipole;
    fn anti_wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return Dipole::from_groups(
            // e41, e42, e43
            (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[2] * other.group2()[1]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[2]) + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[1] * other.group2()[0]) + (self.group0()[3] * other.group1()[2])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl AntiWedge<CircleAtInfinity> for Plane {
    type Output = DipoleAtInfinity;
    fn anti_wedge(self, other: CircleAtInfinity) -> Self::Output {
        return DipoleAtInfinity::from_groups(
            // e23, e31, e12
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[2] * other.group1()[1]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[3] * other.group0()[2])),
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[3] * other.group0()[3])),
                (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
            ]),
        );
    }
}
impl AntiWedge<CircleAtOrigin> for Plane {
    type Output = DipoleOrthogonalOrigin;
    fn anti_wedge(self, other: CircleAtOrigin) -> Self::Output {
        return DipoleOrthogonalOrigin::from_groups(
            // e41, e42, e43
            (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e15, e25, e35
            (swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]])),
        );
    }
}
impl AntiWedge<CircleOnOrigin> for Plane {
    type Output = Dipole;
    fn anti_wedge(self, other: CircleOnOrigin) -> Self::Output {
        return Dipole::from_groups(
            // e41, e42, e43
            (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl AntiWedge<CircleOrthogonalOrigin> for Plane {
    type Output = DipoleOrthogonalOrigin;
    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return DipoleOrthogonalOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from([(self.group0()[2] * other.group0()[1]), (self.group0()[0] * other.group0()[2]), (self.group0()[1] * other.group0()[0])]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (Simd32x3::from([(self.group0()[3] * other.group0()[0]), (self.group0()[1] * other.group0()[3]), (self.group0()[3] * other.group0()[2])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e15, e25, e35
            (swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]])),
        );
    }
}
impl AntiWedge<Dipole> for Plane {
    type Output = RoundPoint;
    fn anti_wedge(self, other: Dipole) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (swizzle!(other.group1(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]])),
            // e4, e5
            Simd32x2::from([
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[3] * other.group2()[3])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
        );
    }
}
impl AntiWedge<DipoleAligningOrigin> for Plane {
    type Output = RoundPoint;
    fn anti_wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (Simd32x3::from(self.group0()[3]) * other.group0() * Simd32x3::from(-1.0)),
            // e4, e5
            Simd32x2::from([
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[3] * other.group1()[3])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl AntiWedge<DipoleAtInfinity> for Plane {
    type Output = AntiPlane;
    fn anti_wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group0()[1] * other.group0()[2]),
            (self.group0()[2] * other.group0()[0]),
            (self.group0()[0] * other.group0()[1]),
            (-(self.group0()[3] * other.group1()[3]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<DipoleAtOrigin> for Plane {
    type Output = RoundPoint;
    fn anti_wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (Simd32x3::from(self.group0()[3]) * other.group0() * Simd32x3::from(-1.0)),
            // e4, e5
            Simd32x2::from([
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl AntiWedge<DipoleOnOrigin> for Plane {
    type Output = RoundPoint;
    fn anti_wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
            // e4, e5
            Simd32x2::from([
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
        );
    }
}
impl AntiWedge<DipoleOrthogonalOrigin> for Plane {
    type Output = RoundPoint;
    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (swizzle!(other.group1(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]])),
            // e4, e5
            Simd32x2::from([
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
            ]),
        );
    }
}
impl AntiWedge<DualNum> for Plane {
    type Output = Plane;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (self.group0() * Simd32x4::from(other.group0()[1])));
    }
}
impl AntiWedge<FlatOrigin> for Plane {
    type Output = Infinity;
    fn anti_wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return Infinity::from_groups(/* e5 */ (self.group0()[3] * other[e45] * -1.0));
    }
}
impl AntiWedge<FlatPoint> for Plane {
    type Output = Infinity;
    fn anti_wedge(self, other: FlatPoint) -> Self::Output {
        return Infinity::from_groups(
            // e5
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<FlatPointAtInfinity> for Plane {
    type Output = Infinity;
    fn anti_wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return Infinity::from_groups(
            // e5
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<Flector> for Plane {
    type Output = Motor;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[1] * other.group1()[2] * -1.0),
                (self.group0()[2] * other.group1()[0] * -1.0),
                (self.group0()[0] * other.group1()[1] * -1.0),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[3] * other.group1()[1] * -1.0),
                (self.group0()[2] * other.group1()[3]),
                (-(self.group0()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl AntiWedge<FlectorAtInfinity> for Plane {
    type Output = MotorAtInfinity;
    fn anti_wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return MotorAtInfinity::from_groups(/* e235, e315, e125, e5 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<FlectorOnOrigin> for Plane {
    type Output = Motor;
    fn anti_wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[3]) * swizzle!(other.group0(), 1, 2, 3, 0) * Simd32x4::from(-1.0)),
        );
    }
}
impl AntiWedge<Horizon> for Plane {
    type Output = LineAtInfinity;
    fn anti_wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return LineAtInfinity::from_groups(
            // e235, e315, e125
            (Simd32x3::from(other[e3215]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
        );
    }
}
impl AntiWedge<Line> for Plane {
    type Output = FlatPoint;
    fn anti_wedge(self, other: Line) -> Self::Output {
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ Simd32x4::from([
            ((self.group0()[2] * other.group1()[1]) + (self.group0()[3] * other.group0()[0])),
            ((self.group0()[0] * other.group1()[2]) + (self.group0()[3] * other.group0()[1])),
            ((self.group0()[1] * other.group1()[0]) + (self.group0()[3] * other.group0()[2])),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<LineAtInfinity> for Plane {
    type Output = FlatPointAtInfinity;
    fn anti_wedge(self, other: LineAtInfinity) -> Self::Output {
        return FlatPointAtInfinity::from_groups(
            // e15, e25, e35
            (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]])),
        );
    }
}
impl AntiWedge<LineOnOrigin> for Plane {
    type Output = FlatPoint;
    fn anti_wedge(self, other: LineOnOrigin) -> Self::Output {
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<Motor> for Plane {
    type Output = Flector;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[2] * other.group1()[1]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[2]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (self.group0() * Simd32x4::from(other.group0()[3])),
        );
    }
}
impl AntiWedge<MotorAtInfinity> for Plane {
    type Output = FlatPointAtInfinity;
    fn anti_wedge(self, other: MotorAtInfinity) -> Self::Output {
        return FlatPointAtInfinity::from_groups(/* e15, e25, e35 */ Simd32x3::from([
            (self.group0()[2] * other.group0()[1]),
            (self.group0()[0] * other.group0()[2]),
            (self.group0()[1] * other.group0()[0]),
        ]));
    }
}
impl AntiWedge<MotorOnOrigin> for Plane {
    type Output = Flector;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            (self.group0() * Simd32x4::from(other.group0()[3])),
        );
    }
}
impl AntiWedge<MultiVector> for Plane {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group0()[3] * other.group1()[3]) + (self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[1] * other.group5()[2]),
                (self.group0()[2] * other.group5()[0]),
                (self.group0()[0] * other.group5()[1]),
                ((self.group0()[2] * other.group3()[2]) + (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group3()[1])),
            ]),
            // e5
            (-(self.group0()[3] * other.group3()[3]) - (self.group0()[2] * other.group4()[2]) - (self.group0()[0] * other.group4()[0]) - (self.group0()[1] * other.group4()[1])),
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[2] * other.group7()[1] * -1.0),
                (self.group0()[0] * other.group7()[2] * -1.0),
                (self.group0()[1] * other.group7()[0] * -1.0),
                (-(self.group0()[2] * other.group6()[3]) - (self.group0()[0] * other.group6()[1]) - (self.group0()[1] * other.group6()[2])),
            ]),
            // e15, e25, e35
            ((swizzle!(other.group8(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group6()[1], other.group6()[2], other.group6()[3]]))),
            // e23, e31, e12
            (Simd32x3::from([(self.group0()[3] * other.group7()[0]), (self.group0()[1] * other.group6()[0]), (self.group0()[3] * other.group7()[2])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e321, e415, e425, e435
            (swizzle!(self.group0(), 3, 1, 2, 0) * swizzle!(other.group9(), 3, 2, 0, 1) * Simd32x4::from(-1.0)),
            // e423, e431, e412
            (Simd32x3::from(other.group9()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from([(self.group0()[0] * other[e45]), (self.group0()[3] * other.group9()[1]), (self.group0()[2] * other[e45])]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[2] * other.group0()[1]),
                0.0,
            ]),
            // e3215
            (self.group0()[3] * other.group0()[1]),
        );
    }
}
impl AntiWedge<NullCircleAtOrigin> for Plane {
    type Output = AntiCircleOnOrigin;
    fn anti_wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return AntiCircleOnOrigin::from_groups(
            // e41, e42, e43
            (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[3]) * other.group0()),
        );
    }
}
impl AntiWedge<NullDipoleAtOrigin> for Plane {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0] * -1.0),
            (self.group0()[3] * other.group0()[1] * -1.0),
            (self.group0()[3] * other.group0()[2] * -1.0),
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<NullSphereAtOrigin> for Plane {
    type Output = AntiDipoleOnOrigin;
    fn anti_wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleOnOrigin::from_groups(/* e423, e431, e412, e321 */ (self.group0() * Simd32x4::from(other[e1234]) * Simd32x4::from(-1.0)));
    }
}
impl AntiWedge<Origin> for Plane {
    type Output = Scalar;
    fn anti_wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self.group0()[3] * other[e4]));
    }
}
impl AntiWedge<Plane> for Plane {
    type Output = Line;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        return Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from([(self.group0()[1] * other.group0()[2]), (self.group0()[2] * other.group0()[0]), (self.group0()[0] * other.group0()[1])]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from([(self.group0()[0] * other.group0()[3]), (self.group0()[3] * other.group0()[1]), (self.group0()[2] * other.group0()[3])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl AntiWedge<PlaneOnOrigin> for Plane {
    type Output = Line;
    fn anti_wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return Line::from_groups(
            // e415, e425, e435
            (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[3]) * other.group0() * Simd32x3::from(-1.0)),
        );
    }
}
impl AntiWedge<RoundPoint> for Plane {
    type Output = Scalar;
    fn anti_wedge(self, other: RoundPoint) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            ((self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<RoundPointAtOrigin> for Plane {
    type Output = Scalar;
    fn anti_wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return Scalar::from_groups(/* scalar */ (self.group0()[3] * other.group0()[0]));
    }
}
impl AntiWedge<Sphere> for Plane {
    type Output = Circle;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412, e321
            (self.group0() * Simd32x4::from(other.group1()[0]) * Simd32x4::from(-1.0)),
            // e415, e425, e435
            (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from([(self.group0()[0] * other.group1()[1]), (self.group0()[3] * other.group0()[1]), (self.group0()[2] * other.group1()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl AntiWedge<SphereAtOrigin> for Plane {
    type Output = CircleOrthogonalOrigin;
    fn anti_wedge(self, other: SphereAtOrigin) -> Self::Output {
        return CircleOrthogonalOrigin::from_groups(
            // e423, e431, e412, e321
            (self.group0() * Simd32x4::from(other.group0()[0]) * Simd32x4::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
        );
    }
}
impl AntiWedge<SphereOnOrigin> for Plane {
    type Output = Circle;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412, e321
            (self.group0() * Simd32x4::from(other.group0()[3]) * Simd32x4::from(-1.0)),
            // e415, e425, e435
            (Simd32x3::from([(self.group0()[1] * other.group0()[2]), (self.group0()[2] * other.group0()[0]), (self.group0()[0] * other.group0()[1])]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
        );
    }
}
impl InfixAntiWedge for PlaneOnOrigin {}
impl AntiWedge<AntiCircleOnOrigin> for PlaneOnOrigin {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from([
            (self.group0()[1] * other.group1()[2]),
            (self.group0()[2] * other.group1()[0]),
            (self.group0()[0] * other.group1()[1]),
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<AntiDipoleOnOrigin> for PlaneOnOrigin {
    type Output = AntiCircleOnOrigin;
    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiCircleOnOrigin::from_groups(
            // e41, e42, e43
            (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (self.group0() * Simd32x3::from(other.group0()[3]) * Simd32x3::from(-1.0)),
        );
    }
}
impl AntiWedge<AntiFlatOrigin> for PlaneOnOrigin {
    type Output = AntiLineOnOrigin;
    fn anti_wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiLineOnOrigin::from_groups(/* e23, e31, e12 */ (self.group0() * Simd32x3::from(other[e321]) * Simd32x3::from(-1.0)));
    }
}
impl AntiWedge<AntiFlatPoint> for PlaneOnOrigin {
    type Output = AntiLine;
    fn anti_wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiLine::from_groups(
            // e23, e31, e12
            (self.group0() * Simd32x3::from(other.group0()[3]) * Simd32x3::from(-1.0)),
            // e15, e25, e35
            (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]])),
        );
    }
}
impl AntiWedge<AntiFlector> for PlaneOnOrigin {
    type Output = AntiMotor;
    fn anti_wedge(self, other: AntiFlector) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                ((self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[1] * other.group0()[0]),
                0.0,
            ]),
        );
    }
}
impl AntiWedge<AntiFlectorOnOrigin> for PlaneOnOrigin {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ Simd32x4::from([
            (self.group0()[0] * other.group0()[0] * -1.0),
            (self.group0()[1] * other.group0()[0] * -1.0),
            (self.group0()[2] * other.group0()[0] * -1.0),
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
        ]));
    }
}
impl AntiWedge<AntiLine> for PlaneOnOrigin {
    type Output = AntiPlane;
    fn anti_wedge(self, other: AntiLine) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group0()[1] * other.group0()[2]),
            (self.group0()[2] * other.group0()[0]),
            (self.group0()[0] * other.group0()[1]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<AntiLineOnOrigin> for PlaneOnOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1)));
    }
}
impl AntiWedge<AntiMotor> for PlaneOnOrigin {
    type Output = AntiFlector;
    fn anti_wedge(self, other: AntiMotor) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                0.0,
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl AntiWedge<AntiMotorOnOrigin> for PlaneOnOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(
            // e1, e2, e3
            (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]])),
        );
    }
}
impl AntiWedge<AntiPlane> for PlaneOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiPlane) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiPlaneOnOrigin> for PlaneOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiScalar> for PlaneOnOrigin {
    type Output = PlaneOnOrigin;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other[e12345])));
    }
}
impl AntiWedge<AntiSphereOnOrigin> for PlaneOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<Circle> for PlaneOnOrigin {
    type Output = Dipole;
    fn anti_wedge(self, other: Circle) -> Self::Output {
        return Dipole::from_groups(
            // e41, e42, e43
            (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (self.group0() * Simd32x3::from(other.group0()[3]) * Simd32x3::from(-1.0)),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[2] * other.group2()[1]),
                (self.group0()[0] * other.group2()[2]),
                (self.group0()[1] * other.group2()[0]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl AntiWedge<CircleAligningOrigin> for PlaneOnOrigin {
    type Output = DipoleAligningOrigin;
    fn anti_wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return DipoleAligningOrigin::from_groups(
            // e41, e42, e43
            (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from(-1.0)),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[2] * other.group2()[1]),
                (self.group0()[0] * other.group2()[2]),
                (self.group0()[1] * other.group2()[0]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl AntiWedge<CircleAtInfinity> for PlaneOnOrigin {
    type Output = DipoleAtInfinity;
    fn anti_wedge(self, other: CircleAtInfinity) -> Self::Output {
        return DipoleAtInfinity::from_groups(
            // e23, e31, e12
            (self.group0() * Simd32x3::from(other.group0()[0]) * Simd32x3::from(-1.0)),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[2] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                (self.group0()[1] * other.group1()[0]),
                (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
            ]),
        );
    }
}
impl AntiWedge<CircleAtOrigin> for PlaneOnOrigin {
    type Output = DipoleAtOrigin;
    fn anti_wedge(self, other: CircleAtOrigin) -> Self::Output {
        return DipoleAtOrigin::from_groups(
            // e41, e42, e43
            (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from(-1.0)),
            // e15, e25, e35
            (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group1(), 1, 2, 0)),
        );
    }
}
impl AntiWedge<CircleOnOrigin> for PlaneOnOrigin {
    type Output = DipoleOnOrigin;
    fn anti_wedge(self, other: CircleOnOrigin) -> Self::Output {
        return DipoleOnOrigin::from_groups(/* e41, e42, e43, e45 */ Simd32x4::from([
            (self.group0()[2] * other.group0()[1] * -1.0),
            (self.group0()[0] * other.group0()[2] * -1.0),
            (self.group0()[1] * other.group0()[0] * -1.0),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<CircleOrthogonalOrigin> for PlaneOnOrigin {
    type Output = DipoleOrthogonalOrigin;
    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return DipoleOrthogonalOrigin::from_groups(
            // e41, e42, e43
            (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (self.group0() * Simd32x3::from(other.group0()[3]) * Simd32x3::from(-1.0)),
            // e15, e25, e35
            (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group1(), 1, 2, 0)),
        );
    }
}
impl AntiWedge<Dipole> for PlaneOnOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: Dipole) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group1(), 2, 0, 1)),
            // e4, e5
            Simd32x2::from([
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
            ]),
        );
    }
}
impl AntiWedge<DipoleAligningOrigin> for PlaneOnOrigin {
    type Output = RoundPointAtOrigin;
    fn anti_wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return RoundPointAtOrigin::from_groups(/* e4, e5 */ Simd32x2::from([
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<DipoleAtInfinity> for PlaneOnOrigin {
    type Output = AntiPlane;
    fn anti_wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group0()[1] * other.group0()[2]),
            (self.group0()[2] * other.group0()[0]),
            (self.group0()[0] * other.group0()[1]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<DipoleAtOrigin> for PlaneOnOrigin {
    type Output = RoundPointAtOrigin;
    fn anti_wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return RoundPointAtOrigin::from_groups(/* e4, e5 */ Simd32x2::from([
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<DipoleOnOrigin> for PlaneOnOrigin {
    type Output = Origin;
    fn anti_wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return Origin::from_groups(
            // e4
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<DipoleOrthogonalOrigin> for PlaneOnOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group1(), 2, 0, 1)),
            // e4, e5
            Simd32x2::from([
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
            ]),
        );
    }
}
impl AntiWedge<DualNum> for PlaneOnOrigin {
    type Output = PlaneOnOrigin;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group0()[1])));
    }
}
impl AntiWedge<FlatPoint> for PlaneOnOrigin {
    type Output = Infinity;
    fn anti_wedge(self, other: FlatPoint) -> Self::Output {
        return Infinity::from_groups(
            // e5
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<FlatPointAtInfinity> for PlaneOnOrigin {
    type Output = Infinity;
    fn anti_wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return Infinity::from_groups(
            // e5
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<Flector> for PlaneOnOrigin {
    type Output = Motor;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[1] * other.group1()[2] * -1.0),
                (self.group0()[2] * other.group1()[0] * -1.0),
                (self.group0()[0] * other.group1()[1] * -1.0),
                0.0,
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl AntiWedge<FlectorAtInfinity> for PlaneOnOrigin {
    type Output = MotorAtInfinity;
    fn anti_wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return MotorAtInfinity::from_groups(/* e235, e315, e125, e5 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<FlectorOnOrigin> for PlaneOnOrigin {
    type Output = LineOnOrigin;
    fn anti_wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return LineOnOrigin::from_groups(
            // e415, e425, e435
            (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[3], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
        );
    }
}
impl AntiWedge<Horizon> for PlaneOnOrigin {
    type Output = LineAtInfinity;
    fn anti_wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ (self.group0() * Simd32x3::from(other[e3215])));
    }
}
impl AntiWedge<Line> for PlaneOnOrigin {
    type Output = FlatPoint;
    fn anti_wedge(self, other: Line) -> Self::Output {
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ Simd32x4::from([
            (self.group0()[2] * other.group1()[1]),
            (self.group0()[0] * other.group1()[2]),
            (self.group0()[1] * other.group1()[0]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<LineAtInfinity> for PlaneOnOrigin {
    type Output = FlatPointAtInfinity;
    fn anti_wedge(self, other: LineAtInfinity) -> Self::Output {
        return FlatPointAtInfinity::from_groups(/* e15, e25, e35 */ (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group0(), 1, 2, 0)));
    }
}
impl AntiWedge<LineOnOrigin> for PlaneOnOrigin {
    type Output = FlatOrigin;
    fn anti_wedge(self, other: LineOnOrigin) -> Self::Output {
        return FlatOrigin::from_groups(
            // e45
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<Motor> for PlaneOnOrigin {
    type Output = Flector;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[2] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                (self.group0()[1] * other.group1()[0]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl AntiWedge<MotorAtInfinity> for PlaneOnOrigin {
    type Output = FlatPointAtInfinity;
    fn anti_wedge(self, other: MotorAtInfinity) -> Self::Output {
        return FlatPointAtInfinity::from_groups(
            // e15, e25, e35
            (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]])),
        );
    }
}
impl AntiWedge<MotorOnOrigin> for PlaneOnOrigin {
    type Output = FlectorOnOrigin;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ Simd32x4::from([
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
        ]));
    }
}
impl AntiWedge<MultiVector> for PlaneOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[1] * other.group5()[2]),
                (self.group0()[2] * other.group5()[0]),
                (self.group0()[0] * other.group5()[1]),
                ((self.group0()[2] * other.group3()[2]) + (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group3()[1])),
            ]),
            // e5
            (-(self.group0()[2] * other.group4()[2]) - (self.group0()[0] * other.group4()[0]) - (self.group0()[1] * other.group4()[1])),
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[2] * other.group7()[1] * -1.0),
                (self.group0()[0] * other.group7()[2] * -1.0),
                (self.group0()[1] * other.group7()[0] * -1.0),
                (-(self.group0()[2] * other.group6()[3]) - (self.group0()[0] * other.group6()[1]) - (self.group0()[1] * other.group6()[2])),
            ]),
            // e15, e25, e35
            (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group8(), 1, 2, 0)),
            // e23, e31, e12
            (self.group0() * Simd32x3::from(other.group6()[0]) * Simd32x3::from(-1.0)),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group0()[1] * other.group9()[2] * -1.0),
                (self.group0()[2] * other.group9()[0] * -1.0),
                (self.group0()[0] * other.group9()[1] * -1.0),
            ]),
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group9()[3]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (self.group0() * Simd32x3::from(other[e45])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[2] * other.group0()[1]),
                0.0,
            ]),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<NullCircleAtOrigin> for PlaneOnOrigin {
    type Output = NullDipoleAtOrigin;
    fn anti_wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return NullDipoleAtOrigin::from_groups(/* e41, e42, e43 */ (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from(-1.0)));
    }
}
impl AntiWedge<NullDipoleAtOrigin> for PlaneOnOrigin {
    type Output = Origin;
    fn anti_wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return Origin::from_groups(
            // e4
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<NullSphereAtOrigin> for PlaneOnOrigin {
    type Output = NullCircleAtOrigin;
    fn anti_wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return NullCircleAtOrigin::from_groups(/* e423, e431, e412 */ (self.group0() * Simd32x3::from(other[e1234]) * Simd32x3::from(-1.0)));
    }
}
impl AntiWedge<Plane> for PlaneOnOrigin {
    type Output = Line;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        return Line::from_groups(
            // e415, e425, e435
            (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (self.group0() * Simd32x3::from(other.group0()[3])),
        );
    }
}
impl AntiWedge<PlaneOnOrigin> for PlaneOnOrigin {
    type Output = LineOnOrigin;
    fn anti_wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return LineOnOrigin::from_groups(
            // e415, e425, e435
            (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from(-1.0)),
        );
    }
}
impl AntiWedge<RoundPoint> for PlaneOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: RoundPoint) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<Sphere> for PlaneOnOrigin {
    type Output = CircleAligningOrigin;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group1()[0]) * Simd32x3::from(-1.0)),
            // e415, e425, e435
            (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (self.group0() * Simd32x3::from(other.group1()[1])),
        );
    }
}
impl AntiWedge<SphereAtOrigin> for PlaneOnOrigin {
    type Output = CircleAtOrigin;
    fn anti_wedge(self, other: SphereAtOrigin) -> Self::Output {
        return CircleAtOrigin::from_groups(
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group0()[0]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (self.group0() * Simd32x3::from(other.group0()[1])),
        );
    }
}
impl AntiWedge<SphereOnOrigin> for PlaneOnOrigin {
    type Output = CircleOnOrigin;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group0()[3]) * Simd32x3::from(-1.0)),
            // e415, e425, e435
            (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * Simd32x3::from(-1.0)),
        );
    }
}
impl InfixAntiWedge for RoundPoint {}
impl AntiWedge<AntiMotor> for RoundPoint {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiMotor) -> Self::Output {
        return Scalar::from_groups(/* scalar */ (self.group1()[0] * other.group1()[3]));
    }
}
impl AntiWedge<AntiScalar> for RoundPoint {
    type Output = RoundPoint;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return RoundPoint::from_groups(
            // e1, e2, e3
            (self.group0() * Simd32x3::from(other[e12345])),
            // e4, e5
            (self.group1() * Simd32x2::from(other[e12345])),
        );
    }
}
impl AntiWedge<DualNum> for RoundPoint {
    type Output = RoundPoint;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (self.group0() * Simd32x3::from(other.group0()[1])),
            // e4, e5
            (self.group1() * Simd32x2::from(other.group0()[1])),
        );
    }
}
impl AntiWedge<Flector> for RoundPoint {
    type Output = Scalar;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            ((self.group1()[0] * other.group1()[3]) + (self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl AntiWedge<FlectorAtInfinity> for RoundPoint {
    type Output = Scalar;
    fn anti_wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return Scalar::from_groups(/* scalar */ (self.group1()[0] * other.group0()[3]));
    }
}
impl AntiWedge<FlectorOnOrigin> for RoundPoint {
    type Output = Scalar;
    fn anti_wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
        );
    }
}
impl AntiWedge<Horizon> for RoundPoint {
    type Output = Scalar;
    fn anti_wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self.group1()[0] * other[e3215]));
    }
}
impl AntiWedge<Motor> for RoundPoint {
    type Output = RoundPoint;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (self.group0() * Simd32x3::from(other.group0()[3])),
            // e4, e5
            (self.group1() * Simd32x2::from(other.group0()[3])),
        );
    }
}
impl AntiWedge<MotorOnOrigin> for RoundPoint {
    type Output = RoundPoint;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (self.group0() * Simd32x3::from(other.group0()[3])),
            // e4, e5
            (self.group1() * Simd32x2::from(other.group0()[3])),
        );
    }
}
impl AntiWedge<MultiVector> for RoundPoint {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group1()[1] * other.group9()[3])
                    + (self.group1()[0] * other[e45])
                    + (self.group0()[2] * other.group9()[2])
                    + (self.group0()[0] * other.group9()[0])
                    + (self.group0()[1] * other.group9()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]])),
            // e5
            (self.group1()[1] * other.group0()[1]),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<NullSphereAtOrigin> for RoundPoint {
    type Output = Scalar;
    fn anti_wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self.group1()[1] * other[e1234]));
    }
}
impl AntiWedge<Plane> for RoundPoint {
    type Output = Scalar;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            ((self.group1()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<PlaneOnOrigin> for RoundPoint {
    type Output = Scalar;
    fn anti_wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<Sphere> for RoundPoint {
    type Output = Scalar;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            ((self.group1()[1] * other.group1()[0])
                + (self.group1()[0] * other.group1()[1])
                + (self.group0()[2] * other.group0()[2])
                + (self.group0()[0] * other.group0()[0])
                + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<SphereAtOrigin> for RoundPoint {
    type Output = Scalar;
    fn anti_wedge(self, other: SphereAtOrigin) -> Self::Output {
        return Scalar::from_groups(/* scalar */ ((self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])));
    }
}
impl AntiWedge<SphereOnOrigin> for RoundPoint {
    type Output = Scalar;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            ((self.group1()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl InfixAntiWedge for RoundPointAtOrigin {}
impl AntiWedge<AntiMotor> for RoundPointAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiMotor) -> Self::Output {
        return Scalar::from_groups(/* scalar */ (self.group0()[0] * other.group1()[3]));
    }
}
impl AntiWedge<AntiScalar> for RoundPointAtOrigin {
    type Output = RoundPointAtOrigin;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return RoundPointAtOrigin::from_groups(/* e4, e5 */ (self.group0() * Simd32x2::from(other[e12345])));
    }
}
impl AntiWedge<DualNum> for RoundPointAtOrigin {
    type Output = RoundPointAtOrigin;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        return RoundPointAtOrigin::from_groups(/* e4, e5 */ (self.group0() * Simd32x2::from(other.group0()[1])));
    }
}
impl AntiWedge<Flector> for RoundPointAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        return Scalar::from_groups(/* scalar */ (self.group0()[0] * other.group1()[3]));
    }
}
impl AntiWedge<FlectorAtInfinity> for RoundPointAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return Scalar::from_groups(/* scalar */ (self.group0()[0] * other.group0()[3]));
    }
}
impl AntiWedge<Horizon> for RoundPointAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self.group0()[0] * other[e3215]));
    }
}
impl AntiWedge<Motor> for RoundPointAtOrigin {
    type Output = RoundPointAtOrigin;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        return RoundPointAtOrigin::from_groups(/* e4, e5 */ (self.group0() * Simd32x2::from(other.group0()[3])));
    }
}
impl AntiWedge<MotorOnOrigin> for RoundPointAtOrigin {
    type Output = RoundPointAtOrigin;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        return RoundPointAtOrigin::from_groups(/* e4, e5 */ (self.group0() * Simd32x2::from(other.group0()[3])));
    }
}
impl AntiWedge<MultiVector> for RoundPointAtOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([((self.group0()[0] * other[e45]) + (self.group0()[1] * other.group9()[3])), 0.0]),
            // e1, e2, e3, e4
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[1])]),
            // e5
            (self.group0()[1] * other.group0()[1]),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<NullSphereAtOrigin> for RoundPointAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self.group0()[1] * other[e1234]));
    }
}
impl AntiWedge<Plane> for RoundPointAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        return Scalar::from_groups(/* scalar */ (self.group0()[0] * other.group0()[3]));
    }
}
impl AntiWedge<Sphere> for RoundPointAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        return Scalar::from_groups(/* scalar */ ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])));
    }
}
impl AntiWedge<SphereAtOrigin> for RoundPointAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: SphereAtOrigin) -> Self::Output {
        return Scalar::from_groups(/* scalar */ ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])));
    }
}
impl AntiWedge<SphereOnOrigin> for RoundPointAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        return Scalar::from_groups(/* scalar */ (self.group0()[1] * other.group0()[3]));
    }
}
impl InfixAntiWedge for Scalar {}
impl AntiWedge<AntiScalar> for Scalar {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self[scalar] * other[e12345]));
    }
}
impl AntiWedge<DualNum> for Scalar {
    type Output = Scalar;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self[scalar] * other.group0()[1]));
    }
}
impl AntiWedge<Motor> for Scalar {
    type Output = Scalar;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self[scalar] * other.group0()[3]));
    }
}
impl AntiWedge<MotorOnOrigin> for Scalar {
    type Output = Scalar;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self[scalar] * other.group0()[3]));
    }
}
impl AntiWedge<MultiVector> for Scalar {
    type Output = Scalar;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self[scalar] * other.group0()[1]));
    }
}
impl InfixAntiWedge for Sphere {}
impl AntiWedge<AntiCircleOnOrigin> for Sphere {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from([
            (self.group0()[1] * other.group1()[2]),
            (self.group0()[2] * other.group1()[0]),
            (self.group0()[0] * other.group1()[1]),
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<AntiDipoleOnOrigin> for Sphere {
    type Output = AntiCircleOnOrigin;
    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiCircleOnOrigin::from_groups(
            // e41, e42, e43
            (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (Simd32x3::from([(self.group1()[1] * other.group0()[0]), (self.group0()[1] * other.group0()[3]), (self.group1()[1] * other.group0()[2])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl AntiWedge<AntiFlatOrigin> for Sphere {
    type Output = AntiLineOnOrigin;
    fn anti_wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiLineOnOrigin::from_groups(/* e23, e31, e12 */ (self.group0() * Simd32x3::from(other[e321]) * Simd32x3::from(-1.0)));
    }
}
impl AntiWedge<AntiFlatPoint> for Sphere {
    type Output = AntiLine;
    fn anti_wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiLine::from_groups(
            // e23, e31, e12
            (Simd32x3::from([(self.group1()[0] * other.group0()[0]), (self.group0()[1] * other.group0()[3]), (self.group1()[0] * other.group0()[2])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e15, e25, e35
            (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]])),
        );
    }
}
impl AntiWedge<AntiFlector> for Sphere {
    type Output = AntiMotor;
    fn anti_wedge(self, other: AntiFlector) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group1()[0] * other.group0()[2]),
                ((self.group1()[0] * other.group1()[3]) + (self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[1] * other.group0()[0]),
                0.0,
            ]),
        );
    }
}
impl AntiWedge<AntiFlectorOnOrigin> for Sphere {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ Simd32x4::from([
            (self.group0()[0] * other.group0()[0] * -1.0),
            (self.group0()[1] * other.group0()[0] * -1.0),
            (self.group0()[2] * other.group0()[0] * -1.0),
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
        ]));
    }
}
impl AntiWedge<AntiLine> for Sphere {
    type Output = AntiPlane;
    fn anti_wedge(self, other: AntiLine) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            ((self.group0()[1] * other.group0()[2]) + (self.group1()[0] * other.group1()[0])),
            ((self.group0()[2] * other.group0()[0]) + (self.group1()[0] * other.group1()[1])),
            ((self.group0()[0] * other.group0()[1]) + (self.group1()[0] * other.group1()[2])),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<AntiLineOnOrigin> for Sphere {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1)));
    }
}
impl AntiWedge<AntiMotor> for Sphere {
    type Output = AntiFlector;
    fn anti_wedge(self, other: AntiMotor) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]])),
            // e1, e2, e3, e5
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) + (self.group1()[0] * other.group1()[0])),
                ((self.group0()[2] * other.group0()[0]) + (self.group1()[0] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[1]) + (self.group1()[0] * other.group1()[2])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl AntiWedge<AntiMotorOnOrigin> for Sphere {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(
            // e1, e2, e3
            (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]])),
        );
    }
}
impl AntiWedge<AntiPlane> for Sphere {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiPlane) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            ((self.group1()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiPlaneOnOrigin> for Sphere {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiScalar> for Sphere {
    type Output = Sphere;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (self.group0() * Simd32x3::from(other[e12345])),
            // e1234, e3215
            (self.group1() * Simd32x2::from(other[e12345])),
        );
    }
}
impl AntiWedge<AntiSphereOnOrigin> for Sphere {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            ((self.group1()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<Circle> for Sphere {
    type Output = Dipole;
    fn anti_wedge(self, other: Circle) -> Self::Output {
        return Dipole::from_groups(
            // e41, e42, e43
            (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group1()[0] * other.group2()[0]) + (self.group1()[1] * other.group0()[0])),
                (self.group0()[1] * other.group0()[3] * -1.0),
                ((self.group1()[0] * other.group2()[2]) + (self.group1()[1] * other.group0()[2])),
            ]),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[2] * other.group2()[1]) + (self.group1()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[2]) + (self.group1()[1] * other.group1()[1])),
                ((self.group0()[1] * other.group2()[0]) + (self.group1()[1] * other.group1()[2])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl AntiWedge<CircleAligningOrigin> for Sphere {
    type Output = Dipole;
    fn anti_wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return Dipole::from_groups(
            // e41, e42, e43
            (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            ((Simd32x3::from(self.group1()[0]) * other.group2()) + (Simd32x3::from(self.group1()[1]) * other.group0())),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[2] * other.group2()[1]) + (self.group1()[1] * other.group1()[0])),
                ((self.group0()[0] * other.group2()[2]) + (self.group1()[1] * other.group1()[1])),
                ((self.group0()[1] * other.group2()[0]) + (self.group1()[1] * other.group1()[2])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl AntiWedge<CircleAtInfinity> for Sphere {
    type Output = Dipole;
    fn anti_wedge(self, other: CircleAtInfinity) -> Self::Output {
        return Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[3]])),
            // e23, e31, e12
            (Simd32x3::from([(self.group1()[0] * other.group1()[0]), (self.group0()[1] * other.group0()[0]), (self.group1()[0] * other.group1()[2])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[2] * other.group1()[1]) + (self.group1()[1] * other.group0()[1])),
                ((self.group0()[0] * other.group1()[2]) + (self.group1()[1] * other.group0()[2])),
                ((self.group0()[1] * other.group1()[0]) + (self.group1()[1] * other.group0()[3])),
                (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
            ]),
        );
    }
}
impl AntiWedge<CircleAtOrigin> for Sphere {
    type Output = DipoleOrthogonalOrigin;
    fn anti_wedge(self, other: CircleAtOrigin) -> Self::Output {
        return DipoleOrthogonalOrigin::from_groups(
            // e41, e42, e43
            (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            ((Simd32x3::from(self.group1()[0]) * other.group1()) + (Simd32x3::from(self.group1()[1]) * other.group0())),
            // e15, e25, e35
            (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group1(), 1, 2, 0)),
        );
    }
}
impl AntiWedge<CircleOnOrigin> for Sphere {
    type Output = Dipole;
    fn anti_wedge(self, other: CircleOnOrigin) -> Self::Output {
        return Dipole::from_groups(
            // e41, e42, e43
            (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (Simd32x3::from(self.group1()[1]) * other.group0()),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group1()[1] * other.group1()[0]),
                (self.group1()[1] * other.group1()[1]),
                (self.group1()[1] * other.group1()[2]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl AntiWedge<CircleOrthogonalOrigin> for Sphere {
    type Output = DipoleOrthogonalOrigin;
    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return DipoleOrthogonalOrigin::from_groups(
            // e41, e42, e43
            (swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[0]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group1()[0] * other.group1()[0]) + (self.group1()[1] * other.group0()[0])),
                (self.group0()[1] * other.group0()[3] * -1.0),
                ((self.group1()[0] * other.group1()[2]) + (self.group1()[1] * other.group0()[2])),
            ]),
            // e15, e25, e35
            (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group1(), 1, 2, 0)),
        );
    }
}
impl AntiWedge<Dipole> for Sphere {
    type Output = RoundPoint;
    fn anti_wedge(self, other: Dipole) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            ((swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group1(), 2, 0, 1))
                + (Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))),
            // e4, e5
            Simd32x2::from([
                ((self.group1()[0] * other.group2()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group1()[1] * other.group2()[3])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
        );
    }
}
impl AntiWedge<DipoleAligningOrigin> for Sphere {
    type Output = RoundPoint;
    fn anti_wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])),
            // e4, e5
            Simd32x2::from([
                ((self.group1()[0] * other.group1()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group1()[1] * other.group1()[3])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl AntiWedge<DipoleAtInfinity> for Sphere {
    type Output = RoundPoint;
    fn anti_wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            ((swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1))
                + (Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))),
            // e4, e5
            Simd32x2::from([
                (self.group1()[0] * other.group1()[3]),
                (-(self.group1()[1] * other.group1()[3])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl AntiWedge<DipoleAtOrigin> for Sphere {
    type Output = RoundPoint;
    fn anti_wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (Simd32x3::from(self.group1()[0]) * other.group1()),
            // e4, e5
            Simd32x2::from([
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl AntiWedge<DipoleOnOrigin> for Sphere {
    type Output = RoundPoint;
    fn anti_wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
            // e4, e5
            Simd32x2::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                (self.group1()[1] * other.group0()[3] * -1.0),
            ]),
        );
    }
}
impl AntiWedge<DipoleOrthogonalOrigin> for Sphere {
    type Output = RoundPoint;
    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            ((swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group1(), 2, 0, 1)) + (Simd32x3::from(self.group1()[0]) * other.group2())),
            // e4, e5
            Simd32x2::from([
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
            ]),
        );
    }
}
impl AntiWedge<DualNum> for Sphere {
    type Output = Sphere;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (self.group0() * Simd32x3::from(other.group0()[1])),
            // e1234, e3215
            (self.group1() * Simd32x2::from(other.group0()[1])),
        );
    }
}
impl AntiWedge<FlatOrigin> for Sphere {
    type Output = RoundPointAtOrigin;
    fn anti_wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return RoundPointAtOrigin::from_groups(/* e4, e5 */ (self.group1() * Simd32x2::from(other[e45]) * Simd32x2::from([1.0, -1.0])));
    }
}
impl AntiWedge<FlatPoint> for Sphere {
    type Output = RoundPoint;
    fn anti_wedge(self, other: FlatPoint) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e4, e5
            Simd32x2::from([
                (self.group1()[0] * other.group0()[3]),
                (-(self.group1()[1] * other.group0()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl AntiWedge<FlatPointAtInfinity> for Sphere {
    type Output = AntiPlane;
    fn anti_wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group1()[0] * other.group0()[0]),
            (self.group1()[0] * other.group0()[1]),
            (self.group1()[0] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<Flector> for Sphere {
    type Output = MultiVector;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group1()[0]) * other.group0()),
            // e5
            (-(self.group1()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            (swizzle!(other.group1(), 3, 2, 0, 1)
                * Simd32x4::from([self.group1()[0], self.group0()[1], self.group0()[2], self.group0()[0]])
                * Simd32x4::from([1.0, -1.0, -1.0, -1.0])),
            // e423, e431, e412
            (Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])),
            // e235, e315, e125
            (Simd32x3::from([(self.group0()[0] * other.group1()[3]), (self.group1()[1] * other.group1()[1]), (self.group0()[2] * other.group1()[3])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<FlectorAtInfinity> for Sphere {
    type Output = AntiFlector;
    fn anti_wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]])),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[0] * other.group0()[1]),
                (self.group1()[0] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl AntiWedge<FlectorOnOrigin> for Sphere {
    type Output = MultiVector;
    fn anti_wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from([0.0, 0.0, 0.0, (self.group1()[0] * other.group0()[0])]),
            // e5
            (self.group1()[1] * other.group0()[0] * -1.0),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
            ]),
            // e423, e431, e412
            (Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[3]])),
            // e235, e315, e125
            (Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[3]]) * Simd32x3::from(-1.0)),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<Horizon> for Sphere {
    type Output = AntiFlatPoint;
    fn anti_wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return AntiFlatPoint::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(other[e3215]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]])),
        );
    }
}
impl AntiWedge<Infinity> for Sphere {
    type Output = Scalar;
    fn anti_wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self.group1()[0] * other[e5]));
    }
}
impl AntiWedge<Line> for Sphere {
    type Output = Dipole;
    fn anti_wedge(self, other: Line) -> Self::Output {
        return Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group1()[0]) * other.group0()),
            // e23, e31, e12
            (Simd32x3::from(self.group1()[0]) * other.group1()),
            // e15, e25, e35, e45
            Simd32x4::from([
                ((self.group0()[2] * other.group1()[1]) + (self.group1()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[2]) + (self.group1()[1] * other.group0()[1])),
                ((self.group0()[1] * other.group1()[0]) + (self.group1()[1] * other.group0()[2])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl AntiWedge<LineAtInfinity> for Sphere {
    type Output = AntiLine;
    fn anti_wedge(self, other: LineAtInfinity) -> Self::Output {
        return AntiLine::from_groups(
            // e23, e31, e12
            (Simd32x3::from(self.group1()[0]) * other.group0()),
            // e15, e25, e35
            (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group0(), 1, 2, 0)),
        );
    }
}
impl AntiWedge<LineOnOrigin> for Sphere {
    type Output = DipoleAligningOrigin;
    fn anti_wedge(self, other: LineOnOrigin) -> Self::Output {
        return DipoleAligningOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group1()[0]) * other.group0()),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group1()[1] * other.group0()[0]),
                (self.group1()[1] * other.group0()[1]),
                (self.group1()[1] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl AntiWedge<Motor> for Sphere {
    type Output = MultiVector;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(self.group1()[0] * other.group1()[3]), 0.0]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[0] * other.group0()[1]),
                (self.group1()[0] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35
            ((swizzle!(self.group0(), 2, 0, 1) * Simd32x3::from([other.group1()[1], other.group1()[2], other.group1()[0]]))
                + (Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e23, e31, e12
            (Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]])),
            // e3215
            (self.group1()[1] * other.group0()[3]),
        );
    }
}
impl AntiWedge<MotorAtInfinity> for Sphere {
    type Output = AntiMotor;
    fn anti_wedge(self, other: MotorAtInfinity) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(self.group1()[0]) * other.group0()),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[1] * other.group0()[0]),
                0.0,
            ]),
        );
    }
}
impl AntiWedge<MotorOnOrigin> for Sphere {
    type Output = MultiVector;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[0] * other.group0()[1]),
                (self.group1()[0] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35
            (Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]])),
            // e3215
            (self.group1()[1] * other.group0()[3]),
        );
    }
}
impl AntiWedge<MultiVector> for Sphere {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group1()[1] * other.group1()[3])
                    + (self.group1()[0] * other[e1])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            ((Simd32x4::from(self.group1()[0]) * Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group3()[3]]))
                + Simd32x4::from([
                    (self.group0()[1] * other.group5()[2]),
                    (self.group0()[2] * other.group5()[0]),
                    (self.group0()[0] * other.group5()[1]),
                    ((self.group0()[2] * other.group3()[2]) + (self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group3()[1])),
                ])),
            // e5
            (-(self.group1()[1] * other.group3()[3]) - (self.group0()[2] * other.group4()[2]) - (self.group0()[0] * other.group4()[0]) - (self.group0()[1] * other.group4()[1])),
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[2] * other.group7()[1] * -1.0),
                (self.group0()[0] * other.group7()[2] * -1.0),
                (self.group0()[1] * other.group7()[0] * -1.0),
                (-(self.group0()[2] * other.group6()[3]) - (self.group0()[0] * other.group6()[1]) - (self.group0()[1] * other.group6()[2])),
            ]),
            // e15, e25, e35
            ((swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group8(), 1, 2, 0))
                + (Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group6()[1], other.group6()[2], other.group6()[3]]))),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group1()[0] * other.group8()[0]) + (self.group1()[1] * other.group7()[0])),
                (self.group0()[1] * other.group6()[0] * -1.0),
                ((self.group1()[0] * other.group8()[2]) + (self.group1()[1] * other.group7()[2])),
            ]),
            // e321, e415, e425, e435
            (swizzle!(other.group9(), 3, 2, 0, 1) * Simd32x4::from([self.group1()[1], self.group0()[1], self.group0()[2], self.group0()[0]]) * Simd32x4::from(-1.0)),
            // e423, e431, e412
            (Simd32x3::from([(self.group1()[0] * other.group9()[0]), (self.group0()[1] * other.group9()[3]), (self.group1()[0] * other.group9()[2])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e235, e315, e125
            (Simd32x3::from([(self.group0()[0] * other[e45]), (self.group1()[1] * other.group9()[1]), (self.group0()[2] * other[e45])]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e1234
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]])),
            // e3215
            (self.group1()[1] * other.group0()[1]),
        );
    }
}
impl AntiWedge<NullCircleAtOrigin> for Sphere {
    type Output = AntiCircleOnOrigin;
    fn anti_wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return AntiCircleOnOrigin::from_groups(
            // e41, e42, e43
            (swizzle!(self.group0(), 2, 0, 1) * swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (Simd32x3::from(self.group1()[1]) * other.group0()),
        );
    }
}
impl AntiWedge<NullDipoleAtOrigin> for Sphere {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from([
            (self.group1()[1] * other.group0()[0] * -1.0),
            (self.group1()[1] * other.group0()[1] * -1.0),
            (self.group1()[1] * other.group0()[2] * -1.0),
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<NullSphereAtOrigin> for Sphere {
    type Output = AntiDipoleOnOrigin;
    fn anti_wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleOnOrigin::from_groups(
            // e423, e431, e412, e321
            (Simd32x4::from(other[e1234]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl AntiWedge<Origin> for Sphere {
    type Output = Scalar;
    fn anti_wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self.group1()[1] * other[e4]));
    }
}
impl AntiWedge<Plane> for Sphere {
    type Output = Circle;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412, e321
            (Simd32x4::from(self.group1()[0]) * other.group0()),
            // e415, e425, e435
            (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from([(self.group0()[0] * other.group0()[3]), (self.group1()[1] * other.group0()[1]), (self.group0()[2] * other.group0()[3])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl AntiWedge<PlaneOnOrigin> for Sphere {
    type Output = CircleAligningOrigin;
    fn anti_wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group1()[0]) * other.group0()),
            // e415, e425, e435
            (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from(self.group1()[1]) * other.group0() * Simd32x3::from(-1.0)),
        );
    }
}
impl AntiWedge<RoundPoint> for Sphere {
    type Output = Scalar;
    fn anti_wedge(self, other: RoundPoint) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            ((self.group1()[1] * other.group1()[0])
                + (self.group1()[0] * other.group1()[1])
                + (self.group0()[2] * other.group0()[2])
                + (self.group0()[0] * other.group0()[0])
                + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<RoundPointAtOrigin> for Sphere {
    type Output = Scalar;
    fn anti_wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return Scalar::from_groups(/* scalar */ ((self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])));
    }
}
impl AntiWedge<Sphere> for Sphere {
    type Output = Circle;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412, e321
            (Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group0()[1] * other.group1()[0]),
                (self.group1()[0] * other.group0()[2]),
                (self.group1()[1] * other.group1()[0]),
            ]) * Simd32x4::from([1.0, -1.0, 1.0, -1.0])),
            // e415, e425, e435
            (swizzle!(self.group0(), 1, 2, 0) * swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from([(self.group0()[0] * other.group1()[1]), (self.group1()[1] * other.group0()[1]), (self.group0()[2] * other.group1()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl AntiWedge<SphereAtOrigin> for Sphere {
    type Output = CircleOrthogonalOrigin;
    fn anti_wedge(self, other: SphereAtOrigin) -> Self::Output {
        return CircleOrthogonalOrigin::from_groups(
            // e423, e431, e412, e321
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * Simd32x4::from(-1.0)),
            // e235, e315, e125
            (self.group0() * Simd32x3::from(other.group0()[1])),
        );
    }
}
impl AntiWedge<SphereOnOrigin> for Sphere {
    type Output = Circle;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412, e321
            (swizzle!(other.group0(), 0, 3, 2, 3)
                * Simd32x4::from([self.group1()[0], self.group0()[1], self.group1()[0], self.group1()[1]])
                * Simd32x4::from([1.0, -1.0, 1.0, -1.0])),
            // e415, e425, e435
            (swizzle!(self.group0(), 1, 2, 0) * Simd32x3::from([other.group0()[2], other.group0()[0], other.group0()[1]]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
        );
    }
}
impl InfixAntiWedge for SphereAtOrigin {}
impl AntiWedge<AntiCircleOnOrigin> for SphereAtOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (Simd32x3::from(self.group0()[1]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl AntiWedge<AntiDipoleOnOrigin> for SphereAtOrigin {
    type Output = AntiLineOnOrigin;
    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiLineOnOrigin::from_groups(
            // e23, e31, e12
            (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
        );
    }
}
impl AntiWedge<AntiFlatPoint> for SphereAtOrigin {
    type Output = AntiLineOnOrigin;
    fn anti_wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiLineOnOrigin::from_groups(
            // e23, e31, e12
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
        );
    }
}
impl AntiWedge<AntiFlector> for SphereAtOrigin {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: AntiFlector) -> Self::Output {
        return AntiMotorOnOrigin::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])),
        );
    }
}
impl AntiWedge<AntiLine> for SphereAtOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiLine) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (Simd32x3::from(self.group0()[0]) * other.group1()));
    }
}
impl AntiWedge<AntiMotor> for SphereAtOrigin {
    type Output = AntiFlectorOnOrigin;
    fn anti_wedge(self, other: AntiMotor) -> Self::Output {
        return AntiFlectorOnOrigin::from_groups(/* e321, e1, e2, e3 */ (Simd32x4::from(self.group0()[0]) * swizzle!(other.group1(), 3, 0, 1, 2)));
    }
}
impl AntiWedge<AntiPlane> for SphereAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiPlane) -> Self::Output {
        return Scalar::from_groups(/* scalar */ (self.group0()[0] * other.group0()[3]));
    }
}
impl AntiWedge<AntiScalar> for SphereAtOrigin {
    type Output = SphereAtOrigin;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return SphereAtOrigin::from_groups(/* e1234, e3215 */ (self.group0() * Simd32x2::from(other[e12345])));
    }
}
impl AntiWedge<AntiSphereOnOrigin> for SphereAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return Scalar::from_groups(/* scalar */ (self.group0()[1] * other.group0()[3]));
    }
}
impl AntiWedge<Circle> for SphereAtOrigin {
    type Output = DipoleOrthogonalOrigin;
    fn anti_wedge(self, other: Circle) -> Self::Output {
        return DipoleOrthogonalOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[0]) * other.group1()),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[0]) * other.group2()) + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[1]) * other.group1()),
        );
    }
}
impl AntiWedge<CircleAligningOrigin> for SphereAtOrigin {
    type Output = DipoleOrthogonalOrigin;
    fn anti_wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return DipoleOrthogonalOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[0]) * other.group1()),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[0]) * other.group2()) + (Simd32x3::from(self.group0()[1]) * other.group0())),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[1]) * other.group1()),
        );
    }
}
impl AntiWedge<CircleAtInfinity> for SphereAtOrigin {
    type Output = DipoleOrthogonalOrigin;
    fn anti_wedge(self, other: CircleAtInfinity) -> Self::Output {
        return DipoleOrthogonalOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[3]])),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[0]) * other.group1()),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[3]])),
        );
    }
}
impl AntiWedge<CircleAtOrigin> for SphereAtOrigin {
    type Output = AntiLineOnOrigin;
    fn anti_wedge(self, other: CircleAtOrigin) -> Self::Output {
        return AntiLineOnOrigin::from_groups(
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[0]) * other.group1()) + (Simd32x3::from(self.group0()[1]) * other.group0())),
        );
    }
}
impl AntiWedge<CircleOnOrigin> for SphereAtOrigin {
    type Output = DipoleOrthogonalOrigin;
    fn anti_wedge(self, other: CircleOnOrigin) -> Self::Output {
        return DipoleOrthogonalOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[0]) * other.group1()),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[1]) * other.group0()),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[1]) * other.group1()),
        );
    }
}
impl AntiWedge<CircleOrthogonalOrigin> for SphereAtOrigin {
    type Output = AntiLineOnOrigin;
    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return AntiLineOnOrigin::from_groups(
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[0]) * other.group1()) + (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]))),
        );
    }
}
impl AntiWedge<Dipole> for SphereAtOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: Dipole) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]])),
            // e4, e5
            (self.group0() * Simd32x2::from(other.group2()[3]) * Simd32x2::from([1.0, -1.0])),
        );
    }
}
impl AntiWedge<DipoleAligningOrigin> for SphereAtOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])),
            // e4, e5
            (self.group0() * Simd32x2::from(other.group1()[3]) * Simd32x2::from([1.0, -1.0])),
        );
    }
}
impl AntiWedge<DipoleAtInfinity> for SphereAtOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])),
            // e4, e5
            (self.group0() * Simd32x2::from(other.group1()[3]) * Simd32x2::from([1.0, -1.0])),
        );
    }
}
impl AntiWedge<DipoleAtOrigin> for SphereAtOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (Simd32x3::from(self.group0()[0]) * other.group1()));
    }
}
impl AntiWedge<DipoleOnOrigin> for SphereAtOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
            // e4, e5
            (self.group0() * Simd32x2::from(other.group0()[3]) * Simd32x2::from([1.0, -1.0])),
        );
    }
}
impl AntiWedge<DipoleOrthogonalOrigin> for SphereAtOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (Simd32x3::from(self.group0()[0]) * other.group2()));
    }
}
impl AntiWedge<DualNum> for SphereAtOrigin {
    type Output = SphereAtOrigin;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        return SphereAtOrigin::from_groups(/* e1234, e3215 */ (self.group0() * Simd32x2::from(other.group0()[1])));
    }
}
impl AntiWedge<FlatOrigin> for SphereAtOrigin {
    type Output = RoundPointAtOrigin;
    fn anti_wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return RoundPointAtOrigin::from_groups(/* e4, e5 */ (self.group0() * Simd32x2::from(other[e45]) * Simd32x2::from([1.0, -1.0])));
    }
}
impl AntiWedge<FlatPoint> for SphereAtOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: FlatPoint) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e4, e5
            (self.group0() * Simd32x2::from(other.group0()[3]) * Simd32x2::from([1.0, -1.0])),
        );
    }
}
impl AntiWedge<FlatPointAtInfinity> for SphereAtOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (Simd32x3::from(self.group0()[0]) * other.group0()));
    }
}
impl AntiWedge<Flector> for SphereAtOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e5
            (self.group0()[1] * other.group0()[3] * -1.0),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([(self.group0()[0] * other.group1()[3]), 0.0, 0.0, 0.0]),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]) * Simd32x3::from(-1.0)),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<FlectorAtInfinity> for SphereAtOrigin {
    type Output = AntiFlectorOnOrigin;
    fn anti_wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return AntiFlectorOnOrigin::from_groups(/* e321, e1, e2, e3 */ (Simd32x4::from(self.group0()[0]) * swizzle!(other.group0(), 3, 0, 1, 2)));
    }
}
impl AntiWedge<FlectorOnOrigin> for SphereAtOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[0])]),
            // e5
            (self.group0()[1] * other.group0()[0] * -1.0),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[3]])),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[3]]) * Simd32x3::from(-1.0)),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<Horizon> for SphereAtOrigin {
    type Output = AntiFlatOrigin;
    fn anti_wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return AntiFlatOrigin::from_groups(/* e321 */ (self.group0()[0] * other[e3215]));
    }
}
impl AntiWedge<Infinity> for SphereAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self.group0()[0] * other[e5]));
    }
}
impl AntiWedge<Line> for SphereAtOrigin {
    type Output = DipoleOrthogonalOrigin;
    fn anti_wedge(self, other: Line) -> Self::Output {
        return DipoleOrthogonalOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[0]) * other.group1()),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[1]) * other.group0()),
        );
    }
}
impl AntiWedge<LineAtInfinity> for SphereAtOrigin {
    type Output = AntiLineOnOrigin;
    fn anti_wedge(self, other: LineAtInfinity) -> Self::Output {
        return AntiLineOnOrigin::from_groups(/* e23, e31, e12 */ (Simd32x3::from(self.group0()[0]) * other.group0()));
    }
}
impl AntiWedge<LineOnOrigin> for SphereAtOrigin {
    type Output = DipoleAtOrigin;
    fn anti_wedge(self, other: LineOnOrigin) -> Self::Output {
        return DipoleAtOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[1]) * other.group0()),
        );
    }
}
impl AntiWedge<Motor> for SphereAtOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(self.group0()[0] * other.group1()[3]), 0.0]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e3215
            (self.group0()[1] * other.group0()[3]),
        );
    }
}
impl AntiWedge<MotorAtInfinity> for SphereAtOrigin {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: MotorAtInfinity) -> Self::Output {
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ (Simd32x4::from(self.group0()[0]) * other.group0()));
    }
}
impl AntiWedge<MotorOnOrigin> for SphereAtOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e3215
            (self.group0()[1] * other.group0()[3]),
        );
    }
}
impl AntiWedge<MultiVector> for SphereAtOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([((self.group0()[0] * other[e1]) + (self.group0()[1] * other.group1()[3])), 0.0]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group3()[3]])),
            // e5
            (self.group0()[1] * other.group3()[3] * -1.0),
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group6()[1]),
                (self.group0()[0] * other.group6()[2]),
                (self.group0()[0] * other.group6()[3]),
                0.0,
            ]),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group6()[1], other.group6()[2], other.group6()[3]])),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[0]) * other.group8()) + (Simd32x3::from(self.group0()[1]) * other.group7())),
            // e321, e415, e425, e435
            Simd32x4::from([(self.group0()[1] * other.group9()[3] * -1.0), 0.0, 0.0, 0.0]),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]])),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group9()[0], other.group9()[1], other.group9()[2]]) * Simd32x3::from(-1.0)),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[1])]),
            // e3215
            (self.group0()[1] * other.group0()[1]),
        );
    }
}
impl AntiWedge<NullCircleAtOrigin> for SphereAtOrigin {
    type Output = AntiLineOnOrigin;
    fn anti_wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return AntiLineOnOrigin::from_groups(/* e23, e31, e12 */ (Simd32x3::from(self.group0()[1]) * other.group0()));
    }
}
impl AntiWedge<NullDipoleAtOrigin> for SphereAtOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (Simd32x3::from(self.group0()[1]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl AntiWedge<NullSphereAtOrigin> for SphereAtOrigin {
    type Output = AntiFlatOrigin;
    fn anti_wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiFlatOrigin::from_groups(/* e321 */ (self.group0()[1] * other[e1234] * -1.0));
    }
}
impl AntiWedge<Origin> for SphereAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self.group0()[1] * other[e4]));
    }
}
impl AntiWedge<Plane> for SphereAtOrigin {
    type Output = CircleOrthogonalOrigin;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        return CircleOrthogonalOrigin::from_groups(
            // e423, e431, e412, e321
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
        );
    }
}
impl AntiWedge<PlaneOnOrigin> for SphereAtOrigin {
    type Output = CircleAtOrigin;
    fn anti_wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return CircleAtOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * other.group0() * Simd32x3::from(-1.0)),
        );
    }
}
impl AntiWedge<RoundPoint> for SphereAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: RoundPoint) -> Self::Output {
        return Scalar::from_groups(/* scalar */ ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])));
    }
}
impl AntiWedge<RoundPointAtOrigin> for SphereAtOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return Scalar::from_groups(/* scalar */ ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])));
    }
}
impl AntiWedge<Sphere> for SphereAtOrigin {
    type Output = CircleOrthogonalOrigin;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        return CircleOrthogonalOrigin::from_groups(
            // e423, e431, e412, e321
            (Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[1] * other.group1()[0]),
            ]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * other.group0() * Simd32x3::from(-1.0)),
        );
    }
}
impl AntiWedge<SphereAtOrigin> for SphereAtOrigin {
    type Output = AntiFlatOrigin;
    fn anti_wedge(self, other: SphereAtOrigin) -> Self::Output {
        return AntiFlatOrigin::from_groups(/* e321 */ (self.group0()[1] * other.group0()[0] * -1.0));
    }
}
impl AntiWedge<SphereOnOrigin> for SphereAtOrigin {
    type Output = CircleOrthogonalOrigin;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        return CircleOrthogonalOrigin::from_groups(
            // e423, e431, e412, e321
            (other.group0() * Simd32x4::from([self.group0()[0], self.group0()[0], self.group0()[0], self.group0()[1]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
        );
    }
}
impl InfixAntiWedge for SphereOnOrigin {}
impl AntiWedge<AntiCircleOnOrigin> for SphereOnOrigin {
    type Output = AntiSphereOnOrigin;
    fn anti_wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ Simd32x4::from([
            (self.group0()[1] * other.group1()[2]),
            (self.group0()[2] * other.group1()[0]),
            (self.group0()[0] * other.group1()[1]),
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<AntiDipoleOnOrigin> for SphereOnOrigin {
    type Output = AntiCircleOnOrigin;
    fn anti_wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiCircleOnOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from([(self.group0()[2] * other.group0()[1]), (self.group0()[0] * other.group0()[2]), (self.group0()[1] * other.group0()[0])]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
        );
    }
}
impl AntiWedge<AntiFlatOrigin> for SphereOnOrigin {
    type Output = AntiLineOnOrigin;
    fn anti_wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiLineOnOrigin::from_groups(
            // e23, e31, e12
            (Simd32x3::from(other[e321]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
        );
    }
}
impl AntiWedge<AntiFlatPoint> for SphereOnOrigin {
    type Output = AntiLine;
    fn anti_wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiLine::from_groups(
            // e23, e31, e12
            (Simd32x3::from([(self.group0()[3] * other.group0()[0]), (self.group0()[1] * other.group0()[3]), (self.group0()[3] * other.group0()[2])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e15, e25, e35
            Simd32x3::from([(self.group0()[2] * other.group0()[1]), (self.group0()[0] * other.group0()[2]), (self.group0()[1] * other.group0()[0])]),
        );
    }
}
impl AntiWedge<AntiFlector> for SphereOnOrigin {
    type Output = AntiMotor;
    fn anti_wedge(self, other: AntiFlector) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[3] * other.group0()[2]),
                ((self.group0()[3] * other.group1()[3]) + (self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[1] * other.group0()[0]),
                0.0,
            ]),
        );
    }
}
impl AntiWedge<AntiFlectorOnOrigin> for SphereOnOrigin {
    type Output = AntiMotorOnOrigin;
    fn anti_wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ Simd32x4::from([
            (self.group0()[0] * other.group0()[0] * -1.0),
            (self.group0()[1] * other.group0()[0] * -1.0),
            (self.group0()[2] * other.group0()[0] * -1.0),
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
        ]));
    }
}
impl AntiWedge<AntiLine> for SphereOnOrigin {
    type Output = AntiPlane;
    fn anti_wedge(self, other: AntiLine) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            ((self.group0()[1] * other.group0()[2]) + (self.group0()[3] * other.group1()[0])),
            ((self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group1()[1])),
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[3] * other.group1()[2])),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<AntiLineOnOrigin> for SphereOnOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(
            // e1, e2, e3
            (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]])),
        );
    }
}
impl AntiWedge<AntiMotor> for SphereOnOrigin {
    type Output = AntiFlector;
    fn anti_wedge(self, other: AntiMotor) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (self.group0() * Simd32x4::from(other.group1()[3])),
            // e1, e2, e3, e5
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[3] * other.group1()[2])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl AntiWedge<AntiMotorOnOrigin> for SphereOnOrigin {
    type Output = AntiPlaneOnOrigin;
    fn anti_wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ Simd32x3::from([
            (self.group0()[1] * other.group0()[2]),
            (self.group0()[2] * other.group0()[0]),
            (self.group0()[0] * other.group0()[1]),
        ]));
    }
}
impl AntiWedge<AntiPlane> for SphereOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiPlane) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            ((self.group0()[3] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiPlaneOnOrigin> for SphereOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<AntiScalar> for SphereOnOrigin {
    type Output = SphereOnOrigin;
    fn anti_wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ (self.group0() * Simd32x4::from(other[e12345])));
    }
}
impl AntiWedge<AntiSphereOnOrigin> for SphereOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<Circle> for SphereOnOrigin {
    type Output = Dipole;
    fn anti_wedge(self, other: Circle) -> Self::Output {
        return Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from([(self.group0()[2] * other.group0()[1]), (self.group0()[0] * other.group0()[2]), (self.group0()[1] * other.group0()[0])]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (Simd32x3::from([(self.group0()[3] * other.group2()[0]), (self.group0()[1] * other.group0()[3]), (self.group0()[3] * other.group2()[2])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[2] * other.group2()[1]),
                (self.group0()[0] * other.group2()[2]),
                (self.group0()[1] * other.group2()[0]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl AntiWedge<CircleAligningOrigin> for SphereOnOrigin {
    type Output = Dipole;
    fn anti_wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return Dipole::from_groups(
            // e41, e42, e43
            (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[3]) * other.group2()),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[2] * other.group2()[1]),
                (self.group0()[0] * other.group2()[2]),
                (self.group0()[1] * other.group2()[0]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl AntiWedge<CircleAtInfinity> for SphereOnOrigin {
    type Output = Dipole;
    fn anti_wedge(self, other: CircleAtInfinity) -> Self::Output {
        return Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[3]])),
            // e23, e31, e12
            (Simd32x3::from([(self.group0()[3] * other.group1()[0]), (self.group0()[1] * other.group0()[0]), (self.group0()[3] * other.group1()[2])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[2] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                (self.group0()[1] * other.group1()[0]),
                (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
            ]),
        );
    }
}
impl AntiWedge<CircleAtOrigin> for SphereOnOrigin {
    type Output = DipoleOrthogonalOrigin;
    fn anti_wedge(self, other: CircleAtOrigin) -> Self::Output {
        return DipoleOrthogonalOrigin::from_groups(
            // e41, e42, e43
            (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[3]) * other.group1()),
            // e15, e25, e35
            (swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]])),
        );
    }
}
impl AntiWedge<CircleOnOrigin> for SphereOnOrigin {
    type Output = DipoleOnOrigin;
    fn anti_wedge(self, other: CircleOnOrigin) -> Self::Output {
        return DipoleOnOrigin::from_groups(/* e41, e42, e43, e45 */ Simd32x4::from([
            (self.group0()[2] * other.group0()[1] * -1.0),
            (self.group0()[0] * other.group0()[2] * -1.0),
            (self.group0()[1] * other.group0()[0] * -1.0),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl AntiWedge<CircleOrthogonalOrigin> for SphereOnOrigin {
    type Output = DipoleOrthogonalOrigin;
    fn anti_wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return DipoleOrthogonalOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from([(self.group0()[2] * other.group0()[1]), (self.group0()[0] * other.group0()[2]), (self.group0()[1] * other.group0()[0])]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (Simd32x3::from([(self.group0()[3] * other.group1()[0]), (self.group0()[1] * other.group0()[3]), (self.group0()[3] * other.group1()[2])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e15, e25, e35
            (swizzle!(other.group1(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]])),
        );
    }
}
impl AntiWedge<Dipole> for SphereOnOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: Dipole) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            ((swizzle!(other.group1(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]]))),
            // e4, e5
            Simd32x2::from([
                ((self.group0()[3] * other.group2()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
            ]),
        );
    }
}
impl AntiWedge<DipoleAligningOrigin> for SphereOnOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])),
            // e4, e5
            Simd32x2::from([
                ((self.group0()[3] * other.group1()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl AntiWedge<DipoleAtInfinity> for SphereOnOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            ((swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]))
                + (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]))),
            // e4, e5
            Simd32x2::from([
                (self.group0()[3] * other.group1()[3]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl AntiWedge<DipoleAtOrigin> for SphereOnOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (Simd32x3::from(self.group0()[3]) * other.group1()),
            // e4, e5
            Simd32x2::from([
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl AntiWedge<DipoleOnOrigin> for SphereOnOrigin {
    type Output = Origin;
    fn anti_wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return Origin::from_groups(
            // e4
            ((self.group0()[3] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<DipoleOrthogonalOrigin> for SphereOnOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            ((swizzle!(other.group1(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]])) + (Simd32x3::from(self.group0()[3]) * other.group2())),
            // e4, e5
            Simd32x2::from([
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
            ]),
        );
    }
}
impl AntiWedge<DualNum> for SphereOnOrigin {
    type Output = SphereOnOrigin;
    fn anti_wedge(self, other: DualNum) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ (self.group0() * Simd32x4::from(other.group0()[1])));
    }
}
impl AntiWedge<FlatOrigin> for SphereOnOrigin {
    type Output = Origin;
    fn anti_wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return Origin::from_groups(/* e4 */ (self.group0()[3] * other[e45]));
    }
}
impl AntiWedge<FlatPoint> for SphereOnOrigin {
    type Output = RoundPoint;
    fn anti_wedge(self, other: FlatPoint) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e4, e5
            Simd32x2::from([
                (self.group0()[3] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl AntiWedge<FlatPointAtInfinity> for SphereOnOrigin {
    type Output = AntiPlane;
    fn anti_wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<Flector> for SphereOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: Flector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e5
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            (swizzle!(self.group0(), 3, 1, 2, 0) * swizzle!(other.group1(), 3, 2, 0, 1) * Simd32x4::from([1.0, -1.0, -1.0, -1.0])),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])),
            // e235, e315, e125
            (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<FlectorAtInfinity> for SphereOnOrigin {
    type Output = AntiFlector;
    fn anti_wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl AntiWedge<FlectorOnOrigin> for SphereOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[0])]),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[1] * -1.0),
                (self.group0()[0] * other.group0()[2] * -1.0),
            ]),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[3]])),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<Horizon> for SphereOnOrigin {
    type Output = AntiFlatPoint;
    fn anti_wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ (self.group0() * Simd32x4::from(other[e3215])));
    }
}
impl AntiWedge<Infinity> for SphereOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self.group0()[3] * other[e5]));
    }
}
impl AntiWedge<Line> for SphereOnOrigin {
    type Output = Dipole;
    fn anti_wedge(self, other: Line) -> Self::Output {
        return Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[3]) * other.group1()),
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[2] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                (self.group0()[1] * other.group1()[0]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl AntiWedge<LineAtInfinity> for SphereOnOrigin {
    type Output = AntiLine;
    fn anti_wedge(self, other: LineAtInfinity) -> Self::Output {
        return AntiLine::from_groups(
            // e23, e31, e12
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e15, e25, e35
            (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]])),
        );
    }
}
impl AntiWedge<LineOnOrigin> for SphereOnOrigin {
    type Output = DipoleOnOrigin;
    fn anti_wedge(self, other: LineOnOrigin) -> Self::Output {
        return DipoleOnOrigin::from_groups(/* e41, e42, e43, e45 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl AntiWedge<Motor> for SphereOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: Motor) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([(self.group0()[3] * other.group1()[3]), 0.0]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35
            Simd32x3::from([(self.group0()[2] * other.group1()[1]), (self.group0()[0] * other.group1()[2]), (self.group0()[1] * other.group1()[0])]),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<MotorAtInfinity> for SphereOnOrigin {
    type Output = AntiMotor;
    fn anti_wedge(self, other: MotorAtInfinity) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[1] * other.group0()[0]),
                0.0,
            ]),
        );
    }
}
impl AntiWedge<MotorOnOrigin> for SphereOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: MotorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<MultiVector> for SphereOnOrigin {
    type Output = MultiVector;
    fn anti_wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                ((self.group0()[3] * other[e1]) + (self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
                0.0,
            ]),
            // e1, e2, e3, e4
            ((swizzle!(self.group0(), 1, 2, 0, 3) * Simd32x4::from([other.group5()[2], other.group5()[0], other.group5()[1], other.group3()[3]]))
                + (swizzle!(self.group0(), 3, 3, 3, 2) * Simd32x4::from([other.group4()[0], other.group4()[1], other.group4()[2], other.group3()[2]]))
                + Simd32x4::from([0.0, 0.0, 0.0, ((self.group0()[0] * other.group3()[0]) + (self.group0()[1] * other.group3()[1]))])),
            // e5
            (-(self.group0()[2] * other.group4()[2]) - (self.group0()[0] * other.group4()[0]) - (self.group0()[1] * other.group4()[1])),
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[2] * other.group7()[1] * -1.0),
                (self.group0()[0] * other.group7()[2] * -1.0),
                (self.group0()[1] * other.group7()[0] * -1.0),
                (-(self.group0()[2] * other.group6()[3]) - (self.group0()[0] * other.group6()[1]) - (self.group0()[1] * other.group6()[2])),
            ]),
            // e15, e25, e35
            (swizzle!(other.group8(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]])),
            // e23, e31, e12
            (Simd32x3::from([(self.group0()[3] * other.group8()[0]), (self.group0()[1] * other.group6()[0]), (self.group0()[3] * other.group8()[2])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e321, e415, e425, e435
            (swizzle!(self.group0(), 3, 1, 2, 0) * Simd32x4::from([other[e45], other.group9()[2], other.group9()[0], other.group9()[1]]) * Simd32x4::from([1.0, -1.0, -1.0, -1.0])),
            // e423, e431, e412
            (Simd32x3::from([(self.group0()[3] * other.group9()[0]), (self.group0()[1] * other.group9()[3]), (self.group0()[3] * other.group9()[2])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e235, e315, e125
            (Simd32x3::from(other[e45]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e4235, e4315, e4125, e1234
            (self.group0() * Simd32x4::from(other.group0()[1])),
            // e3215
            0.0,
        );
    }
}
impl AntiWedge<NullCircleAtOrigin> for SphereOnOrigin {
    type Output = NullDipoleAtOrigin;
    fn anti_wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return NullDipoleAtOrigin::from_groups(
            // e41, e42, e43
            (swizzle!(other.group0(), 1, 2, 0) * Simd32x3::from([self.group0()[2], self.group0()[0], self.group0()[1]]) * Simd32x3::from(-1.0)),
        );
    }
}
impl AntiWedge<NullDipoleAtOrigin> for SphereOnOrigin {
    type Output = Origin;
    fn anti_wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return Origin::from_groups(
            // e4
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<NullSphereAtOrigin> for SphereOnOrigin {
    type Output = NullCircleAtOrigin;
    fn anti_wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return NullCircleAtOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(other[e1234]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
        );
    }
}
impl AntiWedge<Plane> for SphereOnOrigin {
    type Output = Circle;
    fn anti_wedge(self, other: Plane) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412, e321
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e415, e425, e435
            (Simd32x3::from([(self.group0()[1] * other.group0()[2]), (self.group0()[2] * other.group0()[0]), (self.group0()[0] * other.group0()[1])]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
        );
    }
}
impl AntiWedge<PlaneOnOrigin> for SphereOnOrigin {
    type Output = CircleOnOrigin;
    fn anti_wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e415, e425, e435
            (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * Simd32x3::from(-1.0)),
        );
    }
}
impl AntiWedge<RoundPoint> for SphereOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: RoundPoint) -> Self::Output {
        return Scalar::from_groups(
            // scalar
            ((self.group0()[3] * other.group1()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl AntiWedge<RoundPointAtOrigin> for SphereOnOrigin {
    type Output = Scalar;
    fn anti_wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return Scalar::from_groups(/* scalar */ (self.group0()[3] * other.group0()[1]));
    }
}
impl AntiWedge<Sphere> for SphereOnOrigin {
    type Output = Circle;
    fn anti_wedge(self, other: Sphere) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412, e321
            (swizzle!(self.group0(), 3, 1, 3, 3)
                * Simd32x4::from([other.group0()[0], other.group1()[0], other.group0()[2], other.group1()[1]])
                * Simd32x4::from([1.0, -1.0, 1.0, 1.0])),
            // e415, e425, e435
            (swizzle!(other.group0(), 2, 0, 1) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[0]]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from(other.group1()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
        );
    }
}
impl AntiWedge<SphereAtOrigin> for SphereOnOrigin {
    type Output = CircleOrthogonalOrigin;
    fn anti_wedge(self, other: SphereAtOrigin) -> Self::Output {
        return CircleOrthogonalOrigin::from_groups(
            // e423, e431, e412, e321
            (self.group0() * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e235, e315, e125
            (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
        );
    }
}
impl AntiWedge<SphereOnOrigin> for SphereOnOrigin {
    type Output = CircleOnOrigin;
    fn anti_wedge(self, other: SphereOnOrigin) -> Self::Output {
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from([(self.group0()[3] * other.group0()[0]), (self.group0()[1] * other.group0()[3]), (self.group0()[3] * other.group0()[2])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e415, e425, e435
            (Simd32x3::from([(self.group0()[1] * other.group0()[2]), (self.group0()[2] * other.group0()[0]), (self.group0()[0] * other.group0()[1])]) * Simd32x3::from(-1.0)),
        );
    }
}
