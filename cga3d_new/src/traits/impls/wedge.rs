impl InfixWedge for AntiCircleOnOrigin {}
impl Wedge<AntiCircleOnOrigin> for AntiCircleOnOrigin {
    type Output = NullSphereAtOrigin;
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(
            // e1234
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiFlatPoint> for AntiCircleOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlector> for AntiCircleOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
            ]),
            // e423, e431, e412
            (swizzle!(self.group0(), 1, 0, 0) * Simd32x3::from([other.group1()[2], other.group1()[2], other.group1()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other.group1()[3])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for AntiCircleOnOrigin {
    type Output = AntiDipoleOnOrigin;
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return AntiDipoleOnOrigin::from_groups(/* e423, e431, e412, e321 */ Simd32x4::from([
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[0] * other.group0()[3] * -1.0),
            (self.group0()[0] * other.group0()[2]),
            (-(self.group1()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[2])),
        ]));
    }
}
impl Wedge<AntiLine> for AntiCircleOnOrigin {
    type Output = Sphere;
    fn wedge(self, other: AntiLine) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (swizzle!(self.group0(), 1, 0, 0) * swizzle!(other.group1(), 2, 2, 1) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e1234, e3215
            Simd32x2::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for AntiCircleOnOrigin {
    type Output = NullSphereAtOrigin;
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiMotor> for AntiCircleOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            (self.group1() * Simd32x3::from(other.group0()[3])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group1()[2]),
                (self.group0()[0] * other.group1()[2] * -1.0),
                (self.group0()[0] * other.group1()[1]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e3215
            (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for AntiCircleOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            (self.group1() * Simd32x3::from(other.group0()[3])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<AntiPlane> for AntiCircleOnOrigin {
    type Output = Circle;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412, e321
            Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[0] * other.group0()[2] * -1.0),
                (self.group0()[0] * other.group0()[1]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435
            (self.group0() * Simd32x3::from(other.group0()[3])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other.group0()[3])),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for AntiCircleOnOrigin {
    type Output = AntiDipoleOnOrigin;
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return AntiDipoleOnOrigin::from_groups(/* e423, e431, e412, e321 */ Simd32x4::from([
            (self.group0()[1] * other.group0()[2]),
            (self.group0()[0] * other.group0()[2] * -1.0),
            (self.group0()[0] * other.group0()[1]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiSphereOnOrigin> for AntiCircleOnOrigin {
    type Output = AntiDipoleOnOrigin;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return AntiDipoleOnOrigin::from_groups(/* e423, e431, e412, e321 */ Simd32x4::from([
            ((self.group0()[1] * other.group0()[2]) + (self.group1()[0] * other.group0()[3])),
            (self.group0()[0] * other.group0()[2] * -1.0),
            ((self.group0()[0] * other.group0()[1]) + (self.group1()[2] * other.group0()[3])),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Circle> for AntiCircleOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: Circle) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group1()[2])
                - (self.group1()[1] * other.group1()[1])
                - (self.group1()[0] * other.group1()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<CircleAligningOrigin> for AntiCircleOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group1()[2])
                - (self.group1()[1] * other.group1()[1])
                - (self.group1()[0] * other.group1()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<CircleAtInfinity> for AntiCircleOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[3])
                - (self.group1()[1] * other.group0()[2])
                - (self.group1()[0] * other.group0()[1])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleAtOrigin> for AntiCircleOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleOnOrigin> for AntiCircleOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for AntiCircleOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<Dipole> for AntiCircleOnOrigin {
    type Output = Sphere;
    fn wedge(self, other: Dipole) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            Simd32x3::from([
                ((self.group0()[1] * other.group2()[2]) + (self.group1()[0] * other.group2()[3])),
                (self.group0()[0] * other.group2()[2] * -1.0),
                ((self.group0()[0] * other.group2()[1]) + (self.group1()[2] * other.group2()[3])),
            ]),
            // e1234, e3215
            (-(Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]]))
                + Simd32x2::from([
                    (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                    0.0,
                ])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for AntiCircleOnOrigin {
    type Output = Sphere;
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            Simd32x3::from([
                ((self.group0()[1] * other.group1()[2]) + (self.group1()[0] * other.group1()[3])),
                (self.group0()[0] * other.group1()[2] * -1.0),
                ((self.group0()[0] * other.group1()[1]) + (self.group1()[2] * other.group1()[3])),
            ]),
            // e1234, e3215
            (-(Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]]))),
        );
    }
}
impl Wedge<DipoleAtInfinity> for AntiCircleOnOrigin {
    type Output = Sphere;
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            Simd32x3::from([
                ((self.group0()[1] * other.group1()[2]) + (self.group1()[0] * other.group1()[3])),
                (self.group0()[0] * other.group1()[2] * -1.0),
                ((self.group0()[0] * other.group1()[1]) + (self.group1()[2] * other.group1()[3])),
            ]),
            // e1234, e3215
            Simd32x2::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<DipoleAtOrigin> for AntiCircleOnOrigin {
    type Output = Sphere;
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (swizzle!(self.group0(), 1, 0, 0) * swizzle!(other.group1(), 2, 2, 1) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e1234, e3215
            (-(Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]]))),
        );
    }
}
impl Wedge<DipoleOnOrigin> for AntiCircleOnOrigin {
    type Output = SphereOnOrigin;
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (self.group1()[0] * other.group0()[3]),
            (self.group1()[1] * other.group0()[3]),
            (self.group1()[2] * other.group0()[3]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<DipoleOrthogonalOrigin> for AntiCircleOnOrigin {
    type Output = Sphere;
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (swizzle!(self.group0(), 1, 0, 0) * swizzle!(other.group2(), 2, 2, 1) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e1234, e3215
            (-(Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]]))
                + Simd32x2::from([
                    (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                    0.0,
                ])),
        );
    }
}
impl Wedge<DualNum> for AntiCircleOnOrigin {
    type Output = AntiCircleOnOrigin;
    fn wedge(self, other: DualNum) -> Self::Output {
        return AntiCircleOnOrigin::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other.group0()[0])),
            // e23, e31, e12
            (self.group1() * Simd32x3::from(other.group0()[0])),
        );
    }
}
impl Wedge<FlatOrigin> for AntiCircleOnOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group1() * Simd32x3::from(other[e45])));
    }
}
impl Wedge<FlatPoint> for AntiCircleOnOrigin {
    type Output = Plane;
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            ((self.group0()[1] * other.group0()[2]) + (self.group1()[0] * other.group0()[3])),
            (self.group0()[0] * other.group0()[2] * -1.0),
            ((self.group0()[0] * other.group0()[1]) + (self.group1()[2] * other.group0()[3])),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<FlatPointAtInfinity> for AntiCircleOnOrigin {
    type Output = Plane;
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[1] * other.group0()[2]),
            (self.group0()[0] * other.group0()[2] * -1.0),
            (self.group0()[0] * other.group0()[1]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Flector> for AntiCircleOnOrigin {
    type Output = Plane;
    fn wedge(self, other: Flector) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            ((self.group0()[1] * other.group0()[2]) + (self.group1()[0] * other.group0()[3])),
            (self.group0()[0] * other.group0()[2] * -1.0),
            ((self.group0()[0] * other.group0()[1]) + (self.group1()[2] * other.group0()[3])),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<FlectorAtInfinity> for AntiCircleOnOrigin {
    type Output = Plane;
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[1] * other.group0()[2]),
            (self.group0()[0] * other.group0()[2] * -1.0),
            (self.group0()[0] * other.group0()[1]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<FlectorOnOrigin> for AntiCircleOnOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group1() * Simd32x3::from(other.group0()[0])));
    }
}
impl Wedge<Infinity> for AntiCircleOnOrigin {
    type Output = Line;
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            (self.group0() * Simd32x3::from(other[e5])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other[e5])),
        );
    }
}
impl Wedge<Line> for AntiCircleOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: Line) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<LineAtInfinity> for AntiCircleOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<LineOnOrigin> for AntiCircleOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: LineOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Motor> for AntiCircleOnOrigin {
    type Output = Motor;
    fn wedge(self, other: Motor) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group1()[3]),
                (self.group1()[1] * other.group1()[3]),
                (self.group1()[2] * other.group1()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<MotorAtInfinity> for AntiCircleOnOrigin {
    type Output = Motor;
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<MotorOnOrigin> for AntiCircleOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: MotorOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<MultiVector> for AntiCircleOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group1()[2] * other.group6()[3])
                    - (self.group1()[1] * other.group6()[2])
                    - (self.group1()[0] * other.group6()[1])
                    - (self.group0()[2] * other.group8()[2])
                    - (self.group0()[0] * other.group8()[0])
                    - (self.group0()[1] * other.group8()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                0.0,
            ]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            (self.group1() * Simd32x3::from(other.group0()[0])),
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
                (self.group0()[0] * other[e1]),
                (self.group0()[1] * other[e1]),
                (self.group0()[2] * other[e1]),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                ((self.group0()[1] * other.group1()[2]) + (self.group1()[0] * other.group1()[3])),
                (self.group0()[0] * other.group1()[2] * -1.0),
                ((self.group0()[0] * other.group1()[1]) + (self.group1()[2] * other.group1()[3])),
            ]),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other[e1])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group4()[2]) + (self.group1()[0] * other.group3()[3])),
                (self.group0()[0] * other.group4()[2] * -1.0),
                ((self.group0()[0] * other.group4()[1]) + (self.group1()[2] * other.group3()[3])),
                (-(self.group1()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[0] * other.group3()[0])
                    - (self.group0()[2] * other.group5()[2])
                    - (self.group0()[0] * other.group5()[0])
                    - (self.group0()[1] * other.group5()[1])),
            ]),
            // e3215
            (-(self.group1()[2] * other.group4()[2]) - (self.group1()[0] * other.group4()[0]) - (self.group1()[1] * other.group4()[1])),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for AntiCircleOnOrigin {
    type Output = NullSphereAtOrigin;
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(
            // e1234
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Origin> for AntiCircleOnOrigin {
    type Output = NullCircleAtOrigin;
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return NullCircleAtOrigin::from_groups(/* e423, e431, e412 */ (self.group1() * Simd32x3::from(other[e4])));
    }
}
impl Wedge<RoundPoint> for AntiCircleOnOrigin {
    type Output = Circle;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) + (self.group1()[0] * other.group1()[0])),
                (self.group0()[0] * other.group0()[2] * -1.0),
                ((self.group0()[0] * other.group0()[1]) + (self.group1()[2] * other.group1()[0])),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435
            (self.group0() * Simd32x3::from(other.group1()[1])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other.group1()[1])),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for AntiCircleOnOrigin {
    type Output = CircleAligningOrigin;
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (self.group1() * Simd32x3::from(other.group0()[0])),
            // e415, e425, e435
            (self.group0() * Simd32x3::from(other.group0()[1])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other.group0()[1])),
        );
    }
}
impl Wedge<Scalar> for AntiCircleOnOrigin {
    type Output = AntiCircleOnOrigin;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiCircleOnOrigin::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other[scalar])),
            // e23, e31, e12
            (self.group1() * Simd32x3::from(other[scalar])),
        );
    }
}
impl InfixWedge for AntiDipoleOnOrigin {}
impl Wedge<AntiFlector> for AntiDipoleOnOrigin {
    type Output = Sphere;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e1234, e3215
            Simd32x2::from([
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                (self.group0()[3] * other.group1()[3]),
            ]),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for AntiDipoleOnOrigin {
    type Output = NullSphereAtOrigin;
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(
            // e1234
            (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
        );
    }
}
impl Wedge<AntiLine> for AntiDipoleOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiLine) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiMotor> for AntiDipoleOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([(self.group0()[3] * other.group0()[3]), 0.0, 0.0, 0.0]),
            // e423, e431, e412
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for AntiDipoleOnOrigin {
    type Output = AntiDipoleOnOrigin;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return AntiDipoleOnOrigin::from_groups(/* e423, e431, e412, e321 */ (self.group0() * Simd32x4::from(other.group0()[3])));
    }
}
impl Wedge<AntiPlane> for AntiDipoleOnOrigin {
    type Output = Sphere;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e1234, e3215
            Simd32x2::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                (self.group0()[3] * other.group0()[3]),
            ]),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for AntiDipoleOnOrigin {
    type Output = NullSphereAtOrigin;
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for AntiDipoleOnOrigin {
    type Output = NullSphereAtOrigin;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(
            // e1234
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Dipole> for AntiDipoleOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: Dipole) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group2()[3]) - (self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for AntiDipoleOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group1()[3]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for AntiDipoleOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group1()[3]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAtOrigin> for AntiDipoleOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleOnOrigin> for AntiDipoleOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[3] * -1.0));
    }
}
impl Wedge<DipoleOrthogonalOrigin> for AntiDipoleOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<DualNum> for AntiDipoleOnOrigin {
    type Output = AntiDipoleOnOrigin;
    fn wedge(self, other: DualNum) -> Self::Output {
        return AntiDipoleOnOrigin::from_groups(/* e423, e431, e412, e321 */ (self.group0() * Simd32x4::from(other.group0()[0])));
    }
}
impl Wedge<FlatOrigin> for AntiDipoleOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other[e45] * -1.0));
    }
}
impl Wedge<FlatPoint> for AntiDipoleOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for AntiDipoleOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Flector> for AntiDipoleOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: Flector) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<FlectorAtInfinity> for AntiDipoleOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<FlectorOnOrigin> for AntiDipoleOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[0] * -1.0));
    }
}
impl Wedge<Infinity> for AntiDipoleOnOrigin {
    type Output = Plane;
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (self.group0() * Simd32x4::from(other[e5])));
    }
}
impl Wedge<Motor> for AntiDipoleOnOrigin {
    type Output = Plane;
    fn wedge(self, other: Motor) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (self.group0() * Simd32x4::from(other.group1()[3])));
    }
}
impl Wedge<MotorAtInfinity> for AntiDipoleOnOrigin {
    type Output = Plane;
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (self.group0() * Simd32x4::from(other.group0()[3])));
    }
}
impl Wedge<MultiVector> for AntiDipoleOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group0()[3] * other.group3()[3])
                    - (self.group0()[2] * other.group4()[2])
                    - (self.group0()[0] * other.group4()[0])
                    - (self.group0()[1] * other.group4()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([(self.group0()[3] * other.group0()[0]), 0.0, 0.0, 0.0]),
            // e423, e431, e412
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group0()[0] * other[e1]),
                (self.group0()[1] * other[e1]),
                (self.group0()[2] * other[e1]),
                (-(self.group0()[3] * other.group1()[3])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e3215
            (self.group0()[3] * other[e1]),
        );
    }
}
impl Wedge<Origin> for AntiDipoleOnOrigin {
    type Output = NullSphereAtOrigin;
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self.group0()[3] * other[e4] * -1.0));
    }
}
impl Wedge<RoundPoint> for AntiDipoleOnOrigin {
    type Output = Sphere;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from(other.group1()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e1234, e3215
            Simd32x2::from([
                (-(self.group0()[3] * other.group1()[0])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
                (self.group0()[3] * other.group1()[1]),
            ]),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for AntiDipoleOnOrigin {
    type Output = Sphere;
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e1234, e3215
            (Simd32x2::from(self.group0()[3]) * other.group0() * Simd32x2::from([-1.0, 1.0])),
        );
    }
}
impl Wedge<Scalar> for AntiDipoleOnOrigin {
    type Output = AntiDipoleOnOrigin;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleOnOrigin::from_groups(/* e423, e431, e412, e321 */ (self.group0() * Simd32x4::from(other[scalar])));
    }
}
impl InfixWedge for AntiFlatOrigin {}
impl Wedge<AntiFlector> for AntiFlatOrigin {
    type Output = Horizon;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self[e321] * other.group1()[3]));
    }
}
impl Wedge<AntiMotor> for AntiFlatOrigin {
    type Output = AntiFlatOrigin;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return AntiFlatOrigin::from_groups(/* e321 */ (self[e321] * other.group0()[3]));
    }
}
impl Wedge<AntiMotorOnOrigin> for AntiFlatOrigin {
    type Output = AntiFlatOrigin;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiFlatOrigin::from_groups(/* e321 */ (self[e321] * other.group0()[3]));
    }
}
impl Wedge<AntiPlane> for AntiFlatOrigin {
    type Output = Horizon;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self[e321] * other.group0()[3]));
    }
}
impl Wedge<AntiSphereOnOrigin> for AntiFlatOrigin {
    type Output = NullSphereAtOrigin;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        use crate::elements::*;
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self[e321] * other.group0()[3] * -1.0));
    }
}
impl Wedge<Dipole> for AntiFlatOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e321] * other.group2()[3] * -1.0));
    }
}
impl Wedge<DipoleAligningOrigin> for AntiFlatOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e321] * other.group1()[3] * -1.0));
    }
}
impl Wedge<DipoleAtInfinity> for AntiFlatOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e321] * other.group1()[3] * -1.0));
    }
}
impl Wedge<DipoleOnOrigin> for AntiFlatOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e321] * other.group0()[3] * -1.0));
    }
}
impl Wedge<DualNum> for AntiFlatOrigin {
    type Output = AntiFlatOrigin;
    fn wedge(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return AntiFlatOrigin::from_groups(/* e321 */ (self[e321] * other.group0()[0]));
    }
}
impl Wedge<FlatOrigin> for AntiFlatOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e321] * other[e45] * -1.0));
    }
}
impl Wedge<FlatPoint> for AntiFlatOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e321] * other.group0()[3] * -1.0));
    }
}
impl Wedge<Flector> for AntiFlatOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e321] * other.group0()[3] * -1.0));
    }
}
impl Wedge<FlectorOnOrigin> for AntiFlatOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e321] * other.group0()[0] * -1.0));
    }
}
impl Wedge<Infinity> for AntiFlatOrigin {
    type Output = Horizon;
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self[e321] * other[e5]));
    }
}
impl Wedge<Motor> for AntiFlatOrigin {
    type Output = Horizon;
    fn wedge(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self[e321] * other.group1()[3]));
    }
}
impl Wedge<MotorAtInfinity> for AntiFlatOrigin {
    type Output = Horizon;
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self[e321] * other.group0()[3]));
    }
}
impl Wedge<MultiVector> for AntiFlatOrigin {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, (self[e321] * other.group3()[3] * -1.0)]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([(self[e321] * other.group0()[0]), 0.0, 0.0, 0.0]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (self[e321] * other.group1()[3] * -1.0)]),
            // e3215
            (self[e321] * other[e1]),
        );
    }
}
impl Wedge<Origin> for AntiFlatOrigin {
    type Output = NullSphereAtOrigin;
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self[e321] * other[e4] * -1.0));
    }
}
impl Wedge<RoundPoint> for AntiFlatOrigin {
    type Output = SphereAtOrigin;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return SphereAtOrigin::from_groups(/* e1234, e3215 */ (Simd32x2::from(self[e321]) * other.group1() * Simd32x2::from([-1.0, 1.0])));
    }
}
impl Wedge<RoundPointAtOrigin> for AntiFlatOrigin {
    type Output = SphereAtOrigin;
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        use crate::elements::*;
        return SphereAtOrigin::from_groups(/* e1234, e3215 */ (Simd32x2::from(self[e321]) * other.group0() * Simd32x2::from([-1.0, 1.0])));
    }
}
impl Wedge<Scalar> for AntiFlatOrigin {
    type Output = AntiFlatOrigin;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiFlatOrigin::from_groups(/* e321 */ (self[e321] * other[scalar]));
    }
}
impl InfixWedge for AntiFlatPoint {}
impl Wedge<AntiCircleOnOrigin> for AntiFlatPoint {
    type Output = AntiScalar;
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlector> for AntiFlatPoint {
    type Output = Horizon;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            ((self.group0()[3] * other.group1()[3]) + (self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for AntiFlatPoint {
    type Output = Horizon;
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
        );
    }
}
impl Wedge<AntiMotor> for AntiFlatPoint {
    type Output = AntiFlatPoint;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ (self.group0() * Simd32x4::from(other.group0()[3])));
    }
}
impl Wedge<AntiMotorOnOrigin> for AntiFlatPoint {
    type Output = AntiFlatPoint;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ (self.group0() * Simd32x4::from(other.group0()[3])));
    }
}
impl Wedge<AntiPlane> for AntiFlatPoint {
    type Output = Horizon;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            ((self.group0()[3] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for AntiFlatPoint {
    type Output = Horizon;
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for AntiFlatPoint {
    type Output = Sphere;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
            // e1234, e3215
            Simd32x2::from([
                (self.group0()[3] * other.group0()[3] * -1.0),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<Dipole> for AntiFlatPoint {
    type Output = AntiScalar;
    fn wedge(self, other: Dipole) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group2()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for AntiFlatPoint {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group1()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for AntiFlatPoint {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group1()[3] * -1.0));
    }
}
impl Wedge<DipoleAtOrigin> for AntiFlatPoint {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleOnOrigin> for AntiFlatPoint {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for AntiFlatPoint {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DualNum> for AntiFlatPoint {
    type Output = AntiFlatPoint;
    fn wedge(self, other: DualNum) -> Self::Output {
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ (self.group0() * Simd32x4::from(other.group0()[0])));
    }
}
impl Wedge<FlatOrigin> for AntiFlatPoint {
    type Output = AntiScalar;
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other[e45] * -1.0));
    }
}
impl Wedge<FlatPoint> for AntiFlatPoint {
    type Output = AntiScalar;
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[3] * -1.0));
    }
}
impl Wedge<Flector> for AntiFlatPoint {
    type Output = AntiScalar;
    fn wedge(self, other: Flector) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[3] * -1.0));
    }
}
impl Wedge<FlectorOnOrigin> for AntiFlatPoint {
    type Output = AntiScalar;
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[0] * -1.0));
    }
}
impl Wedge<Infinity> for AntiFlatPoint {
    type Output = Horizon;
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self.group0()[3] * other[e5]));
    }
}
impl Wedge<Motor> for AntiFlatPoint {
    type Output = Horizon;
    fn wedge(self, other: Motor) -> Self::Output {
        return Horizon::from_groups(/* e3215 */ (self.group0()[3] * other.group1()[3]));
    }
}
impl Wedge<MotorAtInfinity> for AntiFlatPoint {
    type Output = Horizon;
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return Horizon::from_groups(/* e3215 */ (self.group0()[3] * other.group0()[3]));
    }
}
impl Wedge<MultiVector> for AntiFlatPoint {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group0()[3] * other.group3()[3])
                    - (self.group0()[2] * other.group3()[2])
                    - (self.group0()[0] * other.group3()[0])
                    - (self.group0()[1] * other.group3()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([(self.group0()[3] * other.group0()[0]), 0.0, 0.0, 0.0]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e4235, e4315, e4125, e1234
            (self.group0() * Simd32x4::from(other.group1()[3]) * Simd32x4::from(-1.0)),
            // e3215
            ((self.group0()[3] * other[e1]) + (self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for AntiFlatPoint {
    type Output = AntiScalar;
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Origin> for AntiFlatPoint {
    type Output = SphereOnOrigin;
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ (self.group0() * Simd32x4::from(other[e4]) * Simd32x4::from(-1.0)));
    }
}
impl Wedge<RoundPoint> for AntiFlatPoint {
    type Output = Sphere;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from(other.group1()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
            // e1234, e3215
            Simd32x2::from([
                (self.group0()[3] * other.group1()[0] * -1.0),
                ((self.group0()[3] * other.group1()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for AntiFlatPoint {
    type Output = Sphere;
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
            // e1234, e3215
            (Simd32x2::from(self.group0()[3]) * other.group0() * Simd32x2::from([-1.0, 1.0])),
        );
    }
}
impl Wedge<Scalar> for AntiFlatPoint {
    type Output = AntiFlatPoint;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ (self.group0() * Simd32x4::from(other[scalar])));
    }
}
impl InfixWedge for AntiFlector {}
impl Wedge<AntiCircleOnOrigin> for AntiFlector {
    type Output = MultiVector;
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
            ]),
            // e423, e431, e412
            (swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([self.group1()[2], self.group1()[2], self.group1()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e235, e315, e125
            (Simd32x3::from(self.group1()[3]) * other.group1()),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for AntiFlector {
    type Output = Sphere;
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
            // e1234, e3215
            Simd32x2::from([
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                (self.group1()[3] * other.group0()[3] * -1.0),
            ]),
        );
    }
}
impl Wedge<AntiFlatOrigin> for AntiFlector {
    type Output = Horizon;
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self.group1()[3] * other[e321] * -1.0));
    }
}
impl Wedge<AntiFlatPoint> for AntiFlector {
    type Output = Horizon;
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            (-(self.group1()[3] * other.group0()[3]) - (self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlector> for AntiFlector {
    type Output = AntiMotor;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group1()[1] * other.group1()[2]),
                (self.group1()[0] * other.group1()[2] * -1.0),
                (self.group1()[0] * other.group1()[1]),
                0.0,
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group1()[0] * other.group1()[3]),
                (self.group1()[1] * other.group1()[3]),
                (self.group1()[2] * other.group1()[3]),
                (-(self.group1()[3] * other.group0()[3])
                    - (self.group1()[2] * other.group0()[2])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for AntiFlector {
    type Output = AntiMotor;
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[0] * other.group0()[3] * -1.0),
                (self.group1()[0] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35, e3215
            (Simd32x4::from(self.group1()[3]) * swizzle!(other.group0(), 1, 2, 3, 0) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<AntiLine> for AntiFlector {
    type Output = AntiFlatPoint;
    fn wedge(self, other: AntiLine) -> Self::Output {
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ Simd32x4::from([
            ((self.group1()[1] * other.group1()[2]) + (self.group1()[3] * other.group0()[0])),
            (self.group1()[0] * other.group1()[2] * -1.0),
            ((self.group1()[0] * other.group1()[1]) + (self.group1()[3] * other.group0()[2])),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiLineOnOrigin> for AntiFlector {
    type Output = AntiFlatPoint;
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ Simd32x4::from([
            (self.group1()[3] * other.group0()[0]),
            (self.group1()[3] * other.group0()[1]),
            (self.group1()[3] * other.group0()[2]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiMotor> for AntiFlector {
    type Output = AntiFlector;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                ((self.group1()[3] * other.group0()[0]) + (self.group0()[0] * other.group0()[3]) + (self.group1()[1] * other.group1()[2])),
                (self.group1()[0] * other.group1()[2] * -1.0),
                ((self.group1()[3] * other.group0()[2]) + (self.group0()[2] * other.group0()[3]) + (self.group1()[0] * other.group1()[1])),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e5
            (self.group1() * Simd32x4::from(other.group0()[3])),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for AntiFlector {
    type Output = AntiFlector;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e5
            (self.group1() * Simd32x4::from(other.group0()[3])),
        );
    }
}
impl Wedge<AntiPlane> for AntiFlector {
    type Output = AntiMotor;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group1()[1] * other.group0()[2]),
                (self.group1()[0] * other.group0()[2] * -1.0),
                (self.group1()[0] * other.group0()[1]),
                0.0,
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                ((self.group0()[3] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for AntiFlector {
    type Output = AntiMotor;
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group1()[1] * other.group0()[2]),
                (self.group1()[0] * other.group0()[2] * -1.0),
                (self.group1()[0] * other.group0()[1]),
                0.0,
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0] * -1.0),
                (self.group1()[3] * other.group0()[1] * -1.0),
                (self.group1()[3] * other.group0()[2] * -1.0),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for AntiFlector {
    type Output = MultiVector;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            (self.group1() * Simd32x4::from(other.group0()[3]) * Simd32x4::from(-1.0)),
            // e15, e25, e35
            (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (Simd32x3::from([(self.group1()[1] * other.group0()[2]), (self.group1()[0] * other.group0()[2]), (self.group1()[0] * other.group0()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            (self.group0() * Simd32x4::from(other.group0()[3]) * Simd32x4::from(-1.0)),
            // e3215
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Circle> for AntiFlector {
    type Output = Sphere;
    fn wedge(self, other: Circle) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            Simd32x3::from([
                (self.group1()[2] * other.group1()[1]),
                (-(self.group1()[2] * other.group1()[0]) - (self.group1()[3] * other.group0()[1])),
                (self.group1()[1] * other.group1()[0]),
            ]),
            // e1234, e3215
            Simd32x2::from([
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                (-(self.group1()[3] * other.group0()[3])
                    - (self.group1()[2] * other.group2()[2])
                    - (self.group1()[0] * other.group2()[0])
                    - (self.group1()[1] * other.group2()[1])),
            ]),
        );
    }
}
impl Wedge<CircleAligningOrigin> for AntiFlector {
    type Output = Sphere;
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            Simd32x3::from([
                (self.group1()[2] * other.group1()[1]),
                (-(self.group1()[2] * other.group1()[0]) - (self.group1()[3] * other.group0()[1])),
                (self.group1()[1] * other.group1()[0]),
            ]),
            // e1234, e3215
            Simd32x2::from([
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                (-(self.group1()[2] * other.group2()[2]) - (self.group1()[0] * other.group2()[0]) - (self.group1()[1] * other.group2()[1])),
            ]),
        );
    }
}
impl Wedge<CircleAtInfinity> for AntiFlector {
    type Output = Plane;
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group1()[2] * other.group0()[2]),
            (self.group1()[2] * other.group0()[1] * -1.0),
            (self.group1()[1] * other.group0()[1]),
            (-(self.group1()[3] * other.group0()[0]) - (self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<CircleAtOrigin> for AntiFlector {
    type Output = Sphere;
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from(self.group1()[3]) * other.group0() * Simd32x3::from(-1.0)),
            // e1234, e3215
            Simd32x2::from([
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<CircleOnOrigin> for AntiFlector {
    type Output = SphereOnOrigin;
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (self.group1()[2] * other.group1()[1]),
            (-(self.group1()[2] * other.group1()[0]) - (self.group1()[3] * other.group0()[1])),
            (self.group1()[1] * other.group1()[0]),
            ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<CircleOrthogonalOrigin> for AntiFlector {
    type Output = Sphere;
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
            // e1234, e3215
            Simd32x2::from([
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
                (-(self.group1()[3] * other.group0()[3])
                    - (self.group1()[2] * other.group1()[2])
                    - (self.group1()[0] * other.group1()[0])
                    - (self.group1()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<Dipole> for AntiFlector {
    type Output = MultiVector;
    fn wedge(self, other: Dipole) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group0()[3] * other.group2()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
                (self.group1()[0] * other.group2()[3] * -1.0),
                (self.group1()[1] * other.group2()[3] * -1.0),
                (self.group1()[2] * other.group2()[3] * -1.0),
            ]),
            // e423, e431, e412
            (swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([self.group1()[2], self.group1()[2], self.group1()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group1()[1] * other.group2()[2]) + (self.group1()[3] * other.group1()[0])),
                (self.group1()[0] * other.group2()[2] * -1.0),
                ((self.group1()[0] * other.group2()[1]) + (self.group1()[3] * other.group1()[2])),
            ]),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<DipoleAligningOrigin> for AntiFlector {
    type Output = MultiVector;
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group0()[3] * other.group1()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group1()[0] * other.group1()[3] * -1.0),
                (self.group1()[1] * other.group1()[3] * -1.0),
                (self.group1()[2] * other.group1()[3] * -1.0),
            ]),
            // e423, e431, e412
            (swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([self.group1()[2], self.group1()[2], self.group1()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e235, e315, e125
            (Simd32x3::from([(self.group1()[1] * other.group1()[2]), (self.group1()[0] * other.group1()[2]), (self.group1()[0] * other.group1()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<DipoleAtInfinity> for AntiFlector {
    type Output = MultiVector;
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, (self.group0()[3] * other.group1()[3] * -1.0)]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                (self.group1()[0] * other.group1()[3] * -1.0),
                (self.group1()[1] * other.group1()[3] * -1.0),
                (self.group1()[2] * other.group1()[3] * -1.0),
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group1()[1] * other.group1()[2]) + (self.group1()[3] * other.group0()[0])),
                (self.group1()[0] * other.group1()[2] * -1.0),
                ((self.group1()[0] * other.group1()[1]) + (self.group1()[3] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<DipoleAtOrigin> for AntiFlector {
    type Output = MultiVector;
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
            ]),
            // e423, e431, e412
            (swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([self.group1()[2], self.group1()[2], self.group1()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e235, e315, e125
            (swizzle!(other.group1(), 2, 2, 1) * Simd32x3::from([self.group1()[1], self.group1()[0], self.group1()[0]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<DipoleOnOrigin> for AntiFlector {
    type Output = MultiVector;
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group0()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group1()[0] * other.group0()[3] * -1.0),
                (self.group1()[1] * other.group0()[3] * -1.0),
                (self.group1()[2] * other.group0()[3] * -1.0),
            ]),
            // e423, e431, e412
            (Simd32x3::from([(self.group1()[2] * other.group0()[1]), (self.group1()[2] * other.group0()[0]), (self.group1()[1] * other.group0()[0])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for AntiFlector {
    type Output = MultiVector;
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
            ]),
            // e423, e431, e412
            (swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([self.group1()[2], self.group1()[2], self.group1()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group1()[1] * other.group2()[2]) + (self.group1()[3] * other.group1()[0])),
                (self.group1()[0] * other.group2()[2] * -1.0),
                ((self.group1()[0] * other.group2()[1]) + (self.group1()[3] * other.group1()[2])),
            ]),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<DualNum> for AntiFlector {
    type Output = AntiFlector;
    fn wedge(self, other: DualNum) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (self.group0() * Simd32x4::from(other.group0()[0])),
            // e1, e2, e3, e5
            (self.group1() * Simd32x4::from(other.group0()[0])),
        );
    }
}
impl Wedge<FlatOrigin> for AntiFlector {
    type Output = MotorOnOrigin;
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(other[e45]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<FlatPoint> for AntiFlector {
    type Output = Motor;
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]) * Simd32x4::from(-1.0)),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[1] * other.group0()[2]),
                (self.group1()[0] * other.group0()[2] * -1.0),
                (self.group1()[0] * other.group0()[1]),
                0.0,
            ]),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for AntiFlector {
    type Output = LineAtInfinity;
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return LineAtInfinity::from_groups(
            // e235, e315, e125
            (swizzle!(other.group0(), 2, 2, 1) * Simd32x3::from([self.group1()[1], self.group1()[0], self.group1()[0]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<Flector> for AntiFlector {
    type Output = Motor;
    fn wedge(self, other: Flector) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3] * -1.0),
                (self.group1()[1] * other.group0()[3] * -1.0),
                (self.group1()[2] * other.group0()[3] * -1.0),
                ((self.group1()[2] * other.group1()[2]) + (self.group1()[0] * other.group1()[0]) + (self.group1()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[1] * other.group0()[2]),
                (self.group1()[0] * other.group0()[2] * -1.0),
                (self.group1()[0] * other.group0()[1]),
                0.0,
            ]),
        );
    }
}
impl Wedge<FlectorAtInfinity> for AntiFlector {
    type Output = LineAtInfinity;
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return LineAtInfinity::from_groups(
            // e235, e315, e125
            (Simd32x3::from([(self.group1()[1] * other.group0()[2]), (self.group1()[0] * other.group0()[2]), (self.group1()[0] * other.group0()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<FlectorOnOrigin> for AntiFlector {
    type Output = MotorOnOrigin;
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group1()[0] * other.group0()[0] * -1.0),
            (self.group1()[1] * other.group0()[0] * -1.0),
            (self.group1()[2] * other.group0()[0] * -1.0),
            ((self.group1()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])),
        ]));
    }
}
impl Wedge<Infinity> for AntiFlector {
    type Output = FlectorAtInfinity;
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return FlectorAtInfinity::from_groups(
            // e15, e25, e35, e3215
            (Simd32x4::from(other[e5]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]])),
        );
    }
}
impl Wedge<Line> for AntiFlector {
    type Output = Plane;
    fn wedge(self, other: Line) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group1()[2] * other.group0()[1]),
            (self.group1()[2] * other.group0()[0] * -1.0),
            (self.group1()[1] * other.group0()[0]),
            (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<LineAtInfinity> for AntiFlector {
    type Output = Horizon;
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<LineOnOrigin> for AntiFlector {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: LineOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([self.group1()[2], self.group1()[2], self.group1()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<Motor> for AntiFlector {
    type Output = Flector;
    fn wedge(self, other: Motor) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group1()[0] * other.group1()[3]),
                (self.group1()[1] * other.group1()[3]),
                (self.group1()[2] * other.group1()[3]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group1()[2] * other.group0()[1]),
                (self.group1()[2] * other.group0()[0] * -1.0),
                (self.group1()[1] * other.group0()[0]),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<MotorAtInfinity> for AntiFlector {
    type Output = FlectorAtInfinity;
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ Simd32x4::from([
            (self.group1()[0] * other.group0()[3]),
            (self.group1()[1] * other.group0()[3]),
            (self.group1()[2] * other.group0()[3]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<MotorOnOrigin> for AntiFlector {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: MotorOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from([(self.group1()[2] * other.group0()[1]), (self.group1()[2] * other.group0()[0]), (self.group1()[1] * other.group0()[0])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<MultiVector> for AntiFlector {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group1()[3] * other.group9()[3]) + (self.group1()[2] * other.group9()[2]) + (self.group1()[0] * other.group9()[0]) + (self.group1()[1] * other.group9()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[1] * other.group0()[0]),
                (self.group1()[2] * other.group0()[0]),
                0.0,
            ]),
            // e5
            (self.group1()[3] * other.group0()[0]),
            // e41, e42, e43, e45
            (self.group1() * Simd32x4::from(other.group1()[3]) * Simd32x4::from(-1.0)),
            // e15, e25, e35
            (Simd32x3::from(other[e1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])),
            // e23, e31, e12
            (Simd32x3::from([(self.group1()[1] * other.group1()[2]), (self.group1()[0] * other.group1()[2]), (self.group1()[0] * other.group1()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group1()[2] * other.group5()[2]) - (self.group1()[0] * other.group5()[0]) - (self.group1()[1] * other.group5()[1])),
                (self.group1()[0] * other.group3()[3] * -1.0),
                (self.group1()[1] * other.group3()[3] * -1.0),
                (self.group1()[2] * other.group3()[3] * -1.0),
            ]),
            // e423, e431, e412
            (Simd32x3::from([(self.group1()[2] * other.group3()[1]), (self.group1()[2] * other.group3()[0]), (self.group1()[1] * other.group3()[0])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group1()[3] * other.group5()[0]) + (self.group0()[0] * other.group0()[0]) + (self.group1()[1] * other.group4()[2])),
                (self.group1()[0] * other.group4()[2] * -1.0),
                ((self.group1()[3] * other.group5()[2]) + (self.group0()[2] * other.group0()[0]) + (self.group1()[0] * other.group4()[1])),
            ]),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group1()[2] * other.group6()[2]),
                (-(self.group1()[3] * other.group7()[1]) - (self.group0()[1] * other.group1()[3]) - (self.group1()[2] * other.group6()[1])),
                (self.group1()[1] * other.group6()[1]),
                ((self.group1()[2] * other.group7()[2]) + (self.group1()[0] * other.group7()[0]) + (self.group1()[1] * other.group7()[1])),
            ]),
            // e3215
            (-(self.group1()[3] * other.group6()[0]) - (self.group1()[2] * other.group8()[2]) - (self.group1()[0] * other.group8()[0]) - (self.group1()[1] * other.group8()[1])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for AntiFlector {
    type Output = SphereOnOrigin;
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (self.group1()[3] * other.group0()[0] * -1.0),
            (self.group1()[3] * other.group0()[1] * -1.0),
            (self.group1()[3] * other.group0()[2] * -1.0),
            ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<NullDipoleAtOrigin> for AntiFlector {
    type Output = MultiVector;
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
            ]),
            // e423, e431, e412
            (swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([self.group1()[2], self.group1()[2], self.group1()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<NullSphereAtOrigin> for AntiFlector {
    type Output = AntiScalar;
    fn wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group1()[3] * other[e1234]));
    }
}
impl Wedge<Origin> for AntiFlector {
    type Output = MultiVector;
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            (self.group1() * Simd32x4::from(other[e4]) * Simd32x4::from(-1.0)),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            (self.group0() * Simd32x4::from(other[e4]) * Simd32x4::from(-1.0)),
            // e3215
            0.0,
        );
    }
}
impl Wedge<Plane> for AntiFlector {
    type Output = AntiScalar;
    fn wedge(self, other: Plane) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<PlaneOnOrigin> for AntiFlector {
    type Output = AntiScalar;
    fn wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<RoundPoint> for AntiFlector {
    type Output = MultiVector;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            (self.group1() * Simd32x4::from(other.group1()[0]) * Simd32x4::from(-1.0)),
            // e15, e25, e35
            (Simd32x3::from(other.group1()[1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])),
            // e23, e31, e12
            (swizzle!(other.group0(), 2, 2, 1) * Simd32x3::from([self.group1()[1], self.group1()[0], self.group1()[0]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            (self.group0() * Simd32x4::from(other.group1()[0]) * Simd32x4::from(-1.0)),
            // e3215
            ((self.group0()[3] * other.group1()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for AntiFlector {
    type Output = MultiVector;
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            (self.group1() * Simd32x4::from(other.group0()[0]) * Simd32x4::from(-1.0)),
            // e15, e25, e35
            (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            (self.group0() * Simd32x4::from(other.group0()[0]) * Simd32x4::from(-1.0)),
            // e3215
            (self.group0()[3] * other.group0()[1]),
        );
    }
}
impl Wedge<Scalar> for AntiFlector {
    type Output = AntiFlector;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (self.group0() * Simd32x4::from(other[scalar])),
            // e1, e2, e3, e5
            (self.group1() * Simd32x4::from(other[scalar])),
        );
    }
}
impl Wedge<Sphere> for AntiFlector {
    type Output = AntiScalar;
    fn wedge(self, other: Sphere) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group1()[3] * other.group1()[0]) + (self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<SphereAtOrigin> for AntiFlector {
    type Output = AntiScalar;
    fn wedge(self, other: SphereAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group1()[3] * other.group0()[0]));
    }
}
impl Wedge<SphereOnOrigin> for AntiFlector {
    type Output = AntiScalar;
    fn wedge(self, other: SphereOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group1()[3] * other.group0()[3]) + (self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl InfixWedge for AntiFlectorOnOrigin {}
impl Wedge<AntiCircleOnOrigin> for AntiFlectorOnOrigin {
    type Output = AntiDipoleOnOrigin;
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return AntiDipoleOnOrigin::from_groups(/* e423, e431, e412, e321 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[0] * -1.0),
            (self.group0()[2] * other.group0()[0]),
            (-(self.group0()[3] * other.group1()[2]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[1])),
        ]));
    }
}
impl Wedge<AntiDipoleOnOrigin> for AntiFlectorOnOrigin {
    type Output = NullSphereAtOrigin;
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(
            // e1234
            ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlatPoint> for AntiFlectorOnOrigin {
    type Output = Horizon;
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlector> for AntiFlectorOnOrigin {
    type Output = AntiMotor;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[2] * other.group1()[2]),
                (self.group0()[1] * other.group1()[2] * -1.0),
                (self.group0()[1] * other.group1()[1]),
                0.0,
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                (self.group0()[3] * other.group1()[3]),
                (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for AntiFlectorOnOrigin {
    type Output = AntiLineOnOrigin;
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return AntiLineOnOrigin::from_groups(
            // e23, e31, e12
            (Simd32x3::from([(self.group0()[2] * other.group0()[3]), (self.group0()[1] * other.group0()[3]), (self.group0()[1] * other.group0()[2])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<AntiLine> for AntiFlectorOnOrigin {
    type Output = AntiFlatPoint;
    fn wedge(self, other: AntiLine) -> Self::Output {
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ Simd32x4::from([
            (self.group0()[2] * other.group1()[2]),
            (self.group0()[1] * other.group1()[2] * -1.0),
            (self.group0()[1] * other.group1()[1]),
            (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiLineOnOrigin> for AntiFlectorOnOrigin {
    type Output = AntiFlatOrigin;
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return AntiFlatOrigin::from_groups(
            // e321
            (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiMotor> for AntiFlectorOnOrigin {
    type Output = AntiFlector;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self.group0()[2] * other.group1()[2]),
                (self.group0()[1] * other.group1()[2] * -1.0),
                (self.group0()[1] * other.group1()[1]),
                (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (self.group0()[3] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for AntiFlectorOnOrigin {
    type Output = AntiFlectorOnOrigin;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return AntiFlectorOnOrigin::from_groups(/* e321, e1, e2, e3 */ Simd32x4::from([
            (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (self.group0()[3] * other.group0()[3]),
        ]));
    }
}
impl Wedge<AntiPlane> for AntiFlectorOnOrigin {
    type Output = AntiMotor;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[2] * other.group0()[2]),
                (self.group0()[1] * other.group0()[2] * -1.0),
                (self.group0()[1] * other.group0()[1]),
                0.0,
            ]),
            // e15, e25, e35, e3215
            (swizzle!(self.group0(), 1, 2, 3, 0) * Simd32x4::from(other.group0()[3])),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for AntiFlectorOnOrigin {
    type Output = AntiLineOnOrigin;
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return AntiLineOnOrigin::from_groups(
            // e23, e31, e12
            (swizzle!(other.group0(), 2, 2, 1) * Simd32x3::from([self.group0()[2], self.group0()[1], self.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for AntiFlectorOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (self.group0()[3] * other.group0()[3] * -1.0),
                0.0,
            ]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            (Simd32x3::from([(self.group0()[2] * other.group0()[2]), (self.group0()[1] * other.group0()[2]), (self.group0()[1] * other.group0()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3] * -1.0)]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<Circle> for AntiFlectorOnOrigin {
    type Output = Sphere;
    fn wedge(self, other: Circle) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (swizzle!(other.group1(), 1, 0, 0) * Simd32x3::from([self.group0()[3], self.group0()[3], self.group0()[2]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e1234, e3215
            Simd32x2::from([
                ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[3] * other.group2()[2]) - (self.group0()[1] * other.group2()[0]) - (self.group0()[2] * other.group2()[1])),
            ]),
        );
    }
}
impl Wedge<CircleAligningOrigin> for AntiFlectorOnOrigin {
    type Output = Sphere;
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (swizzle!(other.group1(), 1, 0, 0) * Simd32x3::from([self.group0()[3], self.group0()[3], self.group0()[2]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e1234, e3215
            Simd32x2::from([
                ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
                (-(self.group0()[3] * other.group2()[2]) - (self.group0()[1] * other.group2()[0]) - (self.group0()[2] * other.group2()[1])),
            ]),
        );
    }
}
impl Wedge<CircleAtInfinity> for AntiFlectorOnOrigin {
    type Output = Plane;
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[2]),
            (self.group0()[3] * other.group0()[1] * -1.0),
            (self.group0()[2] * other.group0()[1]),
            (-(self.group0()[3] * other.group1()[2]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[1])),
        ]));
    }
}
impl Wedge<CircleAtOrigin> for AntiFlectorOnOrigin {
    type Output = SphereAtOrigin;
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return SphereAtOrigin::from_groups(/* e1234, e3215 */ Simd32x2::from([
            ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
            (-(self.group0()[3] * other.group1()[2]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[1])),
        ]));
    }
}
impl Wedge<CircleOnOrigin> for AntiFlectorOnOrigin {
    type Output = SphereOnOrigin;
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (self.group0()[3] * other.group1()[1]),
            (self.group0()[3] * other.group1()[0] * -1.0),
            (self.group0()[2] * other.group1()[0]),
            ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
        ]));
    }
}
impl Wedge<CircleOrthogonalOrigin> for AntiFlectorOnOrigin {
    type Output = SphereAtOrigin;
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return SphereAtOrigin::from_groups(/* e1234, e3215 */ Simd32x2::from([
            ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
            (-(self.group0()[3] * other.group1()[2]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[1])),
        ]));
    }
}
impl Wedge<Dipole> for AntiFlectorOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: Dipole) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, (self.group0()[0] * other.group2()[3] * -1.0)]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group0()[3] * other.group1()[2]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[1])),
                (self.group0()[1] * other.group2()[3] * -1.0),
                (self.group0()[2] * other.group2()[3] * -1.0),
                (self.group0()[3] * other.group2()[3] * -1.0),
            ]),
            // e423, e431, e412
            (swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([self.group0()[3], self.group0()[3], self.group0()[2]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e235, e315, e125
            (Simd32x3::from([(self.group0()[2] * other.group2()[2]), (self.group0()[1] * other.group2()[2]), (self.group0()[1] * other.group2()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<DipoleAligningOrigin> for AntiFlectorOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, (self.group0()[0] * other.group1()[3] * -1.0)]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group0()[1] * other.group1()[3] * -1.0),
                (self.group0()[2] * other.group1()[3] * -1.0),
                (self.group0()[3] * other.group1()[3] * -1.0),
            ]),
            // e423, e431, e412
            (swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([self.group0()[3], self.group0()[3], self.group0()[2]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e235, e315, e125
            (Simd32x3::from([(self.group0()[2] * other.group1()[2]), (self.group0()[1] * other.group1()[2]), (self.group0()[1] * other.group1()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<DipoleAtInfinity> for AntiFlectorOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, (self.group0()[0] * other.group1()[3] * -1.0)]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
                (self.group0()[1] * other.group1()[3] * -1.0),
                (self.group0()[2] * other.group1()[3] * -1.0),
                (self.group0()[3] * other.group1()[3] * -1.0),
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (Simd32x3::from([(self.group0()[2] * other.group1()[2]), (self.group0()[1] * other.group1()[2]), (self.group0()[1] * other.group1()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<DipoleAtOrigin> for AntiFlectorOnOrigin {
    type Output = CircleAtOrigin;
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return CircleAtOrigin::from_groups(
            // e423, e431, e412
            (swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([self.group0()[3], self.group0()[3], self.group0()[2]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e235, e315, e125
            (swizzle!(other.group1(), 2, 2, 1) * Simd32x3::from([self.group0()[2], self.group0()[1], self.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<DipoleOnOrigin> for AntiFlectorOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, (self.group0()[0] * other.group0()[3] * -1.0)]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
            // e423, e431, e412
            (Simd32x3::from([(self.group0()[3] * other.group0()[1]), (self.group0()[3] * other.group0()[0]), (self.group0()[2] * other.group0()[0])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for AntiFlectorOnOrigin {
    type Output = CircleOrthogonalOrigin;
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return CircleOrthogonalOrigin::from_groups(
            // e423, e431, e412, e321
            Simd32x4::from([
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[2] * other.group0()[0]),
                (-(self.group0()[3] * other.group1()[2]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[1])),
            ]),
            // e235, e315, e125
            (swizzle!(other.group2(), 2, 2, 1) * Simd32x3::from([self.group0()[2], self.group0()[1], self.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<DualNum> for AntiFlectorOnOrigin {
    type Output = AntiFlectorOnOrigin;
    fn wedge(self, other: DualNum) -> Self::Output {
        return AntiFlectorOnOrigin::from_groups(/* e321, e1, e2, e3 */ (self.group0() * Simd32x4::from(other.group0()[0])));
    }
}
impl Wedge<FlatOrigin> for AntiFlectorOnOrigin {
    type Output = MotorOnOrigin;
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            (swizzle!(self.group0(), 1, 2, 3, 0) * Simd32x4::from(other[e45]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<FlatPoint> for AntiFlectorOnOrigin {
    type Output = Motor;
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (swizzle!(self.group0(), 1, 2, 3, 0) * Simd32x4::from(other.group0()[3]) * Simd32x4::from(-1.0)),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[2] * other.group0()[2]),
                (self.group0()[1] * other.group0()[2] * -1.0),
                (self.group0()[1] * other.group0()[1]),
                0.0,
            ]),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for AntiFlectorOnOrigin {
    type Output = LineAtInfinity;
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return LineAtInfinity::from_groups(
            // e235, e315, e125
            (swizzle!(other.group0(), 2, 2, 1) * Simd32x3::from([self.group0()[2], self.group0()[1], self.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<Flector> for AntiFlectorOnOrigin {
    type Output = Motor;
    fn wedge(self, other: Flector) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                (self.group0()[3] * other.group0()[3] * -1.0),
                ((self.group0()[3] * other.group1()[2]) + (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[2] * other.group0()[2]),
                (self.group0()[1] * other.group0()[2] * -1.0),
                (self.group0()[1] * other.group0()[1]),
                0.0,
            ]),
        );
    }
}
impl Wedge<FlectorAtInfinity> for AntiFlectorOnOrigin {
    type Output = LineAtInfinity;
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return LineAtInfinity::from_groups(
            // e235, e315, e125
            (Simd32x3::from([(self.group0()[2] * other.group0()[2]), (self.group0()[1] * other.group0()[2]), (self.group0()[1] * other.group0()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<FlectorOnOrigin> for AntiFlectorOnOrigin {
    type Output = MotorOnOrigin;
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[1] * other.group0()[0] * -1.0),
            (self.group0()[2] * other.group0()[0] * -1.0),
            (self.group0()[3] * other.group0()[0] * -1.0),
            ((self.group0()[3] * other.group0()[3]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
        ]));
    }
}
impl Wedge<Infinity> for AntiFlectorOnOrigin {
    type Output = FlectorAtInfinity;
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ (swizzle!(self.group0(), 1, 2, 3, 0) * Simd32x4::from(other[e5])));
    }
}
impl Wedge<Line> for AntiFlectorOnOrigin {
    type Output = Plane;
    fn wedge(self, other: Line) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[0] * -1.0),
            (self.group0()[2] * other.group0()[0]),
            (-(self.group0()[3] * other.group1()[2]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[1])),
        ]));
    }
}
impl Wedge<LineAtInfinity> for AntiFlectorOnOrigin {
    type Output = Horizon;
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
        );
    }
}
impl Wedge<LineOnOrigin> for AntiFlectorOnOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: LineOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([self.group0()[3], self.group0()[3], self.group0()[2]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<Motor> for AntiFlectorOnOrigin {
    type Output = Flector;
    fn wedge(self, other: Motor) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                (self.group0()[3] * other.group1()[3]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[2] * other.group0()[0]),
                (-(self.group0()[3] * other.group1()[2]) - (self.group0()[1] * other.group1()[0]) - (self.group0()[2] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<MotorAtInfinity> for AntiFlectorOnOrigin {
    type Output = FlectorAtInfinity;
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ Simd32x4::from([
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (self.group0()[3] * other.group0()[3]),
            (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
        ]));
    }
}
impl Wedge<MotorOnOrigin> for AntiFlectorOnOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: MotorOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from([(self.group0()[3] * other.group0()[1]), (self.group0()[3] * other.group0()[0]), (self.group0()[2] * other.group0()[0])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<MultiVector> for AntiFlectorOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group0()[3] * other.group9()[2]) + (self.group0()[1] * other.group9()[0]) + (self.group0()[2] * other.group9()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                (self.group0()[3] * other.group0()[0]),
                0.0,
            ]),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[1] * other.group1()[3] * -1.0),
                (self.group0()[2] * other.group1()[3] * -1.0),
                (self.group0()[3] * other.group1()[3] * -1.0),
                0.0,
            ]),
            // e15, e25, e35
            (Simd32x3::from(other[e1]) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[3]])),
            // e23, e31, e12
            (Simd32x3::from([(self.group0()[2] * other.group1()[2]), (self.group0()[1] * other.group1()[2]), (self.group0()[1] * other.group1()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group0()[3] * other.group5()[2]) - (self.group0()[1] * other.group5()[0]) - (self.group0()[2] * other.group5()[1])),
                (self.group0()[1] * other.group3()[3] * -1.0),
                (self.group0()[2] * other.group3()[3] * -1.0),
                (self.group0()[3] * other.group3()[3] * -1.0),
            ]),
            // e423, e431, e412
            (Simd32x3::from([(self.group0()[3] * other.group3()[1]), (self.group0()[3] * other.group3()[0]), (self.group0()[2] * other.group3()[0])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e235, e315, e125
            (swizzle!(other.group4(), 2, 2, 1) * Simd32x3::from([self.group0()[2], self.group0()[1], self.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group0()[3] * other.group6()[2]),
                (self.group0()[3] * other.group6()[1] * -1.0),
                (self.group0()[2] * other.group6()[1]),
                ((self.group0()[3] * other.group7()[2]) + (self.group0()[1] * other.group7()[0]) + (self.group0()[2] * other.group7()[1])),
            ]),
            // e3215
            (-(self.group0()[3] * other.group8()[2]) - (self.group0()[1] * other.group8()[0]) - (self.group0()[2] * other.group8()[1])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for AntiFlectorOnOrigin {
    type Output = NullSphereAtOrigin;
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(
            // e1234
            ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for AntiFlectorOnOrigin {
    type Output = NullCircleAtOrigin;
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return NullCircleAtOrigin::from_groups(
            // e423, e431, e412
            (swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([self.group0()[3], self.group0()[3], self.group0()[2]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<Origin> for AntiFlectorOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([(self.group0()[1] * other[e4] * -1.0), (self.group0()[2] * other[e4] * -1.0), (self.group0()[3] * other[e4] * -1.0), 0.0]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other[e4] * -1.0)]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<Plane> for AntiFlectorOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: Plane) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
        );
    }
}
impl Wedge<PlaneOnOrigin> for AntiFlectorOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
        );
    }
}
impl Wedge<RoundPoint> for AntiFlectorOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[1] * other.group1()[0] * -1.0),
                (self.group0()[2] * other.group1()[0] * -1.0),
                (self.group0()[3] * other.group1()[0] * -1.0),
                0.0,
            ]),
            // e15, e25, e35
            (Simd32x3::from(other.group1()[1]) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[3]])),
            // e23, e31, e12
            (swizzle!(other.group0(), 2, 2, 1) * Simd32x3::from([self.group0()[2], self.group0()[1], self.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group1()[0] * -1.0)]),
            // e3215
            (self.group0()[0] * other.group1()[1]),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for AntiFlectorOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[1] * other.group0()[0] * -1.0),
                (self.group0()[2] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[0] * -1.0),
                0.0,
            ]),
            // e15, e25, e35
            (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[1], self.group0()[2], self.group0()[3]])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[0] * -1.0)]),
            // e3215
            (self.group0()[0] * other.group0()[1]),
        );
    }
}
impl Wedge<Scalar> for AntiFlectorOnOrigin {
    type Output = AntiFlectorOnOrigin;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiFlectorOnOrigin::from_groups(/* e321, e1, e2, e3 */ (self.group0() * Simd32x4::from(other[scalar])));
    }
}
impl Wedge<Sphere> for AntiFlectorOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: Sphere) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
        );
    }
}
impl Wedge<SphereOnOrigin> for AntiFlectorOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: SphereOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
        );
    }
}
impl InfixWedge for AntiLine {}
impl Wedge<AntiCircleOnOrigin> for AntiLine {
    type Output = Sphere;
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (swizzle!(self.group1(), 2, 2, 1) * swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e1234, e3215
            Simd32x2::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for AntiLine {
    type Output = AntiScalar;
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlector> for AntiLine {
    type Output = AntiFlatPoint;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ Simd32x4::from([
            ((self.group0()[0] * other.group1()[3]) + (self.group1()[2] * other.group1()[1])),
            (self.group1()[2] * other.group1()[0] * -1.0),
            ((self.group0()[2] * other.group1()[3]) + (self.group1()[1] * other.group1()[0])),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<AntiFlectorOnOrigin> for AntiLine {
    type Output = AntiFlatPoint;
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ Simd32x4::from([
            (self.group1()[2] * other.group0()[2]),
            (self.group1()[2] * other.group0()[1] * -1.0),
            (self.group1()[1] * other.group0()[1]),
            (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
        ]));
    }
}
impl Wedge<AntiLine> for AntiLine {
    type Output = Horizon;
    fn wedge(self, other: AntiLine) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for AntiLine {
    type Output = Horizon;
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiMotor> for AntiLine {
    type Output = AntiMotor;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for AntiLine {
    type Output = AntiMotor;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiPlane> for AntiLine {
    type Output = AntiFlatPoint;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ Simd32x4::from([
            ((self.group0()[0] * other.group0()[3]) + (self.group1()[2] * other.group0()[1])),
            (self.group1()[2] * other.group0()[0] * -1.0),
            ((self.group0()[2] * other.group0()[3]) + (self.group1()[1] * other.group0()[0])),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiPlaneOnOrigin> for AntiLine {
    type Output = AntiFlatPoint;
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ Simd32x4::from([
            (self.group1()[2] * other.group0()[1]),
            (self.group1()[2] * other.group0()[0] * -1.0),
            (self.group1()[1] * other.group0()[0]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiSphereOnOrigin> for AntiLine {
    type Output = Circle;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412, e321
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435
            (self.group1() * Simd32x3::from(other.group0()[3])),
            // e235, e315, e125
            (swizzle!(self.group1(), 2, 2, 1) * Simd32x3::from([other.group0()[1], other.group0()[0], other.group0()[0]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<Circle> for AntiLine {
    type Output = AntiScalar;
    fn wedge(self, other: Circle) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleAligningOrigin> for AntiLine {
    type Output = AntiScalar;
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleAtInfinity> for AntiLine {
    type Output = AntiScalar;
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
        );
    }
}
impl Wedge<CircleAtOrigin> for AntiLine {
    type Output = AntiScalar;
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleOnOrigin> for AntiLine {
    type Output = AntiScalar;
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for AntiLine {
    type Output = AntiScalar;
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Dipole> for AntiLine {
    type Output = Sphere;
    fn wedge(self, other: Dipole) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            Simd32x3::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group1()[2] * other.group0()[1])),
                (self.group1()[2] * other.group0()[0] * -1.0),
                ((self.group0()[2] * other.group2()[3]) + (self.group1()[1] * other.group0()[0])),
            ]),
            // e1234, e3215
            (-(Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]]))
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]]))
                + Simd32x2::from([
                    0.0,
                    (-(self.group1()[2] * other.group1()[2]) - (self.group1()[1] * other.group1()[1]) - (self.group1()[0] * other.group1()[0])),
                ])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for AntiLine {
    type Output = Sphere;
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            Simd32x3::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group1()[2] * other.group0()[1])),
                (self.group1()[2] * other.group0()[0] * -1.0),
                ((self.group0()[2] * other.group1()[3]) + (self.group1()[1] * other.group0()[0])),
            ]),
            // e1234, e3215
            (-(Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]))
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]]))),
        );
    }
}
impl Wedge<DipoleAtInfinity> for AntiLine {
    type Output = Plane;
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[0] * other.group1()[3]),
            (self.group0()[1] * other.group1()[3]),
            (self.group0()[2] * other.group1()[3]),
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<DipoleAtOrigin> for AntiLine {
    type Output = Sphere;
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (swizzle!(self.group1(), 2, 2, 1) * swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e1234, e3215
            (-(Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]))
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]]))),
        );
    }
}
impl Wedge<DipoleOnOrigin> for AntiLine {
    type Output = SphereOnOrigin;
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            ((self.group0()[0] * other.group0()[3]) + (self.group1()[2] * other.group0()[1])),
            (self.group1()[2] * other.group0()[0] * -1.0),
            ((self.group0()[2] * other.group0()[3]) + (self.group1()[1] * other.group0()[0])),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<DipoleOrthogonalOrigin> for AntiLine {
    type Output = Sphere;
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (swizzle!(self.group1(), 2, 2, 1) * swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e1234, e3215
            (-(Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]]))
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]]))
                + Simd32x2::from([
                    0.0,
                    (-(self.group1()[2] * other.group1()[2]) - (self.group1()[1] * other.group1()[1]) - (self.group1()[0] * other.group1()[0])),
                ])),
        );
    }
}
impl Wedge<DualNum> for AntiLine {
    type Output = AntiLine;
    fn wedge(self, other: DualNum) -> Self::Output {
        return AntiLine::from_groups(
            // e23, e31, e12
            (self.group0() * Simd32x3::from(other.group0()[0])),
            // e15, e25, e35
            (self.group1() * Simd32x3::from(other.group0()[0])),
        );
    }
}
impl Wedge<FlatOrigin> for AntiLine {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other[e45])));
    }
}
impl Wedge<FlatPoint> for AntiLine {
    type Output = Plane;
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<FlatPointAtInfinity> for AntiLine {
    type Output = Horizon;
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Flector> for AntiLine {
    type Output = Plane;
    fn wedge(self, other: Flector) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<FlectorAtInfinity> for AntiLine {
    type Output = Horizon;
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<FlectorOnOrigin> for AntiLine {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group0()[0])));
    }
}
impl Wedge<Infinity> for AntiLine {
    type Output = LineAtInfinity;
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ (self.group0() * Simd32x3::from(other[e5])));
    }
}
impl Wedge<Line> for AntiLine {
    type Output = AntiScalar;
    fn wedge(self, other: Line) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<LineOnOrigin> for AntiLine {
    type Output = AntiScalar;
    fn wedge(self, other: LineOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Motor> for AntiLine {
    type Output = Motor;
    fn wedge(self, other: Motor) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<MotorAtInfinity> for AntiLine {
    type Output = LineAtInfinity;
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ (self.group0() * Simd32x3::from(other.group0()[3])));
    }
}
impl Wedge<MotorOnOrigin> for AntiLine {
    type Output = AntiScalar;
    fn wedge(self, other: MotorOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<MultiVector> for AntiLine {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group1()[2] * other.group7()[2])
                    - (self.group1()[1] * other.group7()[1])
                    - (self.group1()[0] * other.group7()[0])
                    - (self.group0()[2] * other.group6()[3])
                    - (self.group0()[0] * other.group6()[1])
                    - (self.group0()[1] * other.group6()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            (self.group1() * Simd32x3::from(other.group0()[0])),
            // e23, e31, e12
            (self.group0() * Simd32x3::from(other.group0()[0])),
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                (self.group1()[0] * other.group1()[3]),
                (self.group1()[1] * other.group1()[3]),
                (self.group1()[2] * other.group1()[3]),
            ]),
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group1()[3])),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group0()[0] * other[e1]) + (self.group1()[2] * other.group1()[1])),
                (self.group1()[2] * other.group1()[0] * -1.0),
                ((self.group0()[2] * other[e1]) + (self.group1()[1] * other.group1()[0])),
            ]),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group1()[2] * other.group3()[1])),
                (self.group1()[2] * other.group3()[0] * -1.0),
                ((self.group0()[2] * other.group3()[3]) + (self.group1()[1] * other.group3()[0])),
                (-(self.group0()[2] * other.group3()[2]) - (self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1])),
            ]),
            // e3215
            (-(self.group1()[2] * other.group5()[2])
                - (self.group1()[1] * other.group5()[1])
                - (self.group1()[0] * other.group5()[0])
                - (self.group0()[2] * other.group4()[2])
                - (self.group0()[0] * other.group4()[0])
                - (self.group0()[1] * other.group4()[1])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for AntiLine {
    type Output = AntiScalar;
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for AntiLine {
    type Output = SphereOnOrigin;
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (self.group1()[2] * other.group0()[1]),
            (self.group1()[2] * other.group0()[0] * -1.0),
            (self.group1()[1] * other.group0()[0]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Origin> for AntiLine {
    type Output = CircleOnOrigin;
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other[e4])),
            // e415, e425, e435
            (self.group1() * Simd32x3::from(other[e4])),
        );
    }
}
impl Wedge<RoundPoint> for AntiLine {
    type Output = Circle;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412, e321
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[2] * other.group1()[0]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435
            (self.group1() * Simd32x3::from(other.group1()[0])),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group0()[0] * other.group1()[1]) + (self.group1()[2] * other.group0()[1])),
                (self.group1()[2] * other.group0()[0] * -1.0),
                ((self.group0()[2] * other.group1()[1]) + (self.group1()[1] * other.group0()[0])),
            ]),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for AntiLine {
    type Output = CircleAligningOrigin;
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group0()[0])),
            // e415, e425, e435
            (self.group1() * Simd32x3::from(other.group0()[0])),
            // e235, e315, e125
            (self.group0() * Simd32x3::from(other.group0()[1])),
        );
    }
}
impl Wedge<Scalar> for AntiLine {
    type Output = AntiLine;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiLine::from_groups(
            // e23, e31, e12
            (self.group0() * Simd32x3::from(other[scalar])),
            // e15, e25, e35
            (self.group1() * Simd32x3::from(other[scalar])),
        );
    }
}
impl InfixWedge for AntiLineOnOrigin {}
impl Wedge<AntiCircleOnOrigin> for AntiLineOnOrigin {
    type Output = NullSphereAtOrigin;
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlector> for AntiLineOnOrigin {
    type Output = AntiFlatPoint;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ Simd32x4::from([
            (self.group0()[0] * other.group1()[3]),
            (self.group0()[1] * other.group1()[3]),
            (self.group0()[2] * other.group1()[3]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<AntiFlectorOnOrigin> for AntiLineOnOrigin {
    type Output = AntiFlatOrigin;
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return AntiFlatOrigin::from_groups(
            // e321
            (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
        );
    }
}
impl Wedge<AntiLine> for AntiLineOnOrigin {
    type Output = Horizon;
    fn wedge(self, other: AntiLine) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiMotor> for AntiLineOnOrigin {
    type Output = AntiMotor;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for AntiLineOnOrigin {
    type Output = AntiLineOnOrigin;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return AntiLineOnOrigin::from_groups(/* e23, e31, e12 */ (self.group0() * Simd32x3::from(other.group0()[3])));
    }
}
impl Wedge<AntiPlane> for AntiLineOnOrigin {
    type Output = AntiFlatPoint;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiPlaneOnOrigin> for AntiLineOnOrigin {
    type Output = AntiFlatOrigin;
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return AntiFlatOrigin::from_groups(
            // e321
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for AntiLineOnOrigin {
    type Output = AntiDipoleOnOrigin;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return AntiDipoleOnOrigin::from_groups(/* e423, e431, e412, e321 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Circle> for AntiLineOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: Circle) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleAligningOrigin> for AntiLineOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleAtInfinity> for AntiLineOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
        );
    }
}
impl Wedge<CircleOnOrigin> for AntiLineOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<Dipole> for AntiLineOnOrigin {
    type Output = Sphere;
    fn wedge(self, other: Dipole) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (self.group0() * Simd32x3::from(other.group2()[3])),
            // e1234, e3215
            (-(Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]]))
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]]))),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for AntiLineOnOrigin {
    type Output = Sphere;
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (self.group0() * Simd32x3::from(other.group1()[3])),
            // e1234, e3215
            (-(Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]))
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]]))),
        );
    }
}
impl Wedge<DipoleAtInfinity> for AntiLineOnOrigin {
    type Output = Plane;
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[0] * other.group1()[3]),
            (self.group0()[1] * other.group1()[3]),
            (self.group0()[2] * other.group1()[3]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<DipoleAtOrigin> for AntiLineOnOrigin {
    type Output = SphereAtOrigin;
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return SphereAtOrigin::from_groups(
            // e1234, e3215
            (-(Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]))
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]]))),
        );
    }
}
impl Wedge<DipoleOnOrigin> for AntiLineOnOrigin {
    type Output = SphereOnOrigin;
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<DipoleOrthogonalOrigin> for AntiLineOnOrigin {
    type Output = SphereAtOrigin;
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return SphereAtOrigin::from_groups(
            // e1234, e3215
            (-(Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]]))
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]]))),
        );
    }
}
impl Wedge<DualNum> for AntiLineOnOrigin {
    type Output = AntiLineOnOrigin;
    fn wedge(self, other: DualNum) -> Self::Output {
        return AntiLineOnOrigin::from_groups(/* e23, e31, e12 */ (self.group0() * Simd32x3::from(other.group0()[0])));
    }
}
impl Wedge<FlatOrigin> for AntiLineOnOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other[e45])));
    }
}
impl Wedge<FlatPoint> for AntiLineOnOrigin {
    type Output = Plane;
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<FlatPointAtInfinity> for AntiLineOnOrigin {
    type Output = Horizon;
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Flector> for AntiLineOnOrigin {
    type Output = Plane;
    fn wedge(self, other: Flector) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<FlectorAtInfinity> for AntiLineOnOrigin {
    type Output = Horizon;
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<FlectorOnOrigin> for AntiLineOnOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group0()[0])));
    }
}
impl Wedge<Infinity> for AntiLineOnOrigin {
    type Output = LineAtInfinity;
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ (self.group0() * Simd32x3::from(other[e5])));
    }
}
impl Wedge<Line> for AntiLineOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: Line) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<LineOnOrigin> for AntiLineOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: LineOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Motor> for AntiLineOnOrigin {
    type Output = Motor;
    fn wedge(self, other: Motor) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<MotorAtInfinity> for AntiLineOnOrigin {
    type Output = LineAtInfinity;
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ (self.group0() * Simd32x3::from(other.group0()[3])));
    }
}
impl Wedge<MotorOnOrigin> for AntiLineOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: MotorOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<MultiVector> for AntiLineOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group0()[2] * other.group6()[3]) - (self.group0()[0] * other.group6()[1]) - (self.group0()[1] * other.group6()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            (self.group0() * Simd32x3::from(other.group0()[0])),
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                0.0,
                0.0,
                0.0,
            ]),
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group1()[3])),
            // e235, e315, e125
            (self.group0() * Simd32x3::from(other[e1])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group0()[0] * other.group3()[3]),
                (self.group0()[1] * other.group3()[3]),
                (self.group0()[2] * other.group3()[3]),
                (-(self.group0()[2] * other.group3()[2]) - (self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1])),
            ]),
            // e3215
            (-(self.group0()[2] * other.group4()[2]) - (self.group0()[0] * other.group4()[0]) - (self.group0()[1] * other.group4()[1])),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for AntiLineOnOrigin {
    type Output = NullSphereAtOrigin;
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Origin> for AntiLineOnOrigin {
    type Output = NullCircleAtOrigin;
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return NullCircleAtOrigin::from_groups(/* e423, e431, e412 */ (self.group0() * Simd32x3::from(other[e4])));
    }
}
impl Wedge<RoundPoint> for AntiLineOnOrigin {
    type Output = CircleOrthogonalOrigin;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return CircleOrthogonalOrigin::from_groups(
            // e423, e431, e412, e321
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[2] * other.group1()[0]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125
            (self.group0() * Simd32x3::from(other.group1()[1])),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for AntiLineOnOrigin {
    type Output = CircleAtOrigin;
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return CircleAtOrigin::from_groups(
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group0()[0])),
            // e235, e315, e125
            (self.group0() * Simd32x3::from(other.group0()[1])),
        );
    }
}
impl Wedge<Scalar> for AntiLineOnOrigin {
    type Output = AntiLineOnOrigin;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiLineOnOrigin::from_groups(/* e23, e31, e12 */ (self.group0() * Simd32x3::from(other[scalar])));
    }
}
impl InfixWedge for AntiMotor {}
impl Wedge<AntiCircleOnOrigin> for AntiMotor {
    type Output = MultiVector;
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[3]) * other.group1()),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group1()[2] * other.group0()[1]),
                (self.group1()[2] * other.group0()[0] * -1.0),
                (self.group1()[1] * other.group0()[0]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e3215
            (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for AntiMotor {
    type Output = MultiVector;
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([(self.group0()[3] * other.group0()[3]), 0.0, 0.0, 0.0]),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<AntiFlatOrigin> for AntiMotor {
    type Output = AntiFlatOrigin;
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiFlatOrigin::from_groups(/* e321 */ (self.group0()[3] * other[e321]));
    }
}
impl Wedge<AntiFlatPoint> for AntiMotor {
    type Output = AntiFlatPoint;
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ (Simd32x4::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<AntiFlector> for AntiMotor {
    type Output = AntiFlector;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                ((self.group1()[2] * other.group1()[1]) + (self.group0()[0] * other.group1()[3]) + (self.group0()[3] * other.group0()[0])),
                (self.group1()[2] * other.group1()[0] * -1.0),
                ((self.group1()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e1, e2, e3, e5
            (Simd32x4::from(self.group0()[3]) * other.group1()),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for AntiMotor {
    type Output = AntiFlector;
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self.group1()[2] * other.group0()[2]),
                (self.group1()[2] * other.group0()[1] * -1.0),
                (self.group1()[1] * other.group0()[1]),
                (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (self.group0()[3] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiLine> for AntiMotor {
    type Output = AntiMotor;
    fn wedge(self, other: AntiLine) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for AntiMotor {
    type Output = AntiMotor;
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiMotor> for AntiMotor {
    type Output = AntiMotor;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                ((self.group0()[3] * other.group1()[0]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[3] * other.group1()[1]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[3] * other.group1()[2]) + (self.group1()[2] * other.group0()[3])),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for AntiMotor {
    type Output = AntiMotor;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiPlane> for AntiMotor {
    type Output = AntiFlector;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[2] * other.group0()[1])),
                (self.group1()[2] * other.group0()[0] * -1.0),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e5
            (Simd32x4::from(self.group0()[3]) * other.group0()),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for AntiMotor {
    type Output = AntiFlector;
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self.group1()[2] * other.group0()[1]),
                (self.group1()[2] * other.group0()[0] * -1.0),
                (self.group1()[1] * other.group0()[0]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiScalar> for AntiMotor {
    type Output = AntiScalar;
    fn wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other[e12345]));
    }
}
impl Wedge<AntiSphereOnOrigin> for AntiMotor {
    type Output = MultiVector;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, (self.group1()[3] * other.group0()[3])]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
            ]),
            // e423, e431, e412
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e235, e315, e125
            (Simd32x3::from([(self.group1()[2] * other.group0()[1]), (self.group1()[2] * other.group0()[0]), (self.group1()[1] * other.group0()[0])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<Circle> for AntiMotor {
    type Output = MultiVector;
    fn wedge(self, other: Circle) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[3], other.group1()[0], other.group1()[1], other.group1()[2]])),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[3]) * other.group2()),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<CircleAligningOrigin> for AntiMotor {
    type Output = MultiVector;
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
            ]),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[3]) * other.group2()),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<CircleAtInfinity> for AntiMotor {
    type Output = MultiVector;
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[3]) * other.group1()),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<CircleAtOrigin> for AntiMotor {
    type Output = MultiVector;
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[3]) * other.group1()),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<CircleOnOrigin> for AntiMotor {
    type Output = MultiVector;
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
            ]),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for AntiMotor {
    type Output = MultiVector;
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([(self.group0()[3] * other.group0()[3]), 0.0, 0.0, 0.0]),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[3]) * other.group1()),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<Dipole> for AntiMotor {
    type Output = MultiVector;
    fn wedge(self, other: Dipole) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]])),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]])),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[3]) * other.group1()),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group2()[3]) + (self.group1()[2] * other.group0()[1])),
                (self.group1()[2] * other.group0()[0] * -1.0),
                ((self.group0()[2] * other.group2()[3]) + (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e3215
            (-(self.group1()[2] * other.group1()[2])
                - (self.group1()[1] * other.group1()[1])
                - (self.group1()[0] * other.group1()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for AntiMotor {
    type Output = MultiVector;
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group1()[2] * other.group0()[1])),
                (self.group1()[2] * other.group0()[0] * -1.0),
                ((self.group0()[2] * other.group1()[3]) + (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e3215
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for AntiMotor {
    type Output = MultiVector;
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group1()[3])]),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                0.0,
            ]),
            // e3215
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAtOrigin> for AntiMotor {
    type Output = MultiVector;
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[3]) * other.group1()),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group1()[2] * other.group0()[1]),
                (self.group1()[2] * other.group0()[0] * -1.0),
                (self.group1()[1] * other.group0()[0]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e3215
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleOnOrigin> for AntiMotor {
    type Output = MultiVector;
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[2] * other.group0()[1])),
                (self.group1()[2] * other.group0()[0] * -1.0),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[1] * other.group0()[0])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for AntiMotor {
    type Output = MultiVector;
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[3]) * other.group2()),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[3]) * other.group1()),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group1()[2] * other.group0()[1]),
                (self.group1()[2] * other.group0()[0] * -1.0),
                (self.group1()[1] * other.group0()[0]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e3215
            (-(self.group1()[2] * other.group1()[2])
                - (self.group1()[1] * other.group1()[1])
                - (self.group1()[0] * other.group1()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<DualNum> for AntiMotor {
    type Output = MultiVector;
    fn wedge(self, other: DualNum) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(self.group0()[3]) * other.group0()),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])),
            // e23, e31, e12
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            (self.group1()[3] * other.group0()[0]),
        );
    }
}
impl Wedge<FlatOrigin> for AntiMotor {
    type Output = FlectorOnOrigin;
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ (swizzle!(self.group0(), 3, 0, 1, 2) * Simd32x4::from(other[e45])));
    }
}
impl Wedge<FlatPoint> for AntiMotor {
    type Output = Flector;
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for AntiMotor {
    type Output = FlectorAtInfinity;
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Flector> for AntiMotor {
    type Output = Flector;
    fn wedge(self, other: Flector) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group1()[2])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<FlectorAtInfinity> for AntiMotor {
    type Output = FlectorAtInfinity;
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<FlectorOnOrigin> for AntiMotor {
    type Output = FlectorOnOrigin;
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            ((self.group0()[0] * other.group0()[0]) + (self.group0()[3] * other.group0()[1])),
            ((self.group0()[1] * other.group0()[0]) + (self.group0()[3] * other.group0()[2])),
            ((self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group0()[3])),
        ]));
    }
}
impl Wedge<Horizon> for AntiMotor {
    type Output = Horizon;
    fn wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self.group0()[3] * other[e3215]));
    }
}
impl Wedge<Infinity> for AntiMotor {
    type Output = MotorAtInfinity;
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return MotorAtInfinity::from_groups(/* e235, e315, e125, e5 */ (self.group0() * Simd32x4::from(other[e5])));
    }
}
impl Wedge<Line> for AntiMotor {
    type Output = Motor;
    fn wedge(self, other: Line) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<LineAtInfinity> for AntiMotor {
    type Output = LineAtInfinity;
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ (Simd32x3::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<LineOnOrigin> for AntiMotor {
    type Output = MotorOnOrigin;
    fn wedge(self, other: LineOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Motor> for AntiMotor {
    type Output = Motor;
    fn wedge(self, other: Motor) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group1()[3]),
            ]),
        );
    }
}
impl Wedge<MotorAtInfinity> for AntiMotor {
    type Output = MotorAtInfinity;
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return MotorAtInfinity::from_groups(/* e235, e315, e125, e5 */ Simd32x4::from([
            ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
            ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
            (self.group0()[3] * other.group0()[3]),
        ]));
    }
}
impl Wedge<MotorOnOrigin> for AntiMotor {
    type Output = MotorOnOrigin;
    fn wedge(self, other: MotorOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ (Simd32x4::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<MultiVector> for AntiMotor {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self.group0()[3] * other.group0()[0]),
                ((self.group0()[3] * other.group0()[1]) + (self.group1()[3] * other.group1()[3])),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[3]) * other.group1()),
            // e5
            (self.group0()[3] * other[e1]),
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[3]) * other.group3()),
            // e15, e25, e35
            ((Simd32x3::from(self.group0()[3]) * other.group4()) + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))),
            // e23, e31, e12
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])) + (Simd32x3::from(self.group0()[3]) * other.group5())),
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ((self.group0()[3] * other.group6()[1]) + (self.group1()[0] * other.group1()[3])),
                ((self.group0()[3] * other.group6()[2]) + (self.group1()[1] * other.group1()[3])),
                ((self.group0()[3] * other.group6()[3]) + (self.group1()[2] * other.group1()[3])),
            ]),
            // e423, e431, e412
            ((Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])) + (Simd32x3::from(self.group0()[3]) * other.group7())),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group1()[2] * other.group1()[1]) + (self.group0()[0] * other[e1]) + (self.group0()[3] * other.group8()[0])),
                (self.group1()[2] * other.group1()[0] * -1.0),
                ((self.group1()[1] * other.group1()[0]) + (self.group0()[2] * other[e1]) + (self.group0()[3] * other.group8()[2])),
            ]),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                ((self.group1()[2] * other.group3()[1]) + (self.group0()[0] * other.group3()[3]) + (self.group0()[3] * other.group9()[0])),
                (self.group1()[2] * other.group3()[0] * -1.0),
                ((self.group1()[1] * other.group3()[0]) + (self.group0()[2] * other.group3()[3]) + (self.group0()[3] * other.group9()[2])),
                (self.group0()[3] * other.group9()[3]),
            ]),
            // e3215
            (-(self.group1()[2] * other.group5()[2])
                - (self.group1()[1] * other.group5()[1])
                - (self.group1()[0] * other.group5()[0])
                - (self.group0()[2] * other.group4()[2])
                - (self.group0()[0] * other.group4()[0])
                - (self.group0()[1] * other.group4()[1])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for AntiMotor {
    type Output = MultiVector;
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for AntiMotor {
    type Output = MultiVector;
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group1()[2] * other.group0()[1]),
                (self.group1()[2] * other.group0()[0] * -1.0),
                (self.group1()[1] * other.group0()[0]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<NullSphereAtOrigin> for AntiMotor {
    type Output = NullSphereAtOrigin;
    fn wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self.group0()[3] * other[e1234]));
    }
}
impl Wedge<Origin> for AntiMotor {
    type Output = MultiVector;
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, (self.group1()[3] * other[e4])]),
            // e1, e2, e3, e4
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other[e4])]),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([0.0, (self.group1()[0] * other[e4]), (self.group1()[1] * other[e4]), (self.group1()[2] * other[e4])]),
            // e423, e431, e412
            (Simd32x3::from(other[e4]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<Plane> for AntiMotor {
    type Output = Plane;
    fn wedge(self, other: Plane) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (Simd32x4::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<PlaneOnOrigin> for AntiMotor {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<RoundPoint> for AntiMotor {
    type Output = MultiVector;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, (self.group1()[3] * other.group1()[0])]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]])),
            // e5
            (self.group0()[3] * other.group1()[1]),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                (self.group1()[0] * other.group1()[0]),
                (self.group1()[1] * other.group1()[0]),
                (self.group1()[2] * other.group1()[0]),
            ]),
            // e423, e431, e412
            (Simd32x3::from(other.group1()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group0()[0] * other.group1()[1]) + (self.group1()[2] * other.group0()[1])),
                (self.group1()[2] * other.group0()[0] * -1.0),
                ((self.group0()[2] * other.group1()[1]) + (self.group1()[1] * other.group0()[0])),
            ]),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<RoundPointAtOrigin> for AntiMotor {
    type Output = MultiVector;
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, (self.group1()[3] * other.group0()[0])]),
            // e1, e2, e3, e4
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[0])]),
            // e5
            (self.group0()[3] * other.group0()[1]),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[1] * other.group0()[0]),
                (self.group1()[2] * other.group0()[0]),
            ]),
            // e423, e431, e412
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e235, e315, e125
            (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<Scalar> for AntiMotor {
    type Output = AntiMotor;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (self.group0() * Simd32x4::from(other[scalar])),
            // e15, e25, e35, e3215
            (self.group1() * Simd32x4::from(other[scalar])),
        );
    }
}
impl Wedge<Sphere> for AntiMotor {
    type Output = Sphere;
    fn wedge(self, other: Sphere) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e1234, e3215
            (Simd32x2::from(self.group0()[3]) * other.group1()),
        );
    }
}
impl Wedge<SphereAtOrigin> for AntiMotor {
    type Output = SphereAtOrigin;
    fn wedge(self, other: SphereAtOrigin) -> Self::Output {
        return SphereAtOrigin::from_groups(/* e1234, e3215 */ (Simd32x2::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<SphereOnOrigin> for AntiMotor {
    type Output = SphereOnOrigin;
    fn wedge(self, other: SphereOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ (Simd32x4::from(self.group0()[3]) * other.group0()));
    }
}
impl InfixWedge for AntiMotorOnOrigin {}
impl Wedge<AntiCircleOnOrigin> for AntiMotorOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[3]) * other.group1()),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for AntiMotorOnOrigin {
    type Output = AntiDipoleOnOrigin;
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiDipoleOnOrigin::from_groups(/* e423, e431, e412, e321 */ (Simd32x4::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<AntiFlatOrigin> for AntiMotorOnOrigin {
    type Output = AntiFlatOrigin;
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiFlatOrigin::from_groups(/* e321 */ (self.group0()[3] * other[e321]));
    }
}
impl Wedge<AntiFlatPoint> for AntiMotorOnOrigin {
    type Output = AntiFlatPoint;
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ (Simd32x4::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<AntiFlector> for AntiMotorOnOrigin {
    type Output = AntiFlector;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e1, e2, e3, e5
            (Simd32x4::from(self.group0()[3]) * other.group1()),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for AntiMotorOnOrigin {
    type Output = AntiFlectorOnOrigin;
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return AntiFlectorOnOrigin::from_groups(/* e321, e1, e2, e3 */ Simd32x4::from([
            (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (self.group0()[3] * other.group0()[3]),
        ]));
    }
}
impl Wedge<AntiLine> for AntiMotorOnOrigin {
    type Output = AntiMotor;
    fn wedge(self, other: AntiLine) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for AntiMotorOnOrigin {
    type Output = AntiLineOnOrigin;
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return AntiLineOnOrigin::from_groups(/* e23, e31, e12 */ (Simd32x3::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<AntiMotor> for AntiMotorOnOrigin {
    type Output = AntiMotor;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
                (self.group0()[3] * other.group0()[3]),
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for AntiMotorOnOrigin {
    type Output = AntiMotorOnOrigin;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ Simd32x4::from([
            ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
            ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
            (self.group0()[3] * other.group0()[3]),
        ]));
    }
}
impl Wedge<AntiPlane> for AntiMotorOnOrigin {
    type Output = AntiFlector;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e5
            (Simd32x4::from(self.group0()[3]) * other.group0()),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for AntiMotorOnOrigin {
    type Output = AntiFlectorOnOrigin;
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return AntiFlectorOnOrigin::from_groups(/* e321, e1, e2, e3 */ Simd32x4::from([
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
        ]));
    }
}
impl Wedge<AntiScalar> for AntiMotorOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other[e12345]));
    }
}
impl Wedge<AntiSphereOnOrigin> for AntiMotorOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                0.0,
                0.0,
                0.0,
            ]),
            // e423, e431, e412
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<Circle> for AntiMotorOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: Circle) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[3], other.group1()[0], other.group1()[1], other.group1()[2]])),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[3]) * other.group2()),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<CircleAligningOrigin> for AntiMotorOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
            ]),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[3]) * other.group2()),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<CircleAtInfinity> for AntiMotorOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[3]) * other.group1()),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<CircleAtOrigin> for AntiMotorOnOrigin {
    type Output = CircleAtOrigin;
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return CircleAtOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[3]) * other.group1()),
        );
    }
}
impl Wedge<CircleOnOrigin> for AntiMotorOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
            ]),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for AntiMotorOnOrigin {
    type Output = CircleOrthogonalOrigin;
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return CircleOrthogonalOrigin::from_groups(
            // e423, e431, e412, e321
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[3]) * other.group1()),
        );
    }
}
impl Wedge<Dipole> for AntiMotorOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: Dipole) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]])),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]])),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[3]) * other.group1()),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group0()[0] * other.group2()[3]),
                (self.group0()[1] * other.group2()[3]),
                (self.group0()[2] * other.group2()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e3215
            (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for AntiMotorOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e3215
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for AntiMotorOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group1()[3])]),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                0.0,
            ]),
            // e3215
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAtOrigin> for AntiMotorOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[3]) * other.group1()),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e3215
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleOnOrigin> for AntiMotorOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for AntiMotorOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[3]) * other.group2()),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[3]) * other.group1()),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e3215
            (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<DualNum> for AntiMotorOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: DualNum) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(self.group0()[3]) * other.group0()),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<FlatOrigin> for AntiMotorOnOrigin {
    type Output = FlectorOnOrigin;
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ (swizzle!(self.group0(), 3, 0, 1, 2) * Simd32x4::from(other[e45])));
    }
}
impl Wedge<FlatPoint> for AntiMotorOnOrigin {
    type Output = Flector;
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for AntiMotorOnOrigin {
    type Output = FlectorAtInfinity;
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Flector> for AntiMotorOnOrigin {
    type Output = Flector;
    fn wedge(self, other: Flector) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group1()[2])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<FlectorAtInfinity> for AntiMotorOnOrigin {
    type Output = FlectorAtInfinity;
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<FlectorOnOrigin> for AntiMotorOnOrigin {
    type Output = FlectorOnOrigin;
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            ((self.group0()[0] * other.group0()[0]) + (self.group0()[3] * other.group0()[1])),
            ((self.group0()[1] * other.group0()[0]) + (self.group0()[3] * other.group0()[2])),
            ((self.group0()[2] * other.group0()[0]) + (self.group0()[3] * other.group0()[3])),
        ]));
    }
}
impl Wedge<Horizon> for AntiMotorOnOrigin {
    type Output = Horizon;
    fn wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self.group0()[3] * other[e3215]));
    }
}
impl Wedge<Infinity> for AntiMotorOnOrigin {
    type Output = MotorAtInfinity;
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return MotorAtInfinity::from_groups(/* e235, e315, e125, e5 */ (self.group0() * Simd32x4::from(other[e5])));
    }
}
impl Wedge<Line> for AntiMotorOnOrigin {
    type Output = Motor;
    fn wedge(self, other: Line) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<LineAtInfinity> for AntiMotorOnOrigin {
    type Output = LineAtInfinity;
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ (Simd32x3::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<LineOnOrigin> for AntiMotorOnOrigin {
    type Output = MotorOnOrigin;
    fn wedge(self, other: LineOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Motor> for AntiMotorOnOrigin {
    type Output = Motor;
    fn wedge(self, other: Motor) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group0()[3] * other.group1()[0])),
                ((self.group0()[1] * other.group1()[3]) + (self.group0()[3] * other.group1()[1])),
                ((self.group0()[2] * other.group1()[3]) + (self.group0()[3] * other.group1()[2])),
                (self.group0()[3] * other.group1()[3]),
            ]),
        );
    }
}
impl Wedge<MotorAtInfinity> for AntiMotorOnOrigin {
    type Output = MotorAtInfinity;
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return MotorAtInfinity::from_groups(/* e235, e315, e125, e5 */ Simd32x4::from([
            ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
            ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
            (self.group0()[3] * other.group0()[3]),
        ]));
    }
}
impl Wedge<MotorOnOrigin> for AntiMotorOnOrigin {
    type Output = MotorOnOrigin;
    fn wedge(self, other: MotorOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ (Simd32x4::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<MultiVector> for AntiMotorOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(self.group0()[3]) * other.group0()),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[3]) * other.group1()),
            // e5
            (self.group0()[3] * other[e1]),
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[3]) * other.group3()),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[3]) * other.group4()),
            // e23, e31, e12
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])) + (Simd32x3::from(self.group0()[3]) * other.group5())),
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                (self.group0()[3] * other.group6()[1]),
                (self.group0()[3] * other.group6()[2]),
                (self.group0()[3] * other.group6()[3]),
            ]),
            // e423, e431, e412
            ((Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])) + (Simd32x3::from(self.group0()[3]) * other.group7())),
            // e235, e315, e125
            ((Simd32x3::from(other[e1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])) + (Simd32x3::from(self.group0()[3]) * other.group8())),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group3()[3]) + (self.group0()[3] * other.group9()[0])),
                ((self.group0()[1] * other.group3()[3]) + (self.group0()[3] * other.group9()[1])),
                ((self.group0()[2] * other.group3()[3]) + (self.group0()[3] * other.group9()[2])),
                (self.group0()[3] * other.group9()[3]),
            ]),
            // e3215
            (-(self.group0()[2] * other.group4()[2]) - (self.group0()[0] * other.group4()[0]) - (self.group0()[1] * other.group4()[1])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for AntiMotorOnOrigin {
    type Output = NullCircleAtOrigin;
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return NullCircleAtOrigin::from_groups(/* e423, e431, e412 */ (Simd32x3::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<NullDipoleAtOrigin> for AntiMotorOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<NullSphereAtOrigin> for AntiMotorOnOrigin {
    type Output = NullSphereAtOrigin;
    fn wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self.group0()[3] * other[e1234]));
    }
}
impl Wedge<Origin> for AntiMotorOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other[e4])]),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            (Simd32x3::from(other[e4]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<Plane> for AntiMotorOnOrigin {
    type Output = Plane;
    fn wedge(self, other: Plane) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (Simd32x4::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<PlaneOnOrigin> for AntiMotorOnOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<RoundPoint> for AntiMotorOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]])),
            // e5
            (self.group0()[3] * other.group1()[1]),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                0.0,
                0.0,
                0.0,
            ]),
            // e423, e431, e412
            (Simd32x3::from(other.group1()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e235, e315, e125
            (Simd32x3::from(other.group1()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<RoundPointAtOrigin> for AntiMotorOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[0])]),
            // e5
            (self.group0()[3] * other.group0()[1]),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e235, e315, e125
            (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<Scalar> for AntiMotorOnOrigin {
    type Output = AntiMotorOnOrigin;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ (self.group0() * Simd32x4::from(other[scalar])));
    }
}
impl Wedge<Sphere> for AntiMotorOnOrigin {
    type Output = Sphere;
    fn wedge(self, other: Sphere) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e1234, e3215
            (Simd32x2::from(self.group0()[3]) * other.group1()),
        );
    }
}
impl Wedge<SphereAtOrigin> for AntiMotorOnOrigin {
    type Output = SphereAtOrigin;
    fn wedge(self, other: SphereAtOrigin) -> Self::Output {
        return SphereAtOrigin::from_groups(/* e1234, e3215 */ (Simd32x2::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<SphereOnOrigin> for AntiMotorOnOrigin {
    type Output = SphereOnOrigin;
    fn wedge(self, other: SphereOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ (Simd32x4::from(self.group0()[3]) * other.group0()));
    }
}
impl InfixWedge for AntiPlane {}
impl Wedge<AntiCircleOnOrigin> for AntiPlane {
    type Output = Circle;
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412, e321
            Simd32x4::from([
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[2] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[0]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[3]) * other.group1()),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for AntiPlane {
    type Output = Sphere;
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
            // e1234, e3215
            Simd32x2::from([
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
        );
    }
}
impl Wedge<AntiFlatOrigin> for AntiPlane {
    type Output = Horizon;
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self.group0()[3] * other[e321] * -1.0));
    }
}
impl Wedge<AntiFlatPoint> for AntiPlane {
    type Output = Horizon;
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlector> for AntiPlane {
    type Output = AntiMotor;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[1] * other.group1()[2]),
                (self.group0()[0] * other.group1()[2] * -1.0),
                (self.group0()[0] * other.group1()[1]),
                0.0,
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                (-(self.group0()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for AntiPlane {
    type Output = AntiMotor;
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35, e3215
            (Simd32x4::from(self.group0()[3]) * swizzle!(other.group0(), 1, 2, 3, 0) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<AntiLine> for AntiPlane {
    type Output = AntiFlatPoint;
    fn wedge(self, other: AntiLine) -> Self::Output {
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ Simd32x4::from([
            ((self.group0()[1] * other.group1()[2]) + (self.group0()[3] * other.group0()[0])),
            (self.group0()[0] * other.group1()[2] * -1.0),
            ((self.group0()[0] * other.group1()[1]) + (self.group0()[3] * other.group0()[2])),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiLineOnOrigin> for AntiPlane {
    type Output = AntiFlatPoint;
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiMotor> for AntiPlane {
    type Output = AntiFlector;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) + (self.group0()[3] * other.group0()[0])),
                (self.group0()[0] * other.group1()[2] * -1.0),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e5
            (self.group0() * Simd32x4::from(other.group0()[3])),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for AntiPlane {
    type Output = AntiFlector;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e5
            (self.group0() * Simd32x4::from(other.group0()[3])),
        );
    }
}
impl Wedge<AntiPlane> for AntiPlane {
    type Output = AntiLine;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return AntiLine::from_groups(
            // e23, e31, e12
            (Simd32x3::from([(self.group0()[1] * other.group0()[2]), (self.group0()[0] * other.group0()[2]), (self.group0()[0] * other.group0()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e15, e25, e35
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for AntiPlane {
    type Output = AntiLine;
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return AntiLine::from_groups(
            // e23, e31, e12
            (swizzle!(other.group0(), 2, 2, 1) * Simd32x3::from([self.group0()[1], self.group0()[0], self.group0()[0]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[3]) * other.group0() * Simd32x3::from(-1.0)),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for AntiPlane {
    type Output = Dipole;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (Simd32x3::from([(self.group0()[1] * other.group0()[2]), (self.group0()[0] * other.group0()[2]), (self.group0()[0] * other.group0()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e15, e25, e35, e45
            (Simd32x4::from(self.group0()[3]) * other.group0() * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<Circle> for AntiPlane {
    type Output = Sphere;
    fn wedge(self, other: Circle) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            Simd32x3::from([
                (self.group0()[2] * other.group1()[1]),
                (-(self.group0()[2] * other.group1()[0]) - (self.group0()[3] * other.group0()[1])),
                (self.group0()[1] * other.group1()[0]),
            ]),
            // e1234, e3215
            Simd32x2::from([
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
        );
    }
}
impl Wedge<CircleAligningOrigin> for AntiPlane {
    type Output = Sphere;
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            Simd32x3::from([
                (self.group0()[2] * other.group1()[1]),
                (-(self.group0()[2] * other.group1()[0]) - (self.group0()[3] * other.group0()[1])),
                (self.group0()[1] * other.group1()[0]),
            ]),
            // e1234, e3215
            Simd32x2::from([
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
            ]),
        );
    }
}
impl Wedge<CircleAtInfinity> for AntiPlane {
    type Output = Plane;
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[2] * other.group0()[2]),
            (self.group0()[2] * other.group0()[1] * -1.0),
            (self.group0()[1] * other.group0()[1]),
            (-(self.group0()[3] * other.group0()[0]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<CircleAtOrigin> for AntiPlane {
    type Output = Sphere;
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from(self.group0()[3]) * other.group0() * Simd32x3::from(-1.0)),
            // e1234, e3215
            Simd32x2::from([
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<CircleOnOrigin> for AntiPlane {
    type Output = SphereOnOrigin;
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (self.group0()[2] * other.group1()[1]),
            (-(self.group0()[2] * other.group1()[0]) - (self.group0()[3] * other.group0()[1])),
            (self.group0()[1] * other.group1()[0]),
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<CircleOrthogonalOrigin> for AntiPlane {
    type Output = Sphere;
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
            // e1234, e3215
            Simd32x2::from([
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<Dipole> for AntiPlane {
    type Output = Circle;
    fn wedge(self, other: Dipole) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412, e321
            Simd32x4::from([
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[2] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[0]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435
            (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group0()[1] * other.group2()[2]) + (self.group0()[3] * other.group1()[0])),
                (self.group0()[0] * other.group2()[2] * -1.0),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[3] * other.group1()[2])),
            ]),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for AntiPlane {
    type Output = CircleAligningOrigin;
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([self.group0()[2], self.group0()[2], self.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e415, e425, e435
            (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from([(self.group0()[1] * other.group1()[2]), (self.group0()[0] * other.group1()[2]), (self.group0()[0] * other.group1()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for AntiPlane {
    type Output = CircleAtInfinity;
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return CircleAtInfinity::from_groups(
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                (self.group0()[0] * other.group1()[3] * -1.0),
                (self.group0()[1] * other.group1()[3] * -1.0),
                (self.group0()[2] * other.group1()[3] * -1.0),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group0()[1] * other.group1()[2]) + (self.group0()[3] * other.group0()[0])),
                (self.group0()[0] * other.group1()[2] * -1.0),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[3] * other.group0()[2])),
            ]),
        );
    }
}
impl Wedge<DipoleAtOrigin> for AntiPlane {
    type Output = CircleAligningOrigin;
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([self.group0()[2], self.group0()[2], self.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e415, e425, e435
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e235, e315, e125
            (swizzle!(other.group1(), 2, 2, 1) * Simd32x3::from([self.group0()[1], self.group0()[0], self.group0()[0]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<DipoleOnOrigin> for AntiPlane {
    type Output = CircleOnOrigin;
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from([(self.group0()[2] * other.group0()[1]), (self.group0()[2] * other.group0()[0]), (self.group0()[1] * other.group0()[0])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e415, e425, e435
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for AntiPlane {
    type Output = Circle;
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412, e321
            Simd32x4::from([
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[2] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[0]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group0()[1] * other.group2()[2]) + (self.group0()[3] * other.group1()[0])),
                (self.group0()[0] * other.group2()[2] * -1.0),
                ((self.group0()[0] * other.group2()[1]) + (self.group0()[3] * other.group1()[2])),
            ]),
        );
    }
}
impl Wedge<DualNum> for AntiPlane {
    type Output = AntiPlane;
    fn wedge(self, other: DualNum) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ (self.group0() * Simd32x4::from(other.group0()[0])));
    }
}
impl Wedge<FlatOrigin> for AntiPlane {
    type Output = LineOnOrigin;
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(
            // e415, e425, e435
            (Simd32x3::from(other[e45]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
        );
    }
}
impl Wedge<FlatPoint> for AntiPlane {
    type Output = Line;
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from([(self.group0()[1] * other.group0()[2]), (self.group0()[0] * other.group0()[2]), (self.group0()[0] * other.group0()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for AntiPlane {
    type Output = LineAtInfinity;
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return LineAtInfinity::from_groups(
            // e235, e315, e125
            (swizzle!(other.group0(), 2, 2, 1) * Simd32x3::from([self.group0()[1], self.group0()[0], self.group0()[0]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<Flector> for AntiPlane {
    type Output = Motor;
    fn wedge(self, other: Flector) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                ((self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[0] * other.group0()[2] * -1.0),
                (self.group0()[0] * other.group0()[1]),
                0.0,
            ]),
        );
    }
}
impl Wedge<FlectorAtInfinity> for AntiPlane {
    type Output = LineAtInfinity;
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return LineAtInfinity::from_groups(
            // e235, e315, e125
            (Simd32x3::from([(self.group0()[1] * other.group0()[2]), (self.group0()[0] * other.group0()[2]), (self.group0()[0] * other.group0()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<FlectorOnOrigin> for AntiPlane {
    type Output = MotorOnOrigin;
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[0] * -1.0),
            (self.group0()[1] * other.group0()[0] * -1.0),
            (self.group0()[2] * other.group0()[0] * -1.0),
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
        ]));
    }
}
impl Wedge<Infinity> for AntiPlane {
    type Output = FlatPointAtInfinity;
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return FlatPointAtInfinity::from_groups(
            // e15, e25, e35
            (Simd32x3::from(other[e5]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
        );
    }
}
impl Wedge<Line> for AntiPlane {
    type Output = Plane;
    fn wedge(self, other: Line) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[2] * other.group0()[1]),
            (self.group0()[2] * other.group0()[0] * -1.0),
            (self.group0()[1] * other.group0()[0]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<LineAtInfinity> for AntiPlane {
    type Output = Horizon;
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<LineOnOrigin> for AntiPlane {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: LineOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([self.group0()[2], self.group0()[2], self.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<Motor> for AntiPlane {
    type Output = Flector;
    fn wedge(self, other: Motor) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[2] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[0]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<MotorAtInfinity> for AntiPlane {
    type Output = FlectorAtInfinity;
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<MotorOnOrigin> for AntiPlane {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: MotorOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from([(self.group0()[2] * other.group0()[1]), (self.group0()[2] * other.group0()[0]), (self.group0()[1] * other.group0()[0])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<MultiVector> for AntiPlane {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group0()[3] * other.group9()[3]) + (self.group0()[2] * other.group9()[2]) + (self.group0()[0] * other.group9()[0]) + (self.group0()[1] * other.group9()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                0.0,
            ]),
            // e5
            (self.group0()[3] * other.group0()[0]),
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from(other.group1()[3]) * Simd32x4::from(-1.0)),
            // e15, e25, e35
            (Simd32x3::from(other[e1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e23, e31, e12
            (Simd32x3::from([(self.group0()[1] * other.group1()[2]), (self.group0()[0] * other.group1()[2]), (self.group0()[0] * other.group1()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group0()[2] * other.group5()[2]) - (self.group0()[0] * other.group5()[0]) - (self.group0()[1] * other.group5()[1])),
                (self.group0()[0] * other.group3()[3] * -1.0),
                (self.group0()[1] * other.group3()[3] * -1.0),
                (self.group0()[2] * other.group3()[3] * -1.0),
            ]),
            // e423, e431, e412
            (Simd32x3::from([(self.group0()[2] * other.group3()[1]), (self.group0()[2] * other.group3()[0]), (self.group0()[1] * other.group3()[0])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group0()[1] * other.group4()[2]) + (self.group0()[3] * other.group5()[0])),
                (self.group0()[0] * other.group4()[2] * -1.0),
                ((self.group0()[0] * other.group4()[1]) + (self.group0()[3] * other.group5()[2])),
            ]),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group0()[2] * other.group6()[2]),
                (-(self.group0()[2] * other.group6()[1]) - (self.group0()[3] * other.group7()[1])),
                (self.group0()[1] * other.group6()[1]),
                ((self.group0()[2] * other.group7()[2]) + (self.group0()[0] * other.group7()[0]) + (self.group0()[1] * other.group7()[1])),
            ]),
            // e3215
            (-(self.group0()[3] * other.group6()[0]) - (self.group0()[2] * other.group8()[2]) - (self.group0()[0] * other.group8()[0]) - (self.group0()[1] * other.group8()[1])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for AntiPlane {
    type Output = SphereOnOrigin;
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0] * -1.0),
            (self.group0()[3] * other.group0()[1] * -1.0),
            (self.group0()[3] * other.group0()[2] * -1.0),
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<NullDipoleAtOrigin> for AntiPlane {
    type Output = CircleOnOrigin;
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            (swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([self.group0()[2], self.group0()[2], self.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e415, e425, e435
            (Simd32x3::from(self.group0()[3]) * other.group0()),
        );
    }
}
impl Wedge<NullSphereAtOrigin> for AntiPlane {
    type Output = AntiScalar;
    fn wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other[e1234]));
    }
}
impl Wedge<Origin> for AntiPlane {
    type Output = DipoleOnOrigin;
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return DipoleOnOrigin::from_groups(/* e41, e42, e43, e45 */ (self.group0() * Simd32x4::from(other[e4]) * Simd32x4::from(-1.0)));
    }
}
impl Wedge<Plane> for AntiPlane {
    type Output = AntiScalar;
    fn wedge(self, other: Plane) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<PlaneOnOrigin> for AntiPlane {
    type Output = AntiScalar;
    fn wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<RoundPoint> for AntiPlane {
    type Output = Dipole;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other.group1()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (swizzle!(other.group0(), 2, 2, 1) * Simd32x3::from([self.group0()[1], self.group0()[0], self.group0()[0]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e15, e25, e35, e45
            (self.group0() * Simd32x4::from([other.group1()[1], other.group1()[1], other.group1()[1], other.group1()[0]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for AntiPlane {
    type Output = DipoleAligningOrigin;
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return DipoleAligningOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
            // e15, e25, e35, e45
            (self.group0() * Simd32x4::from([other.group0()[1], other.group0()[1], other.group0()[1], other.group0()[0]]) * Simd32x4::from([1.0, 1.0, 1.0, -1.0])),
        );
    }
}
impl Wedge<Scalar> for AntiPlane {
    type Output = AntiPlane;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ (self.group0() * Simd32x4::from(other[scalar])));
    }
}
impl Wedge<Sphere> for AntiPlane {
    type Output = AntiScalar;
    fn wedge(self, other: Sphere) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<SphereAtOrigin> for AntiPlane {
    type Output = AntiScalar;
    fn wedge(self, other: SphereAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[0]));
    }
}
impl Wedge<SphereOnOrigin> for AntiPlane {
    type Output = AntiScalar;
    fn wedge(self, other: SphereOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[3] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl InfixWedge for AntiPlaneOnOrigin {}
impl Wedge<AntiCircleOnOrigin> for AntiPlaneOnOrigin {
    type Output = AntiDipoleOnOrigin;
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return AntiDipoleOnOrigin::from_groups(/* e423, e431, e412, e321 */ Simd32x4::from([
            (self.group0()[2] * other.group0()[1]),
            (self.group0()[2] * other.group0()[0] * -1.0),
            (self.group0()[1] * other.group0()[0]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<AntiDipoleOnOrigin> for AntiPlaneOnOrigin {
    type Output = NullSphereAtOrigin;
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(
            // e1234
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlatPoint> for AntiPlaneOnOrigin {
    type Output = Horizon;
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlector> for AntiPlaneOnOrigin {
    type Output = AntiMotor;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            Simd32x4::from([
                (self.group0()[1] * other.group1()[2]),
                (self.group0()[0] * other.group1()[2] * -1.0),
                (self.group0()[0] * other.group1()[1]),
                0.0,
            ]),
            // e15, e25, e35, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for AntiPlaneOnOrigin {
    type Output = AntiLineOnOrigin;
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return AntiLineOnOrigin::from_groups(
            // e23, e31, e12
            (swizzle!(self.group0(), 1, 0, 0) * Simd32x3::from([other.group0()[3], other.group0()[3], other.group0()[2]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<AntiLine> for AntiPlaneOnOrigin {
    type Output = AntiFlatPoint;
    fn wedge(self, other: AntiLine) -> Self::Output {
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ Simd32x4::from([
            (self.group0()[1] * other.group1()[2]),
            (self.group0()[0] * other.group1()[2] * -1.0),
            (self.group0()[0] * other.group1()[1]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiLineOnOrigin> for AntiPlaneOnOrigin {
    type Output = AntiFlatOrigin;
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return AntiFlatOrigin::from_groups(
            // e321
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiMotor> for AntiPlaneOnOrigin {
    type Output = AntiFlector;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            Simd32x4::from([
                (self.group0()[1] * other.group1()[2]),
                (self.group0()[0] * other.group1()[2] * -1.0),
                (self.group0()[0] * other.group1()[1]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e5
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for AntiPlaneOnOrigin {
    type Output = AntiFlectorOnOrigin;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return AntiFlectorOnOrigin::from_groups(/* e321, e1, e2, e3 */ Simd32x4::from([
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
        ]));
    }
}
impl Wedge<AntiPlane> for AntiPlaneOnOrigin {
    type Output = AntiLine;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return AntiLine::from_groups(
            // e23, e31, e12
            (swizzle!(self.group0(), 1, 0, 0) * Simd32x3::from([other.group0()[2], other.group0()[2], other.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e15, e25, e35
            (self.group0() * Simd32x3::from(other.group0()[3])),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for AntiPlaneOnOrigin {
    type Output = AntiLineOnOrigin;
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return AntiLineOnOrigin::from_groups(
            // e23, e31, e12
            (swizzle!(self.group0(), 1, 0, 0) * swizzle!(other.group0(), 2, 2, 1) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for AntiPlaneOnOrigin {
    type Output = AntiCircleOnOrigin;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return AntiCircleOnOrigin::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other.group0()[3]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (swizzle!(self.group0(), 1, 0, 0) * Simd32x3::from([other.group0()[2], other.group0()[2], other.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<Circle> for AntiPlaneOnOrigin {
    type Output = Sphere;
    fn wedge(self, other: Circle) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (swizzle!(self.group0(), 2, 2, 1) * swizzle!(other.group1(), 1, 0, 0) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e1234, e3215
            Simd32x2::from([
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
            ]),
        );
    }
}
impl Wedge<CircleAligningOrigin> for AntiPlaneOnOrigin {
    type Output = Sphere;
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (swizzle!(self.group0(), 2, 2, 1) * swizzle!(other.group1(), 1, 0, 0) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e1234, e3215
            Simd32x2::from([
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
            ]),
        );
    }
}
impl Wedge<CircleAtInfinity> for AntiPlaneOnOrigin {
    type Output = Plane;
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[2] * other.group0()[2]),
            (self.group0()[2] * other.group0()[1] * -1.0),
            (self.group0()[1] * other.group0()[1]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<CircleAtOrigin> for AntiPlaneOnOrigin {
    type Output = SphereAtOrigin;
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return SphereAtOrigin::from_groups(/* e1234, e3215 */ Simd32x2::from([
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<CircleOnOrigin> for AntiPlaneOnOrigin {
    type Output = SphereOnOrigin;
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (self.group0()[2] * other.group1()[1]),
            (self.group0()[2] * other.group1()[0] * -1.0),
            (self.group0()[1] * other.group1()[0]),
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<CircleOrthogonalOrigin> for AntiPlaneOnOrigin {
    type Output = SphereAtOrigin;
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return SphereAtOrigin::from_groups(/* e1234, e3215 */ Simd32x2::from([
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<Dipole> for AntiPlaneOnOrigin {
    type Output = Circle;
    fn wedge(self, other: Dipole) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412, e321
            Simd32x4::from([
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[2] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[0]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435
            (self.group0() * Simd32x3::from(other.group2()[3]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (swizzle!(self.group0(), 1, 0, 0) * Simd32x3::from([other.group2()[2], other.group2()[2], other.group2()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for AntiPlaneOnOrigin {
    type Output = CircleAligningOrigin;
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (swizzle!(self.group0(), 2, 2, 1) * swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e415, e425, e435
            (self.group0() * Simd32x3::from(other.group1()[3]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (swizzle!(self.group0(), 1, 0, 0) * Simd32x3::from([other.group1()[2], other.group1()[2], other.group1()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for AntiPlaneOnOrigin {
    type Output = CircleAtInfinity;
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return CircleAtInfinity::from_groups(
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                (self.group0()[0] * other.group1()[3] * -1.0),
                (self.group0()[1] * other.group1()[3] * -1.0),
                (self.group0()[2] * other.group1()[3] * -1.0),
            ]),
            // e235, e315, e125
            (swizzle!(self.group0(), 1, 0, 0) * Simd32x3::from([other.group1()[2], other.group1()[2], other.group1()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<DipoleAtOrigin> for AntiPlaneOnOrigin {
    type Output = CircleAtOrigin;
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return CircleAtOrigin::from_groups(
            // e423, e431, e412
            (swizzle!(self.group0(), 2, 2, 1) * swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e235, e315, e125
            (swizzle!(self.group0(), 1, 0, 0) * swizzle!(other.group1(), 2, 2, 1) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<DipoleOnOrigin> for AntiPlaneOnOrigin {
    type Output = CircleOnOrigin;
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            (swizzle!(self.group0(), 2, 2, 1) * Simd32x3::from([other.group0()[1], other.group0()[0], other.group0()[0]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e415, e425, e435
            (self.group0() * Simd32x3::from(other.group0()[3]) * Simd32x3::from(-1.0)),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for AntiPlaneOnOrigin {
    type Output = CircleOrthogonalOrigin;
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return CircleOrthogonalOrigin::from_groups(
            // e423, e431, e412, e321
            Simd32x4::from([
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[2] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[0]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125
            (swizzle!(self.group0(), 1, 0, 0) * swizzle!(other.group2(), 2, 2, 1) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<DualNum> for AntiPlaneOnOrigin {
    type Output = AntiPlaneOnOrigin;
    fn wedge(self, other: DualNum) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (self.group0() * Simd32x3::from(other.group0()[0])));
    }
}
impl Wedge<FlatOrigin> for AntiPlaneOnOrigin {
    type Output = LineOnOrigin;
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (self.group0() * Simd32x3::from(other[e45]) * Simd32x3::from(-1.0)));
    }
}
impl Wedge<FlatPoint> for AntiPlaneOnOrigin {
    type Output = Line;
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return Line::from_groups(
            // e415, e425, e435
            (self.group0() * Simd32x3::from(other.group0()[3]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (swizzle!(self.group0(), 1, 0, 0) * Simd32x3::from([other.group0()[2], other.group0()[2], other.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for AntiPlaneOnOrigin {
    type Output = LineAtInfinity;
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return LineAtInfinity::from_groups(
            // e235, e315, e125
            (swizzle!(self.group0(), 1, 0, 0) * swizzle!(other.group0(), 2, 2, 1) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<Flector> for AntiPlaneOnOrigin {
    type Output = Motor;
    fn wedge(self, other: Flector) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                ((self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[0] * other.group0()[2] * -1.0),
                (self.group0()[0] * other.group0()[1]),
                0.0,
            ]),
        );
    }
}
impl Wedge<FlectorAtInfinity> for AntiPlaneOnOrigin {
    type Output = LineAtInfinity;
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return LineAtInfinity::from_groups(
            // e235, e315, e125
            (swizzle!(self.group0(), 1, 0, 0) * Simd32x3::from([other.group0()[2], other.group0()[2], other.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<FlectorOnOrigin> for AntiPlaneOnOrigin {
    type Output = MotorOnOrigin;
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[0] * -1.0),
            (self.group0()[1] * other.group0()[0] * -1.0),
            (self.group0()[2] * other.group0()[0] * -1.0),
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
        ]));
    }
}
impl Wedge<Infinity> for AntiPlaneOnOrigin {
    type Output = FlatPointAtInfinity;
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return FlatPointAtInfinity::from_groups(/* e15, e25, e35 */ (self.group0() * Simd32x3::from(other[e5])));
    }
}
impl Wedge<Line> for AntiPlaneOnOrigin {
    type Output = Plane;
    fn wedge(self, other: Line) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[2] * other.group0()[1]),
            (self.group0()[2] * other.group0()[0] * -1.0),
            (self.group0()[1] * other.group0()[0]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<LineAtInfinity> for AntiPlaneOnOrigin {
    type Output = Horizon;
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<LineOnOrigin> for AntiPlaneOnOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: LineOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (swizzle!(self.group0(), 2, 2, 1) * swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<Motor> for AntiPlaneOnOrigin {
    type Output = Flector;
    fn wedge(self, other: Motor) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[2] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[0]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<MotorAtInfinity> for AntiPlaneOnOrigin {
    type Output = FlectorAtInfinity;
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<MotorOnOrigin> for AntiPlaneOnOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: MotorOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (swizzle!(self.group0(), 2, 2, 1) * Simd32x3::from([other.group0()[1], other.group0()[0], other.group0()[0]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<MultiVector> for AntiPlaneOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group0()[2] * other.group9()[2]) + (self.group0()[0] * other.group9()[0]) + (self.group0()[1] * other.group9()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                0.0,
            ]),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3] * -1.0),
                (self.group0()[1] * other.group1()[3] * -1.0),
                (self.group0()[2] * other.group1()[3] * -1.0),
                0.0,
            ]),
            // e15, e25, e35
            (self.group0() * Simd32x3::from(other[e1])),
            // e23, e31, e12
            (swizzle!(self.group0(), 1, 0, 0) * Simd32x3::from([other.group1()[2], other.group1()[2], other.group1()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group0()[2] * other.group5()[2]) - (self.group0()[0] * other.group5()[0]) - (self.group0()[1] * other.group5()[1])),
                (self.group0()[0] * other.group3()[3] * -1.0),
                (self.group0()[1] * other.group3()[3] * -1.0),
                (self.group0()[2] * other.group3()[3] * -1.0),
            ]),
            // e423, e431, e412
            (swizzle!(self.group0(), 2, 2, 1) * Simd32x3::from([other.group3()[1], other.group3()[0], other.group3()[0]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e235, e315, e125
            (swizzle!(self.group0(), 1, 0, 0) * swizzle!(other.group4(), 2, 2, 1) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group0()[2] * other.group6()[2]),
                (self.group0()[2] * other.group6()[1] * -1.0),
                (self.group0()[1] * other.group6()[1]),
                ((self.group0()[2] * other.group7()[2]) + (self.group0()[0] * other.group7()[0]) + (self.group0()[1] * other.group7()[1])),
            ]),
            // e3215
            (-(self.group0()[2] * other.group8()[2]) - (self.group0()[0] * other.group8()[0]) - (self.group0()[1] * other.group8()[1])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for AntiPlaneOnOrigin {
    type Output = NullSphereAtOrigin;
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(
            // e1234
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for AntiPlaneOnOrigin {
    type Output = NullCircleAtOrigin;
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return NullCircleAtOrigin::from_groups(
            // e423, e431, e412
            (swizzle!(self.group0(), 2, 2, 1) * swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<Origin> for AntiPlaneOnOrigin {
    type Output = NullDipoleAtOrigin;
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return NullDipoleAtOrigin::from_groups(/* e41, e42, e43 */ (self.group0() * Simd32x3::from(other[e4]) * Simd32x3::from(-1.0)));
    }
}
impl Wedge<Plane> for AntiPlaneOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: Plane) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<PlaneOnOrigin> for AntiPlaneOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<RoundPoint> for AntiPlaneOnOrigin {
    type Output = DipoleOrthogonalOrigin;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return DipoleOrthogonalOrigin::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other.group1()[0]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (swizzle!(self.group0(), 1, 0, 0) * swizzle!(other.group0(), 2, 2, 1) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e15, e25, e35
            (self.group0() * Simd32x3::from(other.group1()[1])),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for AntiPlaneOnOrigin {
    type Output = DipoleAtOrigin;
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return DipoleAtOrigin::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other.group0()[0]) * Simd32x3::from(-1.0)),
            // e15, e25, e35
            (self.group0() * Simd32x3::from(other.group0()[1])),
        );
    }
}
impl Wedge<Scalar> for AntiPlaneOnOrigin {
    type Output = AntiPlaneOnOrigin;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (self.group0() * Simd32x3::from(other[scalar])));
    }
}
impl Wedge<Sphere> for AntiPlaneOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: Sphere) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<SphereOnOrigin> for AntiPlaneOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: SphereOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl InfixWedge for AntiScalar {}
impl Wedge<AntiMotor> for AntiScalar {
    type Output = AntiScalar;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e12345] * other.group0()[3]));
    }
}
impl Wedge<AntiMotorOnOrigin> for AntiScalar {
    type Output = AntiScalar;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e12345] * other.group0()[3]));
    }
}
impl Wedge<DualNum> for AntiScalar {
    type Output = AntiScalar;
    fn wedge(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e12345] * other.group0()[0]));
    }
}
impl Wedge<MultiVector> for AntiScalar {
    type Output = AntiScalar;
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e12345] * other.group0()[0]));
    }
}
impl Wedge<Scalar> for AntiScalar {
    type Output = AntiScalar;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e12345] * other[scalar]));
    }
}
impl InfixWedge for AntiSphereOnOrigin {}
impl Wedge<AntiCircleOnOrigin> for AntiSphereOnOrigin {
    type Output = AntiDipoleOnOrigin;
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return AntiDipoleOnOrigin::from_groups(/* e423, e431, e412, e321 */ Simd32x4::from([
            ((self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group1()[0])),
            (self.group0()[2] * other.group0()[0] * -1.0),
            ((self.group0()[1] * other.group0()[0]) + (self.group0()[3] * other.group1()[2])),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<AntiDipoleOnOrigin> for AntiSphereOnOrigin {
    type Output = NullSphereAtOrigin;
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(
            // e1234
            ((self.group0()[3] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlatOrigin> for AntiSphereOnOrigin {
    type Output = NullSphereAtOrigin;
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self.group0()[3] * other[e321]));
    }
}
impl Wedge<AntiFlatPoint> for AntiSphereOnOrigin {
    type Output = Sphere;
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e1234, e3215
            Simd32x2::from([
                (self.group0()[3] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiFlector> for AntiSphereOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[3]) * other.group1()),
            // e15, e25, e35
            (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e23, e31, e12
            (Simd32x3::from([(self.group0()[1] * other.group1()[2]), (self.group0()[0] * other.group1()[2]), (self.group0()[0] * other.group1()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e3215
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for AntiSphereOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (self.group0()[3] * other.group0()[3]),
                0.0,
            ]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            (Simd32x3::from([(self.group0()[1] * other.group0()[3]), (self.group0()[0] * other.group0()[3]), (self.group0()[0] * other.group0()[2])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[0])]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<AntiLine> for AntiSphereOnOrigin {
    type Output = Circle;
    fn wedge(self, other: AntiLine) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412, e321
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435
            (Simd32x3::from(self.group0()[3]) * other.group1()),
            // e235, e315, e125
            (swizzle!(other.group1(), 2, 2, 1) * Simd32x3::from([self.group0()[1], self.group0()[0], self.group0()[0]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for AntiSphereOnOrigin {
    type Output = AntiDipoleOnOrigin;
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return AntiDipoleOnOrigin::from_groups(/* e423, e431, e412, e321 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiMotor> for AntiSphereOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, (self.group0()[3] * other.group1()[3])]),
            // e1, e2, e3, e4
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
            ]),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e235, e315, e125
            (Simd32x3::from([(self.group0()[1] * other.group1()[2]), (self.group0()[0] * other.group1()[2]), (self.group0()[0] * other.group1()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for AntiSphereOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                0.0,
                0.0,
                0.0,
            ]),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<AntiPlane> for AntiSphereOnOrigin {
    type Output = Dipole;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e23, e31, e12
            (Simd32x3::from([(self.group0()[1] * other.group0()[2]), (self.group0()[0] * other.group0()[2]), (self.group0()[0] * other.group0()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e15, e25, e35, e45
            (self.group0() * Simd32x4::from(other.group0()[3])),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for AntiSphereOnOrigin {
    type Output = AntiCircleOnOrigin;
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return AntiCircleOnOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e23, e31, e12
            (swizzle!(other.group0(), 2, 2, 1) * Simd32x3::from([self.group0()[1], self.group0()[0], self.group0()[0]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for AntiSphereOnOrigin {
    type Output = AntiCircleOnOrigin;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return AntiCircleOnOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (Simd32x3::from([(self.group0()[1] * other.group0()[2]), (self.group0()[0] * other.group0()[2]), (self.group0()[0] * other.group0()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<Circle> for AntiSphereOnOrigin {
    type Output = Sphere;
    fn wedge(self, other: Circle) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            Simd32x3::from([
                ((self.group0()[2] * other.group1()[1]) + (self.group0()[3] * other.group2()[0])),
                (self.group0()[2] * other.group1()[0] * -1.0),
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[3] * other.group2()[2])),
            ]),
            // e1234, e3215
            Simd32x2::from([
                ((self.group0()[3] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
            ]),
        );
    }
}
impl Wedge<CircleAligningOrigin> for AntiSphereOnOrigin {
    type Output = Sphere;
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            Simd32x3::from([
                ((self.group0()[2] * other.group1()[1]) + (self.group0()[3] * other.group2()[0])),
                (self.group0()[2] * other.group1()[0] * -1.0),
                ((self.group0()[1] * other.group1()[0]) + (self.group0()[3] * other.group2()[2])),
            ]),
            // e1234, e3215
            Simd32x2::from([
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
            ]),
        );
    }
}
impl Wedge<CircleAtInfinity> for AntiSphereOnOrigin {
    type Output = Sphere;
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            Simd32x3::from([
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[3] * other.group1()[0])),
                (self.group0()[2] * other.group0()[1] * -1.0),
                ((self.group0()[1] * other.group0()[1]) + (self.group0()[3] * other.group1()[2])),
            ]),
            // e1234, e3215
            Simd32x2::from([
                (self.group0()[3] * other.group0()[0]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<CircleAtOrigin> for AntiSphereOnOrigin {
    type Output = Sphere;
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from(self.group0()[3]) * other.group1()),
            // e1234, e3215
            Simd32x2::from([
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<CircleOnOrigin> for AntiSphereOnOrigin {
    type Output = SphereOnOrigin;
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (self.group0()[2] * other.group1()[1]),
            (self.group0()[2] * other.group1()[0] * -1.0),
            (self.group0()[1] * other.group1()[0]),
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<CircleOrthogonalOrigin> for AntiSphereOnOrigin {
    type Output = Sphere;
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from(self.group0()[3]) * other.group1()),
            // e1234, e3215
            Simd32x2::from([
                ((self.group0()[3] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<Dipole> for AntiSphereOnOrigin {
    type Output = Circle;
    fn wedge(self, other: Dipole) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412, e321
            Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group1()[0])),
                (self.group0()[2] * other.group0()[0] * -1.0),
                ((self.group0()[1] * other.group0()[0]) + (self.group0()[3] * other.group1()[2])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435
            (Simd32x3::from(other.group2()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from([(self.group0()[1] * other.group2()[2]), (self.group0()[0] * other.group2()[2]), (self.group0()[0] * other.group2()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for AntiSphereOnOrigin {
    type Output = CircleAligningOrigin;
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([self.group0()[2], self.group0()[2], self.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e415, e425, e435
            (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from([(self.group0()[1] * other.group1()[2]), (self.group0()[0] * other.group1()[2]), (self.group0()[0] * other.group1()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for AntiSphereOnOrigin {
    type Output = Circle;
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412, e321
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435
            (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from([(self.group0()[1] * other.group1()[2]), (self.group0()[0] * other.group1()[2]), (self.group0()[0] * other.group1()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<DipoleAtOrigin> for AntiSphereOnOrigin {
    type Output = CircleAligningOrigin;
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([self.group0()[2], self.group0()[2], self.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e415, e425, e435
            (Simd32x3::from(self.group0()[3]) * other.group1()),
            // e235, e315, e125
            (swizzle!(other.group1(), 2, 2, 1) * Simd32x3::from([self.group0()[1], self.group0()[0], self.group0()[0]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<DipoleOnOrigin> for AntiSphereOnOrigin {
    type Output = CircleOnOrigin;
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from([(self.group0()[2] * other.group0()[1]), (self.group0()[2] * other.group0()[0]), (self.group0()[1] * other.group0()[0])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e415, e425, e435
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for AntiSphereOnOrigin {
    type Output = Circle;
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412, e321
            Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group1()[0])),
                (self.group0()[2] * other.group0()[0] * -1.0),
                ((self.group0()[1] * other.group0()[0]) + (self.group0()[3] * other.group1()[2])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435
            (Simd32x3::from(self.group0()[3]) * other.group2()),
            // e235, e315, e125
            (swizzle!(other.group2(), 2, 2, 1) * Simd32x3::from([self.group0()[1], self.group0()[0], self.group0()[0]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<DualNum> for AntiSphereOnOrigin {
    type Output = AntiSphereOnOrigin;
    fn wedge(self, other: DualNum) -> Self::Output {
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ (self.group0() * Simd32x4::from(other.group0()[0])));
    }
}
impl Wedge<FlatOrigin> for AntiSphereOnOrigin {
    type Output = LineOnOrigin;
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(
            // e415, e425, e435
            (Simd32x3::from(other[e45]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
        );
    }
}
impl Wedge<FlatPoint> for AntiSphereOnOrigin {
    type Output = Line;
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from([(self.group0()[1] * other.group0()[2]), (self.group0()[0] * other.group0()[2]), (self.group0()[0] * other.group0()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for AntiSphereOnOrigin {
    type Output = Line;
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self.group0()[3]) * other.group0()),
            // e235, e315, e125
            (swizzle!(other.group0(), 2, 2, 1) * Simd32x3::from([self.group0()[1], self.group0()[0], self.group0()[0]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<Flector> for AntiSphereOnOrigin {
    type Output = Motor;
    fn wedge(self, other: Flector) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                ((self.group0()[3] * other.group1()[3]) + (self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[0] * other.group0()[2] * -1.0),
                (self.group0()[0] * other.group0()[1]),
                0.0,
            ]),
        );
    }
}
impl Wedge<FlectorAtInfinity> for AntiSphereOnOrigin {
    type Output = Motor;
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self.group0()[3]) * other.group0()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[0] * other.group0()[2] * -1.0),
                (self.group0()[0] * other.group0()[1]),
                0.0,
            ]),
        );
    }
}
impl Wedge<FlectorOnOrigin> for AntiSphereOnOrigin {
    type Output = MotorOnOrigin;
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[0] * -1.0),
            (self.group0()[1] * other.group0()[0] * -1.0),
            (self.group0()[2] * other.group0()[0] * -1.0),
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
        ]));
    }
}
impl Wedge<Horizon> for AntiSphereOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other[e3215]));
    }
}
impl Wedge<Infinity> for AntiSphereOnOrigin {
    type Output = FlatPoint;
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ (self.group0() * Simd32x4::from(other[e5])));
    }
}
impl Wedge<Line> for AntiSphereOnOrigin {
    type Output = Plane;
    fn wedge(self, other: Line) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            ((self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group1()[0])),
            (self.group0()[2] * other.group0()[0] * -1.0),
            ((self.group0()[1] * other.group0()[0]) + (self.group0()[3] * other.group1()[2])),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<LineAtInfinity> for AntiSphereOnOrigin {
    type Output = Plane;
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<LineOnOrigin> for AntiSphereOnOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: LineOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([self.group0()[2], self.group0()[2], self.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<Motor> for AntiSphereOnOrigin {
    type Output = Flector;
    fn wedge(self, other: Motor) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (self.group0() * Simd32x4::from(other.group1()[3])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group1()[0])),
                (self.group0()[2] * other.group0()[0] * -1.0),
                ((self.group0()[1] * other.group0()[0]) + (self.group0()[3] * other.group1()[2])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<MotorAtInfinity> for AntiSphereOnOrigin {
    type Output = Flector;
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<MotorOnOrigin> for AntiSphereOnOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: MotorOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from([(self.group0()[2] * other.group0()[1]), (self.group0()[2] * other.group0()[0]), (self.group0()[1] * other.group0()[0])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<MultiVector> for AntiSphereOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group0()[3] * other[e45]) + (self.group0()[2] * other.group9()[2]) + (self.group0()[0] * other.group9()[0]) + (self.group0()[1] * other.group9()[1])),
            ]),
            // e1, e2, e3, e4
            (self.group0() * Simd32x4::from(other.group0()[0])),
            // e5
            0.0,
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from([other.group1()[3], other.group1()[3], other.group1()[3], other[e1]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35
            (Simd32x3::from(other[e1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e23, e31, e12
            (Simd32x3::from([(self.group0()[1] * other.group1()[2]), (self.group0()[0] * other.group1()[2]), (self.group0()[0] * other.group1()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group0()[2] * other.group5()[2]) - (self.group0()[0] * other.group5()[0]) - (self.group0()[1] * other.group5()[1])),
                (self.group0()[0] * other.group3()[3] * -1.0),
                (self.group0()[1] * other.group3()[3] * -1.0),
                (self.group0()[2] * other.group3()[3] * -1.0),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                ((self.group0()[2] * other.group3()[1]) + (self.group0()[3] * other.group5()[0])),
                (self.group0()[2] * other.group3()[0] * -1.0),
                ((self.group0()[1] * other.group3()[0]) + (self.group0()[3] * other.group5()[2])),
            ]),
            // e235, e315, e125
            (swizzle!(other.group4(), 2, 2, 1) * Simd32x3::from([self.group0()[1], self.group0()[0], self.group0()[0]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                ((self.group0()[2] * other.group6()[2]) + (self.group0()[3] * other.group8()[0])),
                (self.group0()[2] * other.group6()[1] * -1.0),
                ((self.group0()[1] * other.group6()[1]) + (self.group0()[3] * other.group8()[2])),
                ((self.group0()[3] * other.group6()[0]) + (self.group0()[2] * other.group7()[2]) + (self.group0()[0] * other.group7()[0]) + (self.group0()[1] * other.group7()[1])),
            ]),
            // e3215
            (-(self.group0()[2] * other.group8()[2]) - (self.group0()[0] * other.group8()[0]) - (self.group0()[1] * other.group8()[1])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for AntiSphereOnOrigin {
    type Output = NullSphereAtOrigin;
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(
            // e1234
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for AntiSphereOnOrigin {
    type Output = NullCircleAtOrigin;
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return NullCircleAtOrigin::from_groups(
            // e423, e431, e412
            (swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([self.group0()[2], self.group0()[2], self.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<Origin> for AntiSphereOnOrigin {
    type Output = NullDipoleAtOrigin;
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return NullDipoleAtOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other[e4]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
        );
    }
}
impl Wedge<Plane> for AntiSphereOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: Plane) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[3] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<PlaneOnOrigin> for AntiSphereOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<RoundPoint> for AntiSphereOnOrigin {
    type Output = Dipole;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other.group1()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (swizzle!(other.group0(), 2, 2, 1) * Simd32x3::from([self.group0()[1], self.group0()[0], self.group0()[0]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e15, e25, e35, e45
            (self.group0() * Simd32x4::from(other.group1()[1])),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for AntiSphereOnOrigin {
    type Output = DipoleAligningOrigin;
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return DipoleAligningOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]]) * Simd32x3::from(-1.0)),
            // e15, e25, e35, e45
            (self.group0() * Simd32x4::from(other.group0()[1])),
        );
    }
}
impl Wedge<Scalar> for AntiSphereOnOrigin {
    type Output = AntiSphereOnOrigin;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ (self.group0() * Simd32x4::from(other[scalar])));
    }
}
impl Wedge<Sphere> for AntiSphereOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: Sphere) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[3] * other.group1()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<SphereAtOrigin> for AntiSphereOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: SphereAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[1]));
    }
}
impl Wedge<SphereOnOrigin> for AntiSphereOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: SphereOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl InfixWedge for Circle {}
impl Wedge<AntiCircleOnOrigin> for Circle {
    type Output = AntiScalar;
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group1()[2] * other.group1()[2])
                - (self.group1()[0] * other.group1()[0])
                - (self.group1()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiFlector> for Circle {
    type Output = Sphere;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            Simd32x3::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group1()[2] * other.group1()[1])),
                (self.group1()[2] * other.group1()[0] * -1.0),
                ((self.group0()[2] * other.group1()[3]) + (self.group1()[1] * other.group1()[0])),
            ]),
            // e1234, e3215
            Simd32x2::from([
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ((self.group2()[2] * other.group1()[2]) + (self.group2()[1] * other.group1()[1]) + (self.group0()[3] * other.group1()[3]) + (self.group2()[0] * other.group1()[0])),
            ]),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for Circle {
    type Output = Sphere;
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (swizzle!(self.group1(), 2, 2, 1) * Simd32x3::from([other.group0()[2], other.group0()[1], other.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e1234, e3215
            Simd32x2::from([
                (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
                ((self.group2()[2] * other.group0()[3]) + (self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[2])),
            ]),
        );
    }
}
impl Wedge<AntiLine> for Circle {
    type Output = AntiScalar;
    fn wedge(self, other: AntiLine) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for Circle {
    type Output = AntiScalar;
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiMotor> for Circle {
    type Output = MultiVector;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[3], self.group1()[0], self.group1()[1], self.group1()[2]])),
            // e423, e431, e412
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e235, e315, e125
            (self.group2() * Simd32x3::from(other.group0()[3])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for Circle {
    type Output = MultiVector;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[3], self.group1()[0], self.group1()[1], self.group1()[2]])),
            // e423, e431, e412
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e235, e315, e125
            (self.group2() * Simd32x3::from(other.group0()[3])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<AntiPlane> for Circle {
    type Output = Sphere;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            Simd32x3::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[2] * other.group0()[1])),
                (self.group1()[2] * other.group0()[0] * -1.0),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[1] * other.group0()[0])),
            ]),
            // e1234, e3215
            Simd32x2::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ((self.group2()[2] * other.group0()[2]) + (self.group2()[1] * other.group0()[1]) + (self.group0()[3] * other.group0()[3]) + (self.group2()[0] * other.group0()[0])),
            ]),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for Circle {
    type Output = Sphere;
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (swizzle!(self.group1(), 2, 2, 1) * swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e1234, e3215
            Simd32x2::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ((self.group2()[2] * other.group0()[2]) + (self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for Circle {
    type Output = Sphere;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            Simd32x3::from([
                (self.group1()[2] * other.group0()[1]),
                (-(self.group1()[2] * other.group0()[0]) - (self.group2()[1] * other.group0()[3])),
                (self.group1()[1] * other.group0()[0]),
            ]),
            // e1234, e3215
            Simd32x2::from([
                (-(self.group0()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
                ((self.group2()[2] * other.group0()[2]) + (self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<Dipole> for Circle {
    type Output = AntiScalar;
    fn wedge(self, other: Dipole) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group1()[2] * other.group1()[2])
                - (self.group1()[1] * other.group1()[1])
                - (self.group1()[0] * other.group1()[0])
                - (self.group0()[3] * other.group2()[3])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for Circle {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group0()[3] * other.group1()[3])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for Circle {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[3] * other.group1()[3])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAtOrigin> for Circle {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleOnOrigin> for Circle {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2]) - (self.group2()[1] * other.group0()[1]) - (self.group0()[3] * other.group0()[3]) - (self.group2()[0] * other.group0()[0])),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for Circle {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group1()[2] * other.group1()[2])
                - (self.group1()[1] * other.group1()[1])
                - (self.group1()[0] * other.group1()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<DualNum> for Circle {
    type Output = Circle;
    fn wedge(self, other: DualNum) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412, e321
            (self.group0() * Simd32x4::from(other.group0()[0])),
            // e415, e425, e435
            (self.group1() * Simd32x3::from(other.group0()[0])),
            // e235, e315, e125
            (self.group2() * Simd32x3::from(other.group0()[0])),
        );
    }
}
impl Wedge<FlatOrigin> for Circle {
    type Output = AntiScalar;
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other[e45] * -1.0));
    }
}
impl Wedge<FlatPoint> for Circle {
    type Output = AntiScalar;
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for Circle {
    type Output = AntiScalar;
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Flector> for Circle {
    type Output = AntiScalar;
    fn wedge(self, other: Flector) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<FlectorAtInfinity> for Circle {
    type Output = AntiScalar;
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<FlectorOnOrigin> for Circle {
    type Output = AntiScalar;
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[0] * -1.0));
    }
}
impl Wedge<Infinity> for Circle {
    type Output = Plane;
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (self.group0() * Simd32x4::from(other[e5])));
    }
}
impl Wedge<Motor> for Circle {
    type Output = Plane;
    fn wedge(self, other: Motor) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (self.group0() * Simd32x4::from(other.group1()[3])));
    }
}
impl Wedge<MotorAtInfinity> for Circle {
    type Output = Plane;
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (self.group0() * Simd32x4::from(other.group0()[3])));
    }
}
impl Wedge<MultiVector> for Circle {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group2()[2] * other.group3()[2])
                    - (self.group2()[1] * other.group3()[1])
                    - (self.group2()[0] * other.group3()[0])
                    - (self.group1()[2] * other.group5()[2])
                    - (self.group1()[1] * other.group5()[1])
                    - (self.group1()[0] * other.group5()[0])
                    - (self.group0()[3] * other.group3()[3])
                    - (self.group0()[2] * other.group4()[2])
                    - (self.group0()[0] * other.group4()[0])
                    - (self.group0()[1] * other.group4()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[3], self.group1()[0], self.group1()[1], self.group1()[2]])),
            // e423, e431, e412
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e235, e315, e125
            (self.group2() * Simd32x3::from(other.group0()[0])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                ((self.group0()[0] * other[e1]) + (self.group1()[2] * other.group1()[1])),
                (-(self.group1()[2] * other.group1()[0]) - (self.group2()[1] * other.group1()[3])),
                ((self.group0()[2] * other[e1]) + (self.group1()[1] * other.group1()[0])),
                (-(self.group0()[3] * other.group1()[3])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e3215
            ((self.group2()[2] * other.group1()[2]) + (self.group2()[1] * other.group1()[1]) + (self.group0()[3] * other[e1]) + (self.group2()[0] * other.group1()[0])),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for Circle {
    type Output = AntiScalar;
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Origin> for Circle {
    type Output = SphereOnOrigin;
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (Simd32x4::from(other[e4]) * Simd32x4::from([self.group2()[0], self.group2()[1], self.group2()[2], self.group0()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<RoundPoint> for Circle {
    type Output = Sphere;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            Simd32x3::from([
                ((self.group0()[0] * other.group1()[1]) + (self.group1()[2] * other.group0()[1])),
                (-(self.group1()[2] * other.group0()[0]) - (self.group2()[1] * other.group1()[0])),
                ((self.group0()[2] * other.group1()[1]) + (self.group1()[1] * other.group0()[0])),
            ]),
            // e1234, e3215
            Simd32x2::from([
                (-(self.group0()[3] * other.group1()[0])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
                ((self.group2()[2] * other.group0()[2]) + (self.group2()[1] * other.group0()[1]) + (self.group0()[3] * other.group1()[1]) + (self.group2()[0] * other.group0()[0])),
            ]),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for Circle {
    type Output = Sphere;
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from([(self.group0()[0] * other.group0()[1]), (self.group2()[1] * other.group0()[0]), (self.group0()[2] * other.group0()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e1234, e3215
            (Simd32x2::from(self.group0()[3]) * other.group0() * Simd32x2::from([-1.0, 1.0])),
        );
    }
}
impl Wedge<Scalar> for Circle {
    type Output = Circle;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Circle::from_groups(
            // e423, e431, e412, e321
            (self.group0() * Simd32x4::from(other[scalar])),
            // e415, e425, e435
            (self.group1() * Simd32x3::from(other[scalar])),
            // e235, e315, e125
            (self.group2() * Simd32x3::from(other[scalar])),
        );
    }
}
impl InfixWedge for CircleAligningOrigin {}
impl Wedge<AntiCircleOnOrigin> for CircleAligningOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group1()[2] * other.group1()[2])
                - (self.group1()[0] * other.group1()[0])
                - (self.group1()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiFlector> for CircleAligningOrigin {
    type Output = Sphere;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            Simd32x3::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group1()[2] * other.group1()[1])),
                (self.group1()[2] * other.group1()[0] * -1.0),
                ((self.group0()[2] * other.group1()[3]) + (self.group1()[1] * other.group1()[0])),
            ]),
            // e1234, e3215
            Simd32x2::from([
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ((self.group2()[2] * other.group1()[2]) + (self.group2()[0] * other.group1()[0]) + (self.group2()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for CircleAligningOrigin {
    type Output = Sphere;
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (swizzle!(self.group1(), 2, 2, 1) * Simd32x3::from([other.group0()[2], other.group0()[1], other.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e1234, e3215
            Simd32x2::from([
                (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
                ((self.group2()[2] * other.group0()[3]) + (self.group2()[0] * other.group0()[1]) + (self.group2()[1] * other.group0()[2])),
            ]),
        );
    }
}
impl Wedge<AntiLine> for CircleAligningOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiLine) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for CircleAligningOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiMotor> for CircleAligningOrigin {
    type Output = MultiVector;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
            ]),
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group0()[3])),
            // e235, e315, e125
            (self.group2() * Simd32x3::from(other.group0()[3])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for CircleAligningOrigin {
    type Output = MultiVector;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
            ]),
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group0()[3])),
            // e235, e315, e125
            (self.group2() * Simd32x3::from(other.group0()[3])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<AntiPlane> for CircleAligningOrigin {
    type Output = Sphere;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            Simd32x3::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[2] * other.group0()[1])),
                (self.group1()[2] * other.group0()[0] * -1.0),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[1] * other.group0()[0])),
            ]),
            // e1234, e3215
            Simd32x2::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ((self.group2()[2] * other.group0()[2]) + (self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for CircleAligningOrigin {
    type Output = Sphere;
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (swizzle!(self.group1(), 2, 2, 1) * swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e1234, e3215
            Simd32x2::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ((self.group2()[2] * other.group0()[2]) + (self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for CircleAligningOrigin {
    type Output = Sphere;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            Simd32x3::from([
                (self.group1()[2] * other.group0()[1]),
                (-(self.group1()[2] * other.group0()[0]) - (self.group2()[1] * other.group0()[3])),
                (self.group1()[1] * other.group0()[0]),
            ]),
            // e1234, e3215
            Simd32x2::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ((self.group2()[2] * other.group0()[2]) + (self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<Dipole> for CircleAligningOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: Dipole) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group1()[2] * other.group1()[2])
                - (self.group1()[1] * other.group1()[1])
                - (self.group1()[0] * other.group1()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for CircleAligningOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for CircleAligningOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAtOrigin> for CircleAligningOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleOnOrigin> for CircleAligningOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for CircleAligningOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group1()[2] * other.group1()[2])
                - (self.group1()[1] * other.group1()[1])
                - (self.group1()[0] * other.group1()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<DualNum> for CircleAligningOrigin {
    type Output = CircleAligningOrigin;
    fn wedge(self, other: DualNum) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group0()[0])),
            // e415, e425, e435
            (self.group1() * Simd32x3::from(other.group0()[0])),
            // e235, e315, e125
            (self.group2() * Simd32x3::from(other.group0()[0])),
        );
    }
}
impl Wedge<FlatPoint> for CircleAligningOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for CircleAligningOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Flector> for CircleAligningOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: Flector) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<FlectorAtInfinity> for CircleAligningOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Infinity> for CircleAligningOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other[e5])));
    }
}
impl Wedge<Motor> for CircleAligningOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: Motor) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group1()[3])));
    }
}
impl Wedge<MotorAtInfinity> for CircleAligningOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group0()[3])));
    }
}
impl Wedge<MultiVector> for CircleAligningOrigin {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group2()[2] * other.group3()[2])
                    - (self.group2()[1] * other.group3()[1])
                    - (self.group2()[0] * other.group3()[0])
                    - (self.group1()[2] * other.group5()[2])
                    - (self.group1()[1] * other.group5()[1])
                    - (self.group1()[0] * other.group5()[0])
                    - (self.group0()[2] * other.group4()[2])
                    - (self.group0()[0] * other.group4()[0])
                    - (self.group0()[1] * other.group4()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[1] * other.group0()[0]),
                (self.group1()[2] * other.group0()[0]),
            ]),
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group0()[0])),
            // e235, e315, e125
            (self.group2() * Simd32x3::from(other.group0()[0])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                ((self.group0()[0] * other[e1]) + (self.group1()[2] * other.group1()[1])),
                (-(self.group1()[2] * other.group1()[0]) - (self.group2()[1] * other.group1()[3])),
                ((self.group0()[2] * other[e1]) + (self.group1()[1] * other.group1()[0])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e3215
            ((self.group2()[2] * other.group1()[2]) + (self.group2()[0] * other.group1()[0]) + (self.group2()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for CircleAligningOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Origin> for CircleAligningOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group2() * Simd32x3::from(other[e4]) * Simd32x3::from(-1.0)));
    }
}
impl Wedge<RoundPoint> for CircleAligningOrigin {
    type Output = Sphere;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            Simd32x3::from([
                ((self.group0()[0] * other.group1()[1]) + (self.group1()[2] * other.group0()[1])),
                (-(self.group1()[2] * other.group0()[0]) - (self.group2()[1] * other.group1()[0])),
                ((self.group0()[2] * other.group1()[1]) + (self.group1()[1] * other.group0()[0])),
            ]),
            // e1234, e3215
            Simd32x2::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ((self.group2()[2] * other.group0()[2]) + (self.group2()[0] * other.group0()[0]) + (self.group2()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for CircleAligningOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from([(self.group0()[0] * other.group0()[1]), (self.group2()[1] * other.group0()[0]), (self.group0()[2] * other.group0()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<Scalar> for CircleAligningOrigin {
    type Output = CircleAligningOrigin;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other[scalar])),
            // e415, e425, e435
            (self.group1() * Simd32x3::from(other[scalar])),
            // e235, e315, e125
            (self.group2() * Simd32x3::from(other[scalar])),
        );
    }
}
impl InfixWedge for CircleAtInfinity {}
impl Wedge<AntiCircleOnOrigin> for CircleAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[3] * other.group1()[2])
                - (self.group0()[1] * other.group1()[0])
                - (self.group0()[2] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiFlector> for CircleAtInfinity {
    type Output = Plane;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[3] * other.group1()[1]),
            (self.group0()[3] * other.group1()[0] * -1.0),
            (self.group0()[2] * other.group1()[0]),
            ((self.group1()[2] * other.group1()[2]) + (self.group1()[1] * other.group1()[1]) + (self.group0()[0] * other.group1()[3]) + (self.group1()[0] * other.group1()[0])),
        ]));
    }
}
impl Wedge<AntiFlectorOnOrigin> for CircleAtInfinity {
    type Output = Plane;
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[2]),
            (self.group0()[3] * other.group0()[1] * -1.0),
            (self.group0()[2] * other.group0()[1]),
            ((self.group1()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])),
        ]));
    }
}
impl Wedge<AntiLine> for CircleAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: AntiLine) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for CircleAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiMotor> for CircleAtInfinity {
    type Output = MultiVector;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other.group0()[3])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for CircleAtInfinity {
    type Output = MultiVector;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group0()[3] * other.group0()[2]) - (self.group0()[1] * other.group0()[0]) - (self.group0()[2] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other.group0()[3])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<AntiPlane> for CircleAtInfinity {
    type Output = Plane;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[0] * -1.0),
            (self.group0()[2] * other.group0()[0]),
            ((self.group1()[2] * other.group0()[2]) + (self.group1()[1] * other.group0()[1]) + (self.group0()[0] * other.group0()[3]) + (self.group1()[0] * other.group0()[0])),
        ]));
    }
}
impl Wedge<AntiPlaneOnOrigin> for CircleAtInfinity {
    type Output = Plane;
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[0] * -1.0),
            (self.group0()[2] * other.group0()[0]),
            ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiSphereOnOrigin> for CircleAtInfinity {
    type Output = Sphere;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            Simd32x3::from([
                (self.group0()[3] * other.group0()[1]),
                (-(self.group0()[3] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])),
                (self.group0()[2] * other.group0()[0]),
            ]),
            // e1234, e3215
            Simd32x2::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<Dipole> for CircleAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: Dipole) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[3] * other.group1()[2])
                - (self.group0()[2] * other.group1()[1])
                - (self.group0()[0] * other.group2()[3])
                - (self.group0()[1] * other.group1()[0])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for CircleAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) - (self.group0()[0] * other.group1()[3]) - (self.group1()[0] * other.group0()[0])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for CircleAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group0()[2]) - (self.group0()[2] * other.group0()[1]) - (self.group0()[0] * other.group1()[3]) - (self.group0()[1] * other.group0()[0])),
        );
    }
}
impl Wedge<DipoleAtOrigin> for CircleAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleOnOrigin> for CircleAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) - (self.group0()[0] * other.group0()[3]) - (self.group1()[0] * other.group0()[0])),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for CircleAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[3] * other.group1()[2])
                - (self.group0()[1] * other.group1()[0])
                - (self.group0()[2] * other.group1()[1])),
        );
    }
}
impl Wedge<DualNum> for CircleAtInfinity {
    type Output = CircleAtInfinity;
    fn wedge(self, other: DualNum) -> Self::Output {
        return CircleAtInfinity::from_groups(
            // e321, e415, e425, e435
            (self.group0() * Simd32x4::from(other.group0()[0])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other.group0()[0])),
        );
    }
}
impl Wedge<FlatOrigin> for CircleAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[0] * other[e45] * -1.0));
    }
}
impl Wedge<FlatPoint> for CircleAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[0] * other.group0()[3] * -1.0));
    }
}
impl Wedge<Flector> for CircleAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: Flector) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[0] * other.group0()[3] * -1.0));
    }
}
impl Wedge<FlectorOnOrigin> for CircleAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[0] * other.group0()[0] * -1.0));
    }
}
impl Wedge<Infinity> for CircleAtInfinity {
    type Output = Horizon;
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self.group0()[0] * other[e5]));
    }
}
impl Wedge<Motor> for CircleAtInfinity {
    type Output = Horizon;
    fn wedge(self, other: Motor) -> Self::Output {
        return Horizon::from_groups(/* e3215 */ (self.group0()[0] * other.group1()[3]));
    }
}
impl Wedge<MotorAtInfinity> for CircleAtInfinity {
    type Output = Horizon;
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return Horizon::from_groups(/* e3215 */ (self.group0()[0] * other.group0()[3]));
    }
}
impl Wedge<MultiVector> for CircleAtInfinity {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group1()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[0] * other.group3()[0])
                    - (self.group0()[3] * other.group5()[2])
                    - (self.group0()[2] * other.group5()[1])
                    - (self.group0()[0] * other.group3()[3])
                    - (self.group0()[1] * other.group5()[0])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            (self.group0() * Simd32x4::from(other.group0()[0])),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other.group0()[0])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group0()[3] * other.group1()[1]),
                (-(self.group0()[3] * other.group1()[0]) - (self.group1()[1] * other.group1()[3])),
                (self.group0()[2] * other.group1()[0]),
                (self.group0()[0] * other.group1()[3] * -1.0),
            ]),
            // e3215
            ((self.group1()[2] * other.group1()[2]) + (self.group1()[1] * other.group1()[1]) + (self.group0()[0] * other[e1]) + (self.group1()[0] * other.group1()[0])),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for CircleAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Origin> for CircleAtInfinity {
    type Output = SphereOnOrigin;
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (Simd32x4::from(other[e4]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[0]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<RoundPoint> for CircleAtInfinity {
    type Output = Sphere;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            Simd32x3::from([
                (self.group0()[3] * other.group0()[1]),
                (-(self.group0()[3] * other.group0()[0]) - (self.group1()[1] * other.group1()[0])),
                (self.group0()[2] * other.group0()[0]),
            ]),
            // e1234, e3215
            Simd32x2::from([
                (self.group0()[0] * other.group1()[0] * -1.0),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[1] * other.group0()[1]) + (self.group0()[0] * other.group1()[1]) + (self.group1()[0] * other.group0()[0])),
            ]),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for CircleAtInfinity {
    type Output = Sphere;
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (self.group1() * Simd32x3::from(other.group0()[0]) * Simd32x3::from(-1.0)),
            // e1234, e3215
            (Simd32x2::from(self.group0()[0]) * other.group0() * Simd32x2::from([-1.0, 1.0])),
        );
    }
}
impl Wedge<Scalar> for CircleAtInfinity {
    type Output = CircleAtInfinity;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return CircleAtInfinity::from_groups(
            // e321, e415, e425, e435
            (self.group0() * Simd32x4::from(other[scalar])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other[scalar])),
        );
    }
}
impl InfixWedge for CircleAtOrigin {}
impl Wedge<AntiCircleOnOrigin> for CircleAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlector> for CircleAtOrigin {
    type Output = Sphere;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (self.group0() * Simd32x3::from(other.group1()[3])),
            // e1234, e3215
            Simd32x2::from([
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ((self.group1()[2] * other.group1()[2]) + (self.group1()[0] * other.group1()[0]) + (self.group1()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for CircleAtOrigin {
    type Output = SphereAtOrigin;
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return SphereAtOrigin::from_groups(/* e1234, e3215 */ Simd32x2::from([
            (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
            ((self.group1()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])),
        ]));
    }
}
impl Wedge<AntiLine> for CircleAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiLine) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiMotor> for CircleAtOrigin {
    type Output = MultiVector;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group0()[3])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other.group0()[3])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for CircleAtOrigin {
    type Output = CircleAtOrigin;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return CircleAtOrigin::from_groups(
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group0()[3])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other.group0()[3])),
        );
    }
}
impl Wedge<AntiPlane> for CircleAtOrigin {
    type Output = Sphere;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (self.group0() * Simd32x3::from(other.group0()[3])),
            // e1234, e3215
            Simd32x2::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for CircleAtOrigin {
    type Output = SphereAtOrigin;
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return SphereAtOrigin::from_groups(/* e1234, e3215 */ Simd32x2::from([
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiSphereOnOrigin> for CircleAtOrigin {
    type Output = Sphere;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (self.group1() * Simd32x3::from(other.group0()[3]) * Simd32x3::from(-1.0)),
            // e1234, e3215
            Simd32x2::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<Dipole> for CircleAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: Dipole) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for CircleAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for CircleAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAtOrigin> for CircleAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleOnOrigin> for CircleAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for CircleAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<DualNum> for CircleAtOrigin {
    type Output = CircleAtOrigin;
    fn wedge(self, other: DualNum) -> Self::Output {
        return CircleAtOrigin::from_groups(
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group0()[0])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other.group0()[0])),
        );
    }
}
impl Wedge<FlatPoint> for CircleAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for CircleAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Flector> for CircleAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: Flector) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<FlectorAtInfinity> for CircleAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Infinity> for CircleAtOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other[e5])));
    }
}
impl Wedge<Motor> for CircleAtOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: Motor) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group1()[3])));
    }
}
impl Wedge<MotorAtInfinity> for CircleAtOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group0()[3])));
    }
}
impl Wedge<MultiVector> for CircleAtOrigin {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group1()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[0] * other.group3()[0])
                    - (self.group0()[2] * other.group4()[2])
                    - (self.group0()[0] * other.group4()[0])
                    - (self.group0()[1] * other.group4()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group0()[0])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other.group0()[0])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group0()[0] * other[e1]),
                (self.group1()[1] * other.group1()[3] * -1.0),
                (self.group0()[2] * other[e1]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e3215
            ((self.group1()[2] * other.group1()[2]) + (self.group1()[0] * other.group1()[0]) + (self.group1()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for CircleAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Origin> for CircleAtOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group1() * Simd32x3::from(other[e4]) * Simd32x3::from(-1.0)));
    }
}
impl Wedge<RoundPoint> for CircleAtOrigin {
    type Output = Sphere;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from([(self.group0()[0] * other.group1()[1]), (self.group1()[1] * other.group1()[0]), (self.group0()[2] * other.group1()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e1234, e3215
            Simd32x2::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for CircleAtOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from([(self.group0()[0] * other.group0()[1]), (self.group1()[1] * other.group0()[0]), (self.group0()[2] * other.group0()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<Scalar> for CircleAtOrigin {
    type Output = CircleAtOrigin;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return CircleAtOrigin::from_groups(
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other[scalar])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other[scalar])),
        );
    }
}
impl InfixWedge for CircleOnOrigin {}
impl Wedge<AntiCircleOnOrigin> for CircleOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiFlector> for CircleOnOrigin {
    type Output = SphereOnOrigin;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            ((self.group0()[0] * other.group1()[3]) + (self.group1()[2] * other.group1()[1])),
            (self.group1()[2] * other.group1()[0] * -1.0),
            ((self.group0()[2] * other.group1()[3]) + (self.group1()[1] * other.group1()[0])),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<AntiFlectorOnOrigin> for CircleOnOrigin {
    type Output = SphereOnOrigin;
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (self.group1()[2] * other.group0()[2]),
            (self.group1()[2] * other.group0()[1] * -1.0),
            (self.group1()[1] * other.group0()[1]),
            (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
        ]));
    }
}
impl Wedge<AntiLine> for CircleOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiLine) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for CircleOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiMotor> for CircleOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
            ]),
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group0()[3])),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for CircleOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
            ]),
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group0()[3])),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<AntiPlane> for CircleOnOrigin {
    type Output = SphereOnOrigin;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            ((self.group0()[0] * other.group0()[3]) + (self.group1()[2] * other.group0()[1])),
            (self.group1()[2] * other.group0()[0] * -1.0),
            ((self.group0()[2] * other.group0()[3]) + (self.group1()[1] * other.group0()[0])),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiPlaneOnOrigin> for CircleOnOrigin {
    type Output = SphereOnOrigin;
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (self.group1()[2] * other.group0()[1]),
            (self.group1()[2] * other.group0()[0] * -1.0),
            (self.group1()[1] * other.group0()[0]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiSphereOnOrigin> for CircleOnOrigin {
    type Output = SphereOnOrigin;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (self.group1()[2] * other.group0()[1]),
            (self.group1()[2] * other.group0()[0] * -1.0),
            (self.group1()[1] * other.group0()[0]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Dipole> for CircleOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: Dipole) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group1()[2])
                - (self.group1()[1] * other.group1()[1])
                - (self.group1()[0] * other.group1()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for CircleOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for CircleOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAtOrigin> for CircleOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for CircleOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group1()[2])
                - (self.group1()[1] * other.group1()[1])
                - (self.group1()[0] * other.group1()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<DualNum> for CircleOnOrigin {
    type Output = CircleOnOrigin;
    fn wedge(self, other: DualNum) -> Self::Output {
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group0()[0])),
            // e415, e425, e435
            (self.group1() * Simd32x3::from(other.group0()[0])),
        );
    }
}
impl Wedge<FlatPoint> for CircleOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for CircleOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Flector> for CircleOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: Flector) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<FlectorAtInfinity> for CircleOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Infinity> for CircleOnOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other[e5])));
    }
}
impl Wedge<Motor> for CircleOnOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: Motor) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group1()[3])));
    }
}
impl Wedge<MotorAtInfinity> for CircleOnOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group0()[3])));
    }
}
impl Wedge<MultiVector> for CircleOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group1()[2] * other.group5()[2])
                    - (self.group1()[1] * other.group5()[1])
                    - (self.group1()[0] * other.group5()[0])
                    - (self.group0()[2] * other.group4()[2])
                    - (self.group0()[0] * other.group4()[0])
                    - (self.group0()[1] * other.group4()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[1] * other.group0()[0]),
                (self.group1()[2] * other.group0()[0]),
            ]),
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group0()[0])),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                ((self.group0()[0] * other[e1]) + (self.group1()[2] * other.group1()[1])),
                (self.group1()[2] * other.group1()[0] * -1.0),
                ((self.group0()[2] * other[e1]) + (self.group1()[1] * other.group1()[0])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<RoundPoint> for CircleOnOrigin {
    type Output = SphereOnOrigin;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            ((self.group0()[0] * other.group1()[1]) + (self.group1()[2] * other.group0()[1])),
            (self.group1()[2] * other.group0()[0] * -1.0),
            ((self.group0()[2] * other.group1()[1]) + (self.group1()[1] * other.group0()[0])),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<RoundPointAtOrigin> for CircleOnOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group0()[1])));
    }
}
impl Wedge<Scalar> for CircleOnOrigin {
    type Output = CircleOnOrigin;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other[scalar])),
            // e415, e425, e435
            (self.group1() * Simd32x3::from(other[scalar])),
        );
    }
}
impl InfixWedge for CircleOrthogonalOrigin {}
impl Wedge<AntiCircleOnOrigin> for CircleOrthogonalOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlector> for CircleOrthogonalOrigin {
    type Output = Sphere;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e1234, e3215
            Simd32x2::from([
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                ((self.group1()[2] * other.group1()[2]) + (self.group1()[1] * other.group1()[1]) + (self.group0()[3] * other.group1()[3]) + (self.group1()[0] * other.group1()[0])),
            ]),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for CircleOrthogonalOrigin {
    type Output = SphereAtOrigin;
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return SphereAtOrigin::from_groups(/* e1234, e3215 */ Simd32x2::from([
            (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
            ((self.group1()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])),
        ]));
    }
}
impl Wedge<AntiLine> for CircleOrthogonalOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiLine) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiMotor> for CircleOrthogonalOrigin {
    type Output = MultiVector;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([(self.group0()[3] * other.group0()[3]), 0.0, 0.0, 0.0]),
            // e423, e431, e412
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other.group0()[3])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for CircleOrthogonalOrigin {
    type Output = CircleOrthogonalOrigin;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return CircleOrthogonalOrigin::from_groups(
            // e423, e431, e412, e321
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other.group0()[3])),
        );
    }
}
impl Wedge<AntiPlane> for CircleOrthogonalOrigin {
    type Output = Sphere;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e1234, e3215
            Simd32x2::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[1] * other.group0()[1]) + (self.group0()[3] * other.group0()[3]) + (self.group1()[0] * other.group0()[0])),
            ]),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for CircleOrthogonalOrigin {
    type Output = SphereAtOrigin;
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return SphereAtOrigin::from_groups(/* e1234, e3215 */ Simd32x2::from([
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiSphereOnOrigin> for CircleOrthogonalOrigin {
    type Output = Sphere;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (self.group1() * Simd32x3::from(other.group0()[3]) * Simd32x3::from(-1.0)),
            // e1234, e3215
            Simd32x2::from([
                (-(self.group0()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<Dipole> for CircleOrthogonalOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: Dipole) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[3] * other.group2()[3])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for CircleOrthogonalOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[3] * other.group1()[3])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for CircleOrthogonalOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group1()[3]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAtOrigin> for CircleOrthogonalOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleOnOrigin> for CircleOrthogonalOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) - (self.group0()[3] * other.group0()[3]) - (self.group1()[0] * other.group0()[0])),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for CircleOrthogonalOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<DualNum> for CircleOrthogonalOrigin {
    type Output = CircleOrthogonalOrigin;
    fn wedge(self, other: DualNum) -> Self::Output {
        return CircleOrthogonalOrigin::from_groups(
            // e423, e431, e412, e321
            (self.group0() * Simd32x4::from(other.group0()[0])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other.group0()[0])),
        );
    }
}
impl Wedge<FlatOrigin> for CircleOrthogonalOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other[e45] * -1.0));
    }
}
impl Wedge<FlatPoint> for CircleOrthogonalOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for CircleOrthogonalOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Flector> for CircleOrthogonalOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: Flector) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<FlectorAtInfinity> for CircleOrthogonalOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<FlectorOnOrigin> for CircleOrthogonalOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[0] * -1.0));
    }
}
impl Wedge<Infinity> for CircleOrthogonalOrigin {
    type Output = Plane;
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (self.group0() * Simd32x4::from(other[e5])));
    }
}
impl Wedge<Motor> for CircleOrthogonalOrigin {
    type Output = Plane;
    fn wedge(self, other: Motor) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (self.group0() * Simd32x4::from(other.group1()[3])));
    }
}
impl Wedge<MotorAtInfinity> for CircleOrthogonalOrigin {
    type Output = Plane;
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (self.group0() * Simd32x4::from(other.group0()[3])));
    }
}
impl Wedge<MultiVector> for CircleOrthogonalOrigin {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group1()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[0] * other.group3()[0])
                    - (self.group0()[3] * other.group3()[3])
                    - (self.group0()[2] * other.group4()[2])
                    - (self.group0()[0] * other.group4()[0])
                    - (self.group0()[1] * other.group4()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([(self.group0()[3] * other.group0()[0]), 0.0, 0.0, 0.0]),
            // e423, e431, e412
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other.group0()[0])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group0()[0] * other[e1]),
                (self.group1()[1] * other.group1()[3] * -1.0),
                (self.group0()[2] * other[e1]),
                (-(self.group0()[3] * other.group1()[3])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e3215
            ((self.group1()[2] * other.group1()[2]) + (self.group1()[1] * other.group1()[1]) + (self.group0()[3] * other[e1]) + (self.group1()[0] * other.group1()[0])),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for CircleOrthogonalOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Origin> for CircleOrthogonalOrigin {
    type Output = SphereOnOrigin;
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (Simd32x4::from(other[e4]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self.group0()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<RoundPoint> for CircleOrthogonalOrigin {
    type Output = Sphere;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from([(self.group0()[0] * other.group1()[1]), (self.group1()[1] * other.group1()[0]), (self.group0()[2] * other.group1()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e1234, e3215
            Simd32x2::from([
                (-(self.group0()[3] * other.group1()[0])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[1] * other.group0()[1]) + (self.group0()[3] * other.group1()[1]) + (self.group1()[0] * other.group0()[0])),
            ]),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for CircleOrthogonalOrigin {
    type Output = Sphere;
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from([(self.group0()[0] * other.group0()[1]), (self.group1()[1] * other.group0()[0]), (self.group0()[2] * other.group0()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e1234, e3215
            (Simd32x2::from(self.group0()[3]) * other.group0() * Simd32x2::from([-1.0, 1.0])),
        );
    }
}
impl Wedge<Scalar> for CircleOrthogonalOrigin {
    type Output = CircleOrthogonalOrigin;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return CircleOrthogonalOrigin::from_groups(
            // e423, e431, e412, e321
            (self.group0() * Simd32x4::from(other[scalar])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other[scalar])),
        );
    }
}
impl InfixWedge for Dipole {}
impl Wedge<AntiCircleOnOrigin> for Dipole {
    type Output = Sphere;
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            Simd32x3::from([
                ((self.group2()[2] * other.group0()[1]) + (self.group2()[3] * other.group1()[0])),
                (self.group2()[2] * other.group0()[0] * -1.0),
                ((self.group2()[1] * other.group0()[0]) + (self.group2()[3] * other.group1()[2])),
            ]),
            // e1234, e3215
            (-(Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group0()[2], self.group2()[2]]))
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group0()[0], self.group2()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group0()[1], self.group2()[1]]))
                + Simd32x2::from([
                    (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[0] * other.group0()[0])),
                    0.0,
                ])),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for Dipole {
    type Output = AntiScalar;
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[3] * other.group0()[3]) - (self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlatOrigin> for Dipole {
    type Output = AntiScalar;
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group2()[3] * other[e321] * -1.0));
    }
}
impl Wedge<AntiFlatPoint> for Dipole {
    type Output = AntiScalar;
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlector> for Dipole {
    type Output = MultiVector;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group2()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
                (self.group2()[3] * other.group1()[0] * -1.0),
                (self.group2()[3] * other.group1()[1] * -1.0),
                (self.group2()[3] * other.group1()[2] * -1.0),
            ]),
            // e423, e431, e412
            (swizzle!(self.group0(), 1, 0, 0) * Simd32x3::from([other.group1()[2], other.group1()[2], other.group1()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group1()[0] * other.group1()[3]) + (self.group2()[2] * other.group1()[1])),
                (self.group2()[2] * other.group1()[0] * -1.0),
                ((self.group1()[2] * other.group1()[3]) + (self.group2()[1] * other.group1()[0])),
            ]),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for Dipole {
    type Output = MultiVector;
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, (self.group2()[3] * other.group0()[0] * -1.0)]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[2])),
                (self.group2()[3] * other.group0()[1] * -1.0),
                (self.group2()[3] * other.group0()[2] * -1.0),
                (self.group2()[3] * other.group0()[3] * -1.0),
            ]),
            // e423, e431, e412
            (swizzle!(self.group0(), 1, 0, 0) * Simd32x3::from([other.group0()[3], other.group0()[3], other.group0()[2]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e235, e315, e125
            (Simd32x3::from([(self.group2()[2] * other.group0()[2]), (self.group2()[2] * other.group0()[1]), (self.group2()[1] * other.group0()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<AntiLine> for Dipole {
    type Output = Sphere;
    fn wedge(self, other: AntiLine) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            Simd32x3::from([
                ((self.group0()[1] * other.group1()[2]) + (self.group2()[3] * other.group0()[0])),
                (self.group0()[0] * other.group1()[2] * -1.0),
                ((self.group0()[0] * other.group1()[1]) + (self.group2()[3] * other.group0()[2])),
            ]),
            // e1234, e3215
            (-(Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group0()[2], self.group2()[2]]))
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group0()[0], self.group2()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group0()[1], self.group2()[1]]))
                + Simd32x2::from([
                    0.0,
                    (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for Dipole {
    type Output = Sphere;
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from(self.group2()[3]) * other.group0()),
            // e1234, e3215
            (-(Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group0()[2], self.group2()[2]]))
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group0()[0], self.group2()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group0()[1], self.group2()[1]]))),
        );
    }
}
impl Wedge<AntiMotor> for Dipole {
    type Output = MultiVector;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]])),
            // e15, e25, e35
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]])),
            // e23, e31, e12
            (self.group1() * Simd32x3::from(other.group0()[3])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) + (self.group2()[3] * other.group0()[0])),
                (self.group0()[0] * other.group1()[2] * -1.0),
                ((self.group0()[0] * other.group1()[1]) + (self.group2()[3] * other.group0()[2])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e3215
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group1()[2] * other.group1()[2])
                - (self.group1()[0] * other.group1()[0])
                - (self.group1()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for Dipole {
    type Output = MultiVector;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]])),
            // e15, e25, e35
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]])),
            // e23, e31, e12
            (self.group1() * Simd32x3::from(other.group0()[3])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group2()[3] * other.group0()[0]),
                (self.group2()[3] * other.group0()[1]),
                (self.group2()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e3215
            (-(self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiPlane> for Dipole {
    type Output = Circle;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412, e321
            Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[0] * other.group0()[2] * -1.0),
                (self.group0()[0] * other.group0()[1]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435
            (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group2()[2] * other.group0()[1])),
                (self.group2()[2] * other.group0()[0] * -1.0),
                ((self.group1()[2] * other.group0()[3]) + (self.group2()[1] * other.group0()[0])),
            ]),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for Dipole {
    type Output = Circle;
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412, e321
            Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[0] * other.group0()[2] * -1.0),
                (self.group0()[0] * other.group0()[1]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435
            (Simd32x3::from(self.group2()[3]) * other.group0() * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([self.group2()[2], self.group2()[2], self.group2()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for Dipole {
    type Output = Circle;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) + (self.group1()[0] * other.group0()[3])),
                (self.group0()[0] * other.group0()[2] * -1.0),
                ((self.group0()[0] * other.group0()[1]) + (self.group1()[2] * other.group0()[3])),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435
            (Simd32x3::from(self.group2()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from([(self.group2()[2] * other.group0()[1]), (self.group2()[2] * other.group0()[0]), (self.group2()[1] * other.group0()[0])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<Circle> for Dipole {
    type Output = AntiScalar;
    fn wedge(self, other: Circle) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[3] * other.group0()[3])
                - (self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group1()[2] * other.group1()[2])
                - (self.group1()[1] * other.group1()[1])
                - (self.group1()[0] * other.group1()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<CircleAligningOrigin> for Dipole {
    type Output = AntiScalar;
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group1()[2] * other.group1()[2])
                - (self.group1()[1] * other.group1()[1])
                - (self.group1()[0] * other.group1()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<CircleAtInfinity> for Dipole {
    type Output = AntiScalar;
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[3] * other.group0()[0])
                - (self.group1()[2] * other.group0()[3])
                - (self.group1()[1] * other.group0()[2])
                - (self.group1()[0] * other.group0()[1])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleAtOrigin> for Dipole {
    type Output = AntiScalar;
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleOnOrigin> for Dipole {
    type Output = AntiScalar;
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group1()[2] * other.group1()[2])
                - (self.group1()[0] * other.group1()[0])
                - (self.group1()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for Dipole {
    type Output = AntiScalar;
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[3] * other.group0()[3])
                - (self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<Dipole> for Dipole {
    type Output = Sphere;
    fn wedge(self, other: Dipole) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            Simd32x3::from([
                ((self.group2()[3] * other.group1()[0]) + (self.group2()[2] * other.group0()[1]) + (self.group0()[1] * other.group2()[2]) + (self.group1()[0] * other.group2()[3])),
                (-(self.group0()[0] * other.group2()[2]) - (self.group2()[2] * other.group0()[0])),
                ((self.group2()[3] * other.group1()[2]) + (self.group2()[1] * other.group0()[0]) + (self.group0()[0] * other.group2()[1]) + (self.group1()[2] * other.group2()[3])),
            ]),
            // e1234, e3215
            (-(Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]]))
                - (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group0()[2], self.group2()[2]]))
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group0()[0], self.group2()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group0()[1], self.group2()[1]]))),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for Dipole {
    type Output = Sphere;
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            Simd32x3::from([
                ((self.group2()[2] * other.group0()[1]) + (self.group0()[1] * other.group1()[2]) + (self.group1()[0] * other.group1()[3])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group2()[2] * other.group0()[0])),
                ((self.group2()[1] * other.group0()[0]) + (self.group0()[0] * other.group1()[1]) + (self.group1()[2] * other.group1()[3])),
            ]),
            // e1234, e3215
            (-(Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]]))),
        );
    }
}
impl Wedge<DipoleAtInfinity> for Dipole {
    type Output = Sphere;
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            Simd32x3::from([
                ((self.group2()[3] * other.group0()[0]) + (self.group0()[1] * other.group1()[2]) + (self.group1()[0] * other.group1()[3])),
                (self.group0()[0] * other.group1()[2] * -1.0),
                ((self.group2()[3] * other.group0()[2]) + (self.group0()[0] * other.group1()[1]) + (self.group1()[2] * other.group1()[3])),
            ]),
            // e1234, e3215
            (-(Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group0()[2], self.group2()[2]]))
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group0()[0], self.group2()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group0()[1], self.group2()[1]]))
                + Simd32x2::from([
                    0.0,
                    (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<DipoleAtOrigin> for Dipole {
    type Output = Sphere;
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            Simd32x3::from([
                ((self.group0()[1] * other.group1()[2]) + (self.group2()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group2()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group2()[1] * other.group0()[0])),
            ]),
            // e1234, e3215
            (-(Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]]))),
        );
    }
}
impl Wedge<DipoleOnOrigin> for Dipole {
    type Output = SphereOnOrigin;
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            ((self.group1()[0] * other.group0()[3]) + (self.group2()[2] * other.group0()[1])),
            (self.group2()[2] * other.group0()[0] * -1.0),
            ((self.group1()[2] * other.group0()[3]) + (self.group2()[1] * other.group0()[0])),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<DipoleOrthogonalOrigin> for Dipole {
    type Output = Sphere;
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            Simd32x3::from([
                ((self.group2()[3] * other.group1()[0]) + (self.group0()[1] * other.group2()[2]) + (self.group2()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group2()[2]) - (self.group2()[2] * other.group0()[0])),
                ((self.group2()[3] * other.group1()[2]) + (self.group0()[0] * other.group2()[1]) + (self.group2()[1] * other.group0()[0])),
            ]),
            // e1234, e3215
            (-(Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]]))
                - (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group0()[2], self.group2()[2]]))
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group0()[0], self.group2()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group0()[1], self.group2()[1]]))),
        );
    }
}
impl Wedge<DualNum> for Dipole {
    type Output = Dipole;
    fn wedge(self, other: DualNum) -> Self::Output {
        return Dipole::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other.group0()[0])),
            // e23, e31, e12
            (self.group1() * Simd32x3::from(other.group0()[0])),
            // e15, e25, e35, e45
            (self.group2() * Simd32x4::from(other.group0()[0])),
        );
    }
}
impl Wedge<FlatOrigin> for Dipole {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group1() * Simd32x3::from(other[e45])));
    }
}
impl Wedge<FlatPoint> for Dipole {
    type Output = Plane;
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            ((self.group0()[1] * other.group0()[2]) + (self.group1()[0] * other.group0()[3])),
            (self.group0()[0] * other.group0()[2] * -1.0),
            ((self.group0()[0] * other.group0()[1]) + (self.group1()[2] * other.group0()[3])),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<FlatPointAtInfinity> for Dipole {
    type Output = Plane;
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[1] * other.group0()[2]),
            (self.group0()[0] * other.group0()[2] * -1.0),
            (self.group0()[0] * other.group0()[1]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Flector> for Dipole {
    type Output = Plane;
    fn wedge(self, other: Flector) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            ((self.group0()[1] * other.group0()[2]) + (self.group1()[0] * other.group0()[3])),
            (self.group0()[0] * other.group0()[2] * -1.0),
            ((self.group0()[0] * other.group0()[1]) + (self.group1()[2] * other.group0()[3])),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<FlectorAtInfinity> for Dipole {
    type Output = Plane;
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[1] * other.group0()[2]),
            (self.group0()[0] * other.group0()[2] * -1.0),
            (self.group0()[0] * other.group0()[1]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<FlectorOnOrigin> for Dipole {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group1() * Simd32x3::from(other.group0()[0])));
    }
}
impl Wedge<Infinity> for Dipole {
    type Output = Line;
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            (self.group0() * Simd32x3::from(other[e5])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other[e5])),
        );
    }
}
impl Wedge<Line> for Dipole {
    type Output = AntiScalar;
    fn wedge(self, other: Line) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<LineAtInfinity> for Dipole {
    type Output = AntiScalar;
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<LineOnOrigin> for Dipole {
    type Output = AntiScalar;
    fn wedge(self, other: LineOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Motor> for Dipole {
    type Output = Motor;
    fn wedge(self, other: Motor) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group1()[3]),
                (self.group1()[1] * other.group1()[3]),
                (self.group1()[2] * other.group1()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<MotorAtInfinity> for Dipole {
    type Output = Motor;
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<MotorOnOrigin> for Dipole {
    type Output = AntiScalar;
    fn wedge(self, other: MotorOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<MultiVector> for Dipole {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group2()[3] * other.group6()[0])
                    - (self.group2()[2] * other.group7()[2])
                    - (self.group2()[1] * other.group7()[1])
                    - (self.group2()[0] * other.group7()[0])
                    - (self.group1()[2] * other.group6()[3])
                    - (self.group1()[1] * other.group6()[2])
                    - (self.group1()[0] * other.group6()[1])
                    - (self.group0()[2] * other.group8()[2])
                    - (self.group0()[0] * other.group8()[0])
                    - (self.group0()[1] * other.group8()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group2()[3]])),
            // e15, e25, e35
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]])),
            // e23, e31, e12
            (self.group1() * Simd32x3::from(other.group0()[0])),
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
                (self.group2()[3] * other.group1()[0] * -1.0),
                (self.group2()[3] * other.group1()[1] * -1.0),
                (self.group2()[3] * other.group1()[2] * -1.0),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                ((self.group0()[1] * other.group1()[2]) + (self.group1()[0] * other.group1()[3])),
                (self.group0()[0] * other.group1()[2] * -1.0),
                ((self.group0()[0] * other.group1()[1]) + (self.group1()[2] * other.group1()[3])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group1()[0] * other[e1]) + (self.group2()[2] * other.group1()[1])),
                (self.group2()[2] * other.group1()[0] * -1.0),
                ((self.group1()[2] * other[e1]) + (self.group2()[1] * other.group1()[0])),
            ]),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                ((self.group2()[3] * other.group5()[0]) + (self.group2()[2] * other.group3()[1]) + (self.group0()[1] * other.group4()[2]) + (self.group1()[0] * other.group3()[3])),
                (-(self.group0()[0] * other.group4()[2]) - (self.group2()[2] * other.group3()[0])),
                ((self.group2()[3] * other.group5()[2]) + (self.group2()[1] * other.group3()[0]) + (self.group0()[0] * other.group4()[1]) + (self.group1()[2] * other.group3()[3])),
                (-(self.group1()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[0] * other.group3()[0])
                    - (self.group0()[2] * other.group5()[2])
                    - (self.group0()[0] * other.group5()[0])
                    - (self.group0()[1] * other.group5()[1])),
            ]),
            // e3215
            (-(self.group2()[2] * other.group5()[2])
                - (self.group2()[1] * other.group5()[1])
                - (self.group2()[0] * other.group5()[0])
                - (self.group1()[2] * other.group4()[2])
                - (self.group1()[0] * other.group4()[0])
                - (self.group1()[1] * other.group4()[1])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for Dipole {
    type Output = AntiScalar;
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for Dipole {
    type Output = SphereOnOrigin;
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (self.group2()[2] * other.group0()[1]),
            (self.group2()[2] * other.group0()[0] * -1.0),
            (self.group2()[1] * other.group0()[0]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Origin> for Dipole {
    type Output = CircleOnOrigin;
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            (self.group1() * Simd32x3::from(other[e4])),
            // e415, e425, e435
            (Simd32x3::from(other[e4]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]])),
        );
    }
}
impl Wedge<RoundPoint> for Dipole {
    type Output = Circle;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) + (self.group1()[0] * other.group1()[0])),
                (self.group0()[0] * other.group0()[2] * -1.0),
                ((self.group0()[0] * other.group0()[1]) + (self.group1()[2] * other.group1()[0])),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435
            (Simd32x3::from(self.group2()[3]) * other.group0() * Simd32x3::from(-1.0)),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group1()[0] * other.group1()[1]) + (self.group2()[2] * other.group0()[1])),
                (self.group2()[2] * other.group0()[0] * -1.0),
                ((self.group1()[2] * other.group1()[1]) + (self.group2()[1] * other.group0()[0])),
            ]),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for Dipole {
    type Output = CircleAligningOrigin;
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (self.group1() * Simd32x3::from(other.group0()[0])),
            // e415, e425, e435
            ((self.group0() * Simd32x3::from(other.group0()[1])) + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group2()[0], self.group2()[1], self.group2()[2]]))),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other.group0()[1])),
        );
    }
}
impl Wedge<Scalar> for Dipole {
    type Output = Dipole;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Dipole::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other[scalar])),
            // e23, e31, e12
            (self.group1() * Simd32x3::from(other[scalar])),
            // e15, e25, e35, e45
            (self.group2() * Simd32x4::from(other[scalar])),
        );
    }
}
impl InfixWedge for DipoleAligningOrigin {}
impl Wedge<AntiCircleOnOrigin> for DipoleAligningOrigin {
    type Output = Sphere;
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            Simd32x3::from([
                ((self.group1()[2] * other.group0()[1]) + (self.group1()[3] * other.group1()[0])),
                (self.group1()[2] * other.group0()[0] * -1.0),
                ((self.group1()[1] * other.group0()[0]) + (self.group1()[3] * other.group1()[2])),
            ]),
            // e1234, e3215
            (-(Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group0()[2], self.group1()[2]]))
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group0()[0], self.group1()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group0()[1], self.group1()[1]]))),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for DipoleAligningOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[3] * other.group0()[3]) - (self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlatOrigin> for DipoleAligningOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group1()[3] * other[e321] * -1.0));
    }
}
impl Wedge<AntiFlatPoint> for DipoleAligningOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlector> for DipoleAligningOrigin {
    type Output = MultiVector;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group1()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group1()[3] * other.group1()[0] * -1.0),
                (self.group1()[3] * other.group1()[1] * -1.0),
                (self.group1()[3] * other.group1()[2] * -1.0),
            ]),
            // e423, e431, e412
            (swizzle!(self.group0(), 1, 0, 0) * Simd32x3::from([other.group1()[2], other.group1()[2], other.group1()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e235, e315, e125
            (Simd32x3::from([(self.group1()[2] * other.group1()[1]), (self.group1()[2] * other.group1()[0]), (self.group1()[1] * other.group1()[0])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for DipoleAligningOrigin {
    type Output = MultiVector;
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, (self.group1()[3] * other.group0()[0] * -1.0)]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group1()[3] * other.group0()[1] * -1.0),
                (self.group1()[3] * other.group0()[2] * -1.0),
                (self.group1()[3] * other.group0()[3] * -1.0),
            ]),
            // e423, e431, e412
            (swizzle!(self.group0(), 1, 0, 0) * Simd32x3::from([other.group0()[3], other.group0()[3], other.group0()[2]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e235, e315, e125
            (Simd32x3::from([(self.group1()[2] * other.group0()[2]), (self.group1()[2] * other.group0()[1]), (self.group1()[1] * other.group0()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<AntiLine> for DipoleAligningOrigin {
    type Output = Sphere;
    fn wedge(self, other: AntiLine) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            Simd32x3::from([
                ((self.group0()[1] * other.group1()[2]) + (self.group1()[3] * other.group0()[0])),
                (self.group0()[0] * other.group1()[2] * -1.0),
                ((self.group0()[0] * other.group1()[1]) + (self.group1()[3] * other.group0()[2])),
            ]),
            // e1234, e3215
            (-(Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group0()[2], self.group1()[2]]))
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group0()[0], self.group1()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group0()[1], self.group1()[1]]))),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for DipoleAligningOrigin {
    type Output = Sphere;
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from(self.group1()[3]) * other.group0()),
            // e1234, e3215
            (-(Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group0()[2], self.group1()[2]]))
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group0()[0], self.group1()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group0()[1], self.group1()[1]]))),
        );
    }
}
impl Wedge<AntiMotor> for DipoleAligningOrigin {
    type Output = MultiVector;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
            // e15, e25, e35
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) + (self.group1()[3] * other.group0()[0])),
                (self.group0()[0] * other.group1()[2] * -1.0),
                ((self.group0()[0] * other.group1()[1]) + (self.group1()[3] * other.group0()[2])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e3215
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for DipoleAligningOrigin {
    type Output = MultiVector;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
            // e15, e25, e35
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e3215
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiPlane> for DipoleAligningOrigin {
    type Output = CircleAligningOrigin;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (swizzle!(self.group0(), 1, 0, 0) * Simd32x3::from([other.group0()[2], other.group0()[2], other.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e415, e425, e435
            (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from([(self.group1()[2] * other.group0()[1]), (self.group1()[2] * other.group0()[0]), (self.group1()[1] * other.group0()[0])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for DipoleAligningOrigin {
    type Output = CircleAligningOrigin;
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (swizzle!(self.group0(), 1, 0, 0) * swizzle!(other.group0(), 2, 2, 1) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e415, e425, e435
            (Simd32x3::from(self.group1()[3]) * other.group0() * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([self.group1()[2], self.group1()[2], self.group1()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for DipoleAligningOrigin {
    type Output = CircleAligningOrigin;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (swizzle!(self.group0(), 1, 0, 0) * Simd32x3::from([other.group0()[2], other.group0()[2], other.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e415, e425, e435
            (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from([(self.group1()[2] * other.group0()[1]), (self.group1()[2] * other.group0()[0]), (self.group1()[1] * other.group0()[0])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<Circle> for DipoleAligningOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: Circle) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[3] * other.group0()[3])
                - (self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<CircleAligningOrigin> for DipoleAligningOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<CircleAtInfinity> for DipoleAligningOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[3] * other.group0()[0]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleAtOrigin> for DipoleAligningOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleOnOrigin> for DipoleAligningOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for DipoleAligningOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[3] * other.group0()[3])
                - (self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<Dipole> for DipoleAligningOrigin {
    type Output = Sphere;
    fn wedge(self, other: Dipole) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            Simd32x3::from([
                ((self.group1()[3] * other.group1()[0]) + (self.group0()[1] * other.group2()[2]) + (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group2()[2]) - (self.group1()[2] * other.group0()[0])),
                ((self.group1()[3] * other.group1()[2]) + (self.group0()[0] * other.group2()[1]) + (self.group1()[1] * other.group0()[0])),
            ]),
            // e1234, e3215
            (-(Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group0()[2], self.group1()[2]]))
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group0()[0], self.group1()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group0()[1], self.group1()[1]]))),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for DipoleAligningOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            ((self.group0()[1] * other.group1()[2]) + (self.group1()[2] * other.group0()[1])),
            (-(self.group0()[0] * other.group1()[2]) - (self.group1()[2] * other.group0()[0])),
            ((self.group0()[0] * other.group1()[1]) + (self.group1()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<DipoleAtInfinity> for DipoleAligningOrigin {
    type Output = Sphere;
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            Simd32x3::from([
                ((self.group0()[1] * other.group1()[2]) + (self.group1()[3] * other.group0()[0])),
                (self.group0()[0] * other.group1()[2] * -1.0),
                ((self.group0()[0] * other.group1()[1]) + (self.group1()[3] * other.group0()[2])),
            ]),
            // e1234, e3215
            (-(Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group0()[2], self.group1()[2]]))
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group0()[0], self.group1()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group0()[1], self.group1()[1]]))),
        );
    }
}
impl Wedge<DipoleAtOrigin> for DipoleAligningOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            ((self.group0()[1] * other.group1()[2]) + (self.group1()[2] * other.group0()[1])),
            (-(self.group0()[0] * other.group1()[2]) - (self.group1()[2] * other.group0()[0])),
            ((self.group0()[0] * other.group1()[1]) + (self.group1()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<DipoleOnOrigin> for DipoleAligningOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from([(self.group1()[2] * other.group0()[1]), (self.group1()[2] * other.group0()[0]), (self.group1()[1] * other.group0()[0])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for DipoleAligningOrigin {
    type Output = Sphere;
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            Simd32x3::from([
                ((self.group1()[3] * other.group1()[0]) + (self.group0()[1] * other.group2()[2]) + (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group2()[2]) - (self.group1()[2] * other.group0()[0])),
                ((self.group1()[3] * other.group1()[2]) + (self.group0()[0] * other.group2()[1]) + (self.group1()[1] * other.group0()[0])),
            ]),
            // e1234, e3215
            (-(Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group0()[2], self.group1()[2]]))
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group0()[0], self.group1()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group0()[1], self.group1()[1]]))),
        );
    }
}
impl Wedge<DualNum> for DipoleAligningOrigin {
    type Output = DipoleAligningOrigin;
    fn wedge(self, other: DualNum) -> Self::Output {
        return DipoleAligningOrigin::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other.group0()[0])),
            // e15, e25, e35, e45
            (self.group1() * Simd32x4::from(other.group0()[0])),
        );
    }
}
impl Wedge<FlatPoint> for DipoleAligningOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (swizzle!(self.group0(), 1, 0, 0) * Simd32x3::from([other.group0()[2], other.group0()[2], other.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for DipoleAligningOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (swizzle!(self.group0(), 1, 0, 0) * swizzle!(other.group0(), 2, 2, 1) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<Flector> for DipoleAligningOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: Flector) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (swizzle!(self.group0(), 1, 0, 0) * Simd32x3::from([other.group0()[2], other.group0()[2], other.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<FlectorAtInfinity> for DipoleAligningOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (swizzle!(self.group0(), 1, 0, 0) * Simd32x3::from([other.group0()[2], other.group0()[2], other.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<Infinity> for DipoleAligningOrigin {
    type Output = LineOnOrigin;
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (self.group0() * Simd32x3::from(other[e5])));
    }
}
impl Wedge<Line> for DipoleAligningOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: Line) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<LineAtInfinity> for DipoleAligningOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Motor> for DipoleAligningOrigin {
    type Output = MotorOnOrigin;
    fn wedge(self, other: Motor) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group1()[3]),
            (self.group0()[1] * other.group1()[3]),
            (self.group0()[2] * other.group1()[3]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<MotorAtInfinity> for DipoleAligningOrigin {
    type Output = MotorOnOrigin;
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<MultiVector> for DipoleAligningOrigin {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group1()[3] * other.group6()[0])
                    - (self.group1()[2] * other.group7()[2])
                    - (self.group1()[1] * other.group7()[1])
                    - (self.group1()[0] * other.group7()[0])
                    - (self.group0()[2] * other.group8()[2])
                    - (self.group0()[0] * other.group8()[0])
                    - (self.group0()[1] * other.group8()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
            // e15, e25, e35
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group1()[3] * other.group1()[0] * -1.0),
                (self.group1()[3] * other.group1()[1] * -1.0),
                (self.group1()[3] * other.group1()[2] * -1.0),
            ]),
            // e423, e431, e412
            (swizzle!(self.group0(), 1, 0, 0) * Simd32x3::from([other.group1()[2], other.group1()[2], other.group1()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e235, e315, e125
            (Simd32x3::from([(self.group1()[2] * other.group1()[1]), (self.group1()[2] * other.group1()[0]), (self.group1()[1] * other.group1()[0])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                ((self.group1()[3] * other.group5()[0]) + (self.group0()[1] * other.group4()[2]) + (self.group1()[2] * other.group3()[1])),
                (-(self.group0()[0] * other.group4()[2]) - (self.group1()[2] * other.group3()[0])),
                ((self.group1()[3] * other.group5()[2]) + (self.group0()[0] * other.group4()[1]) + (self.group1()[1] * other.group3()[0])),
                (-(self.group0()[2] * other.group5()[2]) - (self.group0()[0] * other.group5()[0]) - (self.group0()[1] * other.group5()[1])),
            ]),
            // e3215
            (-(self.group1()[2] * other.group5()[2]) - (self.group1()[0] * other.group5()[0]) - (self.group1()[1] * other.group5()[1])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for DipoleAligningOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for DipoleAligningOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([self.group1()[2], self.group1()[2], self.group1()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<Origin> for DipoleAligningOrigin {
    type Output = LineOnOrigin;
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(
            // e415, e425, e435
            (Simd32x3::from(other[e4]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])),
        );
    }
}
impl Wedge<RoundPoint> for DipoleAligningOrigin {
    type Output = CircleAligningOrigin;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (swizzle!(self.group0(), 1, 0, 0) * swizzle!(other.group0(), 2, 2, 1) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e415, e425, e435
            (Simd32x3::from(self.group1()[3]) * other.group0() * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([self.group1()[2], self.group1()[2], self.group1()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for DipoleAligningOrigin {
    type Output = LineOnOrigin;
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return LineOnOrigin::from_groups(
            // e415, e425, e435
            ((self.group0() * Simd32x3::from(other.group0()[1])) + (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))),
        );
    }
}
impl Wedge<Scalar> for DipoleAligningOrigin {
    type Output = DipoleAligningOrigin;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return DipoleAligningOrigin::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other[scalar])),
            // e15, e25, e35, e45
            (self.group1() * Simd32x4::from(other[scalar])),
        );
    }
}
impl InfixWedge for DipoleAtInfinity {}
impl Wedge<AntiCircleOnOrigin> for DipoleAtInfinity {
    type Output = Sphere;
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            Simd32x3::from([
                ((self.group1()[2] * other.group0()[1]) + (self.group1()[3] * other.group1()[0])),
                (self.group1()[2] * other.group0()[0] * -1.0),
                ((self.group1()[1] * other.group0()[0]) + (self.group1()[3] * other.group1()[2])),
            ]),
            // e1234, e3215
            Simd32x2::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for DipoleAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[3] * other.group0()[3]) - (self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlatOrigin> for DipoleAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group1()[3] * other[e321] * -1.0));
    }
}
impl Wedge<AntiFlatPoint> for DipoleAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group1()[3] * other.group0()[3] * -1.0));
    }
}
impl Wedge<AntiFlector> for DipoleAtInfinity {
    type Output = MultiVector;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, (self.group1()[3] * other.group0()[3] * -1.0)]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                (self.group1()[3] * other.group1()[0] * -1.0),
                (self.group1()[3] * other.group1()[1] * -1.0),
                (self.group1()[3] * other.group1()[2] * -1.0),
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group1()[2] * other.group1()[1])),
                (self.group1()[2] * other.group1()[0] * -1.0),
                ((self.group0()[2] * other.group1()[3]) + (self.group1()[1] * other.group1()[0])),
            ]),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for DipoleAtInfinity {
    type Output = MultiVector;
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, (self.group1()[3] * other.group0()[0] * -1.0)]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
                (self.group1()[3] * other.group0()[1] * -1.0),
                (self.group1()[3] * other.group0()[2] * -1.0),
                (self.group1()[3] * other.group0()[3] * -1.0),
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (Simd32x3::from([(self.group1()[2] * other.group0()[2]), (self.group1()[2] * other.group0()[1]), (self.group1()[1] * other.group0()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<AntiLine> for DipoleAtInfinity {
    type Output = Plane;
    fn wedge(self, other: AntiLine) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group1()[3] * other.group0()[0]),
            (self.group1()[3] * other.group0()[1]),
            (self.group1()[3] * other.group0()[2]),
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<AntiLineOnOrigin> for DipoleAtInfinity {
    type Output = Plane;
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group1()[3] * other.group0()[0]),
            (self.group1()[3] * other.group0()[1]),
            (self.group1()[3] * other.group0()[2]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiMotor> for DipoleAtInfinity {
    type Output = MultiVector;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group1()[3] * other.group0()[3])]),
            // e15, e25, e35
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])),
            // e23, e31, e12
            (self.group0() * Simd32x3::from(other.group0()[3])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                0.0,
            ]),
            // e3215
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for DipoleAtInfinity {
    type Output = MultiVector;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group1()[3] * other.group0()[3])]),
            // e15, e25, e35
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])),
            // e23, e31, e12
            (self.group0() * Simd32x3::from(other.group0()[3])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                0.0,
            ]),
            // e3215
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiPlane> for DipoleAtInfinity {
    type Output = CircleAtInfinity;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return CircleAtInfinity::from_groups(
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                (self.group1()[3] * other.group0()[0] * -1.0),
                (self.group1()[3] * other.group0()[1] * -1.0),
                (self.group1()[3] * other.group0()[2] * -1.0),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group0()[0] * other.group0()[3]) + (self.group1()[2] * other.group0()[1])),
                (self.group1()[2] * other.group0()[0] * -1.0),
                ((self.group0()[2] * other.group0()[3]) + (self.group1()[1] * other.group0()[0])),
            ]),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for DipoleAtInfinity {
    type Output = CircleAtInfinity;
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return CircleAtInfinity::from_groups(
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                (self.group1()[3] * other.group0()[0] * -1.0),
                (self.group1()[3] * other.group0()[1] * -1.0),
                (self.group1()[3] * other.group0()[2] * -1.0),
            ]),
            // e235, e315, e125
            (swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([self.group1()[2], self.group1()[2], self.group1()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for DipoleAtInfinity {
    type Output = Circle;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412, e321
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435
            (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from([(self.group1()[2] * other.group0()[1]), (self.group1()[2] * other.group0()[0]), (self.group1()[1] * other.group0()[0])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<Circle> for DipoleAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: Circle) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[3] * other.group0()[3])
                - (self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleAligningOrigin> for DipoleAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleAtInfinity> for DipoleAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[3] * other.group0()[0]) - (self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
        );
    }
}
impl Wedge<CircleAtOrigin> for DipoleAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleOnOrigin> for DipoleAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for DipoleAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[3] * other.group0()[3]) - (self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Dipole> for DipoleAtInfinity {
    type Output = Sphere;
    fn wedge(self, other: Dipole) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            Simd32x3::from([
                ((self.group1()[3] * other.group1()[0]) + (self.group0()[0] * other.group2()[3]) + (self.group1()[2] * other.group0()[1])),
                (self.group1()[2] * other.group0()[0] * -1.0),
                ((self.group1()[3] * other.group1()[2]) + (self.group0()[2] * other.group2()[3]) + (self.group1()[1] * other.group0()[0])),
            ]),
            // e1234, e3215
            (-(Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]]))
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]]))
                + Simd32x2::from([
                    0.0,
                    (-(self.group1()[2] * other.group1()[2]) - (self.group1()[1] * other.group1()[1]) - (self.group1()[0] * other.group1()[0])),
                ])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for DipoleAtInfinity {
    type Output = Sphere;
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            Simd32x3::from([
                ((self.group0()[0] * other.group1()[3]) + (self.group1()[2] * other.group0()[1])),
                (self.group1()[2] * other.group0()[0] * -1.0),
                ((self.group0()[2] * other.group1()[3]) + (self.group1()[1] * other.group0()[0])),
            ]),
            // e1234, e3215
            (-(Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]))
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]]))),
        );
    }
}
impl Wedge<DipoleAtInfinity> for DipoleAtInfinity {
    type Output = Plane;
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            ((self.group0()[0] * other.group1()[3]) + (self.group1()[3] * other.group0()[0])),
            ((self.group0()[1] * other.group1()[3]) + (self.group1()[3] * other.group0()[1])),
            ((self.group0()[2] * other.group1()[3]) + (self.group1()[3] * other.group0()[2])),
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<DipoleAtOrigin> for DipoleAtInfinity {
    type Output = Sphere;
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([self.group1()[2], self.group1()[2], self.group1()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e1234, e3215
            (-(Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]))
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]]))),
        );
    }
}
impl Wedge<DipoleOnOrigin> for DipoleAtInfinity {
    type Output = SphereOnOrigin;
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            ((self.group0()[0] * other.group0()[3]) + (self.group1()[2] * other.group0()[1])),
            (self.group1()[2] * other.group0()[0] * -1.0),
            ((self.group0()[2] * other.group0()[3]) + (self.group1()[1] * other.group0()[0])),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<DipoleOrthogonalOrigin> for DipoleAtInfinity {
    type Output = Sphere;
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            Simd32x3::from([
                ((self.group1()[2] * other.group0()[1]) + (self.group1()[3] * other.group1()[0])),
                (self.group1()[2] * other.group0()[0] * -1.0),
                ((self.group1()[1] * other.group0()[0]) + (self.group1()[3] * other.group1()[2])),
            ]),
            // e1234, e3215
            (-(Simd32x2::from(self.group0()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]]))
                - (Simd32x2::from(self.group0()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]]))
                - (Simd32x2::from(self.group0()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]]))
                + Simd32x2::from([
                    0.0,
                    (-(self.group1()[2] * other.group1()[2]) - (self.group1()[1] * other.group1()[1]) - (self.group1()[0] * other.group1()[0])),
                ])),
        );
    }
}
impl Wedge<DualNum> for DipoleAtInfinity {
    type Output = DipoleAtInfinity;
    fn wedge(self, other: DualNum) -> Self::Output {
        return DipoleAtInfinity::from_groups(
            // e23, e31, e12
            (self.group0() * Simd32x3::from(other.group0()[0])),
            // e15, e25, e35, e45
            (self.group1() * Simd32x4::from(other.group0()[0])),
        );
    }
}
impl Wedge<FlatOrigin> for DipoleAtInfinity {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other[e45])));
    }
}
impl Wedge<FlatPoint> for DipoleAtInfinity {
    type Output = Plane;
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<FlatPointAtInfinity> for DipoleAtInfinity {
    type Output = Horizon;
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Flector> for DipoleAtInfinity {
    type Output = Plane;
    fn wedge(self, other: Flector) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<FlectorAtInfinity> for DipoleAtInfinity {
    type Output = Horizon;
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<FlectorOnOrigin> for DipoleAtInfinity {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group0()[0])));
    }
}
impl Wedge<Infinity> for DipoleAtInfinity {
    type Output = LineAtInfinity;
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ (self.group0() * Simd32x3::from(other[e5])));
    }
}
impl Wedge<Line> for DipoleAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: Line) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<LineOnOrigin> for DipoleAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: LineOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Motor> for DipoleAtInfinity {
    type Output = Motor;
    fn wedge(self, other: Motor) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<MotorAtInfinity> for DipoleAtInfinity {
    type Output = LineAtInfinity;
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ (self.group0() * Simd32x3::from(other.group0()[3])));
    }
}
impl Wedge<MotorOnOrigin> for DipoleAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: MotorOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<MultiVector> for DipoleAtInfinity {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group1()[3] * other.group6()[0])
                    - (self.group1()[2] * other.group7()[2])
                    - (self.group1()[1] * other.group7()[1])
                    - (self.group1()[0] * other.group7()[0])
                    - (self.group0()[2] * other.group6()[3])
                    - (self.group0()[0] * other.group6()[1])
                    - (self.group0()[1] * other.group6()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group1()[3] * other.group0()[0])]),
            // e15, e25, e35
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])),
            // e23, e31, e12
            (self.group0() * Simd32x3::from(other.group0()[0])),
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
                (self.group1()[3] * other.group1()[0] * -1.0),
                (self.group1()[3] * other.group1()[1] * -1.0),
                (self.group1()[3] * other.group1()[2] * -1.0),
            ]),
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group1()[3])),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group0()[0] * other[e1]) + (self.group1()[2] * other.group1()[1])),
                (self.group1()[2] * other.group1()[0] * -1.0),
                ((self.group0()[2] * other[e1]) + (self.group1()[1] * other.group1()[0])),
            ]),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                ((self.group1()[3] * other.group5()[0]) + (self.group0()[0] * other.group3()[3]) + (self.group1()[2] * other.group3()[1])),
                (self.group1()[2] * other.group3()[0] * -1.0),
                ((self.group1()[3] * other.group5()[2]) + (self.group0()[2] * other.group3()[3]) + (self.group1()[1] * other.group3()[0])),
                (-(self.group0()[2] * other.group3()[2]) - (self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1])),
            ]),
            // e3215
            (-(self.group1()[2] * other.group5()[2])
                - (self.group1()[1] * other.group5()[1])
                - (self.group1()[0] * other.group5()[0])
                - (self.group0()[2] * other.group4()[2])
                - (self.group0()[0] * other.group4()[0])
                - (self.group0()[1] * other.group4()[1])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for DipoleAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for DipoleAtInfinity {
    type Output = SphereOnOrigin;
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (self.group1()[2] * other.group0()[1]),
            (self.group1()[2] * other.group0()[0] * -1.0),
            (self.group1()[1] * other.group0()[0]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Origin> for DipoleAtInfinity {
    type Output = CircleOnOrigin;
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other[e4])),
            // e415, e425, e435
            (Simd32x3::from(other[e4]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])),
        );
    }
}
impl Wedge<RoundPoint> for DipoleAtInfinity {
    type Output = Circle;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412, e321
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[1] * other.group1()[0]),
                (self.group0()[2] * other.group1()[0]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435
            (Simd32x3::from(self.group1()[3]) * other.group0() * Simd32x3::from(-1.0)),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group0()[0] * other.group1()[1]) + (self.group1()[2] * other.group0()[1])),
                (self.group1()[2] * other.group0()[0] * -1.0),
                ((self.group0()[2] * other.group1()[1]) + (self.group1()[1] * other.group0()[0])),
            ]),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for DipoleAtInfinity {
    type Output = CircleAligningOrigin;
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group0()[0])),
            // e415, e425, e435
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])),
            // e235, e315, e125
            (self.group0() * Simd32x3::from(other.group0()[1])),
        );
    }
}
impl Wedge<Scalar> for DipoleAtInfinity {
    type Output = DipoleAtInfinity;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return DipoleAtInfinity::from_groups(
            // e23, e31, e12
            (self.group0() * Simd32x3::from(other[scalar])),
            // e15, e25, e35, e45
            (self.group1() * Simd32x4::from(other[scalar])),
        );
    }
}
impl InfixWedge for DipoleAtOrigin {}
impl Wedge<AntiCircleOnOrigin> for DipoleAtOrigin {
    type Output = Sphere;
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (swizzle!(self.group1(), 2, 2, 1) * swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e1234, e3215
            (-(Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group0()[2], self.group1()[2]]))
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group0()[0], self.group1()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group0()[1], self.group1()[1]]))),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for DipoleAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlatPoint> for DipoleAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlector> for DipoleAtOrigin {
    type Output = MultiVector;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
            ]),
            // e423, e431, e412
            (swizzle!(self.group0(), 1, 0, 0) * Simd32x3::from([other.group1()[2], other.group1()[2], other.group1()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e235, e315, e125
            (swizzle!(self.group1(), 2, 2, 1) * Simd32x3::from([other.group1()[1], other.group1()[0], other.group1()[0]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for DipoleAtOrigin {
    type Output = CircleAtOrigin;
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return CircleAtOrigin::from_groups(
            // e423, e431, e412
            (swizzle!(self.group0(), 1, 0, 0) * Simd32x3::from([other.group0()[3], other.group0()[3], other.group0()[2]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e235, e315, e125
            (swizzle!(self.group1(), 2, 2, 1) * Simd32x3::from([other.group0()[2], other.group0()[1], other.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<AntiLine> for DipoleAtOrigin {
    type Output = Sphere;
    fn wedge(self, other: AntiLine) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (swizzle!(self.group0(), 1, 0, 0) * swizzle!(other.group1(), 2, 2, 1) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e1234, e3215
            (-(Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group0()[2], self.group1()[2]]))
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group0()[0], self.group1()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group0()[1], self.group1()[1]]))),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for DipoleAtOrigin {
    type Output = SphereAtOrigin;
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return SphereAtOrigin::from_groups(
            // e1234, e3215
            (-(Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group0()[2], self.group1()[2]]))
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group0()[0], self.group1()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group0()[1], self.group1()[1]]))),
        );
    }
}
impl Wedge<AntiMotor> for DipoleAtOrigin {
    type Output = MultiVector;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e15, e25, e35
            (self.group1() * Simd32x3::from(other.group0()[3])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group1()[2]),
                (self.group0()[0] * other.group1()[2] * -1.0),
                (self.group0()[0] * other.group1()[1]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e3215
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for DipoleAtOrigin {
    type Output = MultiVector;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e15, e25, e35
            (self.group1() * Simd32x3::from(other.group0()[3])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e3215
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiPlane> for DipoleAtOrigin {
    type Output = CircleAligningOrigin;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (swizzle!(self.group0(), 1, 0, 0) * Simd32x3::from([other.group0()[2], other.group0()[2], other.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e415, e425, e435
            (self.group0() * Simd32x3::from(other.group0()[3])),
            // e235, e315, e125
            (swizzle!(self.group1(), 2, 2, 1) * Simd32x3::from([other.group0()[1], other.group0()[0], other.group0()[0]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for DipoleAtOrigin {
    type Output = CircleAtOrigin;
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return CircleAtOrigin::from_groups(
            // e423, e431, e412
            (swizzle!(self.group0(), 1, 0, 0) * swizzle!(other.group0(), 2, 2, 1) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e235, e315, e125
            (swizzle!(self.group1(), 2, 2, 1) * swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for DipoleAtOrigin {
    type Output = CircleAligningOrigin;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (swizzle!(self.group0(), 1, 0, 0) * Simd32x3::from([other.group0()[2], other.group0()[2], other.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e415, e425, e435
            (self.group1() * Simd32x3::from(other.group0()[3])),
            // e235, e315, e125
            (swizzle!(self.group1(), 2, 2, 1) * Simd32x3::from([other.group0()[1], other.group0()[0], other.group0()[0]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<Circle> for DipoleAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: Circle) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<CircleAligningOrigin> for DipoleAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<CircleAtInfinity> for DipoleAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleAtOrigin> for DipoleAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleOnOrigin> for DipoleAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for DipoleAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<Dipole> for DipoleAtOrigin {
    type Output = Sphere;
    fn wedge(self, other: Dipole) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            Simd32x3::from([
                ((self.group0()[1] * other.group2()[2]) + (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group2()[2]) - (self.group1()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group1()[1] * other.group0()[0])),
            ]),
            // e1234, e3215
            (-(Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group0()[2], self.group1()[2]]))
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group0()[0], self.group1()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group0()[1], self.group1()[1]]))),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for DipoleAtOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            ((self.group0()[1] * other.group1()[2]) + (self.group1()[2] * other.group0()[1])),
            (-(self.group0()[0] * other.group1()[2]) - (self.group1()[2] * other.group0()[0])),
            ((self.group0()[0] * other.group1()[1]) + (self.group1()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<DipoleAtInfinity> for DipoleAtOrigin {
    type Output = Sphere;
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (swizzle!(self.group0(), 1, 0, 0) * Simd32x3::from([other.group1()[2], other.group1()[2], other.group1()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e1234, e3215
            (-(Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group0()[2], self.group1()[2]]))
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group0()[0], self.group1()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group0()[1], self.group1()[1]]))),
        );
    }
}
impl Wedge<DipoleAtOrigin> for DipoleAtOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ Simd32x3::from([
            ((self.group0()[1] * other.group1()[2]) + (self.group1()[2] * other.group0()[1])),
            (-(self.group0()[0] * other.group1()[2]) - (self.group1()[2] * other.group0()[0])),
            ((self.group0()[0] * other.group1()[1]) + (self.group1()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<DipoleOnOrigin> for DipoleAtOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (swizzle!(self.group1(), 2, 2, 1) * Simd32x3::from([other.group0()[1], other.group0()[0], other.group0()[0]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for DipoleAtOrigin {
    type Output = Sphere;
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            Simd32x3::from([
                ((self.group0()[1] * other.group2()[2]) + (self.group1()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group2()[2]) - (self.group1()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group1()[1] * other.group0()[0])),
            ]),
            // e1234, e3215
            (-(Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group0()[2], self.group1()[2]]))
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group0()[0], self.group1()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group0()[1], self.group1()[1]]))),
        );
    }
}
impl Wedge<DualNum> for DipoleAtOrigin {
    type Output = DipoleAtOrigin;
    fn wedge(self, other: DualNum) -> Self::Output {
        return DipoleAtOrigin::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other.group0()[0])),
            // e15, e25, e35
            (self.group1() * Simd32x3::from(other.group0()[0])),
        );
    }
}
impl Wedge<FlatPoint> for DipoleAtOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (swizzle!(self.group0(), 1, 0, 0) * Simd32x3::from([other.group0()[2], other.group0()[2], other.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for DipoleAtOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (swizzle!(self.group0(), 1, 0, 0) * swizzle!(other.group0(), 2, 2, 1) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<Flector> for DipoleAtOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: Flector) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (swizzle!(self.group0(), 1, 0, 0) * Simd32x3::from([other.group0()[2], other.group0()[2], other.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<FlectorAtInfinity> for DipoleAtOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (swizzle!(self.group0(), 1, 0, 0) * Simd32x3::from([other.group0()[2], other.group0()[2], other.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<Infinity> for DipoleAtOrigin {
    type Output = LineOnOrigin;
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (self.group0() * Simd32x3::from(other[e5])));
    }
}
impl Wedge<Line> for DipoleAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: Line) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<LineAtInfinity> for DipoleAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Motor> for DipoleAtOrigin {
    type Output = MotorOnOrigin;
    fn wedge(self, other: Motor) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group1()[3]),
            (self.group0()[1] * other.group1()[3]),
            (self.group0()[2] * other.group1()[3]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<MotorAtInfinity> for DipoleAtOrigin {
    type Output = MotorOnOrigin;
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<MultiVector> for DipoleAtOrigin {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group1()[2] * other.group7()[2])
                    - (self.group1()[1] * other.group7()[1])
                    - (self.group1()[0] * other.group7()[0])
                    - (self.group0()[2] * other.group8()[2])
                    - (self.group0()[0] * other.group8()[0])
                    - (self.group0()[1] * other.group8()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                0.0,
            ]),
            // e15, e25, e35
            (self.group1() * Simd32x3::from(other.group0()[0])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                ((self.group0()[0] * other[e1]) + (self.group1()[0] * other.group1()[3])),
                ((self.group0()[1] * other[e1]) + (self.group1()[1] * other.group1()[3])),
                ((self.group0()[2] * other[e1]) + (self.group1()[2] * other.group1()[3])),
            ]),
            // e423, e431, e412
            (swizzle!(self.group0(), 1, 0, 0) * Simd32x3::from([other.group1()[2], other.group1()[2], other.group1()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e235, e315, e125
            (swizzle!(self.group1(), 2, 2, 1) * Simd32x3::from([other.group1()[1], other.group1()[0], other.group1()[0]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group4()[2]) + (self.group1()[2] * other.group3()[1])),
                (-(self.group0()[0] * other.group4()[2]) - (self.group1()[2] * other.group3()[0])),
                ((self.group0()[0] * other.group4()[1]) + (self.group1()[1] * other.group3()[0])),
                (-(self.group0()[2] * other.group5()[2]) - (self.group0()[0] * other.group5()[0]) - (self.group0()[1] * other.group5()[1])),
            ]),
            // e3215
            (-(self.group1()[2] * other.group5()[2]) - (self.group1()[0] * other.group5()[0]) - (self.group1()[1] * other.group5()[1])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for DipoleAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for DipoleAtOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (swizzle!(self.group1(), 2, 2, 1) * swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<Origin> for DipoleAtOrigin {
    type Output = LineOnOrigin;
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (self.group1() * Simd32x3::from(other[e4])));
    }
}
impl Wedge<RoundPoint> for DipoleAtOrigin {
    type Output = CircleAligningOrigin;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (swizzle!(self.group0(), 1, 0, 0) * swizzle!(other.group0(), 2, 2, 1) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e415, e425, e435
            ((self.group0() * Simd32x3::from(other.group1()[1])) + (self.group1() * Simd32x3::from(other.group1()[0]))),
            // e235, e315, e125
            (swizzle!(self.group1(), 2, 2, 1) * swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for DipoleAtOrigin {
    type Output = LineOnOrigin;
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return LineOnOrigin::from_groups(
            // e415, e425, e435
            ((self.group0() * Simd32x3::from(other.group0()[1])) + (self.group1() * Simd32x3::from(other.group0()[0]))),
        );
    }
}
impl Wedge<Scalar> for DipoleAtOrigin {
    type Output = DipoleAtOrigin;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return DipoleAtOrigin::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other[scalar])),
            // e15, e25, e35
            (self.group1() * Simd32x3::from(other[scalar])),
        );
    }
}
impl InfixWedge for DipoleOnOrigin {}
impl Wedge<AntiCircleOnOrigin> for DipoleOnOrigin {
    type Output = SphereOnOrigin;
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (self.group0()[3] * other.group1()[0]),
            (self.group0()[3] * other.group1()[1]),
            (self.group0()[3] * other.group1()[2]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<AntiDipoleOnOrigin> for DipoleOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[3] * -1.0));
    }
}
impl Wedge<AntiFlatOrigin> for DipoleOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other[e321] * -1.0));
    }
}
impl Wedge<AntiFlatPoint> for DipoleOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlector> for DipoleOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group0()[3] * other.group0()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group0()[3] * other.group1()[0] * -1.0),
                (self.group0()[3] * other.group1()[1] * -1.0),
                (self.group0()[3] * other.group1()[2] * -1.0),
            ]),
            // e423, e431, e412
            (Simd32x3::from([(self.group0()[1] * other.group1()[2]), (self.group0()[0] * other.group1()[2]), (self.group0()[0] * other.group1()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for DipoleOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, (self.group0()[3] * other.group0()[0] * -1.0)]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                (self.group0()[3] * other.group0()[3] * -1.0),
            ]),
            // e423, e431, e412
            (Simd32x3::from([(self.group0()[1] * other.group0()[3]), (self.group0()[0] * other.group0()[3]), (self.group0()[0] * other.group0()[2])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<AntiLine> for DipoleOnOrigin {
    type Output = SphereOnOrigin;
    fn wedge(self, other: AntiLine) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            ((self.group0()[1] * other.group1()[2]) + (self.group0()[3] * other.group0()[0])),
            (self.group0()[0] * other.group1()[2] * -1.0),
            ((self.group0()[0] * other.group1()[1]) + (self.group0()[3] * other.group0()[2])),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiLineOnOrigin> for DipoleOnOrigin {
    type Output = SphereOnOrigin;
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiMotor> for DipoleOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group1()[2]) + (self.group0()[3] * other.group0()[0])),
                (self.group0()[0] * other.group1()[2] * -1.0),
                ((self.group0()[0] * other.group1()[1]) + (self.group0()[3] * other.group0()[2])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for DipoleOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<AntiPlane> for DipoleOnOrigin {
    type Output = CircleOnOrigin;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from([(self.group0()[1] * other.group0()[2]), (self.group0()[0] * other.group0()[2]), (self.group0()[0] * other.group0()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e415, e425, e435
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for DipoleOnOrigin {
    type Output = CircleOnOrigin;
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            (swizzle!(other.group0(), 2, 2, 1) * Simd32x3::from([self.group0()[1], self.group0()[0], self.group0()[0]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e415, e425, e435
            (Simd32x3::from(self.group0()[3]) * other.group0() * Simd32x3::from(-1.0)),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for DipoleOnOrigin {
    type Output = CircleOnOrigin;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from([(self.group0()[1] * other.group0()[2]), (self.group0()[0] * other.group0()[2]), (self.group0()[0] * other.group0()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e415, e425, e435
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
        );
    }
}
impl Wedge<Circle> for DipoleOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: Circle) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<CircleAligningOrigin> for DipoleOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<CircleAtInfinity> for DipoleOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group0()[0]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleAtOrigin> for DipoleOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for DipoleOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<Dipole> for DipoleOnOrigin {
    type Output = SphereOnOrigin;
    fn wedge(self, other: Dipole) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            ((self.group0()[1] * other.group2()[2]) + (self.group0()[3] * other.group1()[0])),
            (self.group0()[0] * other.group2()[2] * -1.0),
            ((self.group0()[0] * other.group2()[1]) + (self.group0()[3] * other.group1()[2])),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<DipoleAligningOrigin> for DipoleOnOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from([(self.group0()[1] * other.group1()[2]), (self.group0()[0] * other.group1()[2]), (self.group0()[0] * other.group1()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for DipoleOnOrigin {
    type Output = SphereOnOrigin;
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            ((self.group0()[1] * other.group1()[2]) + (self.group0()[3] * other.group0()[0])),
            (self.group0()[0] * other.group1()[2] * -1.0),
            ((self.group0()[0] * other.group1()[1]) + (self.group0()[3] * other.group0()[2])),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<DipoleAtOrigin> for DipoleOnOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (swizzle!(other.group1(), 2, 2, 1) * Simd32x3::from([self.group0()[1], self.group0()[0], self.group0()[0]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for DipoleOnOrigin {
    type Output = SphereOnOrigin;
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            ((self.group0()[1] * other.group2()[2]) + (self.group0()[3] * other.group1()[0])),
            (self.group0()[0] * other.group2()[2] * -1.0),
            ((self.group0()[0] * other.group2()[1]) + (self.group0()[3] * other.group1()[2])),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<DualNum> for DipoleOnOrigin {
    type Output = DipoleOnOrigin;
    fn wedge(self, other: DualNum) -> Self::Output {
        return DipoleOnOrigin::from_groups(/* e41, e42, e43, e45 */ (self.group0() * Simd32x4::from(other.group0()[0])));
    }
}
impl Wedge<FlatPoint> for DipoleOnOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from([(self.group0()[1] * other.group0()[2]), (self.group0()[0] * other.group0()[2]), (self.group0()[0] * other.group0()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for DipoleOnOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (swizzle!(other.group0(), 2, 2, 1) * Simd32x3::from([self.group0()[1], self.group0()[0], self.group0()[0]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<Flector> for DipoleOnOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: Flector) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from([(self.group0()[1] * other.group0()[2]), (self.group0()[0] * other.group0()[2]), (self.group0()[0] * other.group0()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<FlectorAtInfinity> for DipoleOnOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from([(self.group0()[1] * other.group0()[2]), (self.group0()[0] * other.group0()[2]), (self.group0()[0] * other.group0()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<Infinity> for DipoleOnOrigin {
    type Output = LineOnOrigin;
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(
            // e415, e425, e435
            (Simd32x3::from(other[e5]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
        );
    }
}
impl Wedge<Line> for DipoleOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: Line) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<LineAtInfinity> for DipoleOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Motor> for DipoleOnOrigin {
    type Output = MotorOnOrigin;
    fn wedge(self, other: Motor) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group1()[3]),
            (self.group0()[1] * other.group1()[3]),
            (self.group0()[2] * other.group1()[3]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<MotorAtInfinity> for DipoleOnOrigin {
    type Output = MotorOnOrigin;
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<MultiVector> for DipoleOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group0()[3] * other.group6()[0])
                    - (self.group0()[2] * other.group8()[2])
                    - (self.group0()[0] * other.group8()[0])
                    - (self.group0()[1] * other.group8()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            (self.group0() * Simd32x4::from(other.group0()[0])),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group0()[3] * other.group1()[0] * -1.0),
                (self.group0()[3] * other.group1()[1] * -1.0),
                (self.group0()[3] * other.group1()[2] * -1.0),
            ]),
            // e423, e431, e412
            (Simd32x3::from([(self.group0()[1] * other.group1()[2]), (self.group0()[0] * other.group1()[2]), (self.group0()[0] * other.group1()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                ((self.group0()[1] * other.group4()[2]) + (self.group0()[3] * other.group5()[0])),
                (self.group0()[0] * other.group4()[2] * -1.0),
                ((self.group0()[0] * other.group4()[1]) + (self.group0()[3] * other.group5()[2])),
                (-(self.group0()[2] * other.group5()[2]) - (self.group0()[0] * other.group5()[0]) - (self.group0()[1] * other.group5()[1])),
            ]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<RoundPoint> for DipoleOnOrigin {
    type Output = CircleOnOrigin;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            (swizzle!(other.group0(), 2, 2, 1) * Simd32x3::from([self.group0()[1], self.group0()[0], self.group0()[0]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e415, e425, e435
            (Simd32x3::from(self.group0()[3]) * other.group0() * Simd32x3::from(-1.0)),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for DipoleOnOrigin {
    type Output = LineOnOrigin;
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return LineOnOrigin::from_groups(
            // e415, e425, e435
            (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
        );
    }
}
impl Wedge<Scalar> for DipoleOnOrigin {
    type Output = DipoleOnOrigin;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return DipoleOnOrigin::from_groups(/* e41, e42, e43, e45 */ (self.group0() * Simd32x4::from(other[scalar])));
    }
}
impl InfixWedge for DipoleOrthogonalOrigin {}
impl Wedge<AntiCircleOnOrigin> for DipoleOrthogonalOrigin {
    type Output = Sphere;
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (swizzle!(self.group2(), 2, 2, 1) * swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e1234, e3215
            (-(Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group0()[2], self.group2()[2]]))
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group0()[0], self.group2()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group0()[1], self.group2()[1]]))
                + Simd32x2::from([
                    (-(self.group1()[2] * other.group0()[2]) - (self.group1()[1] * other.group0()[1]) - (self.group1()[0] * other.group0()[0])),
                    0.0,
                ])),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlatPoint> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlector> for DipoleOrthogonalOrigin {
    type Output = MultiVector;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
            ]),
            // e423, e431, e412
            (swizzle!(self.group0(), 1, 0, 0) * Simd32x3::from([other.group1()[2], other.group1()[2], other.group1()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group1()[0] * other.group1()[3]) + (self.group2()[2] * other.group1()[1])),
                (self.group2()[2] * other.group1()[0] * -1.0),
                ((self.group1()[2] * other.group1()[3]) + (self.group2()[1] * other.group1()[0])),
            ]),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for DipoleOrthogonalOrigin {
    type Output = CircleOrthogonalOrigin;
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return CircleOrthogonalOrigin::from_groups(
            // e423, e431, e412, e321
            Simd32x4::from([
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[0] * other.group0()[2]),
                (-(self.group1()[2] * other.group0()[3]) - (self.group1()[0] * other.group0()[1]) - (self.group1()[1] * other.group0()[2])),
            ]),
            // e235, e315, e125
            (swizzle!(self.group2(), 2, 2, 1) * Simd32x3::from([other.group0()[2], other.group0()[1], other.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<AntiLine> for DipoleOrthogonalOrigin {
    type Output = Sphere;
    fn wedge(self, other: AntiLine) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (swizzle!(self.group0(), 1, 0, 0) * swizzle!(other.group1(), 2, 2, 1) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e1234, e3215
            (-(Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group0()[2], self.group2()[2]]))
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group0()[0], self.group2()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group0()[1], self.group2()[1]]))
                + Simd32x2::from([
                    0.0,
                    (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for DipoleOrthogonalOrigin {
    type Output = SphereAtOrigin;
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return SphereAtOrigin::from_groups(
            // e1234, e3215
            (-(Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group0()[2], self.group2()[2]]))
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group0()[0], self.group2()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group0()[1], self.group2()[1]]))),
        );
    }
}
impl Wedge<AntiMotor> for DipoleOrthogonalOrigin {
    type Output = MultiVector;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e15, e25, e35
            (self.group2() * Simd32x3::from(other.group0()[3])),
            // e23, e31, e12
            (self.group1() * Simd32x3::from(other.group0()[3])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group1()[2]),
                (self.group0()[0] * other.group1()[2] * -1.0),
                (self.group0()[0] * other.group1()[1]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e3215
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group1()[2] * other.group1()[2])
                - (self.group1()[0] * other.group1()[0])
                - (self.group1()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for DipoleOrthogonalOrigin {
    type Output = MultiVector;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e15, e25, e35
            (self.group2() * Simd32x3::from(other.group0()[3])),
            // e23, e31, e12
            (self.group1() * Simd32x3::from(other.group0()[3])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e3215
            (-(self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiPlane> for DipoleOrthogonalOrigin {
    type Output = Circle;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412, e321
            Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[0] * other.group0()[2] * -1.0),
                (self.group0()[0] * other.group0()[1]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435
            (self.group0() * Simd32x3::from(other.group0()[3])),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group2()[2] * other.group0()[1])),
                (self.group2()[2] * other.group0()[0] * -1.0),
                ((self.group1()[2] * other.group0()[3]) + (self.group2()[1] * other.group0()[0])),
            ]),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for DipoleOrthogonalOrigin {
    type Output = CircleOrthogonalOrigin;
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return CircleOrthogonalOrigin::from_groups(
            // e423, e431, e412, e321
            Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[0] * other.group0()[2] * -1.0),
                (self.group0()[0] * other.group0()[1]),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125
            (swizzle!(self.group2(), 2, 2, 1) * swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for DipoleOrthogonalOrigin {
    type Output = Circle;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) + (self.group1()[0] * other.group0()[3])),
                (self.group0()[0] * other.group0()[2] * -1.0),
                ((self.group0()[0] * other.group0()[1]) + (self.group1()[2] * other.group0()[3])),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435
            (self.group2() * Simd32x3::from(other.group0()[3])),
            // e235, e315, e125
            (swizzle!(self.group2(), 2, 2, 1) * Simd32x3::from([other.group0()[1], other.group0()[0], other.group0()[0]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<Circle> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: Circle) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group1()[2] * other.group1()[2])
                - (self.group1()[1] * other.group1()[1])
                - (self.group1()[0] * other.group1()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<CircleAligningOrigin> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group1()[2] * other.group1()[2])
                - (self.group1()[1] * other.group1()[1])
                - (self.group1()[0] * other.group1()[0])
                - (self.group0()[2] * other.group2()[2])
                - (self.group0()[0] * other.group2()[0])
                - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<CircleAtInfinity> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[3])
                - (self.group1()[1] * other.group0()[2])
                - (self.group1()[0] * other.group0()[1])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleAtOrigin> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleOnOrigin> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group1()[2] * other.group1()[2])
                - (self.group1()[0] * other.group1()[0])
                - (self.group1()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2])
                - (self.group2()[1] * other.group0()[1])
                - (self.group2()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<Dipole> for DipoleOrthogonalOrigin {
    type Output = Sphere;
    fn wedge(self, other: Dipole) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            Simd32x3::from([
                ((self.group2()[2] * other.group0()[1]) + (self.group0()[1] * other.group2()[2]) + (self.group1()[0] * other.group2()[3])),
                (-(self.group0()[0] * other.group2()[2]) - (self.group2()[2] * other.group0()[0])),
                ((self.group2()[1] * other.group0()[0]) + (self.group0()[0] * other.group2()[1]) + (self.group1()[2] * other.group2()[3])),
            ]),
            // e1234, e3215
            (-(Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]]))
                - (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group0()[2], self.group2()[2]]))
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group0()[0], self.group2()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group0()[1], self.group2()[1]]))),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for DipoleOrthogonalOrigin {
    type Output = Sphere;
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            Simd32x3::from([
                ((self.group2()[2] * other.group0()[1]) + (self.group0()[1] * other.group1()[2]) + (self.group1()[0] * other.group1()[3])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group2()[2] * other.group0()[0])),
                ((self.group2()[1] * other.group0()[0]) + (self.group0()[0] * other.group1()[1]) + (self.group1()[2] * other.group1()[3])),
            ]),
            // e1234, e3215
            (-(Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]]))),
        );
    }
}
impl Wedge<DipoleAtInfinity> for DipoleOrthogonalOrigin {
    type Output = Sphere;
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            Simd32x3::from([
                ((self.group0()[1] * other.group1()[2]) + (self.group1()[0] * other.group1()[3])),
                (self.group0()[0] * other.group1()[2] * -1.0),
                ((self.group0()[0] * other.group1()[1]) + (self.group1()[2] * other.group1()[3])),
            ]),
            // e1234, e3215
            (-(Simd32x2::from(other.group0()[2]) * Simd32x2::from([self.group0()[2], self.group2()[2]]))
                - (Simd32x2::from(other.group0()[0]) * Simd32x2::from([self.group0()[0], self.group2()[0]]))
                - (Simd32x2::from(other.group0()[1]) * Simd32x2::from([self.group0()[1], self.group2()[1]]))
                + Simd32x2::from([
                    0.0,
                    (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
                ])),
        );
    }
}
impl Wedge<DipoleAtOrigin> for DipoleOrthogonalOrigin {
    type Output = Sphere;
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            Simd32x3::from([
                ((self.group0()[1] * other.group1()[2]) + (self.group2()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group1()[2]) - (self.group2()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group1()[1]) + (self.group2()[1] * other.group0()[0])),
            ]),
            // e1234, e3215
            (-(Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group1()[2]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group1()[0]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group1()[1]]))),
        );
    }
}
impl Wedge<DipoleOnOrigin> for DipoleOrthogonalOrigin {
    type Output = SphereOnOrigin;
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            ((self.group1()[0] * other.group0()[3]) + (self.group2()[2] * other.group0()[1])),
            (self.group2()[2] * other.group0()[0] * -1.0),
            ((self.group1()[2] * other.group0()[3]) + (self.group2()[1] * other.group0()[0])),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<DipoleOrthogonalOrigin> for DipoleOrthogonalOrigin {
    type Output = Sphere;
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            Simd32x3::from([
                ((self.group0()[1] * other.group2()[2]) + (self.group2()[2] * other.group0()[1])),
                (-(self.group0()[0] * other.group2()[2]) - (self.group2()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group2()[1]) + (self.group2()[1] * other.group0()[0])),
            ]),
            // e1234, e3215
            (-(Simd32x2::from(self.group1()[2]) * Simd32x2::from([other.group0()[2], other.group2()[2]]))
                - (Simd32x2::from(self.group1()[1]) * Simd32x2::from([other.group0()[1], other.group2()[1]]))
                - (Simd32x2::from(self.group1()[0]) * Simd32x2::from([other.group0()[0], other.group2()[0]]))
                - (Simd32x2::from(other.group1()[2]) * Simd32x2::from([self.group0()[2], self.group2()[2]]))
                - (Simd32x2::from(other.group1()[0]) * Simd32x2::from([self.group0()[0], self.group2()[0]]))
                - (Simd32x2::from(other.group1()[1]) * Simd32x2::from([self.group0()[1], self.group2()[1]]))),
        );
    }
}
impl Wedge<DualNum> for DipoleOrthogonalOrigin {
    type Output = DipoleOrthogonalOrigin;
    fn wedge(self, other: DualNum) -> Self::Output {
        return DipoleOrthogonalOrigin::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other.group0()[0])),
            // e23, e31, e12
            (self.group1() * Simd32x3::from(other.group0()[0])),
            // e15, e25, e35
            (self.group2() * Simd32x3::from(other.group0()[0])),
        );
    }
}
impl Wedge<FlatOrigin> for DipoleOrthogonalOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group1() * Simd32x3::from(other[e45])));
    }
}
impl Wedge<FlatPoint> for DipoleOrthogonalOrigin {
    type Output = Plane;
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            ((self.group0()[1] * other.group0()[2]) + (self.group1()[0] * other.group0()[3])),
            (self.group0()[0] * other.group0()[2] * -1.0),
            ((self.group0()[0] * other.group0()[1]) + (self.group1()[2] * other.group0()[3])),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<FlatPointAtInfinity> for DipoleOrthogonalOrigin {
    type Output = Plane;
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[1] * other.group0()[2]),
            (self.group0()[0] * other.group0()[2] * -1.0),
            (self.group0()[0] * other.group0()[1]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Flector> for DipoleOrthogonalOrigin {
    type Output = Plane;
    fn wedge(self, other: Flector) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            ((self.group0()[1] * other.group0()[2]) + (self.group1()[0] * other.group0()[3])),
            (self.group0()[0] * other.group0()[2] * -1.0),
            ((self.group0()[0] * other.group0()[1]) + (self.group1()[2] * other.group0()[3])),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<FlectorAtInfinity> for DipoleOrthogonalOrigin {
    type Output = Plane;
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[1] * other.group0()[2]),
            (self.group0()[0] * other.group0()[2] * -1.0),
            (self.group0()[0] * other.group0()[1]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<FlectorOnOrigin> for DipoleOrthogonalOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group1() * Simd32x3::from(other.group0()[0])));
    }
}
impl Wedge<Infinity> for DipoleOrthogonalOrigin {
    type Output = Line;
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            (self.group0() * Simd32x3::from(other[e5])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other[e5])),
        );
    }
}
impl Wedge<Line> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: Line) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<LineAtInfinity> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<LineOnOrigin> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: LineOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Motor> for DipoleOrthogonalOrigin {
    type Output = Motor;
    fn wedge(self, other: Motor) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group1()[3]),
                (self.group1()[1] * other.group1()[3]),
                (self.group1()[2] * other.group1()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<MotorAtInfinity> for DipoleOrthogonalOrigin {
    type Output = Motor;
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<MotorOnOrigin> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: MotorOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<MultiVector> for DipoleOrthogonalOrigin {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group2()[2] * other.group7()[2])
                    - (self.group2()[1] * other.group7()[1])
                    - (self.group2()[0] * other.group7()[0])
                    - (self.group1()[2] * other.group6()[3])
                    - (self.group1()[1] * other.group6()[2])
                    - (self.group1()[0] * other.group6()[1])
                    - (self.group0()[2] * other.group8()[2])
                    - (self.group0()[0] * other.group8()[0])
                    - (self.group0()[1] * other.group8()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                0.0,
            ]),
            // e15, e25, e35
            (self.group2() * Simd32x3::from(other.group0()[0])),
            // e23, e31, e12
            (self.group1() * Simd32x3::from(other.group0()[0])),
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
                ((self.group0()[0] * other[e1]) + (self.group2()[0] * other.group1()[3])),
                ((self.group0()[1] * other[e1]) + (self.group2()[1] * other.group1()[3])),
                ((self.group0()[2] * other[e1]) + (self.group2()[2] * other.group1()[3])),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                ((self.group0()[1] * other.group1()[2]) + (self.group1()[0] * other.group1()[3])),
                (self.group0()[0] * other.group1()[2] * -1.0),
                ((self.group0()[0] * other.group1()[1]) + (self.group1()[2] * other.group1()[3])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group1()[0] * other[e1]) + (self.group2()[2] * other.group1()[1])),
                (self.group2()[2] * other.group1()[0] * -1.0),
                ((self.group1()[2] * other[e1]) + (self.group2()[1] * other.group1()[0])),
            ]),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                ((self.group2()[2] * other.group3()[1]) + (self.group0()[1] * other.group4()[2]) + (self.group1()[0] * other.group3()[3])),
                (-(self.group0()[0] * other.group4()[2]) - (self.group2()[2] * other.group3()[0])),
                ((self.group2()[1] * other.group3()[0]) + (self.group0()[0] * other.group4()[1]) + (self.group1()[2] * other.group3()[3])),
                (-(self.group1()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[0] * other.group3()[0])
                    - (self.group0()[2] * other.group5()[2])
                    - (self.group0()[0] * other.group5()[0])
                    - (self.group0()[1] * other.group5()[1])),
            ]),
            // e3215
            (-(self.group2()[2] * other.group5()[2])
                - (self.group2()[1] * other.group5()[1])
                - (self.group2()[0] * other.group5()[0])
                - (self.group1()[2] * other.group4()[2])
                - (self.group1()[0] * other.group4()[0])
                - (self.group1()[1] * other.group4()[1])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for DipoleOrthogonalOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group2()[2] * other.group0()[2]) - (self.group2()[0] * other.group0()[0]) - (self.group2()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for DipoleOrthogonalOrigin {
    type Output = SphereOnOrigin;
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (self.group2()[2] * other.group0()[1]),
            (self.group2()[2] * other.group0()[0] * -1.0),
            (self.group2()[1] * other.group0()[0]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Origin> for DipoleOrthogonalOrigin {
    type Output = CircleOnOrigin;
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            (self.group1() * Simd32x3::from(other[e4])),
            // e415, e425, e435
            (self.group2() * Simd32x3::from(other[e4])),
        );
    }
}
impl Wedge<RoundPoint> for DipoleOrthogonalOrigin {
    type Output = Circle;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412, e321
            Simd32x4::from([
                ((self.group0()[1] * other.group0()[2]) + (self.group1()[0] * other.group1()[0])),
                (self.group0()[0] * other.group0()[2] * -1.0),
                ((self.group0()[0] * other.group0()[1]) + (self.group1()[2] * other.group1()[0])),
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435
            ((self.group0() * Simd32x3::from(other.group1()[1])) + (self.group2() * Simd32x3::from(other.group1()[0]))),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group1()[0] * other.group1()[1]) + (self.group2()[2] * other.group0()[1])),
                (self.group2()[2] * other.group0()[0] * -1.0),
                ((self.group1()[2] * other.group1()[1]) + (self.group2()[1] * other.group0()[0])),
            ]),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for DipoleOrthogonalOrigin {
    type Output = CircleAligningOrigin;
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (self.group1() * Simd32x3::from(other.group0()[0])),
            // e415, e425, e435
            ((self.group0() * Simd32x3::from(other.group0()[1])) + (self.group2() * Simd32x3::from(other.group0()[0]))),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other.group0()[1])),
        );
    }
}
impl Wedge<Scalar> for DipoleOrthogonalOrigin {
    type Output = DipoleOrthogonalOrigin;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return DipoleOrthogonalOrigin::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other[scalar])),
            // e23, e31, e12
            (self.group1() * Simd32x3::from(other[scalar])),
            // e15, e25, e35
            (self.group2() * Simd32x3::from(other[scalar])),
        );
    }
}
impl InfixWedge for DualNum {}
impl Wedge<AntiCircleOnOrigin> for DualNum {
    type Output = AntiCircleOnOrigin;
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return AntiCircleOnOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[0]) * other.group1()),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for DualNum {
    type Output = AntiDipoleOnOrigin;
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiDipoleOnOrigin::from_groups(/* e423, e431, e412, e321 */ (Simd32x4::from(self.group0()[0]) * other.group0()));
    }
}
impl Wedge<AntiFlatOrigin> for DualNum {
    type Output = AntiFlatOrigin;
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiFlatOrigin::from_groups(/* e321 */ (self.group0()[0] * other[e321]));
    }
}
impl Wedge<AntiFlatPoint> for DualNum {
    type Output = AntiFlatPoint;
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ (Simd32x4::from(self.group0()[0]) * other.group0()));
    }
}
impl Wedge<AntiFlector> for DualNum {
    type Output = AntiFlector;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e1, e2, e3, e5
            (Simd32x4::from(self.group0()[0]) * other.group1()),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for DualNum {
    type Output = AntiFlectorOnOrigin;
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return AntiFlectorOnOrigin::from_groups(/* e321, e1, e2, e3 */ (Simd32x4::from(self.group0()[0]) * other.group0()));
    }
}
impl Wedge<AntiLine> for DualNum {
    type Output = AntiLine;
    fn wedge(self, other: AntiLine) -> Self::Output {
        return AntiLine::from_groups(
            // e23, e31, e12
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[0]) * other.group1()),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for DualNum {
    type Output = AntiLineOnOrigin;
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return AntiLineOnOrigin::from_groups(/* e23, e31, e12 */ (Simd32x3::from(self.group0()[0]) * other.group0()));
    }
}
impl Wedge<AntiMotor> for DualNum {
    type Output = MultiVector;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            (self.group0() * Simd32x2::from(other.group0()[3])),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            (self.group0()[0] * other.group1()[3]),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for DualNum {
    type Output = MultiVector;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            (self.group0() * Simd32x2::from(other.group0()[3])),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<AntiPlane> for DualNum {
    type Output = AntiPlane;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ (Simd32x4::from(self.group0()[0]) * other.group0()));
    }
}
impl Wedge<AntiPlaneOnOrigin> for DualNum {
    type Output = AntiPlaneOnOrigin;
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (Simd32x3::from(self.group0()[0]) * other.group0()));
    }
}
impl Wedge<AntiScalar> for DualNum {
    type Output = AntiScalar;
    fn wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[0] * other[e12345]));
    }
}
impl Wedge<AntiSphereOnOrigin> for DualNum {
    type Output = AntiSphereOnOrigin;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ (Simd32x4::from(self.group0()[0]) * other.group0()));
    }
}
impl Wedge<Circle> for DualNum {
    type Output = Circle;
    fn wedge(self, other: Circle) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412, e321
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e415, e425, e435
            (Simd32x3::from(self.group0()[0]) * other.group1()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[0]) * other.group2()),
        );
    }
}
impl Wedge<CircleAligningOrigin> for DualNum {
    type Output = CircleAligningOrigin;
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e415, e425, e435
            (Simd32x3::from(self.group0()[0]) * other.group1()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[0]) * other.group2()),
        );
    }
}
impl Wedge<CircleAtInfinity> for DualNum {
    type Output = CircleAtInfinity;
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return CircleAtInfinity::from_groups(
            // e321, e415, e425, e435
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[0]) * other.group1()),
        );
    }
}
impl Wedge<CircleAtOrigin> for DualNum {
    type Output = CircleAtOrigin;
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return CircleAtOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[0]) * other.group1()),
        );
    }
}
impl Wedge<CircleOnOrigin> for DualNum {
    type Output = CircleOnOrigin;
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e415, e425, e435
            (Simd32x3::from(self.group0()[0]) * other.group1()),
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for DualNum {
    type Output = CircleOrthogonalOrigin;
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return CircleOrthogonalOrigin::from_groups(
            // e423, e431, e412, e321
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[0]) * other.group1()),
        );
    }
}
impl Wedge<Dipole> for DualNum {
    type Output = Dipole;
    fn wedge(self, other: Dipole) -> Self::Output {
        return Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[0]) * other.group1()),
            // e15, e25, e35, e45
            (Simd32x4::from(self.group0()[0]) * other.group2()),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for DualNum {
    type Output = DipoleAligningOrigin;
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return DipoleAligningOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e15, e25, e35, e45
            (Simd32x4::from(self.group0()[0]) * other.group1()),
        );
    }
}
impl Wedge<DipoleAtInfinity> for DualNum {
    type Output = DipoleAtInfinity;
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return DipoleAtInfinity::from_groups(
            // e23, e31, e12
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e15, e25, e35, e45
            (Simd32x4::from(self.group0()[0]) * other.group1()),
        );
    }
}
impl Wedge<DipoleAtOrigin> for DualNum {
    type Output = DipoleAtOrigin;
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return DipoleAtOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[0]) * other.group1()),
        );
    }
}
impl Wedge<DipoleOnOrigin> for DualNum {
    type Output = DipoleOnOrigin;
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return DipoleOnOrigin::from_groups(/* e41, e42, e43, e45 */ (Simd32x4::from(self.group0()[0]) * other.group0()));
    }
}
impl Wedge<DipoleOrthogonalOrigin> for DualNum {
    type Output = DipoleOrthogonalOrigin;
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return DipoleOrthogonalOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[0]) * other.group1()),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[0]) * other.group2()),
        );
    }
}
impl Wedge<DualNum> for DualNum {
    type Output = DualNum;
    fn wedge(self, other: DualNum) -> Self::Output {
        return DualNum::from_groups(/* scalar, e12345 */ Simd32x2::from([
            (self.group0()[0] * other.group0()[0]),
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
        ]));
    }
}
impl Wedge<FlatOrigin> for DualNum {
    type Output = FlatOrigin;
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return FlatOrigin::from_groups(/* e45 */ (self.group0()[0] * other[e45]));
    }
}
impl Wedge<FlatPoint> for DualNum {
    type Output = FlatPoint;
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ (Simd32x4::from(self.group0()[0]) * other.group0()));
    }
}
impl Wedge<FlatPointAtInfinity> for DualNum {
    type Output = FlatPointAtInfinity;
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return FlatPointAtInfinity::from_groups(/* e15, e25, e35 */ (Simd32x3::from(self.group0()[0]) * other.group0()));
    }
}
impl Wedge<Flector> for DualNum {
    type Output = Flector;
    fn wedge(self, other: Flector) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self.group0()[0]) * other.group1()),
        );
    }
}
impl Wedge<FlectorAtInfinity> for DualNum {
    type Output = FlectorAtInfinity;
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ (Simd32x4::from(self.group0()[0]) * other.group0()));
    }
}
impl Wedge<FlectorOnOrigin> for DualNum {
    type Output = FlectorOnOrigin;
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ (Simd32x4::from(self.group0()[0]) * other.group0()));
    }
}
impl Wedge<Horizon> for DualNum {
    type Output = Horizon;
    fn wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self.group0()[0] * other[e3215]));
    }
}
impl Wedge<Infinity> for DualNum {
    type Output = Infinity;
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return Infinity::from_groups(/* e5 */ (self.group0()[0] * other[e5]));
    }
}
impl Wedge<Line> for DualNum {
    type Output = Line;
    fn wedge(self, other: Line) -> Self::Output {
        return Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[0]) * other.group1()),
        );
    }
}
impl Wedge<LineAtInfinity> for DualNum {
    type Output = LineAtInfinity;
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ (Simd32x3::from(self.group0()[0]) * other.group0()));
    }
}
impl Wedge<LineOnOrigin> for DualNum {
    type Output = LineOnOrigin;
    fn wedge(self, other: LineOnOrigin) -> Self::Output {
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (Simd32x3::from(self.group0()[0]) * other.group0()));
    }
}
impl Wedge<Motor> for DualNum {
    type Output = Motor;
    fn wedge(self, other: Motor) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e235, e315, e125, e5
            (Simd32x4::from(self.group0()[0]) * other.group1()),
        );
    }
}
impl Wedge<MotorAtInfinity> for DualNum {
    type Output = MotorAtInfinity;
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return MotorAtInfinity::from_groups(/* e235, e315, e125, e5 */ (Simd32x4::from(self.group0()[0]) * other.group0()));
    }
}
impl Wedge<MotorOnOrigin> for DualNum {
    type Output = MotorOnOrigin;
    fn wedge(self, other: MotorOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ (Simd32x4::from(self.group0()[0]) * other.group0()));
    }
}
impl Wedge<MultiVector> for DualNum {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self.group0()[0] * other.group0()[0]),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[0]) * other.group1()),
            // e5
            (self.group0()[0] * other[e1]),
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[0]) * other.group3()),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[0]) * other.group4()),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[0]) * other.group5()),
            // e321, e415, e425, e435
            (Simd32x4::from(self.group0()[0]) * other.group6()),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * other.group7()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[0]) * other.group8()),
            // e4235, e4315, e4125, e1234
            (Simd32x4::from(self.group0()[0]) * other.group9()),
            // e3215
            (self.group0()[0] * other[e45]),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for DualNum {
    type Output = NullCircleAtOrigin;
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return NullCircleAtOrigin::from_groups(/* e423, e431, e412 */ (Simd32x3::from(self.group0()[0]) * other.group0()));
    }
}
impl Wedge<NullDipoleAtOrigin> for DualNum {
    type Output = NullDipoleAtOrigin;
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return NullDipoleAtOrigin::from_groups(/* e41, e42, e43 */ (Simd32x3::from(self.group0()[0]) * other.group0()));
    }
}
impl Wedge<NullSphereAtOrigin> for DualNum {
    type Output = NullSphereAtOrigin;
    fn wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self.group0()[0] * other[e1234]));
    }
}
impl Wedge<Origin> for DualNum {
    type Output = Origin;
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return Origin::from_groups(/* e4 */ (self.group0()[0] * other[e4]));
    }
}
impl Wedge<Plane> for DualNum {
    type Output = Plane;
    fn wedge(self, other: Plane) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (Simd32x4::from(self.group0()[0]) * other.group0()));
    }
}
impl Wedge<PlaneOnOrigin> for DualNum {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group0()[0]) * other.group0()));
    }
}
impl Wedge<RoundPoint> for DualNum {
    type Output = RoundPoint;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e4, e5
            (Simd32x2::from(self.group0()[0]) * other.group1()),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for DualNum {
    type Output = RoundPointAtOrigin;
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return RoundPointAtOrigin::from_groups(/* e4, e5 */ (Simd32x2::from(self.group0()[0]) * other.group0()));
    }
}
impl Wedge<Scalar> for DualNum {
    type Output = DualNum;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return DualNum::from_groups(/* scalar, e12345 */ (self.group0() * Simd32x2::from(other[scalar])));
    }
}
impl Wedge<Sphere> for DualNum {
    type Output = Sphere;
    fn wedge(self, other: Sphere) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e1234, e3215
            (Simd32x2::from(self.group0()[0]) * other.group1()),
        );
    }
}
impl Wedge<SphereAtOrigin> for DualNum {
    type Output = SphereAtOrigin;
    fn wedge(self, other: SphereAtOrigin) -> Self::Output {
        return SphereAtOrigin::from_groups(/* e1234, e3215 */ (Simd32x2::from(self.group0()[0]) * other.group0()));
    }
}
impl Wedge<SphereOnOrigin> for DualNum {
    type Output = SphereOnOrigin;
    fn wedge(self, other: SphereOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ (Simd32x4::from(self.group0()[0]) * other.group0()));
    }
}
impl InfixWedge for FlatOrigin {}
impl Wedge<AntiCircleOnOrigin> for FlatOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self[e45]) * other.group1()));
    }
}
impl Wedge<AntiDipoleOnOrigin> for FlatOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e45] * other.group0()[3] * -1.0));
    }
}
impl Wedge<AntiFlatOrigin> for FlatOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e45] * other[e321] * -1.0));
    }
}
impl Wedge<AntiFlatPoint> for FlatOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e45] * other.group0()[3] * -1.0));
    }
}
impl Wedge<AntiFlector> for FlatOrigin {
    type Output = MotorOnOrigin;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self[e45]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for FlatOrigin {
    type Output = MotorOnOrigin;
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self[e45]) * swizzle!(other.group0(), 1, 2, 3, 0) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<AntiLine> for FlatOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self[e45]) * other.group0()));
    }
}
impl Wedge<AntiLineOnOrigin> for FlatOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self[e45]) * other.group0()));
    }
}
impl Wedge<AntiMotor> for FlatOrigin {
    type Output = FlectorOnOrigin;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ (Simd32x4::from(self[e45]) * swizzle!(other.group0(), 3, 0, 1, 2)));
    }
}
impl Wedge<AntiMotorOnOrigin> for FlatOrigin {
    type Output = FlectorOnOrigin;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ (Simd32x4::from(self[e45]) * swizzle!(other.group0(), 3, 0, 1, 2)));
    }
}
impl Wedge<AntiPlane> for FlatOrigin {
    type Output = LineOnOrigin;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self[e45]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for FlatOrigin {
    type Output = LineOnOrigin;
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (Simd32x3::from(self[e45]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl Wedge<AntiSphereOnOrigin> for FlatOrigin {
    type Output = LineOnOrigin;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self[e45]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
        );
    }
}
impl Wedge<Circle> for FlatOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e45] * other.group0()[3] * -1.0));
    }
}
impl Wedge<CircleAtInfinity> for FlatOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e45] * other.group0()[0] * -1.0));
    }
}
impl Wedge<CircleOrthogonalOrigin> for FlatOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e45] * other.group0()[3] * -1.0));
    }
}
impl Wedge<Dipole> for FlatOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self[e45]) * other.group1()));
    }
}
impl Wedge<DipoleAtInfinity> for FlatOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self[e45]) * other.group0()));
    }
}
impl Wedge<DipoleOrthogonalOrigin> for FlatOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self[e45]) * other.group1()));
    }
}
impl Wedge<DualNum> for FlatOrigin {
    type Output = FlatOrigin;
    fn wedge(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return FlatOrigin::from_groups(/* e45 */ (self[e45] * other.group0()[0]));
    }
}
impl Wedge<MultiVector> for FlatOrigin {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, (self[e45] * other.group6()[0] * -1.0)]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self[e45] * other.group0()[0])]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self[e45] * other.group1()[0] * -1.0),
                (self[e45] * other.group1()[1] * -1.0),
                (self[e45] * other.group1()[2] * -1.0),
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([(self[e45] * other.group5()[0]), (self[e45] * other.group5()[1]), (self[e45] * other.group5()[2]), 0.0]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<RoundPoint> for FlatOrigin {
    type Output = LineOnOrigin;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (Simd32x3::from(self[e45]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl Wedge<Scalar> for FlatOrigin {
    type Output = FlatOrigin;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return FlatOrigin::from_groups(/* e45 */ (self[e45] * other[scalar]));
    }
}
impl InfixWedge for FlatPoint {}
impl Wedge<AntiCircleOnOrigin> for FlatPoint {
    type Output = Plane;
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            ((self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group1()[0])),
            (self.group0()[2] * other.group0()[0] * -1.0),
            ((self.group0()[1] * other.group0()[0]) + (self.group0()[3] * other.group1()[2])),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<AntiDipoleOnOrigin> for FlatPoint {
    type Output = AntiScalar;
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlatOrigin> for FlatPoint {
    type Output = AntiScalar;
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other[e321] * -1.0));
    }
}
impl Wedge<AntiFlatPoint> for FlatPoint {
    type Output = AntiScalar;
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[3] * -1.0));
    }
}
impl Wedge<AntiFlector> for FlatPoint {
    type Output = Motor;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]) * Simd32x4::from(-1.0)),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[2] * other.group1()[1]),
                (self.group0()[2] * other.group1()[0] * -1.0),
                (self.group0()[1] * other.group1()[0]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for FlatPoint {
    type Output = Motor;
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self.group0()[3]) * swizzle!(other.group0(), 1, 2, 3, 0) * Simd32x4::from(-1.0)),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[2] * other.group0()[2]),
                (self.group0()[2] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[1]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiLine> for FlatPoint {
    type Output = Plane;
    fn wedge(self, other: AntiLine) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiLineOnOrigin> for FlatPoint {
    type Output = Plane;
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiMotor> for FlatPoint {
    type Output = Flector;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for FlatPoint {
    type Output = Flector;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiPlane> for FlatPoint {
    type Output = Line;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from([(self.group0()[2] * other.group0()[1]), (self.group0()[2] * other.group0()[0]), (self.group0()[1] * other.group0()[0])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for FlatPoint {
    type Output = Line;
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self.group0()[3]) * other.group0() * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([self.group0()[2], self.group0()[2], self.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for FlatPoint {
    type Output = Line;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (Simd32x3::from([(self.group0()[2] * other.group0()[1]), (self.group0()[2] * other.group0()[0]), (self.group0()[1] * other.group0()[0])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<Circle> for FlatPoint {
    type Output = AntiScalar;
    fn wedge(self, other: Circle) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleAligningOrigin> for FlatPoint {
    type Output = AntiScalar;
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleAtInfinity> for FlatPoint {
    type Output = AntiScalar;
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[0] * -1.0));
    }
}
impl Wedge<CircleAtOrigin> for FlatPoint {
    type Output = AntiScalar;
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleOnOrigin> for FlatPoint {
    type Output = AntiScalar;
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for FlatPoint {
    type Output = AntiScalar;
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Dipole> for FlatPoint {
    type Output = Plane;
    fn wedge(self, other: Dipole) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            ((self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group1()[0])),
            (self.group0()[2] * other.group0()[0] * -1.0),
            ((self.group0()[1] * other.group0()[0]) + (self.group0()[3] * other.group1()[2])),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<DipoleAligningOrigin> for FlatPoint {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([self.group0()[2], self.group0()[2], self.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for FlatPoint {
    type Output = Plane;
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<DipoleAtOrigin> for FlatPoint {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([self.group0()[2], self.group0()[2], self.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<DipoleOnOrigin> for FlatPoint {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from([(self.group0()[2] * other.group0()[1]), (self.group0()[2] * other.group0()[0]), (self.group0()[1] * other.group0()[0])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for FlatPoint {
    type Output = Plane;
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            ((self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group1()[0])),
            (self.group0()[2] * other.group0()[0] * -1.0),
            ((self.group0()[1] * other.group0()[0]) + (self.group0()[3] * other.group1()[2])),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<DualNum> for FlatPoint {
    type Output = FlatPoint;
    fn wedge(self, other: DualNum) -> Self::Output {
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ (self.group0() * Simd32x4::from(other.group0()[0])));
    }
}
impl Wedge<MultiVector> for FlatPoint {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group0()[3] * other.group6()[0])
                    - (self.group0()[2] * other.group7()[2])
                    - (self.group0()[0] * other.group7()[0])
                    - (self.group0()[1] * other.group7()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[0])]),
            // e15, e25, e35
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group0()[3] * other.group1()[0] * -1.0),
                (self.group0()[3] * other.group1()[1] * -1.0),
                (self.group0()[3] * other.group1()[2] * -1.0),
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (Simd32x3::from([(self.group0()[2] * other.group1()[1]), (self.group0()[2] * other.group1()[0]), (self.group0()[1] * other.group1()[0])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                ((self.group0()[2] * other.group3()[1]) + (self.group0()[3] * other.group5()[0])),
                (self.group0()[2] * other.group3()[0] * -1.0),
                ((self.group0()[1] * other.group3()[0]) + (self.group0()[3] * other.group5()[2])),
                0.0,
            ]),
            // e3215
            (-(self.group0()[2] * other.group5()[2]) - (self.group0()[0] * other.group5()[0]) - (self.group0()[1] * other.group5()[1])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for FlatPoint {
    type Output = AntiScalar;
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for FlatPoint {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([self.group0()[2], self.group0()[2], self.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<Origin> for FlatPoint {
    type Output = LineOnOrigin;
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(
            // e415, e425, e435
            (Simd32x3::from(other[e4]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
        );
    }
}
impl Wedge<RoundPoint> for FlatPoint {
    type Output = Line;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self.group0()[3]) * other.group0() * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([self.group0()[2], self.group0()[2], self.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for FlatPoint {
    type Output = LineOnOrigin;
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return LineOnOrigin::from_groups(
            // e415, e425, e435
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
        );
    }
}
impl Wedge<Scalar> for FlatPoint {
    type Output = FlatPoint;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ (self.group0() * Simd32x4::from(other[scalar])));
    }
}
impl InfixWedge for FlatPointAtInfinity {}
impl Wedge<AntiCircleOnOrigin> for FlatPointAtInfinity {
    type Output = Plane;
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[2] * other.group0()[1]),
            (self.group0()[2] * other.group0()[0] * -1.0),
            (self.group0()[1] * other.group0()[0]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<AntiDipoleOnOrigin> for FlatPointAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlector> for FlatPointAtInfinity {
    type Output = LineAtInfinity;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return LineAtInfinity::from_groups(
            // e235, e315, e125
            (swizzle!(self.group0(), 2, 2, 1) * Simd32x3::from([other.group1()[1], other.group1()[0], other.group1()[0]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for FlatPointAtInfinity {
    type Output = LineAtInfinity;
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return LineAtInfinity::from_groups(
            // e235, e315, e125
            (swizzle!(self.group0(), 2, 2, 1) * Simd32x3::from([other.group0()[2], other.group0()[1], other.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<AntiLine> for FlatPointAtInfinity {
    type Output = Horizon;
    fn wedge(self, other: AntiLine) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for FlatPointAtInfinity {
    type Output = Horizon;
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiMotor> for FlatPointAtInfinity {
    type Output = FlectorAtInfinity;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiMotorOnOrigin> for FlatPointAtInfinity {
    type Output = FlectorAtInfinity;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiPlane> for FlatPointAtInfinity {
    type Output = LineAtInfinity;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return LineAtInfinity::from_groups(
            // e235, e315, e125
            (swizzle!(self.group0(), 2, 2, 1) * Simd32x3::from([other.group0()[1], other.group0()[0], other.group0()[0]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for FlatPointAtInfinity {
    type Output = LineAtInfinity;
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return LineAtInfinity::from_groups(
            // e235, e315, e125
            (swizzle!(self.group0(), 2, 2, 1) * swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for FlatPointAtInfinity {
    type Output = Line;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return Line::from_groups(
            // e415, e425, e435
            (self.group0() * Simd32x3::from(other.group0()[3])),
            // e235, e315, e125
            (swizzle!(self.group0(), 2, 2, 1) * Simd32x3::from([other.group0()[1], other.group0()[0], other.group0()[0]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<Circle> for FlatPointAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: Circle) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleAligningOrigin> for FlatPointAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleAtOrigin> for FlatPointAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleOnOrigin> for FlatPointAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for FlatPointAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Dipole> for FlatPointAtInfinity {
    type Output = Plane;
    fn wedge(self, other: Dipole) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[2] * other.group0()[1]),
            (self.group0()[2] * other.group0()[0] * -1.0),
            (self.group0()[1] * other.group0()[0]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<DipoleAligningOrigin> for FlatPointAtInfinity {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (swizzle!(self.group0(), 2, 2, 1) * swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for FlatPointAtInfinity {
    type Output = Horizon;
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleAtOrigin> for FlatPointAtInfinity {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (swizzle!(self.group0(), 2, 2, 1) * swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<DipoleOnOrigin> for FlatPointAtInfinity {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (swizzle!(self.group0(), 2, 2, 1) * Simd32x3::from([other.group0()[1], other.group0()[0], other.group0()[0]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for FlatPointAtInfinity {
    type Output = Plane;
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[2] * other.group0()[1]),
            (self.group0()[2] * other.group0()[0] * -1.0),
            (self.group0()[1] * other.group0()[0]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<DualNum> for FlatPointAtInfinity {
    type Output = FlatPointAtInfinity;
    fn wedge(self, other: DualNum) -> Self::Output {
        return FlatPointAtInfinity::from_groups(/* e15, e25, e35 */ (self.group0() * Simd32x3::from(other.group0()[0])));
    }
}
impl Wedge<MultiVector> for FlatPointAtInfinity {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group0()[2] * other.group7()[2]) - (self.group0()[0] * other.group7()[0]) - (self.group0()[1] * other.group7()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            (self.group0() * Simd32x3::from(other.group0()[0])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (swizzle!(self.group0(), 2, 2, 1) * Simd32x3::from([other.group1()[1], other.group1()[0], other.group1()[0]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group0()[2] * other.group3()[1]),
                (self.group0()[2] * other.group3()[0] * -1.0),
                (self.group0()[1] * other.group3()[0]),
                0.0,
            ]),
            // e3215
            (-(self.group0()[2] * other.group5()[2]) - (self.group0()[0] * other.group5()[0]) - (self.group0()[1] * other.group5()[1])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for FlatPointAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for FlatPointAtInfinity {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (swizzle!(self.group0(), 2, 2, 1) * swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<Origin> for FlatPointAtInfinity {
    type Output = LineOnOrigin;
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (self.group0() * Simd32x3::from(other[e4])));
    }
}
impl Wedge<RoundPoint> for FlatPointAtInfinity {
    type Output = Line;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return Line::from_groups(
            // e415, e425, e435
            (self.group0() * Simd32x3::from(other.group1()[0])),
            // e235, e315, e125
            (swizzle!(self.group0(), 2, 2, 1) * swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for FlatPointAtInfinity {
    type Output = LineOnOrigin;
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (self.group0() * Simd32x3::from(other.group0()[0])));
    }
}
impl Wedge<Scalar> for FlatPointAtInfinity {
    type Output = FlatPointAtInfinity;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return FlatPointAtInfinity::from_groups(/* e15, e25, e35 */ (self.group0() * Simd32x3::from(other[scalar])));
    }
}
impl InfixWedge for Flector {}
impl Wedge<AntiCircleOnOrigin> for Flector {
    type Output = Plane;
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            ((self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group1()[0])),
            (self.group0()[2] * other.group0()[0] * -1.0),
            ((self.group0()[1] * other.group0()[0]) + (self.group0()[3] * other.group1()[2])),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<AntiDipoleOnOrigin> for Flector {
    type Output = AntiScalar;
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlatOrigin> for Flector {
    type Output = AntiScalar;
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other[e321] * -1.0));
    }
}
impl Wedge<AntiFlatPoint> for Flector {
    type Output = AntiScalar;
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[3] * -1.0));
    }
}
impl Wedge<AntiFlector> for Flector {
    type Output = Motor;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0] * -1.0),
                (self.group0()[3] * other.group1()[1] * -1.0),
                (self.group0()[3] * other.group1()[2] * -1.0),
                ((self.group1()[2] * other.group1()[2]) + (self.group1()[0] * other.group1()[0]) + (self.group1()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[2] * other.group1()[1]),
                (self.group0()[2] * other.group1()[0] * -1.0),
                (self.group0()[1] * other.group1()[0]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for Flector {
    type Output = Motor;
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                (self.group0()[3] * other.group0()[3] * -1.0),
                ((self.group1()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[2] * other.group0()[2]),
                (self.group0()[2] * other.group0()[1] * -1.0),
                (self.group0()[1] * other.group0()[1]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiLine> for Flector {
    type Output = Plane;
    fn wedge(self, other: AntiLine) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiLineOnOrigin> for Flector {
    type Output = Plane;
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiMotor> for Flector {
    type Output = Flector;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[3] * other.group0()[0]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[3] * other.group0()[1]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[3] * other.group0()[2]) + (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for Flector {
    type Output = Flector;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[3] * other.group0()[0]) + (self.group1()[0] * other.group0()[3])),
                ((self.group0()[3] * other.group0()[1]) + (self.group1()[1] * other.group0()[3])),
                ((self.group0()[3] * other.group0()[2]) + (self.group1()[2] * other.group0()[3])),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiPlane> for Flector {
    type Output = Motor;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[2] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[0]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for Flector {
    type Output = Motor;
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[2] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[0]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for Flector {
    type Output = Motor;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                ((self.group1()[3] * other.group0()[3]) + (self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[2] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[0]),
                0.0,
            ]),
        );
    }
}
impl Wedge<Circle> for Flector {
    type Output = AntiScalar;
    fn wedge(self, other: Circle) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleAligningOrigin> for Flector {
    type Output = AntiScalar;
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleAtInfinity> for Flector {
    type Output = AntiScalar;
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[0] * -1.0));
    }
}
impl Wedge<CircleAtOrigin> for Flector {
    type Output = AntiScalar;
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleOnOrigin> for Flector {
    type Output = AntiScalar;
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for Flector {
    type Output = AntiScalar;
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[3] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Dipole> for Flector {
    type Output = Plane;
    fn wedge(self, other: Dipole) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            ((self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group1()[0])),
            (self.group0()[2] * other.group0()[0] * -1.0),
            ((self.group0()[1] * other.group0()[0]) + (self.group0()[3] * other.group1()[2])),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<DipoleAligningOrigin> for Flector {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([self.group0()[2], self.group0()[2], self.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for Flector {
    type Output = Plane;
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<DipoleAtOrigin> for Flector {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([self.group0()[2], self.group0()[2], self.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<DipoleOnOrigin> for Flector {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from([(self.group0()[2] * other.group0()[1]), (self.group0()[2] * other.group0()[0]), (self.group0()[1] * other.group0()[0])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for Flector {
    type Output = Plane;
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            ((self.group0()[2] * other.group0()[1]) + (self.group0()[3] * other.group1()[0])),
            (self.group0()[2] * other.group0()[0] * -1.0),
            ((self.group0()[1] * other.group0()[0]) + (self.group0()[3] * other.group1()[2])),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<DualNum> for Flector {
    type Output = Flector;
    fn wedge(self, other: DualNum) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (self.group0() * Simd32x4::from(other.group0()[0])),
            // e4235, e4315, e4125, e3215
            (self.group1() * Simd32x4::from(other.group0()[0])),
        );
    }
}
impl Wedge<MultiVector> for Flector {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group1()[3] * other.group1()[3]) + (self.group1()[2] * other.group1()[2]) + (self.group1()[0] * other.group1()[0]) + (self.group1()[1] * other.group1()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group0()[0])]),
            // e15, e25, e35
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group0()[3] * other.group1()[0] * -1.0),
                (self.group0()[3] * other.group1()[1] * -1.0),
                (self.group0()[3] * other.group1()[2] * -1.0),
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (Simd32x3::from([(self.group0()[2] * other.group1()[1]), (self.group0()[2] * other.group1()[0]), (self.group0()[1] * other.group1()[0])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[0]) + (self.group0()[2] * other.group3()[1]) + (self.group0()[3] * other.group5()[0])),
                (self.group0()[2] * other.group3()[0] * -1.0),
                ((self.group1()[2] * other.group0()[0]) + (self.group0()[1] * other.group3()[0]) + (self.group0()[3] * other.group5()[2])),
                0.0,
            ]),
            // e3215
            (-(self.group0()[2] * other.group5()[2]) - (self.group0()[0] * other.group5()[0]) - (self.group0()[1] * other.group5()[1])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for Flector {
    type Output = AntiScalar;
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for Flector {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([self.group0()[2], self.group0()[2], self.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<Origin> for Flector {
    type Output = MotorOnOrigin;
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(other[e4]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
        );
    }
}
impl Wedge<RoundPoint> for Flector {
    type Output = Motor;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0] * -1.0),
                (self.group0()[3] * other.group0()[1] * -1.0),
                (self.group0()[3] * other.group0()[2] * -1.0),
                ((self.group1()[3] * other.group1()[0]) + (self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[2] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[0]),
                0.0,
            ]),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for Flector {
    type Output = MotorOnOrigin;
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[3]])),
        );
    }
}
impl Wedge<Scalar> for Flector {
    type Output = Flector;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            (self.group0() * Simd32x4::from(other[scalar])),
            // e4235, e4315, e4125, e3215
            (self.group1() * Simd32x4::from(other[scalar])),
        );
    }
}
impl InfixWedge for FlectorAtInfinity {}
impl Wedge<AntiCircleOnOrigin> for FlectorAtInfinity {
    type Output = Plane;
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[2] * other.group0()[1]),
            (self.group0()[2] * other.group0()[0] * -1.0),
            (self.group0()[1] * other.group0()[0]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<AntiDipoleOnOrigin> for FlectorAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlector> for FlectorAtInfinity {
    type Output = LineAtInfinity;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return LineAtInfinity::from_groups(
            // e235, e315, e125
            (Simd32x3::from([(self.group0()[2] * other.group1()[1]), (self.group0()[2] * other.group1()[0]), (self.group0()[1] * other.group1()[0])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for FlectorAtInfinity {
    type Output = LineAtInfinity;
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return LineAtInfinity::from_groups(
            // e235, e315, e125
            (Simd32x3::from([(self.group0()[2] * other.group0()[2]), (self.group0()[2] * other.group0()[1]), (self.group0()[1] * other.group0()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<AntiLine> for FlectorAtInfinity {
    type Output = Horizon;
    fn wedge(self, other: AntiLine) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for FlectorAtInfinity {
    type Output = Horizon;
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiMotor> for FlectorAtInfinity {
    type Output = FlectorAtInfinity;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiMotorOnOrigin> for FlectorAtInfinity {
    type Output = FlectorAtInfinity;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiPlane> for FlectorAtInfinity {
    type Output = LineAtInfinity;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return LineAtInfinity::from_groups(
            // e235, e315, e125
            (Simd32x3::from([(self.group0()[2] * other.group0()[1]), (self.group0()[2] * other.group0()[0]), (self.group0()[1] * other.group0()[0])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for FlectorAtInfinity {
    type Output = LineAtInfinity;
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return LineAtInfinity::from_groups(
            // e235, e315, e125
            (swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([self.group0()[2], self.group0()[2], self.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for FlectorAtInfinity {
    type Output = Motor;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[2] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[0]),
                0.0,
            ]),
        );
    }
}
impl Wedge<Circle> for FlectorAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: Circle) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleAligningOrigin> for FlectorAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleAtOrigin> for FlectorAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleOnOrigin> for FlectorAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for FlectorAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Dipole> for FlectorAtInfinity {
    type Output = Plane;
    fn wedge(self, other: Dipole) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[2] * other.group0()[1]),
            (self.group0()[2] * other.group0()[0] * -1.0),
            (self.group0()[1] * other.group0()[0]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<DipoleAligningOrigin> for FlectorAtInfinity {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([self.group0()[2], self.group0()[2], self.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for FlectorAtInfinity {
    type Output = Horizon;
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleAtOrigin> for FlectorAtInfinity {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([self.group0()[2], self.group0()[2], self.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<DipoleOnOrigin> for FlectorAtInfinity {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from([(self.group0()[2] * other.group0()[1]), (self.group0()[2] * other.group0()[0]), (self.group0()[1] * other.group0()[0])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for FlectorAtInfinity {
    type Output = Plane;
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[2] * other.group0()[1]),
            (self.group0()[2] * other.group0()[0] * -1.0),
            (self.group0()[1] * other.group0()[0]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<DualNum> for FlectorAtInfinity {
    type Output = FlectorAtInfinity;
    fn wedge(self, other: DualNum) -> Self::Output {
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ (self.group0() * Simd32x4::from(other.group0()[0])));
    }
}
impl Wedge<MultiVector> for FlectorAtInfinity {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, (self.group0()[3] * other.group1()[3])]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            (Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (Simd32x3::from([(self.group0()[2] * other.group1()[1]), (self.group0()[2] * other.group1()[0]), (self.group0()[1] * other.group1()[0])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group0()[2] * other.group3()[1]),
                (self.group0()[2] * other.group3()[0] * -1.0),
                (self.group0()[1] * other.group3()[0]),
                0.0,
            ]),
            // e3215
            (-(self.group0()[2] * other.group5()[2]) - (self.group0()[0] * other.group5()[0]) - (self.group0()[1] * other.group5()[1])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for FlectorAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for FlectorAtInfinity {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([self.group0()[2], self.group0()[2], self.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<Origin> for FlectorAtInfinity {
    type Output = MotorOnOrigin;
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ (self.group0() * Simd32x4::from(other[e4])));
    }
}
impl Wedge<RoundPoint> for FlectorAtInfinity {
    type Output = Motor;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (self.group0() * Simd32x4::from(other.group1()[0])),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[2] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[0]),
                0.0,
            ]),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for FlectorAtInfinity {
    type Output = MotorOnOrigin;
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ (self.group0() * Simd32x4::from(other.group0()[0])));
    }
}
impl Wedge<Scalar> for FlectorAtInfinity {
    type Output = FlectorAtInfinity;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ (self.group0() * Simd32x4::from(other[scalar])));
    }
}
impl InfixWedge for FlectorOnOrigin {}
impl Wedge<AntiCircleOnOrigin> for FlectorOnOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group0()[0]) * other.group1()));
    }
}
impl Wedge<AntiDipoleOnOrigin> for FlectorOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[0] * other.group0()[3] * -1.0));
    }
}
impl Wedge<AntiFlatOrigin> for FlectorOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[0] * other[e321] * -1.0));
    }
}
impl Wedge<AntiFlatPoint> for FlectorOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[0] * other.group0()[3] * -1.0));
    }
}
impl Wedge<AntiFlector> for FlectorOnOrigin {
    type Output = MotorOnOrigin;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group1()[0] * -1.0),
            (self.group0()[0] * other.group1()[1] * -1.0),
            (self.group0()[0] * other.group1()[2] * -1.0),
            ((self.group0()[3] * other.group1()[2]) + (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[1])),
        ]));
    }
}
impl Wedge<AntiFlectorOnOrigin> for FlectorOnOrigin {
    type Output = MotorOnOrigin;
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[1] * -1.0),
            (self.group0()[0] * other.group0()[2] * -1.0),
            (self.group0()[0] * other.group0()[3] * -1.0),
            ((self.group0()[3] * other.group0()[3]) + (self.group0()[1] * other.group0()[1]) + (self.group0()[2] * other.group0()[2])),
        ]));
    }
}
impl Wedge<AntiLine> for FlectorOnOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: AntiLine) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group0()[0]) * other.group0()));
    }
}
impl Wedge<AntiLineOnOrigin> for FlectorOnOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group0()[0]) * other.group0()));
    }
}
impl Wedge<AntiMotor> for FlectorOnOrigin {
    type Output = FlectorOnOrigin;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[3])),
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[2] * other.group0()[3])),
            ((self.group0()[0] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
        ]));
    }
}
impl Wedge<AntiMotorOnOrigin> for FlectorOnOrigin {
    type Output = FlectorOnOrigin;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            ((self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[3])),
            ((self.group0()[0] * other.group0()[1]) + (self.group0()[2] * other.group0()[3])),
            ((self.group0()[0] * other.group0()[2]) + (self.group0()[3] * other.group0()[3])),
        ]));
    }
}
impl Wedge<AntiPlane> for FlectorOnOrigin {
    type Output = MotorOnOrigin;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[0] * -1.0),
            (self.group0()[0] * other.group0()[1] * -1.0),
            (self.group0()[0] * other.group0()[2] * -1.0),
            ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiPlaneOnOrigin> for FlectorOnOrigin {
    type Output = MotorOnOrigin;
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[0] * -1.0),
            (self.group0()[0] * other.group0()[1] * -1.0),
            (self.group0()[0] * other.group0()[2] * -1.0),
            ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiSphereOnOrigin> for FlectorOnOrigin {
    type Output = MotorOnOrigin;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[0] * -1.0),
            (self.group0()[0] * other.group0()[1] * -1.0),
            (self.group0()[0] * other.group0()[2] * -1.0),
            ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Circle> for FlectorOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: Circle) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[0] * other.group0()[3] * -1.0));
    }
}
impl Wedge<CircleAtInfinity> for FlectorOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[0] * other.group0()[0] * -1.0));
    }
}
impl Wedge<CircleOrthogonalOrigin> for FlectorOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[0] * other.group0()[3] * -1.0));
    }
}
impl Wedge<Dipole> for FlectorOnOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: Dipole) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group0()[0]) * other.group1()));
    }
}
impl Wedge<DipoleAtInfinity> for FlectorOnOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group0()[0]) * other.group0()));
    }
}
impl Wedge<DipoleOrthogonalOrigin> for FlectorOnOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group0()[0]) * other.group1()));
    }
}
impl Wedge<DualNum> for FlectorOnOrigin {
    type Output = FlectorOnOrigin;
    fn wedge(self, other: DualNum) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ (self.group0() * Simd32x4::from(other.group0()[0])));
    }
}
impl Wedge<MultiVector> for FlectorOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group0()[3] * other.group1()[2]) + (self.group0()[1] * other.group1()[0]) + (self.group0()[2] * other.group1()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[0])]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group0()[0] * other.group1()[0] * -1.0),
                (self.group0()[0] * other.group1()[1] * -1.0),
                (self.group0()[0] * other.group1()[2] * -1.0),
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group5()[0]) + (self.group0()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group5()[1]) + (self.group0()[2] * other.group0()[0])),
                ((self.group0()[0] * other.group5()[2]) + (self.group0()[3] * other.group0()[0])),
                0.0,
            ]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<RoundPoint> for FlectorOnOrigin {
    type Output = MotorOnOrigin;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[0] * -1.0),
            (self.group0()[0] * other.group0()[1] * -1.0),
            (self.group0()[0] * other.group0()[2] * -1.0),
            ((self.group0()[3] * other.group0()[2]) + (self.group0()[1] * other.group0()[0]) + (self.group0()[2] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Scalar> for FlectorOnOrigin {
    type Output = FlectorOnOrigin;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ (self.group0() * Simd32x4::from(other[scalar])));
    }
}
impl InfixWedge for Horizon {}
impl Wedge<AntiMotor> for Horizon {
    type Output = Horizon;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self[e3215] * other.group0()[3]));
    }
}
impl Wedge<AntiMotorOnOrigin> for Horizon {
    type Output = Horizon;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self[e3215] * other.group0()[3]));
    }
}
impl Wedge<AntiSphereOnOrigin> for Horizon {
    type Output = AntiScalar;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e3215] * other.group0()[3]));
    }
}
impl Wedge<DualNum> for Horizon {
    type Output = Horizon;
    fn wedge(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self[e3215] * other.group0()[0]));
    }
}
impl Wedge<MultiVector> for Horizon {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, (self[e3215] * other.group1()[3])]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            (self[e3215] * other.group0()[0]),
        );
    }
}
impl Wedge<Origin> for Horizon {
    type Output = AntiScalar;
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e3215] * other[e4]));
    }
}
impl Wedge<RoundPoint> for Horizon {
    type Output = AntiScalar;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e3215] * other.group1()[0]));
    }
}
impl Wedge<RoundPointAtOrigin> for Horizon {
    type Output = AntiScalar;
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e3215] * other.group0()[0]));
    }
}
impl Wedge<Scalar> for Horizon {
    type Output = Horizon;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self[e3215] * other[scalar]));
    }
}
impl InfixWedge for Infinity {}
impl Wedge<AntiCircleOnOrigin> for Infinity {
    type Output = Line;
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self[e5]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self[e5]) * other.group1()),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for Infinity {
    type Output = Plane;
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (Simd32x4::from(self[e5]) * other.group0() * Simd32x4::from(-1.0)));
    }
}
impl Wedge<AntiFlatOrigin> for Infinity {
    type Output = Horizon;
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self[e5] * other[e321] * -1.0));
    }
}
impl Wedge<AntiFlatPoint> for Infinity {
    type Output = Horizon;
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self[e5] * other.group0()[3] * -1.0));
    }
}
impl Wedge<AntiFlector> for Infinity {
    type Output = FlectorAtInfinity;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return FlectorAtInfinity::from_groups(
            // e15, e25, e35, e3215
            (Simd32x4::from(self[e5]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for Infinity {
    type Output = FlectorAtInfinity;
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ (Simd32x4::from(self[e5]) * swizzle!(other.group0(), 1, 2, 3, 0) * Simd32x4::from(-1.0)));
    }
}
impl Wedge<AntiLine> for Infinity {
    type Output = LineAtInfinity;
    fn wedge(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ (Simd32x3::from(self[e5]) * other.group0()));
    }
}
impl Wedge<AntiLineOnOrigin> for Infinity {
    type Output = LineAtInfinity;
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        use crate::elements::*;
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ (Simd32x3::from(self[e5]) * other.group0()));
    }
}
impl Wedge<AntiMotor> for Infinity {
    type Output = MotorAtInfinity;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return MotorAtInfinity::from_groups(/* e235, e315, e125, e5 */ (Simd32x4::from(self[e5]) * other.group0()));
    }
}
impl Wedge<AntiMotorOnOrigin> for Infinity {
    type Output = MotorAtInfinity;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return MotorAtInfinity::from_groups(/* e235, e315, e125, e5 */ (Simd32x4::from(self[e5]) * other.group0()));
    }
}
impl Wedge<AntiPlane> for Infinity {
    type Output = FlatPointAtInfinity;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return FlatPointAtInfinity::from_groups(
            // e15, e25, e35
            (Simd32x3::from(self[e5]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for Infinity {
    type Output = FlatPointAtInfinity;
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        use crate::elements::*;
        return FlatPointAtInfinity::from_groups(/* e15, e25, e35 */ (Simd32x3::from(self[e5]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl Wedge<AntiSphereOnOrigin> for Infinity {
    type Output = FlatPoint;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        use crate::elements::*;
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ (Simd32x4::from(self[e5]) * other.group0() * Simd32x4::from(-1.0)));
    }
}
impl Wedge<Circle> for Infinity {
    type Output = Plane;
    fn wedge(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (Simd32x4::from(self[e5]) * other.group0() * Simd32x4::from(-1.0)));
    }
}
impl Wedge<CircleAligningOrigin> for Infinity {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self[e5]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl Wedge<CircleAtInfinity> for Infinity {
    type Output = Horizon;
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self[e5] * other.group0()[0] * -1.0));
    }
}
impl Wedge<CircleAtOrigin> for Infinity {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self[e5]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl Wedge<CircleOnOrigin> for Infinity {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self[e5]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl Wedge<CircleOrthogonalOrigin> for Infinity {
    type Output = Plane;
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (Simd32x4::from(self[e5]) * other.group0() * Simd32x4::from(-1.0)));
    }
}
impl Wedge<Dipole> for Infinity {
    type Output = Line;
    fn wedge(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self[e5]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self[e5]) * other.group1()),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for Infinity {
    type Output = LineOnOrigin;
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (Simd32x3::from(self[e5]) * other.group0()));
    }
}
impl Wedge<DipoleAtInfinity> for Infinity {
    type Output = LineAtInfinity;
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        use crate::elements::*;
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ (Simd32x3::from(self[e5]) * other.group0()));
    }
}
impl Wedge<DipoleAtOrigin> for Infinity {
    type Output = LineOnOrigin;
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (Simd32x3::from(self[e5]) * other.group0()));
    }
}
impl Wedge<DipoleOnOrigin> for Infinity {
    type Output = LineOnOrigin;
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self[e5]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for Infinity {
    type Output = Line;
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self[e5]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self[e5]) * other.group1()),
        );
    }
}
impl Wedge<DualNum> for Infinity {
    type Output = Infinity;
    fn wedge(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return Infinity::from_groups(/* e5 */ (self[e5] * other.group0()[0]));
    }
}
impl Wedge<MultiVector> for Infinity {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, (self[e5] * other.group9()[3])]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            (self[e5] * other.group0()[0]),
            // e41, e42, e43, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self[e5] * other.group1()[3] * -1.0)]),
            // e15, e25, e35
            (Simd32x3::from(self[e5]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([0.0, (self[e5] * other.group3()[0]), (self[e5] * other.group3()[1]), (self[e5] * other.group3()[2])]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (Simd32x3::from(self[e5]) * other.group5()),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([(self[e5] * other.group7()[0] * -1.0), (self[e5] * other.group7()[1] * -1.0), (self[e5] * other.group7()[2] * -1.0), 0.0]),
            // e3215
            (self[e5] * other.group6()[0] * -1.0),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for Infinity {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self[e5]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl Wedge<NullDipoleAtOrigin> for Infinity {
    type Output = LineOnOrigin;
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (Simd32x3::from(self[e5]) * other.group0()));
    }
}
impl Wedge<NullSphereAtOrigin> for Infinity {
    type Output = AntiScalar;
    fn wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e5] * other[e1234]));
    }
}
impl Wedge<Origin> for Infinity {
    type Output = FlatOrigin;
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return FlatOrigin::from_groups(/* e45 */ (self[e5] * other[e4] * -1.0));
    }
}
impl Wedge<RoundPoint> for Infinity {
    type Output = FlatPoint;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return FlatPoint::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self[e5]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for Infinity {
    type Output = FlatOrigin;
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        use crate::elements::*;
        return FlatOrigin::from_groups(/* e45 */ (self[e5] * other.group0()[0] * -1.0));
    }
}
impl Wedge<Scalar> for Infinity {
    type Output = Infinity;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Infinity::from_groups(/* e5 */ (self[e5] * other[scalar]));
    }
}
impl Wedge<Sphere> for Infinity {
    type Output = AntiScalar;
    fn wedge(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e5] * other.group1()[0]));
    }
}
impl Wedge<SphereAtOrigin> for Infinity {
    type Output = AntiScalar;
    fn wedge(self, other: SphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e5] * other.group0()[0]));
    }
}
impl Wedge<SphereOnOrigin> for Infinity {
    type Output = AntiScalar;
    fn wedge(self, other: SphereOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e5] * other.group0()[3]));
    }
}
impl InfixWedge for Line {}
impl Wedge<AntiCircleOnOrigin> for Line {
    type Output = AntiScalar;
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiFlector> for Line {
    type Output = Plane;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[2] * other.group1()[1]),
            (self.group0()[2] * other.group1()[0] * -1.0),
            (self.group0()[1] * other.group1()[0]),
            ((self.group1()[2] * other.group1()[2]) + (self.group1()[0] * other.group1()[0]) + (self.group1()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<AntiFlectorOnOrigin> for Line {
    type Output = Plane;
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[2] * other.group0()[2]),
            (self.group0()[2] * other.group0()[1] * -1.0),
            (self.group0()[1] * other.group0()[1]),
            ((self.group1()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])),
        ]));
    }
}
impl Wedge<AntiLine> for Line {
    type Output = AntiScalar;
    fn wedge(self, other: AntiLine) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for Line {
    type Output = AntiScalar;
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiMotor> for Line {
    type Output = Motor;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for Line {
    type Output = Motor;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[0] * other.group0()[3]),
                (self.group1()[1] * other.group0()[3]),
                (self.group1()[2] * other.group0()[3]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiPlane> for Line {
    type Output = Plane;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[2] * other.group0()[1]),
            (self.group0()[2] * other.group0()[0] * -1.0),
            (self.group0()[1] * other.group0()[0]),
            ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiPlaneOnOrigin> for Line {
    type Output = Plane;
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[2] * other.group0()[1]),
            (self.group0()[2] * other.group0()[0] * -1.0),
            (self.group0()[1] * other.group0()[0]),
            ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiSphereOnOrigin> for Line {
    type Output = Plane;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[2] * other.group0()[1]),
            (-(self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])),
            (self.group0()[1] * other.group0()[0]),
            ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Dipole> for Line {
    type Output = AntiScalar;
    fn wedge(self, other: Dipole) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for Line {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for Line {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleAtOrigin> for Line {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleOnOrigin> for Line {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for Line {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2])
                - (self.group1()[1] * other.group0()[1])
                - (self.group1()[0] * other.group0()[0])
                - (self.group0()[2] * other.group1()[2])
                - (self.group0()[0] * other.group1()[0])
                - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DualNum> for Line {
    type Output = Line;
    fn wedge(self, other: DualNum) -> Self::Output {
        return Line::from_groups(
            // e415, e425, e435
            (self.group0() * Simd32x3::from(other.group0()[0])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other.group0()[0])),
        );
    }
}
impl Wedge<MultiVector> for Line {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group1()[2] * other.group3()[2])
                    - (self.group1()[1] * other.group3()[1])
                    - (self.group1()[0] * other.group3()[0])
                    - (self.group0()[2] * other.group5()[2])
                    - (self.group0()[0] * other.group5()[0])
                    - (self.group0()[1] * other.group5()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other.group0()[0])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group0()[2] * other.group1()[1]),
                (-(self.group0()[2] * other.group1()[0]) - (self.group1()[1] * other.group1()[3])),
                (self.group0()[1] * other.group1()[0]),
                0.0,
            ]),
            // e3215
            ((self.group1()[2] * other.group1()[2]) + (self.group1()[0] * other.group1()[0]) + (self.group1()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for Line {
    type Output = AntiScalar;
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Origin> for Line {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group1() * Simd32x3::from(other[e4]) * Simd32x3::from(-1.0)));
    }
}
impl Wedge<RoundPoint> for Line {
    type Output = Plane;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[2] * other.group0()[1]),
            (-(self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other.group1()[0])),
            (self.group0()[1] * other.group0()[0]),
            ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<RoundPointAtOrigin> for Line {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group1() * Simd32x3::from(other.group0()[0]) * Simd32x3::from(-1.0)));
    }
}
impl Wedge<Scalar> for Line {
    type Output = Line;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            (self.group0() * Simd32x3::from(other[scalar])),
            // e235, e315, e125
            (self.group1() * Simd32x3::from(other[scalar])),
        );
    }
}
impl InfixWedge for LineAtInfinity {}
impl Wedge<AntiCircleOnOrigin> for LineAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlector> for LineAtInfinity {
    type Output = Horizon;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            ((self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for LineAtInfinity {
    type Output = Horizon;
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
        );
    }
}
impl Wedge<AntiMotor> for LineAtInfinity {
    type Output = LineAtInfinity;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ (self.group0() * Simd32x3::from(other.group0()[3])));
    }
}
impl Wedge<AntiMotorOnOrigin> for LineAtInfinity {
    type Output = LineAtInfinity;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ (self.group0() * Simd32x3::from(other.group0()[3])));
    }
}
impl Wedge<AntiPlane> for LineAtInfinity {
    type Output = Horizon;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for LineAtInfinity {
    type Output = Horizon;
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return Horizon::from_groups(
            // e3215
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for LineAtInfinity {
    type Output = Plane;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3] * -1.0),
            (self.group0()[1] * other.group0()[3] * -1.0),
            (self.group0()[2] * other.group0()[3] * -1.0),
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<Dipole> for LineAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: Dipole) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for LineAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleAtOrigin> for LineAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleOnOrigin> for LineAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for LineAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DualNum> for LineAtInfinity {
    type Output = LineAtInfinity;
    fn wedge(self, other: DualNum) -> Self::Output {
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ (self.group0() * Simd32x3::from(other.group0()[0])));
    }
}
impl Wedge<MultiVector> for LineAtInfinity {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group0()[2] * other.group3()[2]) - (self.group0()[0] * other.group3()[0]) - (self.group0()[1] * other.group3()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (self.group0() * Simd32x3::from(other.group0()[0])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group0()[0] * other.group1()[3] * -1.0),
                (self.group0()[1] * other.group1()[3] * -1.0),
                (self.group0()[2] * other.group1()[3] * -1.0),
                0.0,
            ]),
            // e3215
            ((self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for LineAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Origin> for LineAtInfinity {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other[e4]) * Simd32x3::from(-1.0)));
    }
}
impl Wedge<RoundPoint> for LineAtInfinity {
    type Output = Plane;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group0()[0] * other.group1()[0] * -1.0),
            (self.group0()[1] * other.group1()[0] * -1.0),
            (self.group0()[2] * other.group1()[0] * -1.0),
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<RoundPointAtOrigin> for LineAtInfinity {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group0()[0]) * Simd32x3::from(-1.0)));
    }
}
impl Wedge<Scalar> for LineAtInfinity {
    type Output = LineAtInfinity;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ (self.group0() * Simd32x3::from(other[scalar])));
    }
}
impl InfixWedge for LineOnOrigin {}
impl Wedge<AntiCircleOnOrigin> for LineOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiFlector> for LineOnOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (swizzle!(self.group0(), 2, 2, 1) * Simd32x3::from([other.group1()[1], other.group1()[0], other.group1()[0]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for LineOnOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (swizzle!(self.group0(), 2, 2, 1) * Simd32x3::from([other.group0()[2], other.group0()[1], other.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<AntiLine> for LineOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiLine) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for LineOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiMotor> for LineOnOrigin {
    type Output = MotorOnOrigin;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiMotorOnOrigin> for LineOnOrigin {
    type Output = MotorOnOrigin;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiPlane> for LineOnOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (swizzle!(self.group0(), 2, 2, 1) * Simd32x3::from([other.group0()[1], other.group0()[0], other.group0()[0]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for LineOnOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (swizzle!(self.group0(), 2, 2, 1) * swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for LineOnOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (swizzle!(self.group0(), 2, 2, 1) * Simd32x3::from([other.group0()[1], other.group0()[0], other.group0()[0]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<Dipole> for LineOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: Dipole) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for LineOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for LineOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DualNum> for LineOnOrigin {
    type Output = LineOnOrigin;
    fn wedge(self, other: DualNum) -> Self::Output {
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (self.group0() * Simd32x3::from(other.group0()[0])));
    }
}
impl Wedge<MultiVector> for LineOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group0()[2] * other.group5()[2]) - (self.group0()[0] * other.group5()[0]) - (self.group0()[1] * other.group5()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group0()[2] * other.group1()[1]),
                (self.group0()[2] * other.group1()[0] * -1.0),
                (self.group0()[1] * other.group1()[0]),
                0.0,
            ]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<RoundPoint> for LineOnOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (swizzle!(self.group0(), 2, 2, 1) * swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<Scalar> for LineOnOrigin {
    type Output = LineOnOrigin;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (self.group0() * Simd32x3::from(other[scalar])));
    }
}
impl InfixWedge for Motor {}
impl Wedge<AntiCircleOnOrigin> for Motor {
    type Output = Motor;
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[3] * other.group1()[0]),
                (self.group1()[3] * other.group1()[1]),
                (self.group1()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for Motor {
    type Output = Plane;
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (Simd32x4::from(self.group1()[3]) * other.group0() * Simd32x4::from(-1.0)));
    }
}
impl Wedge<AntiFlatOrigin> for Motor {
    type Output = Horizon;
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self.group1()[3] * other[e321] * -1.0));
    }
}
impl Wedge<AntiFlatPoint> for Motor {
    type Output = Horizon;
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return Horizon::from_groups(/* e3215 */ (self.group1()[3] * other.group0()[3] * -1.0));
    }
}
impl Wedge<AntiFlector> for Motor {
    type Output = Flector;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group1()[3] * other.group1()[0] * -1.0),
                (self.group1()[3] * other.group1()[1] * -1.0),
                (self.group1()[3] * other.group1()[2] * -1.0),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from([
                (self.group0()[2] * other.group1()[1]),
                (self.group0()[2] * other.group1()[0]),
                (self.group0()[1] * other.group1()[0]),
                (self.group1()[3] * other.group0()[3]),
            ]) * Simd32x4::from([1.0, -1.0, 1.0, -1.0])),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for Motor {
    type Output = Flector;
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group1()[3] * other.group0()[1] * -1.0),
                (self.group1()[3] * other.group0()[2] * -1.0),
                (self.group1()[3] * other.group0()[3] * -1.0),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            (swizzle!(other.group0(), 2, 1, 1, 0)
                * Simd32x4::from([self.group0()[2], self.group0()[2], self.group0()[1], self.group1()[3]])
                * Simd32x4::from([1.0, -1.0, 1.0, -1.0])),
        );
    }
}
impl Wedge<AntiLine> for Motor {
    type Output = Motor;
    fn wedge(self, other: AntiLine) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for Motor {
    type Output = Motor;
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiMotor> for Motor {
    type Output = Motor;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
                ((self.group1()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                (self.group1()[3] * other.group0()[3]),
            ]),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for Motor {
    type Output = Motor;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (self.group0() * Simd32x4::from(other.group0()[3])),
            // e235, e315, e125, e5
            Simd32x4::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group1()[3] * other.group0()[0])),
                ((self.group1()[1] * other.group0()[3]) + (self.group1()[3] * other.group0()[1])),
                ((self.group1()[2] * other.group0()[3]) + (self.group1()[3] * other.group0()[2])),
                (self.group1()[3] * other.group0()[3]),
            ]),
        );
    }
}
impl Wedge<AntiPlane> for Motor {
    type Output = Flector;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0] * -1.0),
                (self.group1()[3] * other.group0()[1] * -1.0),
                (self.group1()[3] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[2] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[0]),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for Motor {
    type Output = Flector;
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0] * -1.0),
                (self.group1()[3] * other.group0()[1] * -1.0),
                (self.group1()[3] * other.group0()[2] * -1.0),
                0.0,
            ]),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[2] * other.group0()[1]),
                (self.group0()[2] * other.group0()[0] * -1.0),
                (self.group0()[1] * other.group0()[0]),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for Motor {
    type Output = Flector;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self.group1()[3]) * other.group0() * Simd32x4::from(-1.0)),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[2] * other.group0()[1]),
                (-(self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other.group0()[3])),
                (self.group0()[1] * other.group0()[0]),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<Circle> for Motor {
    type Output = Plane;
    fn wedge(self, other: Circle) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (Simd32x4::from(self.group1()[3]) * other.group0() * Simd32x4::from(-1.0)));
    }
}
impl Wedge<CircleAligningOrigin> for Motor {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group1()[3]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl Wedge<CircleAtInfinity> for Motor {
    type Output = Horizon;
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return Horizon::from_groups(/* e3215 */ (self.group1()[3] * other.group0()[0] * -1.0));
    }
}
impl Wedge<CircleAtOrigin> for Motor {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group1()[3]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl Wedge<CircleOnOrigin> for Motor {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group1()[3]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl Wedge<CircleOrthogonalOrigin> for Motor {
    type Output = Plane;
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (Simd32x4::from(self.group1()[3]) * other.group0() * Simd32x4::from(-1.0)));
    }
}
impl Wedge<Dipole> for Motor {
    type Output = Motor;
    fn wedge(self, other: Dipole) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[3] * other.group1()[0]),
                (self.group1()[3] * other.group1()[1]),
                (self.group1()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for Motor {
    type Output = MotorOnOrigin;
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group1()[3] * other.group0()[0]),
            (self.group1()[3] * other.group0()[1]),
            (self.group1()[3] * other.group0()[2]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<DipoleAtInfinity> for Motor {
    type Output = Motor;
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<DipoleAtOrigin> for Motor {
    type Output = MotorOnOrigin;
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group1()[3] * other.group0()[0]),
            (self.group1()[3] * other.group0()[1]),
            (self.group1()[3] * other.group0()[2]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<DipoleOnOrigin> for Motor {
    type Output = MotorOnOrigin;
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group1()[3] * other.group0()[0]),
            (self.group1()[3] * other.group0()[1]),
            (self.group1()[3] * other.group0()[2]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<DipoleOrthogonalOrigin> for Motor {
    type Output = Motor;
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                (-(self.group1()[2] * other.group0()[2])
                    - (self.group1()[1] * other.group0()[1])
                    - (self.group1()[0] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group1()[3] * other.group1()[0]),
                (self.group1()[3] * other.group1()[1]),
                (self.group1()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<DualNum> for Motor {
    type Output = Motor;
    fn wedge(self, other: DualNum) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (self.group0() * Simd32x4::from(other.group0()[0])),
            // e235, e315, e125, e5
            (self.group1() * Simd32x4::from(other.group0()[0])),
        );
    }
}
impl Wedge<MultiVector> for Motor {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, ((self.group0()[3] * other.group0()[0]) + (self.group1()[3] * other.group9()[3]))]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            (self.group1()[3] * other.group0()[0]),
            // e41, e42, e43, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group1()[3] * other.group1()[3] * -1.0)]),
            // e15, e25, e35
            (Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                ((self.group0()[0] * other.group0()[0]) + (self.group1()[3] * other.group3()[0])),
                ((self.group0()[1] * other.group0()[0]) + (self.group1()[3] * other.group3()[1])),
                ((self.group0()[2] * other.group0()[0]) + (self.group1()[3] * other.group3()[2])),
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])) + (Simd32x3::from(self.group1()[3]) * other.group5())),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group0()[2] * other.group1()[1]),
                (-(self.group1()[3] * other.group7()[1]) - (self.group0()[2] * other.group1()[0]) - (self.group1()[1] * other.group1()[3])),
                (self.group0()[1] * other.group1()[0]),
                0.0,
            ]),
            // e3215
            (self.group1()[3] * other.group6()[0] * -1.0),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for Motor {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group1()[3]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl Wedge<NullDipoleAtOrigin> for Motor {
    type Output = MotorOnOrigin;
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group1()[3] * other.group0()[0]),
            (self.group1()[3] * other.group0()[1]),
            (self.group1()[3] * other.group0()[2]),
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<NullSphereAtOrigin> for Motor {
    type Output = AntiScalar;
    fn wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group1()[3] * other[e1234]));
    }
}
impl Wedge<Origin> for Motor {
    type Output = FlectorOnOrigin;
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return FlectorOnOrigin::from_groups(
            // e45, e4235, e4315, e4125
            (swizzle!(self.group1(), 3, 0, 1, 2) * Simd32x4::from(other[e4]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<RoundPoint> for Motor {
    type Output = Flector;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self.group1()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * Simd32x4::from(-1.0)),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[2] * other.group0()[1]),
                (-(self.group0()[2] * other.group0()[0]) - (self.group1()[1] * other.group1()[0])),
                (self.group0()[1] * other.group0()[0]),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for Motor {
    type Output = FlectorOnOrigin;
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(
            // e45, e4235, e4315, e4125
            (swizzle!(self.group1(), 3, 0, 1, 2) * Simd32x4::from(other.group0()[0]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<Scalar> for Motor {
    type Output = Motor;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (self.group0() * Simd32x4::from(other[scalar])),
            // e235, e315, e125, e5
            (self.group1() * Simd32x4::from(other[scalar])),
        );
    }
}
impl Wedge<Sphere> for Motor {
    type Output = AntiScalar;
    fn wedge(self, other: Sphere) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group1()[3] * other.group1()[0]));
    }
}
impl Wedge<SphereAtOrigin> for Motor {
    type Output = AntiScalar;
    fn wedge(self, other: SphereAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group1()[3] * other.group0()[0]));
    }
}
impl Wedge<SphereOnOrigin> for Motor {
    type Output = AntiScalar;
    fn wedge(self, other: SphereOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group1()[3] * other.group0()[3]));
    }
}
impl InfixWedge for MotorAtInfinity {}
impl Wedge<AntiCircleOnOrigin> for MotorAtInfinity {
    type Output = Motor;
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for MotorAtInfinity {
    type Output = Plane;
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (Simd32x4::from(self.group0()[3]) * other.group0() * Simd32x4::from(-1.0)));
    }
}
impl Wedge<AntiFlatOrigin> for MotorAtInfinity {
    type Output = Horizon;
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self.group0()[3] * other[e321] * -1.0));
    }
}
impl Wedge<AntiFlatPoint> for MotorAtInfinity {
    type Output = Horizon;
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return Horizon::from_groups(/* e3215 */ (self.group0()[3] * other.group0()[3] * -1.0));
    }
}
impl Wedge<AntiFlector> for MotorAtInfinity {
    type Output = FlectorAtInfinity;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return FlectorAtInfinity::from_groups(
            // e15, e25, e35, e3215
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for MotorAtInfinity {
    type Output = FlectorAtInfinity;
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return FlectorAtInfinity::from_groups(
            // e15, e25, e35, e3215
            (Simd32x4::from(self.group0()[3]) * swizzle!(other.group0(), 1, 2, 3, 0) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<AntiLine> for MotorAtInfinity {
    type Output = LineAtInfinity;
    fn wedge(self, other: AntiLine) -> Self::Output {
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ (Simd32x3::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<AntiLineOnOrigin> for MotorAtInfinity {
    type Output = LineAtInfinity;
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ (Simd32x3::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<AntiMotor> for MotorAtInfinity {
    type Output = MotorAtInfinity;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return MotorAtInfinity::from_groups(/* e235, e315, e125, e5 */ Simd32x4::from([
            ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
            ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
            (self.group0()[3] * other.group0()[3]),
        ]));
    }
}
impl Wedge<AntiMotorOnOrigin> for MotorAtInfinity {
    type Output = MotorAtInfinity;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return MotorAtInfinity::from_groups(/* e235, e315, e125, e5 */ Simd32x4::from([
            ((self.group0()[0] * other.group0()[3]) + (self.group0()[3] * other.group0()[0])),
            ((self.group0()[1] * other.group0()[3]) + (self.group0()[3] * other.group0()[1])),
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[3] * other.group0()[2])),
            (self.group0()[3] * other.group0()[3]),
        ]));
    }
}
impl Wedge<AntiPlane> for MotorAtInfinity {
    type Output = FlectorAtInfinity;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0] * -1.0),
            (self.group0()[3] * other.group0()[1] * -1.0),
            (self.group0()[3] * other.group0()[2] * -1.0),
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiPlaneOnOrigin> for MotorAtInfinity {
    type Output = FlectorAtInfinity;
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0] * -1.0),
            (self.group0()[3] * other.group0()[1] * -1.0),
            (self.group0()[3] * other.group0()[2] * -1.0),
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiSphereOnOrigin> for MotorAtInfinity {
    type Output = Flector;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self.group0()[3]) * other.group0() * Simd32x4::from(-1.0)),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<Circle> for MotorAtInfinity {
    type Output = Plane;
    fn wedge(self, other: Circle) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (Simd32x4::from(self.group0()[3]) * other.group0() * Simd32x4::from(-1.0)));
    }
}
impl Wedge<CircleAligningOrigin> for MotorAtInfinity {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group0()[3]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl Wedge<CircleAtInfinity> for MotorAtInfinity {
    type Output = Horizon;
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return Horizon::from_groups(/* e3215 */ (self.group0()[3] * other.group0()[0] * -1.0));
    }
}
impl Wedge<CircleAtOrigin> for MotorAtInfinity {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group0()[3]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl Wedge<CircleOnOrigin> for MotorAtInfinity {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group0()[3]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl Wedge<CircleOrthogonalOrigin> for MotorAtInfinity {
    type Output = Plane;
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (Simd32x4::from(self.group0()[3]) * other.group0() * Simd32x4::from(-1.0)));
    }
}
impl Wedge<Dipole> for MotorAtInfinity {
    type Output = Motor;
    fn wedge(self, other: Dipole) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for MotorAtInfinity {
    type Output = MotorOnOrigin;
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<DipoleAtInfinity> for MotorAtInfinity {
    type Output = LineAtInfinity;
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ (Simd32x3::from(self.group0()[3]) * other.group0()));
    }
}
impl Wedge<DipoleAtOrigin> for MotorAtInfinity {
    type Output = MotorOnOrigin;
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<DipoleOnOrigin> for MotorAtInfinity {
    type Output = MotorOnOrigin;
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<DipoleOrthogonalOrigin> for MotorAtInfinity {
    type Output = Motor;
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[3] * other.group0()[0]),
                (self.group0()[3] * other.group0()[1]),
                (self.group0()[3] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[3] * other.group1()[0]),
                (self.group0()[3] * other.group1()[1]),
                (self.group0()[3] * other.group1()[2]),
                0.0,
            ]),
        );
    }
}
impl Wedge<DualNum> for MotorAtInfinity {
    type Output = MotorAtInfinity;
    fn wedge(self, other: DualNum) -> Self::Output {
        return MotorAtInfinity::from_groups(/* e235, e315, e125, e5 */ (self.group0() * Simd32x4::from(other.group0()[0])));
    }
}
impl Wedge<MultiVector> for MotorAtInfinity {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, (self.group0()[3] * other.group9()[3])]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            (self.group0()[3] * other.group0()[0]),
            // e41, e42, e43, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[3] * other.group1()[3] * -1.0)]),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[3]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group0()[3] * other.group3()[0]),
                (self.group0()[3] * other.group3()[1]),
                (self.group0()[3] * other.group3()[2]),
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            ((Simd32x3::from(other.group0()[0]) * Simd32x3::from([self.group0()[0], self.group0()[1], self.group0()[2]])) + (Simd32x3::from(self.group0()[3]) * other.group5())),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (-(self.group0()[0] * other.group1()[3]) - (self.group0()[3] * other.group7()[0])),
                (-(self.group0()[1] * other.group1()[3]) - (self.group0()[3] * other.group7()[1])),
                (-(self.group0()[2] * other.group1()[3]) - (self.group0()[3] * other.group7()[2])),
                0.0,
            ]),
            // e3215
            (self.group0()[3] * other.group6()[0] * -1.0),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for MotorAtInfinity {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group0()[3]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl Wedge<NullDipoleAtOrigin> for MotorAtInfinity {
    type Output = MotorOnOrigin;
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[3] * other.group0()[0]),
            (self.group0()[3] * other.group0()[1]),
            (self.group0()[3] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<NullSphereAtOrigin> for MotorAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other[e1234]));
    }
}
impl Wedge<Origin> for MotorAtInfinity {
    type Output = FlectorOnOrigin;
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return FlectorOnOrigin::from_groups(
            // e45, e4235, e4315, e4125
            (swizzle!(self.group0(), 3, 0, 1, 2) * Simd32x4::from(other[e4]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<RoundPoint> for MotorAtInfinity {
    type Output = Flector;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self.group0()[3]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]]) * Simd32x4::from(-1.0)),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0] * -1.0),
                (self.group0()[1] * other.group1()[0] * -1.0),
                (self.group0()[2] * other.group1()[0] * -1.0),
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for MotorAtInfinity {
    type Output = FlectorOnOrigin;
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return FlectorOnOrigin::from_groups(
            // e45, e4235, e4315, e4125
            (swizzle!(self.group0(), 3, 0, 1, 2) * Simd32x4::from(other.group0()[0]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<Scalar> for MotorAtInfinity {
    type Output = MotorAtInfinity;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return MotorAtInfinity::from_groups(/* e235, e315, e125, e5 */ (self.group0() * Simd32x4::from(other[scalar])));
    }
}
impl Wedge<Sphere> for MotorAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: Sphere) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group1()[0]));
    }
}
impl Wedge<SphereAtOrigin> for MotorAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: SphereAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[0]));
    }
}
impl Wedge<SphereOnOrigin> for MotorAtInfinity {
    type Output = AntiScalar;
    fn wedge(self, other: SphereOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[3]));
    }
}
impl InfixWedge for MotorOnOrigin {}
impl Wedge<AntiCircleOnOrigin> for MotorOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiFlector> for MotorOnOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from([(self.group0()[2] * other.group1()[1]), (self.group0()[2] * other.group1()[0]), (self.group0()[1] * other.group1()[0])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for MotorOnOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from([(self.group0()[2] * other.group0()[2]), (self.group0()[2] * other.group0()[1]), (self.group0()[1] * other.group0()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<AntiLine> for MotorOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiLine) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for MotorOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiMotor> for MotorOnOrigin {
    type Output = MotorOnOrigin;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ (self.group0() * Simd32x4::from(other.group0()[3])));
    }
}
impl Wedge<AntiMotorOnOrigin> for MotorOnOrigin {
    type Output = MotorOnOrigin;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ (self.group0() * Simd32x4::from(other.group0()[3])));
    }
}
impl Wedge<AntiPlane> for MotorOnOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from([(self.group0()[2] * other.group0()[1]), (self.group0()[2] * other.group0()[0]), (self.group0()[1] * other.group0()[0])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for MotorOnOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([self.group0()[2], self.group0()[2], self.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for MotorOnOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from([(self.group0()[2] * other.group0()[1]), (self.group0()[2] * other.group0()[0]), (self.group0()[1] * other.group0()[0])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<Dipole> for MotorOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: Dipole) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for MotorOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for MotorOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DualNum> for MotorOnOrigin {
    type Output = MotorOnOrigin;
    fn wedge(self, other: DualNum) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ (self.group0() * Simd32x4::from(other.group0()[0])));
    }
}
impl Wedge<MultiVector> for MotorOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, (self.group0()[3] * other.group0()[0])]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group0()[2] * other.group1()[1]),
                (self.group0()[2] * other.group1()[0] * -1.0),
                (self.group0()[1] * other.group1()[0]),
                0.0,
            ]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<RoundPoint> for MotorOnOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([self.group0()[2], self.group0()[2], self.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<Scalar> for MotorOnOrigin {
    type Output = MotorOnOrigin;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ (self.group0() * Simd32x4::from(other[scalar])));
    }
}
impl InfixWedge for MultiVector {}
impl Wedge<AntiCircleOnOrigin> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group8()[2] * other.group0()[2])
                    - (self.group8()[1] * other.group0()[1])
                    - (self.group8()[0] * other.group0()[0])
                    - (self.group6()[3] * other.group1()[2])
                    - (self.group6()[1] * other.group1()[0])
                    - (self.group6()[2] * other.group1()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[0]) * other.group1()),
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
                (self[e1] * other.group0()[0]),
                (self[e1] * other.group0()[1]),
                (self[e1] * other.group0()[2]),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                ((self.group1()[2] * other.group0()[1]) + (self.group1()[3] * other.group1()[0])),
                (self.group1()[2] * other.group0()[0] * -1.0),
                ((self.group1()[1] * other.group0()[0]) + (self.group1()[3] * other.group1()[2])),
            ]),
            // e235, e315, e125
            (Simd32x3::from(self[e1]) * other.group1()),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                ((self.group3()[3] * other.group1()[0]) + (self.group4()[2] * other.group0()[1])),
                (self.group4()[2] * other.group0()[0] * -1.0),
                ((self.group3()[3] * other.group1()[2]) + (self.group4()[1] * other.group0()[0])),
                (-(self.group5()[2] * other.group0()[2])
                    - (self.group5()[1] * other.group0()[1])
                    - (self.group5()[0] * other.group0()[0])
                    - (self.group3()[2] * other.group1()[2])
                    - (self.group3()[0] * other.group1()[0])
                    - (self.group3()[1] * other.group1()[1])),
            ]),
            // e3215
            (-(self.group4()[2] * other.group1()[2]) - (self.group4()[0] * other.group1()[0]) - (self.group4()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group4()[2] * other.group0()[2])
                    - (self.group4()[1] * other.group0()[1])
                    - (self.group3()[3] * other.group0()[3])
                    - (self.group4()[0] * other.group0()[0])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([(self.group0()[0] * other.group0()[3]), 0.0, 0.0, 0.0]),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self[e1] * other.group0()[0] * -1.0),
                (self[e1] * other.group0()[1] * -1.0),
                (self[e1] * other.group0()[2] * -1.0),
                ((self.group1()[3] * other.group0()[3]) + (self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
            // e3215
            (self[e1] * other.group0()[3] * -1.0),
        );
    }
}
impl Wedge<AntiFlatOrigin> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, (self.group3()[3] * other[e321] * -1.0)]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([(self.group0()[0] * other[e321]), 0.0, 0.0, 0.0]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (self.group1()[3] * other[e321])]),
            // e3215
            (self[e1] * other[e321] * -1.0),
        );
    }
}
impl Wedge<AntiFlatPoint> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group3()[3] * other.group0()[3])
                    - (self.group3()[2] * other.group0()[2])
                    - (self.group3()[0] * other.group0()[0])
                    - (self.group3()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([(self.group0()[0] * other.group0()[3]), 0.0, 0.0, 0.0]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e4235, e4315, e4125, e1234
            (Simd32x4::from(self.group1()[3]) * other.group0()),
            // e3215
            (-(self[e1] * other.group0()[3]) - (self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlector> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group9()[3] * other.group1()[3]) + (self.group9()[2] * other.group1()[2]) + (self.group9()[0] * other.group1()[0]) + (self.group9()[1] * other.group1()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
                0.0,
            ]),
            // e5
            (self.group0()[0] * other.group1()[3]),
            // e41, e42, e43, e45
            (Simd32x4::from(self.group1()[3]) * other.group1()),
            // e15, e25, e35
            (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])),
            // e23, e31, e12
            (Simd32x3::from([(self.group1()[1] * other.group1()[2]), (self.group1()[0] * other.group1()[2]), (self.group1()[0] * other.group1()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group5()[2] * other.group1()[2]) - (self.group5()[0] * other.group1()[0]) - (self.group5()[1] * other.group1()[1])),
                (self.group3()[3] * other.group1()[0] * -1.0),
                (self.group3()[3] * other.group1()[1] * -1.0),
                (self.group3()[3] * other.group1()[2] * -1.0),
            ]),
            // e423, e431, e412
            (Simd32x3::from([(self.group3()[1] * other.group1()[2]), (self.group3()[0] * other.group1()[2]), (self.group3()[0] * other.group1()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group5()[0] * other.group1()[3]) + (self.group0()[0] * other.group0()[0]) + (self.group4()[2] * other.group1()[1])),
                (self.group4()[2] * other.group1()[0] * -1.0),
                ((self.group5()[2] * other.group1()[3]) + (self.group0()[0] * other.group0()[2]) + (self.group4()[1] * other.group1()[0])),
            ]),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                ((self.group7()[0] * other.group1()[3]) + (self.group1()[3] * other.group0()[0]) + (self.group6()[3] * other.group1()[1])),
                (self.group6()[3] * other.group1()[0] * -1.0),
                ((self.group7()[2] * other.group1()[3]) + (self.group1()[3] * other.group0()[2]) + (self.group6()[2] * other.group1()[0])),
                (self.group1()[3] * other.group0()[3]),
            ]),
            // e3215
            (-(self[e1] * other.group0()[3]) - (self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group9()[2] * other.group0()[3]) + (self.group9()[0] * other.group0()[1]) + (self.group9()[1] * other.group0()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[0] * other.group0()[3]),
                0.0,
            ]),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                (self.group1()[3] * other.group0()[3]),
                0.0,
            ]),
            // e15, e25, e35
            (Simd32x3::from(self[e1]) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[3]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (Simd32x3::from([(self.group1()[1] * other.group0()[3]), (self.group1()[0] * other.group0()[3]), (self.group1()[0] * other.group0()[2])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group5()[2] * other.group0()[3]) - (self.group5()[0] * other.group0()[1]) - (self.group5()[1] * other.group0()[2])),
                (self.group3()[3] * other.group0()[1] * -1.0),
                (self.group3()[3] * other.group0()[2] * -1.0),
                (self.group3()[3] * other.group0()[3] * -1.0),
            ]),
            // e423, e431, e412
            (Simd32x3::from([(self.group3()[1] * other.group0()[3]), (self.group3()[0] * other.group0()[3]), (self.group3()[0] * other.group0()[2])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e235, e315, e125
            (swizzle!(self.group4(), 2, 2, 1) * Simd32x3::from([other.group0()[2], other.group0()[1], other.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e1234
            (swizzle!(other.group0(), 2, 1, 1, 0)
                * Simd32x4::from([self.group6()[3], self.group6()[3], self.group6()[2], self.group1()[3]])
                * Simd32x4::from([1.0, -1.0, 1.0, 1.0])),
            // e3215
            (self[e1] * other.group0()[0] * -1.0),
        );
    }
}
impl Wedge<AntiLine> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group7()[2] * other.group1()[2])
                    - (self.group7()[1] * other.group1()[1])
                    - (self.group7()[0] * other.group1()[0])
                    - (self.group6()[3] * other.group0()[2])
                    - (self.group6()[1] * other.group0()[0])
                    - (self.group6()[2] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[0]) * other.group1()),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                (self.group1()[3] * other.group1()[0]),
                (self.group1()[3] * other.group1()[1]),
                (self.group1()[3] * other.group1()[2]),
            ]),
            // e423, e431, e412
            (Simd32x3::from(self.group1()[3]) * other.group0()),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group1()[1] * other.group1()[2]) + (self[e1] * other.group0()[0])),
                (self.group1()[0] * other.group1()[2] * -1.0),
                ((self.group1()[0] * other.group1()[1]) + (self[e1] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                ((self.group3()[1] * other.group1()[2]) + (self.group3()[3] * other.group0()[0])),
                (self.group3()[0] * other.group1()[2] * -1.0),
                ((self.group3()[0] * other.group1()[1]) + (self.group3()[3] * other.group0()[2])),
                (-(self.group3()[2] * other.group0()[2]) - (self.group3()[0] * other.group0()[0]) - (self.group3()[1] * other.group0()[1])),
            ]),
            // e3215
            (-(self.group5()[2] * other.group1()[2])
                - (self.group5()[1] * other.group1()[1])
                - (self.group5()[0] * other.group1()[0])
                - (self.group4()[2] * other.group0()[2])
                - (self.group4()[0] * other.group0()[0])
                - (self.group4()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group6()[3] * other.group0()[2]) - (self.group6()[1] * other.group0()[0]) - (self.group6()[2] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                0.0,
                0.0,
                0.0,
            ]),
            // e423, e431, e412
            (Simd32x3::from(self.group1()[3]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self[e1]) * other.group0()),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group3()[3] * other.group0()[0]),
                (self.group3()[3] * other.group0()[1]),
                (self.group3()[3] * other.group0()[2]),
                (-(self.group3()[2] * other.group0()[2]) - (self.group3()[0] * other.group0()[0]) - (self.group3()[1] * other.group0()[1])),
            ]),
            // e3215
            (-(self.group4()[2] * other.group0()[2]) - (self.group4()[0] * other.group0()[0]) - (self.group4()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiMotor> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self.group0()[0] * other.group0()[3]),
                ((self.group0()[1] * other.group0()[3]) + (self.group1()[3] * other.group1()[3])),
            ]),
            // e1, e2, e3, e4
            (self.group1() * Simd32x4::from(other.group0()[3])),
            // e5
            (self[e1] * other.group0()[3]),
            // e41, e42, e43, e45
            (self.group3() * Simd32x4::from(other.group0()[3])),
            // e15, e25, e35
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])) + (self.group4() * Simd32x3::from(other.group0()[3]))),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])) + (self.group5() * Simd32x3::from(other.group0()[3]))),
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                ((self.group1()[3] * other.group1()[0]) + (self.group6()[1] * other.group0()[3])),
                ((self.group1()[3] * other.group1()[1]) + (self.group6()[2] * other.group0()[3])),
                ((self.group1()[3] * other.group1()[2]) + (self.group6()[3] * other.group0()[3])),
            ]),
            // e423, e431, e412
            ((Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])) + (self.group7() * Simd32x3::from(other.group0()[3]))),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group8()[0] * other.group0()[3]) + (self.group1()[1] * other.group1()[2]) + (self[e1] * other.group0()[0])),
                (self.group1()[0] * other.group1()[2] * -1.0),
                ((self.group8()[2] * other.group0()[3]) + (self.group1()[0] * other.group1()[1]) + (self[e1] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                ((self.group9()[0] * other.group0()[3]) + (self.group3()[1] * other.group1()[2]) + (self.group3()[3] * other.group0()[0])),
                (self.group3()[0] * other.group1()[2] * -1.0),
                ((self.group9()[2] * other.group0()[3]) + (self.group3()[0] * other.group1()[1]) + (self.group3()[3] * other.group0()[2])),
                (self.group9()[3] * other.group0()[3]),
            ]),
            // e3215
            (-(self.group5()[2] * other.group1()[2])
                - (self.group5()[1] * other.group1()[1])
                - (self.group5()[0] * other.group1()[0])
                - (self.group4()[2] * other.group0()[2])
                - (self.group4()[0] * other.group0()[0])
                - (self.group4()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (self.group0() * Simd32x2::from(other.group0()[3])),
            // e1, e2, e3, e4
            (self.group1() * Simd32x4::from(other.group0()[3])),
            // e5
            (self[e1] * other.group0()[3]),
            // e41, e42, e43, e45
            (self.group3() * Simd32x4::from(other.group0()[3])),
            // e15, e25, e35
            (self.group4() * Simd32x3::from(other.group0()[3])),
            // e23, e31, e12
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])) + (self.group5() * Simd32x3::from(other.group0()[3]))),
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                (self.group6()[1] * other.group0()[3]),
                (self.group6()[2] * other.group0()[3]),
                (self.group6()[3] * other.group0()[3]),
            ]),
            // e423, e431, e412
            ((Simd32x3::from(self.group1()[3]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])) + (self.group7() * Simd32x3::from(other.group0()[3]))),
            // e235, e315, e125
            ((Simd32x3::from(self[e1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])) + (self.group8() * Simd32x3::from(other.group0()[3]))),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                ((self.group3()[3] * other.group0()[0]) + (self.group9()[0] * other.group0()[3])),
                ((self.group3()[3] * other.group0()[1]) + (self.group9()[1] * other.group0()[3])),
                ((self.group3()[3] * other.group0()[2]) + (self.group9()[2] * other.group0()[3])),
                (self.group9()[3] * other.group0()[3]),
            ]),
            // e3215
            (-(self.group4()[2] * other.group0()[2]) - (self.group4()[0] * other.group0()[0]) - (self.group4()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiPlane> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group9()[3] * other.group0()[3]) + (self.group9()[2] * other.group0()[2]) + (self.group9()[0] * other.group0()[0]) + (self.group9()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
            // e5
            (self.group0()[0] * other.group0()[3]),
            // e41, e42, e43, e45
            (Simd32x4::from(self.group1()[3]) * other.group0()),
            // e15, e25, e35
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])),
            // e23, e31, e12
            (Simd32x3::from([(self.group1()[1] * other.group0()[2]), (self.group1()[0] * other.group0()[2]), (self.group1()[0] * other.group0()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group5()[2] * other.group0()[2]) - (self.group5()[0] * other.group0()[0]) - (self.group5()[1] * other.group0()[1])),
                (self.group3()[3] * other.group0()[0] * -1.0),
                (self.group3()[3] * other.group0()[1] * -1.0),
                (self.group3()[3] * other.group0()[2] * -1.0),
            ]),
            // e423, e431, e412
            (Simd32x3::from([(self.group3()[1] * other.group0()[2]), (self.group3()[0] * other.group0()[2]), (self.group3()[0] * other.group0()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group4()[2] * other.group0()[1]) + (self.group5()[0] * other.group0()[3])),
                (self.group4()[2] * other.group0()[0] * -1.0),
                ((self.group4()[1] * other.group0()[0]) + (self.group5()[2] * other.group0()[3])),
            ]),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                ((self.group6()[3] * other.group0()[1]) + (self.group7()[0] * other.group0()[3])),
                (self.group6()[3] * other.group0()[0] * -1.0),
                ((self.group6()[2] * other.group0()[0]) + (self.group7()[2] * other.group0()[3])),
                (-(self.group7()[2] * other.group0()[2]) - (self.group7()[0] * other.group0()[0]) - (self.group7()[1] * other.group0()[1])),
            ]),
            // e3215
            ((self.group8()[2] * other.group0()[2]) + (self.group8()[1] * other.group0()[1]) + (self.group6()[0] * other.group0()[3]) + (self.group8()[0] * other.group0()[0])),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group9()[2] * other.group0()[2]) + (self.group9()[0] * other.group0()[0]) + (self.group9()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35
            (Simd32x3::from(self[e1]) * other.group0() * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (swizzle!(other.group0(), 2, 2, 1) * Simd32x3::from([self.group1()[1], self.group1()[0], self.group1()[0]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group5()[2] * other.group0()[2]) - (self.group5()[0] * other.group0()[0]) - (self.group5()[1] * other.group0()[1])),
                (self.group3()[3] * other.group0()[0] * -1.0),
                (self.group3()[3] * other.group0()[1] * -1.0),
                (self.group3()[3] * other.group0()[2] * -1.0),
            ]),
            // e423, e431, e412
            (swizzle!(other.group0(), 2, 2, 1) * Simd32x3::from([self.group3()[1], self.group3()[0], self.group3()[0]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e235, e315, e125
            (swizzle!(self.group4(), 2, 2, 1) * swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group6()[3] * other.group0()[1]),
                (self.group6()[3] * other.group0()[0] * -1.0),
                (self.group6()[2] * other.group0()[0]),
                (-(self.group7()[2] * other.group0()[2]) - (self.group7()[0] * other.group0()[0]) - (self.group7()[1] * other.group0()[1])),
            ]),
            // e3215
            ((self.group8()[2] * other.group0()[2]) + (self.group8()[0] * other.group0()[0]) + (self.group8()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiScalar> for MultiVector {
    type Output = AntiScalar;
    fn wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[0] * other[e12345]));
    }
}
impl Wedge<AntiSphereOnOrigin> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self[e45] * other.group0()[3]) + (self.group9()[2] * other.group0()[2]) + (self.group9()[0] * other.group0()[0]) + (self.group9()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e5
            0.0,
            // e41, e42, e43, e45
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self[e1]]) * Simd32x4::from(-1.0)),
            // e15, e25, e35
            (Simd32x3::from(self[e1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (Simd32x3::from([(self.group1()[1] * other.group0()[2]), (self.group1()[0] * other.group0()[2]), (self.group1()[0] * other.group0()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group5()[2] * other.group0()[2]) - (self.group5()[0] * other.group0()[0]) - (self.group5()[1] * other.group0()[1])),
                (self.group3()[3] * other.group0()[0] * -1.0),
                (self.group3()[3] * other.group0()[1] * -1.0),
                (self.group3()[3] * other.group0()[2] * -1.0),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                ((self.group3()[1] * other.group0()[2]) + (self.group5()[0] * other.group0()[3])),
                (self.group3()[0] * other.group0()[2] * -1.0),
                ((self.group3()[0] * other.group0()[1]) + (self.group5()[2] * other.group0()[3])),
            ]),
            // e235, e315, e125
            (swizzle!(self.group4(), 2, 2, 1) * Simd32x3::from([other.group0()[1], other.group0()[0], other.group0()[0]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group6()[3] * other.group0()[1]),
                (-(self.group6()[3] * other.group0()[0]) - (self.group8()[1] * other.group0()[3])),
                (self.group6()[2] * other.group0()[0]),
                (-(self.group7()[2] * other.group0()[2])
                    - (self.group7()[1] * other.group0()[1])
                    - (self.group6()[0] * other.group0()[3])
                    - (self.group7()[0] * other.group0()[0])),
            ]),
            // e3215
            ((self.group8()[2] * other.group0()[2]) + (self.group8()[0] * other.group0()[0]) + (self.group8()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Circle> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group5()[2] * other.group1()[2])
                    - (self.group5()[1] * other.group1()[1])
                    - (self.group5()[0] * other.group1()[0])
                    - (self.group4()[2] * other.group0()[2])
                    - (self.group4()[1] * other.group0()[1])
                    - (self.group4()[0] * other.group0()[0])
                    - (self.group3()[3] * other.group0()[3])
                    - (self.group3()[2] * other.group2()[2])
                    - (self.group3()[0] * other.group2()[0])
                    - (self.group3()[1] * other.group2()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[3], other.group1()[0], other.group1()[1], other.group1()[2]])),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[0]) * other.group2()),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                ((self.group1()[2] * other.group1()[1]) + (self.group1()[3] * other.group2()[0])),
                (-(self.group1()[2] * other.group1()[0]) - (self[e1] * other.group0()[1])),
                ((self.group1()[1] * other.group1()[0]) + (self.group1()[3] * other.group2()[2])),
                ((self.group1()[3] * other.group0()[3]) + (self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
            // e3215
            (-(self[e1] * other.group0()[3]) - (self.group1()[2] * other.group2()[2]) - (self.group1()[0] * other.group2()[0]) - (self.group1()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<CircleAligningOrigin> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group5()[2] * other.group1()[2])
                    - (self.group5()[1] * other.group1()[1])
                    - (self.group5()[0] * other.group1()[0])
                    - (self.group4()[2] * other.group0()[2])
                    - (self.group4()[1] * other.group0()[1])
                    - (self.group4()[0] * other.group0()[0])
                    - (self.group3()[2] * other.group2()[2])
                    - (self.group3()[0] * other.group2()[0])
                    - (self.group3()[1] * other.group2()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
            ]),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[0]) * other.group2()),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                ((self.group1()[2] * other.group1()[1]) + (self.group1()[3] * other.group2()[0])),
                (-(self.group1()[2] * other.group1()[0]) - (self[e1] * other.group0()[1])),
                ((self.group1()[1] * other.group1()[0]) + (self.group1()[3] * other.group2()[2])),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
            // e3215
            (-(self.group1()[2] * other.group2()[2]) - (self.group1()[0] * other.group2()[0]) - (self.group1()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<CircleAtInfinity> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group5()[2] * other.group0()[3])
                    - (self.group5()[1] * other.group0()[2])
                    - (self.group5()[0] * other.group0()[1])
                    - (self.group3()[3] * other.group0()[0])
                    - (self.group3()[2] * other.group1()[2])
                    - (self.group3()[0] * other.group1()[0])
                    - (self.group3()[1] * other.group1()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[0]) * other.group1()),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[3] * other.group1()[0])),
                (self.group1()[2] * other.group0()[1] * -1.0),
                ((self.group1()[1] * other.group0()[1]) + (self.group1()[3] * other.group1()[2])),
                (self.group1()[3] * other.group0()[0]),
            ]),
            // e3215
            (-(self[e1] * other.group0()[0]) - (self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleAtOrigin> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group4()[2] * other.group0()[2])
                    - (self.group4()[1] * other.group0()[1])
                    - (self.group4()[0] * other.group0()[0])
                    - (self.group3()[2] * other.group1()[2])
                    - (self.group3()[0] * other.group1()[0])
                    - (self.group3()[1] * other.group1()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[0]) * other.group1()),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group1()[3] * other.group1()[0]),
                (self[e1] * other.group0()[1] * -1.0),
                (self.group1()[3] * other.group1()[2]),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
            // e3215
            (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleOnOrigin> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group5()[2] * other.group1()[2])
                    - (self.group5()[1] * other.group1()[1])
                    - (self.group5()[0] * other.group1()[0])
                    - (self.group4()[2] * other.group0()[2])
                    - (self.group4()[0] * other.group0()[0])
                    - (self.group4()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
            ]),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group1()[2] * other.group1()[1]),
                (-(self.group1()[2] * other.group1()[0]) - (self[e1] * other.group0()[1])),
                (self.group1()[1] * other.group1()[0]),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group4()[2] * other.group0()[2])
                    - (self.group4()[1] * other.group0()[1])
                    - (self.group4()[0] * other.group0()[0])
                    - (self.group3()[3] * other.group0()[3])
                    - (self.group3()[2] * other.group1()[2])
                    - (self.group3()[0] * other.group1()[0])
                    - (self.group3()[1] * other.group1()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([(self.group0()[0] * other.group0()[3]), 0.0, 0.0, 0.0]),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[0]) * other.group1()),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group1()[3] * other.group1()[0]),
                (self[e1] * other.group0()[1] * -1.0),
                (self.group1()[3] * other.group1()[2]),
                ((self.group1()[3] * other.group0()[3]) + (self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
            // e3215
            (-(self[e1] * other.group0()[3]) - (self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<Dipole> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group8()[2] * other.group0()[2])
                    - (self.group8()[1] * other.group0()[1])
                    - (self.group8()[0] * other.group0()[0])
                    - (self.group7()[2] * other.group2()[2])
                    - (self.group7()[1] * other.group2()[1])
                    - (self.group7()[0] * other.group2()[0])
                    - (self.group6()[3] * other.group1()[2])
                    - (self.group6()[2] * other.group1()[1])
                    - (self.group6()[0] * other.group2()[3])
                    - (self.group6()[1] * other.group1()[0])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group2()[3]])),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]])),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[0]) * other.group1()),
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
                (self.group1()[0] * other.group2()[3] * -1.0),
                (self.group1()[1] * other.group2()[3] * -1.0),
                (self.group1()[2] * other.group2()[3] * -1.0),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                ((self.group1()[2] * other.group0()[1]) + (self.group1()[3] * other.group1()[0])),
                (self.group1()[2] * other.group0()[0] * -1.0),
                ((self.group1()[1] * other.group0()[0]) + (self.group1()[3] * other.group1()[2])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group1()[1] * other.group2()[2]) + (self[e1] * other.group1()[0])),
                (self.group1()[0] * other.group2()[2] * -1.0),
                ((self.group1()[0] * other.group2()[1]) + (self[e1] * other.group1()[2])),
            ]),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                ((self.group5()[0] * other.group2()[3]) + (self.group4()[2] * other.group0()[1]) + (self.group3()[1] * other.group2()[2]) + (self.group3()[3] * other.group1()[0])),
                (-(self.group3()[0] * other.group2()[2]) - (self.group4()[2] * other.group0()[0])),
                ((self.group5()[2] * other.group2()[3]) + (self.group4()[1] * other.group0()[0]) + (self.group3()[0] * other.group2()[1]) + (self.group3()[3] * other.group1()[2])),
                (-(self.group5()[2] * other.group0()[2])
                    - (self.group5()[1] * other.group0()[1])
                    - (self.group5()[0] * other.group0()[0])
                    - (self.group3()[2] * other.group1()[2])
                    - (self.group3()[0] * other.group1()[0])
                    - (self.group3()[1] * other.group1()[1])),
            ]),
            // e3215
            (-(self.group5()[2] * other.group2()[2])
                - (self.group5()[1] * other.group2()[1])
                - (self.group5()[0] * other.group2()[0])
                - (self.group4()[2] * other.group1()[2])
                - (self.group4()[0] * other.group1()[0])
                - (self.group4()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group8()[2] * other.group0()[2])
                    - (self.group8()[1] * other.group0()[1])
                    - (self.group8()[0] * other.group0()[0])
                    - (self.group7()[2] * other.group1()[2])
                    - (self.group7()[1] * other.group1()[1])
                    - (self.group6()[0] * other.group1()[3])
                    - (self.group7()[0] * other.group1()[0])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group1()[0] * other.group1()[3] * -1.0),
                (self.group1()[1] * other.group1()[3] * -1.0),
                (self.group1()[2] * other.group1()[3] * -1.0),
            ]),
            // e423, e431, e412
            (swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([self.group1()[2], self.group1()[2], self.group1()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e235, e315, e125
            (Simd32x3::from([(self.group1()[1] * other.group1()[2]), (self.group1()[0] * other.group1()[2]), (self.group1()[0] * other.group1()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                ((self.group5()[0] * other.group1()[3]) + (self.group3()[1] * other.group1()[2]) + (self.group4()[2] * other.group0()[1])),
                (-(self.group3()[0] * other.group1()[2]) - (self.group4()[2] * other.group0()[0])),
                ((self.group5()[2] * other.group1()[3]) + (self.group3()[0] * other.group1()[1]) + (self.group4()[1] * other.group0()[0])),
                (-(self.group5()[2] * other.group0()[2]) - (self.group5()[0] * other.group0()[0]) - (self.group5()[1] * other.group0()[1])),
            ]),
            // e3215
            (-(self.group5()[2] * other.group1()[2]) - (self.group5()[0] * other.group1()[0]) - (self.group5()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group7()[2] * other.group1()[2])
                    - (self.group7()[1] * other.group1()[1])
                    - (self.group7()[0] * other.group1()[0])
                    - (self.group6()[3] * other.group0()[2])
                    - (self.group6()[2] * other.group0()[1])
                    - (self.group6()[0] * other.group1()[3])
                    - (self.group6()[1] * other.group0()[0])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group1()[3])]),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
                (self.group1()[0] * other.group1()[3] * -1.0),
                (self.group1()[1] * other.group1()[3] * -1.0),
                (self.group1()[2] * other.group1()[3] * -1.0),
            ]),
            // e423, e431, e412
            (Simd32x3::from(self.group1()[3]) * other.group0()),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group1()[1] * other.group1()[2]) + (self[e1] * other.group0()[0])),
                (self.group1()[0] * other.group1()[2] * -1.0),
                ((self.group1()[0] * other.group1()[1]) + (self[e1] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                ((self.group5()[0] * other.group1()[3]) + (self.group3()[1] * other.group1()[2]) + (self.group3()[3] * other.group0()[0])),
                (self.group3()[0] * other.group1()[2] * -1.0),
                ((self.group5()[2] * other.group1()[3]) + (self.group3()[0] * other.group1()[1]) + (self.group3()[3] * other.group0()[2])),
                (-(self.group3()[2] * other.group0()[2]) - (self.group3()[0] * other.group0()[0]) - (self.group3()[1] * other.group0()[1])),
            ]),
            // e3215
            (-(self.group5()[2] * other.group1()[2])
                - (self.group5()[1] * other.group1()[1])
                - (self.group5()[0] * other.group1()[0])
                - (self.group4()[2] * other.group0()[2])
                - (self.group4()[0] * other.group0()[0])
                - (self.group4()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DipoleAtOrigin> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group8()[2] * other.group0()[2])
                    - (self.group8()[1] * other.group0()[1])
                    - (self.group8()[0] * other.group0()[0])
                    - (self.group7()[2] * other.group1()[2])
                    - (self.group7()[0] * other.group1()[0])
                    - (self.group7()[1] * other.group1()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[0]) * other.group1()),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                ((self.group1()[3] * other.group1()[0]) + (self[e1] * other.group0()[0])),
                ((self.group1()[3] * other.group1()[1]) + (self[e1] * other.group0()[1])),
                ((self.group1()[3] * other.group1()[2]) + (self[e1] * other.group0()[2])),
            ]),
            // e423, e431, e412
            (swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([self.group1()[2], self.group1()[2], self.group1()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e235, e315, e125
            (swizzle!(other.group1(), 2, 2, 1) * Simd32x3::from([self.group1()[1], self.group1()[0], self.group1()[0]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                ((self.group3()[1] * other.group1()[2]) + (self.group4()[2] * other.group0()[1])),
                (-(self.group3()[0] * other.group1()[2]) - (self.group4()[2] * other.group0()[0])),
                ((self.group3()[0] * other.group1()[1]) + (self.group4()[1] * other.group0()[0])),
                (-(self.group5()[2] * other.group0()[2]) - (self.group5()[0] * other.group0()[0]) - (self.group5()[1] * other.group0()[1])),
            ]),
            // e3215
            (-(self.group5()[2] * other.group1()[2]) - (self.group5()[0] * other.group1()[0]) - (self.group5()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleOnOrigin> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group8()[2] * other.group0()[2])
                    - (self.group8()[1] * other.group0()[1])
                    - (self.group6()[0] * other.group0()[3])
                    - (self.group8()[0] * other.group0()[0])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group1()[0] * other.group0()[3] * -1.0),
                (self.group1()[1] * other.group0()[3] * -1.0),
                (self.group1()[2] * other.group0()[3] * -1.0),
            ]),
            // e423, e431, e412
            (Simd32x3::from([(self.group1()[2] * other.group0()[1]), (self.group1()[2] * other.group0()[0]), (self.group1()[1] * other.group0()[0])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                ((self.group4()[2] * other.group0()[1]) + (self.group5()[0] * other.group0()[3])),
                (self.group4()[2] * other.group0()[0] * -1.0),
                ((self.group4()[1] * other.group0()[0]) + (self.group5()[2] * other.group0()[3])),
                (-(self.group5()[2] * other.group0()[2]) - (self.group5()[0] * other.group0()[0]) - (self.group5()[1] * other.group0()[1])),
            ]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group8()[2] * other.group0()[2])
                    - (self.group8()[1] * other.group0()[1])
                    - (self.group8()[0] * other.group0()[0])
                    - (self.group7()[2] * other.group2()[2])
                    - (self.group7()[1] * other.group2()[1])
                    - (self.group7()[0] * other.group2()[0])
                    - (self.group6()[3] * other.group1()[2])
                    - (self.group6()[1] * other.group1()[0])
                    - (self.group6()[2] * other.group1()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[0]) * other.group2()),
            // e23, e31, e12
            (Simd32x3::from(self.group0()[0]) * other.group1()),
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
                ((self.group1()[3] * other.group2()[0]) + (self[e1] * other.group0()[0])),
                ((self.group1()[3] * other.group2()[1]) + (self[e1] * other.group0()[1])),
                ((self.group1()[3] * other.group2()[2]) + (self[e1] * other.group0()[2])),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                ((self.group1()[2] * other.group0()[1]) + (self.group1()[3] * other.group1()[0])),
                (self.group1()[2] * other.group0()[0] * -1.0),
                ((self.group1()[1] * other.group0()[0]) + (self.group1()[3] * other.group1()[2])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group1()[1] * other.group2()[2]) + (self[e1] * other.group1()[0])),
                (self.group1()[0] * other.group2()[2] * -1.0),
                ((self.group1()[0] * other.group2()[1]) + (self[e1] * other.group1()[2])),
            ]),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                ((self.group4()[2] * other.group0()[1]) + (self.group3()[1] * other.group2()[2]) + (self.group3()[3] * other.group1()[0])),
                (-(self.group3()[0] * other.group2()[2]) - (self.group4()[2] * other.group0()[0])),
                ((self.group4()[1] * other.group0()[0]) + (self.group3()[0] * other.group2()[1]) + (self.group3()[3] * other.group1()[2])),
                (-(self.group5()[2] * other.group0()[2])
                    - (self.group5()[1] * other.group0()[1])
                    - (self.group5()[0] * other.group0()[0])
                    - (self.group3()[2] * other.group1()[2])
                    - (self.group3()[0] * other.group1()[0])
                    - (self.group3()[1] * other.group1()[1])),
            ]),
            // e3215
            (-(self.group5()[2] * other.group2()[2])
                - (self.group5()[1] * other.group2()[1])
                - (self.group5()[0] * other.group2()[0])
                - (self.group4()[2] * other.group1()[2])
                - (self.group4()[0] * other.group1()[0])
                - (self.group4()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DualNum> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self.group0()[0] * other.group0()[0]),
                ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])),
            ]),
            // e1, e2, e3, e4
            (self.group1() * Simd32x4::from(other.group0()[0])),
            // e5
            (self[e1] * other.group0()[0]),
            // e41, e42, e43, e45
            (self.group3() * Simd32x4::from(other.group0()[0])),
            // e15, e25, e35
            (self.group4() * Simd32x3::from(other.group0()[0])),
            // e23, e31, e12
            (self.group5() * Simd32x3::from(other.group0()[0])),
            // e321, e415, e425, e435
            (self.group6() * Simd32x4::from(other.group0()[0])),
            // e423, e431, e412
            (self.group7() * Simd32x3::from(other.group0()[0])),
            // e235, e315, e125
            (self.group8() * Simd32x3::from(other.group0()[0])),
            // e4235, e4315, e4125, e1234
            (self.group9() * Simd32x4::from(other.group0()[0])),
            // e3215
            (self[e45] * other.group0()[0]),
        );
    }
}
impl Wedge<FlatOrigin> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, (self.group6()[0] * other[e45] * -1.0)]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other[e45])]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group1()[0] * other[e45] * -1.0),
                (self.group1()[1] * other[e45] * -1.0),
                (self.group1()[2] * other[e45] * -1.0),
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([(self.group5()[0] * other[e45]), (self.group5()[1] * other[e45]), (self.group5()[2] * other[e45]), 0.0]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<FlatPoint> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group7()[2] * other.group0()[2])
                    - (self.group7()[1] * other.group0()[1])
                    - (self.group6()[0] * other.group0()[3])
                    - (self.group7()[0] * other.group0()[0])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group1()[0] * other.group0()[3] * -1.0),
                (self.group1()[1] * other.group0()[3] * -1.0),
                (self.group1()[2] * other.group0()[3] * -1.0),
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (Simd32x3::from([(self.group1()[1] * other.group0()[2]), (self.group1()[0] * other.group0()[2]), (self.group1()[0] * other.group0()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                ((self.group3()[1] * other.group0()[2]) + (self.group5()[0] * other.group0()[3])),
                (self.group3()[0] * other.group0()[2] * -1.0),
                ((self.group3()[0] * other.group0()[1]) + (self.group5()[2] * other.group0()[3])),
                0.0,
            ]),
            // e3215
            (-(self.group5()[2] * other.group0()[2]) - (self.group5()[0] * other.group0()[0]) - (self.group5()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group7()[2] * other.group0()[2]) - (self.group7()[0] * other.group0()[0]) - (self.group7()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (swizzle!(other.group0(), 2, 2, 1) * Simd32x3::from([self.group1()[1], self.group1()[0], self.group1()[0]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group3()[1] * other.group0()[2]),
                (self.group3()[0] * other.group0()[2] * -1.0),
                (self.group3()[0] * other.group0()[1]),
                0.0,
            ]),
            // e3215
            (-(self.group5()[2] * other.group0()[2]) - (self.group5()[0] * other.group0()[0]) - (self.group5()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Flector> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: Flector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group1()[3] * other.group1()[3]) + (self.group1()[2] * other.group1()[2]) + (self.group1()[0] * other.group1()[0]) + (self.group1()[1] * other.group1()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group1()[0] * other.group0()[3] * -1.0),
                (self.group1()[1] * other.group0()[3] * -1.0),
                (self.group1()[2] * other.group0()[3] * -1.0),
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (Simd32x3::from([(self.group1()[1] * other.group0()[2]), (self.group1()[0] * other.group0()[2]), (self.group1()[0] * other.group0()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                ((self.group5()[0] * other.group0()[3]) + (self.group0()[0] * other.group1()[0]) + (self.group3()[1] * other.group0()[2])),
                (self.group3()[0] * other.group0()[2] * -1.0),
                ((self.group5()[2] * other.group0()[3]) + (self.group0()[0] * other.group1()[2]) + (self.group3()[0] * other.group0()[1])),
                0.0,
            ]),
            // e3215
            (-(self.group5()[2] * other.group0()[2]) - (self.group5()[0] * other.group0()[0]) - (self.group5()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<FlectorAtInfinity> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, (self.group1()[3] * other.group0()[3])]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (Simd32x3::from([(self.group1()[1] * other.group0()[2]), (self.group1()[0] * other.group0()[2]), (self.group1()[0] * other.group0()[1])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group3()[1] * other.group0()[2]),
                (self.group3()[0] * other.group0()[2] * -1.0),
                (self.group3()[0] * other.group0()[1]),
                0.0,
            ]),
            // e3215
            (-(self.group5()[2] * other.group0()[2]) - (self.group5()[0] * other.group0()[0]) - (self.group5()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<FlectorOnOrigin> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group1()[2] * other.group0()[3]) + (self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[2])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[0])]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group1()[0] * other.group0()[0] * -1.0),
                (self.group1()[1] * other.group0()[0] * -1.0),
                (self.group1()[2] * other.group0()[0] * -1.0),
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                ((self.group0()[0] * other.group0()[1]) + (self.group5()[0] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[2]) + (self.group5()[1] * other.group0()[0])),
                ((self.group0()[0] * other.group0()[3]) + (self.group5()[2] * other.group0()[0])),
                0.0,
            ]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<Horizon> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, (self.group1()[3] * other[e3215])]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            (self.group0()[0] * other[e3215]),
        );
    }
}
impl Wedge<Infinity> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, (self.group9()[3] * other[e5])]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            (self.group0()[0] * other[e5]),
            // e41, e42, e43, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group1()[3] * other[e5])]),
            // e15, e25, e35
            (Simd32x3::from(other[e5]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([0.0, (self.group3()[0] * other[e5]), (self.group3()[1] * other[e5]), (self.group3()[2] * other[e5])]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (self.group5() * Simd32x3::from(other[e5])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([(self.group7()[0] * other[e5]), (self.group7()[1] * other[e5]), (self.group7()[2] * other[e5]), 0.0]),
            // e3215
            (self.group6()[0] * other[e5]),
        );
    }
}
impl Wedge<Line> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: Line) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group5()[2] * other.group0()[2])
                    - (self.group5()[1] * other.group0()[1])
                    - (self.group5()[0] * other.group0()[0])
                    - (self.group3()[2] * other.group1()[2])
                    - (self.group3()[0] * other.group1()[0])
                    - (self.group3()[1] * other.group1()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[0]) * other.group1()),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                ((self.group1()[2] * other.group0()[1]) + (self.group1()[3] * other.group1()[0])),
                (self.group1()[2] * other.group0()[0] * -1.0),
                ((self.group1()[1] * other.group0()[0]) + (self.group1()[3] * other.group1()[2])),
                0.0,
            ]),
            // e3215
            (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<LineAtInfinity> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group3()[2] * other.group0()[2]) - (self.group3()[0] * other.group0()[0]) - (self.group3()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group1()[3] * other.group0()[0]),
                (self.group1()[3] * other.group0()[1]),
                (self.group1()[3] * other.group0()[2]),
                0.0,
            ]),
            // e3215
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<LineOnOrigin> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: LineOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group5()[2] * other.group0()[2]) - (self.group5()[0] * other.group0()[0]) - (self.group5()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group1()[2] * other.group0()[1]),
                (self.group1()[2] * other.group0()[0] * -1.0),
                (self.group1()[1] * other.group0()[0]),
                0.0,
            ]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<Motor> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: Motor) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, ((self.group0()[0] * other.group0()[3]) + (self.group9()[3] * other.group1()[3]))]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            (self.group0()[0] * other.group1()[3]),
            // e41, e42, e43, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group1()[3] * other.group1()[3])]),
            // e15, e25, e35
            (Simd32x3::from(other.group1()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                ((self.group0()[0] * other.group0()[0]) + (self.group3()[0] * other.group1()[3])),
                ((self.group0()[0] * other.group0()[1]) + (self.group3()[1] * other.group1()[3])),
                ((self.group0()[0] * other.group0()[2]) + (self.group3()[2] * other.group1()[3])),
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])) + (self.group5() * Simd32x3::from(other.group1()[3]))),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                ((self.group7()[0] * other.group1()[3]) + (self.group1()[2] * other.group0()[1]) + (self.group1()[3] * other.group1()[0])),
                (self.group1()[2] * other.group0()[0] * -1.0),
                ((self.group7()[2] * other.group1()[3]) + (self.group1()[1] * other.group0()[0]) + (self.group1()[3] * other.group1()[2])),
                0.0,
            ]),
            // e3215
            (-(self.group1()[2] * other.group1()[2]) - (self.group1()[0] * other.group1()[0]) - (self.group1()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<MotorAtInfinity> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, (self.group9()[3] * other.group0()[3])]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            (self.group0()[0] * other.group0()[3]),
            // e41, e42, e43, e45
            Simd32x4::from([0.0, 0.0, 0.0, (self.group1()[3] * other.group0()[3])]),
            // e15, e25, e35
            (Simd32x3::from(other.group0()[3]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group3()[0] * other.group0()[3]),
                (self.group3()[1] * other.group0()[3]),
                (self.group3()[2] * other.group0()[3]),
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])) + (self.group5() * Simd32x3::from(other.group0()[3]))),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                ((self.group1()[3] * other.group0()[0]) + (self.group7()[0] * other.group0()[3])),
                ((self.group1()[3] * other.group0()[1]) + (self.group7()[1] * other.group0()[3])),
                ((self.group1()[3] * other.group0()[2]) + (self.group7()[2] * other.group0()[3])),
                0.0,
            ]),
            // e3215
            (-(self.group1()[2] * other.group0()[2]) - (self.group1()[0] * other.group0()[0]) - (self.group1()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<MotorOnOrigin> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: MotorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, (self.group0()[0] * other.group0()[3])]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
            ]),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group1()[2] * other.group0()[1]),
                (self.group1()[2] * other.group0()[0] * -1.0),
                (self.group1()[1] * other.group0()[0]),
                0.0,
            ]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<MultiVector> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                (self.group0()[0] * other.group0()[0]),
                ((self[e45] * other.group1()[3])
                    + (self.group9()[3] * other[e1])
                    + (self.group9()[2] * other.group1()[2])
                    + (self.group9()[1] * other.group1()[1])
                    + (self.group9()[0] * other.group1()[0])
                    + (self[e1] * other.group9()[3])
                    + (self.group1()[3] * other[e45])
                    + (self.group1()[2] * other.group9()[2])
                    + (self.group1()[1] * other.group9()[1])
                    + (self.group1()[0] * other.group9()[0])
                    + (self.group0()[0] * other.group0()[1])
                    + (self.group0()[1] * other.group0()[0])),
            ]),
            // e1, e2, e3, e4
            ((Simd32x4::from(self.group0()[0]) * other.group1()) + (self.group1() * Simd32x4::from(other.group0()[0]))),
            // e5
            ((self.group0()[0] * other[e1]) + (self[e1] * other.group0()[0])),
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group1()[0] * other.group1()[3] * -1.0),
                (self.group1()[1] * other.group1()[3] * -1.0),
                (self.group1()[2] * other.group1()[3] * -1.0),
                ((self.group3()[3] * other.group0()[0]) + (self.group0()[0] * other.group3()[3]) + (self.group1()[3] * other[e1])),
            ]),
            // e15, e25, e35
            ((self.group4() * Simd32x3::from(other.group0()[0]))
                + (Simd32x3::from(self.group0()[0]) * other.group4())
                + (Simd32x3::from(other[e1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]]))),
            // e23, e31, e12
            Simd32x3::from([
                ((self.group5()[0] * other.group0()[0]) + (self.group0()[0] * other.group5()[0]) + (self.group1()[1] * other.group1()[2])),
                (self.group1()[0] * other.group1()[2] * -1.0),
                ((self.group5()[2] * other.group0()[0]) + (self.group0()[0] * other.group5()[2]) + (self.group1()[0] * other.group1()[1])),
            ]),
            // e321, e415, e425, e435
            (-(swizzle!(other.group1(), 2, 0, 1, 2) * Simd32x4::from([self.group5()[2], self.group3()[3], self.group3()[3], self.group3()[3]]))
                - (swizzle!(self.group1(), 2, 0, 1, 2) * Simd32x4::from([other.group5()[2], other.group3()[3], other.group3()[3], other.group3()[3]]))
                + Simd32x4::from([
                    (-(self.group5()[1] * other.group1()[1])
                        - (self.group5()[0] * other.group1()[0])
                        - (self.group1()[0] * other.group5()[0])
                        - (self.group1()[1] * other.group5()[1])),
                    0.0,
                    0.0,
                    0.0,
                ])),
            // e423, e431, e412
            Simd32x3::from([
                ((self.group7()[0] * other.group0()[0])
                    + (self.group5()[0] * other.group1()[3])
                    + (self.group3()[1] * other.group1()[2])
                    + (self.group1()[3] * other.group5()[0])
                    + (self.group0()[0] * other.group7()[0])
                    + (self.group1()[2] * other.group3()[1])),
                (-(self.group1()[2] * other.group3()[0]) - (self.group3()[0] * other.group1()[2])),
                ((self.group7()[2] * other.group0()[0])
                    + (self.group5()[2] * other.group1()[3])
                    + (self.group3()[0] * other.group1()[1])
                    + (self.group1()[3] * other.group5()[2])
                    + (self.group0()[0] * other.group7()[2])
                    + (self.group1()[1] * other.group3()[0])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group8()[0] * other.group0()[0])
                    + (self.group5()[0] * other[e1])
                    + (self.group4()[2] * other.group1()[1])
                    + (self[e1] * other.group5()[0])
                    + (self.group0()[0] * other.group8()[0])
                    + (self.group1()[1] * other.group4()[2])),
                (-(self.group1()[0] * other.group4()[2]) - (self.group4()[2] * other.group1()[0])),
                ((self.group8()[2] * other.group0()[0])
                    + (self.group5()[2] * other[e1])
                    + (self.group4()[1] * other.group1()[0])
                    + (self[e1] * other.group5()[2])
                    + (self.group0()[0] * other.group8()[2])
                    + (self.group1()[0] * other.group4()[1])),
            ]),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                ((self.group9()[0] * other.group0()[0])
                    + (self.group7()[0] * other[e1])
                    + (self.group6()[3] * other.group1()[1])
                    + (self.group5()[0] * other.group3()[3])
                    + (self.group4()[2] * other.group3()[1])
                    + (self.group3()[3] * other.group5()[0])
                    + (self.group3()[1] * other.group4()[2])
                    + (self.group1()[3] * other.group8()[0])
                    + (self.group0()[0] * other.group9()[0])
                    + (self.group1()[2] * other.group6()[2])),
                (-(self.group8()[1] * other.group1()[3])
                    - (self.group6()[3] * other.group1()[0])
                    - (self.group4()[2] * other.group3()[0])
                    - (self.group3()[0] * other.group4()[2])
                    - (self.group1()[2] * other.group6()[1])
                    - (self[e1] * other.group7()[1])),
                ((self.group9()[2] * other.group0()[0])
                    + (self.group7()[2] * other[e1])
                    + (self.group6()[2] * other.group1()[0])
                    + (self.group5()[2] * other.group3()[3])
                    + (self.group4()[1] * other.group3()[0])
                    + (self.group3()[3] * other.group5()[2])
                    + (self.group3()[0] * other.group4()[1])
                    + (self.group1()[3] * other.group8()[2])
                    + (self.group0()[0] * other.group9()[2])
                    + (self.group1()[1] * other.group6()[1])),
                ((self.group9()[3] * other.group0()[0])
                    + (self.group1()[3] * other.group6()[0])
                    + (self.group1()[2] * other.group7()[2])
                    + (self.group1()[1] * other.group7()[1])
                    + (self.group0()[0] * other.group9()[3])
                    + (self.group1()[0] * other.group7()[0])),
            ]),
            // e3215
            (-(self.group5()[2] * other.group4()[2])
                - (self.group5()[1] * other.group4()[1])
                - (self.group5()[0] * other.group4()[0])
                - (self.group4()[2] * other.group5()[2])
                - (self.group4()[1] * other.group5()[1])
                - (self.group4()[0] * other.group5()[0])
                - (self[e1] * other.group6()[0])
                - (self.group1()[2] * other.group8()[2])
                - (self.group1()[0] * other.group8()[0])
                - (self.group1()[1] * other.group8()[1])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group4()[2] * other.group0()[2]) - (self.group4()[0] * other.group0()[0]) - (self.group4()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self[e1] * other.group0()[0] * -1.0),
                (self[e1] * other.group0()[1] * -1.0),
                (self[e1] * other.group0()[2] * -1.0),
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<NullDipoleAtOrigin> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group8()[2] * other.group0()[2]) - (self.group8()[0] * other.group0()[0]) - (self.group8()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([0.0, (self[e1] * other.group0()[0]), (self[e1] * other.group0()[1]), (self[e1] * other.group0()[2])]),
            // e423, e431, e412
            (swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([self.group1()[2], self.group1()[2], self.group1()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group4()[2] * other.group0()[1]),
                (self.group4()[2] * other.group0()[0] * -1.0),
                (self.group4()[1] * other.group0()[0]),
                (-(self.group5()[2] * other.group0()[2]) - (self.group5()[0] * other.group0()[0]) - (self.group5()[1] * other.group0()[1])),
            ]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<NullSphereAtOrigin> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, (self[e1] * other[e1234])]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other[e1234])]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<Origin> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, (self[e45] * other[e4])]),
            // e1, e2, e3, e4
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other[e4])]),
            // e5
            0.0,
            // e41, e42, e43, e45
            (Simd32x4::from(other[e4]) * Simd32x4::from([self.group1()[0], self.group1()[1], self.group1()[2], self[e1]]) * Simd32x4::from(-1.0)),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([0.0, (self.group4()[0] * other[e4]), (self.group4()[1] * other[e4]), (self.group4()[2] * other[e4])]),
            // e423, e431, e412
            (self.group5() * Simd32x3::from(other[e4])),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            (Simd32x4::from(other[e4]) * Simd32x4::from([self.group8()[0], self.group8()[1], self.group8()[2], self.group6()[0]]) * Simd32x4::from(-1.0)),
            // e3215
            0.0,
        );
    }
}
impl Wedge<Plane> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: Plane) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group1()[3] * other.group0()[3]) + (self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
            // e3215
            (self.group0()[0] * other.group0()[3]),
        );
    }
}
impl Wedge<PlaneOnOrigin> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                0.0,
            ]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<RoundPoint> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self[e45] * other.group1()[0])
                    + (self.group9()[3] * other.group1()[1])
                    + (self.group9()[2] * other.group0()[2])
                    + (self.group9()[0] * other.group0()[0])
                    + (self.group9()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]])),
            // e5
            (self.group0()[0] * other.group1()[1]),
            // e41, e42, e43, e45
            (self.group1() * Simd32x4::from([other.group1()[0], other.group1()[0], other.group1()[0], other.group1()[1]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35
            (Simd32x3::from(other.group1()[1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])),
            // e23, e31, e12
            (swizzle!(other.group0(), 2, 2, 1) * Simd32x3::from([self.group1()[1], self.group1()[0], self.group1()[0]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group5()[2] * other.group0()[2]) - (self.group5()[0] * other.group0()[0]) - (self.group5()[1] * other.group0()[1])),
                (self.group3()[3] * other.group0()[0] * -1.0),
                (self.group3()[3] * other.group0()[1] * -1.0),
                (self.group3()[3] * other.group0()[2] * -1.0),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                ((self.group3()[1] * other.group0()[2]) + (self.group5()[0] * other.group1()[0])),
                (self.group3()[0] * other.group0()[2] * -1.0),
                ((self.group3()[0] * other.group0()[1]) + (self.group5()[2] * other.group1()[0])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group4()[2] * other.group0()[1]) + (self.group5()[0] * other.group1()[1])),
                (self.group4()[2] * other.group0()[0] * -1.0),
                ((self.group4()[1] * other.group0()[0]) + (self.group5()[2] * other.group1()[1])),
            ]),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                ((self.group6()[3] * other.group0()[1]) + (self.group7()[0] * other.group1()[1])),
                (-(self.group6()[3] * other.group0()[0]) - (self.group8()[1] * other.group1()[0])),
                ((self.group6()[2] * other.group0()[0]) + (self.group7()[2] * other.group1()[1])),
                (-(self.group7()[2] * other.group0()[2])
                    - (self.group7()[1] * other.group0()[1])
                    - (self.group6()[0] * other.group1()[0])
                    - (self.group7()[0] * other.group0()[0])),
            ]),
            // e3215
            ((self.group8()[2] * other.group0()[2]) + (self.group8()[1] * other.group0()[1]) + (self.group6()[0] * other.group1()[1]) + (self.group8()[0] * other.group0()[0])),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, ((self.group9()[3] * other.group0()[1]) + (self[e45] * other.group0()[0]))]),
            // e1, e2, e3, e4
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[0])]),
            // e5
            (self.group0()[0] * other.group0()[1]),
            // e41, e42, e43, e45
            (self.group1() * Simd32x4::from([other.group0()[0], other.group0()[0], other.group0()[0], other.group0()[1]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35
            (Simd32x3::from(other.group0()[1]) * Simd32x3::from([self.group1()[0], self.group1()[1], self.group1()[2]])),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                ((self.group3()[0] * other.group0()[1]) + (self.group4()[0] * other.group0()[0])),
                ((self.group3()[1] * other.group0()[1]) + (self.group4()[1] * other.group0()[0])),
                ((self.group3()[2] * other.group0()[1]) + (self.group4()[2] * other.group0()[0])),
            ]),
            // e423, e431, e412
            (self.group5() * Simd32x3::from(other.group0()[0])),
            // e235, e315, e125
            (self.group5() * Simd32x3::from(other.group0()[1])),
            // e4235, e4315, e4125, e1234
            (Simd32x4::from([
                (self.group7()[0] * other.group0()[1]),
                (self.group8()[1] * other.group0()[0]),
                (self.group7()[2] * other.group0()[1]),
                (self.group6()[0] * other.group0()[0]),
            ]) * Simd32x4::from([1.0, -1.0, 1.0, -1.0])),
            // e3215
            (self.group6()[0] * other.group0()[1]),
        );
    }
}
impl Wedge<Scalar> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (self.group0() * Simd32x2::from(other[scalar])),
            // e1, e2, e3, e4
            (self.group1() * Simd32x4::from(other[scalar])),
            // e5
            (self[e1] * other[scalar]),
            // e41, e42, e43, e45
            (self.group3() * Simd32x4::from(other[scalar])),
            // e15, e25, e35
            (self.group4() * Simd32x3::from(other[scalar])),
            // e23, e31, e12
            (self.group5() * Simd32x3::from(other[scalar])),
            // e321, e415, e425, e435
            (self.group6() * Simd32x4::from(other[scalar])),
            // e423, e431, e412
            (self.group7() * Simd32x3::from(other[scalar])),
            // e235, e315, e125
            (self.group8() * Simd32x3::from(other[scalar])),
            // e4235, e4315, e4125, e1234
            (self.group9() * Simd32x4::from(other[scalar])),
            // e3215
            (self[e45] * other[scalar]),
        );
    }
}
impl Wedge<Sphere> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self[e1] * other.group1()[0])
                    + (self.group1()[3] * other.group1()[1])
                    + (self.group1()[2] * other.group0()[2])
                    + (self.group1()[0] * other.group0()[0])
                    + (self.group1()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[0]])),
            // e3215
            (self.group0()[0] * other.group1()[1]),
        );
    }
}
impl Wedge<SphereAtOrigin> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: SphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, ((self.group1()[3] * other.group0()[1]) + (self[e1] * other.group0()[0]))]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[0])]),
            // e3215
            (self.group0()[0] * other.group0()[1]),
        );
    }
}
impl Wedge<SphereOnOrigin> for MultiVector {
    type Output = MultiVector;
    fn wedge(self, other: SphereOnOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self[e1] * other.group0()[3]) + (self.group1()[2] * other.group0()[2]) + (self.group1()[0] * other.group0()[0]) + (self.group1()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e3215
            0.0,
        );
    }
}
impl InfixWedge for NullCircleAtOrigin {}
impl Wedge<AntiFlector> for NullCircleAtOrigin {
    type Output = SphereOnOrigin;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (self.group0()[0] * other.group1()[3]),
            (self.group0()[1] * other.group1()[3]),
            (self.group0()[2] * other.group1()[3]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<AntiFlectorOnOrigin> for NullCircleAtOrigin {
    type Output = NullSphereAtOrigin;
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(
            // e1234
            (-(self.group0()[2] * other.group0()[3]) - (self.group0()[0] * other.group0()[1]) - (self.group0()[1] * other.group0()[2])),
        );
    }
}
impl Wedge<AntiLine> for NullCircleAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiLine) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiMotor> for NullCircleAtOrigin {
    type Output = MultiVector;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group0()[3])),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for NullCircleAtOrigin {
    type Output = NullCircleAtOrigin;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return NullCircleAtOrigin::from_groups(/* e423, e431, e412 */ (self.group0() * Simd32x3::from(other.group0()[3])));
    }
}
impl Wedge<AntiPlane> for NullCircleAtOrigin {
    type Output = SphereOnOrigin;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiPlaneOnOrigin> for NullCircleAtOrigin {
    type Output = NullSphereAtOrigin;
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for NullCircleAtOrigin {
    type Output = NullSphereAtOrigin;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Dipole> for NullCircleAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: Dipole) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for NullCircleAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for NullCircleAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleAtOrigin> for NullCircleAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for NullCircleAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<DualNum> for NullCircleAtOrigin {
    type Output = NullCircleAtOrigin;
    fn wedge(self, other: DualNum) -> Self::Output {
        return NullCircleAtOrigin::from_groups(/* e423, e431, e412 */ (self.group0() * Simd32x3::from(other.group0()[0])));
    }
}
impl Wedge<FlatPoint> for NullCircleAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for NullCircleAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Flector> for NullCircleAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: Flector) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<FlectorAtInfinity> for NullCircleAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Infinity> for NullCircleAtOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other[e5])));
    }
}
impl Wedge<Motor> for NullCircleAtOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: Motor) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group1()[3])));
    }
}
impl Wedge<MotorAtInfinity> for NullCircleAtOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group0()[3])));
    }
}
impl Wedge<MultiVector> for NullCircleAtOrigin {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group0()[2] * other.group4()[2]) - (self.group0()[0] * other.group4()[0]) - (self.group0()[1] * other.group4()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            (self.group0() * Simd32x3::from(other.group0()[0])),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group0()[0] * other[e1]),
                (self.group0()[1] * other[e1]),
                (self.group0()[2] * other[e1]),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<RoundPoint> for NullCircleAtOrigin {
    type Output = SphereOnOrigin;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (self.group0()[0] * other.group1()[1]),
            (self.group0()[1] * other.group1()[1]),
            (self.group0()[2] * other.group1()[1]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<RoundPointAtOrigin> for NullCircleAtOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group0()[1])));
    }
}
impl Wedge<Scalar> for NullCircleAtOrigin {
    type Output = NullCircleAtOrigin;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return NullCircleAtOrigin::from_groups(/* e423, e431, e412 */ (self.group0() * Simd32x3::from(other[scalar])));
    }
}
impl InfixWedge for NullDipoleAtOrigin {}
impl Wedge<AntiCircleOnOrigin> for NullDipoleAtOrigin {
    type Output = NullSphereAtOrigin;
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(
            // e1234
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiFlatPoint> for NullDipoleAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlector> for NullDipoleAtOrigin {
    type Output = MultiVector;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
            ]),
            // e423, e431, e412
            (swizzle!(self.group0(), 1, 0, 0) * Simd32x3::from([other.group1()[2], other.group1()[2], other.group1()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for NullDipoleAtOrigin {
    type Output = NullCircleAtOrigin;
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return NullCircleAtOrigin::from_groups(
            // e423, e431, e412
            (swizzle!(self.group0(), 1, 0, 0) * Simd32x3::from([other.group0()[3], other.group0()[3], other.group0()[2]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<AntiLine> for NullDipoleAtOrigin {
    type Output = SphereOnOrigin;
    fn wedge(self, other: AntiLine) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (self.group0()[1] * other.group1()[2]),
            (self.group0()[0] * other.group1()[2] * -1.0),
            (self.group0()[0] * other.group1()[1]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<AntiLineOnOrigin> for NullDipoleAtOrigin {
    type Output = NullSphereAtOrigin;
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return NullSphereAtOrigin::from_groups(
            // e1234
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiMotor> for NullDipoleAtOrigin {
    type Output = MultiVector;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group1()[2]),
                (self.group0()[0] * other.group1()[2] * -1.0),
                (self.group0()[0] * other.group1()[1]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for NullDipoleAtOrigin {
    type Output = MultiVector;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3]),
                (self.group0()[1] * other.group0()[3]),
                (self.group0()[2] * other.group0()[3]),
                0.0,
            ]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                0.0,
                0.0,
                0.0,
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<AntiPlane> for NullDipoleAtOrigin {
    type Output = CircleOnOrigin;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            (swizzle!(self.group0(), 1, 0, 0) * Simd32x3::from([other.group0()[2], other.group0()[2], other.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e415, e425, e435
            (self.group0() * Simd32x3::from(other.group0()[3])),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for NullDipoleAtOrigin {
    type Output = NullCircleAtOrigin;
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return NullCircleAtOrigin::from_groups(
            // e423, e431, e412
            (swizzle!(self.group0(), 1, 0, 0) * swizzle!(other.group0(), 2, 2, 1) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for NullDipoleAtOrigin {
    type Output = NullCircleAtOrigin;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return NullCircleAtOrigin::from_groups(
            // e423, e431, e412
            (swizzle!(self.group0(), 1, 0, 0) * Simd32x3::from([other.group0()[2], other.group0()[2], other.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<Circle> for NullDipoleAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: Circle) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<CircleAligningOrigin> for NullDipoleAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
        );
    }
}
impl Wedge<CircleAtInfinity> for NullDipoleAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleAtOrigin> for NullDipoleAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for NullDipoleAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<Dipole> for NullDipoleAtOrigin {
    type Output = SphereOnOrigin;
    fn wedge(self, other: Dipole) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (self.group0()[1] * other.group2()[2]),
            (self.group0()[0] * other.group2()[2] * -1.0),
            (self.group0()[0] * other.group2()[1]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<DipoleAligningOrigin> for NullDipoleAtOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (swizzle!(self.group0(), 1, 0, 0) * Simd32x3::from([other.group1()[2], other.group1()[2], other.group1()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for NullDipoleAtOrigin {
    type Output = SphereOnOrigin;
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (self.group0()[1] * other.group1()[2]),
            (self.group0()[0] * other.group1()[2] * -1.0),
            (self.group0()[0] * other.group1()[1]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<DipoleAtOrigin> for NullDipoleAtOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (swizzle!(self.group0(), 1, 0, 0) * swizzle!(other.group1(), 2, 2, 1) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for NullDipoleAtOrigin {
    type Output = SphereOnOrigin;
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (self.group0()[1] * other.group2()[2]),
            (self.group0()[0] * other.group2()[2] * -1.0),
            (self.group0()[0] * other.group2()[1]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<DualNum> for NullDipoleAtOrigin {
    type Output = NullDipoleAtOrigin;
    fn wedge(self, other: DualNum) -> Self::Output {
        return NullDipoleAtOrigin::from_groups(/* e41, e42, e43 */ (self.group0() * Simd32x3::from(other.group0()[0])));
    }
}
impl Wedge<FlatPoint> for NullDipoleAtOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (swizzle!(self.group0(), 1, 0, 0) * Simd32x3::from([other.group0()[2], other.group0()[2], other.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for NullDipoleAtOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (swizzle!(self.group0(), 1, 0, 0) * swizzle!(other.group0(), 2, 2, 1) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<Flector> for NullDipoleAtOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: Flector) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (swizzle!(self.group0(), 1, 0, 0) * Simd32x3::from([other.group0()[2], other.group0()[2], other.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<FlectorAtInfinity> for NullDipoleAtOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (swizzle!(self.group0(), 1, 0, 0) * Simd32x3::from([other.group0()[2], other.group0()[2], other.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<Infinity> for NullDipoleAtOrigin {
    type Output = LineOnOrigin;
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (self.group0() * Simd32x3::from(other[e5])));
    }
}
impl Wedge<Line> for NullDipoleAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: Line) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<LineAtInfinity> for NullDipoleAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Motor> for NullDipoleAtOrigin {
    type Output = MotorOnOrigin;
    fn wedge(self, other: Motor) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group1()[3]),
            (self.group0()[1] * other.group1()[3]),
            (self.group0()[2] * other.group1()[3]),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<MotorAtInfinity> for NullDipoleAtOrigin {
    type Output = MotorOnOrigin;
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[3]),
            (self.group0()[1] * other.group0()[3]),
            (self.group0()[2] * other.group0()[3]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<MultiVector> for NullDipoleAtOrigin {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                (-(self.group0()[2] * other.group8()[2]) - (self.group0()[0] * other.group8()[0]) - (self.group0()[1] * other.group8()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                0.0,
            ]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([0.0, (self.group0()[0] * other[e1]), (self.group0()[1] * other[e1]), (self.group0()[2] * other[e1])]),
            // e423, e431, e412
            (swizzle!(self.group0(), 1, 0, 0) * Simd32x3::from([other.group1()[2], other.group1()[2], other.group1()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group0()[1] * other.group4()[2]),
                (self.group0()[0] * other.group4()[2] * -1.0),
                (self.group0()[0] * other.group4()[1]),
                (-(self.group0()[2] * other.group5()[2]) - (self.group0()[0] * other.group5()[0]) - (self.group0()[1] * other.group5()[1])),
            ]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<RoundPoint> for NullDipoleAtOrigin {
    type Output = CircleOnOrigin;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            (swizzle!(self.group0(), 1, 0, 0) * swizzle!(other.group0(), 2, 2, 1) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e415, e425, e435
            (self.group0() * Simd32x3::from(other.group1()[1])),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for NullDipoleAtOrigin {
    type Output = LineOnOrigin;
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (self.group0() * Simd32x3::from(other.group0()[1])));
    }
}
impl Wedge<Scalar> for NullDipoleAtOrigin {
    type Output = NullDipoleAtOrigin;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return NullDipoleAtOrigin::from_groups(/* e41, e42, e43 */ (self.group0() * Simd32x3::from(other[scalar])));
    }
}
impl InfixWedge for NullSphereAtOrigin {}
impl Wedge<AntiFlector> for NullSphereAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e1234] * other.group1()[3]));
    }
}
impl Wedge<AntiMotor> for NullSphereAtOrigin {
    type Output = NullSphereAtOrigin;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self[e1234] * other.group0()[3]));
    }
}
impl Wedge<AntiMotorOnOrigin> for NullSphereAtOrigin {
    type Output = NullSphereAtOrigin;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self[e1234] * other.group0()[3]));
    }
}
impl Wedge<AntiPlane> for NullSphereAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e1234] * other.group0()[3]));
    }
}
impl Wedge<DualNum> for NullSphereAtOrigin {
    type Output = NullSphereAtOrigin;
    fn wedge(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self[e1234] * other.group0()[0]));
    }
}
impl Wedge<Infinity> for NullSphereAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e1234] * other[e5]));
    }
}
impl Wedge<Motor> for NullSphereAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e1234] * other.group1()[3]));
    }
}
impl Wedge<MotorAtInfinity> for NullSphereAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e1234] * other.group0()[3]));
    }
}
impl Wedge<MultiVector> for NullSphereAtOrigin {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, (self[e1234] * other[e1])]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (self[e1234] * other.group0()[0])]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<RoundPoint> for NullSphereAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e1234] * other.group1()[1]));
    }
}
impl Wedge<RoundPointAtOrigin> for NullSphereAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e1234] * other.group0()[1]));
    }
}
impl Wedge<Scalar> for NullSphereAtOrigin {
    type Output = NullSphereAtOrigin;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self[e1234] * other[scalar]));
    }
}
impl InfixWedge for Origin {}
impl Wedge<AntiCircleOnOrigin> for Origin {
    type Output = NullCircleAtOrigin;
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return NullCircleAtOrigin::from_groups(/* e423, e431, e412 */ (Simd32x3::from(self[e4]) * other.group1()));
    }
}
impl Wedge<AntiDipoleOnOrigin> for Origin {
    type Output = NullSphereAtOrigin;
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self[e4] * other.group0()[3]));
    }
}
impl Wedge<AntiFlatOrigin> for Origin {
    type Output = NullSphereAtOrigin;
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self[e4] * other[e321]));
    }
}
impl Wedge<AntiFlatPoint> for Origin {
    type Output = SphereOnOrigin;
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ (Simd32x4::from(self[e4]) * other.group0()));
    }
}
impl Wedge<AntiFlector> for Origin {
    type Output = MultiVector;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            (Simd32x4::from(self[e4]) * other.group1()),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            (Simd32x4::from(self[e4]) * other.group0()),
            // e3215
            0.0,
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for Origin {
    type Output = MultiVector;
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([(self[e4] * other.group0()[1]), (self[e4] * other.group0()[2]), (self[e4] * other.group0()[3]), 0.0]),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (self[e4] * other.group0()[0])]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<AntiLine> for Origin {
    type Output = CircleOnOrigin;
    fn wedge(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e4]) * other.group0()),
            // e415, e425, e435
            (Simd32x3::from(self[e4]) * other.group1()),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for Origin {
    type Output = NullCircleAtOrigin;
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        use crate::elements::*;
        return NullCircleAtOrigin::from_groups(/* e423, e431, e412 */ (Simd32x3::from(self[e4]) * other.group0()));
    }
}
impl Wedge<AntiMotor> for Origin {
    type Output = MultiVector;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, (self[e4] * other.group1()[3])]),
            // e1, e2, e3, e4
            Simd32x4::from([0.0, 0.0, 0.0, (self[e4] * other.group0()[3])]),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([0.0, (self[e4] * other.group1()[0]), (self[e4] * other.group1()[1]), (self[e4] * other.group1()[2])]),
            // e423, e431, e412
            (Simd32x3::from(self[e4]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for Origin {
    type Output = MultiVector;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from([0.0, 0.0, 0.0, (self[e4] * other.group0()[3])]),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            (Simd32x3::from(self[e4]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<AntiPlane> for Origin {
    type Output = DipoleOnOrigin;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return DipoleOnOrigin::from_groups(/* e41, e42, e43, e45 */ (Simd32x4::from(self[e4]) * other.group0()));
    }
}
impl Wedge<AntiPlaneOnOrigin> for Origin {
    type Output = NullDipoleAtOrigin;
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        use crate::elements::*;
        return NullDipoleAtOrigin::from_groups(/* e41, e42, e43 */ (Simd32x3::from(self[e4]) * other.group0()));
    }
}
impl Wedge<AntiSphereOnOrigin> for Origin {
    type Output = NullDipoleAtOrigin;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        use crate::elements::*;
        return NullDipoleAtOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[e4]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
        );
    }
}
impl Wedge<Circle> for Origin {
    type Output = SphereOnOrigin;
    fn wedge(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (Simd32x4::from(self[e4]) * Simd32x4::from([other.group2()[0], other.group2()[1], other.group2()[2], other.group0()[3]])),
        );
    }
}
impl Wedge<CircleAligningOrigin> for Origin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self[e4]) * other.group2()));
    }
}
impl Wedge<CircleAtInfinity> for Origin {
    type Output = SphereOnOrigin;
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        use crate::elements::*;
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (Simd32x4::from(self[e4]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[0]])),
        );
    }
}
impl Wedge<CircleAtOrigin> for Origin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self[e4]) * other.group1()));
    }
}
impl Wedge<CircleOrthogonalOrigin> for Origin {
    type Output = SphereOnOrigin;
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return SphereOnOrigin::from_groups(
            // e4235, e4315, e4125, e1234
            (Simd32x4::from(self[e4]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other.group0()[3]])),
        );
    }
}
impl Wedge<Dipole> for Origin {
    type Output = CircleOnOrigin;
    fn wedge(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e4]) * other.group1()),
            // e415, e425, e435
            (Simd32x3::from(self[e4]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]])),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for Origin {
    type Output = LineOnOrigin;
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self[e4]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for Origin {
    type Output = CircleOnOrigin;
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        use crate::elements::*;
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e4]) * other.group0()),
            // e415, e425, e435
            (Simd32x3::from(self[e4]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])),
        );
    }
}
impl Wedge<DipoleAtOrigin> for Origin {
    type Output = LineOnOrigin;
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (Simd32x3::from(self[e4]) * other.group1()));
    }
}
impl Wedge<DipoleOrthogonalOrigin> for Origin {
    type Output = CircleOnOrigin;
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[e4]) * other.group1()),
            // e415, e425, e435
            (Simd32x3::from(self[e4]) * other.group2()),
        );
    }
}
impl Wedge<DualNum> for Origin {
    type Output = Origin;
    fn wedge(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return Origin::from_groups(/* e4 */ (self[e4] * other.group0()[0]));
    }
}
impl Wedge<FlatPoint> for Origin {
    type Output = LineOnOrigin;
    fn wedge(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self[e4]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for Origin {
    type Output = LineOnOrigin;
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (Simd32x3::from(self[e4]) * other.group0()));
    }
}
impl Wedge<Flector> for Origin {
    type Output = MotorOnOrigin;
    fn wedge(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self[e4]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])),
        );
    }
}
impl Wedge<FlectorAtInfinity> for Origin {
    type Output = MotorOnOrigin;
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        use crate::elements::*;
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ (Simd32x4::from(self[e4]) * other.group0()));
    }
}
impl Wedge<Horizon> for Origin {
    type Output = AntiScalar;
    fn wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e4] * other[e3215]));
    }
}
impl Wedge<Infinity> for Origin {
    type Output = FlatOrigin;
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return FlatOrigin::from_groups(/* e45 */ (self[e4] * other[e5]));
    }
}
impl Wedge<Line> for Origin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self[e4]) * other.group1()));
    }
}
impl Wedge<LineAtInfinity> for Origin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self[e4]) * other.group0()));
    }
}
impl Wedge<Motor> for Origin {
    type Output = FlectorOnOrigin;
    fn wedge(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ (Simd32x4::from(self[e4]) * swizzle!(other.group1(), 3, 0, 1, 2)));
    }
}
impl Wedge<MotorAtInfinity> for Origin {
    type Output = FlectorOnOrigin;
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        use crate::elements::*;
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ (Simd32x4::from(self[e4]) * swizzle!(other.group0(), 3, 0, 1, 2)));
    }
}
impl Wedge<MultiVector> for Origin {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, (self[e4] * other[e45])]),
            // e1, e2, e3, e4
            Simd32x4::from([0.0, 0.0, 0.0, (self[e4] * other.group0()[0])]),
            // e5
            0.0,
            // e41, e42, e43, e45
            (Simd32x4::from(self[e4]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other[e1]])),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([0.0, (self[e4] * other.group4()[0]), (self[e4] * other.group4()[1]), (self[e4] * other.group4()[2])]),
            // e423, e431, e412
            (Simd32x3::from(self[e4]) * other.group5()),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            (Simd32x4::from(self[e4]) * Simd32x4::from([other.group8()[0], other.group8()[1], other.group8()[2], other.group6()[0]])),
            // e3215
            0.0,
        );
    }
}
impl Wedge<Plane> for Origin {
    type Output = AntiScalar;
    fn wedge(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e4] * other.group0()[3]));
    }
}
impl Wedge<RoundPoint> for Origin {
    type Output = DipoleOnOrigin;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return DipoleOnOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(self[e4]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[1]])),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for Origin {
    type Output = FlatOrigin;
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        use crate::elements::*;
        return FlatOrigin::from_groups(/* e45 */ (self[e4] * other.group0()[1]));
    }
}
impl Wedge<Scalar> for Origin {
    type Output = Origin;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Origin::from_groups(/* e4 */ (self[e4] * other[scalar]));
    }
}
impl Wedge<Sphere> for Origin {
    type Output = AntiScalar;
    fn wedge(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e4] * other.group1()[1]));
    }
}
impl Wedge<SphereAtOrigin> for Origin {
    type Output = AntiScalar;
    fn wedge(self, other: SphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[e4] * other.group0()[1]));
    }
}
impl InfixWedge for Plane {}
impl Wedge<AntiFlector> for Plane {
    type Output = AntiScalar;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for Plane {
    type Output = AntiScalar;
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
        );
    }
}
impl Wedge<AntiMotor> for Plane {
    type Output = Plane;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (self.group0() * Simd32x4::from(other.group0()[3])));
    }
}
impl Wedge<AntiMotorOnOrigin> for Plane {
    type Output = Plane;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (self.group0() * Simd32x4::from(other.group0()[3])));
    }
}
impl Wedge<AntiPlane> for Plane {
    type Output = AntiScalar;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for Plane {
    type Output = AntiScalar;
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for Plane {
    type Output = AntiScalar;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[3] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DualNum> for Plane {
    type Output = Plane;
    fn wedge(self, other: DualNum) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (self.group0() * Simd32x4::from(other.group0()[0])));
    }
}
impl Wedge<MultiVector> for Plane {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group0()[3] * other.group1()[3]) + (self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                0.0,
            ]),
            // e3215
            (self.group0()[3] * other.group0()[0]),
        );
    }
}
impl Wedge<Origin> for Plane {
    type Output = AntiScalar;
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other[e4]));
    }
}
impl Wedge<RoundPoint> for Plane {
    type Output = AntiScalar;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[3] * other.group1()[0]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for Plane {
    type Output = AntiScalar;
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[0]));
    }
}
impl Wedge<Scalar> for Plane {
    type Output = Plane;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (self.group0() * Simd32x4::from(other[scalar])));
    }
}
impl InfixWedge for PlaneOnOrigin {}
impl Wedge<AntiFlector> for PlaneOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for PlaneOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
        );
    }
}
impl Wedge<AntiMotor> for PlaneOnOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group0()[3])));
    }
}
impl Wedge<AntiMotorOnOrigin> for PlaneOnOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group0()[3])));
    }
}
impl Wedge<AntiPlane> for PlaneOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for PlaneOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for PlaneOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DualNum> for PlaneOnOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: DualNum) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other.group0()[0])));
    }
}
impl Wedge<MultiVector> for PlaneOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                (self.group0()[0] * other.group0()[0]),
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[2] * other.group0()[0]),
                0.0,
            ]),
            // e3215
            0.0,
        );
    }
}
impl Wedge<RoundPoint> for PlaneOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<Scalar> for PlaneOnOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (self.group0() * Simd32x3::from(other[scalar])));
    }
}
impl InfixWedge for RoundPoint {}
impl Wedge<AntiCircleOnOrigin> for RoundPoint {
    type Output = Circle;
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412, e321
            Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group1()[0])),
                (self.group0()[2] * other.group0()[0] * -1.0),
                ((self.group0()[1] * other.group0()[0]) + (self.group1()[0] * other.group1()[2])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435
            (Simd32x3::from(self.group1()[1]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self.group1()[1]) * other.group1()),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for RoundPoint {
    type Output = Sphere;
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
            // e1234, e3215
            Simd32x2::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                (self.group1()[1] * other.group0()[3] * -1.0),
            ]),
        );
    }
}
impl Wedge<AntiFlatOrigin> for RoundPoint {
    type Output = SphereAtOrigin;
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return SphereAtOrigin::from_groups(/* e1234, e3215 */ (self.group1() * Simd32x2::from(other[e321]) * Simd32x2::from([1.0, -1.0])));
    }
}
impl Wedge<AntiFlatPoint> for RoundPoint {
    type Output = Sphere;
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e1234, e3215
            Simd32x2::from([
                (self.group1()[0] * other.group0()[3]),
                (-(self.group1()[1] * other.group0()[3])
                    - (self.group0()[2] * other.group0()[2])
                    - (self.group0()[0] * other.group0()[0])
                    - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<AntiFlector> for RoundPoint {
    type Output = MultiVector;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            (Simd32x4::from(self.group1()[0]) * other.group1()),
            // e15, e25, e35
            (self.group0() * Simd32x3::from(other.group1()[3])),
            // e23, e31, e12
            (swizzle!(self.group0(), 1, 0, 0) * Simd32x3::from([other.group1()[2], other.group1()[2], other.group1()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            (Simd32x4::from(self.group1()[0]) * other.group0()),
            // e3215
            (-(self.group1()[1] * other.group0()[3]) - (self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for RoundPoint {
    type Output = MultiVector;
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group1()[0] * other.group0()[1]),
                (self.group1()[0] * other.group0()[2]),
                (self.group1()[0] * other.group0()[3]),
                0.0,
            ]),
            // e15, e25, e35
            (Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[3]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (swizzle!(self.group0(), 1, 0, 0) * Simd32x3::from([other.group0()[3], other.group0()[3], other.group0()[2]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (self.group1()[0] * other.group0()[0])]),
            // e3215
            (self.group1()[1] * other.group0()[0] * -1.0),
        );
    }
}
impl Wedge<AntiLine> for RoundPoint {
    type Output = Circle;
    fn wedge(self, other: AntiLine) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412, e321
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[0] * other.group0()[1]),
                (self.group1()[0] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435
            (Simd32x3::from(self.group1()[0]) * other.group1()),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group0()[1] * other.group1()[2]) + (self.group1()[1] * other.group0()[0])),
                (self.group0()[0] * other.group1()[2] * -1.0),
                ((self.group0()[0] * other.group1()[1]) + (self.group1()[1] * other.group0()[2])),
            ]),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for RoundPoint {
    type Output = CircleOrthogonalOrigin;
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return CircleOrthogonalOrigin::from_groups(
            // e423, e431, e412, e321
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[0] * other.group0()[1]),
                (self.group1()[0] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e235, e315, e125
            (Simd32x3::from(self.group1()[1]) * other.group0()),
        );
    }
}
impl Wedge<AntiMotor> for RoundPoint {
    type Output = MultiVector;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, (self.group1()[0] * other.group1()[3])]),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]])),
            // e5
            (self.group1()[1] * other.group0()[3]),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                (self.group1()[0] * other.group1()[0]),
                (self.group1()[0] * other.group1()[1]),
                (self.group1()[0] * other.group1()[2]),
            ]),
            // e423, e431, e412
            (Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group0()[1] * other.group1()[2]) + (self.group1()[1] * other.group0()[0])),
                (self.group0()[0] * other.group1()[2] * -1.0),
                ((self.group0()[0] * other.group1()[1]) + (self.group1()[1] * other.group0()[2])),
            ]),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for RoundPoint {
    type Output = MultiVector;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]])),
            // e5
            (self.group1()[1] * other.group0()[3]),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
                0.0,
                0.0,
                0.0,
            ]),
            // e423, e431, e412
            (Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e235, e315, e125
            (Simd32x3::from(self.group1()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<AntiPlane> for RoundPoint {
    type Output = Dipole;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group1()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e23, e31, e12
            (swizzle!(self.group0(), 1, 0, 0) * Simd32x3::from([other.group0()[2], other.group0()[2], other.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e15, e25, e35, e45
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]])),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for RoundPoint {
    type Output = DipoleOrthogonalOrigin;
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return DipoleOrthogonalOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group1()[0]) * other.group0()),
            // e23, e31, e12
            (swizzle!(self.group0(), 1, 0, 0) * swizzle!(other.group0(), 2, 2, 1) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e15, e25, e35
            (Simd32x3::from(self.group1()[1]) * other.group0() * Simd32x3::from(-1.0)),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for RoundPoint {
    type Output = Dipole;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return Dipole::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other.group0()[3]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (swizzle!(self.group0(), 1, 0, 0) * Simd32x3::from([other.group0()[2], other.group0()[2], other.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e15, e25, e35, e45
            (Simd32x4::from(self.group1()[1]) * other.group0() * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<Circle> for RoundPoint {
    type Output = Sphere;
    fn wedge(self, other: Circle) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            Simd32x3::from([
                ((self.group0()[2] * other.group1()[1]) + (self.group1()[0] * other.group2()[0])),
                (-(self.group0()[2] * other.group1()[0]) - (self.group1()[1] * other.group0()[1])),
                ((self.group0()[1] * other.group1()[0]) + (self.group1()[0] * other.group2()[2])),
            ]),
            // e1234, e3215
            Simd32x2::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group1()[1] * other.group0()[3])
                    - (self.group0()[2] * other.group2()[2])
                    - (self.group0()[0] * other.group2()[0])
                    - (self.group0()[1] * other.group2()[1])),
            ]),
        );
    }
}
impl Wedge<CircleAligningOrigin> for RoundPoint {
    type Output = Sphere;
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            Simd32x3::from([
                ((self.group0()[2] * other.group1()[1]) + (self.group1()[0] * other.group2()[0])),
                (-(self.group0()[2] * other.group1()[0]) - (self.group1()[1] * other.group0()[1])),
                ((self.group0()[1] * other.group1()[0]) + (self.group1()[0] * other.group2()[2])),
            ]),
            // e1234, e3215
            Simd32x2::from([
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[2] * other.group2()[2]) - (self.group0()[0] * other.group2()[0]) - (self.group0()[1] * other.group2()[1])),
            ]),
        );
    }
}
impl Wedge<CircleAtInfinity> for RoundPoint {
    type Output = Sphere;
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            Simd32x3::from([
                ((self.group0()[2] * other.group0()[2]) + (self.group1()[0] * other.group1()[0])),
                (self.group0()[2] * other.group0()[1] * -1.0),
                ((self.group0()[1] * other.group0()[1]) + (self.group1()[0] * other.group1()[2])),
            ]),
            // e1234, e3215
            Simd32x2::from([
                (self.group1()[0] * other.group0()[0]),
                (-(self.group1()[1] * other.group0()[0])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<CircleAtOrigin> for RoundPoint {
    type Output = Sphere;
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from([(self.group1()[0] * other.group1()[0]), (self.group1()[1] * other.group0()[1]), (self.group1()[0] * other.group1()[2])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e1234, e3215
            Simd32x2::from([
                ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<CircleOnOrigin> for RoundPoint {
    type Output = SphereOnOrigin;
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (self.group0()[2] * other.group1()[1]),
            (-(self.group0()[2] * other.group1()[0]) - (self.group1()[1] * other.group0()[1])),
            (self.group0()[1] * other.group1()[0]),
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<CircleOrthogonalOrigin> for RoundPoint {
    type Output = Sphere;
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from([(self.group1()[0] * other.group1()[0]), (self.group1()[1] * other.group0()[1]), (self.group1()[0] * other.group1()[2])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e1234, e3215
            Simd32x2::from([
                ((self.group1()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
                (-(self.group1()[1] * other.group0()[3])
                    - (self.group0()[2] * other.group1()[2])
                    - (self.group0()[0] * other.group1()[0])
                    - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<Dipole> for RoundPoint {
    type Output = Circle;
    fn wedge(self, other: Dipole) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412, e321
            Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group1()[0])),
                (self.group0()[2] * other.group0()[0] * -1.0),
                ((self.group0()[1] * other.group0()[0]) + (self.group1()[0] * other.group1()[2])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435
            (self.group0() * Simd32x3::from(other.group2()[3]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group0()[1] * other.group2()[2]) + (self.group1()[1] * other.group1()[0])),
                (self.group0()[0] * other.group2()[2] * -1.0),
                ((self.group0()[0] * other.group2()[1]) + (self.group1()[1] * other.group1()[2])),
            ]),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for RoundPoint {
    type Output = CircleAligningOrigin;
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (swizzle!(self.group0(), 2, 2, 1) * swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e415, e425, e435
            (self.group0() * Simd32x3::from(other.group1()[3]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (swizzle!(self.group0(), 1, 0, 0) * Simd32x3::from([other.group1()[2], other.group1()[2], other.group1()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<DipoleAtInfinity> for RoundPoint {
    type Output = Circle;
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412, e321
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[0] * other.group0()[1]),
                (self.group1()[0] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
            // e415, e425, e435
            (self.group0() * Simd32x3::from(other.group1()[3]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group0()[1] * other.group1()[2]) + (self.group1()[1] * other.group0()[0])),
                (self.group0()[0] * other.group1()[2] * -1.0),
                ((self.group0()[0] * other.group1()[1]) + (self.group1()[1] * other.group0()[2])),
            ]),
        );
    }
}
impl Wedge<DipoleAtOrigin> for RoundPoint {
    type Output = CircleAligningOrigin;
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (swizzle!(self.group0(), 2, 2, 1) * swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e415, e425, e435
            ((Simd32x3::from(self.group1()[0]) * other.group1()) + (Simd32x3::from(self.group1()[1]) * other.group0())),
            // e235, e315, e125
            (swizzle!(self.group0(), 1, 0, 0) * swizzle!(other.group1(), 2, 2, 1) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<DipoleOnOrigin> for RoundPoint {
    type Output = CircleOnOrigin;
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            (swizzle!(self.group0(), 2, 2, 1) * Simd32x3::from([other.group0()[1], other.group0()[0], other.group0()[0]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e415, e425, e435
            (self.group0() * Simd32x3::from(other.group0()[3]) * Simd32x3::from(-1.0)),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for RoundPoint {
    type Output = Circle;
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return Circle::from_groups(
            // e423, e431, e412, e321
            Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group1()[0])),
                (self.group0()[2] * other.group0()[0] * -1.0),
                ((self.group0()[1] * other.group0()[0]) + (self.group1()[0] * other.group1()[2])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
            // e415, e425, e435
            ((Simd32x3::from(self.group1()[0]) * other.group2()) + (Simd32x3::from(self.group1()[1]) * other.group0())),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group0()[1] * other.group2()[2]) + (self.group1()[1] * other.group1()[0])),
                (self.group0()[0] * other.group2()[2] * -1.0),
                ((self.group0()[0] * other.group2()[1]) + (self.group1()[1] * other.group1()[2])),
            ]),
        );
    }
}
impl Wedge<DualNum> for RoundPoint {
    type Output = RoundPoint;
    fn wedge(self, other: DualNum) -> Self::Output {
        return RoundPoint::from_groups(
            // e1, e2, e3
            (self.group0() * Simd32x3::from(other.group0()[0])),
            // e4, e5
            (self.group1() * Simd32x2::from(other.group0()[0])),
        );
    }
}
impl Wedge<FlatOrigin> for RoundPoint {
    type Output = LineOnOrigin;
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (self.group0() * Simd32x3::from(other[e45]) * Simd32x3::from(-1.0)));
    }
}
impl Wedge<FlatPoint> for RoundPoint {
    type Output = Line;
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return Line::from_groups(
            // e415, e425, e435
            (self.group0() * Simd32x3::from(other.group0()[3]) * Simd32x3::from(-1.0)),
            // e235, e315, e125
            (swizzle!(self.group0(), 1, 0, 0) * Simd32x3::from([other.group0()[2], other.group0()[2], other.group0()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for RoundPoint {
    type Output = Line;
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self.group1()[0]) * other.group0()),
            // e235, e315, e125
            (swizzle!(self.group0(), 1, 0, 0) * swizzle!(other.group0(), 2, 2, 1) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<Flector> for RoundPoint {
    type Output = Motor;
    fn wedge(self, other: Flector) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            Simd32x4::from([
                (self.group0()[0] * other.group0()[3] * -1.0),
                (self.group0()[1] * other.group0()[3] * -1.0),
                (self.group0()[2] * other.group0()[3] * -1.0),
                ((self.group1()[0] * other.group1()[3]) + (self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
            ]),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[0] * other.group0()[2] * -1.0),
                (self.group0()[0] * other.group0()[1]),
                0.0,
            ]),
        );
    }
}
impl Wedge<FlectorAtInfinity> for RoundPoint {
    type Output = Motor;
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self.group1()[0]) * other.group0()),
            // e235, e315, e125, e5
            Simd32x4::from([
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[0] * other.group0()[2] * -1.0),
                (self.group0()[0] * other.group0()[1]),
                0.0,
            ]),
        );
    }
}
impl Wedge<FlectorOnOrigin> for RoundPoint {
    type Output = MotorOnOrigin;
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ Simd32x4::from([
            (self.group0()[0] * other.group0()[0] * -1.0),
            (self.group0()[1] * other.group0()[0] * -1.0),
            (self.group0()[2] * other.group0()[0] * -1.0),
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
        ]));
    }
}
impl Wedge<Horizon> for RoundPoint {
    type Output = AntiScalar;
    fn wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group1()[0] * other[e3215]));
    }
}
impl Wedge<Infinity> for RoundPoint {
    type Output = FlatPoint;
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return FlatPoint::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(other[e5]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]])),
        );
    }
}
impl Wedge<Line> for RoundPoint {
    type Output = Plane;
    fn wedge(self, other: Line) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            ((self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group1()[0])),
            (self.group0()[2] * other.group0()[0] * -1.0),
            ((self.group0()[1] * other.group0()[0]) + (self.group1()[0] * other.group1()[2])),
            (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
        ]));
    }
}
impl Wedge<LineAtInfinity> for RoundPoint {
    type Output = Plane;
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ Simd32x4::from([
            (self.group1()[0] * other.group0()[0]),
            (self.group1()[0] * other.group0()[1]),
            (self.group1()[0] * other.group0()[2]),
            (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<LineOnOrigin> for RoundPoint {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: LineOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (swizzle!(self.group0(), 2, 2, 1) * swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<Motor> for RoundPoint {
    type Output = Flector;
    fn wedge(self, other: Motor) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(other.group1()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                ((self.group0()[2] * other.group0()[1]) + (self.group1()[0] * other.group1()[0])),
                (self.group0()[2] * other.group0()[0] * -1.0),
                ((self.group0()[1] * other.group0()[0]) + (self.group1()[0] * other.group1()[2])),
                (-(self.group0()[2] * other.group1()[2]) - (self.group0()[0] * other.group1()[0]) - (self.group0()[1] * other.group1()[1])),
            ]),
        );
    }
}
impl Wedge<MotorAtInfinity> for RoundPoint {
    type Output = Flector;
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(other.group0()[3]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]])),
            // e4235, e4315, e4125, e3215
            Simd32x4::from([
                (self.group1()[0] * other.group0()[0]),
                (self.group1()[0] * other.group0()[1]),
                (self.group1()[0] * other.group0()[2]),
                (-(self.group0()[2] * other.group0()[2]) - (self.group0()[0] * other.group0()[0]) - (self.group0()[1] * other.group0()[1])),
            ]),
        );
    }
}
impl Wedge<MotorOnOrigin> for RoundPoint {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: MotorOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (swizzle!(self.group0(), 2, 2, 1) * Simd32x3::from([other.group0()[1], other.group0()[0], other.group0()[0]]) * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<MultiVector> for RoundPoint {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group1()[1] * other.group9()[3])
                    + (self.group1()[0] * other[e45])
                    + (self.group0()[2] * other.group9()[2])
                    + (self.group0()[0] * other.group9()[0])
                    + (self.group0()[1] * other.group9()[1])),
            ]),
            // e1, e2, e3, e4
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]])),
            // e5
            (self.group1()[1] * other.group0()[0]),
            // e41, e42, e43, e45
            (Simd32x4::from([
                (self.group0()[0] * other.group1()[3]),
                (self.group0()[1] * other.group1()[3]),
                (self.group0()[2] * other.group1()[3]),
                (self.group1()[0] * other[e1]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
            // e15, e25, e35
            (self.group0() * Simd32x3::from(other[e1])),
            // e23, e31, e12
            (swizzle!(self.group0(), 1, 0, 0) * Simd32x3::from([other.group1()[2], other.group1()[2], other.group1()[1]]) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e321, e415, e425, e435
            Simd32x4::from([
                (-(self.group0()[2] * other.group5()[2]) - (self.group0()[0] * other.group5()[0]) - (self.group0()[1] * other.group5()[1])),
                (self.group0()[0] * other.group3()[3] * -1.0),
                (self.group0()[1] * other.group3()[3] * -1.0),
                (self.group0()[2] * other.group3()[3] * -1.0),
            ]),
            // e423, e431, e412
            Simd32x3::from([
                ((self.group0()[2] * other.group3()[1]) + (self.group1()[0] * other.group5()[0])),
                (self.group0()[2] * other.group3()[0] * -1.0),
                ((self.group0()[1] * other.group3()[0]) + (self.group1()[0] * other.group5()[2])),
            ]),
            // e235, e315, e125
            Simd32x3::from([
                ((self.group0()[1] * other.group4()[2]) + (self.group1()[1] * other.group5()[0])),
                (self.group0()[0] * other.group4()[2] * -1.0),
                ((self.group0()[0] * other.group4()[1]) + (self.group1()[1] * other.group5()[2])),
            ]),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([
                ((self.group0()[2] * other.group6()[2]) + (self.group1()[0] * other.group8()[0])),
                (-(self.group0()[2] * other.group6()[1]) - (self.group1()[1] * other.group7()[1])),
                ((self.group0()[1] * other.group6()[1]) + (self.group1()[0] * other.group8()[2])),
                ((self.group1()[0] * other.group6()[0]) + (self.group0()[2] * other.group7()[2]) + (self.group0()[0] * other.group7()[0]) + (self.group0()[1] * other.group7()[1])),
            ]),
            // e3215
            (-(self.group1()[1] * other.group6()[0]) - (self.group0()[2] * other.group8()[2]) - (self.group0()[0] * other.group8()[0]) - (self.group0()[1] * other.group8()[1])),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for RoundPoint {
    type Output = SphereOnOrigin;
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ Simd32x4::from([
            (self.group1()[1] * other.group0()[0] * -1.0),
            (self.group1()[1] * other.group0()[1] * -1.0),
            (self.group1()[1] * other.group0()[2] * -1.0),
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        ]));
    }
}
impl Wedge<NullDipoleAtOrigin> for RoundPoint {
    type Output = CircleOnOrigin;
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            (swizzle!(self.group0(), 2, 2, 1) * swizzle!(other.group0(), 1, 0, 0) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e415, e425, e435
            (Simd32x3::from(self.group1()[1]) * other.group0()),
        );
    }
}
impl Wedge<NullSphereAtOrigin> for RoundPoint {
    type Output = AntiScalar;
    fn wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group1()[1] * other[e1234]));
    }
}
impl Wedge<Origin> for RoundPoint {
    type Output = DipoleOnOrigin;
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return DipoleOnOrigin::from_groups(
            // e41, e42, e43, e45
            (Simd32x4::from(other[e4]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[1]]) * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<Plane> for RoundPoint {
    type Output = AntiScalar;
    fn wedge(self, other: Plane) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group1()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<PlaneOnOrigin> for RoundPoint {
    type Output = AntiScalar;
    fn wedge(self, other: PlaneOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<RoundPoint> for RoundPoint {
    type Output = Dipole;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return Dipole::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other.group1()[0]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            (swizzle!(self.group0(), 1, 0, 0) * swizzle!(other.group0(), 2, 2, 1) * Simd32x3::from([1.0, -1.0, 1.0])),
            // e15, e25, e35, e45
            (Simd32x4::from(other.group1()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]])),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for RoundPoint {
    type Output = DipoleAligningOrigin;
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return DipoleAligningOrigin::from_groups(
            // e41, e42, e43
            (self.group0() * Simd32x3::from(other.group0()[0]) * Simd32x3::from(-1.0)),
            // e15, e25, e35, e45
            (Simd32x4::from(other.group0()[1]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]])),
        );
    }
}
impl Wedge<Scalar> for RoundPoint {
    type Output = RoundPoint;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return RoundPoint::from_groups(
            // e1, e2, e3
            (self.group0() * Simd32x3::from(other[scalar])),
            // e4, e5
            (self.group1() * Simd32x2::from(other[scalar])),
        );
    }
}
impl Wedge<Sphere> for RoundPoint {
    type Output = AntiScalar;
    fn wedge(self, other: Sphere) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group1()[1] * other.group1()[0])
                + (self.group1()[0] * other.group1()[1])
                + (self.group0()[2] * other.group0()[2])
                + (self.group0()[0] * other.group0()[0])
                + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<SphereAtOrigin> for RoundPoint {
    type Output = AntiScalar;
    fn wedge(self, other: SphereAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ ((self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])));
    }
}
impl Wedge<SphereOnOrigin> for RoundPoint {
    type Output = AntiScalar;
    fn wedge(self, other: SphereOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group1()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl InfixWedge for RoundPointAtOrigin {}
impl Wedge<AntiCircleOnOrigin> for RoundPointAtOrigin {
    type Output = CircleAligningOrigin;
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * other.group1()),
            // e415, e425, e435
            (Simd32x3::from(self.group0()[1]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * other.group1()),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for RoundPointAtOrigin {
    type Output = Sphere;
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]]) * Simd32x3::from(-1.0)),
            // e1234, e3215
            (self.group0() * Simd32x2::from(other.group0()[3]) * Simd32x2::from([1.0, -1.0])),
        );
    }
}
impl Wedge<AntiFlatOrigin> for RoundPointAtOrigin {
    type Output = SphereAtOrigin;
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return SphereAtOrigin::from_groups(/* e1234, e3215 */ (self.group0() * Simd32x2::from(other[e321]) * Simd32x2::from([1.0, -1.0])));
    }
}
impl Wedge<AntiFlatPoint> for RoundPointAtOrigin {
    type Output = Sphere;
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e1234, e3215
            (self.group0() * Simd32x2::from(other.group0()[3]) * Simd32x2::from([1.0, -1.0])),
        );
    }
}
impl Wedge<AntiFlector> for RoundPointAtOrigin {
    type Output = MultiVector;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[0]) * other.group1()),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            (Simd32x4::from(self.group0()[0]) * other.group0()),
            // e3215
            (self.group0()[1] * other.group0()[3] * -1.0),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for RoundPointAtOrigin {
    type Output = MultiVector;
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from([
                (self.group0()[0] * other.group0()[1]),
                (self.group0()[0] * other.group0()[2]),
                (self.group0()[0] * other.group0()[3]),
                0.0,
            ]),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[1], other.group0()[2], other.group0()[3]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[0])]),
            // e3215
            (self.group0()[1] * other.group0()[0] * -1.0),
        );
    }
}
impl Wedge<AntiLine> for RoundPointAtOrigin {
    type Output = CircleAligningOrigin;
    fn wedge(self, other: AntiLine) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e415, e425, e435
            (Simd32x3::from(self.group0()[0]) * other.group1()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * other.group0()),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for RoundPointAtOrigin {
    type Output = CircleAtOrigin;
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        return CircleAtOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * other.group0()),
        );
    }
}
impl Wedge<AntiMotor> for RoundPointAtOrigin {
    type Output = MultiVector;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, (self.group0()[0] * other.group1()[3])]),
            // e1, e2, e3, e4
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e5
            (self.group0()[1] * other.group0()[3]),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                (self.group0()[0] * other.group1()[0]),
                (self.group0()[0] * other.group1()[1]),
                (self.group0()[0] * other.group1()[2]),
            ]),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for RoundPointAtOrigin {
    type Output = MultiVector;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from(0.0),
            // e1, e2, e3, e4
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[3])]),
            // e5
            (self.group0()[1] * other.group0()[3]),
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e4235, e4315, e4125, e1234
            Simd32x4::from(0.0),
            // e3215
            0.0,
        );
    }
}
impl Wedge<AntiPlane> for RoundPointAtOrigin {
    type Output = DipoleAligningOrigin;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return DipoleAligningOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e15, e25, e35, e45
            (other.group0() * Simd32x4::from([self.group0()[1], self.group0()[1], self.group0()[1], self.group0()[0]]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for RoundPointAtOrigin {
    type Output = DipoleAtOrigin;
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return DipoleAtOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[1]) * other.group0() * Simd32x3::from(-1.0)),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for RoundPointAtOrigin {
    type Output = DipoleAligningOrigin;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return DipoleAligningOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
            // e15, e25, e35, e45
            (Simd32x4::from(self.group0()[1]) * other.group0() * Simd32x4::from(-1.0)),
        );
    }
}
impl Wedge<Circle> for RoundPointAtOrigin {
    type Output = Sphere;
    fn wedge(self, other: Circle) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from([(self.group0()[0] * other.group2()[0]), (self.group0()[1] * other.group0()[1]), (self.group0()[0] * other.group2()[2])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e1234, e3215
            (self.group0() * Simd32x2::from(other.group0()[3]) * Simd32x2::from([1.0, -1.0])),
        );
    }
}
impl Wedge<CircleAligningOrigin> for RoundPointAtOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from([(self.group0()[0] * other.group2()[0]), (self.group0()[1] * other.group0()[1]), (self.group0()[0] * other.group2()[2])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<CircleAtInfinity> for RoundPointAtOrigin {
    type Output = Sphere;
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from(self.group0()[0]) * other.group1()),
            // e1234, e3215
            (self.group0() * Simd32x2::from(other.group0()[0]) * Simd32x2::from([1.0, -1.0])),
        );
    }
}
impl Wedge<CircleAtOrigin> for RoundPointAtOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from([(self.group0()[0] * other.group1()[0]), (self.group0()[1] * other.group0()[1]), (self.group0()[0] * other.group1()[2])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<CircleOnOrigin> for RoundPointAtOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group0()[1]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl Wedge<CircleOrthogonalOrigin> for RoundPointAtOrigin {
    type Output = Sphere;
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from([(self.group0()[0] * other.group1()[0]), (self.group0()[1] * other.group0()[1]), (self.group0()[0] * other.group1()[2])])
                * Simd32x3::from([1.0, -1.0, 1.0])),
            // e1234, e3215
            (self.group0() * Simd32x2::from(other.group0()[3]) * Simd32x2::from([1.0, -1.0])),
        );
    }
}
impl Wedge<Dipole> for RoundPointAtOrigin {
    type Output = CircleAligningOrigin;
    fn wedge(self, other: Dipole) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * other.group1()),
            // e415, e425, e435
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group2()[0], other.group2()[1], other.group2()[2]])) + (Simd32x3::from(self.group0()[1]) * other.group0())),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * other.group1()),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for RoundPointAtOrigin {
    type Output = LineOnOrigin;
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        return LineOnOrigin::from_groups(
            // e415, e425, e435
            ((Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])) + (Simd32x3::from(self.group0()[1]) * other.group0())),
        );
    }
}
impl Wedge<DipoleAtInfinity> for RoundPointAtOrigin {
    type Output = CircleAligningOrigin;
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e415, e425, e435
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]])),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * other.group0()),
        );
    }
}
impl Wedge<DipoleAtOrigin> for RoundPointAtOrigin {
    type Output = LineOnOrigin;
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        return LineOnOrigin::from_groups(
            // e415, e425, e435
            ((Simd32x3::from(self.group0()[0]) * other.group1()) + (Simd32x3::from(self.group0()[1]) * other.group0())),
        );
    }
}
impl Wedge<DipoleOnOrigin> for RoundPointAtOrigin {
    type Output = LineOnOrigin;
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        return LineOnOrigin::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
        );
    }
}
impl Wedge<DipoleOrthogonalOrigin> for RoundPointAtOrigin {
    type Output = CircleAligningOrigin;
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * other.group1()),
            // e415, e425, e435
            ((Simd32x3::from(self.group0()[0]) * other.group2()) + (Simd32x3::from(self.group0()[1]) * other.group0())),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * other.group1()),
        );
    }
}
impl Wedge<DualNum> for RoundPointAtOrigin {
    type Output = RoundPointAtOrigin;
    fn wedge(self, other: DualNum) -> Self::Output {
        return RoundPointAtOrigin::from_groups(/* e4, e5 */ (self.group0() * Simd32x2::from(other.group0()[0])));
    }
}
impl Wedge<FlatPoint> for RoundPointAtOrigin {
    type Output = LineOnOrigin;
    fn wedge(self, other: FlatPoint) -> Self::Output {
        return LineOnOrigin::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self.group0()[0]) * Simd32x3::from([other.group0()[0], other.group0()[1], other.group0()[2]])),
        );
    }
}
impl Wedge<FlatPointAtInfinity> for RoundPointAtOrigin {
    type Output = LineOnOrigin;
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (Simd32x3::from(self.group0()[0]) * other.group0()));
    }
}
impl Wedge<Flector> for RoundPointAtOrigin {
    type Output = MotorOnOrigin;
    fn wedge(self, other: Flector) -> Self::Output {
        return MotorOnOrigin::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group0()[0], other.group0()[1], other.group0()[2], other.group1()[3]])),
        );
    }
}
impl Wedge<FlectorAtInfinity> for RoundPointAtOrigin {
    type Output = MotorOnOrigin;
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ (Simd32x4::from(self.group0()[0]) * other.group0()));
    }
}
impl Wedge<Horizon> for RoundPointAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[0] * other[e3215]));
    }
}
impl Wedge<Infinity> for RoundPointAtOrigin {
    type Output = FlatOrigin;
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return FlatOrigin::from_groups(/* e45 */ (self.group0()[0] * other[e5]));
    }
}
impl Wedge<Line> for RoundPointAtOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: Line) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group0()[0]) * other.group1()));
    }
}
impl Wedge<LineAtInfinity> for RoundPointAtOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group0()[0]) * other.group0()));
    }
}
impl Wedge<Motor> for RoundPointAtOrigin {
    type Output = FlectorOnOrigin;
    fn wedge(self, other: Motor) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ (Simd32x4::from(self.group0()[0]) * swizzle!(other.group1(), 3, 0, 1, 2)));
    }
}
impl Wedge<MotorAtInfinity> for RoundPointAtOrigin {
    type Output = FlectorOnOrigin;
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ (Simd32x4::from(self.group0()[0]) * swizzle!(other.group0(), 3, 0, 1, 2)));
    }
}
impl Wedge<MultiVector> for RoundPointAtOrigin {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, ((self.group0()[0] * other[e45]) + (self.group0()[1] * other.group9()[3]))]),
            // e1, e2, e3, e4
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[0])]),
            // e5
            (self.group0()[1] * other.group0()[0]),
            // e41, e42, e43, e45
            (Simd32x4::from(self.group0()[0]) * Simd32x4::from([other.group1()[0], other.group1()[1], other.group1()[2], other[e1]])),
            // e15, e25, e35
            (Simd32x3::from(self.group0()[1]) * Simd32x3::from([other.group1()[0], other.group1()[1], other.group1()[2]]) * Simd32x3::from(-1.0)),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from([
                0.0,
                ((self.group0()[0] * other.group4()[0]) + (self.group0()[1] * other.group3()[0])),
                ((self.group0()[0] * other.group4()[1]) + (self.group0()[1] * other.group3()[1])),
                ((self.group0()[0] * other.group4()[2]) + (self.group0()[1] * other.group3()[2])),
            ]),
            // e423, e431, e412
            (Simd32x3::from(self.group0()[0]) * other.group5()),
            // e235, e315, e125
            (Simd32x3::from(self.group0()[1]) * other.group5()),
            // e4235, e4315, e4125, e1234
            (Simd32x4::from([
                (self.group0()[0] * other.group8()[0]),
                (self.group0()[1] * other.group7()[1]),
                (self.group0()[0] * other.group8()[2]),
                (self.group0()[0] * other.group6()[0]),
            ]) * Simd32x4::from([1.0, -1.0, 1.0, 1.0])),
            // e3215
            (self.group0()[1] * other.group6()[0] * -1.0),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for RoundPointAtOrigin {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self.group0()[1]) * other.group0() * Simd32x3::from(-1.0)));
    }
}
impl Wedge<NullDipoleAtOrigin> for RoundPointAtOrigin {
    type Output = LineOnOrigin;
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (Simd32x3::from(self.group0()[1]) * other.group0()));
    }
}
impl Wedge<NullSphereAtOrigin> for RoundPointAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[1] * other[e1234]));
    }
}
impl Wedge<Origin> for RoundPointAtOrigin {
    type Output = FlatOrigin;
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return FlatOrigin::from_groups(/* e45 */ (self.group0()[1] * other[e4] * -1.0));
    }
}
impl Wedge<Plane> for RoundPointAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: Plane) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[0] * other.group0()[3]));
    }
}
impl Wedge<RoundPoint> for RoundPointAtOrigin {
    type Output = DipoleAligningOrigin;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return DipoleAligningOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self.group0()[0]) * other.group0()),
            // e15, e25, e35, e45
            (Simd32x4::from([
                (self.group0()[1] * other.group0()[0]),
                (self.group0()[1] * other.group0()[1]),
                (self.group0()[1] * other.group0()[2]),
                (self.group0()[0] * other.group1()[1]),
            ]) * Simd32x4::from([-1.0, -1.0, -1.0, 1.0])),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for RoundPointAtOrigin {
    type Output = FlatOrigin;
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return FlatOrigin::from_groups(/* e45 */ (self.group0()[0] * other.group0()[1]));
    }
}
impl Wedge<Scalar> for RoundPointAtOrigin {
    type Output = RoundPointAtOrigin;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return RoundPointAtOrigin::from_groups(/* e4, e5 */ (self.group0() * Simd32x2::from(other[scalar])));
    }
}
impl Wedge<Sphere> for RoundPointAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: Sphere) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])));
    }
}
impl Wedge<SphereAtOrigin> for RoundPointAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: SphereAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])));
    }
}
impl Wedge<SphereOnOrigin> for RoundPointAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: SphereOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[1] * other.group0()[3]));
    }
}
impl InfixWedge for Scalar {}
impl Wedge<AntiCircleOnOrigin> for Scalar {
    type Output = AntiCircleOnOrigin;
    fn wedge(self, other: AntiCircleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiCircleOnOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e23, e31, e12
            (Simd32x3::from(self[scalar]) * other.group1()),
        );
    }
}
impl Wedge<AntiDipoleOnOrigin> for Scalar {
    type Output = AntiDipoleOnOrigin;
    fn wedge(self, other: AntiDipoleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiDipoleOnOrigin::from_groups(/* e423, e431, e412, e321 */ (Simd32x4::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<AntiFlatOrigin> for Scalar {
    type Output = AntiFlatOrigin;
    fn wedge(self, other: AntiFlatOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiFlatOrigin::from_groups(/* e321 */ (self[scalar] * other[e321]));
    }
}
impl Wedge<AntiFlatPoint> for Scalar {
    type Output = AntiFlatPoint;
    fn wedge(self, other: AntiFlatPoint) -> Self::Output {
        use crate::elements::*;
        return AntiFlatPoint::from_groups(/* e235, e315, e125, e321 */ (Simd32x4::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<AntiFlector> for Scalar {
    type Output = AntiFlector;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        use crate::elements::*;
        return AntiFlector::from_groups(
            // e235, e315, e125, e321
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e1, e2, e3, e5
            (Simd32x4::from(self[scalar]) * other.group1()),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for Scalar {
    type Output = AntiFlectorOnOrigin;
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiFlectorOnOrigin::from_groups(/* e321, e1, e2, e3 */ (Simd32x4::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<AntiLine> for Scalar {
    type Output = AntiLine;
    fn wedge(self, other: AntiLine) -> Self::Output {
        use crate::elements::*;
        return AntiLine::from_groups(
            // e23, e31, e12
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e15, e25, e35
            (Simd32x3::from(self[scalar]) * other.group1()),
        );
    }
}
impl Wedge<AntiLineOnOrigin> for Scalar {
    type Output = AntiLineOnOrigin;
    fn wedge(self, other: AntiLineOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiLineOnOrigin::from_groups(/* e23, e31, e12 */ (Simd32x3::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<AntiMotor> for Scalar {
    type Output = AntiMotor;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        use crate::elements::*;
        return AntiMotor::from_groups(
            // e23, e31, e12, scalar
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e15, e25, e35, e3215
            (Simd32x4::from(self[scalar]) * other.group1()),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for Scalar {
    type Output = AntiMotorOnOrigin;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiMotorOnOrigin::from_groups(/* e23, e31, e12, scalar */ (Simd32x4::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<AntiPlane> for Scalar {
    type Output = AntiPlane;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        use crate::elements::*;
        return AntiPlane::from_groups(/* e1, e2, e3, e5 */ (Simd32x4::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<AntiPlaneOnOrigin> for Scalar {
    type Output = AntiPlaneOnOrigin;
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiPlaneOnOrigin::from_groups(/* e1, e2, e3 */ (Simd32x3::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<AntiScalar> for Scalar {
    type Output = AntiScalar;
    fn wedge(self, other: AntiScalar) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self[scalar] * other[e12345]));
    }
}
impl Wedge<AntiSphereOnOrigin> for Scalar {
    type Output = AntiSphereOnOrigin;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        use crate::elements::*;
        return AntiSphereOnOrigin::from_groups(/* e1, e2, e3, e4 */ (Simd32x4::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<Circle> for Scalar {
    type Output = Circle;
    fn wedge(self, other: Circle) -> Self::Output {
        use crate::elements::*;
        return Circle::from_groups(
            // e423, e431, e412, e321
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e415, e425, e435
            (Simd32x3::from(self[scalar]) * other.group1()),
            // e235, e315, e125
            (Simd32x3::from(self[scalar]) * other.group2()),
        );
    }
}
impl Wedge<CircleAligningOrigin> for Scalar {
    type Output = CircleAligningOrigin;
    fn wedge(self, other: CircleAligningOrigin) -> Self::Output {
        use crate::elements::*;
        return CircleAligningOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e415, e425, e435
            (Simd32x3::from(self[scalar]) * other.group1()),
            // e235, e315, e125
            (Simd32x3::from(self[scalar]) * other.group2()),
        );
    }
}
impl Wedge<CircleAtInfinity> for Scalar {
    type Output = CircleAtInfinity;
    fn wedge(self, other: CircleAtInfinity) -> Self::Output {
        use crate::elements::*;
        return CircleAtInfinity::from_groups(
            // e321, e415, e425, e435
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self[scalar]) * other.group1()),
        );
    }
}
impl Wedge<CircleAtOrigin> for Scalar {
    type Output = CircleAtOrigin;
    fn wedge(self, other: CircleAtOrigin) -> Self::Output {
        use crate::elements::*;
        return CircleAtOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self[scalar]) * other.group1()),
        );
    }
}
impl Wedge<CircleOnOrigin> for Scalar {
    type Output = CircleOnOrigin;
    fn wedge(self, other: CircleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return CircleOnOrigin::from_groups(
            // e423, e431, e412
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e415, e425, e435
            (Simd32x3::from(self[scalar]) * other.group1()),
        );
    }
}
impl Wedge<CircleOrthogonalOrigin> for Scalar {
    type Output = CircleOrthogonalOrigin;
    fn wedge(self, other: CircleOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return CircleOrthogonalOrigin::from_groups(
            // e423, e431, e412, e321
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self[scalar]) * other.group1()),
        );
    }
}
impl Wedge<Dipole> for Scalar {
    type Output = Dipole;
    fn wedge(self, other: Dipole) -> Self::Output {
        use crate::elements::*;
        return Dipole::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e23, e31, e12
            (Simd32x3::from(self[scalar]) * other.group1()),
            // e15, e25, e35, e45
            (Simd32x4::from(self[scalar]) * other.group2()),
        );
    }
}
impl Wedge<DipoleAligningOrigin> for Scalar {
    type Output = DipoleAligningOrigin;
    fn wedge(self, other: DipoleAligningOrigin) -> Self::Output {
        use crate::elements::*;
        return DipoleAligningOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e15, e25, e35, e45
            (Simd32x4::from(self[scalar]) * other.group1()),
        );
    }
}
impl Wedge<DipoleAtInfinity> for Scalar {
    type Output = DipoleAtInfinity;
    fn wedge(self, other: DipoleAtInfinity) -> Self::Output {
        use crate::elements::*;
        return DipoleAtInfinity::from_groups(
            // e23, e31, e12
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e15, e25, e35, e45
            (Simd32x4::from(self[scalar]) * other.group1()),
        );
    }
}
impl Wedge<DipoleAtOrigin> for Scalar {
    type Output = DipoleAtOrigin;
    fn wedge(self, other: DipoleAtOrigin) -> Self::Output {
        use crate::elements::*;
        return DipoleAtOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e15, e25, e35
            (Simd32x3::from(self[scalar]) * other.group1()),
        );
    }
}
impl Wedge<DipoleOnOrigin> for Scalar {
    type Output = DipoleOnOrigin;
    fn wedge(self, other: DipoleOnOrigin) -> Self::Output {
        use crate::elements::*;
        return DipoleOnOrigin::from_groups(/* e41, e42, e43, e45 */ (Simd32x4::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<DipoleOrthogonalOrigin> for Scalar {
    type Output = DipoleOrthogonalOrigin;
    fn wedge(self, other: DipoleOrthogonalOrigin) -> Self::Output {
        use crate::elements::*;
        return DipoleOrthogonalOrigin::from_groups(
            // e41, e42, e43
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e23, e31, e12
            (Simd32x3::from(self[scalar]) * other.group1()),
            // e15, e25, e35
            (Simd32x3::from(self[scalar]) * other.group2()),
        );
    }
}
impl Wedge<DualNum> for Scalar {
    type Output = DualNum;
    fn wedge(self, other: DualNum) -> Self::Output {
        use crate::elements::*;
        return DualNum::from_groups(/* scalar, e12345 */ (Simd32x2::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<FlatOrigin> for Scalar {
    type Output = FlatOrigin;
    fn wedge(self, other: FlatOrigin) -> Self::Output {
        use crate::elements::*;
        return FlatOrigin::from_groups(/* e45 */ (self[scalar] * other[e45]));
    }
}
impl Wedge<FlatPoint> for Scalar {
    type Output = FlatPoint;
    fn wedge(self, other: FlatPoint) -> Self::Output {
        use crate::elements::*;
        return FlatPoint::from_groups(/* e15, e25, e35, e45 */ (Simd32x4::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<FlatPointAtInfinity> for Scalar {
    type Output = FlatPointAtInfinity;
    fn wedge(self, other: FlatPointAtInfinity) -> Self::Output {
        use crate::elements::*;
        return FlatPointAtInfinity::from_groups(/* e15, e25, e35 */ (Simd32x3::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<Flector> for Scalar {
    type Output = Flector;
    fn wedge(self, other: Flector) -> Self::Output {
        use crate::elements::*;
        return Flector::from_groups(
            // e15, e25, e35, e45
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e4235, e4315, e4125, e3215
            (Simd32x4::from(self[scalar]) * other.group1()),
        );
    }
}
impl Wedge<FlectorAtInfinity> for Scalar {
    type Output = FlectorAtInfinity;
    fn wedge(self, other: FlectorAtInfinity) -> Self::Output {
        use crate::elements::*;
        return FlectorAtInfinity::from_groups(/* e15, e25, e35, e3215 */ (Simd32x4::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<FlectorOnOrigin> for Scalar {
    type Output = FlectorOnOrigin;
    fn wedge(self, other: FlectorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return FlectorOnOrigin::from_groups(/* e45, e4235, e4315, e4125 */ (Simd32x4::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<Horizon> for Scalar {
    type Output = Horizon;
    fn wedge(self, other: Horizon) -> Self::Output {
        use crate::elements::*;
        return Horizon::from_groups(/* e3215 */ (self[scalar] * other[e3215]));
    }
}
impl Wedge<Infinity> for Scalar {
    type Output = Infinity;
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return Infinity::from_groups(/* e5 */ (self[scalar] * other[e5]));
    }
}
impl Wedge<Line> for Scalar {
    type Output = Line;
    fn wedge(self, other: Line) -> Self::Output {
        use crate::elements::*;
        return Line::from_groups(
            // e415, e425, e435
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e235, e315, e125
            (Simd32x3::from(self[scalar]) * other.group1()),
        );
    }
}
impl Wedge<LineAtInfinity> for Scalar {
    type Output = LineAtInfinity;
    fn wedge(self, other: LineAtInfinity) -> Self::Output {
        use crate::elements::*;
        return LineAtInfinity::from_groups(/* e235, e315, e125 */ (Simd32x3::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<LineOnOrigin> for Scalar {
    type Output = LineOnOrigin;
    fn wedge(self, other: LineOnOrigin) -> Self::Output {
        use crate::elements::*;
        return LineOnOrigin::from_groups(/* e415, e425, e435 */ (Simd32x3::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<Motor> for Scalar {
    type Output = Motor;
    fn wedge(self, other: Motor) -> Self::Output {
        use crate::elements::*;
        return Motor::from_groups(
            // e415, e425, e435, e12345
            (Simd32x4::from(self[scalar]) * other.group0()),
            // e235, e315, e125, e5
            (Simd32x4::from(self[scalar]) * other.group1()),
        );
    }
}
impl Wedge<MotorAtInfinity> for Scalar {
    type Output = MotorAtInfinity;
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        use crate::elements::*;
        return MotorAtInfinity::from_groups(/* e235, e315, e125, e5 */ (Simd32x4::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<MotorOnOrigin> for Scalar {
    type Output = MotorOnOrigin;
    fn wedge(self, other: MotorOnOrigin) -> Self::Output {
        use crate::elements::*;
        return MotorOnOrigin::from_groups(/* e415, e425, e435, e12345 */ (Simd32x4::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<MultiVector> for Scalar {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            (Simd32x2::from(self[scalar]) * other.group0()),
            // e1, e2, e3, e4
            (Simd32x4::from(self[scalar]) * other.group1()),
            // e5
            (self[scalar] * other[e1]),
            // e41, e42, e43, e45
            (Simd32x4::from(self[scalar]) * other.group3()),
            // e15, e25, e35
            (Simd32x3::from(self[scalar]) * other.group4()),
            // e23, e31, e12
            (Simd32x3::from(self[scalar]) * other.group5()),
            // e321, e415, e425, e435
            (Simd32x4::from(self[scalar]) * other.group6()),
            // e423, e431, e412
            (Simd32x3::from(self[scalar]) * other.group7()),
            // e235, e315, e125
            (Simd32x3::from(self[scalar]) * other.group8()),
            // e4235, e4315, e4125, e1234
            (Simd32x4::from(self[scalar]) * other.group9()),
            // e3215
            (self[scalar] * other[e45]),
        );
    }
}
impl Wedge<NullCircleAtOrigin> for Scalar {
    type Output = NullCircleAtOrigin;
    fn wedge(self, other: NullCircleAtOrigin) -> Self::Output {
        use crate::elements::*;
        return NullCircleAtOrigin::from_groups(/* e423, e431, e412 */ (Simd32x3::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<NullDipoleAtOrigin> for Scalar {
    type Output = NullDipoleAtOrigin;
    fn wedge(self, other: NullDipoleAtOrigin) -> Self::Output {
        use crate::elements::*;
        return NullDipoleAtOrigin::from_groups(/* e41, e42, e43 */ (Simd32x3::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<NullSphereAtOrigin> for Scalar {
    type Output = NullSphereAtOrigin;
    fn wedge(self, other: NullSphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return NullSphereAtOrigin::from_groups(/* e1234 */ (self[scalar] * other[e1234]));
    }
}
impl Wedge<Origin> for Scalar {
    type Output = Origin;
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return Origin::from_groups(/* e4 */ (self[scalar] * other[e4]));
    }
}
impl Wedge<Plane> for Scalar {
    type Output = Plane;
    fn wedge(self, other: Plane) -> Self::Output {
        use crate::elements::*;
        return Plane::from_groups(/* e4235, e4315, e4125, e3215 */ (Simd32x4::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<PlaneOnOrigin> for Scalar {
    type Output = PlaneOnOrigin;
    fn wedge(self, other: PlaneOnOrigin) -> Self::Output {
        use crate::elements::*;
        return PlaneOnOrigin::from_groups(/* e4235, e4315, e4125 */ (Simd32x3::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<RoundPoint> for Scalar {
    type Output = RoundPoint;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        use crate::elements::*;
        return RoundPoint::from_groups(
            // e1, e2, e3
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e4, e5
            (Simd32x2::from(self[scalar]) * other.group1()),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for Scalar {
    type Output = RoundPointAtOrigin;
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        use crate::elements::*;
        return RoundPointAtOrigin::from_groups(/* e4, e5 */ (Simd32x2::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<Scalar> for Scalar {
    type Output = Scalar;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Scalar::from_groups(/* scalar */ (self[scalar] * other[scalar]));
    }
}
impl Wedge<Sphere> for Scalar {
    type Output = Sphere;
    fn wedge(self, other: Sphere) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (Simd32x3::from(self[scalar]) * other.group0()),
            // e1234, e3215
            (Simd32x2::from(self[scalar]) * other.group1()),
        );
    }
}
impl Wedge<SphereAtOrigin> for Scalar {
    type Output = SphereAtOrigin;
    fn wedge(self, other: SphereAtOrigin) -> Self::Output {
        use crate::elements::*;
        return SphereAtOrigin::from_groups(/* e1234, e3215 */ (Simd32x2::from(self[scalar]) * other.group0()));
    }
}
impl Wedge<SphereOnOrigin> for Scalar {
    type Output = SphereOnOrigin;
    fn wedge(self, other: SphereOnOrigin) -> Self::Output {
        use crate::elements::*;
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ (Simd32x4::from(self[scalar]) * other.group0()));
    }
}
impl InfixWedge for Sphere {}
impl Wedge<AntiFlector> for Sphere {
    type Output = AntiScalar;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group1()[0] * other.group1()[3]) + (self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for Sphere {
    type Output = AntiScalar;
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
        );
    }
}
impl Wedge<AntiMotor> for Sphere {
    type Output = Sphere;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (self.group0() * Simd32x3::from(other.group0()[3])),
            // e1234, e3215
            (self.group1() * Simd32x2::from(other.group0()[3])),
        );
    }
}
impl Wedge<AntiMotorOnOrigin> for Sphere {
    type Output = Sphere;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (self.group0() * Simd32x3::from(other.group0()[3])),
            // e1234, e3215
            (self.group1() * Simd32x2::from(other.group0()[3])),
        );
    }
}
impl Wedge<AntiPlane> for Sphere {
    type Output = AntiScalar;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group1()[0] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for Sphere {
    type Output = AntiScalar;
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for Sphere {
    type Output = AntiScalar;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group1()[1] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DualNum> for Sphere {
    type Output = Sphere;
    fn wedge(self, other: DualNum) -> Self::Output {
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (self.group0() * Simd32x3::from(other.group0()[0])),
            // e1234, e3215
            (self.group1() * Simd32x2::from(other.group0()[0])),
        );
    }
}
impl Wedge<Infinity> for Sphere {
    type Output = AntiScalar;
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group1()[0] * other[e5]));
    }
}
impl Wedge<Motor> for Sphere {
    type Output = AntiScalar;
    fn wedge(self, other: Motor) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group1()[0] * other.group1()[3]));
    }
}
impl Wedge<MotorAtInfinity> for Sphere {
    type Output = AntiScalar;
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group1()[0] * other.group0()[3]));
    }
}
impl Wedge<MultiVector> for Sphere {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group1()[1] * other.group1()[3])
                    + (self.group1()[0] * other[e1])
                    + (self.group0()[2] * other.group1()[2])
                    + (self.group0()[0] * other.group1()[0])
                    + (self.group0()[1] * other.group1()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            (Simd32x4::from(other.group0()[0]) * Simd32x4::from([self.group0()[0], self.group0()[1], self.group0()[2], self.group1()[0]])),
            // e3215
            (self.group1()[1] * other.group0()[0]),
        );
    }
}
impl Wedge<Origin> for Sphere {
    type Output = AntiScalar;
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group1()[1] * other[e4]));
    }
}
impl Wedge<RoundPoint> for Sphere {
    type Output = AntiScalar;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group1()[1] * other.group1()[0])
                + (self.group1()[0] * other.group1()[1])
                + (self.group0()[2] * other.group0()[2])
                + (self.group0()[0] * other.group0()[0])
                + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for Sphere {
    type Output = AntiScalar;
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ ((self.group1()[0] * other.group0()[1]) + (self.group1()[1] * other.group0()[0])));
    }
}
impl Wedge<Scalar> for Sphere {
    type Output = Sphere;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return Sphere::from_groups(
            // e4235, e4315, e4125
            (self.group0() * Simd32x3::from(other[scalar])),
            // e1234, e3215
            (self.group1() * Simd32x2::from(other[scalar])),
        );
    }
}
impl InfixWedge for SphereAtOrigin {}
impl Wedge<AntiFlector> for SphereAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[0] * other.group1()[3]));
    }
}
impl Wedge<AntiMotor> for SphereAtOrigin {
    type Output = SphereAtOrigin;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return SphereAtOrigin::from_groups(/* e1234, e3215 */ (self.group0() * Simd32x2::from(other.group0()[3])));
    }
}
impl Wedge<AntiMotorOnOrigin> for SphereAtOrigin {
    type Output = SphereAtOrigin;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return SphereAtOrigin::from_groups(/* e1234, e3215 */ (self.group0() * Simd32x2::from(other.group0()[3])));
    }
}
impl Wedge<AntiPlane> for SphereAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[0] * other.group0()[3]));
    }
}
impl Wedge<AntiSphereOnOrigin> for SphereAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[1] * other.group0()[3]));
    }
}
impl Wedge<DualNum> for SphereAtOrigin {
    type Output = SphereAtOrigin;
    fn wedge(self, other: DualNum) -> Self::Output {
        return SphereAtOrigin::from_groups(/* e1234, e3215 */ (self.group0() * Simd32x2::from(other.group0()[0])));
    }
}
impl Wedge<Infinity> for SphereAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[0] * other[e5]));
    }
}
impl Wedge<Motor> for SphereAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: Motor) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[0] * other.group1()[3]));
    }
}
impl Wedge<MotorAtInfinity> for SphereAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[0] * other.group0()[3]));
    }
}
impl Wedge<MultiVector> for SphereAtOrigin {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([0.0, ((self.group0()[0] * other[e1]) + (self.group0()[1] * other.group1()[3]))]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            Simd32x4::from([0.0, 0.0, 0.0, (self.group0()[0] * other.group0()[0])]),
            // e3215
            (self.group0()[1] * other.group0()[0]),
        );
    }
}
impl Wedge<Origin> for SphereAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: Origin) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[1] * other[e4]));
    }
}
impl Wedge<RoundPoint> for SphereAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ ((self.group0()[0] * other.group1()[1]) + (self.group0()[1] * other.group1()[0])));
    }
}
impl Wedge<RoundPointAtOrigin> for SphereAtOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ ((self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[0])));
    }
}
impl Wedge<Scalar> for SphereAtOrigin {
    type Output = SphereAtOrigin;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return SphereAtOrigin::from_groups(/* e1234, e3215 */ (self.group0() * Simd32x2::from(other[scalar])));
    }
}
impl InfixWedge for SphereOnOrigin {}
impl Wedge<AntiFlector> for SphereOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiFlector) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[3] * other.group1()[3]) + (self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
        );
    }
}
impl Wedge<AntiFlectorOnOrigin> for SphereOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiFlectorOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group0()[3]) + (self.group0()[0] * other.group0()[1]) + (self.group0()[1] * other.group0()[2])),
        );
    }
}
impl Wedge<AntiMotor> for SphereOnOrigin {
    type Output = SphereOnOrigin;
    fn wedge(self, other: AntiMotor) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ (self.group0() * Simd32x4::from(other.group0()[3])));
    }
}
impl Wedge<AntiMotorOnOrigin> for SphereOnOrigin {
    type Output = SphereOnOrigin;
    fn wedge(self, other: AntiMotorOnOrigin) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ (self.group0() * Simd32x4::from(other.group0()[3])));
    }
}
impl Wedge<AntiPlane> for SphereOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiPlane) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[3] * other.group0()[3]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiPlaneOnOrigin> for SphereOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiPlaneOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<AntiSphereOnOrigin> for SphereOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: AntiSphereOnOrigin) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<DualNum> for SphereOnOrigin {
    type Output = SphereOnOrigin;
    fn wedge(self, other: DualNum) -> Self::Output {
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ (self.group0() * Simd32x4::from(other.group0()[0])));
    }
}
impl Wedge<Infinity> for SphereOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: Infinity) -> Self::Output {
        use crate::elements::*;
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other[e5]));
    }
}
impl Wedge<Motor> for SphereOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: Motor) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group1()[3]));
    }
}
impl Wedge<MotorAtInfinity> for SphereOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: MotorAtInfinity) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[3]));
    }
}
impl Wedge<MultiVector> for SphereOnOrigin {
    type Output = MultiVector;
    fn wedge(self, other: MultiVector) -> Self::Output {
        use crate::elements::*;
        return MultiVector::from_groups(
            // scalar, e12345
            Simd32x2::from([
                0.0,
                ((self.group0()[3] * other[e1]) + (self.group0()[2] * other.group1()[2]) + (self.group0()[0] * other.group1()[0]) + (self.group0()[1] * other.group1()[1])),
            ]),
            // e1, e2, e3, e4
            Simd32x4::from(0.0),
            // e5
            0.0,
            // e41, e42, e43, e45
            Simd32x4::from(0.0),
            // e15, e25, e35
            Simd32x3::from(0.0),
            // e23, e31, e12
            Simd32x3::from(0.0),
            // e321, e415, e425, e435
            Simd32x4::from(0.0),
            // e423, e431, e412
            Simd32x3::from(0.0),
            // e235, e315, e125
            Simd32x3::from(0.0),
            // e4235, e4315, e4125, e1234
            (self.group0() * Simd32x4::from(other.group0()[0])),
            // e3215
            0.0,
        );
    }
}
impl Wedge<RoundPoint> for SphereOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: RoundPoint) -> Self::Output {
        return AntiScalar::from_groups(
            // e12345
            ((self.group0()[3] * other.group1()[1]) + (self.group0()[2] * other.group0()[2]) + (self.group0()[0] * other.group0()[0]) + (self.group0()[1] * other.group0()[1])),
        );
    }
}
impl Wedge<RoundPointAtOrigin> for SphereOnOrigin {
    type Output = AntiScalar;
    fn wedge(self, other: RoundPointAtOrigin) -> Self::Output {
        return AntiScalar::from_groups(/* e12345 */ (self.group0()[3] * other.group0()[1]));
    }
}
impl Wedge<Scalar> for SphereOnOrigin {
    type Output = SphereOnOrigin;
    fn wedge(self, other: Scalar) -> Self::Output {
        use crate::elements::*;
        return SphereOnOrigin::from_groups(/* e4235, e4315, e4125, e1234 */ (self.group0() * Simd32x4::from(other[scalar])));
    }
}
