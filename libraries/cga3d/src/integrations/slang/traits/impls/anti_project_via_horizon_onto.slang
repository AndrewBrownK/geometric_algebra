implementing cga3d;
using traits;
// Fancy infix trick (first half)
public AntiProjectViaHorizonOntoInfixPartial<AntiCircleRotor> operator /(AntiCircleRotor lhs, AntiProjectViaHorizonOntoInfix rhs) {
    return AntiProjectViaHorizonOntoInfixPartial<AntiCircleRotor>(lhs);
}
// Fancy infix trick (second half)
public VersorOdd operator /(AntiProjectViaHorizonOntoInfixPartial<AntiCircleRotor> lhs, AntiCircleRotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiCircleRotor {
    public VersorOdd anti_project_via_horizon_onto(AntiCircleRotor other) {
        CircleRotor right_dual = CircleRotor(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiCircleRotor anti_wedge = AntiCircleRotor(
            /* e41, e42, e43 */
            float3(right_dual.e12345) * this.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(right_dual.e12345) * this.group1, 
            /* e15, e25, e35, scalar */
            float4((float3(right_dual.e12345) * this.group2.xyz), (this.scalar * right_dual.e12345) - (this.e41 * right_dual.e235) - (this.e42 * right_dual.e315) - (this.e43 * right_dual.e125) - (this.e23 * right_dual.e415) - (this.e31 * right_dual.e425) - (this.e12 * right_dual.e435) - (this.e45 * right_dual.e321) - (this.e15 * right_dual.e423) - (this.e25 * right_dual.e431) - (this.e35 * right_dual.e412))
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(((float3(anti_wedge.scalar) * other.group0.xyz) + (float3(other.scalar) * anti_wedge.group0.xyz)), anti_wedge.scalar * other.scalar), 
            /* e23, e31, e12, e45 */
            (float4(anti_wedge.scalar) * other.group1) + (float4(other.scalar) * anti_wedge.group1), 
            /* e15, e25, e35, e1234 */
            float4((anti_wedge.e15 * other.scalar) + (anti_wedge.scalar * other.e15), (anti_wedge.e25 * other.scalar) + (anti_wedge.scalar * other.e25), (anti_wedge.e35 * other.scalar) + (anti_wedge.scalar * other.e35), -(anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12) - (anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e42 * other.e35) + (anti_wedge.e23 * other.e45) + (anti_wedge.e45 * other.e23) + (anti_wedge.e35 * other.e42), (anti_wedge.e43 * other.e15) + (anti_wedge.e31 * other.e45) + (anti_wedge.e45 * other.e31) + (anti_wedge.e15 * other.e43), (anti_wedge.e41 * other.e25) + (anti_wedge.e12 * other.e45) + (anti_wedge.e45 * other.e12) + (anti_wedge.e25 * other.e41), -(anti_wedge.e12 * other.e35) - (anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12)) - (other.group2.yzxx * float4(anti_wedge.group0.xyz.zxy, anti_wedge.e23)) - float4((other.group0.xyz.zxy * anti_wedge.group2.yzx), anti_wedge.e31 * other.e25)
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<AntiCircleRotor> lhs, AntiDipoleInversion rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiCircleRotor {
    public DipoleInversion anti_project_via_horizon_onto(AntiDipoleInversion other) {
        DipoleInversion right_dual = DipoleInversion(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        RoundPoint anti_wedge = RoundPoint(
            /* e1, e2, e3, e4 */
            float4((this.e41 * right_dual.e3215) + (this.e31 * right_dual.e4125), (this.e42 * right_dual.e3215) + (this.e12 * right_dual.e4235), (this.e43 * right_dual.e3215) + (this.e23 * right_dual.e4315), -(this.e43 * right_dual.e4125) - (this.e45 * right_dual.e1234)) - (right_dual.group3.yzxx * float4(this.group1.zxy, this.e41)) - float4((right_dual.group2.www * this.group2.xyz), this.e42 * right_dual.e4315), 
            /* e5 */
            (this.e45 * right_dual.e3215) + (this.e15 * right_dual.e4235) + (this.e25 * right_dual.e4315) + (this.e35 * right_dual.e4125)
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            (float3(other.e4) * anti_wedge.group0.xyz) - (float3(anti_wedge.e4) * other.group3.xyz), 
            /* e23, e31, e12, e45 */
            float4((other.group3.yzx * anti_wedge.group0.zxy), other.e4 * anti_wedge.e5) - (other.group3.zxyw * anti_wedge.group0.yzxw), 
            /* e15, e25, e35, e1234 */
            float4(other.e1 * anti_wedge.e5, other.e2 * anti_wedge.e5, other.e3 * anti_wedge.e5, -(other.e431 * anti_wedge.e2) - (other.e412 * anti_wedge.e3) - (other.e321 * anti_wedge.e4)) - (anti_wedge.group0.xyzx * float4(other.group3.www, other.e423)), 
            /* e4235, e4315, e4125, e3215 */
            float4(-(other.e425 * anti_wedge.e3) - (other.e235 * anti_wedge.e4), -(other.e435 * anti_wedge.e1) - (other.e315 * anti_wedge.e4), -(other.e415 * anti_wedge.e2) - (other.e125 * anti_wedge.e4), (other.e315 * anti_wedge.e2) + (other.e125 * anti_wedge.e3)) + (float4(anti_wedge.e5) * float4(other.group0.xyz, other.e321)) + (anti_wedge.group0.yzxx * float4(other.group1.zxy, other.e235))
        );
    }
}
// Fancy infix trick (second half)
public VersorOdd operator /(AntiProjectViaHorizonOntoInfixPartial<AntiCircleRotor> lhs, AntiDualNum rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiCircleRotor {
    public VersorOdd anti_project_via_horizon_onto(AntiDualNum other) {
        DualNum right_dual = DualNum(
            /* e5, e12345 */
            other.group0.xy
        );
        AntiCircleRotor anti_wedge = AntiCircleRotor(
            /* e41, e42, e43 */
            float3(right_dual.e12345) * this.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(right_dual.e12345) * this.group1, 
            /* e15, e25, e35, scalar */
            float4(right_dual.e12345) * this.group2
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(other.scalar) * float4(anti_wedge.group0.xyz, anti_wedge.scalar), 
            /* e23, e31, e12, e45 */
            float4(other.scalar) * anti_wedge.group1, 
            /* e15, e25, e35, e1234 */
            float4(other.group0.xy.yy, other.scalar, 0.0) * float4(float3(1.0), 0.0) * float4(anti_wedge.group2.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(float3(0.0), anti_wedge.scalar * other.e3215)
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<AntiCircleRotor> lhs, AntiFlector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiCircleRotor {
    public DipoleInversion anti_project_via_horizon_onto(AntiFlector other) {
        Flector right_dual = Flector(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        RoundPoint anti_wedge = RoundPoint(
            /* e1, e2, e3, e4 */
            float4((this.e41 * right_dual.e3215) + (this.e31 * right_dual.e4125), (this.e42 * right_dual.e3215) + (this.e12 * right_dual.e4235), (this.e43 * right_dual.e3215) + (this.e23 * right_dual.e4315), -(this.e42 * right_dual.e4315) - (this.e43 * right_dual.e4125)) - (right_dual.group1.yzxx * float4(this.group1.zxy, this.e41)), 
            /* e5 */
            (this.e45 * right_dual.e3215) + (this.e15 * right_dual.e4235) + (this.e25 * right_dual.e4315) + (this.e35 * right_dual.e4125)
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            float3(anti_wedge.e4) * other.group1.xyz * float3(-1.0), 
            /* e23, e31, e12, e45 */
            float4(((other.group1.yzx * anti_wedge.group0.zxy) - (other.group1.zxy * anti_wedge.group0.yzx)), other.e5 * anti_wedge.e4 * -1.0), 
            /* e15, e25, e35, e1234 */
            float4(((float3(anti_wedge.e5) * other.group1.xyz) - (float3(other.e5) * anti_wedge.group0.xyz)), other.e321 * anti_wedge.e4 * -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4((float3(anti_wedge.e4) * other.group0.xyz * float3(-1.0)), (other.e235 * anti_wedge.e1) + (other.e315 * anti_wedge.e2) + (other.e125 * anti_wedge.e3) + (other.e321 * anti_wedge.e5))
        );
    }
}
// Fancy infix trick (second half)
public AntiLine operator /(AntiProjectViaHorizonOntoInfixPartial<AntiCircleRotor> lhs, AntiLine rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiCircleRotor {
    public AntiLine anti_project_via_horizon_onto(AntiLine other) {
        Line right_dual = Line(
            /* e415, e425, e435 */
            other.group0.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group1.xyz * float3(-1.0)
        );
        Scalar anti_wedge = Scalar(
            /* scalar */
            -(this.e41 * right_dual.e235) - (this.e42 * right_dual.e315) - (this.e43 * right_dual.e125) - (this.e23 * right_dual.e415) - (this.e31 * right_dual.e425) - (this.e12 * right_dual.e435)
        );
        return AntiLine(
            /* e23, e31, e12 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e15, e25, e35 */
            float3(anti_wedge.scalar) * other.group1.xyz
        );
    }
}
// Fancy infix trick (second half)
public VersorOdd operator /(AntiProjectViaHorizonOntoInfixPartial<AntiCircleRotor> lhs, AntiMotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiCircleRotor {
    public VersorOdd anti_project_via_horizon_onto(AntiMotor other) {
        Motor right_dual = Motor(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiCircleRotor anti_wedge = AntiCircleRotor(
            /* e41, e42, e43 */
            float3(right_dual.e12345) * this.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(right_dual.e12345) * this.group1, 
            /* e15, e25, e35, scalar */
            float4((float3(right_dual.e12345) * this.group2.xyz), (this.scalar * right_dual.e12345) - (this.e41 * right_dual.e235) - (this.e42 * right_dual.e315) - (this.e43 * right_dual.e125) - (this.e23 * right_dual.e415) - (this.e31 * right_dual.e425) - (this.e12 * right_dual.e435))
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(other.scalar) * float4(anti_wedge.group0.xyz, anti_wedge.scalar), 
            /* e23, e31, e12, e45 */
            float4(((float3(anti_wedge.scalar) * other.group0.xyz) + (float3(other.scalar) * anti_wedge.group1.xyz)), anti_wedge.e45 * other.scalar), 
            /* e15, e25, e35, e1234 */
            float4((anti_wedge.e15 * other.scalar) + (anti_wedge.scalar * other.e15), (anti_wedge.e25 * other.scalar) + (anti_wedge.scalar * other.e25), (anti_wedge.e35 * other.scalar) + (anti_wedge.scalar * other.e35), -(anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12)), 
            /* e4235, e4315, e4125, e3215 */
            float4(anti_wedge.e45 * other.e23, anti_wedge.e45 * other.e31, anti_wedge.e45 * other.e12, -(anti_wedge.e31 * other.e25) - (anti_wedge.e12 * other.e35) - (anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12)) + (other.group1.zxyw * float4(anti_wedge.group0.xyz.yzx, anti_wedge.scalar)) - (other.group1.yzxx * float4(anti_wedge.group0.xyz.zxy, anti_wedge.e23))
        );
    }
}
// Fancy infix trick (second half)
public Dipole operator /(AntiProjectViaHorizonOntoInfixPartial<AntiCircleRotor> lhs, AntiPlane rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiCircleRotor {
    public Dipole anti_project_via_horizon_onto(AntiPlane other) {
        Plane right_dual = Plane(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        RoundPoint anti_wedge = RoundPoint(
            /* e1, e2, e3, e4 */
            float4((this.e41 * right_dual.e3215) + (this.e31 * right_dual.e4125), (this.e42 * right_dual.e3215) + (this.e12 * right_dual.e4235), (this.e43 * right_dual.e3215) + (this.e23 * right_dual.e4315), -(this.e42 * right_dual.e4315) - (this.e43 * right_dual.e4125)) - (right_dual.group0.yzxx * float4(this.group1.zxy, this.e41)), 
            /* e5 */
            (this.e45 * right_dual.e3215) + (this.e15 * right_dual.e4235) + (this.e25 * right_dual.e4315) + (this.e35 * right_dual.e4125)
        );
        return Dipole(
            /* e41, e42, e43 */
            float3(anti_wedge.e4) * other.group0.xyz * float3(-1.0), 
            /* e23, e31, e12, e45 */
            float4(((other.group0.yzx * anti_wedge.group0.zxy) - (other.group0.zxy * anti_wedge.group0.yzx)), other.e5 * anti_wedge.e4 * -1.0), 
            /* e15, e25, e35 */
            (float3(anti_wedge.e5) * other.group0.xyz) - (float3(other.e5) * anti_wedge.group0.xyz)
        );
    }
}
// Fancy infix trick (second half)
public Dipole operator /(AntiProjectViaHorizonOntoInfixPartial<AntiCircleRotor> lhs, Dipole rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiCircleRotor {
    public Dipole anti_project_via_horizon_onto(Dipole other) {
        Circle right_dual = Circle(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125 */
            other.group2.xyz * float3(-1.0)
        );
        Scalar anti_wedge = Scalar(
            /* scalar */
            -(this.e41 * right_dual.e235) - (this.e42 * right_dual.e315) - (this.e43 * right_dual.e125) - (this.e23 * right_dual.e415) - (this.e31 * right_dual.e425) - (this.e12 * right_dual.e435) - (this.e45 * right_dual.e321) - (this.e15 * right_dual.e423) - (this.e25 * right_dual.e431) - (this.e35 * right_dual.e412)
        );
        return Dipole(
            /* e41, e42, e43 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(anti_wedge.scalar) * other.group1, 
            /* e15, e25, e35 */
            float3(anti_wedge.scalar) * other.group2.xyz
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<AntiCircleRotor> lhs, DipoleInversion rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiCircleRotor {
    public DipoleInversion anti_project_via_horizon_onto(DipoleInversion other) {
        AntiDipoleInversion right_dual = AntiDipoleInversion(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        Scalar anti_wedge = Scalar(
            /* scalar */
            -(this.e41 * right_dual.e235) - (this.e42 * right_dual.e315) - (this.e43 * right_dual.e125) - (this.e23 * right_dual.e415) - (this.e31 * right_dual.e425) - (this.e12 * right_dual.e435) - (this.e45 * right_dual.e321) - (this.e15 * right_dual.e423) - (this.e25 * right_dual.e431) - (this.e35 * right_dual.e412)
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(anti_wedge.scalar) * other.group1, 
            /* e15, e25, e35, e1234 */
            float4(anti_wedge.scalar) * other.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(anti_wedge.scalar) * other.group3
        );
    }
}
// Fancy infix trick (second half)
public FlatPoint operator /(AntiProjectViaHorizonOntoInfixPartial<AntiCircleRotor> lhs, DualNum rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiCircleRotor {
    public FlatPoint anti_project_via_horizon_onto(DualNum other) {
        AntiDualNum right_dual = AntiDualNum(
            /* e3215, scalar */
            other.group0.xy * float2(-1.0)
        );
        return FlatPoint(
            /* e15, e25, e35, e45 */
            float4(other.group0.xy.xx, other.e5, 0.0) * float4(float3(1.0), 0.0) * float4(float4(this.e41 * right_dual.e3215, this.e42 * right_dual.e3215, this.e43 * right_dual.e3215, this.e45 * right_dual.e3215).xyz, 0.0) * float4(-1.0, -1.0, -1.0, 0.0)
        );
    }
}
// Fancy infix trick (second half)
public FlatPoint operator /(AntiProjectViaHorizonOntoInfixPartial<AntiCircleRotor> lhs, FlatPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiCircleRotor {
    public FlatPoint anti_project_via_horizon_onto(FlatPoint other) {
        AntiFlatPoint right_dual = AntiFlatPoint(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return FlatPoint(
            /* e15, e25, e35, e45 */
            float4(-(this.e41 * right_dual.e235) - (this.e42 * right_dual.e315) - (this.e43 * right_dual.e125) - (this.e45 * right_dual.e321)) * other.group0
        );
    }
}
// Fancy infix trick (second half)
public Flector operator /(AntiProjectViaHorizonOntoInfixPartial<AntiCircleRotor> lhs, Flector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiCircleRotor {
    public Flector anti_project_via_horizon_onto(Flector other) {
        AntiFlector right_dual = AntiFlector(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        Scalar anti_wedge = Scalar(
            /* scalar */
            -(this.e41 * right_dual.e235) - (this.e42 * right_dual.e315) - (this.e43 * right_dual.e125) - (this.e45 * right_dual.e321)
        );
        return Flector(
            /* e15, e25, e35, e45 */
            float4(anti_wedge.scalar) * other.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4(anti_wedge.scalar) * other.group1
        );
    }
}
// Fancy infix trick (second half)
public Flector operator /(AntiProjectViaHorizonOntoInfixPartial<AntiCircleRotor> lhs, Motor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiCircleRotor {
    public Flector anti_project_via_horizon_onto(Motor other) {
        AntiPlane anti_wedge = AntiPlane(
            /* e1, e2, e3, e5 */
            float4(other.e5 * -1.0) * float4(this.group0.xyz, this.e45)
        );
        return Flector(
            /* e15, e25, e35, e45 */
            float4(float3(1.0), 0.0) * float4(other.group1.www, 0.0) * float4(anti_wedge.group0.xyz, 0.0) * float4(-1.0, -1.0, -1.0, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(anti_wedge.e3 * other.e425 * -1.0, anti_wedge.e1 * other.e435 * -1.0, anti_wedge.e2 * other.e415 * -1.0, (anti_wedge.e2 * other.e315) + (anti_wedge.e3 * other.e125)) + (anti_wedge.group0.yzxx * float4(other.group0.zxy, other.e235))
        );
    }
}
// Fancy infix trick (second half)
public MultiVector operator /(AntiProjectViaHorizonOntoInfixPartial<AntiCircleRotor> lhs, MultiVector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiCircleRotor {
    public MultiVector anti_project_via_horizon_onto(MultiVector other) {
        MultiVector right_dual = MultiVector(
            /* scalar, e12345 */
            other.group0.xy.yx * float2(-1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215, 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43 */
            other.group7.xyz, 
            /* e23, e31, e12 */
            other.group6.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412 */
            other.group4.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group3.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        MultiVector anti_wedge = MultiVector(
            /* scalar, e12345 */
            float2((this.scalar * right_dual.e12345) - (this.e41 * right_dual.e235) - (this.e42 * right_dual.e315) - (this.e43 * right_dual.e125) - (this.e23 * right_dual.e415) - (this.e31 * right_dual.e425) - (this.e12 * right_dual.e435) - (this.e45 * right_dual.e321) - (this.e15 * right_dual.e423) - (this.e25 * right_dual.e431) - (this.e35 * right_dual.e412), 0.0), 
            /* e1, e2, e3, e4 */
            float4((this.e41 * right_dual.e3215) + (this.e31 * right_dual.e4125), (this.e42 * right_dual.e3215) + (this.e12 * right_dual.e4235), (this.e43 * right_dual.e3215) + (this.e23 * right_dual.e4315), -(this.e43 * right_dual.e4125) - (this.e45 * right_dual.e1234)) - (right_dual.group9.yzxx * float4(this.group1.zxy, this.e41)) - float4((float3(right_dual.e1234) * this.group2.xyz), this.e42 * right_dual.e4315), 
            /* e5 */
            (this.e45 * right_dual.e3215) + (this.e15 * right_dual.e4235) + (this.e25 * right_dual.e4315) + (this.e35 * right_dual.e4125), 
            /* e15, e25, e35, e45 */
            float4(right_dual.e12345) * float4(this.group2.xyz, this.e45), 
            /* e41, e42, e43 */
            float3(right_dual.e12345) * this.group0.xyz, 
            /* e23, e31, e12 */
            float3(right_dual.e12345) * this.group1.xyz, 
            /* e415, e425, e435, e321 */
            float4(0.0), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            float3(0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(0.0), 
            /* e1234 */
            0.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(anti_wedge.scalar * other.scalar, (anti_wedge.scalar * other.e12345) + (anti_wedge.e12345 * other.scalar) + (anti_wedge.e1 * other.e4235) + (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) + (anti_wedge.e4 * other.e3215) + (anti_wedge.e5 * other.e1234) + (anti_wedge.e4235 * other.e1) + (anti_wedge.e4315 * other.e2) + (anti_wedge.e4125 * other.e3) + (anti_wedge.e3215 * other.e4) + (anti_wedge.e1234 * other.e5) - (anti_wedge.e15 * other.e423) - (anti_wedge.e25 * other.e431) - (anti_wedge.e35 * other.e412) - (anti_wedge.e45 * other.e321) - (anti_wedge.e41 * other.e235) - (anti_wedge.e42 * other.e315) - (anti_wedge.e43 * other.e125) - (anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435) - (anti_wedge.e415 * other.e23) - (anti_wedge.e425 * other.e31) - (anti_wedge.e435 * other.e12) - (anti_wedge.e321 * other.e45) - (anti_wedge.e423 * other.e15) - (anti_wedge.e431 * other.e25) - (anti_wedge.e412 * other.e35) - (anti_wedge.e235 * other.e41) - (anti_wedge.e315 * other.e42) - (anti_wedge.e125 * other.e43)), 
            /* e1, e2, e3, e4 */
            (float4(anti_wedge.scalar) * other.group1) + (float4(other.scalar) * anti_wedge.group1), 
            /* e5 */
            (anti_wedge.scalar * other.e5) + (anti_wedge.e5 * other.scalar), 
            /* e15, e25, e35, e45 */
            (float4(anti_wedge.scalar) * other.group3) + (float4(anti_wedge.e5) * other.group1) + (float4(other.scalar) * anti_wedge.group3) - (float4(other.e5) * anti_wedge.group1), 
            /* e41, e42, e43 */
            (float3(anti_wedge.scalar) * other.group4.xyz) + (float3(other.scalar) * anti_wedge.group4.xyz) + (float3(other.e4) * anti_wedge.group1.xyz) - (float3(anti_wedge.e4) * other.group1.xyz), 
            /* e23, e31, e12 */
            (float3(anti_wedge.scalar) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group5.xyz) + (anti_wedge.group1.zxy * other.group1.yzx) - (anti_wedge.group1.yzx * other.group1.zxy), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e4 * other.e15) + (anti_wedge.e5 * other.e41) + (anti_wedge.e15 * other.e4) + (anti_wedge.e41 * other.e5), (anti_wedge.e4 * other.e25) + (anti_wedge.e5 * other.e42) + (anti_wedge.e25 * other.e4) + (anti_wedge.e42 * other.e5), (anti_wedge.e4 * other.e35) + (anti_wedge.e5 * other.e43) + (anti_wedge.e35 * other.e4) + (anti_wedge.e43 * other.e5), -(anti_wedge.e1 * other.e23) - (anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12) - (anti_wedge.e12 * other.e3)) + (float4(anti_wedge.scalar) * other.group6) + (float4(other.scalar) * anti_wedge.group6) - (other.group1.xyzy * float4(anti_wedge.group3.www, anti_wedge.e31)) - float4((other.group3.www * anti_wedge.group1.xyz), anti_wedge.e23 * other.e1), 
            /* e423, e431, e412 */
            (float3(anti_wedge.scalar) * other.group7.xyz) + (float3(anti_wedge.e4) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group7.xyz) + (float3(other.e4) * anti_wedge.group5.xyz) + (anti_wedge.group4.xyz.yzx * other.group1.zxy) + (other.group4.xyz.yzx * anti_wedge.group1.zxy) - (anti_wedge.group4.xyz.zxy * other.group1.yzx) - (other.group4.xyz.zxy * anti_wedge.group1.yzx), 
            /* e235, e315, e125 */
            (float3(anti_wedge.scalar) * other.group8.xyz) + (float3(anti_wedge.e5) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group8.xyz) + (float3(other.e5) * anti_wedge.group5.xyz) + (anti_wedge.group1.yzx * other.group3.zxy) + (anti_wedge.group3.zxy * other.group1.yzx) - (anti_wedge.group1.zxy * other.group3.yzx) - (anti_wedge.group3.yzx * other.group1.zxy), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e2 * other.e435) + (anti_wedge.e5 * other.e423) + (anti_wedge.e45 * other.e23) + (anti_wedge.e425 * other.e3), (anti_wedge.e3 * other.e415) + (anti_wedge.e5 * other.e431) + (anti_wedge.e45 * other.e31) + (anti_wedge.e435 * other.e1), (anti_wedge.e1 * other.e425) + (anti_wedge.e5 * other.e412) + (anti_wedge.e45 * other.e12) + (anti_wedge.e415 * other.e2), -(anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12) - (anti_wedge.e321 * other.e5)) + (float4(anti_wedge.scalar) * other.group9) + (float4(other.scalar) * anti_wedge.group9) + float4((anti_wedge.group5.xyz * other.group3.www), anti_wedge.e2 * other.e315) + float4((anti_wedge.group8.xyz * other.group1.www), anti_wedge.e3 * other.e125) + float4((anti_wedge.group4.xyz.yzx * other.group3.zxy), anti_wedge.e1 * other.e235) + float4((other.group4.xyz.yzx * anti_wedge.group3.zxy), anti_wedge.e5 * other.e321) - (other.group1.yzxz * float4(anti_wedge.group6.zxy, anti_wedge.e125)) - (other.group3.yzxx * float4(anti_wedge.group4.xyz.zxy, anti_wedge.e23)) - float4((float3(other.e5) * anti_wedge.group7.xyz), anti_wedge.e31 * other.e25) - float4((other.group8.xyz * anti_wedge.group1.www), anti_wedge.e235 * other.e1) - float4((other.group4.xyz.zxy * anti_wedge.group3.yzx), anti_wedge.e12 * other.e35) - float4((anti_wedge.group1.zxy * other.group6.yzx), anti_wedge.e315 * other.e2), 
            /* e1234 */
            (anti_wedge.scalar * other.e1234) + (anti_wedge.e321 * other.e4) + (anti_wedge.e423 * other.e1) + (anti_wedge.e431 * other.e2) + (anti_wedge.e412 * other.e3) + (anti_wedge.e1234 * other.scalar) - (anti_wedge.e1 * other.e423) - (anti_wedge.e2 * other.e431) - (anti_wedge.e3 * other.e412) - (anti_wedge.e4 * other.e321) - (anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12) - (anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)
        );
    }
}
// Fancy infix trick (second half)
public Dipole operator /(AntiProjectViaHorizonOntoInfixPartial<AntiCircleRotor> lhs, RoundPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiCircleRotor {
    public Dipole anti_project_via_horizon_onto(RoundPoint other) {
        Sphere right_dual = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        RoundPoint anti_wedge = RoundPoint(
            /* e1, e2, e3, e4 */
            float4((this.e41 * right_dual.e3215) + (this.e31 * right_dual.e4125), (this.e42 * right_dual.e3215) + (this.e12 * right_dual.e4235), (this.e43 * right_dual.e3215) + (this.e23 * right_dual.e4315), -(this.e43 * right_dual.e4125) - (this.e45 * right_dual.e1234)) - (right_dual.group0.yzxx * float4(this.group1.zxy, this.e41)) - float4((float3(right_dual.e1234) * this.group2.xyz), this.e42 * right_dual.e4315), 
            /* e5 */
            (this.e45 * right_dual.e3215) + (this.e15 * right_dual.e4235) + (this.e25 * right_dual.e4315) + (this.e35 * right_dual.e4125)
        );
        return Dipole(
            /* e41, e42, e43 */
            (float3(other.e4) * anti_wedge.group0.xyz) - (float3(anti_wedge.e4) * other.group0.xyz), 
            /* e23, e31, e12, e45 */
            float4((anti_wedge.group0.zxy * other.group0.yzx), anti_wedge.e5 * other.e4) - (anti_wedge.group0.yzxw * float4(other.group0.zxy, other.e5)), 
            /* e15, e25, e35 */
            (float3(anti_wedge.e5) * other.group0.xyz) - (float3(other.e5) * anti_wedge.group0.xyz)
        );
    }
}
// Fancy infix trick (second half)
public AntiCircleRotor operator /(AntiProjectViaHorizonOntoInfixPartial<AntiCircleRotor> lhs, Scalar rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiCircleRotor {
    public AntiCircleRotor anti_project_via_horizon_onto(Scalar other) {
        AntiScalar right_dual = AntiScalar(
            /* e12345 */
            other.scalar
        );
        AntiCircleRotor anti_wedge = AntiCircleRotor(
            /* e41, e42, e43 */
            float3(right_dual.e12345) * this.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(right_dual.e12345) * this.group1, 
            /* e15, e25, e35, scalar */
            float4(right_dual.e12345) * this.group2
        );
        return AntiCircleRotor(
            /* e41, e42, e43 */
            float3(other.scalar) * anti_wedge.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(other.scalar) * anti_wedge.group1, 
            /* e15, e25, e35, scalar */
            float4(other.scalar) * anti_wedge.group2
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<AntiCircleRotor> lhs, VersorEven rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiCircleRotor {
    public DipoleInversion anti_project_via_horizon_onto(VersorEven other) {
        VersorOdd right_dual = VersorOdd(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        RoundPoint anti_wedge = RoundPoint(
            /* e1, e2, e3, e4 */
            float4((this.e41 * right_dual.e3215) + (this.e31 * right_dual.e4125), (this.e42 * right_dual.e3215) + (this.e12 * right_dual.e4235), (this.e43 * right_dual.e3215) + (this.e23 * right_dual.e4315), -(this.e43 * right_dual.e4125) - (this.e45 * right_dual.e1234)) - (right_dual.group3.yzxx * float4(this.group1.zxy, this.e41)) - float4((right_dual.group2.www * this.group2.xyz), this.e42 * right_dual.e4315), 
            /* e5 */
            (this.e45 * right_dual.e3215) + (this.e15 * right_dual.e4235) + (this.e25 * right_dual.e4315) + (this.e35 * right_dual.e4125)
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            (float3(other.e4) * anti_wedge.group0.xyz) - (float3(anti_wedge.e4) * other.group3.xyz), 
            /* e23, e31, e12, e45 */
            float4((anti_wedge.group0.zxy * other.group3.yzx), anti_wedge.e5 * other.e4) - (anti_wedge.group0.yzxw * float4(other.group3.zxy, other.e5)), 
            /* e15, e25, e35, e1234 */
            float4(anti_wedge.e5 * other.e1, anti_wedge.e5 * other.e2, anti_wedge.e5 * other.e3, -(anti_wedge.e2 * other.e431) - (anti_wedge.e3 * other.e412) - (anti_wedge.e4 * other.e321)) - (anti_wedge.group0.xyzx * float4(other.group2.www, other.e423)), 
            /* e4235, e4315, e4125, e3215 */
            float4(-(anti_wedge.e3 * other.e425) - (anti_wedge.e4 * other.e235), -(anti_wedge.e1 * other.e435) - (anti_wedge.e4 * other.e315), -(anti_wedge.e2 * other.e415) - (anti_wedge.e4 * other.e125), (anti_wedge.e3 * other.e125) + (anti_wedge.e5 * other.e321)) + (anti_wedge.group0.yzxx * float4(other.group1.zxy, other.e235)) + float4((float3(anti_wedge.e5) * other.group0.xyz), anti_wedge.e2 * other.e315)
        );
    }
}
// Fancy infix trick (second half)
public VersorOdd operator /(AntiProjectViaHorizonOntoInfixPartial<AntiCircleRotor> lhs, VersorOdd rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiCircleRotor {
    public VersorOdd anti_project_via_horizon_onto(VersorOdd other) {
        VersorEven right_dual = VersorEven(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiCircleRotor anti_wedge = AntiCircleRotor(
            /* e41, e42, e43 */
            float3(right_dual.e12345) * this.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(right_dual.e12345) * this.group1, 
            /* e15, e25, e35, scalar */
            float4((float3(right_dual.e12345) * this.group2.xyz), (this.scalar * right_dual.e12345) - (this.e41 * right_dual.e235) - (this.e42 * right_dual.e315) - (this.e43 * right_dual.e125) - (this.e23 * right_dual.e415) - (this.e31 * right_dual.e425) - (this.e12 * right_dual.e435) - (this.e45 * right_dual.e321) - (this.e15 * right_dual.e423) - (this.e25 * right_dual.e431) - (this.e35 * right_dual.e412))
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(((float3(anti_wedge.scalar) * other.group0.xyz) + (float3(other.scalar) * anti_wedge.group0.xyz)), anti_wedge.scalar * other.scalar), 
            /* e23, e31, e12, e45 */
            (float4(anti_wedge.scalar) * other.group1) + (float4(other.scalar) * anti_wedge.group1), 
            /* e15, e25, e35, e1234 */
            float4(anti_wedge.scalar * other.e15, anti_wedge.scalar * other.e25, anti_wedge.scalar * other.e35, -(anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12) - (anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)) + (anti_wedge.group2 * float4(other.group0.www, other.e1234)), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e23 * other.e45) + (anti_wedge.e45 * other.e23) + (anti_wedge.e35 * other.e42) + (anti_wedge.scalar * other.e4235), (anti_wedge.e31 * other.e45) + (anti_wedge.e45 * other.e31) + (anti_wedge.e15 * other.e43) + (anti_wedge.scalar * other.e4315), (anti_wedge.e12 * other.e45) + (anti_wedge.e45 * other.e12) + (anti_wedge.e25 * other.e41) + (anti_wedge.scalar * other.e4125), -(anti_wedge.e12 * other.e35) - (anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12)) + float4((anti_wedge.group0.xyz.yzx * other.group2.zxy), anti_wedge.scalar * other.e3215) - (other.group2.yzxx * float4(anti_wedge.group0.xyz.zxy, anti_wedge.e23)) - float4((anti_wedge.group2.yzx * other.group0.zxy), anti_wedge.e31 * other.e25)
        );
    }
}
// Fancy infix trick (first half)
public AntiProjectViaHorizonOntoInfixPartial<AntiDipoleInversion> operator /(AntiDipoleInversion lhs, AntiProjectViaHorizonOntoInfix rhs) {
    return AntiProjectViaHorizonOntoInfixPartial<AntiDipoleInversion>(lhs);
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<AntiDipoleInversion> lhs, AntiCircleRotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiDipoleInversion {
    public VersorEven anti_project_via_horizon_onto(AntiCircleRotor other) {
        CircleRotor right_dual = CircleRotor(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiDipoleInversion anti_wedge = AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(right_dual.e12345) * this.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(right_dual.e12345) * this.group1, 
            /* e235, e315, e125, e4 */
            float4((float3(right_dual.e12345) * this.group2.xyz), (this.e4 * right_dual.e12345) - (this.e423 * right_dual.e415) - (this.e431 * right_dual.e425) - (this.e412 * right_dual.e435) - (this.e415 * right_dual.e423) - (this.e425 * right_dual.e431) - (this.e435 * right_dual.e412)), 
            /* e1, e2, e3, e5 */
            float4((this.e415 * right_dual.e321) + (this.e321 * right_dual.e415) + (this.e315 * right_dual.e412) + (this.e1 * right_dual.e12345), (this.e425 * right_dual.e321) + (this.e321 * right_dual.e425) + (this.e125 * right_dual.e423) + (this.e2 * right_dual.e12345), (this.e435 * right_dual.e321) + (this.e321 * right_dual.e435) + (this.e235 * right_dual.e431) + (this.e3 * right_dual.e12345), -(this.e435 * right_dual.e125) - (this.e235 * right_dual.e415) - (this.e315 * right_dual.e425) - (this.e125 * right_dual.e435)) + (right_dual.group2.yzxw * float4(this.group0.xyz.zxy, this.e5)) - (right_dual.group2.zxyx * float4(this.group0.xyz.yzx, this.e415)) - float4((right_dual.group0.xyz.yzx * this.group2.zxy), this.e425 * right_dual.e315)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4((other.e42 * anti_wedge.e3) + (other.e23 * anti_wedge.e4) + (other.scalar * anti_wedge.e423), (other.e43 * anti_wedge.e1) + (other.e31 * anti_wedge.e4) + (other.scalar * anti_wedge.e431), (other.e41 * anti_wedge.e2) + (other.e12 * anti_wedge.e4) + (other.scalar * anti_wedge.e412), -(other.e42 * anti_wedge.e315) - (other.e43 * anti_wedge.e125) - (other.e23 * anti_wedge.e415) - (other.e31 * anti_wedge.e425) - (other.e12 * anti_wedge.e435) - (other.e45 * anti_wedge.e321) - (other.e15 * anti_wedge.e423) - (other.e25 * anti_wedge.e431) - (other.e35 * anti_wedge.e412)) - float4((other.group0.xyz.zxy * anti_wedge.group3.yzx), other.e41 * anti_wedge.e235), 
            /* e415, e425, e435, e321 */
            float4((other.e15 * anti_wedge.e4) + (other.scalar * anti_wedge.e415), (other.e25 * anti_wedge.e4) + (other.scalar * anti_wedge.e425), (other.e35 * anti_wedge.e4) + (other.scalar * anti_wedge.e435), -(other.e31 * anti_wedge.e2) - (other.e12 * anti_wedge.e3)) + float4((other.group0.xyz * anti_wedge.group3.www), other.scalar * anti_wedge.e321) - (other.group1.wwwx * anti_wedge.group3.xyzx), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.scalar) * anti_wedge.group2.xyz) + (float3(anti_wedge.e5) * other.group1.xyz) + (other.group2.zxy * anti_wedge.group3.yzx) - (other.group2.yzx * anti_wedge.group3.zxy)), other.scalar * anti_wedge.e5), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * float4(anti_wedge.group3.xyz, anti_wedge.e4)
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<AntiDipoleInversion> lhs, AntiDipoleInversion rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiDipoleInversion {
    public VersorEven anti_project_via_horizon_onto(AntiDipoleInversion other) {
        DipoleInversion right_dual = DipoleInversion(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiCircleRotor anti_wedge = AntiCircleRotor(
            /* e41, e42, e43 */
            (float3(right_dual.e1234) * this.group1.xyz) + (this.group0.xyz.zxy * right_dual.group3.yzx) - (this.group0.xyz.yzx * right_dual.group3.zxy), 
            /* e23, e31, e12, e45 */
            float4((this.e423 * right_dual.e3215) + (this.e235 * right_dual.e1234), (this.e431 * right_dual.e3215) + (this.e315 * right_dual.e1234), (this.e412 * right_dual.e3215) + (this.e125 * right_dual.e1234), -(this.e425 * right_dual.e4315) - (this.e435 * right_dual.e4125)) - (this.group1.wwwx * right_dual.group3.xyzx), 
            /* e15, e25, e35, scalar */
            (float4(right_dual.e3215) * float4(this.group1.xyz, this.e4)) + (right_dual.group3.zxyx * float4(this.group2.yzx, this.e1)) + float4(float3(0.0), (this.e2 * right_dual.e4315) + (this.e3 * right_dual.e4125) + (this.e5 * right_dual.e1234) - (this.e431 * right_dual.e25) - (this.e412 * right_dual.e35) - (this.e415 * right_dual.e23) - (this.e425 * right_dual.e31) - (this.e435 * right_dual.e12) - (this.e321 * right_dual.e45) - (this.e235 * right_dual.e41) - (this.e315 * right_dual.e42) - (this.e125 * right_dual.e43)) - float4((this.group2.zxy * right_dual.group3.yzx), this.e423 * right_dual.e15)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4((anti_wedge.e42 * other.e3) + (anti_wedge.e23 * other.e4) + (anti_wedge.scalar * other.e423), (anti_wedge.e43 * other.e1) + (anti_wedge.e31 * other.e4) + (anti_wedge.scalar * other.e431), (anti_wedge.e41 * other.e2) + (anti_wedge.e12 * other.e4) + (anti_wedge.scalar * other.e412), -(anti_wedge.e42 * other.e315) - (anti_wedge.e43 * other.e125) - (anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435) - (anti_wedge.e45 * other.e321) - (anti_wedge.e15 * other.e423) - (anti_wedge.e25 * other.e431) - (anti_wedge.e35 * other.e412)) - float4((anti_wedge.group0.xyz.zxy * other.group3.yzx), anti_wedge.e41 * other.e235), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e15 * other.e4) + (anti_wedge.scalar * other.e415), (anti_wedge.e25 * other.e4) + (anti_wedge.scalar * other.e425), (anti_wedge.e35 * other.e4) + (anti_wedge.scalar * other.e435), -(anti_wedge.e31 * other.e2) - (anti_wedge.e12 * other.e3)) + float4((anti_wedge.group0.xyz * other.group3.www), anti_wedge.scalar * other.e321) - (anti_wedge.group1.wwwx * other.group3.xyzx), 
            /* e235, e315, e125, e5 */
            float4(((float3(anti_wedge.scalar) * other.group2.xyz) + (float3(other.e5) * anti_wedge.group1.xyz) + (anti_wedge.group2.zxy * other.group3.yzx) - (anti_wedge.group2.yzx * other.group3.zxy)), anti_wedge.scalar * other.e5), 
            /* e1, e2, e3, e4 */
            float4(anti_wedge.scalar) * float4(other.group3.xyz, other.e4)
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<AntiDipoleInversion> lhs, AntiDualNum rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiDipoleInversion {
    public VersorEven anti_project_via_horizon_onto(AntiDualNum other) {
        DualNum right_dual = DualNum(
            /* e5, e12345 */
            other.group0.xy
        );
        AntiDipoleInversion anti_wedge = AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(right_dual.e12345) * this.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(right_dual.e12345) * this.group1, 
            /* e235, e315, e125, e4 */
            float4(right_dual.e12345) * this.group2, 
            /* e1, e2, e3, e5 */
            float4(right_dual.e12345) * this.group3
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(other.group0.xy.yy, other.scalar, other.e3215) * float4(anti_wedge.group0.xyz, anti_wedge.e4), 
            /* e415, e425, e435, e321 */
            float4(other.scalar) * anti_wedge.group1, 
            /* e235, e315, e125, e5 */
            float4(other.scalar) * float4(anti_wedge.group2.xyz, anti_wedge.e5), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * float4(anti_wedge.group3.xyz, anti_wedge.e4)
        );
    }
}
// Fancy infix trick (second half)
public AntiFlatPoint operator /(AntiProjectViaHorizonOntoInfixPartial<AntiDipoleInversion> lhs, AntiFlatPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiDipoleInversion {
    public AntiFlatPoint anti_project_via_horizon_onto(AntiFlatPoint other) {
        FlatPoint right_dual = FlatPoint(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiFlatPoint(
            /* e235, e315, e125, e321 */
            float4(-(this.e423 * right_dual.e15) - (this.e431 * right_dual.e25) - (this.e412 * right_dual.e35) - (this.e321 * right_dual.e45)) * other.group0
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<AntiDipoleInversion> lhs, AntiFlector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiDipoleInversion {
    public VersorEven anti_project_via_horizon_onto(AntiFlector other) {
        Flector right_dual = Flector(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiCircleRotor anti_wedge = AntiCircleRotor(
            /* e41, e42, e43 */
            (this.group0.xyz.zxy * right_dual.group1.yzx) - (this.group0.xyz.yzx * right_dual.group1.zxy), 
            /* e23, e31, e12, e45 */
            float4(this.e423 * right_dual.e3215, this.e431 * right_dual.e3215, this.e412 * right_dual.e3215, -(this.e425 * right_dual.e4315) - (this.e435 * right_dual.e4125)) - (this.group1.wwwx * right_dual.group1.xyzx), 
            /* e15, e25, e35, scalar */
            (float4(right_dual.e3215) * float4(this.group1.xyz, this.e4)) + (right_dual.group1.zxyx * float4(this.group2.yzx, this.e1)) + float4(float3(0.0), (this.e2 * right_dual.e4315) + (this.e3 * right_dual.e4125) - (this.e431 * right_dual.e25) - (this.e412 * right_dual.e35) - (this.e321 * right_dual.e45)) - float4((this.group2.zxy * right_dual.group1.yzx), this.e423 * right_dual.e15)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(anti_wedge.e42 * other.e3, anti_wedge.e43 * other.e1, anti_wedge.e41 * other.e2, -(anti_wedge.e42 * other.e315) - (anti_wedge.e43 * other.e125) - (anti_wedge.e45 * other.e321)) - float4((anti_wedge.group0.xyz.zxy * other.group1.yzx), anti_wedge.e41 * other.e235), 
            /* e415, e425, e435, e321 */
            float4(float3(0.0), -(anti_wedge.e31 * other.e2) - (anti_wedge.e12 * other.e3)) + float4((anti_wedge.group0.xyz * other.group1.www), anti_wedge.scalar * other.e321) - (anti_wedge.group1.wwwx * other.group1.xyzx), 
            /* e235, e315, e125, e5 */
            float4(((float3(anti_wedge.scalar) * other.group0.xyz) + (float3(other.e5) * anti_wedge.group1.xyz) + (anti_wedge.group2.zxy * other.group1.yzx) - (anti_wedge.group2.yzx * other.group1.zxy)), anti_wedge.scalar * other.e5), 
            /* e1, e2, e3, e4 */
            float4(float3(1.0), 0.0) * float4(anti_wedge.group2.www, 0.0) * float4(other.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
    }
}
// Fancy infix trick (second half)
public Circle operator /(AntiProjectViaHorizonOntoInfixPartial<AntiDipoleInversion> lhs, AntiLine rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiDipoleInversion {
    public Circle anti_project_via_horizon_onto(AntiLine other) {
        Line right_dual = Line(
            /* e415, e425, e435 */
            other.group0.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group1.xyz * float3(-1.0)
        );
        RoundPoint anti_wedge = RoundPoint(
            /* e1, e2, e3, e4 */
            float4((this.e412 * right_dual.e315) + (this.e321 * right_dual.e415), (this.e423 * right_dual.e125) + (this.e321 * right_dual.e425), (this.e431 * right_dual.e235) + (this.e321 * right_dual.e435), -(this.e431 * right_dual.e425) - (this.e412 * right_dual.e435)) - float4((this.group0.xyz.yzx * right_dual.group1.xyz.zxy), this.e423 * right_dual.e415), 
            /* e5 */
            -(this.e415 * right_dual.e235) - (this.e425 * right_dual.e315) - (this.e435 * right_dual.e125) - (this.e235 * right_dual.e415) - (this.e315 * right_dual.e425) - (this.e125 * right_dual.e435)
        );
        return Circle(
            /* e423, e431, e412 */
            float3(anti_wedge.e4) * other.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4((float3(anti_wedge.e4) * other.group1.xyz), -(other.e23 * anti_wedge.e1) - (other.e31 * anti_wedge.e2) - (other.e12 * anti_wedge.e3)), 
            /* e235, e315, e125 */
            (float3(anti_wedge.e5) * other.group0.xyz) + (other.group1.xyz.zxy * anti_wedge.group0.yzx) - (other.group1.xyz.yzx * anti_wedge.group0.zxy)
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<AntiDipoleInversion> lhs, AntiMotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiDipoleInversion {
    public VersorEven anti_project_via_horizon_onto(AntiMotor other) {
        Motor right_dual = Motor(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiDipoleInversion anti_wedge = AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(right_dual.e12345) * this.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(right_dual.e12345) * this.group1, 
            /* e235, e315, e125, e4 */
            float4((float3(right_dual.e12345) * this.group2.xyz), (this.e4 * right_dual.e12345) - (this.e423 * right_dual.e415) - (this.e431 * right_dual.e425) - (this.e412 * right_dual.e435)), 
            /* e1, e2, e3, e5 */
            float4((this.e321 * right_dual.e415) + (this.e1 * right_dual.e12345), (this.e321 * right_dual.e425) + (this.e2 * right_dual.e12345), (this.e321 * right_dual.e435) + (this.e3 * right_dual.e12345), -(this.e425 * right_dual.e315) - (this.e435 * right_dual.e125) - (this.e235 * right_dual.e415) - (this.e315 * right_dual.e425) - (this.e125 * right_dual.e435)) + float4((this.group0.xyz.zxy * right_dual.group1.yzx), this.e5 * right_dual.e12345) - (right_dual.group1.zxyx * float4(this.group0.xyz.yzx, this.e415))
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(anti_wedge.e4 * other.e23, anti_wedge.e4 * other.e31, anti_wedge.e4 * other.e12, -(anti_wedge.e423 * other.e15) - (anti_wedge.e431 * other.e25) - (anti_wedge.e412 * other.e35) - (anti_wedge.e415 * other.e23) - (anti_wedge.e425 * other.e31) - (anti_wedge.e435 * other.e12)) + float4((anti_wedge.group0.xyz * other.group0.www), anti_wedge.e4 * other.e3215), 
            /* e415, e425, e435, e321 */
            float4(anti_wedge.e4 * other.e15, anti_wedge.e4 * other.e25, anti_wedge.e4 * other.e35, -(anti_wedge.e1 * other.e23) - (anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12)) + (float4(other.scalar) * anti_wedge.group1), 
            /* e235, e315, e125, e5 */
            float4(((float3(anti_wedge.e5) * other.group0.xyz) + (float3(other.scalar) * anti_wedge.group2.xyz) + (anti_wedge.group3.yzx * other.group1.zxy) - (anti_wedge.group3.zxy * other.group1.yzx)), anti_wedge.e5 * other.scalar), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * float4(anti_wedge.group3.xyz, anti_wedge.e4)
        );
    }
}
// Fancy infix trick (second half)
public AntiDipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<AntiDipoleInversion> lhs, AntiPlane rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiDipoleInversion {
    public AntiDipoleInversion anti_project_via_horizon_onto(AntiPlane other) {
        Plane right_dual = Plane(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiCircleRotor anti_wedge = AntiCircleRotor(
            /* e41, e42, e43 */
            (this.group0.xyz.zxy * right_dual.group0.yzx) - (this.group0.xyz.yzx * right_dual.group0.zxy), 
            /* e23, e31, e12, e45 */
            float4(this.e423 * right_dual.e3215, this.e431 * right_dual.e3215, this.e412 * right_dual.e3215, -(this.e425 * right_dual.e4315) - (this.e435 * right_dual.e4125)) - (this.group1.wwwx * right_dual.group0.xyzx), 
            /* e15, e25, e35, scalar */
            float4(this.e125 * right_dual.e4315 * -1.0, this.e235 * right_dual.e4125 * -1.0, this.e315 * right_dual.e4235 * -1.0, (this.e2 * right_dual.e4315) + (this.e3 * right_dual.e4125)) + (float4(right_dual.e3215) * float4(this.group1.xyz, this.e4)) + (right_dual.group0.zxyx * float4(this.group2.yzx, this.e1))
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            (anti_wedge.group0.xyz.yzx * other.group0.zxy) - (anti_wedge.group0.xyz.zxy * other.group0.yzx), 
            /* e415, e425, e435, e321 */
            float4(anti_wedge.e41 * other.e5, anti_wedge.e42 * other.e5, anti_wedge.e43 * other.e5, -(anti_wedge.e31 * other.e2) - (anti_wedge.e12 * other.e3)) - (anti_wedge.group1.wwwx * other.group0.xyzx), 
            /* e235, e315, e125, e4 */
            float4((float3(other.e5) * anti_wedge.group1.xyz), 0.0) + float4((anti_wedge.group2.zxy * other.group0.yzx), 0.0) - float4((anti_wedge.group2.yzx * other.group0.zxy), 0.0), 
            /* e1, e2, e3, e5 */
            float4(anti_wedge.scalar) * other.group0
        );
    }
}
// Fancy infix trick (second half)
public Circle operator /(AntiProjectViaHorizonOntoInfixPartial<AntiDipoleInversion> lhs, Circle rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiDipoleInversion {
    public Circle anti_project_via_horizon_onto(Circle other) {
        Dipole right_dual = Dipole(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35 */
            other.group2.xyz
        );
        Scalar anti_wedge = Scalar(
            /* scalar */
            -(this.e423 * right_dual.e15) - (this.e431 * right_dual.e25) - (this.e412 * right_dual.e35) - (this.e415 * right_dual.e23) - (this.e425 * right_dual.e31) - (this.e435 * right_dual.e12) - (this.e321 * right_dual.e45) - (this.e235 * right_dual.e41) - (this.e315 * right_dual.e42) - (this.e125 * right_dual.e43)
        );
        return Circle(
            /* e423, e431, e412 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(anti_wedge.scalar) * other.group1, 
            /* e235, e315, e125 */
            float3(anti_wedge.scalar) * other.group2.xyz
        );
    }
}
// Fancy infix trick (second half)
public CircleRotor operator /(AntiProjectViaHorizonOntoInfixPartial<AntiDipoleInversion> lhs, CircleRotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiDipoleInversion {
    public CircleRotor anti_project_via_horizon_onto(CircleRotor other) {
        AntiCircleRotor right_dual = AntiCircleRotor(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        Scalar anti_wedge = Scalar(
            /* scalar */
            -(right_dual.e41 * this.e235) - (right_dual.e42 * this.e315) - (right_dual.e43 * this.e125) - (right_dual.e23 * this.e415) - (right_dual.e31 * this.e425) - (right_dual.e12 * this.e435) - (right_dual.e45 * this.e321) - (right_dual.e15 * this.e423) - (right_dual.e25 * this.e431) - (right_dual.e35 * this.e412)
        );
        return CircleRotor(
            /* e423, e431, e412 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(anti_wedge.scalar) * other.group1, 
            /* e235, e315, e125, e12345 */
            float4(anti_wedge.scalar) * other.group2
        );
    }
}
// Fancy infix trick (second half)
public Circle operator /(AntiProjectViaHorizonOntoInfixPartial<AntiDipoleInversion> lhs, Dipole rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiDipoleInversion {
    public Circle anti_project_via_horizon_onto(Dipole other) {
        Circle right_dual = Circle(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125 */
            other.group2.xyz * float3(-1.0)
        );
        RoundPoint anti_wedge = RoundPoint(
            /* e1, e2, e3, e4 */
            float4((this.e412 * right_dual.e315) + (this.e415 * right_dual.e321) + (this.e321 * right_dual.e415) + (this.e315 * right_dual.e412), (this.e423 * right_dual.e125) + (this.e425 * right_dual.e321) + (this.e321 * right_dual.e425) + (this.e125 * right_dual.e423), (this.e431 * right_dual.e235) + (this.e435 * right_dual.e321) + (this.e321 * right_dual.e435) + (this.e235 * right_dual.e431), -(this.e412 * right_dual.e435) - (this.e415 * right_dual.e423) - (this.e425 * right_dual.e431) - (this.e435 * right_dual.e412)) - float4((this.group0.xyz.yzx * right_dual.group2.xyz.zxy), this.e423 * right_dual.e415) - float4((right_dual.group0.xyz.yzx * this.group2.zxy), this.e431 * right_dual.e425), 
            /* e5 */
            -(this.e415 * right_dual.e235) - (this.e425 * right_dual.e315) - (this.e435 * right_dual.e125) - (this.e235 * right_dual.e415) - (this.e315 * right_dual.e425) - (this.e125 * right_dual.e435)
        );
        return Circle(
            /* e423, e431, e412 */
            (float3(anti_wedge.e4) * other.group1.xyz) + (other.group0.xyz.yzx * anti_wedge.group0.zxy) - (other.group0.xyz.zxy * anti_wedge.group0.yzx), 
            /* e415, e425, e435, e321 */
            float4((other.e41 * anti_wedge.e5) + (other.e15 * anti_wedge.e4), (other.e42 * anti_wedge.e5) + (other.e25 * anti_wedge.e4), (other.e43 * anti_wedge.e5) + (other.e35 * anti_wedge.e4), -(other.e31 * anti_wedge.e2) - (other.e12 * anti_wedge.e3)) - (other.group1.wwwx * anti_wedge.group0.xyzx), 
            /* e235, e315, e125 */
            (float3(anti_wedge.e5) * other.group1.xyz) + (other.group2.xyz.zxy * anti_wedge.group0.yzx) - (other.group2.xyz.yzx * anti_wedge.group0.zxy)
        );
    }
}
// Fancy infix trick (second half)
public CircleRotor operator /(AntiProjectViaHorizonOntoInfixPartial<AntiDipoleInversion> lhs, DipoleInversion rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiDipoleInversion {
    public CircleRotor anti_project_via_horizon_onto(DipoleInversion other) {
        AntiDipoleInversion right_dual = AntiDipoleInversion(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        RoundPoint anti_wedge = RoundPoint(
            /* e1, e2, e3, e4 */
            float4((right_dual.e412 * this.e315) + (right_dual.e415 * this.e321) + (right_dual.e321 * this.e415) + (right_dual.e315 * this.e412), (right_dual.e423 * this.e125) + (right_dual.e425 * this.e321) + (right_dual.e321 * this.e425) + (right_dual.e125 * this.e423), (right_dual.e431 * this.e235) + (right_dual.e435 * this.e321) + (right_dual.e321 * this.e435) + (right_dual.e235 * this.e431), -(right_dual.e412 * this.e435) - (right_dual.e415 * this.e423) - (right_dual.e425 * this.e431) - (right_dual.e435 * this.e412)) - float4((right_dual.group0.xyz.yzx * this.group2.zxy), right_dual.e423 * this.e415) - float4((this.group0.xyz.yzx * right_dual.group2.zxy), right_dual.e431 * this.e425), 
            /* e5 */
            -(right_dual.e415 * this.e235) - (right_dual.e425 * this.e315) - (right_dual.e435 * this.e125) - (right_dual.e235 * this.e415) - (right_dual.e315 * this.e425) - (right_dual.e125 * this.e435)
        );
        return CircleRotor(
            /* e423, e431, e412 */
            (float3(anti_wedge.e4) * other.group1.xyz) + (other.group0.xyz.yzx * anti_wedge.group0.zxy) - (other.group0.xyz.zxy * anti_wedge.group0.yzx), 
            /* e415, e425, e435, e321 */
            float4((other.e41 * anti_wedge.e5) + (other.e15 * anti_wedge.e4), (other.e42 * anti_wedge.e5) + (other.e25 * anti_wedge.e4), (other.e43 * anti_wedge.e5) + (other.e35 * anti_wedge.e4), -(other.e31 * anti_wedge.e2) - (other.e12 * anti_wedge.e3)) - (other.group1.wwwx * anti_wedge.group0.xyzx), 
            /* e235, e315, e125, e12345 */
            float4(other.e25 * anti_wedge.e3 * -1.0, other.e35 * anti_wedge.e1 * -1.0, other.e15 * anti_wedge.e2 * -1.0, (other.e4315 * anti_wedge.e2) + (other.e4125 * anti_wedge.e3) + (other.e3215 * anti_wedge.e4)) + (float4(anti_wedge.e5) * float4(other.group1.xyz, other.e1234)) + (anti_wedge.group0.yzxx * float4(other.group2.zxy, other.e4235))
        );
    }
}
// Fancy infix trick (second half)
public Motor operator /(AntiProjectViaHorizonOntoInfixPartial<AntiDipoleInversion> lhs, DualNum rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiDipoleInversion {
    public Motor anti_project_via_horizon_onto(DualNum other) {
        AntiDualNum right_dual = AntiDualNum(
            /* e3215, scalar */
            other.group0.xy * float2(-1.0)
        );
        AntiMotor anti_wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4(right_dual.e3215) * float4(this.group0.xyz, this.e4), 
            /* e15, e25, e35, e3215 */
            float4(right_dual.group0.xy.xx, right_dual.e3215, 0.0) * float4(float3(1.0), 0.0) * float4(this.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4(float3(0.0), anti_wedge.scalar * other.e12345), 
            /* e235, e315, e125, e5 */
            float4(other.e5) * anti_wedge.group0
        );
    }
}
// Fancy infix trick (second half)
public Line operator /(AntiProjectViaHorizonOntoInfixPartial<AntiDipoleInversion> lhs, FlatPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiDipoleInversion {
    public Line anti_project_via_horizon_onto(FlatPoint other) {
        AntiFlatPoint right_dual = AntiFlatPoint(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiPlane anti_wedge = AntiPlane(
            /* e1, e2, e3, e5 */
            float4((this.e412 * right_dual.e315) + (this.e415 * right_dual.e321), (this.e423 * right_dual.e125) + (this.e425 * right_dual.e321), (this.e431 * right_dual.e235) + (this.e435 * right_dual.e321), -(this.e425 * right_dual.e315) - (this.e435 * right_dual.e125)) - (right_dual.group0.zxyx * float4(this.group0.xyz.yzx, this.e415))
        );
        return Line(
            /* e415, e425, e435 */
            float3(other.e45) * anti_wedge.group0.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            (anti_wedge.group0.yzx * other.group0.zxy) - (anti_wedge.group0.zxy * other.group0.yzx)
        );
    }
}
// Fancy infix trick (second half)
public Motor operator /(AntiProjectViaHorizonOntoInfixPartial<AntiDipoleInversion> lhs, Flector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiDipoleInversion {
    public Motor anti_project_via_horizon_onto(Flector other) {
        AntiFlector right_dual = AntiFlector(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiPlane anti_wedge = AntiPlane(
            /* e1, e2, e3, e5 */
            float4((this.e412 * right_dual.e315) + (this.e415 * right_dual.e321), (this.e423 * right_dual.e125) + (this.e425 * right_dual.e321), (this.e431 * right_dual.e235) + (this.e435 * right_dual.e321), -(this.e425 * right_dual.e315) - (this.e435 * right_dual.e125)) - (right_dual.group0.zxyx * float4(this.group0.xyz.yzx, this.e415))
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4((float3(other.e45) * anti_wedge.group0.xyz * float3(-1.0)), (anti_wedge.e1 * other.e4235) + (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125)), 
            /* e235, e315, e125, e5 */
            float4(((anti_wedge.group0.yzx * other.group0.zxy) - (anti_wedge.group0.zxy * other.group0.yzx)), 0.0)
        );
    }
}
// Fancy infix trick (second half)
public Line operator /(AntiProjectViaHorizonOntoInfixPartial<AntiDipoleInversion> lhs, Line rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiDipoleInversion {
    public Line anti_project_via_horizon_onto(Line other) {
        AntiLine right_dual = AntiLine(
            /* e23, e31, e12 */
            other.group0.xyz, 
            /* e15, e25, e35 */
            other.group1.xyz
        );
        Scalar anti_wedge = Scalar(
            /* scalar */
            -(this.e423 * right_dual.e15) - (this.e431 * right_dual.e25) - (this.e412 * right_dual.e35) - (this.e415 * right_dual.e23) - (this.e425 * right_dual.e31) - (this.e435 * right_dual.e12)
        );
        return Line(
            /* e415, e425, e435 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e235, e315, e125 */
            float3(anti_wedge.scalar) * other.group1.xyz
        );
    }
}
// Fancy infix trick (second half)
public Motor operator /(AntiProjectViaHorizonOntoInfixPartial<AntiDipoleInversion> lhs, Motor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiDipoleInversion {
    public Motor anti_project_via_horizon_onto(Motor other) {
        AntiMotor right_dual = AntiMotor(
            /* e23, e31, e12, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiMotor anti_wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4((float3(right_dual.e3215) * this.group0.xyz), (this.e4 * right_dual.e3215) - (this.e423 * right_dual.e15) - (this.e431 * right_dual.e25) - (this.e412 * right_dual.e35) - (this.e415 * right_dual.e23) - (this.e425 * right_dual.e31) - (this.e435 * right_dual.e12)), 
            /* e15, e25, e35, e3215 */
            float4(float3(1.0), 0.0) * float4(right_dual.group1.www, 0.0) * float4(this.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4((anti_wedge.group0.www * other.group0.xyz), (anti_wedge.scalar * other.e12345) - (anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435)), 
            /* e235, e315, e125, e5 */
            float4(((float3(anti_wedge.scalar) * other.group1.xyz) + (float3(other.e5) * anti_wedge.group0.xyz)), anti_wedge.scalar * other.e5)
        );
    }
}
// Fancy infix trick (second half)
public MultiVector operator /(AntiProjectViaHorizonOntoInfixPartial<AntiDipoleInversion> lhs, MultiVector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiDipoleInversion {
    public MultiVector anti_project_via_horizon_onto(MultiVector other) {
        MultiVector right_dual = MultiVector(
            /* scalar, e12345 */
            other.group0.xy.yx * float2(-1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215, 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43 */
            other.group7.xyz, 
            /* e23, e31, e12 */
            other.group6.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412 */
            other.group4.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group3.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        MultiVector anti_wedge = MultiVector(
            /* scalar, e12345 */
            float2((this.e4 * right_dual.e3215) + (this.e1 * right_dual.e4235) + (this.e2 * right_dual.e4315) + (this.e3 * right_dual.e4125) + (this.e5 * right_dual.e1234) - (this.e423 * right_dual.e15) - (this.e431 * right_dual.e25) - (this.e412 * right_dual.e35) - (this.e415 * right_dual.e23) - (this.e425 * right_dual.e31) - (this.e435 * right_dual.e12) - (this.e321 * right_dual.e45) - (this.e235 * right_dual.e41) - (this.e315 * right_dual.e42) - (this.e125 * right_dual.e43), 0.0), 
            /* e1, e2, e3, e4 */
            float4((this.e412 * right_dual.e315) + (this.e415 * right_dual.e321) + (this.e321 * right_dual.e415) + (this.e315 * right_dual.e412), (this.e423 * right_dual.e125) + (this.e425 * right_dual.e321) + (this.e321 * right_dual.e425) + (this.e125 * right_dual.e423), (this.e431 * right_dual.e235) + (this.e435 * right_dual.e321) + (this.e321 * right_dual.e435) + (this.e235 * right_dual.e431), -(this.e412 * right_dual.e435) - (this.e415 * right_dual.e423) - (this.e425 * right_dual.e431) - (this.e435 * right_dual.e412)) + (float4(right_dual.e12345) * float4(this.group3.xyz, this.e4)) - float4((this.group0.xyz.yzx * right_dual.group8.xyz.zxy), this.e423 * right_dual.e415) - float4((right_dual.group7.xyz.yzx * this.group2.zxy), this.e431 * right_dual.e425), 
            /* e5 */
            (this.e5 * right_dual.e12345) - (this.e415 * right_dual.e235) - (this.e425 * right_dual.e315) - (this.e435 * right_dual.e125) - (this.e235 * right_dual.e415) - (this.e315 * right_dual.e425) - (this.e125 * right_dual.e435), 
            /* e15, e25, e35, e45 */
            float4((this.e415 * right_dual.e3215) + (this.e315 * right_dual.e4125), (this.e425 * right_dual.e3215) + (this.e125 * right_dual.e4235), (this.e435 * right_dual.e3215) + (this.e235 * right_dual.e4315), -(this.e425 * right_dual.e4315) - (this.e435 * right_dual.e4125)) - (right_dual.group9.yzxx * float4(this.group2.zxy, this.e415)), 
            /* e41, e42, e43 */
            (float3(right_dual.e1234) * this.group1.xyz) + (this.group0.xyz.zxy * right_dual.group9.yzx) - (this.group0.xyz.yzx * right_dual.group9.zxy), 
            /* e23, e31, e12 */
            (float3(right_dual.e3215) * this.group0.xyz) + (float3(right_dual.e1234) * this.group2.xyz) - (float3(this.e321) * right_dual.group9.xyz), 
            /* e415, e425, e435, e321 */
            float4(right_dual.e12345) * this.group1, 
            /* e423, e431, e412 */
            float3(right_dual.e12345) * this.group0.xyz, 
            /* e235, e315, e125 */
            float3(right_dual.e12345) * this.group2.xyz, 
            /* e4235, e4315, e4125, e3215 */
            float4(0.0), 
            /* e1234 */
            0.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(anti_wedge.scalar * other.scalar, (anti_wedge.scalar * other.e12345) + (anti_wedge.e12345 * other.scalar) + (anti_wedge.e1 * other.e4235) + (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) + (anti_wedge.e4 * other.e3215) + (anti_wedge.e5 * other.e1234) + (anti_wedge.e4235 * other.e1) + (anti_wedge.e4315 * other.e2) + (anti_wedge.e4125 * other.e3) + (anti_wedge.e3215 * other.e4) + (anti_wedge.e1234 * other.e5) - (anti_wedge.e15 * other.e423) - (anti_wedge.e25 * other.e431) - (anti_wedge.e35 * other.e412) - (anti_wedge.e45 * other.e321) - (anti_wedge.e41 * other.e235) - (anti_wedge.e42 * other.e315) - (anti_wedge.e43 * other.e125) - (anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435) - (anti_wedge.e415 * other.e23) - (anti_wedge.e425 * other.e31) - (anti_wedge.e435 * other.e12) - (anti_wedge.e321 * other.e45) - (anti_wedge.e423 * other.e15) - (anti_wedge.e431 * other.e25) - (anti_wedge.e412 * other.e35) - (anti_wedge.e235 * other.e41) - (anti_wedge.e315 * other.e42) - (anti_wedge.e125 * other.e43)), 
            /* e1, e2, e3, e4 */
            (float4(anti_wedge.scalar) * other.group1) + (float4(other.scalar) * anti_wedge.group1), 
            /* e5 */
            (anti_wedge.scalar * other.e5) + (anti_wedge.e5 * other.scalar), 
            /* e15, e25, e35, e45 */
            (float4(anti_wedge.scalar) * other.group3) + (float4(anti_wedge.e5) * other.group1) + (float4(other.scalar) * anti_wedge.group3) - (float4(other.e5) * anti_wedge.group1), 
            /* e41, e42, e43 */
            (float3(anti_wedge.scalar) * other.group4.xyz) + (float3(other.scalar) * anti_wedge.group4.xyz) + (float3(other.e4) * anti_wedge.group1.xyz) - (float3(anti_wedge.e4) * other.group1.xyz), 
            /* e23, e31, e12 */
            (float3(anti_wedge.scalar) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group5.xyz) + (anti_wedge.group1.zxy * other.group1.yzx) - (anti_wedge.group1.yzx * other.group1.zxy), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e4 * other.e15) + (anti_wedge.e5 * other.e41) + (anti_wedge.e15 * other.e4) + (anti_wedge.e41 * other.e5), (anti_wedge.e4 * other.e25) + (anti_wedge.e5 * other.e42) + (anti_wedge.e25 * other.e4) + (anti_wedge.e42 * other.e5), (anti_wedge.e4 * other.e35) + (anti_wedge.e5 * other.e43) + (anti_wedge.e35 * other.e4) + (anti_wedge.e43 * other.e5), -(anti_wedge.e1 * other.e23) - (anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12) - (anti_wedge.e12 * other.e3)) + (float4(anti_wedge.scalar) * other.group6) + (float4(other.scalar) * anti_wedge.group6) - (other.group1.xyzy * float4(anti_wedge.group3.www, anti_wedge.e31)) - float4((other.group3.www * anti_wedge.group1.xyz), anti_wedge.e23 * other.e1), 
            /* e423, e431, e412 */
            (float3(anti_wedge.scalar) * other.group7.xyz) + (float3(anti_wedge.e4) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group7.xyz) + (float3(other.e4) * anti_wedge.group5.xyz) + (anti_wedge.group4.xyz.yzx * other.group1.zxy) + (other.group4.xyz.yzx * anti_wedge.group1.zxy) - (anti_wedge.group4.xyz.zxy * other.group1.yzx) - (other.group4.xyz.zxy * anti_wedge.group1.yzx), 
            /* e235, e315, e125 */
            (float3(anti_wedge.scalar) * other.group8.xyz) + (float3(anti_wedge.e5) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group8.xyz) + (float3(other.e5) * anti_wedge.group5.xyz) + (anti_wedge.group1.yzx * other.group3.zxy) + (anti_wedge.group3.zxy * other.group1.yzx) - (anti_wedge.group1.zxy * other.group3.yzx) - (anti_wedge.group3.yzx * other.group1.zxy), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e2 * other.e435) + (anti_wedge.e5 * other.e423) + (anti_wedge.e45 * other.e23) + (anti_wedge.e425 * other.e3), (anti_wedge.e3 * other.e415) + (anti_wedge.e5 * other.e431) + (anti_wedge.e45 * other.e31) + (anti_wedge.e435 * other.e1), (anti_wedge.e1 * other.e425) + (anti_wedge.e5 * other.e412) + (anti_wedge.e45 * other.e12) + (anti_wedge.e415 * other.e2), -(anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12) - (anti_wedge.e321 * other.e5)) + (float4(anti_wedge.scalar) * other.group9) + (float4(other.scalar) * anti_wedge.group9) + float4((anti_wedge.group5.xyz * other.group3.www), anti_wedge.e2 * other.e315) + float4((anti_wedge.group8.xyz * other.group1.www), anti_wedge.e3 * other.e125) + float4((anti_wedge.group4.xyz.yzx * other.group3.zxy), anti_wedge.e1 * other.e235) + float4((other.group4.xyz.yzx * anti_wedge.group3.zxy), anti_wedge.e5 * other.e321) - (other.group1.yzxz * float4(anti_wedge.group6.zxy, anti_wedge.e125)) - (other.group3.yzxx * float4(anti_wedge.group4.xyz.zxy, anti_wedge.e23)) - float4((float3(other.e5) * anti_wedge.group7.xyz), anti_wedge.e31 * other.e25) - float4((other.group8.xyz * anti_wedge.group1.www), anti_wedge.e235 * other.e1) - float4((other.group4.xyz.zxy * anti_wedge.group3.yzx), anti_wedge.e12 * other.e35) - float4((anti_wedge.group1.zxy * other.group6.yzx), anti_wedge.e315 * other.e2), 
            /* e1234 */
            (anti_wedge.scalar * other.e1234) + (anti_wedge.e321 * other.e4) + (anti_wedge.e423 * other.e1) + (anti_wedge.e431 * other.e2) + (anti_wedge.e412 * other.e3) + (anti_wedge.e1234 * other.scalar) - (anti_wedge.e1 * other.e423) - (anti_wedge.e2 * other.e431) - (anti_wedge.e3 * other.e412) - (anti_wedge.e4 * other.e321) - (anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12) - (anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)
        );
    }
}
// Fancy infix trick (second half)
public AntiDipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<AntiDipoleInversion> lhs, RoundPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiDipoleInversion {
    public AntiDipoleInversion anti_project_via_horizon_onto(RoundPoint other) {
        Sphere right_dual = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        AntiCircleRotor anti_wedge = AntiCircleRotor(
            /* e41, e42, e43 */
            (float3(right_dual.e1234) * this.group1.xyz) + (this.group0.xyz.zxy * right_dual.group0.yzx) - (this.group0.xyz.yzx * right_dual.group0.zxy), 
            /* e23, e31, e12, e45 */
            float4((this.e423 * right_dual.e3215) + (this.e235 * right_dual.e1234), (this.e431 * right_dual.e3215) + (this.e315 * right_dual.e1234), (this.e412 * right_dual.e3215) + (this.e125 * right_dual.e1234), -(this.e425 * right_dual.e4315) - (this.e435 * right_dual.e4125)) - (this.group1.wwwx * right_dual.group0.xyzx), 
            /* e15, e25, e35, scalar */
            float4(this.e125 * right_dual.e4315 * -1.0, this.e235 * right_dual.e4125 * -1.0, this.e315 * right_dual.e4235 * -1.0, (this.e2 * right_dual.e4315) + (this.e3 * right_dual.e4125) + (this.e5 * right_dual.e1234)) + (float4(right_dual.e3215) * float4(this.group1.xyz, this.e4)) + (right_dual.group0.zxyx * float4(this.group2.yzx, this.e1))
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            (float3(other.e4) * anti_wedge.group1.xyz) + (anti_wedge.group0.xyz.yzx * other.group0.zxy) - (anti_wedge.group0.xyz.zxy * other.group0.yzx), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e41 * other.e5) + (anti_wedge.e15 * other.e4), (anti_wedge.e42 * other.e5) + (anti_wedge.e25 * other.e4), (anti_wedge.e43 * other.e5) + (anti_wedge.e35 * other.e4), -(anti_wedge.e31 * other.e2) - (anti_wedge.e12 * other.e3)) - (anti_wedge.group1.wwwx * other.group0.xyzx), 
            /* e235, e315, e125, e4 */
            float4(((float3(other.e5) * anti_wedge.group1.xyz) + (anti_wedge.group2.zxy * other.group0.yzx) - (anti_wedge.group2.yzx * other.group0.zxy)), anti_wedge.scalar * other.e4), 
            /* e1, e2, e3, e5 */
            float4(anti_wedge.scalar) * float4(other.group0.xyz, other.e5)
        );
    }
}
// Fancy infix trick (second half)
public AntiDipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<AntiDipoleInversion> lhs, Scalar rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiDipoleInversion {
    public AntiDipoleInversion anti_project_via_horizon_onto(Scalar other) {
        AntiScalar right_dual = AntiScalar(
            /* e12345 */
            other.scalar
        );
        AntiDipoleInversion anti_wedge = AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(right_dual.e12345) * this.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(right_dual.e12345) * this.group1, 
            /* e235, e315, e125, e4 */
            float4(right_dual.e12345) * this.group2, 
            /* e1, e2, e3, e5 */
            float4(right_dual.e12345) * this.group3
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(other.scalar) * anti_wedge.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.scalar) * anti_wedge.group1, 
            /* e235, e315, e125, e4 */
            float4(other.scalar) * anti_wedge.group2, 
            /* e1, e2, e3, e5 */
            float4(other.scalar) * anti_wedge.group3
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<AntiDipoleInversion> lhs, VersorEven rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiDipoleInversion {
    public VersorEven anti_project_via_horizon_onto(VersorEven other) {
        VersorOdd right_dual = VersorOdd(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiCircleRotor anti_wedge = AntiCircleRotor(
            /* e41, e42, e43 */
            (float3(right_dual.e1234) * this.group1.xyz) + (this.group0.xyz.zxy * right_dual.group3.yzx) - (this.group0.xyz.yzx * right_dual.group3.zxy), 
            /* e23, e31, e12, e45 */
            float4((this.e423 * right_dual.e3215) + (this.e235 * right_dual.e1234), (this.e431 * right_dual.e3215) + (this.e315 * right_dual.e1234), (this.e412 * right_dual.e3215) + (this.e125 * right_dual.e1234), -(this.e425 * right_dual.e4315) - (this.e435 * right_dual.e4125)) - (this.group1.wwwx * right_dual.group3.xyzx), 
            /* e15, e25, e35, scalar */
            (float4(right_dual.e3215) * float4(this.group1.xyz, this.e4)) + (right_dual.group3.zxyx * float4(this.group2.yzx, this.e1)) + float4(float3(0.0), (this.e2 * right_dual.e4315) + (this.e3 * right_dual.e4125) + (this.e5 * right_dual.e1234) - (this.e431 * right_dual.e25) - (this.e412 * right_dual.e35) - (this.e415 * right_dual.e23) - (this.e425 * right_dual.e31) - (this.e435 * right_dual.e12) - (this.e321 * right_dual.e45) - (this.e235 * right_dual.e41) - (this.e315 * right_dual.e42) - (this.e125 * right_dual.e43)) - float4((this.group2.zxy * right_dual.group3.yzx), this.e423 * right_dual.e15)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4((anti_wedge.e23 * other.e4) + (anti_wedge.scalar * other.e423), (anti_wedge.e31 * other.e4) + (anti_wedge.scalar * other.e431), (anti_wedge.e12 * other.e4) + (anti_wedge.scalar * other.e412), -(anti_wedge.e42 * other.e315) - (anti_wedge.e43 * other.e125) - (anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435) - (anti_wedge.e45 * other.e321) - (anti_wedge.e15 * other.e423) - (anti_wedge.e25 * other.e431) - (anti_wedge.e35 * other.e412)) + float4((anti_wedge.group0.xyz.yzx * other.group3.zxy), anti_wedge.scalar * other.e12345) - float4((anti_wedge.group0.xyz.zxy * other.group3.yzx), anti_wedge.e41 * other.e235), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e15 * other.e4) + (anti_wedge.scalar * other.e415), (anti_wedge.e25 * other.e4) + (anti_wedge.scalar * other.e425), (anti_wedge.e35 * other.e4) + (anti_wedge.scalar * other.e435), -(anti_wedge.e31 * other.e2) - (anti_wedge.e12 * other.e3)) + float4((anti_wedge.group0.xyz * other.group2.www), anti_wedge.scalar * other.e321) - (anti_wedge.group1.wwwx * other.group3.xyzx), 
            /* e235, e315, e125, e5 */
            float4(((float3(anti_wedge.scalar) * other.group2.xyz) + (float3(other.e5) * anti_wedge.group1.xyz) + (anti_wedge.group2.zxy * other.group3.yzx) - (anti_wedge.group2.yzx * other.group3.zxy)), anti_wedge.scalar * other.e5), 
            /* e1, e2, e3, e4 */
            float4(anti_wedge.scalar) * other.group3
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<AntiDipoleInversion> lhs, VersorOdd rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiDipoleInversion {
    public VersorEven anti_project_via_horizon_onto(VersorOdd other) {
        VersorEven right_dual = VersorEven(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiDipoleInversion anti_wedge = AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(right_dual.e12345) * this.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(right_dual.e12345) * this.group1, 
            /* e235, e315, e125, e4 */
            float4((float3(right_dual.e12345) * this.group2.xyz), (this.e4 * right_dual.e12345) - (this.e423 * right_dual.e415) - (this.e431 * right_dual.e425) - (this.e412 * right_dual.e435) - (this.e415 * right_dual.e423) - (this.e425 * right_dual.e431) - (this.e435 * right_dual.e412)), 
            /* e1, e2, e3, e5 */
            float4((this.e415 * right_dual.e321) + (this.e321 * right_dual.e415) + (this.e315 * right_dual.e412) + (this.e1 * right_dual.e12345), (this.e425 * right_dual.e321) + (this.e321 * right_dual.e425) + (this.e125 * right_dual.e423) + (this.e2 * right_dual.e12345), (this.e435 * right_dual.e321) + (this.e321 * right_dual.e435) + (this.e235 * right_dual.e431) + (this.e3 * right_dual.e12345), -(this.e435 * right_dual.e125) - (this.e235 * right_dual.e415) - (this.e315 * right_dual.e425) - (this.e125 * right_dual.e435)) + float4((this.group0.xyz.zxy * right_dual.group2.yzx), this.e5 * right_dual.e12345) - (right_dual.group2.zxyx * float4(this.group0.xyz.yzx, this.e415)) - float4((this.group2.zxy * right_dual.group0.yzx), this.e425 * right_dual.e315)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            (anti_wedge.group3.zxyy * float4(other.group0.yzx, other.e4315)) + float4(float3(0.0), (anti_wedge.e3 * other.e4125) + (anti_wedge.e5 * other.e1234) - (anti_wedge.e431 * other.e25) - (anti_wedge.e412 * other.e35) - (anti_wedge.e415 * other.e23) - (anti_wedge.e425 * other.e31) - (anti_wedge.e435 * other.e12) - (anti_wedge.e321 * other.e45) - (anti_wedge.e235 * other.e41) - (anti_wedge.e315 * other.e42) - (anti_wedge.e125 * other.e43)) + float4((anti_wedge.group0.xyz * other.group0.www), anti_wedge.e4 * other.e3215) + float4((anti_wedge.group2.www * other.group1.xyz), anti_wedge.e1 * other.e4235) - float4((anti_wedge.group3.yzx * other.group0.zxy), anti_wedge.e423 * other.e15), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e4 * other.e15) + (anti_wedge.e5 * other.e41), (anti_wedge.e4 * other.e25) + (anti_wedge.e5 * other.e42), (anti_wedge.e4 * other.e35) + (anti_wedge.e5 * other.e43), -(anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12)) + (float4(other.scalar) * anti_wedge.group1) - (anti_wedge.group3.xyzx * other.group1.wwwx), 
            /* e235, e315, e125, e5 */
            float4(((float3(anti_wedge.e5) * other.group1.xyz) + (float3(other.scalar) * anti_wedge.group2.xyz) + (anti_wedge.group3.yzx * other.group2.zxy) - (anti_wedge.group3.zxy * other.group2.yzx)), anti_wedge.e5 * other.scalar), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * float4(anti_wedge.group3.xyz, anti_wedge.e4)
        );
    }
}
// Fancy infix trick (first half)
public AntiProjectViaHorizonOntoInfixPartial<AntiDualNum> operator /(AntiDualNum lhs, AntiProjectViaHorizonOntoInfix rhs) {
    return AntiProjectViaHorizonOntoInfixPartial<AntiDualNum>(lhs);
}
// Fancy infix trick (second half)
public VersorOdd operator /(AntiProjectViaHorizonOntoInfixPartial<AntiDualNum> lhs, AntiCircleRotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiDualNum {
    public VersorOdd anti_project_via_horizon_onto(AntiCircleRotor other) {
        CircleRotor right_dual = CircleRotor(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiMotor anti_wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4(this.group0.xy.xx, this.e3215, this.scalar) * float4(right_dual.group0.xyz, right_dual.e12345), 
            /* e15, e25, e35, e3215 */
            float4(this.e3215) * float4(right_dual.group1.xyz, right_dual.e12345)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(anti_wedge.scalar) * float4(other.group0.xyz, other.scalar), 
            /* e23, e31, e12, e45 */
            float4(((float3(other.scalar) * anti_wedge.group0.xyz) + (float3(anti_wedge.scalar) * other.group1.xyz)), other.e45 * anti_wedge.scalar), 
            /* e15, e25, e35, e1234 */
            float4((other.e15 * anti_wedge.scalar) + (other.scalar * anti_wedge.e15), (other.e25 * anti_wedge.scalar) + (other.scalar * anti_wedge.e25), (other.e35 * anti_wedge.scalar) + (other.scalar * anti_wedge.e35), -(other.e41 * anti_wedge.e23) - (other.e42 * anti_wedge.e31) - (other.e43 * anti_wedge.e12)), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.e45 * anti_wedge.e23, other.e45 * anti_wedge.e31, other.e45 * anti_wedge.e12, -(other.e31 * anti_wedge.e25) - (other.e12 * anti_wedge.e35) - (other.e15 * anti_wedge.e23) - (other.e25 * anti_wedge.e31) - (other.e35 * anti_wedge.e12)) + (anti_wedge.group1.zxyw * float4(other.group0.xyz.yzx, other.scalar)) - (anti_wedge.group1.yzxx * float4(other.group0.xyz.zxy, other.e23))
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<AntiDualNum> lhs, AntiDipoleInversion rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiDualNum {
    public DipoleInversion anti_project_via_horizon_onto(AntiDipoleInversion other) {
        DipoleInversion right_dual = DipoleInversion(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiFlector anti_wedge = AntiFlector(
            /* e235, e315, e125, e321 */
            float4(this.e3215) * float4(right_dual.group3.xyz, right_dual.e1234) * float4(-1.0), 
            /* e1, e2, e3, e5 */
            float4(this.e3215) * float4(right_dual.group0.xyz, right_dual.e45) * float4(-1.0)
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            float3(other.e4) * anti_wedge.group1.xyz, 
            /* e23, e31, e12, e45 */
            float4(((other.group3.yzx * anti_wedge.group1.zxy) - (other.group3.zxy * anti_wedge.group1.yzx)), other.e4 * anti_wedge.e5), 
            /* e15, e25, e35, e1234 */
            float4(float3(0.0), -(other.e431 * anti_wedge.e2) - (other.e412 * anti_wedge.e3)) + float4((anti_wedge.group1.www * other.group3.xyz), other.e4 * anti_wedge.e321) - (anti_wedge.group1.xyzx * float4(other.group3.www, other.e423)), 
            /* e4235, e4315, e4125, e3215 */
            (float4(anti_wedge.e5) * float4(other.group0.xyz, other.e321)) + (other.group2.wwwy * float4(anti_wedge.group0.xyz, anti_wedge.e2)) + (anti_wedge.group1.yzxx * float4(other.group1.zxy, other.e235)) + float4(float3(0.0), (other.e125 * anti_wedge.e3) - (other.e2 * anti_wedge.e315) - (other.e3 * anti_wedge.e125) - (other.e5 * anti_wedge.e321)) - float4((other.group1.yzx * anti_wedge.group1.zxy), other.e1 * anti_wedge.e235)
        );
    }
}
// Fancy infix trick (second half)
public AntiDualNum operator /(AntiProjectViaHorizonOntoInfixPartial<AntiDualNum> lhs, AntiDualNum rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiDualNum {
    public AntiDualNum anti_project_via_horizon_onto(AntiDualNum other) {
        AntiDualNum anti_wedge = AntiDualNum(
            /* e3215, scalar */
            float2(other.scalar) * this.group0.xy
        );
        return AntiDualNum(
            /* e3215, scalar */
            float2((anti_wedge.e3215 * other.scalar) + (anti_wedge.scalar * other.e3215), anti_wedge.scalar * other.scalar)
        );
    }
}
// Fancy infix trick (second half)
public AntiDualNum operator /(AntiProjectViaHorizonOntoInfixPartial<AntiDualNum> lhs, AntiFlatPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiDualNum {
    public AntiDualNum anti_project_via_horizon_onto(AntiFlatPoint other) {
        return AntiDualNum(
            /* e3215, scalar */
            float2(pow(other.e321, 2) * this.e3215, 1.0) * float2(1.0, 0.0)
        );
    }
}
// Fancy infix trick (second half)
public AntiMotor operator /(AntiProjectViaHorizonOntoInfixPartial<AntiDualNum> lhs, AntiFlector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiDualNum {
    public AntiMotor anti_project_via_horizon_onto(AntiFlector other) {
        Flector right_dual = Flector(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiFlector anti_wedge = AntiFlector(
            /* e235, e315, e125, e321 */
            float4(this.group0.xy.xx, this.e3215, 0.0) * float4(float3(1.0), 0.0) * float4(right_dual.group1.xyz, 0.0) * float4(-1.0, -1.0, -1.0, 0.0), 
            /* e1, e2, e3, e5 */
            float4(float3(0.0), this.e3215 * right_dual.e45 * -1.0)
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4(((anti_wedge.group1.zxy * other.group1.yzx) - (anti_wedge.group1.yzx * other.group1.zxy)), 0.0), 
            /* e15, e25, e35, e3215 */
            (anti_wedge.group1.wwwx * float4(other.group1.xyz, other.e235)) + float4(float3(0.0), (anti_wedge.e2 * other.e315) + (anti_wedge.e3 * other.e125) + (anti_wedge.e5 * other.e321) - (anti_wedge.e315 * other.e2) - (anti_wedge.e125 * other.e3) - (anti_wedge.e321 * other.e5)) - (other.group1.wwwx * float4(anti_wedge.group1.xyz, anti_wedge.e235))
        );
    }
}
// Fancy infix trick (second half)
public AntiDualNum operator /(AntiProjectViaHorizonOntoInfixPartial<AntiDualNum> lhs, AntiLine rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiDualNum {
    public AntiDualNum anti_project_via_horizon_onto(AntiLine other) {
        FlatPoint anti_wedge = FlatPoint(
            /* e15, e25, e35, e45 */
            float4(this.group0.xy.xx, this.e3215, 0.0) * float4(float3(1.0), 0.0) * float4(float3(other.e23 * -1.0, other.e31 * -1.0, other.e12 * -1.0), 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        return AntiDualNum(
            /* e3215, scalar */
            float2(-(other.e23 * anti_wedge.e15) - (other.e31 * anti_wedge.e25) - (other.e12 * anti_wedge.e35), 0.0)
        );
    }
}
// Fancy infix trick (second half)
public AntiMotor operator /(AntiProjectViaHorizonOntoInfixPartial<AntiDualNum> lhs, AntiMotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiDualNum {
    public AntiMotor anti_project_via_horizon_onto(AntiMotor other) {
        Motor right_dual = Motor(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiMotor anti_wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4(float3(0.0), this.scalar * right_dual.e12345), 
            /* e15, e25, e35, e3215 */
            float4(this.e3215) * right_dual.group0
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4(((float3(anti_wedge.scalar) * other.group0.xyz) + (float3(other.scalar) * anti_wedge.group0.xyz)), anti_wedge.scalar * other.scalar), 
            /* e15, e25, e35, e3215 */
            (float4(anti_wedge.scalar) * other.group1) + (float4(other.scalar) * anti_wedge.group1) + float4(float3(0.0), -(anti_wedge.e23 * other.e15) - (anti_wedge.e31 * other.e25) - (anti_wedge.e12 * other.e35) - (anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12))
        );
    }
}
// Fancy infix trick (second half)
public AntiDualNum operator /(AntiProjectViaHorizonOntoInfixPartial<AntiDualNum> lhs, AntiPlane rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiDualNum {
    public AntiDualNum anti_project_via_horizon_onto(AntiPlane other) {
        AntiFlatPoint anti_wedge = AntiFlatPoint(
            /* e235, e315, e125, e321 */
            float4(this.group0.xy.xx, this.e3215, 0.0) * float4(float3(1.0), 0.0) * float4(other.group0.xyz, 0.0) * float4(-1.0, -1.0, -1.0, 0.0)
        );
        return AntiDualNum(
            /* e3215, scalar */
            float2(-(anti_wedge.e235 * other.e1) - (anti_wedge.e315 * other.e2) - (anti_wedge.e125 * other.e3) - (anti_wedge.e321 * other.e5), 0.0)
        );
    }
}
// Fancy infix trick (second half)
public Sphere operator /(AntiProjectViaHorizonOntoInfixPartial<AntiDualNum> lhs, Circle rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiDualNum {
    public Sphere anti_project_via_horizon_onto(Circle other) {
        Dipole right_dual = Dipole(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35 */
            other.group2.xyz
        );
        AntiPlane anti_wedge = AntiPlane(
            /* e1, e2, e3, e5 */
            float4(this.e3215) * float4(right_dual.group0.xyz, right_dual.e45) * float4(-1.0)
        );
        return Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(anti_wedge.e3 * other.e425 * -1.0, anti_wedge.e1 * other.e435 * -1.0, anti_wedge.e2 * other.e415 * -1.0, (anti_wedge.e3 * other.e125) + (anti_wedge.e5 * other.e321)) + (anti_wedge.group0.wwwx * float4(other.group0.xyz, other.e235)) + float4((anti_wedge.group0.yzx * other.group1.zxy), anti_wedge.e2 * other.e315), 
            /* e1234 */
            -(anti_wedge.e1 * other.e423) - (anti_wedge.e2 * other.e431) - (anti_wedge.e3 * other.e412)
        );
    }
}
// Fancy infix trick (second half)
public Sphere operator /(AntiProjectViaHorizonOntoInfixPartial<AntiDualNum> lhs, CircleRotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiDualNum {
    public Sphere anti_project_via_horizon_onto(CircleRotor other) {
        AntiCircleRotor right_dual = AntiCircleRotor(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiPlane anti_wedge = AntiPlane(
            /* e1, e2, e3, e5 */
            float4(this.e3215) * float4(right_dual.group0.xyz, right_dual.e45) * float4(-1.0)
        );
        return Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(anti_wedge.e3 * other.e425 * -1.0, anti_wedge.e1 * other.e435 * -1.0, anti_wedge.e2 * other.e415 * -1.0, (anti_wedge.e3 * other.e125) + (anti_wedge.e5 * other.e321)) + (anti_wedge.group0.yzxy * float4(other.group1.zxy, other.e315)) + float4((other.group0.xyz * anti_wedge.group0.www), anti_wedge.e1 * other.e235), 
            /* e1234 */
            -(anti_wedge.e1 * other.e423) - (anti_wedge.e2 * other.e431) - (anti_wedge.e3 * other.e412)
        );
    }
}
// Fancy infix trick (second half)
public Sphere operator /(AntiProjectViaHorizonOntoInfixPartial<AntiDualNum> lhs, Dipole rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiDualNum {
    public Sphere anti_project_via_horizon_onto(Dipole other) {
        Circle right_dual = Circle(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125 */
            other.group2.xyz * float3(-1.0)
        );
        AntiLine anti_wedge = AntiLine(
            /* e23, e31, e12 */
            float3(this.e3215) * right_dual.group0.xyz, 
            /* e15, e25, e35 */
            float3(this.e3215) * right_dual.group1.xyz
        );
        return Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e23 * other.e45) + (anti_wedge.e35 * other.e42), (anti_wedge.e31 * other.e45) + (anti_wedge.e15 * other.e43), (anti_wedge.e12 * other.e45) + (anti_wedge.e25 * other.e41), -(anti_wedge.e31 * other.e25) - (anti_wedge.e12 * other.e35) - (anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12)) - float4((anti_wedge.group1.xyz.yzx * other.group0.xyz.zxy), anti_wedge.e23 * other.e15), 
            /* e1234 */
            -(anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<AntiDualNum> lhs, DipoleInversion rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiDualNum {
    public DipoleInversion anti_project_via_horizon_onto(DipoleInversion other) {
        AntiDipoleInversion right_dual = AntiDipoleInversion(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiMotor anti_wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4(this.e3215) * float4(right_dual.group0.xyz, right_dual.e4), 
            /* e15, e25, e35, e3215 */
            float4(this.group0.xy.xx, this.e3215, 0.0) * float4(float3(1.0), 0.0) * float4(right_dual.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(anti_wedge.scalar) * other.group1, 
            /* e15, e25, e35, e1234 */
            float4((anti_wedge.group0.www * other.group2.xyz), (anti_wedge.scalar * other.e1234) - (anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e23 * other.e45) + (anti_wedge.scalar * other.e4235), (anti_wedge.e31 * other.e45) + (anti_wedge.scalar * other.e4315), (anti_wedge.e12 * other.e45) + (anti_wedge.scalar * other.e4125), -(anti_wedge.e31 * other.e25) - (anti_wedge.e12 * other.e35) - (anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12)) + float4((other.group0.xyz.yzx * anti_wedge.group1.zxy), anti_wedge.scalar * other.e3215) - float4((other.group0.xyz.zxy * anti_wedge.group1.yzx), anti_wedge.e23 * other.e15)
        );
    }
}
// Fancy infix trick (second half)
public MultiVector operator /(AntiProjectViaHorizonOntoInfixPartial<AntiDualNum> lhs, MultiVector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiDualNum {
    public MultiVector anti_project_via_horizon_onto(MultiVector other) {
        MultiVector right_dual = MultiVector(
            /* scalar, e12345 */
            other.group0.xy.yx * float2(-1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215, 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43 */
            other.group7.xyz, 
            /* e23, e31, e12 */
            other.group6.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412 */
            other.group4.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group3.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        MultiVector anti_wedge = MultiVector(
            /* scalar, e12345 */
            float2((this.e3215 * right_dual.e4) + (this.scalar * right_dual.e12345), 0.0), 
            /* e1, e2, e3, e4 */
            float4(this.group0.xy.xx, this.e3215, 0.0) * float4(float3(1.0), 0.0) * float4(right_dual.group4.xyz, 0.0) * float4(-1.0, -1.0, -1.0, 0.0), 
            /* e5 */
            this.e3215 * right_dual.e45 * -1.0, 
            /* e15, e25, e35, e45 */
            float4(this.group0.xy.xx, this.e3215, 0.0) * float4(float3(1.0), 0.0) * float4(right_dual.group6.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(this.e3215) * right_dual.group7.xyz, 
            /* e415, e425, e435, e321 */
            float4(float3(0.0), this.e3215 * right_dual.e1234 * -1.0), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            float3(this.e3215) * right_dual.group9.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(float3(0.0), this.e3215 * right_dual.e12345), 
            /* e1234 */
            0.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(anti_wedge.scalar * other.scalar, (anti_wedge.scalar * other.e12345) + (anti_wedge.e12345 * other.scalar) + (anti_wedge.e1 * other.e4235) + (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) + (anti_wedge.e4 * other.e3215) + (anti_wedge.e5 * other.e1234) + (anti_wedge.e4235 * other.e1) + (anti_wedge.e4315 * other.e2) + (anti_wedge.e4125 * other.e3) + (anti_wedge.e3215 * other.e4) + (anti_wedge.e1234 * other.e5) - (anti_wedge.e15 * other.e423) - (anti_wedge.e25 * other.e431) - (anti_wedge.e35 * other.e412) - (anti_wedge.e45 * other.e321) - (anti_wedge.e41 * other.e235) - (anti_wedge.e42 * other.e315) - (anti_wedge.e43 * other.e125) - (anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435) - (anti_wedge.e415 * other.e23) - (anti_wedge.e425 * other.e31) - (anti_wedge.e435 * other.e12) - (anti_wedge.e321 * other.e45) - (anti_wedge.e423 * other.e15) - (anti_wedge.e431 * other.e25) - (anti_wedge.e412 * other.e35) - (anti_wedge.e235 * other.e41) - (anti_wedge.e315 * other.e42) - (anti_wedge.e125 * other.e43)), 
            /* e1, e2, e3, e4 */
            (float4(anti_wedge.scalar) * other.group1) + (float4(other.scalar) * anti_wedge.group1), 
            /* e5 */
            (anti_wedge.scalar * other.e5) + (anti_wedge.e5 * other.scalar), 
            /* e15, e25, e35, e45 */
            (float4(anti_wedge.scalar) * other.group3) + (float4(anti_wedge.e5) * other.group1) + (float4(other.scalar) * anti_wedge.group3) - (float4(other.e5) * anti_wedge.group1), 
            /* e41, e42, e43 */
            (float3(anti_wedge.scalar) * other.group4.xyz) + (float3(other.scalar) * anti_wedge.group4.xyz) + (float3(other.e4) * anti_wedge.group1.xyz) - (float3(anti_wedge.e4) * other.group1.xyz), 
            /* e23, e31, e12 */
            (float3(anti_wedge.scalar) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group5.xyz) + (anti_wedge.group1.zxy * other.group1.yzx) - (anti_wedge.group1.yzx * other.group1.zxy), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e4 * other.e15) + (anti_wedge.e5 * other.e41) + (anti_wedge.e15 * other.e4) + (anti_wedge.e41 * other.e5), (anti_wedge.e4 * other.e25) + (anti_wedge.e5 * other.e42) + (anti_wedge.e25 * other.e4) + (anti_wedge.e42 * other.e5), (anti_wedge.e4 * other.e35) + (anti_wedge.e5 * other.e43) + (anti_wedge.e35 * other.e4) + (anti_wedge.e43 * other.e5), -(anti_wedge.e1 * other.e23) - (anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12) - (anti_wedge.e12 * other.e3)) + (float4(anti_wedge.scalar) * other.group6) + (float4(other.scalar) * anti_wedge.group6) - (other.group1.xyzy * float4(anti_wedge.group3.www, anti_wedge.e31)) - float4((other.group3.www * anti_wedge.group1.xyz), anti_wedge.e23 * other.e1), 
            /* e423, e431, e412 */
            (float3(anti_wedge.scalar) * other.group7.xyz) + (float3(anti_wedge.e4) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group7.xyz) + (float3(other.e4) * anti_wedge.group5.xyz) + (anti_wedge.group4.xyz.yzx * other.group1.zxy) + (other.group4.xyz.yzx * anti_wedge.group1.zxy) - (anti_wedge.group4.xyz.zxy * other.group1.yzx) - (other.group4.xyz.zxy * anti_wedge.group1.yzx), 
            /* e235, e315, e125 */
            (float3(anti_wedge.scalar) * other.group8.xyz) + (float3(anti_wedge.e5) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group8.xyz) + (float3(other.e5) * anti_wedge.group5.xyz) + (anti_wedge.group1.yzx * other.group3.zxy) + (anti_wedge.group3.zxy * other.group1.yzx) - (anti_wedge.group1.zxy * other.group3.yzx) - (anti_wedge.group3.yzx * other.group1.zxy), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e2 * other.e435) + (anti_wedge.e5 * other.e423) + (anti_wedge.e45 * other.e23) + (anti_wedge.e425 * other.e3), (anti_wedge.e3 * other.e415) + (anti_wedge.e5 * other.e431) + (anti_wedge.e45 * other.e31) + (anti_wedge.e435 * other.e1), (anti_wedge.e1 * other.e425) + (anti_wedge.e5 * other.e412) + (anti_wedge.e45 * other.e12) + (anti_wedge.e415 * other.e2), -(anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12) - (anti_wedge.e321 * other.e5)) + (float4(anti_wedge.scalar) * other.group9) + (float4(other.scalar) * anti_wedge.group9) + float4((anti_wedge.group5.xyz * other.group3.www), anti_wedge.e2 * other.e315) + float4((anti_wedge.group8.xyz * other.group1.www), anti_wedge.e3 * other.e125) + float4((anti_wedge.group4.xyz.yzx * other.group3.zxy), anti_wedge.e1 * other.e235) + float4((other.group4.xyz.yzx * anti_wedge.group3.zxy), anti_wedge.e5 * other.e321) - (other.group1.yzxz * float4(anti_wedge.group6.zxy, anti_wedge.e125)) - (other.group3.yzxx * float4(anti_wedge.group4.xyz.zxy, anti_wedge.e23)) - float4((float3(other.e5) * anti_wedge.group7.xyz), anti_wedge.e31 * other.e25) - float4((other.group8.xyz * anti_wedge.group1.www), anti_wedge.e235 * other.e1) - float4((other.group4.xyz.zxy * anti_wedge.group3.yzx), anti_wedge.e12 * other.e35) - float4((anti_wedge.group1.zxy * other.group6.yzx), anti_wedge.e315 * other.e2), 
            /* e1234 */
            (anti_wedge.scalar * other.e1234) + (anti_wedge.e321 * other.e4) + (anti_wedge.e423 * other.e1) + (anti_wedge.e431 * other.e2) + (anti_wedge.e412 * other.e3) + (anti_wedge.e1234 * other.scalar) - (anti_wedge.e1 * other.e423) - (anti_wedge.e2 * other.e431) - (anti_wedge.e3 * other.e412) - (anti_wedge.e4 * other.e321) - (anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12) - (anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)
        );
    }
}
// Fancy infix trick (second half)
public Sphere operator /(AntiProjectViaHorizonOntoInfixPartial<AntiDualNum> lhs, RoundPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiDualNum {
    public Sphere anti_project_via_horizon_onto(RoundPoint other) {
        Sphere right_dual = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        AntiFlatPoint anti_wedge = AntiFlatPoint(
            /* e235, e315, e125, e321 */
            float4(this.e3215) * float4(right_dual.group0.xyz, right_dual.e1234) * float4(-1.0)
        );
        return Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4((float3(other.e4) * anti_wedge.group0.xyz), -(anti_wedge.e235 * other.e1) - (anti_wedge.e315 * other.e2) - (anti_wedge.e125 * other.e3) - (anti_wedge.e321 * other.e5)), 
            /* e1234 */
            anti_wedge.e321 * other.e4
        );
    }
}
// Fancy infix trick (second half)
public AntiDualNum operator /(AntiProjectViaHorizonOntoInfixPartial<AntiDualNum> lhs, Scalar rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiDualNum {
    public AntiDualNum anti_project_via_horizon_onto(Scalar other) {
        AntiScalar right_dual = AntiScalar(
            /* e12345 */
            other.scalar
        );
        return AntiDualNum(
            /* e3215, scalar */
            float2(other.scalar) * float2(this.e3215 * right_dual.e12345, this.scalar * right_dual.e12345)
        );
    }
}
// Fancy infix trick (second half)
public Sphere operator /(AntiProjectViaHorizonOntoInfixPartial<AntiDualNum> lhs, Sphere rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiDualNum {
    public Sphere anti_project_via_horizon_onto(Sphere other) {
        Scalar anti_wedge = Scalar(
            /* scalar */
            (float4(other.group0.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0))[3] * this.e3215
        );
        return Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(anti_wedge.scalar) * other.group0, 
            /* e1234 */
            anti_wedge.scalar * other.e1234
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<AntiDualNum> lhs, VersorEven rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiDualNum {
    public DipoleInversion anti_project_via_horizon_onto(VersorEven other) {
        VersorOdd right_dual = VersorOdd(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiFlector anti_wedge = AntiFlector(
            /* e235, e315, e125, e321 */
            float4(this.e3215) * float4(right_dual.group3.xyz, right_dual.e1234) * float4(-1.0), 
            /* e1, e2, e3, e5 */
            float4(this.e3215) * float4(right_dual.group0.xyz, right_dual.e45) * float4(-1.0)
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            float3(other.e4) * anti_wedge.group1.xyz, 
            /* e23, e31, e12, e45 */
            float4(((anti_wedge.group1.zxy * other.group3.yzx) - (anti_wedge.group1.yzx * other.group3.zxy)), anti_wedge.e5 * other.e4), 
            /* e15, e25, e35, e1234 */
            (other.group3 * float4(anti_wedge.group1.www, anti_wedge.e321)) + float4(float3(0.0), -(anti_wedge.e2 * other.e431) - (anti_wedge.e3 * other.e412)) - (anti_wedge.group1.xyzx * float4(other.group2.www, other.e423)), 
            /* e4235, e4315, e4125, e3215 */
            (anti_wedge.group1.yzxy * float4(other.group1.zxy, other.e315)) + (anti_wedge.group1.wwwz * float4(other.group0.xyz, other.e125)) + float4(float3(0.0), (anti_wedge.e5 * other.e321) - (anti_wedge.e315 * other.e2) - (anti_wedge.e125 * other.e3) - (anti_wedge.e321 * other.e5)) + float4((other.group3.www * anti_wedge.group0.xyz), anti_wedge.e1 * other.e235) - float4((anti_wedge.group1.zxy * other.group1.yzx), anti_wedge.e235 * other.e1)
        );
    }
}
// Fancy infix trick (second half)
public VersorOdd operator /(AntiProjectViaHorizonOntoInfixPartial<AntiDualNum> lhs, VersorOdd rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiDualNum {
    public VersorOdd anti_project_via_horizon_onto(VersorOdd other) {
        VersorEven right_dual = VersorEven(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiMotor anti_wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4(this.group0.xy.xx, this.e3215, (this.e3215 * right_dual.e4) + (this.scalar * right_dual.e12345)) * float4(right_dual.group0.xyz, 1.0), 
            /* e15, e25, e35, e3215 */
            float4(this.e3215) * float4(right_dual.group1.xyz, right_dual.e12345)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(anti_wedge.scalar) * other.group0, 
            /* e23, e31, e12, e45 */
            float4(((float3(anti_wedge.scalar) * other.group1.xyz) + (float3(other.scalar) * anti_wedge.group0.xyz)), anti_wedge.scalar * other.e45), 
            /* e15, e25, e35, e1234 */
            float4(anti_wedge.e15 * other.scalar, anti_wedge.e25 * other.scalar, anti_wedge.e35 * other.scalar, -(anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)) + (float4(anti_wedge.scalar) * other.group2), 
            /* e4235, e4315, e4125, e3215 */
            float4(anti_wedge.e35 * other.e42, anti_wedge.e15 * other.e43, anti_wedge.e25 * other.e41, -(anti_wedge.e31 * other.e25) - (anti_wedge.e12 * other.e35) - (anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12)) + (anti_wedge.group0 * float4(other.group1.www, other.e3215)) + float4((anti_wedge.group0.www * other.group3.xyz), anti_wedge.e3215 * other.scalar) - float4((anti_wedge.group1.yzx * other.group0.zxy), anti_wedge.e23 * other.e15)
        );
    }
}
// Fancy infix trick (first half)
public AntiProjectViaHorizonOntoInfixPartial<AntiFlatPoint> operator /(AntiFlatPoint lhs, AntiProjectViaHorizonOntoInfix rhs) {
    return AntiProjectViaHorizonOntoInfixPartial<AntiFlatPoint>(lhs);
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<AntiFlatPoint> lhs, AntiCircleRotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiFlatPoint {
    public VersorEven anti_project_via_horizon_onto(AntiCircleRotor other) {
        CircleRotor right_dual = CircleRotor(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiFlector anti_wedge = AntiFlector(
            /* e235, e315, e125, e321 */
            float4(right_dual.e12345) * this.group0, 
            /* e1, e2, e3, e5 */
            float4((this.e315 * right_dual.e412) + (this.e321 * right_dual.e415), (this.e125 * right_dual.e423) + (this.e321 * right_dual.e425), (this.e235 * right_dual.e431) + (this.e321 * right_dual.e435), -(this.e315 * right_dual.e425) - (this.e125 * right_dual.e435)) - float4((right_dual.group0.xyz.yzx * this.group0.zxy), this.e235 * right_dual.e415)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(other.e42 * anti_wedge.e3, other.e43 * anti_wedge.e1, other.e41 * anti_wedge.e2, -(other.e42 * anti_wedge.e315) - (other.e43 * anti_wedge.e125) - (other.e45 * anti_wedge.e321)) - float4((other.group0.xyz.zxy * anti_wedge.group1.yzx), other.e41 * anti_wedge.e235), 
            /* e415, e425, e435, e321 */
            float4(float3(0.0), -(other.e31 * anti_wedge.e2) - (other.e12 * anti_wedge.e3)) + float4((other.group0.xyz * anti_wedge.group1.www), other.scalar * anti_wedge.e321) - (other.group1.wwwx * anti_wedge.group1.xyzx), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.scalar) * anti_wedge.group0.xyz) + (float3(anti_wedge.e5) * other.group1.xyz) + (other.group2.zxy * anti_wedge.group1.yzx) - (other.group2.yzx * anti_wedge.group1.zxy)), other.scalar * anti_wedge.e5), 
            /* e1, e2, e3, e4 */
            float4(float3(1.0), 0.0) * float4(other.group2.www, 0.0) * float4(anti_wedge.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<AntiFlatPoint> lhs, AntiDipoleInversion rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiFlatPoint {
    public VersorEven anti_project_via_horizon_onto(AntiDipoleInversion other) {
        DipoleInversion right_dual = DipoleInversion(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiMotor anti_wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4(this.e235 * right_dual.e1234, this.e315 * right_dual.e1234, this.e125 * right_dual.e1234, -(this.e315 * right_dual.e42) - (this.e125 * right_dual.e43) - (this.e321 * right_dual.e45)) - float4((this.group0.www * right_dual.group3.xyz), this.e235 * right_dual.e41), 
            /* e15, e25, e35, e3215 */
            float4(((this.group0.yzx * right_dual.group3.zxy) - (this.group0.zxy * right_dual.group3.yzx)), 0.0)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(other.e4 * anti_wedge.e23, other.e4 * anti_wedge.e31, other.e4 * anti_wedge.e12, -(other.e423 * anti_wedge.e15) - (other.e431 * anti_wedge.e25) - (other.e412 * anti_wedge.e35) - (other.e415 * anti_wedge.e23) - (other.e425 * anti_wedge.e31) - (other.e435 * anti_wedge.e12)) + float4((other.group0.xyz * anti_wedge.group0.www), other.e4 * anti_wedge.e3215), 
            /* e415, e425, e435, e321 */
            float4(other.e4 * anti_wedge.e15, other.e4 * anti_wedge.e25, other.e4 * anti_wedge.e35, -(other.e1 * anti_wedge.e23) - (other.e2 * anti_wedge.e31) - (other.e3 * anti_wedge.e12)) + (float4(anti_wedge.scalar) * other.group1), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.e5) * anti_wedge.group0.xyz) + (float3(anti_wedge.scalar) * other.group2.xyz) + (other.group3.yzx * anti_wedge.group1.zxy) - (other.group3.zxy * anti_wedge.group1.yzx)), other.e5 * anti_wedge.scalar), 
            /* e1, e2, e3, e4 */
            float4(anti_wedge.scalar) * float4(other.group3.xyz, other.e4)
        );
    }
}
// Fancy infix trick (second half)
public AntiFlatPoint operator /(AntiProjectViaHorizonOntoInfixPartial<AntiFlatPoint> lhs, AntiDualNum rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiFlatPoint {
    public AntiFlatPoint anti_project_via_horizon_onto(AntiDualNum other) {
        DualNum right_dual = DualNum(
            /* e5, e12345 */
            other.group0.xy
        );
        return AntiFlatPoint(
            /* e235, e315, e125, e321 */
            float4(other.scalar) * float4(this.e235 * right_dual.e12345, this.e315 * right_dual.e12345, this.e125 * right_dual.e12345, this.e321 * right_dual.e12345)
        );
    }
}
// Fancy infix trick (second half)
public AntiFlatPoint operator /(AntiProjectViaHorizonOntoInfixPartial<AntiFlatPoint> lhs, AntiFlatPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiFlatPoint {
    public AntiFlatPoint anti_project_via_horizon_onto(AntiFlatPoint other) {
        return AntiFlatPoint(
            /* e235, e315, e125, e321 */
            float4(other.e321 * this.e321) * other.group0
        );
    }
}
// Fancy infix trick (second half)
public AntiFlector operator /(AntiProjectViaHorizonOntoInfixPartial<AntiFlatPoint> lhs, AntiFlector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiFlatPoint {
    public AntiFlector anti_project_via_horizon_onto(AntiFlector other) {
        Flector right_dual = Flector(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiMotor anti_wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4(this.e321) * float4(right_dual.group1.xyz, right_dual.e45) * float4(-1.0), 
            /* e15, e25, e35, e3215 */
            float4(((this.group0.yzx * right_dual.group1.zxy) - (this.group0.zxy * right_dual.group1.yzx)), 0.0)
        );
        return AntiFlector(
            /* e235, e315, e125, e321 */
            float4((other.e2 * anti_wedge.e35) + (other.e5 * anti_wedge.e23), (other.e3 * anti_wedge.e15) + (other.e5 * anti_wedge.e31), (other.e1 * anti_wedge.e25) + (other.e5 * anti_wedge.e12), -(other.e2 * anti_wedge.e31) - (other.e3 * anti_wedge.e12)) + (float4(anti_wedge.scalar) * other.group0) - (other.group1.zxyx * float4(anti_wedge.group1.yzx, anti_wedge.e23)), 
            /* e1, e2, e3, e5 */
            float4(anti_wedge.scalar) * other.group1
        );
    }
}
// Fancy infix trick (second half)
public AntiFlatPoint operator /(AntiProjectViaHorizonOntoInfixPartial<AntiFlatPoint> lhs, AntiLine rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiFlatPoint {
    public AntiFlatPoint anti_project_via_horizon_onto(AntiLine other) {
        Line right_dual = Line(
            /* e415, e425, e435 */
            other.group0.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group1.xyz * float3(-1.0)
        );
        AntiPlane anti_wedge = AntiPlane(
            /* e1, e2, e3, e5 */
            float4((float3(this.e321) * right_dual.group0.xyz), -(this.e235 * right_dual.e415) - (this.e315 * right_dual.e425) - (this.e125 * right_dual.e435))
        );
        return AntiFlatPoint(
            /* e235, e315, e125, e321 */
            float4((other.e23 * anti_wedge.e5) + (other.e35 * anti_wedge.e2), (other.e31 * anti_wedge.e5) + (other.e15 * anti_wedge.e3), (other.e12 * anti_wedge.e5) + (other.e25 * anti_wedge.e1), -(other.e31 * anti_wedge.e2) - (other.e12 * anti_wedge.e3)) - (anti_wedge.group0.zxyx * float4(other.group1.xyz.yzx, other.e23))
        );
    }
}
// Fancy infix trick (second half)
public AntiFlector operator /(AntiProjectViaHorizonOntoInfixPartial<AntiFlatPoint> lhs, AntiMotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiFlatPoint {
    public AntiFlector anti_project_via_horizon_onto(AntiMotor other) {
        Motor right_dual = Motor(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiFlector anti_wedge = AntiFlector(
            /* e235, e315, e125, e321 */
            float4(right_dual.e12345) * this.group0, 
            /* e1, e2, e3, e5 */
            float4((this.group0.www * right_dual.group0.xyz), -(this.e235 * right_dual.e415) - (this.e315 * right_dual.e425) - (this.e125 * right_dual.e435))
        );
        return AntiFlector(
            /* e235, e315, e125, e321 */
            float4((anti_wedge.e2 * other.e35) + (anti_wedge.e5 * other.e23), (anti_wedge.e3 * other.e15) + (anti_wedge.e5 * other.e31), (anti_wedge.e1 * other.e25) + (anti_wedge.e5 * other.e12), -(anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12)) + (float4(other.scalar) * anti_wedge.group0) - (anti_wedge.group1.zxyx * float4(other.group1.yzx, other.e23)), 
            /* e1, e2, e3, e5 */
            float4(other.scalar) * anti_wedge.group1
        );
    }
}
// Fancy infix trick (second half)
public AntiFlatPoint operator /(AntiProjectViaHorizonOntoInfixPartial<AntiFlatPoint> lhs, AntiPlane rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiFlatPoint {
    public AntiFlatPoint anti_project_via_horizon_onto(AntiPlane other) {
        Plane right_dual = Plane(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiLine anti_wedge = AntiLine(
            /* e23, e31, e12 */
            float3(this.e321) * right_dual.group0.xyz * float3(-1.0), 
            /* e15, e25, e35 */
            (this.group0.yzx * right_dual.group0.zxy) - (this.group0.zxy * right_dual.group0.yzx)
        );
        return AntiFlatPoint(
            /* e235, e315, e125, e321 */
            float4((anti_wedge.e23 * other.e5) + (anti_wedge.e35 * other.e2), (anti_wedge.e31 * other.e5) + (anti_wedge.e15 * other.e3), (anti_wedge.e12 * other.e5) + (anti_wedge.e25 * other.e1), -(anti_wedge.e31 * other.e2) - (anti_wedge.e12 * other.e3)) - (other.group0.zxyx * float4(anti_wedge.group1.xyz.yzx, anti_wedge.e23))
        );
    }
}
// Fancy infix trick (second half)
public Circle operator /(AntiProjectViaHorizonOntoInfixPartial<AntiFlatPoint> lhs, Circle rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiFlatPoint {
    public Circle anti_project_via_horizon_onto(Circle other) {
        Dipole right_dual = Dipole(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35 */
            other.group2.xyz
        );
        Scalar anti_wedge = Scalar(
            /* scalar */
            -(this.e235 * right_dual.e41) - (this.e315 * right_dual.e42) - (this.e125 * right_dual.e43) - (this.e321 * right_dual.e45)
        );
        return Circle(
            /* e423, e431, e412 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(anti_wedge.scalar) * other.group1, 
            /* e235, e315, e125 */
            float3(anti_wedge.scalar) * other.group2.xyz
        );
    }
}
// Fancy infix trick (second half)
public CircleRotor operator /(AntiProjectViaHorizonOntoInfixPartial<AntiFlatPoint> lhs, CircleRotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiFlatPoint {
    public CircleRotor anti_project_via_horizon_onto(CircleRotor other) {
        AntiCircleRotor right_dual = AntiCircleRotor(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        Scalar anti_wedge = Scalar(
            /* scalar */
            -(right_dual.e41 * this.e235) - (right_dual.e42 * this.e315) - (right_dual.e43 * this.e125) - (right_dual.e45 * this.e321)
        );
        return CircleRotor(
            /* e423, e431, e412 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(anti_wedge.scalar) * other.group1, 
            /* e235, e315, e125, e12345 */
            float4(anti_wedge.scalar) * other.group2
        );
    }
}
// Fancy infix trick (second half)
public Circle operator /(AntiProjectViaHorizonOntoInfixPartial<AntiFlatPoint> lhs, Dipole rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiFlatPoint {
    public Circle anti_project_via_horizon_onto(Dipole other) {
        Circle right_dual = Circle(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125 */
            other.group2.xyz * float3(-1.0)
        );
        AntiPlane anti_wedge = AntiPlane(
            /* e1, e2, e3, e5 */
            float4((this.e315 * right_dual.e412) + (this.e321 * right_dual.e415), (this.e125 * right_dual.e423) + (this.e321 * right_dual.e425), (this.e235 * right_dual.e431) + (this.e321 * right_dual.e435), -(this.e315 * right_dual.e425) - (this.e125 * right_dual.e435)) - float4((right_dual.group0.xyz.yzx * this.group0.zxy), this.e235 * right_dual.e415)
        );
        return Circle(
            /* e423, e431, e412 */
            (other.group0.xyz.yzx * anti_wedge.group0.zxy) - (other.group0.xyz.zxy * anti_wedge.group0.yzx), 
            /* e415, e425, e435, e321 */
            float4(anti_wedge.e5 * other.e41, anti_wedge.e5 * other.e42, anti_wedge.e5 * other.e43, -(anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12)) - (anti_wedge.group0.xyzx * other.group1.wwwx), 
            /* e235, e315, e125 */
            (float3(anti_wedge.e5) * other.group1.xyz) + (other.group2.xyz.zxy * anti_wedge.group0.yzx) - (other.group2.xyz.yzx * anti_wedge.group0.zxy)
        );
    }
}
// Fancy infix trick (second half)
public CircleRotor operator /(AntiProjectViaHorizonOntoInfixPartial<AntiFlatPoint> lhs, DipoleInversion rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiFlatPoint {
    public CircleRotor anti_project_via_horizon_onto(DipoleInversion other) {
        AntiDipoleInversion right_dual = AntiDipoleInversion(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiPlane anti_wedge = AntiPlane(
            /* e1, e2, e3, e5 */
            float4((right_dual.e412 * this.e315) + (right_dual.e415 * this.e321), (right_dual.e423 * this.e125) + (right_dual.e425 * this.e321), (right_dual.e431 * this.e235) + (right_dual.e435 * this.e321), -(right_dual.e425 * this.e315) - (right_dual.e435 * this.e125)) - (this.group0.zxyx * float4(right_dual.group0.xyz.yzx, right_dual.e415))
        );
        return CircleRotor(
            /* e423, e431, e412 */
            (other.group0.xyz.yzx * anti_wedge.group0.zxy) - (other.group0.xyz.zxy * anti_wedge.group0.yzx), 
            /* e415, e425, e435, e321 */
            float4(anti_wedge.e5 * other.e41, anti_wedge.e5 * other.e42, anti_wedge.e5 * other.e43, -(anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12)) - (anti_wedge.group0.xyzx * other.group1.wwwx), 
            /* e235, e315, e125, e12345 */
            float4(anti_wedge.e3 * other.e25 * -1.0, anti_wedge.e1 * other.e35 * -1.0, anti_wedge.e2 * other.e15 * -1.0, (anti_wedge.e3 * other.e4125) + (anti_wedge.e5 * other.e1234)) + (anti_wedge.group0.yzxx * float4(other.group2.zxy, other.e4235)) + (anti_wedge.group0.wwwy * float4(other.group1.xyz, other.e4315))
        );
    }
}
// Fancy infix trick (second half)
public MultiVector operator /(AntiProjectViaHorizonOntoInfixPartial<AntiFlatPoint> lhs, MultiVector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiFlatPoint {
    public MultiVector anti_project_via_horizon_onto(MultiVector other) {
        MultiVector right_dual = MultiVector(
            /* scalar, e12345 */
            other.group0.xy.yx * float2(-1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215, 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43 */
            other.group7.xyz, 
            /* e23, e31, e12 */
            other.group6.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412 */
            other.group4.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group3.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        MultiVector anti_wedge = MultiVector(
            /* scalar, e12345 */
            float2(-(this.e235 * right_dual.e41) - (this.e315 * right_dual.e42) - (this.e125 * right_dual.e43) - (this.e321 * right_dual.e45), 0.0), 
            /* e1, e2, e3, e4 */
            float4((float3(this.e321) * right_dual.group6.xyz), 0.0) + float4((right_dual.group7.xyz.zxy * this.group0.yzx), 0.0) - float4((right_dual.group7.xyz.yzx * this.group0.zxy), 0.0), 
            /* e5 */
            -(this.e235 * right_dual.e415) - (this.e315 * right_dual.e425) - (this.e125 * right_dual.e435), 
            /* e15, e25, e35, e45 */
            float4(((this.group0.yzx * right_dual.group9.zxy) - (this.group0.zxy * right_dual.group9.yzx)), 0.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            (float3(right_dual.e1234) * this.group0.xyz) - (float3(this.e321) * right_dual.group9.xyz), 
            /* e415, e425, e435, e321 */
            float4(float3(0.0), this.e321 * right_dual.e12345), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            float3(right_dual.e12345) * this.group0.xyz, 
            /* e4235, e4315, e4125, e3215 */
            float4(0.0), 
            /* e1234 */
            0.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(anti_wedge.scalar * other.scalar, (anti_wedge.scalar * other.e12345) + (anti_wedge.e12345 * other.scalar) + (anti_wedge.e1 * other.e4235) + (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) + (anti_wedge.e4 * other.e3215) + (anti_wedge.e5 * other.e1234) + (anti_wedge.e4235 * other.e1) + (anti_wedge.e4315 * other.e2) + (anti_wedge.e4125 * other.e3) + (anti_wedge.e3215 * other.e4) + (anti_wedge.e1234 * other.e5) - (anti_wedge.e15 * other.e423) - (anti_wedge.e25 * other.e431) - (anti_wedge.e35 * other.e412) - (anti_wedge.e45 * other.e321) - (anti_wedge.e41 * other.e235) - (anti_wedge.e42 * other.e315) - (anti_wedge.e43 * other.e125) - (anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435) - (anti_wedge.e415 * other.e23) - (anti_wedge.e425 * other.e31) - (anti_wedge.e435 * other.e12) - (anti_wedge.e321 * other.e45) - (anti_wedge.e423 * other.e15) - (anti_wedge.e431 * other.e25) - (anti_wedge.e412 * other.e35) - (anti_wedge.e235 * other.e41) - (anti_wedge.e315 * other.e42) - (anti_wedge.e125 * other.e43)), 
            /* e1, e2, e3, e4 */
            (float4(anti_wedge.scalar) * other.group1) + (float4(other.scalar) * anti_wedge.group1), 
            /* e5 */
            (anti_wedge.scalar * other.e5) + (anti_wedge.e5 * other.scalar), 
            /* e15, e25, e35, e45 */
            (float4(anti_wedge.scalar) * other.group3) + (float4(anti_wedge.e5) * other.group1) + (float4(other.scalar) * anti_wedge.group3) - (float4(other.e5) * anti_wedge.group1), 
            /* e41, e42, e43 */
            (float3(anti_wedge.scalar) * other.group4.xyz) + (float3(other.scalar) * anti_wedge.group4.xyz) + (float3(other.e4) * anti_wedge.group1.xyz) - (float3(anti_wedge.e4) * other.group1.xyz), 
            /* e23, e31, e12 */
            (float3(anti_wedge.scalar) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group5.xyz) + (anti_wedge.group1.zxy * other.group1.yzx) - (anti_wedge.group1.yzx * other.group1.zxy), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e4 * other.e15) + (anti_wedge.e5 * other.e41) + (anti_wedge.e15 * other.e4) + (anti_wedge.e41 * other.e5), (anti_wedge.e4 * other.e25) + (anti_wedge.e5 * other.e42) + (anti_wedge.e25 * other.e4) + (anti_wedge.e42 * other.e5), (anti_wedge.e4 * other.e35) + (anti_wedge.e5 * other.e43) + (anti_wedge.e35 * other.e4) + (anti_wedge.e43 * other.e5), -(anti_wedge.e1 * other.e23) - (anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12) - (anti_wedge.e12 * other.e3)) + (float4(anti_wedge.scalar) * other.group6) + (float4(other.scalar) * anti_wedge.group6) - (other.group1.xyzy * float4(anti_wedge.group3.www, anti_wedge.e31)) - float4((other.group3.www * anti_wedge.group1.xyz), anti_wedge.e23 * other.e1), 
            /* e423, e431, e412 */
            (float3(anti_wedge.scalar) * other.group7.xyz) + (float3(anti_wedge.e4) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group7.xyz) + (float3(other.e4) * anti_wedge.group5.xyz) + (anti_wedge.group4.xyz.yzx * other.group1.zxy) + (other.group4.xyz.yzx * anti_wedge.group1.zxy) - (anti_wedge.group4.xyz.zxy * other.group1.yzx) - (other.group4.xyz.zxy * anti_wedge.group1.yzx), 
            /* e235, e315, e125 */
            (float3(anti_wedge.scalar) * other.group8.xyz) + (float3(anti_wedge.e5) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group8.xyz) + (float3(other.e5) * anti_wedge.group5.xyz) + (anti_wedge.group1.yzx * other.group3.zxy) + (anti_wedge.group3.zxy * other.group1.yzx) - (anti_wedge.group1.zxy * other.group3.yzx) - (anti_wedge.group3.yzx * other.group1.zxy), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e2 * other.e435) + (anti_wedge.e5 * other.e423) + (anti_wedge.e45 * other.e23) + (anti_wedge.e425 * other.e3), (anti_wedge.e3 * other.e415) + (anti_wedge.e5 * other.e431) + (anti_wedge.e45 * other.e31) + (anti_wedge.e435 * other.e1), (anti_wedge.e1 * other.e425) + (anti_wedge.e5 * other.e412) + (anti_wedge.e45 * other.e12) + (anti_wedge.e415 * other.e2), -(anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12) - (anti_wedge.e321 * other.e5)) + (float4(anti_wedge.scalar) * other.group9) + (float4(other.scalar) * anti_wedge.group9) + float4((anti_wedge.group5.xyz * other.group3.www), anti_wedge.e2 * other.e315) + float4((anti_wedge.group8.xyz * other.group1.www), anti_wedge.e3 * other.e125) + float4((anti_wedge.group4.xyz.yzx * other.group3.zxy), anti_wedge.e1 * other.e235) + float4((other.group4.xyz.yzx * anti_wedge.group3.zxy), anti_wedge.e5 * other.e321) - (other.group1.yzxz * float4(anti_wedge.group6.zxy, anti_wedge.e125)) - (other.group3.yzxx * float4(anti_wedge.group4.xyz.zxy, anti_wedge.e23)) - float4((float3(other.e5) * anti_wedge.group7.xyz), anti_wedge.e31 * other.e25) - float4((other.group8.xyz * anti_wedge.group1.www), anti_wedge.e235 * other.e1) - float4((other.group4.xyz.zxy * anti_wedge.group3.yzx), anti_wedge.e12 * other.e35) - float4((anti_wedge.group1.zxy * other.group6.yzx), anti_wedge.e315 * other.e2), 
            /* e1234 */
            (anti_wedge.scalar * other.e1234) + (anti_wedge.e321 * other.e4) + (anti_wedge.e423 * other.e1) + (anti_wedge.e431 * other.e2) + (anti_wedge.e412 * other.e3) + (anti_wedge.e1234 * other.scalar) - (anti_wedge.e1 * other.e423) - (anti_wedge.e2 * other.e431) - (anti_wedge.e3 * other.e412) - (anti_wedge.e4 * other.e321) - (anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12) - (anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)
        );
    }
}
// Fancy infix trick (second half)
public Circle operator /(AntiProjectViaHorizonOntoInfixPartial<AntiFlatPoint> lhs, RoundPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiFlatPoint {
    public Circle anti_project_via_horizon_onto(RoundPoint other) {
        Sphere right_dual = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        AntiLine anti_wedge = AntiLine(
            /* e23, e31, e12 */
            (float3(right_dual.e1234) * this.group0.xyz) - (float3(this.e321) * right_dual.group0.xyz), 
            /* e15, e25, e35 */
            (this.group0.yzx * right_dual.group0.zxy) - (this.group0.zxy * right_dual.group0.yzx)
        );
        return Circle(
            /* e423, e431, e412 */
            float3(other.e4) * anti_wedge.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4((float3(other.e4) * anti_wedge.group1.xyz), -(anti_wedge.e23 * other.e1) - (anti_wedge.e31 * other.e2) - (anti_wedge.e12 * other.e3)), 
            /* e235, e315, e125 */
            (float3(other.e5) * anti_wedge.group0.xyz) + (anti_wedge.group1.xyz.zxy * other.group0.yzx) - (anti_wedge.group1.xyz.yzx * other.group0.zxy)
        );
    }
}
// Fancy infix trick (second half)
public AntiFlatPoint operator /(AntiProjectViaHorizonOntoInfixPartial<AntiFlatPoint> lhs, Scalar rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiFlatPoint {
    public AntiFlatPoint anti_project_via_horizon_onto(Scalar other) {
        AntiScalar right_dual = AntiScalar(
            /* e12345 */
            other.scalar
        );
        return AntiFlatPoint(
            /* e235, e315, e125, e321 */
            float4(other.scalar) * float4(this.e235 * right_dual.e12345, this.e315 * right_dual.e12345, this.e125 * right_dual.e12345, this.e321 * right_dual.e12345)
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<AntiFlatPoint> lhs, VersorEven rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiFlatPoint {
    public VersorEven anti_project_via_horizon_onto(VersorEven other) {
        VersorOdd right_dual = VersorOdd(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiMotor anti_wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4(this.e235 * right_dual.e1234, this.e315 * right_dual.e1234, this.e125 * right_dual.e1234, -(this.e315 * right_dual.e42) - (this.e125 * right_dual.e43) - (this.e321 * right_dual.e45)) - (this.group0.wwwx * float4(right_dual.group3.xyz, right_dual.e41)), 
            /* e15, e25, e35, e3215 */
            float4(((this.group0.yzx * right_dual.group3.zxy) - (this.group0.zxy * right_dual.group3.yzx)), 0.0)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            (anti_wedge.group0 * float4(other.group3.www, other.e12345)) + float4(float3(0.0), -(anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435) - (anti_wedge.e15 * other.e423) - (anti_wedge.e25 * other.e431) - (anti_wedge.e35 * other.e412)) + float4((anti_wedge.group0.www * other.group0.xyz), anti_wedge.e3215 * other.e4), 
            /* e415, e425, e435, e321 */
            float4(anti_wedge.e15 * other.e4, anti_wedge.e25 * other.e4, anti_wedge.e35 * other.e4, -(anti_wedge.e23 * other.e1) - (anti_wedge.e31 * other.e2) - (anti_wedge.e12 * other.e3)) + (float4(anti_wedge.scalar) * other.group1), 
            /* e235, e315, e125, e5 */
            float4(((float3(anti_wedge.scalar) * other.group2.xyz) + (float3(other.e5) * anti_wedge.group0.xyz) + (anti_wedge.group1.zxy * other.group3.yzx) - (anti_wedge.group1.yzx * other.group3.zxy)), anti_wedge.scalar * other.e5), 
            /* e1, e2, e3, e4 */
            float4(anti_wedge.scalar) * other.group3
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<AntiFlatPoint> lhs, VersorOdd rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiFlatPoint {
    public VersorEven anti_project_via_horizon_onto(VersorOdd other) {
        VersorEven right_dual = VersorEven(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiFlector anti_wedge = AntiFlector(
            /* e235, e315, e125, e321 */
            float4(right_dual.e12345) * this.group0, 
            /* e1, e2, e3, e5 */
            float4((this.e315 * right_dual.e412) + (this.e321 * right_dual.e415), (this.e125 * right_dual.e423) + (this.e321 * right_dual.e425), (this.e235 * right_dual.e431) + (this.e321 * right_dual.e435), -(this.e315 * right_dual.e425) - (this.e125 * right_dual.e435)) - (this.group0.zxyx * float4(right_dual.group0.yzx, right_dual.e415))
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            (anti_wedge.group1.zxyx * float4(other.group0.yzx, other.e4235)) + float4(float3(0.0), (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) + (anti_wedge.e5 * other.e1234) - (anti_wedge.e315 * other.e42) - (anti_wedge.e125 * other.e43) - (anti_wedge.e321 * other.e45)) - (other.group0.zxyx * float4(anti_wedge.group1.yzx, anti_wedge.e235)), 
            /* e415, e425, e435, e321 */
            (other.group0 * float4(anti_wedge.group1.www, anti_wedge.e321)) + float4(float3(0.0), -(anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12)) - (anti_wedge.group1.xyzx * other.group1.wwwx), 
            /* e235, e315, e125, e5 */
            float4(((float3(anti_wedge.e5) * other.group1.xyz) + (float3(other.scalar) * anti_wedge.group0.xyz) + (anti_wedge.group1.yzx * other.group2.zxy) - (anti_wedge.group1.zxy * other.group2.yzx)), anti_wedge.e5 * other.scalar), 
            /* e1, e2, e3, e4 */
            float4(float3(1.0), 0.0) * float4(other.group0.www, 0.0) * float4(anti_wedge.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
    }
}
// Fancy infix trick (first half)
public AntiProjectViaHorizonOntoInfixPartial<AntiFlector> operator /(AntiFlector lhs, AntiProjectViaHorizonOntoInfix rhs) {
    return AntiProjectViaHorizonOntoInfixPartial<AntiFlector>(lhs);
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<AntiFlector> lhs, AntiCircleRotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiFlector {
    public VersorEven anti_project_via_horizon_onto(AntiCircleRotor other) {
        CircleRotor right_dual = CircleRotor(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiFlector anti_wedge = AntiFlector(
            /* e235, e315, e125, e321 */
            float4(right_dual.e12345) * this.group0, 
            /* e1, e2, e3, e5 */
            float4((this.e321 * right_dual.e415) + (this.e1 * right_dual.e12345), (this.e321 * right_dual.e425) + (this.e2 * right_dual.e12345), (this.e321 * right_dual.e435) + (this.e3 * right_dual.e12345), -(this.e315 * right_dual.e425) - (this.e125 * right_dual.e435)) + float4((right_dual.group0.xyz.zxy * this.group0.yzx), this.e5 * right_dual.e12345) - float4((right_dual.group0.xyz.yzx * this.group0.zxy), this.e235 * right_dual.e415)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(other.e42 * anti_wedge.e3, other.e43 * anti_wedge.e1, other.e41 * anti_wedge.e2, -(other.e42 * anti_wedge.e315) - (other.e43 * anti_wedge.e125) - (other.e45 * anti_wedge.e321)) - float4((other.group0.xyz.zxy * anti_wedge.group1.yzx), other.e41 * anti_wedge.e235), 
            /* e415, e425, e435, e321 */
            float4(float3(0.0), -(other.e31 * anti_wedge.e2) - (other.e12 * anti_wedge.e3)) + float4((other.group0.xyz * anti_wedge.group1.www), other.scalar * anti_wedge.e321) - (other.group1.wwwx * anti_wedge.group1.xyzx), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.scalar) * anti_wedge.group0.xyz) + (float3(anti_wedge.e5) * other.group1.xyz) + (other.group2.zxy * anti_wedge.group1.yzx) - (other.group2.yzx * anti_wedge.group1.zxy)), other.scalar * anti_wedge.e5), 
            /* e1, e2, e3, e4 */
            float4(float3(1.0), 0.0) * float4(other.group2.www, 0.0) * float4(anti_wedge.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<AntiFlector> lhs, AntiDipoleInversion rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiFlector {
    public VersorEven anti_project_via_horizon_onto(AntiDipoleInversion other) {
        DipoleInversion right_dual = DipoleInversion(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiMotor anti_wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4(float3(0.0), (this.e2 * right_dual.e4315) + (this.e3 * right_dual.e4125) + (this.e5 * right_dual.e1234) - (this.e315 * right_dual.e42) - (this.e125 * right_dual.e43) - (this.e321 * right_dual.e45)) + float4((right_dual.group2.www * this.group0.xyz), this.e1 * right_dual.e4235) - float4((this.group0.www * right_dual.group3.xyz), this.e235 * right_dual.e41), 
            /* e15, e25, e35, e3215 */
            float4(((this.group0.yzx * right_dual.group3.zxy) - (this.group0.zxy * right_dual.group3.yzx)), 0.0)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(other.e4 * anti_wedge.e23, other.e4 * anti_wedge.e31, other.e4 * anti_wedge.e12, -(other.e423 * anti_wedge.e15) - (other.e431 * anti_wedge.e25) - (other.e412 * anti_wedge.e35) - (other.e415 * anti_wedge.e23) - (other.e425 * anti_wedge.e31) - (other.e435 * anti_wedge.e12)) + float4((other.group0.xyz * anti_wedge.group0.www), other.e4 * anti_wedge.e3215), 
            /* e415, e425, e435, e321 */
            float4(other.e4 * anti_wedge.e15, other.e4 * anti_wedge.e25, other.e4 * anti_wedge.e35, -(other.e1 * anti_wedge.e23) - (other.e2 * anti_wedge.e31) - (other.e3 * anti_wedge.e12)) + (float4(anti_wedge.scalar) * other.group1), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.e5) * anti_wedge.group0.xyz) + (float3(anti_wedge.scalar) * other.group2.xyz) + (other.group3.yzx * anti_wedge.group1.zxy) - (other.group3.zxy * anti_wedge.group1.yzx)), other.e5 * anti_wedge.scalar), 
            /* e1, e2, e3, e4 */
            float4(anti_wedge.scalar) * float4(other.group3.xyz, other.e4)
        );
    }
}
// Fancy infix trick (second half)
public AntiFlector operator /(AntiProjectViaHorizonOntoInfixPartial<AntiFlector> lhs, AntiDualNum rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiFlector {
    public AntiFlector anti_project_via_horizon_onto(AntiDualNum other) {
        DualNum right_dual = DualNum(
            /* e5, e12345 */
            other.group0.xy
        );
        AntiFlector anti_wedge = AntiFlector(
            /* e235, e315, e125, e321 */
            float4(right_dual.e12345) * this.group0, 
            /* e1, e2, e3, e5 */
            float4(right_dual.e12345) * this.group1
        );
        return AntiFlector(
            /* e235, e315, e125, e321 */
            float4(other.scalar) * anti_wedge.group0, 
            /* e1, e2, e3, e5 */
            float4(other.scalar) * anti_wedge.group1
        );
    }
}
// Fancy infix trick (second half)
public AntiFlatPoint operator /(AntiProjectViaHorizonOntoInfixPartial<AntiFlector> lhs, AntiFlatPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiFlector {
    public AntiFlatPoint anti_project_via_horizon_onto(AntiFlatPoint other) {
        return AntiFlatPoint(
            /* e235, e315, e125, e321 */
            float4(other.e321 * this.e321) * other.group0
        );
    }
}
// Fancy infix trick (second half)
public AntiFlector operator /(AntiProjectViaHorizonOntoInfixPartial<AntiFlector> lhs, AntiFlector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiFlector {
    public AntiFlector anti_project_via_horizon_onto(AntiFlector other) {
        Flector right_dual = Flector(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiMotor anti_wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4((this.group0.www * right_dual.group1.xyz * float3(-1.0)), (this.e1 * right_dual.e4235) + (this.e2 * right_dual.e4315) + (this.e3 * right_dual.e4125) - (this.e321 * right_dual.e45)), 
            /* e15, e25, e35, e3215 */
            float4(((this.group0.yzx * right_dual.group1.zxy) - (this.group0.zxy * right_dual.group1.yzx)), 0.0)
        );
        return AntiFlector(
            /* e235, e315, e125, e321 */
            float4((other.e2 * anti_wedge.e35) + (other.e5 * anti_wedge.e23), (other.e3 * anti_wedge.e15) + (other.e5 * anti_wedge.e31), (other.e1 * anti_wedge.e25) + (other.e5 * anti_wedge.e12), -(other.e2 * anti_wedge.e31) - (other.e3 * anti_wedge.e12)) + (float4(anti_wedge.scalar) * other.group0) - (other.group1.zxyx * float4(anti_wedge.group1.yzx, anti_wedge.e23)), 
            /* e1, e2, e3, e5 */
            float4(anti_wedge.scalar) * other.group1
        );
    }
}
// Fancy infix trick (second half)
public AntiFlatPoint operator /(AntiProjectViaHorizonOntoInfixPartial<AntiFlector> lhs, AntiLine rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiFlector {
    public AntiFlatPoint anti_project_via_horizon_onto(AntiLine other) {
        Line right_dual = Line(
            /* e415, e425, e435 */
            other.group0.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group1.xyz * float3(-1.0)
        );
        AntiPlane anti_wedge = AntiPlane(
            /* e1, e2, e3, e5 */
            float4((float3(this.e321) * right_dual.group0.xyz), -(this.e235 * right_dual.e415) - (this.e315 * right_dual.e425) - (this.e125 * right_dual.e435))
        );
        return AntiFlatPoint(
            /* e235, e315, e125, e321 */
            float4((other.e23 * anti_wedge.e5) + (other.e35 * anti_wedge.e2), (other.e31 * anti_wedge.e5) + (other.e15 * anti_wedge.e3), (other.e12 * anti_wedge.e5) + (other.e25 * anti_wedge.e1), -(other.e31 * anti_wedge.e2) - (other.e12 * anti_wedge.e3)) - (anti_wedge.group0.zxyx * float4(other.group1.xyz.yzx, other.e23))
        );
    }
}
// Fancy infix trick (second half)
public AntiFlector operator /(AntiProjectViaHorizonOntoInfixPartial<AntiFlector> lhs, AntiMotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiFlector {
    public AntiFlector anti_project_via_horizon_onto(AntiMotor other) {
        Motor right_dual = Motor(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiFlector anti_wedge = AntiFlector(
            /* e235, e315, e125, e321 */
            float4(right_dual.e12345) * this.group0, 
            /* e1, e2, e3, e5 */
            float4(this.e1 * right_dual.e12345, this.e2 * right_dual.e12345, this.e3 * right_dual.e12345, -(this.e235 * right_dual.e415) - (this.e315 * right_dual.e425) - (this.e125 * right_dual.e435)) + (right_dual.group0 * float4(this.group0.www, this.e5))
        );
        return AntiFlector(
            /* e235, e315, e125, e321 */
            float4((anti_wedge.e2 * other.e35) + (anti_wedge.e5 * other.e23), (anti_wedge.e3 * other.e15) + (anti_wedge.e5 * other.e31), (anti_wedge.e1 * other.e25) + (anti_wedge.e5 * other.e12), -(anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12)) + (float4(other.scalar) * anti_wedge.group0) - (anti_wedge.group1.zxyx * float4(other.group1.yzx, other.e23)), 
            /* e1, e2, e3, e5 */
            float4(other.scalar) * anti_wedge.group1
        );
    }
}
// Fancy infix trick (second half)
public AntiFlector operator /(AntiProjectViaHorizonOntoInfixPartial<AntiFlector> lhs, AntiPlane rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiFlector {
    public AntiFlector anti_project_via_horizon_onto(AntiPlane other) {
        Plane right_dual = Plane(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiMotor anti_wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4((this.group0.www * right_dual.group0.xyz * float3(-1.0)), (this.e1 * right_dual.e4235) + (this.e2 * right_dual.e4315) + (this.e3 * right_dual.e4125)), 
            /* e15, e25, e35, e3215 */
            float4(((this.group0.yzx * right_dual.group0.zxy) - (this.group0.zxy * right_dual.group0.yzx)), 0.0)
        );
        return AntiFlector(
            /* e235, e315, e125, e321 */
            float4((anti_wedge.e23 * other.e5) + (anti_wedge.e35 * other.e2), (anti_wedge.e31 * other.e5) + (anti_wedge.e15 * other.e3), (anti_wedge.e12 * other.e5) + (anti_wedge.e25 * other.e1), -(anti_wedge.e31 * other.e2) - (anti_wedge.e12 * other.e3)) - (other.group0.zxyx * float4(anti_wedge.group1.yzx, anti_wedge.e23)), 
            /* e1, e2, e3, e5 */
            float4(anti_wedge.scalar) * other.group0
        );
    }
}
// Fancy infix trick (second half)
public Circle operator /(AntiProjectViaHorizonOntoInfixPartial<AntiFlector> lhs, Circle rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiFlector {
    public Circle anti_project_via_horizon_onto(Circle other) {
        Dipole right_dual = Dipole(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35 */
            other.group2.xyz
        );
        Scalar anti_wedge = Scalar(
            /* scalar */
            -(this.e235 * right_dual.e41) - (this.e315 * right_dual.e42) - (this.e125 * right_dual.e43) - (this.e321 * right_dual.e45)
        );
        return Circle(
            /* e423, e431, e412 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(anti_wedge.scalar) * other.group1, 
            /* e235, e315, e125 */
            float3(anti_wedge.scalar) * other.group2.xyz
        );
    }
}
// Fancy infix trick (second half)
public CircleRotor operator /(AntiProjectViaHorizonOntoInfixPartial<AntiFlector> lhs, CircleRotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiFlector {
    public CircleRotor anti_project_via_horizon_onto(CircleRotor other) {
        AntiCircleRotor right_dual = AntiCircleRotor(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        Scalar anti_wedge = Scalar(
            /* scalar */
            -(right_dual.e41 * this.e235) - (right_dual.e42 * this.e315) - (right_dual.e43 * this.e125) - (right_dual.e45 * this.e321)
        );
        return CircleRotor(
            /* e423, e431, e412 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(anti_wedge.scalar) * other.group1, 
            /* e235, e315, e125, e12345 */
            float4(anti_wedge.scalar) * other.group2
        );
    }
}
// Fancy infix trick (second half)
public Circle operator /(AntiProjectViaHorizonOntoInfixPartial<AntiFlector> lhs, Dipole rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiFlector {
    public Circle anti_project_via_horizon_onto(Dipole other) {
        Circle right_dual = Circle(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125 */
            other.group2.xyz * float3(-1.0)
        );
        AntiPlane anti_wedge = AntiPlane(
            /* e1, e2, e3, e5 */
            float4((this.e315 * right_dual.e412) + (this.e321 * right_dual.e415), (this.e125 * right_dual.e423) + (this.e321 * right_dual.e425), (this.e235 * right_dual.e431) + (this.e321 * right_dual.e435), -(this.e315 * right_dual.e425) - (this.e125 * right_dual.e435)) - float4((right_dual.group0.xyz.yzx * this.group0.zxy), this.e235 * right_dual.e415)
        );
        return Circle(
            /* e423, e431, e412 */
            (other.group0.xyz.yzx * anti_wedge.group0.zxy) - (other.group0.xyz.zxy * anti_wedge.group0.yzx), 
            /* e415, e425, e435, e321 */
            float4(anti_wedge.e5 * other.e41, anti_wedge.e5 * other.e42, anti_wedge.e5 * other.e43, -(anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12)) - (anti_wedge.group0.xyzx * other.group1.wwwx), 
            /* e235, e315, e125 */
            (float3(anti_wedge.e5) * other.group1.xyz) + (other.group2.xyz.zxy * anti_wedge.group0.yzx) - (other.group2.xyz.yzx * anti_wedge.group0.zxy)
        );
    }
}
// Fancy infix trick (second half)
public CircleRotor operator /(AntiProjectViaHorizonOntoInfixPartial<AntiFlector> lhs, DipoleInversion rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiFlector {
    public CircleRotor anti_project_via_horizon_onto(DipoleInversion other) {
        AntiDipoleInversion right_dual = AntiDipoleInversion(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiPlane anti_wedge = AntiPlane(
            /* e1, e2, e3, e5 */
            float4((right_dual.e412 * this.e315) + (right_dual.e415 * this.e321), (right_dual.e423 * this.e125) + (right_dual.e425 * this.e321), (right_dual.e431 * this.e235) + (right_dual.e435 * this.e321), -(right_dual.e425 * this.e315) - (right_dual.e435 * this.e125)) - (this.group0.zxyx * float4(right_dual.group0.xyz.yzx, right_dual.e415))
        );
        return CircleRotor(
            /* e423, e431, e412 */
            (other.group0.xyz.yzx * anti_wedge.group0.zxy) - (other.group0.xyz.zxy * anti_wedge.group0.yzx), 
            /* e415, e425, e435, e321 */
            float4(anti_wedge.e5 * other.e41, anti_wedge.e5 * other.e42, anti_wedge.e5 * other.e43, -(anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12)) - (anti_wedge.group0.xyzx * other.group1.wwwx), 
            /* e235, e315, e125, e12345 */
            float4(anti_wedge.e3 * other.e25 * -1.0, anti_wedge.e1 * other.e35 * -1.0, anti_wedge.e2 * other.e15 * -1.0, (anti_wedge.e3 * other.e4125) + (anti_wedge.e5 * other.e1234)) + (anti_wedge.group0.yzxx * float4(other.group2.zxy, other.e4235)) + (anti_wedge.group0.wwwy * float4(other.group1.xyz, other.e4315))
        );
    }
}
// Fancy infix trick (second half)
public MultiVector operator /(AntiProjectViaHorizonOntoInfixPartial<AntiFlector> lhs, MultiVector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiFlector {
    public MultiVector anti_project_via_horizon_onto(MultiVector other) {
        MultiVector right_dual = MultiVector(
            /* scalar, e12345 */
            other.group0.xy.yx * float2(-1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215, 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43 */
            other.group7.xyz, 
            /* e23, e31, e12 */
            other.group6.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412 */
            other.group4.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group3.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        MultiVector anti_wedge = MultiVector(
            /* scalar, e12345 */
            float2((this.e1 * right_dual.e4235) + (this.e2 * right_dual.e4315) + (this.e3 * right_dual.e4125) + (this.e5 * right_dual.e1234) - (this.e235 * right_dual.e41) - (this.e315 * right_dual.e42) - (this.e125 * right_dual.e43) - (this.e321 * right_dual.e45), 0.0), 
            /* e1, e2, e3, e4 */
            float4((float3(this.e321) * right_dual.group6.xyz), 0.0) + float4((float3(right_dual.e12345) * this.group1.xyz), 0.0) + float4((right_dual.group7.xyz.zxy * this.group0.yzx), 0.0) - float4((right_dual.group7.xyz.yzx * this.group0.zxy), 0.0), 
            /* e5 */
            (this.e5 * right_dual.e12345) - (this.e235 * right_dual.e415) - (this.e315 * right_dual.e425) - (this.e125 * right_dual.e435), 
            /* e15, e25, e35, e45 */
            float4(((this.group0.yzx * right_dual.group9.zxy) - (this.group0.zxy * right_dual.group9.yzx)), 0.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            (float3(right_dual.e1234) * this.group0.xyz) - (float3(this.e321) * right_dual.group9.xyz), 
            /* e415, e425, e435, e321 */
            float4(float3(0.0), this.e321 * right_dual.e12345), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            float3(right_dual.e12345) * this.group0.xyz, 
            /* e4235, e4315, e4125, e3215 */
            float4(0.0), 
            /* e1234 */
            0.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(anti_wedge.scalar * other.scalar, (anti_wedge.scalar * other.e12345) + (anti_wedge.e12345 * other.scalar) + (anti_wedge.e1 * other.e4235) + (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) + (anti_wedge.e4 * other.e3215) + (anti_wedge.e5 * other.e1234) + (anti_wedge.e4235 * other.e1) + (anti_wedge.e4315 * other.e2) + (anti_wedge.e4125 * other.e3) + (anti_wedge.e3215 * other.e4) + (anti_wedge.e1234 * other.e5) - (anti_wedge.e15 * other.e423) - (anti_wedge.e25 * other.e431) - (anti_wedge.e35 * other.e412) - (anti_wedge.e45 * other.e321) - (anti_wedge.e41 * other.e235) - (anti_wedge.e42 * other.e315) - (anti_wedge.e43 * other.e125) - (anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435) - (anti_wedge.e415 * other.e23) - (anti_wedge.e425 * other.e31) - (anti_wedge.e435 * other.e12) - (anti_wedge.e321 * other.e45) - (anti_wedge.e423 * other.e15) - (anti_wedge.e431 * other.e25) - (anti_wedge.e412 * other.e35) - (anti_wedge.e235 * other.e41) - (anti_wedge.e315 * other.e42) - (anti_wedge.e125 * other.e43)), 
            /* e1, e2, e3, e4 */
            (float4(anti_wedge.scalar) * other.group1) + (float4(other.scalar) * anti_wedge.group1), 
            /* e5 */
            (anti_wedge.scalar * other.e5) + (anti_wedge.e5 * other.scalar), 
            /* e15, e25, e35, e45 */
            (float4(anti_wedge.scalar) * other.group3) + (float4(anti_wedge.e5) * other.group1) + (float4(other.scalar) * anti_wedge.group3) - (float4(other.e5) * anti_wedge.group1), 
            /* e41, e42, e43 */
            (float3(anti_wedge.scalar) * other.group4.xyz) + (float3(other.scalar) * anti_wedge.group4.xyz) + (float3(other.e4) * anti_wedge.group1.xyz) - (float3(anti_wedge.e4) * other.group1.xyz), 
            /* e23, e31, e12 */
            (float3(anti_wedge.scalar) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group5.xyz) + (anti_wedge.group1.zxy * other.group1.yzx) - (anti_wedge.group1.yzx * other.group1.zxy), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e4 * other.e15) + (anti_wedge.e5 * other.e41) + (anti_wedge.e15 * other.e4) + (anti_wedge.e41 * other.e5), (anti_wedge.e4 * other.e25) + (anti_wedge.e5 * other.e42) + (anti_wedge.e25 * other.e4) + (anti_wedge.e42 * other.e5), (anti_wedge.e4 * other.e35) + (anti_wedge.e5 * other.e43) + (anti_wedge.e35 * other.e4) + (anti_wedge.e43 * other.e5), -(anti_wedge.e1 * other.e23) - (anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12) - (anti_wedge.e12 * other.e3)) + (float4(anti_wedge.scalar) * other.group6) + (float4(other.scalar) * anti_wedge.group6) - (other.group1.xyzy * float4(anti_wedge.group3.www, anti_wedge.e31)) - float4((other.group3.www * anti_wedge.group1.xyz), anti_wedge.e23 * other.e1), 
            /* e423, e431, e412 */
            (float3(anti_wedge.scalar) * other.group7.xyz) + (float3(anti_wedge.e4) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group7.xyz) + (float3(other.e4) * anti_wedge.group5.xyz) + (anti_wedge.group4.xyz.yzx * other.group1.zxy) + (other.group4.xyz.yzx * anti_wedge.group1.zxy) - (anti_wedge.group4.xyz.zxy * other.group1.yzx) - (other.group4.xyz.zxy * anti_wedge.group1.yzx), 
            /* e235, e315, e125 */
            (float3(anti_wedge.scalar) * other.group8.xyz) + (float3(anti_wedge.e5) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group8.xyz) + (float3(other.e5) * anti_wedge.group5.xyz) + (anti_wedge.group1.yzx * other.group3.zxy) + (anti_wedge.group3.zxy * other.group1.yzx) - (anti_wedge.group1.zxy * other.group3.yzx) - (anti_wedge.group3.yzx * other.group1.zxy), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e2 * other.e435) + (anti_wedge.e5 * other.e423) + (anti_wedge.e45 * other.e23) + (anti_wedge.e425 * other.e3), (anti_wedge.e3 * other.e415) + (anti_wedge.e5 * other.e431) + (anti_wedge.e45 * other.e31) + (anti_wedge.e435 * other.e1), (anti_wedge.e1 * other.e425) + (anti_wedge.e5 * other.e412) + (anti_wedge.e45 * other.e12) + (anti_wedge.e415 * other.e2), -(anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12) - (anti_wedge.e321 * other.e5)) + (float4(anti_wedge.scalar) * other.group9) + (float4(other.scalar) * anti_wedge.group9) + float4((anti_wedge.group5.xyz * other.group3.www), anti_wedge.e2 * other.e315) + float4((anti_wedge.group8.xyz * other.group1.www), anti_wedge.e3 * other.e125) + float4((anti_wedge.group4.xyz.yzx * other.group3.zxy), anti_wedge.e1 * other.e235) + float4((other.group4.xyz.yzx * anti_wedge.group3.zxy), anti_wedge.e5 * other.e321) - (other.group1.yzxz * float4(anti_wedge.group6.zxy, anti_wedge.e125)) - (other.group3.yzxx * float4(anti_wedge.group4.xyz.zxy, anti_wedge.e23)) - float4((float3(other.e5) * anti_wedge.group7.xyz), anti_wedge.e31 * other.e25) - float4((other.group8.xyz * anti_wedge.group1.www), anti_wedge.e235 * other.e1) - float4((other.group4.xyz.zxy * anti_wedge.group3.yzx), anti_wedge.e12 * other.e35) - float4((anti_wedge.group1.zxy * other.group6.yzx), anti_wedge.e315 * other.e2), 
            /* e1234 */
            (anti_wedge.scalar * other.e1234) + (anti_wedge.e321 * other.e4) + (anti_wedge.e423 * other.e1) + (anti_wedge.e431 * other.e2) + (anti_wedge.e412 * other.e3) + (anti_wedge.e1234 * other.scalar) - (anti_wedge.e1 * other.e423) - (anti_wedge.e2 * other.e431) - (anti_wedge.e3 * other.e412) - (anti_wedge.e4 * other.e321) - (anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12) - (anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)
        );
    }
}
// Fancy infix trick (second half)
public AntiDipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<AntiFlector> lhs, RoundPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiFlector {
    public AntiDipoleInversion anti_project_via_horizon_onto(RoundPoint other) {
        Sphere right_dual = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        AntiMotor anti_wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4(this.e321 * right_dual.e4235 * -1.0, this.e321 * right_dual.e4315 * -1.0, this.e321 * right_dual.e4125 * -1.0, (this.e2 * right_dual.e4315) + (this.e3 * right_dual.e4125) + (this.e5 * right_dual.e1234)) + float4((float3(right_dual.e1234) * this.group0.xyz), this.e1 * right_dual.e4235), 
            /* e15, e25, e35, e3215 */
            float4(((this.group0.yzx * right_dual.group0.zxy) - (this.group0.zxy * right_dual.group0.yzx)), 0.0)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(other.e4) * anti_wedge.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4((float3(other.e4) * anti_wedge.group1.xyz), -(anti_wedge.e23 * other.e1) - (anti_wedge.e31 * other.e2) - (anti_wedge.e12 * other.e3)), 
            /* e235, e315, e125, e4 */
            float4(((float3(other.e5) * anti_wedge.group0.xyz) + (anti_wedge.group1.zxy * other.group0.yzx) - (anti_wedge.group1.yzx * other.group0.zxy)), anti_wedge.scalar * other.e4), 
            /* e1, e2, e3, e5 */
            float4(anti_wedge.scalar) * float4(other.group0.xyz, other.e5)
        );
    }
}
// Fancy infix trick (second half)
public AntiFlector operator /(AntiProjectViaHorizonOntoInfixPartial<AntiFlector> lhs, Scalar rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiFlector {
    public AntiFlector anti_project_via_horizon_onto(Scalar other) {
        AntiScalar right_dual = AntiScalar(
            /* e12345 */
            other.scalar
        );
        AntiFlector anti_wedge = AntiFlector(
            /* e235, e315, e125, e321 */
            float4(right_dual.e12345) * this.group0, 
            /* e1, e2, e3, e5 */
            float4(right_dual.e12345) * this.group1
        );
        return AntiFlector(
            /* e235, e315, e125, e321 */
            float4(other.scalar) * anti_wedge.group0, 
            /* e1, e2, e3, e5 */
            float4(other.scalar) * anti_wedge.group1
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<AntiFlector> lhs, VersorEven rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiFlector {
    public VersorEven anti_project_via_horizon_onto(VersorEven other) {
        VersorOdd right_dual = VersorOdd(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiMotor anti_wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4(float3(0.0), (this.e2 * right_dual.e4315) + (this.e3 * right_dual.e4125) + (this.e5 * right_dual.e1234) - (this.e315 * right_dual.e42) - (this.e125 * right_dual.e43) - (this.e321 * right_dual.e45)) + float4((right_dual.group2.www * this.group0.xyz), this.e1 * right_dual.e4235) - (this.group0.wwwx * float4(right_dual.group3.xyz, right_dual.e41)), 
            /* e15, e25, e35, e3215 */
            float4(((this.group0.yzx * right_dual.group3.zxy) - (this.group0.zxy * right_dual.group3.yzx)), 0.0)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            (anti_wedge.group0 * float4(other.group3.www, other.e12345)) + float4(float3(0.0), -(anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435) - (anti_wedge.e15 * other.e423) - (anti_wedge.e25 * other.e431) - (anti_wedge.e35 * other.e412)) + float4((anti_wedge.group0.www * other.group0.xyz), anti_wedge.e3215 * other.e4), 
            /* e415, e425, e435, e321 */
            float4(anti_wedge.e15 * other.e4, anti_wedge.e25 * other.e4, anti_wedge.e35 * other.e4, -(anti_wedge.e23 * other.e1) - (anti_wedge.e31 * other.e2) - (anti_wedge.e12 * other.e3)) + (float4(anti_wedge.scalar) * other.group1), 
            /* e235, e315, e125, e5 */
            float4(((float3(anti_wedge.scalar) * other.group2.xyz) + (float3(other.e5) * anti_wedge.group0.xyz) + (anti_wedge.group1.zxy * other.group3.yzx) - (anti_wedge.group1.yzx * other.group3.zxy)), anti_wedge.scalar * other.e5), 
            /* e1, e2, e3, e4 */
            float4(anti_wedge.scalar) * other.group3
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<AntiFlector> lhs, VersorOdd rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiFlector {
    public VersorEven anti_project_via_horizon_onto(VersorOdd other) {
        VersorEven right_dual = VersorEven(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiFlector anti_wedge = AntiFlector(
            /* e235, e315, e125, e321 */
            float4(right_dual.e12345) * this.group0, 
            /* e1, e2, e3, e5 */
            float4((this.e321 * right_dual.e415) + (this.e1 * right_dual.e12345), (this.e321 * right_dual.e425) + (this.e2 * right_dual.e12345), (this.e321 * right_dual.e435) + (this.e3 * right_dual.e12345), -(this.e315 * right_dual.e425) - (this.e125 * right_dual.e435)) + (right_dual.group0.zxyw * float4(this.group0.yzx, this.e5)) - (this.group0.zxyx * float4(right_dual.group0.yzx, right_dual.e415))
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            (anti_wedge.group1.zxyx * float4(other.group0.yzx, other.e4235)) + float4(float3(0.0), (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) + (anti_wedge.e5 * other.e1234) - (anti_wedge.e315 * other.e42) - (anti_wedge.e125 * other.e43) - (anti_wedge.e321 * other.e45)) - (other.group0.zxyx * float4(anti_wedge.group1.yzx, anti_wedge.e235)), 
            /* e415, e425, e435, e321 */
            (other.group0 * float4(anti_wedge.group1.www, anti_wedge.e321)) + float4(float3(0.0), -(anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12)) - (anti_wedge.group1.xyzx * other.group1.wwwx), 
            /* e235, e315, e125, e5 */
            float4(((float3(anti_wedge.e5) * other.group1.xyz) + (float3(other.scalar) * anti_wedge.group0.xyz) + (anti_wedge.group1.yzx * other.group2.zxy) - (anti_wedge.group1.zxy * other.group2.yzx)), anti_wedge.e5 * other.scalar), 
            /* e1, e2, e3, e4 */
            float4(float3(1.0), 0.0) * float4(other.group0.www, 0.0) * float4(anti_wedge.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
    }
}
// Fancy infix trick (first half)
public AntiProjectViaHorizonOntoInfixPartial<AntiLine> operator /(AntiLine lhs, AntiProjectViaHorizonOntoInfix rhs) {
    return AntiProjectViaHorizonOntoInfixPartial<AntiLine>(lhs);
}
// Fancy infix trick (second half)
public VersorOdd operator /(AntiProjectViaHorizonOntoInfixPartial<AntiLine> lhs, AntiCircleRotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiLine {
    public VersorOdd anti_project_via_horizon_onto(AntiCircleRotor other) {
        CircleRotor right_dual = CircleRotor(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiMotor anti_wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4((float3(right_dual.e12345) * this.group0.xyz), -(this.e23 * right_dual.e415) - (this.e31 * right_dual.e425) - (this.e12 * right_dual.e435) - (this.e15 * right_dual.e423) - (this.e25 * right_dual.e431) - (this.e35 * right_dual.e412)), 
            /* e15, e25, e35, e3215 */
            float4(float3(1.0), 0.0) * float4(this.group1.xyz, 0.0) * float4(right_dual.group2.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(anti_wedge.scalar) * float4(other.group0.xyz, other.scalar), 
            /* e23, e31, e12, e45 */
            float4(((float3(other.scalar) * anti_wedge.group0.xyz) + (float3(anti_wedge.scalar) * other.group1.xyz)), other.e45 * anti_wedge.scalar), 
            /* e15, e25, e35, e1234 */
            float4((other.e15 * anti_wedge.scalar) + (other.scalar * anti_wedge.e15), (other.e25 * anti_wedge.scalar) + (other.scalar * anti_wedge.e25), (other.e35 * anti_wedge.scalar) + (other.scalar * anti_wedge.e35), -(other.e41 * anti_wedge.e23) - (other.e42 * anti_wedge.e31) - (other.e43 * anti_wedge.e12)), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.e45 * anti_wedge.e23, other.e45 * anti_wedge.e31, other.e45 * anti_wedge.e12, -(other.e31 * anti_wedge.e25) - (other.e12 * anti_wedge.e35) - (other.e15 * anti_wedge.e23) - (other.e25 * anti_wedge.e31) - (other.e35 * anti_wedge.e12)) + (anti_wedge.group1.zxyw * float4(other.group0.xyz.yzx, other.scalar)) - (anti_wedge.group1.yzxx * float4(other.group0.xyz.zxy, other.e23))
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<AntiLine> lhs, AntiDipoleInversion rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiLine {
    public DipoleInversion anti_project_via_horizon_onto(AntiDipoleInversion other) {
        DipoleInversion right_dual = DipoleInversion(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiPlane anti_wedge = AntiPlane(
            /* e1, e2, e3, e5 */
            float4(-(this.e12 * right_dual.e4315) - (this.e15 * right_dual.e1234), -(this.e23 * right_dual.e4125) - (this.e25 * right_dual.e1234), -(this.e31 * right_dual.e4235) - (this.e35 * right_dual.e1234), (this.e25 * right_dual.e4315) + (this.e35 * right_dual.e4125)) + (right_dual.group3.zxyx * float4(this.group0.xyz.yzx, this.e15))
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            float3(other.e4) * anti_wedge.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(((other.group3.yzx * anti_wedge.group0.zxy) - (other.group3.zxy * anti_wedge.group0.yzx)), other.e4 * anti_wedge.e5), 
            /* e15, e25, e35, e1234 */
            float4(other.e1 * anti_wedge.e5, other.e2 * anti_wedge.e5, other.e3 * anti_wedge.e5, -(other.e431 * anti_wedge.e2) - (other.e412 * anti_wedge.e3)) - (anti_wedge.group0.xyzx * float4(other.group3.www, other.e423)), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.e425 * anti_wedge.e3 * -1.0, other.e435 * anti_wedge.e1 * -1.0, other.e415 * anti_wedge.e2 * -1.0, (other.e315 * anti_wedge.e2) + (other.e125 * anti_wedge.e3)) + (float4(anti_wedge.e5) * float4(other.group0.xyz, other.e321)) + (anti_wedge.group0.yzxx * float4(other.group1.zxy, other.e235))
        );
    }
}
// Fancy infix trick (second half)
public AntiLine operator /(AntiProjectViaHorizonOntoInfixPartial<AntiLine> lhs, AntiDualNum rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiLine {
    public AntiLine anti_project_via_horizon_onto(AntiDualNum other) {
        DualNum right_dual = DualNum(
            /* e5, e12345 */
            other.group0.xy
        );
        AntiLine anti_wedge = AntiLine(
            /* e23, e31, e12 */
            float3(right_dual.e12345) * this.group0.xyz, 
            /* e15, e25, e35 */
            float3(right_dual.e12345) * this.group1.xyz
        );
        return AntiLine(
            /* e23, e31, e12 */
            float3(other.scalar) * anti_wedge.group0.xyz, 
            /* e15, e25, e35 */
            float3(other.scalar) * anti_wedge.group1.xyz
        );
    }
}
// Fancy infix trick (second half)
public AntiMotor operator /(AntiProjectViaHorizonOntoInfixPartial<AntiLine> lhs, AntiFlector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiLine {
    public AntiMotor anti_project_via_horizon_onto(AntiFlector other) {
        Flector right_dual = Flector(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiPlane anti_wedge = AntiPlane(
            /* e1, e2, e3, e5 */
            float4(this.e12 * right_dual.e4315 * -1.0, this.e23 * right_dual.e4125 * -1.0, this.e31 * right_dual.e4235 * -1.0, (this.e25 * right_dual.e4315) + (this.e35 * right_dual.e4125)) + (right_dual.group1.zxyx * float4(this.group0.xyz.yzx, this.e15))
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4(((other.group1.yzx * anti_wedge.group0.zxy) - (other.group1.zxy * anti_wedge.group0.yzx)), 0.0), 
            /* e15, e25, e35, e3215 */
            float4(other.e5 * anti_wedge.e1 * -1.0, other.e5 * anti_wedge.e2 * -1.0, other.e5 * anti_wedge.e3 * -1.0, (other.e315 * anti_wedge.e2) + (other.e125 * anti_wedge.e3) + (other.e321 * anti_wedge.e5)) + (anti_wedge.group0.wwwx * float4(other.group1.xyz, other.e235))
        );
    }
}
// Fancy infix trick (second half)
public AntiLine operator /(AntiProjectViaHorizonOntoInfixPartial<AntiLine> lhs, AntiLine rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiLine {
    public AntiLine anti_project_via_horizon_onto(AntiLine other) {
        Line right_dual = Line(
            /* e415, e425, e435 */
            other.group0.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group1.xyz * float3(-1.0)
        );
        Scalar anti_wedge = Scalar(
            /* scalar */
            -(this.e23 * right_dual.e415) - (this.e31 * right_dual.e425) - (this.e12 * right_dual.e435)
        );
        return AntiLine(
            /* e23, e31, e12 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e15, e25, e35 */
            float3(anti_wedge.scalar) * other.group1.xyz
        );
    }
}
// Fancy infix trick (second half)
public AntiMotor operator /(AntiProjectViaHorizonOntoInfixPartial<AntiLine> lhs, AntiMotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiLine {
    public AntiMotor anti_project_via_horizon_onto(AntiMotor other) {
        Motor right_dual = Motor(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiMotor anti_wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4((float3(right_dual.e12345) * this.group0.xyz), -(this.e23 * right_dual.e415) - (this.e31 * right_dual.e425) - (this.e12 * right_dual.e435)), 
            /* e15, e25, e35, e3215 */
            float4(float3(1.0), 0.0) * float4(this.group1.xyz, 0.0) * float4(right_dual.group0.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4(((float3(anti_wedge.scalar) * other.group0.xyz) + (float3(other.scalar) * anti_wedge.group0.xyz)), anti_wedge.scalar * other.scalar), 
            /* e15, e25, e35, e3215 */
            (float4(anti_wedge.scalar) * other.group1) + (float4(other.scalar) * anti_wedge.group1) + float4(float3(0.0), -(anti_wedge.e23 * other.e15) - (anti_wedge.e31 * other.e25) - (anti_wedge.e12 * other.e35) - (anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12))
        );
    }
}
// Fancy infix trick (second half)
public AntiLine operator /(AntiProjectViaHorizonOntoInfixPartial<AntiLine> lhs, AntiPlane rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiLine {
    public AntiLine anti_project_via_horizon_onto(AntiPlane other) {
        Plane right_dual = Plane(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiPlane anti_wedge = AntiPlane(
            /* e1, e2, e3, e5 */
            float4(this.e12 * right_dual.e4315 * -1.0, this.e23 * right_dual.e4125 * -1.0, this.e31 * right_dual.e4235 * -1.0, (this.e25 * right_dual.e4315) + (this.e35 * right_dual.e4125)) + (right_dual.group0.zxyx * float4(this.group0.xyz.yzx, this.e15))
        );
        return AntiLine(
            /* e23, e31, e12 */
            (anti_wedge.group0.zxy * other.group0.yzx) - (anti_wedge.group0.yzx * other.group0.zxy), 
            /* e15, e25, e35 */
            (float3(anti_wedge.e5) * other.group0.xyz) - (float3(other.e5) * anti_wedge.group0.xyz)
        );
    }
}
// Fancy infix trick (second half)
public Dipole operator /(AntiProjectViaHorizonOntoInfixPartial<AntiLine> lhs, Dipole rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiLine {
    public Dipole anti_project_via_horizon_onto(Dipole other) {
        Circle right_dual = Circle(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125 */
            other.group2.xyz * float3(-1.0)
        );
        Scalar anti_wedge = Scalar(
            /* scalar */
            -(this.e23 * right_dual.e415) - (this.e31 * right_dual.e425) - (this.e12 * right_dual.e435) - (this.e15 * right_dual.e423) - (this.e25 * right_dual.e431) - (this.e35 * right_dual.e412)
        );
        return Dipole(
            /* e41, e42, e43 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(anti_wedge.scalar) * other.group1, 
            /* e15, e25, e35 */
            float3(anti_wedge.scalar) * other.group2.xyz
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<AntiLine> lhs, DipoleInversion rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiLine {
    public DipoleInversion anti_project_via_horizon_onto(DipoleInversion other) {
        AntiDipoleInversion right_dual = AntiDipoleInversion(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        Scalar anti_wedge = Scalar(
            /* scalar */
            -(right_dual.e423 * this.e15) - (right_dual.e431 * this.e25) - (right_dual.e412 * this.e35) - (right_dual.e415 * this.e23) - (right_dual.e425 * this.e31) - (right_dual.e435 * this.e12)
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(anti_wedge.scalar) * other.group1, 
            /* e15, e25, e35, e1234 */
            float4(anti_wedge.scalar) * other.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(anti_wedge.scalar) * other.group3
        );
    }
}
// Fancy infix trick (second half)
public MultiVector operator /(AntiProjectViaHorizonOntoInfixPartial<AntiLine> lhs, MultiVector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiLine {
    public MultiVector anti_project_via_horizon_onto(MultiVector other) {
        MultiVector right_dual = MultiVector(
            /* scalar, e12345 */
            other.group0.xy.yx * float2(-1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215, 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43 */
            other.group7.xyz, 
            /* e23, e31, e12 */
            other.group6.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412 */
            other.group4.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group3.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        MultiVector anti_wedge = MultiVector(
            /* scalar, e12345 */
            float2(-(this.e23 * right_dual.e415) - (this.e31 * right_dual.e425) - (this.e12 * right_dual.e435) - (this.e15 * right_dual.e423) - (this.e25 * right_dual.e431) - (this.e35 * right_dual.e412), 0.0), 
            /* e1, e2, e3, e4 */
            float4((this.group0.xyz.yzx * right_dual.group9.zxy), 0.0) - float4((float3(right_dual.e1234) * this.group1.xyz), 0.0) - float4((this.group0.xyz.zxy * right_dual.group9.yzx), 0.0), 
            /* e5 */
            (this.e15 * right_dual.e4235) + (this.e25 * right_dual.e4315) + (this.e35 * right_dual.e4125), 
            /* e15, e25, e35, e45 */
            float4(right_dual.group0.xy.yy, right_dual.e12345, 0.0) * float4(float3(1.0), 0.0) * float4(this.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(right_dual.e12345) * this.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(0.0), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            float3(0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(0.0), 
            /* e1234 */
            0.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(anti_wedge.scalar * other.scalar, (anti_wedge.scalar * other.e12345) + (anti_wedge.e12345 * other.scalar) + (anti_wedge.e1 * other.e4235) + (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) + (anti_wedge.e4 * other.e3215) + (anti_wedge.e5 * other.e1234) + (anti_wedge.e4235 * other.e1) + (anti_wedge.e4315 * other.e2) + (anti_wedge.e4125 * other.e3) + (anti_wedge.e3215 * other.e4) + (anti_wedge.e1234 * other.e5) - (anti_wedge.e15 * other.e423) - (anti_wedge.e25 * other.e431) - (anti_wedge.e35 * other.e412) - (anti_wedge.e45 * other.e321) - (anti_wedge.e41 * other.e235) - (anti_wedge.e42 * other.e315) - (anti_wedge.e43 * other.e125) - (anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435) - (anti_wedge.e415 * other.e23) - (anti_wedge.e425 * other.e31) - (anti_wedge.e435 * other.e12) - (anti_wedge.e321 * other.e45) - (anti_wedge.e423 * other.e15) - (anti_wedge.e431 * other.e25) - (anti_wedge.e412 * other.e35) - (anti_wedge.e235 * other.e41) - (anti_wedge.e315 * other.e42) - (anti_wedge.e125 * other.e43)), 
            /* e1, e2, e3, e4 */
            (float4(anti_wedge.scalar) * other.group1) + (float4(other.scalar) * anti_wedge.group1), 
            /* e5 */
            (anti_wedge.scalar * other.e5) + (anti_wedge.e5 * other.scalar), 
            /* e15, e25, e35, e45 */
            (float4(anti_wedge.scalar) * other.group3) + (float4(anti_wedge.e5) * other.group1) + (float4(other.scalar) * anti_wedge.group3) - (float4(other.e5) * anti_wedge.group1), 
            /* e41, e42, e43 */
            (float3(anti_wedge.scalar) * other.group4.xyz) + (float3(other.scalar) * anti_wedge.group4.xyz) + (float3(other.e4) * anti_wedge.group1.xyz) - (float3(anti_wedge.e4) * other.group1.xyz), 
            /* e23, e31, e12 */
            (float3(anti_wedge.scalar) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group5.xyz) + (anti_wedge.group1.zxy * other.group1.yzx) - (anti_wedge.group1.yzx * other.group1.zxy), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e4 * other.e15) + (anti_wedge.e5 * other.e41) + (anti_wedge.e15 * other.e4) + (anti_wedge.e41 * other.e5), (anti_wedge.e4 * other.e25) + (anti_wedge.e5 * other.e42) + (anti_wedge.e25 * other.e4) + (anti_wedge.e42 * other.e5), (anti_wedge.e4 * other.e35) + (anti_wedge.e5 * other.e43) + (anti_wedge.e35 * other.e4) + (anti_wedge.e43 * other.e5), -(anti_wedge.e1 * other.e23) - (anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12) - (anti_wedge.e12 * other.e3)) + (float4(anti_wedge.scalar) * other.group6) + (float4(other.scalar) * anti_wedge.group6) - (other.group1.xyzy * float4(anti_wedge.group3.www, anti_wedge.e31)) - float4((other.group3.www * anti_wedge.group1.xyz), anti_wedge.e23 * other.e1), 
            /* e423, e431, e412 */
            (float3(anti_wedge.scalar) * other.group7.xyz) + (float3(anti_wedge.e4) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group7.xyz) + (float3(other.e4) * anti_wedge.group5.xyz) + (anti_wedge.group4.xyz.yzx * other.group1.zxy) + (other.group4.xyz.yzx * anti_wedge.group1.zxy) - (anti_wedge.group4.xyz.zxy * other.group1.yzx) - (other.group4.xyz.zxy * anti_wedge.group1.yzx), 
            /* e235, e315, e125 */
            (float3(anti_wedge.scalar) * other.group8.xyz) + (float3(anti_wedge.e5) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group8.xyz) + (float3(other.e5) * anti_wedge.group5.xyz) + (anti_wedge.group1.yzx * other.group3.zxy) + (anti_wedge.group3.zxy * other.group1.yzx) - (anti_wedge.group1.zxy * other.group3.yzx) - (anti_wedge.group3.yzx * other.group1.zxy), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e2 * other.e435) + (anti_wedge.e5 * other.e423) + (anti_wedge.e45 * other.e23) + (anti_wedge.e425 * other.e3), (anti_wedge.e3 * other.e415) + (anti_wedge.e5 * other.e431) + (anti_wedge.e45 * other.e31) + (anti_wedge.e435 * other.e1), (anti_wedge.e1 * other.e425) + (anti_wedge.e5 * other.e412) + (anti_wedge.e45 * other.e12) + (anti_wedge.e415 * other.e2), -(anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12) - (anti_wedge.e321 * other.e5)) + (float4(anti_wedge.scalar) * other.group9) + (float4(other.scalar) * anti_wedge.group9) + float4((anti_wedge.group5.xyz * other.group3.www), anti_wedge.e2 * other.e315) + float4((anti_wedge.group8.xyz * other.group1.www), anti_wedge.e3 * other.e125) + float4((anti_wedge.group4.xyz.yzx * other.group3.zxy), anti_wedge.e1 * other.e235) + float4((other.group4.xyz.yzx * anti_wedge.group3.zxy), anti_wedge.e5 * other.e321) - (other.group1.yzxz * float4(anti_wedge.group6.zxy, anti_wedge.e125)) - (other.group3.yzxx * float4(anti_wedge.group4.xyz.zxy, anti_wedge.e23)) - float4((float3(other.e5) * anti_wedge.group7.xyz), anti_wedge.e31 * other.e25) - float4((other.group8.xyz * anti_wedge.group1.www), anti_wedge.e235 * other.e1) - float4((other.group4.xyz.zxy * anti_wedge.group3.yzx), anti_wedge.e12 * other.e35) - float4((anti_wedge.group1.zxy * other.group6.yzx), anti_wedge.e315 * other.e2), 
            /* e1234 */
            (anti_wedge.scalar * other.e1234) + (anti_wedge.e321 * other.e4) + (anti_wedge.e423 * other.e1) + (anti_wedge.e431 * other.e2) + (anti_wedge.e412 * other.e3) + (anti_wedge.e1234 * other.scalar) - (anti_wedge.e1 * other.e423) - (anti_wedge.e2 * other.e431) - (anti_wedge.e3 * other.e412) - (anti_wedge.e4 * other.e321) - (anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12) - (anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)
        );
    }
}
// Fancy infix trick (second half)
public Dipole operator /(AntiProjectViaHorizonOntoInfixPartial<AntiLine> lhs, RoundPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiLine {
    public Dipole anti_project_via_horizon_onto(RoundPoint other) {
        Sphere right_dual = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        AntiPlane anti_wedge = AntiPlane(
            /* e1, e2, e3, e5 */
            float4(-(this.e12 * right_dual.e4315) - (this.e15 * right_dual.e1234), -(this.e23 * right_dual.e4125) - (this.e25 * right_dual.e1234), -(this.e31 * right_dual.e4235) - (this.e35 * right_dual.e1234), (this.e25 * right_dual.e4315) + (this.e35 * right_dual.e4125)) + (right_dual.group0.zxyx * float4(this.group0.xyz.yzx, this.e15))
        );
        return Dipole(
            /* e41, e42, e43 */
            float3(other.e4) * anti_wedge.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(((anti_wedge.group0.zxy * other.group0.yzx) - (anti_wedge.group0.yzx * other.group0.zxy)), anti_wedge.e5 * other.e4), 
            /* e15, e25, e35 */
            (float3(anti_wedge.e5) * other.group0.xyz) - (float3(other.e5) * anti_wedge.group0.xyz)
        );
    }
}
// Fancy infix trick (second half)
public AntiLine operator /(AntiProjectViaHorizonOntoInfixPartial<AntiLine> lhs, Scalar rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiLine {
    public AntiLine anti_project_via_horizon_onto(Scalar other) {
        AntiScalar right_dual = AntiScalar(
            /* e12345 */
            other.scalar
        );
        AntiLine anti_wedge = AntiLine(
            /* e23, e31, e12 */
            float3(right_dual.e12345) * this.group0.xyz, 
            /* e15, e25, e35 */
            float3(right_dual.e12345) * this.group1.xyz
        );
        return AntiLine(
            /* e23, e31, e12 */
            float3(other.scalar) * anti_wedge.group0.xyz, 
            /* e15, e25, e35 */
            float3(other.scalar) * anti_wedge.group1.xyz
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<AntiLine> lhs, VersorEven rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiLine {
    public DipoleInversion anti_project_via_horizon_onto(VersorEven other) {
        VersorOdd right_dual = VersorOdd(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiPlane anti_wedge = AntiPlane(
            /* e1, e2, e3, e5 */
            float4(-(this.e12 * right_dual.e4315) - (this.e15 * right_dual.e1234), -(this.e23 * right_dual.e4125) - (this.e25 * right_dual.e1234), -(this.e31 * right_dual.e4235) - (this.e35 * right_dual.e1234), (this.e25 * right_dual.e4315) + (this.e35 * right_dual.e4125)) + (right_dual.group3.zxyx * float4(this.group0.xyz.yzx, this.e15))
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            float3(other.e4) * anti_wedge.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(((anti_wedge.group0.zxy * other.group3.yzx) - (anti_wedge.group0.yzx * other.group3.zxy)), anti_wedge.e5 * other.e4), 
            /* e15, e25, e35, e1234 */
            float4(anti_wedge.e5 * other.e1, anti_wedge.e5 * other.e2, anti_wedge.e5 * other.e3, -(anti_wedge.e2 * other.e431) - (anti_wedge.e3 * other.e412)) - (anti_wedge.group0.xyzx * float4(other.group2.www, other.e423)), 
            /* e4235, e4315, e4125, e3215 */
            float4(anti_wedge.e3 * other.e425 * -1.0, anti_wedge.e1 * other.e435 * -1.0, anti_wedge.e2 * other.e415 * -1.0, (anti_wedge.e3 * other.e125) + (anti_wedge.e5 * other.e321)) + (anti_wedge.group0.yzxx * float4(other.group1.zxy, other.e235)) + (anti_wedge.group0.wwwy * float4(other.group0.xyz, other.e315))
        );
    }
}
// Fancy infix trick (second half)
public VersorOdd operator /(AntiProjectViaHorizonOntoInfixPartial<AntiLine> lhs, VersorOdd rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiLine {
    public VersorOdd anti_project_via_horizon_onto(VersorOdd other) {
        VersorEven right_dual = VersorEven(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiMotor anti_wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4((float3(right_dual.e12345) * this.group0.xyz), -(this.e23 * right_dual.e415) - (this.e31 * right_dual.e425) - (this.e12 * right_dual.e435) - (this.e15 * right_dual.e423) - (this.e25 * right_dual.e431) - (this.e35 * right_dual.e412)), 
            /* e15, e25, e35, e3215 */
            float4(float3(1.0), 0.0) * float4(this.group1.xyz, 0.0) * float4(right_dual.group0.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(anti_wedge.scalar) * other.group0, 
            /* e23, e31, e12, e45 */
            float4(((float3(anti_wedge.scalar) * other.group1.xyz) + (float3(other.scalar) * anti_wedge.group0.xyz)), anti_wedge.scalar * other.e45), 
            /* e15, e25, e35, e1234 */
            float4(anti_wedge.e15 * other.scalar, anti_wedge.e25 * other.scalar, anti_wedge.e35 * other.scalar, -(anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)) + (float4(anti_wedge.scalar) * other.group2), 
            /* e4235, e4315, e4125, e3215 */
            float4(anti_wedge.e35 * other.e42, anti_wedge.e15 * other.e43, anti_wedge.e25 * other.e41, -(anti_wedge.e31 * other.e25) - (anti_wedge.e12 * other.e35) - (anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12)) + (anti_wedge.group0 * float4(other.group1.www, other.e3215)) + float4((anti_wedge.group0.www * other.group3.xyz), anti_wedge.e3215 * other.scalar) - float4((anti_wedge.group1.yzx * other.group0.zxy), anti_wedge.e23 * other.e15)
        );
    }
}
// Fancy infix trick (first half)
public AntiProjectViaHorizonOntoInfixPartial<AntiMotor> operator /(AntiMotor lhs, AntiProjectViaHorizonOntoInfix rhs) {
    return AntiProjectViaHorizonOntoInfixPartial<AntiMotor>(lhs);
}
// Fancy infix trick (second half)
public VersorOdd operator /(AntiProjectViaHorizonOntoInfixPartial<AntiMotor> lhs, AntiCircleRotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiMotor {
    public VersorOdd anti_project_via_horizon_onto(AntiCircleRotor other) {
        CircleRotor right_dual = CircleRotor(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiMotor anti_wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4(this.e23 * right_dual.e12345, this.e31 * right_dual.e12345, this.e12 * right_dual.e12345, -(this.e23 * right_dual.e415) - (this.e31 * right_dual.e425) - (this.e12 * right_dual.e435) - (this.e15 * right_dual.e423) - (this.e25 * right_dual.e431) - (this.e35 * right_dual.e412)) + float4((right_dual.group0.xyz * this.group1.www), this.scalar * right_dual.e12345), 
            /* e15, e25, e35, e3215 */
            float4(((float3(this.e3215) * right_dual.group1.xyz) + (float3(right_dual.e12345) * this.group1.xyz)), this.e3215 * right_dual.e12345)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(anti_wedge.scalar) * float4(other.group0.xyz, other.scalar), 
            /* e23, e31, e12, e45 */
            float4(((float3(other.scalar) * anti_wedge.group0.xyz) + (float3(anti_wedge.scalar) * other.group1.xyz)), other.e45 * anti_wedge.scalar), 
            /* e15, e25, e35, e1234 */
            float4((other.e15 * anti_wedge.scalar) + (other.scalar * anti_wedge.e15), (other.e25 * anti_wedge.scalar) + (other.scalar * anti_wedge.e25), (other.e35 * anti_wedge.scalar) + (other.scalar * anti_wedge.e35), -(other.e41 * anti_wedge.e23) - (other.e42 * anti_wedge.e31) - (other.e43 * anti_wedge.e12)), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.e45 * anti_wedge.e23, other.e45 * anti_wedge.e31, other.e45 * anti_wedge.e12, -(other.e31 * anti_wedge.e25) - (other.e12 * anti_wedge.e35) - (other.e15 * anti_wedge.e23) - (other.e25 * anti_wedge.e31) - (other.e35 * anti_wedge.e12)) + (anti_wedge.group1.zxyw * float4(other.group0.xyz.yzx, other.scalar)) - (anti_wedge.group1.yzxx * float4(other.group0.xyz.zxy, other.e23))
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<AntiMotor> lhs, AntiDipoleInversion rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiMotor {
    public DipoleInversion anti_project_via_horizon_onto(AntiDipoleInversion other) {
        DipoleInversion right_dual = DipoleInversion(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiFlector anti_wedge = AntiFlector(
            /* e235, e315, e125, e321 */
            float4(this.e3215) * float4(right_dual.group3.xyz, right_dual.e1234) * float4(-1.0), 
            /* e1, e2, e3, e5 */
            float4(-(this.e12 * right_dual.e4315) - (this.e15 * right_dual.e1234), -(this.e23 * right_dual.e4125) - (this.e25 * right_dual.e1234), -(this.e31 * right_dual.e4235) - (this.e35 * right_dual.e1234), (this.e25 * right_dual.e4315) + (this.e35 * right_dual.e4125)) + (right_dual.group3.zxyx * float4(this.group0.yzx, this.e15)) - float4((right_dual.group0.xyz * this.group1.www), this.e3215 * right_dual.e45)
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            float3(other.e4) * anti_wedge.group1.xyz, 
            /* e23, e31, e12, e45 */
            float4(((other.group3.yzx * anti_wedge.group1.zxy) - (other.group3.zxy * anti_wedge.group1.yzx)), other.e4 * anti_wedge.e5), 
            /* e15, e25, e35, e1234 */
            float4(float3(0.0), -(other.e431 * anti_wedge.e2) - (other.e412 * anti_wedge.e3)) + float4((anti_wedge.group1.www * other.group3.xyz), other.e4 * anti_wedge.e321) - (anti_wedge.group1.xyzx * float4(other.group3.www, other.e423)), 
            /* e4235, e4315, e4125, e3215 */
            (float4(anti_wedge.e5) * float4(other.group0.xyz, other.e321)) + (other.group2.wwwy * float4(anti_wedge.group0.xyz, anti_wedge.e2)) + (anti_wedge.group1.yzxx * float4(other.group1.zxy, other.e235)) + float4(float3(0.0), (other.e125 * anti_wedge.e3) - (other.e2 * anti_wedge.e315) - (other.e3 * anti_wedge.e125) - (other.e5 * anti_wedge.e321)) - float4((other.group1.yzx * anti_wedge.group1.zxy), other.e1 * anti_wedge.e235)
        );
    }
}
// Fancy infix trick (second half)
public AntiMotor operator /(AntiProjectViaHorizonOntoInfixPartial<AntiMotor> lhs, AntiDualNum rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiMotor {
    public AntiMotor anti_project_via_horizon_onto(AntiDualNum other) {
        DualNum right_dual = DualNum(
            /* e5, e12345 */
            other.group0.xy
        );
        AntiMotor anti_wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4(right_dual.e12345) * this.group0, 
            /* e15, e25, e35, e3215 */
            float4(right_dual.e12345) * this.group1
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4(other.scalar) * anti_wedge.group0, 
            /* e15, e25, e35, e3215 */
            float4(other.group0.xy.yy, other.scalar, (other.e3215 * anti_wedge.scalar) + (other.scalar * anti_wedge.e3215)) * float4(anti_wedge.group1.xyz, 1.0)
        );
    }
}
// Fancy infix trick (second half)
public AntiDualNum operator /(AntiProjectViaHorizonOntoInfixPartial<AntiMotor> lhs, AntiFlatPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiMotor {
    public AntiDualNum anti_project_via_horizon_onto(AntiFlatPoint other) {
        return AntiDualNum(
            /* e3215, scalar */
            float2(pow(other.e321, 2) * this.e3215, 1.0) * float2(1.0, 0.0)
        );
    }
}
// Fancy infix trick (second half)
public AntiMotor operator /(AntiProjectViaHorizonOntoInfixPartial<AntiMotor> lhs, AntiFlector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiMotor {
    public AntiMotor anti_project_via_horizon_onto(AntiFlector other) {
        Flector right_dual = Flector(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiFlector anti_wedge = AntiFlector(
            /* e235, e315, e125, e321 */
            float4(float3(1.0), 0.0) * float4(this.group1.www, 0.0) * float4(right_dual.group1.xyz, 0.0) * float4(-1.0, -1.0, -1.0, 0.0), 
            /* e1, e2, e3, e5 */
            (right_dual.group1.zxyx * float4(this.group0.yzx, this.e15)) + float4(float3(0.0), (this.e25 * right_dual.e4315) + (this.e35 * right_dual.e4125)) - float4((this.group0.zxy * right_dual.group1.yzx), this.e3215 * right_dual.e45)
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4(((anti_wedge.group1.zxy * other.group1.yzx) - (anti_wedge.group1.yzx * other.group1.zxy)), 0.0), 
            /* e15, e25, e35, e3215 */
            (anti_wedge.group1.wwwx * float4(other.group1.xyz, other.e235)) + float4(float3(0.0), (anti_wedge.e2 * other.e315) + (anti_wedge.e3 * other.e125) + (anti_wedge.e5 * other.e321) - (anti_wedge.e315 * other.e2) - (anti_wedge.e125 * other.e3) - (anti_wedge.e321 * other.e5)) - (other.group1.wwwx * float4(anti_wedge.group1.xyz, anti_wedge.e235))
        );
    }
}
// Fancy infix trick (second half)
public AntiMotor operator /(AntiProjectViaHorizonOntoInfixPartial<AntiMotor> lhs, AntiLine rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiMotor {
    public AntiMotor anti_project_via_horizon_onto(AntiLine other) {
        Line right_dual = Line(
            /* e415, e425, e435 */
            other.group0.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group1.xyz * float3(-1.0)
        );
        AntiMotor anti_wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4(float3(0.0), -(this.e23 * right_dual.e415) - (this.e31 * right_dual.e425) - (this.e12 * right_dual.e435)), 
            /* e15, e25, e35, e3215 */
            float4(float3(1.0), 0.0) * float4(right_dual.group0.xyz, 0.0) * float4(this.group1.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4(float3(1.0), 0.0) * float4(other.group0.xyz, 0.0) * float4(anti_wedge.group0.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e15, e25, e35, e3215 */
            float4((float3(anti_wedge.scalar) * other.group1.xyz), -(other.e23 * anti_wedge.e15) - (other.e31 * anti_wedge.e25) - (other.e12 * anti_wedge.e35) - (other.e15 * anti_wedge.e23) - (other.e25 * anti_wedge.e31) - (other.e35 * anti_wedge.e12))
        );
    }
}
// Fancy infix trick (second half)
public AntiMotor operator /(AntiProjectViaHorizonOntoInfixPartial<AntiMotor> lhs, AntiMotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiMotor {
    public AntiMotor anti_project_via_horizon_onto(AntiMotor other) {
        Motor right_dual = Motor(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiMotor anti_wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4((float3(right_dual.e12345) * this.group0.xyz), (this.scalar * right_dual.e12345) - (this.e23 * right_dual.e415) - (this.e31 * right_dual.e425) - (this.e12 * right_dual.e435)), 
            /* e15, e25, e35, e3215 */
            float4(((float3(this.e3215) * right_dual.group0.xyz) + (float3(right_dual.e12345) * this.group1.xyz)), this.e3215 * right_dual.e12345)
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4(((float3(anti_wedge.scalar) * other.group0.xyz) + (float3(other.scalar) * anti_wedge.group0.xyz)), anti_wedge.scalar * other.scalar), 
            /* e15, e25, e35, e3215 */
            (float4(anti_wedge.scalar) * other.group1) + (float4(other.scalar) * anti_wedge.group1) + float4(float3(0.0), -(anti_wedge.e23 * other.e15) - (anti_wedge.e31 * other.e25) - (anti_wedge.e12 * other.e35) - (anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12))
        );
    }
}
// Fancy infix trick (second half)
public AntiMotor operator /(AntiProjectViaHorizonOntoInfixPartial<AntiMotor> lhs, AntiPlane rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiMotor {
    public AntiMotor anti_project_via_horizon_onto(AntiPlane other) {
        Plane right_dual = Plane(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiFlector anti_wedge = AntiFlector(
            /* e235, e315, e125, e321 */
            float4(float3(1.0), 0.0) * float4(this.group1.www, 0.0) * float4(right_dual.group0.xyz, 0.0) * float4(-1.0, -1.0, -1.0, 0.0), 
            /* e1, e2, e3, e5 */
            float4(this.e12 * right_dual.e4315 * -1.0, this.e23 * right_dual.e4125 * -1.0, this.e31 * right_dual.e4235 * -1.0, (this.e25 * right_dual.e4315) + (this.e35 * right_dual.e4125)) + (right_dual.group0.zxyx * float4(this.group0.yzx, this.e15))
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4(((anti_wedge.group1.zxy * other.group0.yzx) - (anti_wedge.group1.yzx * other.group0.zxy)), 0.0), 
            /* e15, e25, e35, e3215 */
            float4(anti_wedge.e5 * other.e1, anti_wedge.e5 * other.e2, anti_wedge.e5 * other.e3, -(anti_wedge.e315 * other.e2) - (anti_wedge.e125 * other.e3) - (anti_wedge.e321 * other.e5)) - (other.group0.wwwx * float4(anti_wedge.group1.xyz, anti_wedge.e235))
        );
    }
}
// Fancy infix trick (second half)
public Sphere operator /(AntiProjectViaHorizonOntoInfixPartial<AntiMotor> lhs, Circle rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiMotor {
    public Sphere anti_project_via_horizon_onto(Circle other) {
        Dipole right_dual = Dipole(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35 */
            other.group2.xyz
        );
        AntiPlane anti_wedge = AntiPlane(
            /* e1, e2, e3, e5 */
            float4((right_dual.group0.xyz * this.group1.www * float3(-1.0)), this.e3215 * right_dual.e45 * -1.0)
        );
        return Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(anti_wedge.e3 * other.e425 * -1.0, anti_wedge.e1 * other.e435 * -1.0, anti_wedge.e2 * other.e415 * -1.0, (anti_wedge.e3 * other.e125) + (anti_wedge.e5 * other.e321)) + (anti_wedge.group0.wwwx * float4(other.group0.xyz, other.e235)) + float4((anti_wedge.group0.yzx * other.group1.zxy), anti_wedge.e2 * other.e315), 
            /* e1234 */
            -(anti_wedge.e1 * other.e423) - (anti_wedge.e2 * other.e431) - (anti_wedge.e3 * other.e412)
        );
    }
}
// Fancy infix trick (second half)
public Sphere operator /(AntiProjectViaHorizonOntoInfixPartial<AntiMotor> lhs, CircleRotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiMotor {
    public Sphere anti_project_via_horizon_onto(CircleRotor other) {
        AntiCircleRotor right_dual = AntiCircleRotor(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiPlane anti_wedge = AntiPlane(
            /* e1, e2, e3, e5 */
            float4(this.e3215) * float4(right_dual.group0.xyz, right_dual.e45) * float4(-1.0)
        );
        return Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(anti_wedge.e3 * other.e425 * -1.0, anti_wedge.e1 * other.e435 * -1.0, anti_wedge.e2 * other.e415 * -1.0, (anti_wedge.e3 * other.e125) + (anti_wedge.e5 * other.e321)) + (anti_wedge.group0.yzxy * float4(other.group1.zxy, other.e315)) + float4((other.group0.xyz * anti_wedge.group0.www), anti_wedge.e1 * other.e235), 
            /* e1234 */
            -(anti_wedge.e1 * other.e423) - (anti_wedge.e2 * other.e431) - (anti_wedge.e3 * other.e412)
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<AntiMotor> lhs, Dipole rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiMotor {
    public DipoleInversion anti_project_via_horizon_onto(Dipole other) {
        Circle right_dual = Circle(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125 */
            other.group2.xyz * float3(-1.0)
        );
        AntiMotor anti_wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4((float3(this.e3215) * right_dual.group0.xyz), -(this.e23 * right_dual.e415) - (this.e31 * right_dual.e425) - (this.e12 * right_dual.e435) - (this.e15 * right_dual.e423) - (this.e25 * right_dual.e431) - (this.e35 * right_dual.e412)), 
            /* e15, e25, e35, e3215 */
            float4(float3(1.0), 0.0) * float4(this.group1.www, 0.0) * float4(right_dual.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(anti_wedge.scalar) * other.group1, 
            /* e15, e25, e35, e1234 */
            float4((float3(anti_wedge.scalar) * other.group2.xyz), -(anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e23 * other.e45) + (anti_wedge.e35 * other.e42), (anti_wedge.e31 * other.e45) + (anti_wedge.e15 * other.e43), (anti_wedge.e12 * other.e45) + (anti_wedge.e25 * other.e41), -(anti_wedge.e31 * other.e25) - (anti_wedge.e12 * other.e35) - (anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12)) - float4((other.group0.xyz.zxy * anti_wedge.group1.yzx), anti_wedge.e23 * other.e15)
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<AntiMotor> lhs, DipoleInversion rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiMotor {
    public DipoleInversion anti_project_via_horizon_onto(DipoleInversion other) {
        AntiDipoleInversion right_dual = AntiDipoleInversion(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiMotor anti_wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4((float3(this.e3215) * right_dual.group0.xyz), (right_dual.e4 * this.e3215) - (right_dual.e423 * this.e15) - (right_dual.e431 * this.e25) - (right_dual.e412 * this.e35) - (right_dual.e415 * this.e23) - (right_dual.e425 * this.e31) - (right_dual.e435 * this.e12)), 
            /* e15, e25, e35, e3215 */
            float4(float3(1.0), 0.0) * float4(this.group1.www, 0.0) * float4(right_dual.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(anti_wedge.scalar) * other.group1, 
            /* e15, e25, e35, e1234 */
            float4((anti_wedge.group0.www * other.group2.xyz), (anti_wedge.scalar * other.e1234) - (anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e23 * other.e45) + (anti_wedge.scalar * other.e4235), (anti_wedge.e31 * other.e45) + (anti_wedge.scalar * other.e4315), (anti_wedge.e12 * other.e45) + (anti_wedge.scalar * other.e4125), -(anti_wedge.e31 * other.e25) - (anti_wedge.e12 * other.e35) - (anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12)) + float4((other.group0.xyz.yzx * anti_wedge.group1.zxy), anti_wedge.scalar * other.e3215) - float4((other.group0.xyz.zxy * anti_wedge.group1.yzx), anti_wedge.e23 * other.e15)
        );
    }
}
// Fancy infix trick (second half)
public MultiVector operator /(AntiProjectViaHorizonOntoInfixPartial<AntiMotor> lhs, MultiVector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiMotor {
    public MultiVector anti_project_via_horizon_onto(MultiVector other) {
        MultiVector right_dual = MultiVector(
            /* scalar, e12345 */
            other.group0.xy.yx * float2(-1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215, 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43 */
            other.group7.xyz, 
            /* e23, e31, e12 */
            other.group6.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412 */
            other.group4.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group3.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        MultiVector anti_wedge = MultiVector(
            /* scalar, e12345 */
            float2((this.scalar * right_dual.e12345) + (this.e3215 * right_dual.e4) - (this.e23 * right_dual.e415) - (this.e31 * right_dual.e425) - (this.e12 * right_dual.e435) - (this.e15 * right_dual.e423) - (this.e25 * right_dual.e431) - (this.e35 * right_dual.e412), 0.0), 
            /* e1, e2, e3, e4 */
            float4((this.group0.yzx * right_dual.group9.zxy), 0.0) - float4((float3(this.e3215) * right_dual.group4.xyz), 0.0) - float4((float3(right_dual.e1234) * this.group1.xyz), 0.0) - float4((this.group0.zxy * right_dual.group9.yzx), 0.0), 
            /* e5 */
            (this.e15 * right_dual.e4235) + (this.e25 * right_dual.e4315) + (this.e35 * right_dual.e4125) - (this.e3215 * right_dual.e45), 
            /* e15, e25, e35, e45 */
            float4(((float3(this.e3215) * right_dual.group6.xyz) + (float3(right_dual.e12345) * this.group1.xyz)), 0.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            (float3(this.e3215) * right_dual.group7.xyz) + (float3(right_dual.e12345) * this.group0.xyz), 
            /* e415, e425, e435, e321 */
            float4(float3(0.0), this.e3215 * right_dual.e1234 * -1.0), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            float3(this.e3215) * right_dual.group9.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(float3(0.0), this.e3215 * right_dual.e12345), 
            /* e1234 */
            0.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(anti_wedge.scalar * other.scalar, (anti_wedge.scalar * other.e12345) + (anti_wedge.e12345 * other.scalar) + (anti_wedge.e1 * other.e4235) + (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) + (anti_wedge.e4 * other.e3215) + (anti_wedge.e5 * other.e1234) + (anti_wedge.e4235 * other.e1) + (anti_wedge.e4315 * other.e2) + (anti_wedge.e4125 * other.e3) + (anti_wedge.e3215 * other.e4) + (anti_wedge.e1234 * other.e5) - (anti_wedge.e15 * other.e423) - (anti_wedge.e25 * other.e431) - (anti_wedge.e35 * other.e412) - (anti_wedge.e45 * other.e321) - (anti_wedge.e41 * other.e235) - (anti_wedge.e42 * other.e315) - (anti_wedge.e43 * other.e125) - (anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435) - (anti_wedge.e415 * other.e23) - (anti_wedge.e425 * other.e31) - (anti_wedge.e435 * other.e12) - (anti_wedge.e321 * other.e45) - (anti_wedge.e423 * other.e15) - (anti_wedge.e431 * other.e25) - (anti_wedge.e412 * other.e35) - (anti_wedge.e235 * other.e41) - (anti_wedge.e315 * other.e42) - (anti_wedge.e125 * other.e43)), 
            /* e1, e2, e3, e4 */
            (float4(anti_wedge.scalar) * other.group1) + (float4(other.scalar) * anti_wedge.group1), 
            /* e5 */
            (anti_wedge.scalar * other.e5) + (anti_wedge.e5 * other.scalar), 
            /* e15, e25, e35, e45 */
            (float4(anti_wedge.scalar) * other.group3) + (float4(anti_wedge.e5) * other.group1) + (float4(other.scalar) * anti_wedge.group3) - (float4(other.e5) * anti_wedge.group1), 
            /* e41, e42, e43 */
            (float3(anti_wedge.scalar) * other.group4.xyz) + (float3(other.scalar) * anti_wedge.group4.xyz) + (float3(other.e4) * anti_wedge.group1.xyz) - (float3(anti_wedge.e4) * other.group1.xyz), 
            /* e23, e31, e12 */
            (float3(anti_wedge.scalar) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group5.xyz) + (anti_wedge.group1.zxy * other.group1.yzx) - (anti_wedge.group1.yzx * other.group1.zxy), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e4 * other.e15) + (anti_wedge.e5 * other.e41) + (anti_wedge.e15 * other.e4) + (anti_wedge.e41 * other.e5), (anti_wedge.e4 * other.e25) + (anti_wedge.e5 * other.e42) + (anti_wedge.e25 * other.e4) + (anti_wedge.e42 * other.e5), (anti_wedge.e4 * other.e35) + (anti_wedge.e5 * other.e43) + (anti_wedge.e35 * other.e4) + (anti_wedge.e43 * other.e5), -(anti_wedge.e1 * other.e23) - (anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12) - (anti_wedge.e12 * other.e3)) + (float4(anti_wedge.scalar) * other.group6) + (float4(other.scalar) * anti_wedge.group6) - (other.group1.xyzy * float4(anti_wedge.group3.www, anti_wedge.e31)) - float4((other.group3.www * anti_wedge.group1.xyz), anti_wedge.e23 * other.e1), 
            /* e423, e431, e412 */
            (float3(anti_wedge.scalar) * other.group7.xyz) + (float3(anti_wedge.e4) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group7.xyz) + (float3(other.e4) * anti_wedge.group5.xyz) + (anti_wedge.group4.xyz.yzx * other.group1.zxy) + (other.group4.xyz.yzx * anti_wedge.group1.zxy) - (anti_wedge.group4.xyz.zxy * other.group1.yzx) - (other.group4.xyz.zxy * anti_wedge.group1.yzx), 
            /* e235, e315, e125 */
            (float3(anti_wedge.scalar) * other.group8.xyz) + (float3(anti_wedge.e5) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group8.xyz) + (float3(other.e5) * anti_wedge.group5.xyz) + (anti_wedge.group1.yzx * other.group3.zxy) + (anti_wedge.group3.zxy * other.group1.yzx) - (anti_wedge.group1.zxy * other.group3.yzx) - (anti_wedge.group3.yzx * other.group1.zxy), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e2 * other.e435) + (anti_wedge.e5 * other.e423) + (anti_wedge.e45 * other.e23) + (anti_wedge.e425 * other.e3), (anti_wedge.e3 * other.e415) + (anti_wedge.e5 * other.e431) + (anti_wedge.e45 * other.e31) + (anti_wedge.e435 * other.e1), (anti_wedge.e1 * other.e425) + (anti_wedge.e5 * other.e412) + (anti_wedge.e45 * other.e12) + (anti_wedge.e415 * other.e2), -(anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12) - (anti_wedge.e321 * other.e5)) + (float4(anti_wedge.scalar) * other.group9) + (float4(other.scalar) * anti_wedge.group9) + float4((anti_wedge.group5.xyz * other.group3.www), anti_wedge.e2 * other.e315) + float4((anti_wedge.group8.xyz * other.group1.www), anti_wedge.e3 * other.e125) + float4((anti_wedge.group4.xyz.yzx * other.group3.zxy), anti_wedge.e1 * other.e235) + float4((other.group4.xyz.yzx * anti_wedge.group3.zxy), anti_wedge.e5 * other.e321) - (other.group1.yzxz * float4(anti_wedge.group6.zxy, anti_wedge.e125)) - (other.group3.yzxx * float4(anti_wedge.group4.xyz.zxy, anti_wedge.e23)) - float4((float3(other.e5) * anti_wedge.group7.xyz), anti_wedge.e31 * other.e25) - float4((other.group8.xyz * anti_wedge.group1.www), anti_wedge.e235 * other.e1) - float4((other.group4.xyz.zxy * anti_wedge.group3.yzx), anti_wedge.e12 * other.e35) - float4((anti_wedge.group1.zxy * other.group6.yzx), anti_wedge.e315 * other.e2), 
            /* e1234 */
            (anti_wedge.scalar * other.e1234) + (anti_wedge.e321 * other.e4) + (anti_wedge.e423 * other.e1) + (anti_wedge.e431 * other.e2) + (anti_wedge.e412 * other.e3) + (anti_wedge.e1234 * other.scalar) - (anti_wedge.e1 * other.e423) - (anti_wedge.e2 * other.e431) - (anti_wedge.e3 * other.e412) - (anti_wedge.e4 * other.e321) - (anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12) - (anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<AntiMotor> lhs, RoundPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiMotor {
    public DipoleInversion anti_project_via_horizon_onto(RoundPoint other) {
        Sphere right_dual = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        AntiFlector anti_wedge = AntiFlector(
            /* e235, e315, e125, e321 */
            float4(this.e3215) * float4(right_dual.group0.xyz, right_dual.e1234) * float4(-1.0), 
            /* e1, e2, e3, e5 */
            float4(-(this.e12 * right_dual.e4315) - (this.e15 * right_dual.e1234), -(this.e23 * right_dual.e4125) - (this.e25 * right_dual.e1234), -(this.e31 * right_dual.e4235) - (this.e35 * right_dual.e1234), (this.e25 * right_dual.e4315) + (this.e35 * right_dual.e4125)) + (right_dual.group0.zxyx * float4(this.group0.yzx, this.e15))
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            float3(other.e4) * anti_wedge.group1.xyz, 
            /* e23, e31, e12, e45 */
            float4(((anti_wedge.group1.zxy * other.group0.yzx) - (anti_wedge.group1.yzx * other.group0.zxy)), anti_wedge.e5 * other.e4), 
            /* e15, e25, e35, e1234 */
            float4(((float3(anti_wedge.e5) * other.group0.xyz) - (float3(other.e5) * anti_wedge.group1.xyz)), anti_wedge.e321 * other.e4), 
            /* e4235, e4315, e4125, e3215 */
            float4((float3(other.e4) * anti_wedge.group0.xyz), -(anti_wedge.e235 * other.e1) - (anti_wedge.e315 * other.e2) - (anti_wedge.e125 * other.e3) - (anti_wedge.e321 * other.e5))
        );
    }
}
// Fancy infix trick (second half)
public AntiMotor operator /(AntiProjectViaHorizonOntoInfixPartial<AntiMotor> lhs, Scalar rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiMotor {
    public AntiMotor anti_project_via_horizon_onto(Scalar other) {
        AntiScalar right_dual = AntiScalar(
            /* e12345 */
            other.scalar
        );
        AntiMotor anti_wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4(right_dual.e12345) * this.group0, 
            /* e15, e25, e35, e3215 */
            float4(right_dual.e12345) * this.group1
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4(other.scalar) * anti_wedge.group0, 
            /* e15, e25, e35, e3215 */
            float4(other.scalar) * anti_wedge.group1
        );
    }
}
// Fancy infix trick (second half)
public Sphere operator /(AntiProjectViaHorizonOntoInfixPartial<AntiMotor> lhs, Sphere rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiMotor {
    public Sphere anti_project_via_horizon_onto(Sphere other) {
        Scalar anti_wedge = Scalar(
            /* scalar */
            (float4(other.group0.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0))[3] * this.e3215
        );
        return Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(anti_wedge.scalar) * other.group0, 
            /* e1234 */
            anti_wedge.scalar * other.e1234
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<AntiMotor> lhs, VersorEven rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiMotor {
    public DipoleInversion anti_project_via_horizon_onto(VersorEven other) {
        VersorOdd right_dual = VersorOdd(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiFlector anti_wedge = AntiFlector(
            /* e235, e315, e125, e321 */
            float4(this.e3215) * float4(right_dual.group3.xyz, right_dual.e1234) * float4(-1.0), 
            /* e1, e2, e3, e5 */
            float4(-(this.e15 * right_dual.e1234) - (this.e3215 * right_dual.e41), -(this.e25 * right_dual.e1234) - (this.e3215 * right_dual.e42), -(this.e35 * right_dual.e1234) - (this.e3215 * right_dual.e43), (this.e25 * right_dual.e4315) + (this.e35 * right_dual.e4125)) + (right_dual.group3.zxyx * float4(this.group0.yzx, this.e15)) - float4((this.group0.zxy * right_dual.group3.yzx), this.e3215 * right_dual.e45)
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            float3(other.e4) * anti_wedge.group1.xyz, 
            /* e23, e31, e12, e45 */
            float4(((anti_wedge.group1.zxy * other.group3.yzx) - (anti_wedge.group1.yzx * other.group3.zxy)), anti_wedge.e5 * other.e4), 
            /* e15, e25, e35, e1234 */
            (other.group3 * float4(anti_wedge.group1.www, anti_wedge.e321)) + float4(float3(0.0), -(anti_wedge.e2 * other.e431) - (anti_wedge.e3 * other.e412)) - (anti_wedge.group1.xyzx * float4(other.group2.www, other.e423)), 
            /* e4235, e4315, e4125, e3215 */
            (anti_wedge.group1.yzxy * float4(other.group1.zxy, other.e315)) + (anti_wedge.group1.wwwz * float4(other.group0.xyz, other.e125)) + float4(float3(0.0), (anti_wedge.e5 * other.e321) - (anti_wedge.e315 * other.e2) - (anti_wedge.e125 * other.e3) - (anti_wedge.e321 * other.e5)) + float4((other.group3.www * anti_wedge.group0.xyz), anti_wedge.e1 * other.e235) - float4((anti_wedge.group1.zxy * other.group1.yzx), anti_wedge.e235 * other.e1)
        );
    }
}
// Fancy infix trick (second half)
public VersorOdd operator /(AntiProjectViaHorizonOntoInfixPartial<AntiMotor> lhs, VersorOdd rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiMotor {
    public VersorOdd anti_project_via_horizon_onto(VersorOdd other) {
        VersorEven right_dual = VersorEven(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiMotor anti_wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            (float4(this.e3215) * float4(right_dual.group0.xyz, right_dual.e4)) + (float4(right_dual.e12345) * this.group0) + float4(float3(0.0), -(this.e23 * right_dual.e415) - (this.e31 * right_dual.e425) - (this.e12 * right_dual.e435) - (this.e15 * right_dual.e423) - (this.e25 * right_dual.e431) - (this.e35 * right_dual.e412)), 
            /* e15, e25, e35, e3215 */
            float4(((float3(this.e3215) * right_dual.group1.xyz) + (float3(right_dual.e12345) * this.group1.xyz)), this.e3215 * right_dual.e12345)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(anti_wedge.scalar) * other.group0, 
            /* e23, e31, e12, e45 */
            float4(((float3(anti_wedge.scalar) * other.group1.xyz) + (float3(other.scalar) * anti_wedge.group0.xyz)), anti_wedge.scalar * other.e45), 
            /* e15, e25, e35, e1234 */
            float4(anti_wedge.e15 * other.scalar, anti_wedge.e25 * other.scalar, anti_wedge.e35 * other.scalar, -(anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)) + (float4(anti_wedge.scalar) * other.group2), 
            /* e4235, e4315, e4125, e3215 */
            float4(anti_wedge.e35 * other.e42, anti_wedge.e15 * other.e43, anti_wedge.e25 * other.e41, -(anti_wedge.e31 * other.e25) - (anti_wedge.e12 * other.e35) - (anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12)) + (anti_wedge.group0 * float4(other.group1.www, other.e3215)) + float4((anti_wedge.group0.www * other.group3.xyz), anti_wedge.e3215 * other.scalar) - float4((anti_wedge.group1.yzx * other.group0.zxy), anti_wedge.e23 * other.e15)
        );
    }
}
// Fancy infix trick (first half)
public AntiProjectViaHorizonOntoInfixPartial<AntiPlane> operator /(AntiPlane lhs, AntiProjectViaHorizonOntoInfix rhs) {
    return AntiProjectViaHorizonOntoInfixPartial<AntiPlane>(lhs);
}
// Fancy infix trick (second half)
public AntiDipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<AntiPlane> lhs, AntiCircleRotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiPlane {
    public AntiDipoleInversion anti_project_via_horizon_onto(AntiCircleRotor other) {
        AntiPlane anti_wedge = AntiPlane(
            /* e1, e2, e3, e5 */
            float4(other.scalar) * this.group0
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            (other.group0.xyz.yzx * anti_wedge.group0.zxy) - (other.group0.xyz.zxy * anti_wedge.group0.yzx), 
            /* e415, e425, e435, e321 */
            float4(other.e41 * anti_wedge.e5, other.e42 * anti_wedge.e5, other.e43 * anti_wedge.e5, -(other.e31 * anti_wedge.e2) - (other.e12 * anti_wedge.e3)) - (other.group1.wwwx * anti_wedge.group0.xyzx), 
            /* e235, e315, e125, e4 */
            float4((float3(anti_wedge.e5) * other.group1.xyz), 0.0) + float4((other.group2.zxy * anti_wedge.group0.yzx), 0.0) - float4((other.group2.yzx * anti_wedge.group0.zxy), 0.0), 
            /* e1, e2, e3, e5 */
            float4(other.scalar) * anti_wedge.group0
        );
    }
}
// Fancy infix trick (second half)
public AntiDipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<AntiPlane> lhs, AntiDipoleInversion rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiPlane {
    public AntiDipoleInversion anti_project_via_horizon_onto(AntiDipoleInversion other) {
        DipoleInversion right_dual = DipoleInversion(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        Scalar anti_wedge = Scalar(
            /* scalar */
            (this.e1 * right_dual.e4235) + (this.e2 * right_dual.e4315) + (this.e3 * right_dual.e4125) + (this.e5 * right_dual.e1234)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(anti_wedge.scalar) * other.group1, 
            /* e235, e315, e125, e4 */
            float4(anti_wedge.scalar) * other.group2, 
            /* e1, e2, e3, e5 */
            float4(anti_wedge.scalar) * other.group3
        );
    }
}
// Fancy infix trick (second half)
public AntiPlane operator /(AntiProjectViaHorizonOntoInfixPartial<AntiPlane> lhs, AntiDualNum rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiPlane {
    public AntiPlane anti_project_via_horizon_onto(AntiDualNum other) {
        DualNum right_dual = DualNum(
            /* e5, e12345 */
            other.group0.xy
        );
        return AntiPlane(
            /* e1, e2, e3, e5 */
            float4(other.scalar) * float4(this.e1 * right_dual.e12345, this.e2 * right_dual.e12345, this.e3 * right_dual.e12345, this.e5 * right_dual.e12345)
        );
    }
}
// Fancy infix trick (second half)
public AntiFlector operator /(AntiProjectViaHorizonOntoInfixPartial<AntiPlane> lhs, AntiFlector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiPlane {
    public AntiFlector anti_project_via_horizon_onto(AntiFlector other) {
        Flector right_dual = Flector(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        Scalar anti_wedge = Scalar(
            /* scalar */
            (this.e1 * right_dual.e4235) + (this.e2 * right_dual.e4315) + (this.e3 * right_dual.e4125)
        );
        return AntiFlector(
            /* e235, e315, e125, e321 */
            float4(anti_wedge.scalar) * other.group0, 
            /* e1, e2, e3, e5 */
            float4(anti_wedge.scalar) * other.group1
        );
    }
}
// Fancy infix trick (second half)
public AntiFlector operator /(AntiProjectViaHorizonOntoInfixPartial<AntiPlane> lhs, AntiMotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiPlane {
    public AntiFlector anti_project_via_horizon_onto(AntiMotor other) {
        AntiPlane anti_wedge = AntiPlane(
            /* e1, e2, e3, e5 */
            float4(other.scalar) * this.group0
        );
        return AntiFlector(
            /* e235, e315, e125, e321 */
            float4((other.e23 * anti_wedge.e5) + (other.e35 * anti_wedge.e2), (other.e31 * anti_wedge.e5) + (other.e15 * anti_wedge.e3), (other.e12 * anti_wedge.e5) + (other.e25 * anti_wedge.e1), -(other.e31 * anti_wedge.e2) - (other.e12 * anti_wedge.e3)) - (anti_wedge.group0.zxyx * float4(other.group1.yzx, other.e23)), 
            /* e1, e2, e3, e5 */
            float4(other.scalar) * anti_wedge.group0
        );
    }
}
// Fancy infix trick (second half)
public AntiPlane operator /(AntiProjectViaHorizonOntoInfixPartial<AntiPlane> lhs, AntiPlane rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiPlane {
    public AntiPlane anti_project_via_horizon_onto(AntiPlane other) {
        Plane right_dual = Plane(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiPlane(
            /* e1, e2, e3, e5 */
            float4((this.e1 * right_dual.e4235) + (this.e2 * right_dual.e4315) + (this.e3 * right_dual.e4125)) * other.group0
        );
    }
}
// Fancy infix trick (second half)
public MultiVector operator /(AntiProjectViaHorizonOntoInfixPartial<AntiPlane> lhs, MultiVector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiPlane {
    public MultiVector anti_project_via_horizon_onto(MultiVector other) {
        MultiVector right_dual = MultiVector(
            /* scalar, e12345 */
            other.group0.xy.yx * float2(-1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215, 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43 */
            other.group7.xyz, 
            /* e23, e31, e12 */
            other.group6.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412 */
            other.group4.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group3.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        MultiVector anti_wedge = MultiVector(
            /* scalar, e12345 */
            float2((this.e1 * right_dual.e4235) + (this.e2 * right_dual.e4315) + (this.e3 * right_dual.e4125) + (this.e5 * right_dual.e1234), 0.0), 
            /* e1, e2, e3, e4 */
            float4(right_dual.group0.xy.yy, right_dual.e12345, 0.0) * float4(float3(1.0), 0.0) * float4(this.group0.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e5 */
            this.e5 * right_dual.e12345, 
            /* e15, e25, e35, e45 */
            float4(0.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(0.0), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            float3(0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(0.0), 
            /* e1234 */
            0.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(anti_wedge.scalar * other.scalar, (anti_wedge.scalar * other.e12345) + (anti_wedge.e12345 * other.scalar) + (anti_wedge.e1 * other.e4235) + (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) + (anti_wedge.e4 * other.e3215) + (anti_wedge.e5 * other.e1234) + (anti_wedge.e4235 * other.e1) + (anti_wedge.e4315 * other.e2) + (anti_wedge.e4125 * other.e3) + (anti_wedge.e3215 * other.e4) + (anti_wedge.e1234 * other.e5) - (anti_wedge.e15 * other.e423) - (anti_wedge.e25 * other.e431) - (anti_wedge.e35 * other.e412) - (anti_wedge.e45 * other.e321) - (anti_wedge.e41 * other.e235) - (anti_wedge.e42 * other.e315) - (anti_wedge.e43 * other.e125) - (anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435) - (anti_wedge.e415 * other.e23) - (anti_wedge.e425 * other.e31) - (anti_wedge.e435 * other.e12) - (anti_wedge.e321 * other.e45) - (anti_wedge.e423 * other.e15) - (anti_wedge.e431 * other.e25) - (anti_wedge.e412 * other.e35) - (anti_wedge.e235 * other.e41) - (anti_wedge.e315 * other.e42) - (anti_wedge.e125 * other.e43)), 
            /* e1, e2, e3, e4 */
            (float4(anti_wedge.scalar) * other.group1) + (float4(other.scalar) * anti_wedge.group1), 
            /* e5 */
            (anti_wedge.scalar * other.e5) + (anti_wedge.e5 * other.scalar), 
            /* e15, e25, e35, e45 */
            (float4(anti_wedge.scalar) * other.group3) + (float4(anti_wedge.e5) * other.group1) + (float4(other.scalar) * anti_wedge.group3) - (float4(other.e5) * anti_wedge.group1), 
            /* e41, e42, e43 */
            (float3(anti_wedge.scalar) * other.group4.xyz) + (float3(other.scalar) * anti_wedge.group4.xyz) + (float3(other.e4) * anti_wedge.group1.xyz) - (float3(anti_wedge.e4) * other.group1.xyz), 
            /* e23, e31, e12 */
            (float3(anti_wedge.scalar) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group5.xyz) + (anti_wedge.group1.zxy * other.group1.yzx) - (anti_wedge.group1.yzx * other.group1.zxy), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e4 * other.e15) + (anti_wedge.e5 * other.e41) + (anti_wedge.e15 * other.e4) + (anti_wedge.e41 * other.e5), (anti_wedge.e4 * other.e25) + (anti_wedge.e5 * other.e42) + (anti_wedge.e25 * other.e4) + (anti_wedge.e42 * other.e5), (anti_wedge.e4 * other.e35) + (anti_wedge.e5 * other.e43) + (anti_wedge.e35 * other.e4) + (anti_wedge.e43 * other.e5), -(anti_wedge.e1 * other.e23) - (anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12) - (anti_wedge.e12 * other.e3)) + (float4(anti_wedge.scalar) * other.group6) + (float4(other.scalar) * anti_wedge.group6) - (other.group1.xyzy * float4(anti_wedge.group3.www, anti_wedge.e31)) - float4((other.group3.www * anti_wedge.group1.xyz), anti_wedge.e23 * other.e1), 
            /* e423, e431, e412 */
            (float3(anti_wedge.scalar) * other.group7.xyz) + (float3(anti_wedge.e4) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group7.xyz) + (float3(other.e4) * anti_wedge.group5.xyz) + (anti_wedge.group4.xyz.yzx * other.group1.zxy) + (other.group4.xyz.yzx * anti_wedge.group1.zxy) - (anti_wedge.group4.xyz.zxy * other.group1.yzx) - (other.group4.xyz.zxy * anti_wedge.group1.yzx), 
            /* e235, e315, e125 */
            (float3(anti_wedge.scalar) * other.group8.xyz) + (float3(anti_wedge.e5) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group8.xyz) + (float3(other.e5) * anti_wedge.group5.xyz) + (anti_wedge.group1.yzx * other.group3.zxy) + (anti_wedge.group3.zxy * other.group1.yzx) - (anti_wedge.group1.zxy * other.group3.yzx) - (anti_wedge.group3.yzx * other.group1.zxy), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e2 * other.e435) + (anti_wedge.e5 * other.e423) + (anti_wedge.e45 * other.e23) + (anti_wedge.e425 * other.e3), (anti_wedge.e3 * other.e415) + (anti_wedge.e5 * other.e431) + (anti_wedge.e45 * other.e31) + (anti_wedge.e435 * other.e1), (anti_wedge.e1 * other.e425) + (anti_wedge.e5 * other.e412) + (anti_wedge.e45 * other.e12) + (anti_wedge.e415 * other.e2), -(anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12) - (anti_wedge.e321 * other.e5)) + (float4(anti_wedge.scalar) * other.group9) + (float4(other.scalar) * anti_wedge.group9) + float4((anti_wedge.group5.xyz * other.group3.www), anti_wedge.e2 * other.e315) + float4((anti_wedge.group8.xyz * other.group1.www), anti_wedge.e3 * other.e125) + float4((anti_wedge.group4.xyz.yzx * other.group3.zxy), anti_wedge.e1 * other.e235) + float4((other.group4.xyz.yzx * anti_wedge.group3.zxy), anti_wedge.e5 * other.e321) - (other.group1.yzxz * float4(anti_wedge.group6.zxy, anti_wedge.e125)) - (other.group3.yzxx * float4(anti_wedge.group4.xyz.zxy, anti_wedge.e23)) - float4((float3(other.e5) * anti_wedge.group7.xyz), anti_wedge.e31 * other.e25) - float4((other.group8.xyz * anti_wedge.group1.www), anti_wedge.e235 * other.e1) - float4((other.group4.xyz.zxy * anti_wedge.group3.yzx), anti_wedge.e12 * other.e35) - float4((anti_wedge.group1.zxy * other.group6.yzx), anti_wedge.e315 * other.e2), 
            /* e1234 */
            (anti_wedge.scalar * other.e1234) + (anti_wedge.e321 * other.e4) + (anti_wedge.e423 * other.e1) + (anti_wedge.e431 * other.e2) + (anti_wedge.e412 * other.e3) + (anti_wedge.e1234 * other.scalar) - (anti_wedge.e1 * other.e423) - (anti_wedge.e2 * other.e431) - (anti_wedge.e3 * other.e412) - (anti_wedge.e4 * other.e321) - (anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12) - (anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)
        );
    }
}
// Fancy infix trick (second half)
public RoundPoint operator /(AntiProjectViaHorizonOntoInfixPartial<AntiPlane> lhs, RoundPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiPlane {
    public RoundPoint anti_project_via_horizon_onto(RoundPoint other) {
        Sphere right_dual = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        Scalar anti_wedge = Scalar(
            /* scalar */
            (this.e1 * right_dual.e4235) + (this.e2 * right_dual.e4315) + (this.e3 * right_dual.e4125) + (this.e5 * right_dual.e1234)
        );
        return RoundPoint(
            /* e1, e2, e3, e4 */
            float4(anti_wedge.scalar) * other.group0, 
            /* e5 */
            other.e5 * anti_wedge.scalar
        );
    }
}
// Fancy infix trick (second half)
public AntiPlane operator /(AntiProjectViaHorizonOntoInfixPartial<AntiPlane> lhs, Scalar rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiPlane {
    public AntiPlane anti_project_via_horizon_onto(Scalar other) {
        AntiScalar right_dual = AntiScalar(
            /* e12345 */
            other.scalar
        );
        return AntiPlane(
            /* e1, e2, e3, e5 */
            float4(other.scalar) * float4(this.e1 * right_dual.e12345, this.e2 * right_dual.e12345, this.e3 * right_dual.e12345, this.e5 * right_dual.e12345)
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<AntiPlane> lhs, VersorEven rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiPlane {
    public VersorEven anti_project_via_horizon_onto(VersorEven other) {
        VersorOdd right_dual = VersorOdd(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        Scalar anti_wedge = Scalar(
            /* scalar */
            (this.e1 * right_dual.e4235) + (this.e2 * right_dual.e4315) + (this.e3 * right_dual.e4125) + (this.e5 * right_dual.e1234)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(anti_wedge.scalar) * other.group0, 
            /* e415, e425, e435, e321 */
            float4(anti_wedge.scalar) * other.group1, 
            /* e235, e315, e125, e5 */
            float4(anti_wedge.scalar) * other.group2, 
            /* e1, e2, e3, e4 */
            float4(anti_wedge.scalar) * other.group3
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<AntiPlane> lhs, VersorOdd rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiPlane {
    public VersorEven anti_project_via_horizon_onto(VersorOdd other) {
        AntiPlane anti_wedge = AntiPlane(
            /* e1, e2, e3, e5 */
            float4(other.scalar) * this.group0
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(anti_wedge.e2 * other.e43 * -1.0, anti_wedge.e3 * other.e41 * -1.0, anti_wedge.e1 * other.e42 * -1.0, (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) + (anti_wedge.e5 * other.e1234)) + (anti_wedge.group0.zxyx * float4(other.group0.yzx, other.e4235)), 
            /* e415, e425, e435, e321 */
            float4(anti_wedge.e5 * other.e41, anti_wedge.e5 * other.e42, anti_wedge.e5 * other.e43, -(anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12)) - (anti_wedge.group0.xyzx * other.group1.wwwx), 
            /* e235, e315, e125, e5 */
            float4(((float3(anti_wedge.e5) * other.group1.xyz) + (anti_wedge.group0.yzx * other.group2.zxy) - (anti_wedge.group0.zxy * other.group2.yzx)), anti_wedge.e5 * other.scalar), 
            /* e1, e2, e3, e4 */
            float4(float3(1.0), 0.0) * float4(other.group0.www, 0.0) * float4(anti_wedge.group0.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
    }
}
// Fancy infix trick (first half)
public AntiProjectViaHorizonOntoInfixPartial<AntiScalar> operator /(AntiScalar lhs, AntiProjectViaHorizonOntoInfix rhs) {
    return AntiProjectViaHorizonOntoInfixPartial<AntiScalar>(lhs);
}
// Fancy infix trick (second half)
public CircleRotor operator /(AntiProjectViaHorizonOntoInfixPartial<AntiScalar> lhs, AntiCircleRotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiScalar {
    public CircleRotor anti_project_via_horizon_onto(AntiCircleRotor other) {
        CircleRotor right_dual = CircleRotor(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        CircleRotor anti_wedge = CircleRotor(
            /* e423, e431, e412 */
            float3(this.e12345) * right_dual.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(this.e12345) * right_dual.group1, 
            /* e235, e315, e125, e12345 */
            float4(this.e12345) * right_dual.group2
        );
        return CircleRotor(
            /* e423, e431, e412 */
            float3(other.scalar) * anti_wedge.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.scalar) * anti_wedge.group1, 
            /* e235, e315, e125, e12345 */
            float4((other.group2.www * anti_wedge.group2.xyz), (other.scalar * anti_wedge.e12345) - (other.e41 * anti_wedge.e235) - (other.e42 * anti_wedge.e315) - (other.e43 * anti_wedge.e125) - (other.e23 * anti_wedge.e415) - (other.e31 * anti_wedge.e425) - (other.e12 * anti_wedge.e435) - (other.e45 * anti_wedge.e321) - (other.e15 * anti_wedge.e423) - (other.e25 * anti_wedge.e431) - (other.e35 * anti_wedge.e412))
        );
    }
}
// Fancy infix trick (second half)
public CircleRotor operator /(AntiProjectViaHorizonOntoInfixPartial<AntiScalar> lhs, AntiDipoleInversion rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiScalar {
    public CircleRotor anti_project_via_horizon_onto(AntiDipoleInversion other) {
        DipoleInversion right_dual = DipoleInversion(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        DipoleInversion anti_wedge = DipoleInversion(
            /* e41, e42, e43 */
            float3(this.e12345) * right_dual.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(this.e12345) * right_dual.group1, 
            /* e15, e25, e35, e1234 */
            float4(this.e12345) * right_dual.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e12345) * right_dual.group3
        );
        return CircleRotor(
            /* e423, e431, e412 */
            (float3(other.e4) * anti_wedge.group1.xyz) + (anti_wedge.group0.xyz.yzx * other.group3.zxy) - (anti_wedge.group0.xyz.zxy * other.group3.yzx), 
            /* e415, e425, e435, e321 */
            float4((other.e4 * anti_wedge.e15) + (other.e5 * anti_wedge.e41), (other.e4 * anti_wedge.e25) + (other.e5 * anti_wedge.e42), (other.e4 * anti_wedge.e35) + (other.e5 * anti_wedge.e43), -(other.e2 * anti_wedge.e31) - (other.e3 * anti_wedge.e12)) - (other.group3.xyzx * anti_wedge.group1.wwwx), 
            /* e235, e315, e125, e12345 */
            (other.group3.wwwx * float4(anti_wedge.group1.xyz, anti_wedge.e4235)) + float4(float3(0.0), (other.e2 * anti_wedge.e4315) + (other.e3 * anti_wedge.e4125) + (other.e5 * anti_wedge.e1234) - (other.e431 * anti_wedge.e25) - (other.e412 * anti_wedge.e35) - (other.e415 * anti_wedge.e23) - (other.e425 * anti_wedge.e31) - (other.e435 * anti_wedge.e12) - (other.e321 * anti_wedge.e45) - (other.e235 * anti_wedge.e41) - (other.e315 * anti_wedge.e42) - (other.e125 * anti_wedge.e43)) + float4((other.group3.yzx * anti_wedge.group2.zxy), other.e4 * anti_wedge.e3215) - (anti_wedge.group2.yzxx * float4(other.group3.zxy, other.e423))
        );
    }
}
// Fancy infix trick (second half)
public DualNum operator /(AntiProjectViaHorizonOntoInfixPartial<AntiScalar> lhs, AntiDualNum rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiScalar {
    public DualNum anti_project_via_horizon_onto(AntiDualNum other) {
        DualNum right_dual = DualNum(
            /* e5, e12345 */
            other.group0.xy
        );
        return DualNum(
            /* e5, e12345 */
            float2(other.scalar) * float2(this.e12345 * right_dual.e5, this.e12345 * right_dual.e12345)
        );
    }
}
// Fancy infix trick (second half)
public AntiScalar operator /(AntiProjectViaHorizonOntoInfixPartial<AntiScalar> lhs, AntiFlatPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiScalar {
    public AntiScalar anti_project_via_horizon_onto(AntiFlatPoint other) {
        return AntiScalar(
            /* e12345 */
            pow(other.e321, 2) * this.e12345
        );
    }
}
// Fancy infix trick (second half)
public Motor operator /(AntiProjectViaHorizonOntoInfixPartial<AntiScalar> lhs, AntiFlector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiScalar {
    public Motor anti_project_via_horizon_onto(AntiFlector other) {
        Flector right_dual = Flector(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        Flector anti_wedge = Flector(
            /* e15, e25, e35, e45 */
            float4(this.e12345) * right_dual.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e12345) * right_dual.group1
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4((float3(anti_wedge.e45) * other.group1.xyz * float3(-1.0)), (other.e1 * anti_wedge.e4235) + (other.e2 * anti_wedge.e4315) + (other.e3 * anti_wedge.e4125) - (other.e321 * anti_wedge.e45)), 
            /* e235, e315, e125, e5 */
            float4(((other.group1.yzx * anti_wedge.group0.zxy) - (other.group1.zxy * anti_wedge.group0.yzx)), 0.0)
        );
    }
}
// Fancy infix trick (second half)
public AntiScalar operator /(AntiProjectViaHorizonOntoInfixPartial<AntiScalar> lhs, AntiLine rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiScalar {
    public AntiScalar anti_project_via_horizon_onto(AntiLine other) {
        Line right_dual = Line(
            /* e415, e425, e435 */
            other.group0.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group1.xyz * float3(-1.0)
        );
        Line anti_wedge = Line(
            /* e415, e425, e435 */
            float3(this.e12345) * right_dual.group0.xyz, 
            /* e235, e315, e125 */
            float3(this.e12345) * right_dual.group1.xyz
        );
        return AntiScalar(
            /* e12345 */
            -(other.e23 * anti_wedge.e415) - (other.e31 * anti_wedge.e425) - (other.e12 * anti_wedge.e435)
        );
    }
}
// Fancy infix trick (second half)
public Motor operator /(AntiProjectViaHorizonOntoInfixPartial<AntiScalar> lhs, AntiMotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiScalar {
    public Motor anti_project_via_horizon_onto(AntiMotor other) {
        Motor right_dual = Motor(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        Motor anti_wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4(this.e12345) * right_dual.group0, 
            /* e235, e315, e125, e5 */
            float4(this.e12345) * right_dual.group1
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4((other.group0.www * anti_wedge.group0.xyz), (other.scalar * anti_wedge.e12345) - (other.e23 * anti_wedge.e415) - (other.e31 * anti_wedge.e425) - (other.e12 * anti_wedge.e435)), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.scalar) * anti_wedge.group1.xyz) + (float3(anti_wedge.e5) * other.group0.xyz)), other.scalar * anti_wedge.e5)
        );
    }
}
// Fancy infix trick (second half)
public AntiScalar operator /(AntiProjectViaHorizonOntoInfixPartial<AntiScalar> lhs, AntiPlane rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiScalar {
    public AntiScalar anti_project_via_horizon_onto(AntiPlane other) {
        Plane anti_wedge = Plane(
            /* e4235, e4315, e4125, e3215 */
            float4(this.e12345) * float4(other.group0.xyz, other.e5 * -1.0)
        );
        return AntiScalar(
            /* e12345 */
            (other.e1 * anti_wedge.e4235) + (other.e2 * anti_wedge.e4315) + (other.e3 * anti_wedge.e4125)
        );
    }
}
// Fancy infix trick (second half)
public AntiScalar operator /(AntiProjectViaHorizonOntoInfixPartial<AntiScalar> lhs, AntiScalar rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiScalar {
    public AntiScalar anti_project_via_horizon_onto(AntiScalar other) {
        return AntiScalar(
            /* e12345 */
            pow(other.e12345, 2) * this.e12345 * -1.0
        );
    }
}
// Fancy infix trick (second half)
public AntiScalar operator /(AntiProjectViaHorizonOntoInfixPartial<AntiScalar> lhs, Circle rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiScalar {
    public AntiScalar anti_project_via_horizon_onto(Circle other) {
        Dipole right_dual = Dipole(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35 */
            other.group2.xyz
        );
        Dipole anti_wedge = Dipole(
            /* e41, e42, e43 */
            float3(this.e12345) * right_dual.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(this.e12345) * right_dual.group1, 
            /* e15, e25, e35 */
            float3(this.e12345) * right_dual.group2.xyz
        );
        return AntiScalar(
            /* e12345 */
            -(other.e423 * anti_wedge.e15) - (other.e431 * anti_wedge.e25) - (other.e412 * anti_wedge.e35) - (other.e415 * anti_wedge.e23) - (other.e425 * anti_wedge.e31) - (other.e435 * anti_wedge.e12) - (other.e321 * anti_wedge.e45) - (other.e235 * anti_wedge.e41) - (other.e315 * anti_wedge.e42) - (other.e125 * anti_wedge.e43)
        );
    }
}
// Fancy infix trick (second half)
public CircleRotor operator /(AntiProjectViaHorizonOntoInfixPartial<AntiScalar> lhs, CircleRotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiScalar {
    public CircleRotor anti_project_via_horizon_onto(CircleRotor other) {
        AntiCircleRotor right_dual = AntiCircleRotor(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiCircleRotor anti_wedge = AntiCircleRotor(
            /* e41, e42, e43 */
            float3(this.e12345) * right_dual.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(this.e12345) * right_dual.group1, 
            /* e15, e25, e35, scalar */
            float4(this.e12345) * right_dual.group2
        );
        return CircleRotor(
            /* e423, e431, e412 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(anti_wedge.scalar) * other.group1, 
            /* e235, e315, e125, e12345 */
            float4((anti_wedge.group2.www * other.group2.xyz), (anti_wedge.scalar * other.e12345) - (anti_wedge.e41 * other.e235) - (anti_wedge.e42 * other.e315) - (anti_wedge.e43 * other.e125) - (anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435) - (anti_wedge.e45 * other.e321) - (anti_wedge.e15 * other.e423) - (anti_wedge.e25 * other.e431) - (anti_wedge.e35 * other.e412))
        );
    }
}
// Fancy infix trick (second half)
public AntiScalar operator /(AntiProjectViaHorizonOntoInfixPartial<AntiScalar> lhs, Dipole rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiScalar {
    public AntiScalar anti_project_via_horizon_onto(Dipole other) {
        Circle right_dual = Circle(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125 */
            other.group2.xyz * float3(-1.0)
        );
        Circle anti_wedge = Circle(
            /* e423, e431, e412 */
            float3(this.e12345) * right_dual.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(this.e12345) * right_dual.group1, 
            /* e235, e315, e125 */
            float3(this.e12345) * right_dual.group2.xyz
        );
        return AntiScalar(
            /* e12345 */
            -(anti_wedge.e423 * other.e15) - (anti_wedge.e431 * other.e25) - (anti_wedge.e412 * other.e35) - (anti_wedge.e415 * other.e23) - (anti_wedge.e425 * other.e31) - (anti_wedge.e435 * other.e12) - (anti_wedge.e321 * other.e45) - (anti_wedge.e235 * other.e41) - (anti_wedge.e315 * other.e42) - (anti_wedge.e125 * other.e43)
        );
    }
}
// Fancy infix trick (second half)
public CircleRotor operator /(AntiProjectViaHorizonOntoInfixPartial<AntiScalar> lhs, DipoleInversion rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiScalar {
    public CircleRotor anti_project_via_horizon_onto(DipoleInversion other) {
        AntiDipoleInversion right_dual = AntiDipoleInversion(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiDipoleInversion anti_wedge = AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(this.e12345) * right_dual.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(this.e12345) * right_dual.group1, 
            /* e235, e315, e125, e4 */
            float4(this.e12345) * right_dual.group2, 
            /* e1, e2, e3, e5 */
            float4(this.e12345) * right_dual.group3
        );
        return CircleRotor(
            /* e423, e431, e412 */
            (float3(anti_wedge.e4) * other.group1.xyz) + (other.group0.xyz.yzx * anti_wedge.group3.zxy) - (other.group0.xyz.zxy * anti_wedge.group3.yzx), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e4 * other.e15) + (anti_wedge.e5 * other.e41), (anti_wedge.e4 * other.e25) + (anti_wedge.e5 * other.e42), (anti_wedge.e4 * other.e35) + (anti_wedge.e5 * other.e43), -(anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12)) - (anti_wedge.group3.xyzx * other.group1.wwwx), 
            /* e235, e315, e125, e12345 */
            (anti_wedge.group3.wwwx * float4(other.group1.xyz, other.e4235)) + float4(float3(0.0), (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) + (anti_wedge.e5 * other.e1234) - (anti_wedge.e431 * other.e25) - (anti_wedge.e412 * other.e35) - (anti_wedge.e415 * other.e23) - (anti_wedge.e425 * other.e31) - (anti_wedge.e435 * other.e12) - (anti_wedge.e321 * other.e45) - (anti_wedge.e235 * other.e41) - (anti_wedge.e315 * other.e42) - (anti_wedge.e125 * other.e43)) + float4((anti_wedge.group3.yzx * other.group2.zxy), anti_wedge.e4 * other.e3215) - (other.group2.yzxx * float4(anti_wedge.group3.zxy, anti_wedge.e423))
        );
    }
}
// Fancy infix trick (second half)
public DualNum operator /(AntiProjectViaHorizonOntoInfixPartial<AntiScalar> lhs, DualNum rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiScalar {
    public DualNum anti_project_via_horizon_onto(DualNum other) {
        return DualNum(
            /* e5, e12345 */
            float2(this.e12345 * other.e12345 * -1.0) * other.group0.xy
        );
    }
}
// Fancy infix trick (second half)
public AntiScalar operator /(AntiProjectViaHorizonOntoInfixPartial<AntiScalar> lhs, FlatPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiScalar {
    public AntiScalar anti_project_via_horizon_onto(FlatPoint other) {
        return AntiScalar(
            /* e12345 */
            pow(other.e45, 2) * this.e12345 * -1.0
        );
    }
}
// Fancy infix trick (second half)
public Motor operator /(AntiProjectViaHorizonOntoInfixPartial<AntiScalar> lhs, Flector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiScalar {
    public Motor anti_project_via_horizon_onto(Flector other) {
        AntiFlector right_dual = AntiFlector(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiFlector anti_wedge = AntiFlector(
            /* e235, e315, e125, e321 */
            float4(this.e12345) * right_dual.group0, 
            /* e1, e2, e3, e5 */
            float4(this.e12345) * right_dual.group1
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4((float3(other.e45) * anti_wedge.group1.xyz * float3(-1.0)), (anti_wedge.e1 * other.e4235) + (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) - (anti_wedge.e321 * other.e45)), 
            /* e235, e315, e125, e5 */
            float4(((anti_wedge.group1.yzx * other.group0.zxy) - (anti_wedge.group1.zxy * other.group0.yzx)), 0.0)
        );
    }
}
// Fancy infix trick (second half)
public AntiScalar operator /(AntiProjectViaHorizonOntoInfixPartial<AntiScalar> lhs, Line rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiScalar {
    public AntiScalar anti_project_via_horizon_onto(Line other) {
        AntiLine right_dual = AntiLine(
            /* e23, e31, e12 */
            other.group0.xyz, 
            /* e15, e25, e35 */
            other.group1.xyz
        );
        AntiLine anti_wedge = AntiLine(
            /* e23, e31, e12 */
            float3(this.e12345) * right_dual.group0.xyz, 
            /* e15, e25, e35 */
            float3(this.e12345) * right_dual.group1.xyz
        );
        return AntiScalar(
            /* e12345 */
            -(anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435)
        );
    }
}
// Fancy infix trick (second half)
public Motor operator /(AntiProjectViaHorizonOntoInfixPartial<AntiScalar> lhs, Motor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiScalar {
    public Motor anti_project_via_horizon_onto(Motor other) {
        AntiMotor right_dual = AntiMotor(
            /* e23, e31, e12, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiMotor anti_wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4(this.e12345) * right_dual.group0, 
            /* e15, e25, e35, e3215 */
            float4(this.e12345) * right_dual.group1
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4((anti_wedge.group0.www * other.group0.xyz), (anti_wedge.scalar * other.e12345) - (anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435)), 
            /* e235, e315, e125, e5 */
            float4(((float3(anti_wedge.scalar) * other.group1.xyz) + (float3(other.e5) * anti_wedge.group0.xyz)), anti_wedge.scalar * other.e5)
        );
    }
}
// Fancy infix trick (second half)
public MultiVector operator /(AntiProjectViaHorizonOntoInfixPartial<AntiScalar> lhs, MultiVector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiScalar {
    public MultiVector anti_project_via_horizon_onto(MultiVector other) {
        MultiVector right_dual = MultiVector(
            /* scalar, e12345 */
            other.group0.xy.yx * float2(-1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215, 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43 */
            other.group7.xyz, 
            /* e23, e31, e12 */
            other.group6.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412 */
            other.group4.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group3.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        MultiVector anti_wedge = MultiVector(
            /* scalar, e12345 */
            float2(this.e12345) * right_dual.group0.xy, 
            /* e1, e2, e3, e4 */
            float4(this.e12345) * right_dual.group1, 
            /* e5 */
            this.e12345 * right_dual.e5, 
            /* e15, e25, e35, e45 */
            float4(this.e12345) * right_dual.group3, 
            /* e41, e42, e43 */
            float3(this.e12345) * right_dual.group4.xyz, 
            /* e23, e31, e12 */
            float3(this.e12345) * right_dual.group5.xyz, 
            /* e415, e425, e435, e321 */
            float4(this.e12345) * right_dual.group6, 
            /* e423, e431, e412 */
            float3(this.e12345) * right_dual.group7.xyz, 
            /* e235, e315, e125 */
            float3(this.e12345) * right_dual.group8.xyz, 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e12345) * right_dual.group9, 
            /* e1234 */
            this.e12345 * right_dual.e1234
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(anti_wedge.scalar * other.scalar, (anti_wedge.scalar * other.e12345) + (anti_wedge.e12345 * other.scalar) + (anti_wedge.e1 * other.e4235) + (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) + (anti_wedge.e4 * other.e3215) + (anti_wedge.e5 * other.e1234) + (anti_wedge.e4235 * other.e1) + (anti_wedge.e4315 * other.e2) + (anti_wedge.e4125 * other.e3) + (anti_wedge.e3215 * other.e4) + (anti_wedge.e1234 * other.e5) - (anti_wedge.e15 * other.e423) - (anti_wedge.e25 * other.e431) - (anti_wedge.e35 * other.e412) - (anti_wedge.e45 * other.e321) - (anti_wedge.e41 * other.e235) - (anti_wedge.e42 * other.e315) - (anti_wedge.e43 * other.e125) - (anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435) - (anti_wedge.e415 * other.e23) - (anti_wedge.e425 * other.e31) - (anti_wedge.e435 * other.e12) - (anti_wedge.e321 * other.e45) - (anti_wedge.e423 * other.e15) - (anti_wedge.e431 * other.e25) - (anti_wedge.e412 * other.e35) - (anti_wedge.e235 * other.e41) - (anti_wedge.e315 * other.e42) - (anti_wedge.e125 * other.e43)), 
            /* e1, e2, e3, e4 */
            (float4(anti_wedge.scalar) * other.group1) + (float4(other.scalar) * anti_wedge.group1), 
            /* e5 */
            (anti_wedge.scalar * other.e5) + (anti_wedge.e5 * other.scalar), 
            /* e15, e25, e35, e45 */
            (float4(anti_wedge.scalar) * other.group3) + (float4(anti_wedge.e5) * other.group1) + (float4(other.scalar) * anti_wedge.group3) - (float4(other.e5) * anti_wedge.group1), 
            /* e41, e42, e43 */
            (float3(anti_wedge.scalar) * other.group4.xyz) + (float3(other.scalar) * anti_wedge.group4.xyz) + (float3(other.e4) * anti_wedge.group1.xyz) - (float3(anti_wedge.e4) * other.group1.xyz), 
            /* e23, e31, e12 */
            (float3(anti_wedge.scalar) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group5.xyz) + (anti_wedge.group1.zxy * other.group1.yzx) - (anti_wedge.group1.yzx * other.group1.zxy), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e4 * other.e15) + (anti_wedge.e5 * other.e41) + (anti_wedge.e15 * other.e4) + (anti_wedge.e41 * other.e5), (anti_wedge.e4 * other.e25) + (anti_wedge.e5 * other.e42) + (anti_wedge.e25 * other.e4) + (anti_wedge.e42 * other.e5), (anti_wedge.e4 * other.e35) + (anti_wedge.e5 * other.e43) + (anti_wedge.e35 * other.e4) + (anti_wedge.e43 * other.e5), -(anti_wedge.e1 * other.e23) - (anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12) - (anti_wedge.e12 * other.e3)) + (float4(anti_wedge.scalar) * other.group6) + (float4(other.scalar) * anti_wedge.group6) - (other.group1.xyzy * float4(anti_wedge.group3.www, anti_wedge.e31)) - float4((other.group3.www * anti_wedge.group1.xyz), anti_wedge.e23 * other.e1), 
            /* e423, e431, e412 */
            (float3(anti_wedge.scalar) * other.group7.xyz) + (float3(anti_wedge.e4) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group7.xyz) + (float3(other.e4) * anti_wedge.group5.xyz) + (anti_wedge.group4.xyz.yzx * other.group1.zxy) + (other.group4.xyz.yzx * anti_wedge.group1.zxy) - (anti_wedge.group4.xyz.zxy * other.group1.yzx) - (other.group4.xyz.zxy * anti_wedge.group1.yzx), 
            /* e235, e315, e125 */
            (float3(anti_wedge.scalar) * other.group8.xyz) + (float3(anti_wedge.e5) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group8.xyz) + (float3(other.e5) * anti_wedge.group5.xyz) + (anti_wedge.group1.yzx * other.group3.zxy) + (anti_wedge.group3.zxy * other.group1.yzx) - (anti_wedge.group1.zxy * other.group3.yzx) - (anti_wedge.group3.yzx * other.group1.zxy), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e2 * other.e435) + (anti_wedge.e5 * other.e423) + (anti_wedge.e45 * other.e23) + (anti_wedge.e425 * other.e3), (anti_wedge.e3 * other.e415) + (anti_wedge.e5 * other.e431) + (anti_wedge.e45 * other.e31) + (anti_wedge.e435 * other.e1), (anti_wedge.e1 * other.e425) + (anti_wedge.e5 * other.e412) + (anti_wedge.e45 * other.e12) + (anti_wedge.e415 * other.e2), -(anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12) - (anti_wedge.e321 * other.e5)) + (float4(anti_wedge.scalar) * other.group9) + (float4(other.scalar) * anti_wedge.group9) + float4((anti_wedge.group5.xyz * other.group3.www), anti_wedge.e2 * other.e315) + float4((anti_wedge.group8.xyz * other.group1.www), anti_wedge.e3 * other.e125) + float4((anti_wedge.group4.xyz.yzx * other.group3.zxy), anti_wedge.e1 * other.e235) + float4((other.group4.xyz.yzx * anti_wedge.group3.zxy), anti_wedge.e5 * other.e321) - (other.group1.yzxz * float4(anti_wedge.group6.zxy, anti_wedge.e125)) - (other.group3.yzxx * float4(anti_wedge.group4.xyz.zxy, anti_wedge.e23)) - float4((float3(other.e5) * anti_wedge.group7.xyz), anti_wedge.e31 * other.e25) - float4((other.group8.xyz * anti_wedge.group1.www), anti_wedge.e235 * other.e1) - float4((other.group4.xyz.zxy * anti_wedge.group3.yzx), anti_wedge.e12 * other.e35) - float4((anti_wedge.group1.zxy * other.group6.yzx), anti_wedge.e315 * other.e2), 
            /* e1234 */
            (anti_wedge.scalar * other.e1234) + (anti_wedge.e321 * other.e4) + (anti_wedge.e423 * other.e1) + (anti_wedge.e431 * other.e2) + (anti_wedge.e412 * other.e3) + (anti_wedge.e1234 * other.scalar) - (anti_wedge.e1 * other.e423) - (anti_wedge.e2 * other.e431) - (anti_wedge.e3 * other.e412) - (anti_wedge.e4 * other.e321) - (anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12) - (anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)
        );
    }
}
// Fancy infix trick (second half)
public AntiScalar operator /(AntiProjectViaHorizonOntoInfixPartial<AntiScalar> lhs, Plane rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiScalar {
    public AntiScalar anti_project_via_horizon_onto(Plane other) {
        AntiPlane anti_wedge = AntiPlane(
            /* e1, e2, e3, e5 */
            float4(this.e12345) * float4(other.e4235 * -1.0, other.e4315 * -1.0, other.e4125 * -1.0, other.e3215)
        );
        return AntiScalar(
            /* e12345 */
            (anti_wedge.e1 * other.e4235) + (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125)
        );
    }
}
// Fancy infix trick (second half)
public AntiScalar operator /(AntiProjectViaHorizonOntoInfixPartial<AntiScalar> lhs, RoundPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiScalar {
    public AntiScalar anti_project_via_horizon_onto(RoundPoint other) {
        Sphere right_dual = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        Sphere anti_wedge = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(this.e12345) * right_dual.group0, 
            /* e1234 */
            this.e12345 * right_dual.e1234
        );
        return AntiScalar(
            /* e12345 */
            (other.e1 * anti_wedge.e4235) + (other.e2 * anti_wedge.e4315) + (other.e3 * anti_wedge.e4125) + (other.e4 * anti_wedge.e3215) + (other.e5 * anti_wedge.e1234)
        );
    }
}
// Fancy infix trick (second half)
public AntiScalar operator /(AntiProjectViaHorizonOntoInfixPartial<AntiScalar> lhs, Scalar rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiScalar {
    public AntiScalar anti_project_via_horizon_onto(Scalar other) {
        return AntiScalar(
            /* e12345 */
            pow(other.scalar, 2) * this.e12345
        );
    }
}
// Fancy infix trick (second half)
public AntiScalar operator /(AntiProjectViaHorizonOntoInfixPartial<AntiScalar> lhs, Sphere rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiScalar {
    public AntiScalar anti_project_via_horizon_onto(Sphere other) {
        RoundPoint right_dual = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(other.group0.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215
        );
        RoundPoint anti_wedge = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(this.e12345) * right_dual.group0, 
            /* e5 */
            this.e12345 * right_dual.e5
        );
        return AntiScalar(
            /* e12345 */
            (anti_wedge.e1 * other.e4235) + (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) + (anti_wedge.e4 * other.e3215) + (anti_wedge.e5 * other.e1234)
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<AntiScalar> lhs, VersorEven rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiScalar {
    public VersorEven anti_project_via_horizon_onto(VersorEven other) {
        VersorOdd right_dual = VersorOdd(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        VersorOdd anti_wedge = VersorOdd(
            /* e41, e42, e43, scalar */
            float4(this.e12345) * right_dual.group0, 
            /* e23, e31, e12, e45 */
            float4(this.e12345) * right_dual.group1, 
            /* e15, e25, e35, e1234 */
            float4(this.e12345) * right_dual.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e12345) * right_dual.group3
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            (float4(anti_wedge.scalar) * other.group0) + (other.group3.wwwx * float4(anti_wedge.group1.xyz, anti_wedge.e4235)) + float4(float3(0.0), (other.e2 * anti_wedge.e4315) + (other.e3 * anti_wedge.e4125) + (other.e4 * anti_wedge.e3215) - (other.e431 * anti_wedge.e25) - (other.e412 * anti_wedge.e35) - (other.e415 * anti_wedge.e23) - (other.e425 * anti_wedge.e31) - (other.e435 * anti_wedge.e12) - (other.e321 * anti_wedge.e45) - (other.e235 * anti_wedge.e41) - (other.e315 * anti_wedge.e42) - (other.e125 * anti_wedge.e43)) + float4((other.group3.zxy * anti_wedge.group0.yzx), other.e5 * anti_wedge.e1234) - float4((other.group3.yzx * anti_wedge.group0.zxy), other.e423 * anti_wedge.e15), 
            /* e415, e425, e435, e321 */
            float4((other.e5 * anti_wedge.e41) + (other.e4 * anti_wedge.e15), (other.e5 * anti_wedge.e42) + (other.e4 * anti_wedge.e25), (other.e5 * anti_wedge.e43) + (other.e4 * anti_wedge.e35), -(other.e2 * anti_wedge.e31) - (other.e3 * anti_wedge.e12)) + (float4(anti_wedge.scalar) * other.group1) - (other.group3.xyzx * anti_wedge.group1.wwwx), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.e5) * anti_wedge.group1.xyz) + (float3(anti_wedge.scalar) * other.group2.xyz) + (other.group3.yzx * anti_wedge.group2.zxy) - (other.group3.zxy * anti_wedge.group2.yzx)), other.e5 * anti_wedge.scalar), 
            /* e1, e2, e3, e4 */
            float4(anti_wedge.scalar) * other.group3
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<AntiScalar> lhs, VersorOdd rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension AntiScalar {
    public VersorEven anti_project_via_horizon_onto(VersorOdd other) {
        VersorEven right_dual = VersorEven(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        VersorEven anti_wedge = VersorEven(
            /* e423, e431, e412, e12345 */
            float4(this.e12345) * right_dual.group0, 
            /* e415, e425, e435, e321 */
            float4(this.e12345) * right_dual.group1, 
            /* e235, e315, e125, e5 */
            float4(this.e12345) * right_dual.group2, 
            /* e1, e2, e3, e4 */
            float4(this.e12345) * right_dual.group3
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            (float4(other.scalar) * anti_wedge.group0) + (anti_wedge.group3.wwwx * float4(other.group1.xyz, other.e4235)) + float4(float3(0.0), (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) + (anti_wedge.e4 * other.e3215) - (anti_wedge.e431 * other.e25) - (anti_wedge.e412 * other.e35) - (anti_wedge.e415 * other.e23) - (anti_wedge.e425 * other.e31) - (anti_wedge.e435 * other.e12) - (anti_wedge.e321 * other.e45) - (anti_wedge.e235 * other.e41) - (anti_wedge.e315 * other.e42) - (anti_wedge.e125 * other.e43)) + float4((anti_wedge.group3.zxy * other.group0.yzx), anti_wedge.e5 * other.e1234) - float4((anti_wedge.group3.yzx * other.group0.zxy), anti_wedge.e423 * other.e15), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e5 * other.e41) + (anti_wedge.e4 * other.e15), (anti_wedge.e5 * other.e42) + (anti_wedge.e4 * other.e25), (anti_wedge.e5 * other.e43) + (anti_wedge.e4 * other.e35), -(anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12)) + (float4(other.scalar) * anti_wedge.group1) - (anti_wedge.group3.xyzx * other.group1.wwwx), 
            /* e235, e315, e125, e5 */
            float4(((float3(anti_wedge.e5) * other.group1.xyz) + (float3(other.scalar) * anti_wedge.group2.xyz) + (anti_wedge.group3.yzx * other.group2.zxy) - (anti_wedge.group3.zxy * other.group2.yzx)), anti_wedge.e5 * other.scalar), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * anti_wedge.group3
        );
    }
}
// Fancy infix trick (first half)
public AntiProjectViaHorizonOntoInfixPartial<Circle> operator /(Circle lhs, AntiProjectViaHorizonOntoInfix rhs) {
    return AntiProjectViaHorizonOntoInfixPartial<Circle>(lhs);
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<Circle> lhs, AntiCircleRotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Circle {
    public VersorEven anti_project_via_horizon_onto(AntiCircleRotor other) {
        CircleRotor right_dual = CircleRotor(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiDipoleInversion anti_wedge = AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(right_dual.e12345) * this.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(right_dual.e12345) * this.group1, 
            /* e235, e315, e125, e4 */
            float4((float3(right_dual.e12345) * this.group2.xyz), -(this.e423 * right_dual.e415) - (this.e431 * right_dual.e425) - (this.e412 * right_dual.e435) - (this.e415 * right_dual.e423) - (this.e425 * right_dual.e431) - (this.e435 * right_dual.e412)), 
            /* e1, e2, e3, e5 */
            float4((this.e412 * right_dual.e315) + (this.e415 * right_dual.e321) + (this.e321 * right_dual.e415) + (this.e315 * right_dual.e412), (this.e423 * right_dual.e125) + (this.e425 * right_dual.e321) + (this.e321 * right_dual.e425) + (this.e125 * right_dual.e423), (this.e431 * right_dual.e235) + (this.e435 * right_dual.e321) + (this.e321 * right_dual.e435) + (this.e235 * right_dual.e431), -(this.e415 * right_dual.e235) - (this.e425 * right_dual.e315) - (this.e435 * right_dual.e125) - (this.e125 * right_dual.e435)) - float4((this.group0.xyz.yzx * right_dual.group2.zxy), this.e235 * right_dual.e415) - float4((this.group2.xyz.zxy * right_dual.group0.xyz.yzx), this.e315 * right_dual.e425)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4((other.e42 * anti_wedge.e3) + (other.e23 * anti_wedge.e4) + (other.scalar * anti_wedge.e423), (other.e43 * anti_wedge.e1) + (other.e31 * anti_wedge.e4) + (other.scalar * anti_wedge.e431), (other.e41 * anti_wedge.e2) + (other.e12 * anti_wedge.e4) + (other.scalar * anti_wedge.e412), -(other.e42 * anti_wedge.e315) - (other.e43 * anti_wedge.e125) - (other.e23 * anti_wedge.e415) - (other.e31 * anti_wedge.e425) - (other.e12 * anti_wedge.e435) - (other.e45 * anti_wedge.e321) - (other.e15 * anti_wedge.e423) - (other.e25 * anti_wedge.e431) - (other.e35 * anti_wedge.e412)) - float4((other.group0.xyz.zxy * anti_wedge.group3.yzx), other.e41 * anti_wedge.e235), 
            /* e415, e425, e435, e321 */
            float4((other.e15 * anti_wedge.e4) + (other.scalar * anti_wedge.e415), (other.e25 * anti_wedge.e4) + (other.scalar * anti_wedge.e425), (other.e35 * anti_wedge.e4) + (other.scalar * anti_wedge.e435), -(other.e31 * anti_wedge.e2) - (other.e12 * anti_wedge.e3)) + float4((other.group0.xyz * anti_wedge.group3.www), other.scalar * anti_wedge.e321) - (other.group1.wwwx * anti_wedge.group3.xyzx), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.scalar) * anti_wedge.group2.xyz) + (float3(anti_wedge.e5) * other.group1.xyz) + (other.group2.zxy * anti_wedge.group3.yzx) - (other.group2.yzx * anti_wedge.group3.zxy)), other.scalar * anti_wedge.e5), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * float4(anti_wedge.group3.xyz, anti_wedge.e4)
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<Circle> lhs, AntiDipoleInversion rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Circle {
    public VersorEven anti_project_via_horizon_onto(AntiDipoleInversion other) {
        DipoleInversion right_dual = DipoleInversion(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiCircleRotor anti_wedge = AntiCircleRotor(
            /* e41, e42, e43 */
            (float3(right_dual.e1234) * this.group1.xyz) + (this.group0.xyz.zxy * right_dual.group3.yzx) - (this.group0.xyz.yzx * right_dual.group3.zxy), 
            /* e23, e31, e12, e45 */
            float4((this.e423 * right_dual.e3215) + (this.e235 * right_dual.e1234), (this.e431 * right_dual.e3215) + (this.e315 * right_dual.e1234), (this.e412 * right_dual.e3215) + (this.e125 * right_dual.e1234), -(this.e425 * right_dual.e4315) - (this.e435 * right_dual.e4125)) - (this.group1.wwwx * right_dual.group3.xyzx), 
            /* e15, e25, e35, scalar */
            float4((this.e415 * right_dual.e3215) + (this.e315 * right_dual.e4125), (this.e425 * right_dual.e3215) + (this.e125 * right_dual.e4235), (this.e435 * right_dual.e3215) + (this.e235 * right_dual.e4315), -(this.e431 * right_dual.e25) - (this.e412 * right_dual.e35) - (this.e415 * right_dual.e23) - (this.e425 * right_dual.e31) - (this.e435 * right_dual.e12) - (this.e321 * right_dual.e45) - (this.e235 * right_dual.e41) - (this.e315 * right_dual.e42) - (this.e125 * right_dual.e43)) - float4((this.group2.xyz.zxy * right_dual.group3.yzx), this.e423 * right_dual.e15)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4((anti_wedge.e42 * other.e3) + (anti_wedge.e23 * other.e4) + (anti_wedge.scalar * other.e423), (anti_wedge.e43 * other.e1) + (anti_wedge.e31 * other.e4) + (anti_wedge.scalar * other.e431), (anti_wedge.e41 * other.e2) + (anti_wedge.e12 * other.e4) + (anti_wedge.scalar * other.e412), -(anti_wedge.e42 * other.e315) - (anti_wedge.e43 * other.e125) - (anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435) - (anti_wedge.e45 * other.e321) - (anti_wedge.e15 * other.e423) - (anti_wedge.e25 * other.e431) - (anti_wedge.e35 * other.e412)) - float4((anti_wedge.group0.xyz.zxy * other.group3.yzx), anti_wedge.e41 * other.e235), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e15 * other.e4) + (anti_wedge.scalar * other.e415), (anti_wedge.e25 * other.e4) + (anti_wedge.scalar * other.e425), (anti_wedge.e35 * other.e4) + (anti_wedge.scalar * other.e435), -(anti_wedge.e31 * other.e2) - (anti_wedge.e12 * other.e3)) + float4((anti_wedge.group0.xyz * other.group3.www), anti_wedge.scalar * other.e321) - (anti_wedge.group1.wwwx * other.group3.xyzx), 
            /* e235, e315, e125, e5 */
            float4(((float3(anti_wedge.scalar) * other.group2.xyz) + (float3(other.e5) * anti_wedge.group1.xyz) + (anti_wedge.group2.zxy * other.group3.yzx) - (anti_wedge.group2.yzx * other.group3.zxy)), anti_wedge.scalar * other.e5), 
            /* e1, e2, e3, e4 */
            float4(anti_wedge.scalar) * float4(other.group3.xyz, other.e4)
        );
    }
}
// Fancy infix trick (second half)
public Circle operator /(AntiProjectViaHorizonOntoInfixPartial<Circle> lhs, AntiDualNum rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Circle {
    public Circle anti_project_via_horizon_onto(AntiDualNum other) {
        DualNum right_dual = DualNum(
            /* e5, e12345 */
            other.group0.xy
        );
        Circle anti_wedge = Circle(
            /* e423, e431, e412 */
            float3(right_dual.e12345) * this.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(right_dual.e12345) * this.group1, 
            /* e235, e315, e125 */
            float3(right_dual.e12345) * this.group2.xyz
        );
        return Circle(
            /* e423, e431, e412 */
            float3(other.scalar) * anti_wedge.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.scalar) * anti_wedge.group1, 
            /* e235, e315, e125 */
            float3(other.scalar) * anti_wedge.group2.xyz
        );
    }
}
// Fancy infix trick (second half)
public AntiFlatPoint operator /(AntiProjectViaHorizonOntoInfixPartial<Circle> lhs, AntiFlatPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Circle {
    public AntiFlatPoint anti_project_via_horizon_onto(AntiFlatPoint other) {
        FlatPoint right_dual = FlatPoint(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiFlatPoint(
            /* e235, e315, e125, e321 */
            float4(-(this.e423 * right_dual.e15) - (this.e431 * right_dual.e25) - (this.e412 * right_dual.e35) - (this.e321 * right_dual.e45)) * other.group0
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<Circle> lhs, AntiFlector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Circle {
    public VersorEven anti_project_via_horizon_onto(AntiFlector other) {
        Flector right_dual = Flector(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiCircleRotor anti_wedge = AntiCircleRotor(
            /* e41, e42, e43 */
            (this.group0.xyz.zxy * right_dual.group1.yzx) - (this.group0.xyz.yzx * right_dual.group1.zxy), 
            /* e23, e31, e12, e45 */
            float4(this.e423 * right_dual.e3215, this.e431 * right_dual.e3215, this.e412 * right_dual.e3215, -(this.e425 * right_dual.e4315) - (this.e435 * right_dual.e4125)) - (this.group1.wwwx * right_dual.group1.xyzx), 
            /* e15, e25, e35, scalar */
            float4((this.e415 * right_dual.e3215) + (this.e315 * right_dual.e4125), (this.e425 * right_dual.e3215) + (this.e125 * right_dual.e4235), (this.e435 * right_dual.e3215) + (this.e235 * right_dual.e4315), -(this.e431 * right_dual.e25) - (this.e412 * right_dual.e35) - (this.e321 * right_dual.e45)) - float4((this.group2.xyz.zxy * right_dual.group1.yzx), this.e423 * right_dual.e15)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(anti_wedge.e42 * other.e3, anti_wedge.e43 * other.e1, anti_wedge.e41 * other.e2, -(anti_wedge.e42 * other.e315) - (anti_wedge.e43 * other.e125) - (anti_wedge.e45 * other.e321)) - float4((anti_wedge.group0.xyz.zxy * other.group1.yzx), anti_wedge.e41 * other.e235), 
            /* e415, e425, e435, e321 */
            float4(float3(0.0), -(anti_wedge.e31 * other.e2) - (anti_wedge.e12 * other.e3)) + float4((anti_wedge.group0.xyz * other.group1.www), anti_wedge.scalar * other.e321) - (anti_wedge.group1.wwwx * other.group1.xyzx), 
            /* e235, e315, e125, e5 */
            float4(((float3(anti_wedge.scalar) * other.group0.xyz) + (float3(other.e5) * anti_wedge.group1.xyz) + (anti_wedge.group2.zxy * other.group1.yzx) - (anti_wedge.group2.yzx * other.group1.zxy)), anti_wedge.scalar * other.e5), 
            /* e1, e2, e3, e4 */
            float4(float3(1.0), 0.0) * float4(anti_wedge.group2.www, 0.0) * float4(other.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
    }
}
// Fancy infix trick (second half)
public Circle operator /(AntiProjectViaHorizonOntoInfixPartial<Circle> lhs, AntiLine rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Circle {
    public Circle anti_project_via_horizon_onto(AntiLine other) {
        Line right_dual = Line(
            /* e415, e425, e435 */
            other.group0.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group1.xyz * float3(-1.0)
        );
        RoundPoint anti_wedge = RoundPoint(
            /* e1, e2, e3, e4 */
            float4((this.e412 * right_dual.e315) + (this.e321 * right_dual.e415), (this.e423 * right_dual.e125) + (this.e321 * right_dual.e425), (this.e431 * right_dual.e235) + (this.e321 * right_dual.e435), -(this.e431 * right_dual.e425) - (this.e412 * right_dual.e435)) - float4((this.group0.xyz.yzx * right_dual.group1.xyz.zxy), this.e423 * right_dual.e415), 
            /* e5 */
            -(this.e415 * right_dual.e235) - (this.e425 * right_dual.e315) - (this.e435 * right_dual.e125) - (this.e235 * right_dual.e415) - (this.e315 * right_dual.e425) - (this.e125 * right_dual.e435)
        );
        return Circle(
            /* e423, e431, e412 */
            float3(anti_wedge.e4) * other.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4((float3(anti_wedge.e4) * other.group1.xyz), -(other.e23 * anti_wedge.e1) - (other.e31 * anti_wedge.e2) - (other.e12 * anti_wedge.e3)), 
            /* e235, e315, e125 */
            (float3(anti_wedge.e5) * other.group0.xyz) + (other.group1.xyz.zxy * anti_wedge.group0.yzx) - (other.group1.xyz.yzx * anti_wedge.group0.zxy)
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<Circle> lhs, AntiMotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Circle {
    public VersorEven anti_project_via_horizon_onto(AntiMotor other) {
        Motor right_dual = Motor(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiDipoleInversion anti_wedge = AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(right_dual.e12345) * this.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(right_dual.e12345) * this.group1, 
            /* e235, e315, e125, e4 */
            float4((float3(right_dual.e12345) * this.group2.xyz), -(this.e423 * right_dual.e415) - (this.e431 * right_dual.e425) - (this.e412 * right_dual.e435)), 
            /* e1, e2, e3, e5 */
            float4((this.e412 * right_dual.e315) + (this.e321 * right_dual.e415), (this.e423 * right_dual.e125) + (this.e321 * right_dual.e425), (this.e431 * right_dual.e235) + (this.e321 * right_dual.e435), -(this.e415 * right_dual.e235) - (this.e425 * right_dual.e315) - (this.e435 * right_dual.e125) - (this.e315 * right_dual.e425) - (this.e125 * right_dual.e435)) - float4((this.group0.xyz.yzx * right_dual.group1.zxy), this.e235 * right_dual.e415)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(anti_wedge.e4 * other.e23, anti_wedge.e4 * other.e31, anti_wedge.e4 * other.e12, -(anti_wedge.e423 * other.e15) - (anti_wedge.e431 * other.e25) - (anti_wedge.e412 * other.e35) - (anti_wedge.e415 * other.e23) - (anti_wedge.e425 * other.e31) - (anti_wedge.e435 * other.e12)) + float4((anti_wedge.group0.xyz * other.group0.www), anti_wedge.e4 * other.e3215), 
            /* e415, e425, e435, e321 */
            float4(anti_wedge.e4 * other.e15, anti_wedge.e4 * other.e25, anti_wedge.e4 * other.e35, -(anti_wedge.e1 * other.e23) - (anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12)) + (float4(other.scalar) * anti_wedge.group1), 
            /* e235, e315, e125, e5 */
            float4(((float3(anti_wedge.e5) * other.group0.xyz) + (float3(other.scalar) * anti_wedge.group2.xyz) + (anti_wedge.group3.yzx * other.group1.zxy) - (anti_wedge.group3.zxy * other.group1.yzx)), anti_wedge.e5 * other.scalar), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * float4(anti_wedge.group3.xyz, anti_wedge.e4)
        );
    }
}
// Fancy infix trick (second half)
public Circle operator /(AntiProjectViaHorizonOntoInfixPartial<Circle> lhs, AntiPlane rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Circle {
    public Circle anti_project_via_horizon_onto(AntiPlane other) {
        Plane right_dual = Plane(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        Dipole anti_wedge = Dipole(
            /* e41, e42, e43 */
            (this.group0.xyz.zxy * right_dual.group0.yzx) - (this.group0.xyz.yzx * right_dual.group0.zxy), 
            /* e23, e31, e12, e45 */
            float4(this.e423 * right_dual.e3215, this.e431 * right_dual.e3215, this.e412 * right_dual.e3215, -(this.e425 * right_dual.e4315) - (this.e435 * right_dual.e4125)) - (this.group1.wwwx * right_dual.group0.xyzx), 
            /* e15, e25, e35 */
            (float3(right_dual.e3215) * this.group1.xyz) + (this.group2.xyz.yzx * right_dual.group0.zxy) - (this.group2.xyz.zxy * right_dual.group0.yzx)
        );
        return Circle(
            /* e423, e431, e412 */
            (anti_wedge.group0.xyz.yzx * other.group0.zxy) - (anti_wedge.group0.xyz.zxy * other.group0.yzx), 
            /* e415, e425, e435, e321 */
            float4(other.e5 * anti_wedge.e41, other.e5 * anti_wedge.e42, other.e5 * anti_wedge.e43, -(other.e2 * anti_wedge.e31) - (other.e3 * anti_wedge.e12)) - (other.group0.xyzx * anti_wedge.group1.wwwx), 
            /* e235, e315, e125 */
            (float3(other.e5) * anti_wedge.group1.xyz) + (anti_wedge.group2.xyz.zxy * other.group0.yzx) - (anti_wedge.group2.xyz.yzx * other.group0.zxy)
        );
    }
}
// Fancy infix trick (second half)
public Circle operator /(AntiProjectViaHorizonOntoInfixPartial<Circle> lhs, Circle rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Circle {
    public Circle anti_project_via_horizon_onto(Circle other) {
        Dipole right_dual = Dipole(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35 */
            other.group2.xyz
        );
        Scalar anti_wedge = Scalar(
            /* scalar */
            -(this.e423 * right_dual.e15) - (this.e431 * right_dual.e25) - (this.e412 * right_dual.e35) - (this.e415 * right_dual.e23) - (this.e425 * right_dual.e31) - (this.e435 * right_dual.e12) - (this.e321 * right_dual.e45) - (this.e235 * right_dual.e41) - (this.e315 * right_dual.e42) - (this.e125 * right_dual.e43)
        );
        return Circle(
            /* e423, e431, e412 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(anti_wedge.scalar) * other.group1, 
            /* e235, e315, e125 */
            float3(anti_wedge.scalar) * other.group2.xyz
        );
    }
}
// Fancy infix trick (second half)
public CircleRotor operator /(AntiProjectViaHorizonOntoInfixPartial<Circle> lhs, CircleRotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Circle {
    public CircleRotor anti_project_via_horizon_onto(CircleRotor other) {
        AntiCircleRotor right_dual = AntiCircleRotor(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        Scalar anti_wedge = Scalar(
            /* scalar */
            -(right_dual.e41 * this.e235) - (right_dual.e42 * this.e315) - (right_dual.e43 * this.e125) - (right_dual.e23 * this.e415) - (right_dual.e31 * this.e425) - (right_dual.e12 * this.e435) - (right_dual.e45 * this.e321) - (right_dual.e15 * this.e423) - (right_dual.e25 * this.e431) - (right_dual.e35 * this.e412)
        );
        return CircleRotor(
            /* e423, e431, e412 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(anti_wedge.scalar) * other.group1, 
            /* e235, e315, e125, e12345 */
            float4(anti_wedge.scalar) * other.group2
        );
    }
}
// Fancy infix trick (second half)
public Circle operator /(AntiProjectViaHorizonOntoInfixPartial<Circle> lhs, Dipole rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Circle {
    public Circle anti_project_via_horizon_onto(Dipole other) {
        Circle right_dual = Circle(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125 */
            other.group2.xyz * float3(-1.0)
        );
        RoundPoint anti_wedge = RoundPoint(
            /* e1, e2, e3, e4 */
            float4((right_dual.e412 * this.e315) + (right_dual.e415 * this.e321) + (right_dual.e321 * this.e415) + (right_dual.e315 * this.e412), (right_dual.e423 * this.e125) + (right_dual.e425 * this.e321) + (right_dual.e321 * this.e425) + (right_dual.e125 * this.e423), (right_dual.e431 * this.e235) + (right_dual.e435 * this.e321) + (right_dual.e321 * this.e435) + (right_dual.e235 * this.e431), -(right_dual.e412 * this.e435) - (right_dual.e415 * this.e423) - (right_dual.e425 * this.e431) - (right_dual.e435 * this.e412)) - float4((right_dual.group0.xyz.yzx * this.group2.xyz.zxy), right_dual.e423 * this.e415) - float4((right_dual.group2.xyz.zxy * this.group0.xyz.yzx), right_dual.e431 * this.e425), 
            /* e5 */
            -(right_dual.e415 * this.e235) - (right_dual.e425 * this.e315) - (right_dual.e435 * this.e125) - (right_dual.e235 * this.e415) - (right_dual.e315 * this.e425) - (right_dual.e125 * this.e435)
        );
        return Circle(
            /* e423, e431, e412 */
            (float3(anti_wedge.e4) * other.group1.xyz) + (other.group0.xyz.yzx * anti_wedge.group0.zxy) - (other.group0.xyz.zxy * anti_wedge.group0.yzx), 
            /* e415, e425, e435, e321 */
            float4((other.e41 * anti_wedge.e5) + (other.e15 * anti_wedge.e4), (other.e42 * anti_wedge.e5) + (other.e25 * anti_wedge.e4), (other.e43 * anti_wedge.e5) + (other.e35 * anti_wedge.e4), -(other.e31 * anti_wedge.e2) - (other.e12 * anti_wedge.e3)) - (other.group1.wwwx * anti_wedge.group0.xyzx), 
            /* e235, e315, e125 */
            (float3(anti_wedge.e5) * other.group1.xyz) + (other.group2.xyz.zxy * anti_wedge.group0.yzx) - (other.group2.xyz.yzx * anti_wedge.group0.zxy)
        );
    }
}
// Fancy infix trick (second half)
public CircleRotor operator /(AntiProjectViaHorizonOntoInfixPartial<Circle> lhs, DipoleInversion rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Circle {
    public CircleRotor anti_project_via_horizon_onto(DipoleInversion other) {
        AntiDipoleInversion right_dual = AntiDipoleInversion(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        RoundPoint anti_wedge = RoundPoint(
            /* e1, e2, e3, e4 */
            float4((right_dual.e412 * this.e315) + (right_dual.e415 * this.e321) + (right_dual.e321 * this.e415) + (right_dual.e315 * this.e412), (right_dual.e423 * this.e125) + (right_dual.e425 * this.e321) + (right_dual.e321 * this.e425) + (right_dual.e125 * this.e423), (right_dual.e431 * this.e235) + (right_dual.e435 * this.e321) + (right_dual.e321 * this.e435) + (right_dual.e235 * this.e431), -(right_dual.e412 * this.e435) - (right_dual.e415 * this.e423) - (right_dual.e425 * this.e431) - (right_dual.e435 * this.e412)) - float4((right_dual.group0.xyz.yzx * this.group2.xyz.zxy), right_dual.e423 * this.e415) - float4((this.group0.xyz.yzx * right_dual.group2.zxy), right_dual.e431 * this.e425), 
            /* e5 */
            -(right_dual.e415 * this.e235) - (right_dual.e425 * this.e315) - (right_dual.e435 * this.e125) - (right_dual.e235 * this.e415) - (right_dual.e315 * this.e425) - (right_dual.e125 * this.e435)
        );
        return CircleRotor(
            /* e423, e431, e412 */
            (float3(anti_wedge.e4) * other.group1.xyz) + (other.group0.xyz.yzx * anti_wedge.group0.zxy) - (other.group0.xyz.zxy * anti_wedge.group0.yzx), 
            /* e415, e425, e435, e321 */
            float4((other.e41 * anti_wedge.e5) + (other.e15 * anti_wedge.e4), (other.e42 * anti_wedge.e5) + (other.e25 * anti_wedge.e4), (other.e43 * anti_wedge.e5) + (other.e35 * anti_wedge.e4), -(other.e31 * anti_wedge.e2) - (other.e12 * anti_wedge.e3)) - (other.group1.wwwx * anti_wedge.group0.xyzx), 
            /* e235, e315, e125, e12345 */
            float4(other.e25 * anti_wedge.e3 * -1.0, other.e35 * anti_wedge.e1 * -1.0, other.e15 * anti_wedge.e2 * -1.0, (other.e4315 * anti_wedge.e2) + (other.e4125 * anti_wedge.e3) + (other.e3215 * anti_wedge.e4)) + (float4(anti_wedge.e5) * float4(other.group1.xyz, other.e1234)) + (anti_wedge.group0.yzxx * float4(other.group2.zxy, other.e4235))
        );
    }
}
// Fancy infix trick (second half)
public AntiFlatPoint operator /(AntiProjectViaHorizonOntoInfixPartial<Circle> lhs, DualNum rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Circle {
    public AntiFlatPoint anti_project_via_horizon_onto(DualNum other) {
        AntiDualNum right_dual = AntiDualNum(
            /* e3215, scalar */
            other.group0.xy * float2(-1.0)
        );
        return AntiFlatPoint(
            /* e235, e315, e125, e321 */
            float4(other.group0.xy.xx, other.e5, 0.0) * float4(float3(1.0), 0.0) * float4(float3(right_dual.e3215 * this.e423, right_dual.e3215 * this.e431, right_dual.e3215 * this.e412), 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
    }
}
// Fancy infix trick (second half)
public Line operator /(AntiProjectViaHorizonOntoInfixPartial<Circle> lhs, FlatPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Circle {
    public Line anti_project_via_horizon_onto(FlatPoint other) {
        AntiFlatPoint right_dual = AntiFlatPoint(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiPlane anti_wedge = AntiPlane(
            /* e1, e2, e3, e5 */
            float4((right_dual.e315 * this.e412) + (right_dual.e321 * this.e415), (right_dual.e125 * this.e423) + (right_dual.e321 * this.e425), (right_dual.e235 * this.e431) + (right_dual.e321 * this.e435), -(right_dual.e315 * this.e425) - (right_dual.e125 * this.e435)) - float4((this.group0.xyz.yzx * right_dual.group0.zxy), right_dual.e235 * this.e415)
        );
        return Line(
            /* e415, e425, e435 */
            float3(other.e45) * anti_wedge.group0.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            (anti_wedge.group0.yzx * other.group0.zxy) - (anti_wedge.group0.zxy * other.group0.yzx)
        );
    }
}
// Fancy infix trick (second half)
public Motor operator /(AntiProjectViaHorizonOntoInfixPartial<Circle> lhs, Flector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Circle {
    public Motor anti_project_via_horizon_onto(Flector other) {
        AntiFlector right_dual = AntiFlector(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiPlane anti_wedge = AntiPlane(
            /* e1, e2, e3, e5 */
            float4((right_dual.e315 * this.e412) + (right_dual.e321 * this.e415), (right_dual.e125 * this.e423) + (right_dual.e321 * this.e425), (right_dual.e235 * this.e431) + (right_dual.e321 * this.e435), -(right_dual.e315 * this.e425) - (right_dual.e125 * this.e435)) - float4((this.group0.xyz.yzx * right_dual.group0.zxy), right_dual.e235 * this.e415)
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4((float3(other.e45) * anti_wedge.group0.xyz * float3(-1.0)), (anti_wedge.e1 * other.e4235) + (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125)), 
            /* e235, e315, e125, e5 */
            float4(((anti_wedge.group0.yzx * other.group0.zxy) - (anti_wedge.group0.zxy * other.group0.yzx)), 0.0)
        );
    }
}
// Fancy infix trick (second half)
public Line operator /(AntiProjectViaHorizonOntoInfixPartial<Circle> lhs, Line rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Circle {
    public Line anti_project_via_horizon_onto(Line other) {
        AntiLine right_dual = AntiLine(
            /* e23, e31, e12 */
            other.group0.xyz, 
            /* e15, e25, e35 */
            other.group1.xyz
        );
        Scalar anti_wedge = Scalar(
            /* scalar */
            -(right_dual.e23 * this.e415) - (right_dual.e31 * this.e425) - (right_dual.e12 * this.e435) - (right_dual.e15 * this.e423) - (right_dual.e25 * this.e431) - (right_dual.e35 * this.e412)
        );
        return Line(
            /* e415, e425, e435 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e235, e315, e125 */
            float3(anti_wedge.scalar) * other.group1.xyz
        );
    }
}
// Fancy infix trick (second half)
public Motor operator /(AntiProjectViaHorizonOntoInfixPartial<Circle> lhs, Motor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Circle {
    public Motor anti_project_via_horizon_onto(Motor other) {
        AntiMotor right_dual = AntiMotor(
            /* e23, e31, e12, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiMotor anti_wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4((float3(right_dual.e3215) * this.group0.xyz), -(right_dual.e23 * this.e415) - (right_dual.e31 * this.e425) - (right_dual.e12 * this.e435) - (right_dual.e15 * this.e423) - (right_dual.e25 * this.e431) - (right_dual.e35 * this.e412)), 
            /* e15, e25, e35, e3215 */
            float4(float3(1.0), 0.0) * float4(right_dual.group1.www, 0.0) * float4(this.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4((anti_wedge.group0.www * other.group0.xyz), (anti_wedge.scalar * other.e12345) - (anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435)), 
            /* e235, e315, e125, e5 */
            float4(((float3(anti_wedge.scalar) * other.group1.xyz) + (float3(other.e5) * anti_wedge.group0.xyz)), anti_wedge.scalar * other.e5)
        );
    }
}
// Fancy infix trick (second half)
public MultiVector operator /(AntiProjectViaHorizonOntoInfixPartial<Circle> lhs, MultiVector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Circle {
    public MultiVector anti_project_via_horizon_onto(MultiVector other) {
        MultiVector right_dual = MultiVector(
            /* scalar, e12345 */
            other.group0.xy.yx * float2(-1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215, 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43 */
            other.group7.xyz, 
            /* e23, e31, e12 */
            other.group6.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412 */
            other.group4.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group3.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        MultiVector anti_wedge = MultiVector(
            /* scalar, e12345 */
            float2(-(this.e423 * right_dual.e15) - (this.e431 * right_dual.e25) - (this.e412 * right_dual.e35) - (this.e415 * right_dual.e23) - (this.e425 * right_dual.e31) - (this.e435 * right_dual.e12) - (this.e321 * right_dual.e45) - (this.e235 * right_dual.e41) - (this.e315 * right_dual.e42) - (this.e125 * right_dual.e43), 0.0), 
            /* e1, e2, e3, e4 */
            float4((this.e412 * right_dual.e315) + (this.e415 * right_dual.e321) + (this.e321 * right_dual.e415) + (this.e315 * right_dual.e412), (this.e423 * right_dual.e125) + (this.e425 * right_dual.e321) + (this.e321 * right_dual.e425) + (this.e125 * right_dual.e423), (this.e431 * right_dual.e235) + (this.e435 * right_dual.e321) + (this.e321 * right_dual.e435) + (this.e235 * right_dual.e431), -(this.e412 * right_dual.e435) - (this.e415 * right_dual.e423) - (this.e425 * right_dual.e431) - (this.e435 * right_dual.e412)) - float4((this.group0.xyz.yzx * right_dual.group8.xyz.zxy), this.e423 * right_dual.e415) - float4((this.group2.xyz.zxy * right_dual.group7.xyz.yzx), this.e431 * right_dual.e425), 
            /* e5 */
            -(this.e415 * right_dual.e235) - (this.e425 * right_dual.e315) - (this.e435 * right_dual.e125) - (this.e235 * right_dual.e415) - (this.e315 * right_dual.e425) - (this.e125 * right_dual.e435), 
            /* e15, e25, e35, e45 */
            float4((this.e415 * right_dual.e3215) + (this.e315 * right_dual.e4125), (this.e425 * right_dual.e3215) + (this.e125 * right_dual.e4235), (this.e435 * right_dual.e3215) + (this.e235 * right_dual.e4315), -(this.e425 * right_dual.e4315) - (this.e435 * right_dual.e4125)) - (right_dual.group9.yzxx * float4(this.group2.xyz.zxy, this.e415)), 
            /* e41, e42, e43 */
            (float3(right_dual.e1234) * this.group1.xyz) + (this.group0.xyz.zxy * right_dual.group9.yzx) - (this.group0.xyz.yzx * right_dual.group9.zxy), 
            /* e23, e31, e12 */
            (float3(right_dual.e3215) * this.group0.xyz) + (float3(right_dual.e1234) * this.group2.xyz) - (float3(this.e321) * right_dual.group9.xyz), 
            /* e415, e425, e435, e321 */
            float4(right_dual.e12345) * this.group1, 
            /* e423, e431, e412 */
            float3(right_dual.e12345) * this.group0.xyz, 
            /* e235, e315, e125 */
            float3(right_dual.e12345) * this.group2.xyz, 
            /* e4235, e4315, e4125, e3215 */
            float4(0.0), 
            /* e1234 */
            0.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(anti_wedge.scalar * other.scalar, (anti_wedge.scalar * other.e12345) + (anti_wedge.e12345 * other.scalar) + (anti_wedge.e1 * other.e4235) + (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) + (anti_wedge.e4 * other.e3215) + (anti_wedge.e5 * other.e1234) + (anti_wedge.e4235 * other.e1) + (anti_wedge.e4315 * other.e2) + (anti_wedge.e4125 * other.e3) + (anti_wedge.e3215 * other.e4) + (anti_wedge.e1234 * other.e5) - (anti_wedge.e15 * other.e423) - (anti_wedge.e25 * other.e431) - (anti_wedge.e35 * other.e412) - (anti_wedge.e45 * other.e321) - (anti_wedge.e41 * other.e235) - (anti_wedge.e42 * other.e315) - (anti_wedge.e43 * other.e125) - (anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435) - (anti_wedge.e415 * other.e23) - (anti_wedge.e425 * other.e31) - (anti_wedge.e435 * other.e12) - (anti_wedge.e321 * other.e45) - (anti_wedge.e423 * other.e15) - (anti_wedge.e431 * other.e25) - (anti_wedge.e412 * other.e35) - (anti_wedge.e235 * other.e41) - (anti_wedge.e315 * other.e42) - (anti_wedge.e125 * other.e43)), 
            /* e1, e2, e3, e4 */
            (float4(anti_wedge.scalar) * other.group1) + (float4(other.scalar) * anti_wedge.group1), 
            /* e5 */
            (anti_wedge.scalar * other.e5) + (anti_wedge.e5 * other.scalar), 
            /* e15, e25, e35, e45 */
            (float4(anti_wedge.scalar) * other.group3) + (float4(anti_wedge.e5) * other.group1) + (float4(other.scalar) * anti_wedge.group3) - (float4(other.e5) * anti_wedge.group1), 
            /* e41, e42, e43 */
            (float3(anti_wedge.scalar) * other.group4.xyz) + (float3(other.scalar) * anti_wedge.group4.xyz) + (float3(other.e4) * anti_wedge.group1.xyz) - (float3(anti_wedge.e4) * other.group1.xyz), 
            /* e23, e31, e12 */
            (float3(anti_wedge.scalar) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group5.xyz) + (anti_wedge.group1.zxy * other.group1.yzx) - (anti_wedge.group1.yzx * other.group1.zxy), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e4 * other.e15) + (anti_wedge.e5 * other.e41) + (anti_wedge.e15 * other.e4) + (anti_wedge.e41 * other.e5), (anti_wedge.e4 * other.e25) + (anti_wedge.e5 * other.e42) + (anti_wedge.e25 * other.e4) + (anti_wedge.e42 * other.e5), (anti_wedge.e4 * other.e35) + (anti_wedge.e5 * other.e43) + (anti_wedge.e35 * other.e4) + (anti_wedge.e43 * other.e5), -(anti_wedge.e1 * other.e23) - (anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12) - (anti_wedge.e12 * other.e3)) + (float4(anti_wedge.scalar) * other.group6) + (float4(other.scalar) * anti_wedge.group6) - (other.group1.xyzy * float4(anti_wedge.group3.www, anti_wedge.e31)) - float4((other.group3.www * anti_wedge.group1.xyz), anti_wedge.e23 * other.e1), 
            /* e423, e431, e412 */
            (float3(anti_wedge.scalar) * other.group7.xyz) + (float3(anti_wedge.e4) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group7.xyz) + (float3(other.e4) * anti_wedge.group5.xyz) + (anti_wedge.group4.xyz.yzx * other.group1.zxy) + (other.group4.xyz.yzx * anti_wedge.group1.zxy) - (anti_wedge.group4.xyz.zxy * other.group1.yzx) - (other.group4.xyz.zxy * anti_wedge.group1.yzx), 
            /* e235, e315, e125 */
            (float3(anti_wedge.scalar) * other.group8.xyz) + (float3(anti_wedge.e5) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group8.xyz) + (float3(other.e5) * anti_wedge.group5.xyz) + (anti_wedge.group1.yzx * other.group3.zxy) + (anti_wedge.group3.zxy * other.group1.yzx) - (anti_wedge.group1.zxy * other.group3.yzx) - (anti_wedge.group3.yzx * other.group1.zxy), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e2 * other.e435) + (anti_wedge.e5 * other.e423) + (anti_wedge.e45 * other.e23) + (anti_wedge.e425 * other.e3), (anti_wedge.e3 * other.e415) + (anti_wedge.e5 * other.e431) + (anti_wedge.e45 * other.e31) + (anti_wedge.e435 * other.e1), (anti_wedge.e1 * other.e425) + (anti_wedge.e5 * other.e412) + (anti_wedge.e45 * other.e12) + (anti_wedge.e415 * other.e2), -(anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12) - (anti_wedge.e321 * other.e5)) + (float4(anti_wedge.scalar) * other.group9) + (float4(other.scalar) * anti_wedge.group9) + float4((anti_wedge.group5.xyz * other.group3.www), anti_wedge.e2 * other.e315) + float4((anti_wedge.group8.xyz * other.group1.www), anti_wedge.e3 * other.e125) + float4((anti_wedge.group4.xyz.yzx * other.group3.zxy), anti_wedge.e1 * other.e235) + float4((other.group4.xyz.yzx * anti_wedge.group3.zxy), anti_wedge.e5 * other.e321) - (other.group1.yzxz * float4(anti_wedge.group6.zxy, anti_wedge.e125)) - (other.group3.yzxx * float4(anti_wedge.group4.xyz.zxy, anti_wedge.e23)) - float4((float3(other.e5) * anti_wedge.group7.xyz), anti_wedge.e31 * other.e25) - float4((other.group8.xyz * anti_wedge.group1.www), anti_wedge.e235 * other.e1) - float4((other.group4.xyz.zxy * anti_wedge.group3.yzx), anti_wedge.e12 * other.e35) - float4((anti_wedge.group1.zxy * other.group6.yzx), anti_wedge.e315 * other.e2), 
            /* e1234 */
            (anti_wedge.scalar * other.e1234) + (anti_wedge.e321 * other.e4) + (anti_wedge.e423 * other.e1) + (anti_wedge.e431 * other.e2) + (anti_wedge.e412 * other.e3) + (anti_wedge.e1234 * other.scalar) - (anti_wedge.e1 * other.e423) - (anti_wedge.e2 * other.e431) - (anti_wedge.e3 * other.e412) - (anti_wedge.e4 * other.e321) - (anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12) - (anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)
        );
    }
}
// Fancy infix trick (second half)
public Circle operator /(AntiProjectViaHorizonOntoInfixPartial<Circle> lhs, RoundPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Circle {
    public Circle anti_project_via_horizon_onto(RoundPoint other) {
        Sphere right_dual = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        Dipole anti_wedge = Dipole(
            /* e41, e42, e43 */
            (float3(right_dual.e1234) * this.group1.xyz) + (this.group0.xyz.zxy * right_dual.group0.yzx) - (this.group0.xyz.yzx * right_dual.group0.zxy), 
            /* e23, e31, e12, e45 */
            float4((this.e423 * right_dual.e3215) + (this.e235 * right_dual.e1234), (this.e431 * right_dual.e3215) + (this.e315 * right_dual.e1234), (this.e412 * right_dual.e3215) + (this.e125 * right_dual.e1234), -(this.e425 * right_dual.e4315) - (this.e435 * right_dual.e4125)) - (this.group1.wwwx * right_dual.group0.xyzx), 
            /* e15, e25, e35 */
            (float3(right_dual.e3215) * this.group1.xyz) + (this.group2.xyz.yzx * right_dual.group0.zxy) - (this.group2.xyz.zxy * right_dual.group0.yzx)
        );
        return Circle(
            /* e423, e431, e412 */
            (float3(other.e4) * anti_wedge.group1.xyz) + (anti_wedge.group0.xyz.yzx * other.group0.zxy) - (anti_wedge.group0.xyz.zxy * other.group0.yzx), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e41 * other.e5) + (anti_wedge.e15 * other.e4), (anti_wedge.e42 * other.e5) + (anti_wedge.e25 * other.e4), (anti_wedge.e43 * other.e5) + (anti_wedge.e35 * other.e4), -(anti_wedge.e31 * other.e2) - (anti_wedge.e12 * other.e3)) - (anti_wedge.group1.wwwx * other.group0.xyzx), 
            /* e235, e315, e125 */
            (float3(other.e5) * anti_wedge.group1.xyz) + (anti_wedge.group2.xyz.zxy * other.group0.yzx) - (anti_wedge.group2.xyz.yzx * other.group0.zxy)
        );
    }
}
// Fancy infix trick (second half)
public Circle operator /(AntiProjectViaHorizonOntoInfixPartial<Circle> lhs, Scalar rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Circle {
    public Circle anti_project_via_horizon_onto(Scalar other) {
        AntiScalar right_dual = AntiScalar(
            /* e12345 */
            other.scalar
        );
        Circle anti_wedge = Circle(
            /* e423, e431, e412 */
            float3(right_dual.e12345) * this.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(right_dual.e12345) * this.group1, 
            /* e235, e315, e125 */
            float3(right_dual.e12345) * this.group2.xyz
        );
        return Circle(
            /* e423, e431, e412 */
            float3(other.scalar) * anti_wedge.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.scalar) * anti_wedge.group1, 
            /* e235, e315, e125 */
            float3(other.scalar) * anti_wedge.group2.xyz
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<Circle> lhs, VersorEven rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Circle {
    public VersorEven anti_project_via_horizon_onto(VersorEven other) {
        VersorOdd right_dual = VersorOdd(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiCircleRotor anti_wedge = AntiCircleRotor(
            /* e41, e42, e43 */
            (float3(right_dual.e1234) * this.group1.xyz) + (this.group0.xyz.zxy * right_dual.group3.yzx) - (this.group0.xyz.yzx * right_dual.group3.zxy), 
            /* e23, e31, e12, e45 */
            float4((this.e423 * right_dual.e3215) + (this.e235 * right_dual.e1234), (this.e431 * right_dual.e3215) + (this.e315 * right_dual.e1234), (this.e412 * right_dual.e3215) + (this.e125 * right_dual.e1234), -(this.e425 * right_dual.e4315) - (this.e435 * right_dual.e4125)) - (this.group1.wwwx * right_dual.group3.xyzx), 
            /* e15, e25, e35, scalar */
            float4((this.e415 * right_dual.e3215) + (this.e315 * right_dual.e4125), (this.e425 * right_dual.e3215) + (this.e125 * right_dual.e4235), (this.e435 * right_dual.e3215) + (this.e235 * right_dual.e4315), -(this.e431 * right_dual.e25) - (this.e412 * right_dual.e35) - (this.e415 * right_dual.e23) - (this.e425 * right_dual.e31) - (this.e435 * right_dual.e12) - (this.e321 * right_dual.e45) - (this.e235 * right_dual.e41) - (this.e315 * right_dual.e42) - (this.e125 * right_dual.e43)) - float4((this.group2.xyz.zxy * right_dual.group3.yzx), this.e423 * right_dual.e15)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4((anti_wedge.e23 * other.e4) + (anti_wedge.scalar * other.e423), (anti_wedge.e31 * other.e4) + (anti_wedge.scalar * other.e431), (anti_wedge.e12 * other.e4) + (anti_wedge.scalar * other.e412), -(anti_wedge.e42 * other.e315) - (anti_wedge.e43 * other.e125) - (anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435) - (anti_wedge.e45 * other.e321) - (anti_wedge.e15 * other.e423) - (anti_wedge.e25 * other.e431) - (anti_wedge.e35 * other.e412)) + float4((anti_wedge.group0.xyz.yzx * other.group3.zxy), anti_wedge.scalar * other.e12345) - float4((anti_wedge.group0.xyz.zxy * other.group3.yzx), anti_wedge.e41 * other.e235), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e15 * other.e4) + (anti_wedge.scalar * other.e415), (anti_wedge.e25 * other.e4) + (anti_wedge.scalar * other.e425), (anti_wedge.e35 * other.e4) + (anti_wedge.scalar * other.e435), -(anti_wedge.e31 * other.e2) - (anti_wedge.e12 * other.e3)) + float4((anti_wedge.group0.xyz * other.group2.www), anti_wedge.scalar * other.e321) - (anti_wedge.group1.wwwx * other.group3.xyzx), 
            /* e235, e315, e125, e5 */
            float4(((float3(anti_wedge.scalar) * other.group2.xyz) + (float3(other.e5) * anti_wedge.group1.xyz) + (anti_wedge.group2.zxy * other.group3.yzx) - (anti_wedge.group2.yzx * other.group3.zxy)), anti_wedge.scalar * other.e5), 
            /* e1, e2, e3, e4 */
            float4(anti_wedge.scalar) * other.group3
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<Circle> lhs, VersorOdd rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Circle {
    public VersorEven anti_project_via_horizon_onto(VersorOdd other) {
        VersorEven right_dual = VersorEven(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiDipoleInversion anti_wedge = AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(right_dual.e12345) * this.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(right_dual.e12345) * this.group1, 
            /* e235, e315, e125, e4 */
            float4((float3(right_dual.e12345) * this.group2.xyz), -(this.e423 * right_dual.e415) - (this.e431 * right_dual.e425) - (this.e412 * right_dual.e435) - (this.e415 * right_dual.e423) - (this.e425 * right_dual.e431) - (this.e435 * right_dual.e412)), 
            /* e1, e2, e3, e5 */
            float4((this.e412 * right_dual.e315) + (this.e415 * right_dual.e321) + (this.e321 * right_dual.e415) + (this.e315 * right_dual.e412), (this.e423 * right_dual.e125) + (this.e425 * right_dual.e321) + (this.e321 * right_dual.e425) + (this.e125 * right_dual.e423), (this.e431 * right_dual.e235) + (this.e435 * right_dual.e321) + (this.e321 * right_dual.e435) + (this.e235 * right_dual.e431), -(this.e415 * right_dual.e235) - (this.e425 * right_dual.e315) - (this.e435 * right_dual.e125) - (this.e125 * right_dual.e435)) - float4((this.group0.xyz.yzx * right_dual.group2.zxy), this.e235 * right_dual.e415) - float4((this.group2.xyz.zxy * right_dual.group0.yzx), this.e315 * right_dual.e425)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            (anti_wedge.group3.zxyy * float4(other.group0.yzx, other.e4315)) + float4(float3(0.0), (anti_wedge.e3 * other.e4125) + (anti_wedge.e5 * other.e1234) - (anti_wedge.e431 * other.e25) - (anti_wedge.e412 * other.e35) - (anti_wedge.e415 * other.e23) - (anti_wedge.e425 * other.e31) - (anti_wedge.e435 * other.e12) - (anti_wedge.e321 * other.e45) - (anti_wedge.e235 * other.e41) - (anti_wedge.e315 * other.e42) - (anti_wedge.e125 * other.e43)) + float4((anti_wedge.group0.xyz * other.group0.www), anti_wedge.e4 * other.e3215) + float4((anti_wedge.group2.www * other.group1.xyz), anti_wedge.e1 * other.e4235) - float4((anti_wedge.group3.yzx * other.group0.zxy), anti_wedge.e423 * other.e15), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e4 * other.e15) + (anti_wedge.e5 * other.e41), (anti_wedge.e4 * other.e25) + (anti_wedge.e5 * other.e42), (anti_wedge.e4 * other.e35) + (anti_wedge.e5 * other.e43), -(anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12)) + (float4(other.scalar) * anti_wedge.group1) - (anti_wedge.group3.xyzx * other.group1.wwwx), 
            /* e235, e315, e125, e5 */
            float4(((float3(anti_wedge.e5) * other.group1.xyz) + (float3(other.scalar) * anti_wedge.group2.xyz) + (anti_wedge.group3.yzx * other.group2.zxy) - (anti_wedge.group3.zxy * other.group2.yzx)), anti_wedge.e5 * other.scalar), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * float4(anti_wedge.group3.xyz, anti_wedge.e4)
        );
    }
}
// Fancy infix trick (first half)
public AntiProjectViaHorizonOntoInfixPartial<CircleRotor> operator /(CircleRotor lhs, AntiProjectViaHorizonOntoInfix rhs) {
    return AntiProjectViaHorizonOntoInfixPartial<CircleRotor>(lhs);
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<CircleRotor> lhs, AntiCircleRotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension CircleRotor {
    public VersorEven anti_project_via_horizon_onto(AntiCircleRotor other) {
        CircleRotor right_dual = CircleRotor(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        VersorEven anti_wedge = VersorEven(
            /* e423, e431, e412, e12345 */
            float4(((float3(right_dual.e12345) * this.group0.xyz) + (float3(this.e12345) * right_dual.group0.xyz)), right_dual.e12345 * this.e12345), 
            /* e415, e425, e435, e321 */
            (float4(right_dual.e12345) * this.group1) + (float4(this.e12345) * right_dual.group1), 
            /* e235, e315, e125, e5 */
            float4((right_dual.e235 * this.e12345) + (right_dual.e12345 * this.e235), (right_dual.e315 * this.e12345) + (right_dual.e12345 * this.e315), (right_dual.e125 * this.e12345) + (right_dual.e12345 * this.e125), -(right_dual.e415 * this.e235) - (right_dual.e425 * this.e315) - (right_dual.e435 * this.e125) - (right_dual.e235 * this.e415) - (right_dual.e315 * this.e425) - (right_dual.e125 * this.e435)), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e412 * this.e315) + (right_dual.e415 * this.e321) + (right_dual.e321 * this.e415) + (right_dual.e315 * this.e412), (right_dual.e423 * this.e125) + (right_dual.e425 * this.e321) + (right_dual.e321 * this.e425) + (right_dual.e125 * this.e423), (right_dual.e431 * this.e235) + (right_dual.e435 * this.e321) + (right_dual.e321 * this.e435) + (right_dual.e235 * this.e431), -(right_dual.e412 * this.e435) - (right_dual.e415 * this.e423) - (right_dual.e425 * this.e431) - (right_dual.e435 * this.e412)) - float4((right_dual.group0.xyz.yzx * this.group2.zxy), right_dual.e423 * this.e415) - float4((this.group0.xyz.yzx * right_dual.group2.zxy), right_dual.e431 * this.e425)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4((other.e23 * anti_wedge.e4) + (other.scalar * anti_wedge.e423), (other.e31 * anti_wedge.e4) + (other.scalar * anti_wedge.e431), (other.e12 * anti_wedge.e4) + (other.scalar * anti_wedge.e412), -(other.e42 * anti_wedge.e315) - (other.e43 * anti_wedge.e125) - (other.e23 * anti_wedge.e415) - (other.e31 * anti_wedge.e425) - (other.e12 * anti_wedge.e435) - (other.e45 * anti_wedge.e321) - (other.e15 * anti_wedge.e423) - (other.e25 * anti_wedge.e431) - (other.e35 * anti_wedge.e412)) + float4((other.group0.xyz.yzx * anti_wedge.group3.zxy), other.scalar * anti_wedge.e12345) - float4((other.group0.xyz.zxy * anti_wedge.group3.yzx), other.e41 * anti_wedge.e235), 
            /* e415, e425, e435, e321 */
            float4((other.e15 * anti_wedge.e4) + (other.scalar * anti_wedge.e415), (other.e25 * anti_wedge.e4) + (other.scalar * anti_wedge.e425), (other.e35 * anti_wedge.e4) + (other.scalar * anti_wedge.e435), -(other.e31 * anti_wedge.e2) - (other.e12 * anti_wedge.e3)) + float4((other.group0.xyz * anti_wedge.group2.www), other.scalar * anti_wedge.e321) - (other.group1.wwwx * anti_wedge.group3.xyzx), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.scalar) * anti_wedge.group2.xyz) + (float3(anti_wedge.e5) * other.group1.xyz) + (other.group2.zxy * anti_wedge.group3.yzx) - (other.group2.yzx * anti_wedge.group3.zxy)), other.scalar * anti_wedge.e5), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * anti_wedge.group3
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<CircleRotor> lhs, AntiDipoleInversion rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension CircleRotor {
    public VersorEven anti_project_via_horizon_onto(AntiDipoleInversion other) {
        DipoleInversion right_dual = DipoleInversion(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        VersorOdd anti_wedge = VersorOdd(
            /* e41, e42, e43, scalar */
            float4((this.e412 * right_dual.e4315) + (this.e415 * right_dual.e1234) + (this.e12345 * right_dual.e41), (this.e423 * right_dual.e4125) + (this.e425 * right_dual.e1234) + (this.e12345 * right_dual.e42), (this.e431 * right_dual.e4235) + (this.e435 * right_dual.e1234) + (this.e12345 * right_dual.e43), -(this.e431 * right_dual.e25) - (this.e412 * right_dual.e35) - (this.e415 * right_dual.e23) - (this.e425 * right_dual.e31) - (this.e435 * right_dual.e12) - (this.e321 * right_dual.e45) - (this.e235 * right_dual.e41) - (this.e315 * right_dual.e42) - (this.e125 * right_dual.e43)) - float4((this.group0.xyz.yzx * right_dual.group3.zxy), this.e423 * right_dual.e15), 
            /* e23, e31, e12, e45 */
            float4((this.e235 * right_dual.e1234) + (this.e12345 * right_dual.e23), (this.e315 * right_dual.e1234) + (this.e12345 * right_dual.e31), (this.e125 * right_dual.e1234) + (this.e12345 * right_dual.e12), -(this.e425 * right_dual.e4315) - (this.e435 * right_dual.e4125)) + float4((this.group0.xyz * right_dual.group3.www), this.e12345 * right_dual.e45) - (this.group1.wwwx * right_dual.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(this.e12345) * right_dual.group2.xyz) + (float3(right_dual.e3215) * this.group1.xyz) + (this.group2.yzx * right_dual.group3.zxy) - (this.group2.zxy * right_dual.group3.yzx)), this.e12345 * right_dual.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e12345) * right_dual.group3
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            (other.group3.zxyy * float4(anti_wedge.group0.yzx, anti_wedge.e4315)) + float4(float3(0.0), (other.e3 * anti_wedge.e4125) + (other.e5 * anti_wedge.e1234) - (other.e431 * anti_wedge.e25) - (other.e412 * anti_wedge.e35) - (other.e415 * anti_wedge.e23) - (other.e425 * anti_wedge.e31) - (other.e435 * anti_wedge.e12) - (other.e321 * anti_wedge.e45) - (other.e235 * anti_wedge.e41) - (other.e315 * anti_wedge.e42) - (other.e125 * anti_wedge.e43)) + float4((other.group0.xyz * anti_wedge.group0.www), other.e4 * anti_wedge.e3215) + float4((other.group2.www * anti_wedge.group1.xyz), other.e1 * anti_wedge.e4235) - float4((other.group3.yzx * anti_wedge.group0.zxy), other.e423 * anti_wedge.e15), 
            /* e415, e425, e435, e321 */
            float4((other.e4 * anti_wedge.e15) + (other.e5 * anti_wedge.e41), (other.e4 * anti_wedge.e25) + (other.e5 * anti_wedge.e42), (other.e4 * anti_wedge.e35) + (other.e5 * anti_wedge.e43), -(other.e2 * anti_wedge.e31) - (other.e3 * anti_wedge.e12)) + (float4(anti_wedge.scalar) * other.group1) - (other.group3.xyzx * anti_wedge.group1.wwwx), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.e5) * anti_wedge.group1.xyz) + (float3(anti_wedge.scalar) * other.group2.xyz) + (other.group3.yzx * anti_wedge.group2.zxy) - (other.group3.zxy * anti_wedge.group2.yzx)), other.e5 * anti_wedge.scalar), 
            /* e1, e2, e3, e4 */
            float4(anti_wedge.scalar) * float4(other.group3.xyz, other.e4)
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<CircleRotor> lhs, AntiDualNum rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension CircleRotor {
    public VersorEven anti_project_via_horizon_onto(AntiDualNum other) {
        DualNum right_dual = DualNum(
            /* e5, e12345 */
            other.group0.xy
        );
        VersorEven anti_wedge = VersorEven(
            /* e423, e431, e412, e12345 */
            float4(right_dual.e12345) * float4(this.group0.xyz, this.e12345), 
            /* e415, e425, e435, e321 */
            float4(right_dual.e12345) * this.group1, 
            /* e235, e315, e125, e5 */
            this.group2 * float4(right_dual.group0.xy.yy, right_dual.e12345, right_dual.e5), 
            /* e1, e2, e3, e4 */
            float4(0.0)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(other.group0.xy.yy, other.scalar, (other.e3215 * anti_wedge.e4) + (other.scalar * anti_wedge.e12345)) * float4(anti_wedge.group0.xyz, 1.0), 
            /* e415, e425, e435, e321 */
            float4(other.scalar) * anti_wedge.group1, 
            /* e235, e315, e125, e5 */
            float4(other.scalar) * anti_wedge.group2, 
            /* e1, e2, e3, e4 */
            float4(0.0)
        );
    }
}
// Fancy infix trick (second half)
public CircleRotor operator /(AntiProjectViaHorizonOntoInfixPartial<CircleRotor> lhs, AntiFlatPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension CircleRotor {
    public CircleRotor anti_project_via_horizon_onto(AntiFlatPoint other) {
        FlatPoint right_dual = FlatPoint(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiCircleRotor anti_wedge = AntiCircleRotor(
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12, e45 */
            float4(float3(0.0), this.e12345 * right_dual.e45), 
            /* e15, e25, e35, scalar */
            float4((this.group2.www * right_dual.group0.xyz), -(this.e423 * right_dual.e15) - (this.e431 * right_dual.e25) - (this.e412 * right_dual.e35) - (this.e321 * right_dual.e45))
        );
        return CircleRotor(
            /* e423, e431, e412 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(float3(0.0), anti_wedge.scalar * other.e321), 
            /* e235, e315, e125, e12345 */
            float4((anti_wedge.group2.www * other.group0.xyz), -(anti_wedge.e41 * other.e235) - (anti_wedge.e42 * other.e315) - (anti_wedge.e43 * other.e125) - (anti_wedge.e45 * other.e321))
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<CircleRotor> lhs, AntiFlector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension CircleRotor {
    public VersorEven anti_project_via_horizon_onto(AntiFlector other) {
        Flector right_dual = Flector(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        VersorOdd anti_wedge = VersorOdd(
            /* e41, e42, e43, scalar */
            float4(this.e412 * right_dual.e4315, this.e423 * right_dual.e4125, this.e431 * right_dual.e4235, -(this.e431 * right_dual.e25) - (this.e412 * right_dual.e35) - (this.e321 * right_dual.e45)) - float4((this.group0.xyz.yzx * right_dual.group1.zxy), this.e423 * right_dual.e15), 
            /* e23, e31, e12, e45 */
            float4(float3(0.0), -(this.e425 * right_dual.e4315) - (this.e435 * right_dual.e4125)) + float4((this.group0.xyz * right_dual.group1.www), this.e12345 * right_dual.e45) - (this.group1.wwwx * right_dual.group1.xyzx), 
            /* e15, e25, e35, e1234 */
            float4((float3(this.e12345) * right_dual.group0.xyz), 0.0) + float4((float3(right_dual.e3215) * this.group1.xyz), 0.0) + float4((this.group2.yzx * right_dual.group1.zxy), 0.0) - float4((this.group2.zxy * right_dual.group1.yzx), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e12345) * right_dual.group1
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            (other.group1.zxyx * float4(anti_wedge.group0.yzx, anti_wedge.e4235)) + float4(float3(0.0), (other.e2 * anti_wedge.e4315) + (other.e3 * anti_wedge.e4125) + (other.e5 * anti_wedge.e1234) - (other.e315 * anti_wedge.e42) - (other.e125 * anti_wedge.e43) - (other.e321 * anti_wedge.e45)) - (anti_wedge.group0.zxyx * float4(other.group1.yzx, other.e235)), 
            /* e415, e425, e435, e321 */
            (anti_wedge.group0 * float4(other.group1.www, other.e321)) + float4(float3(0.0), -(other.e2 * anti_wedge.e31) - (other.e3 * anti_wedge.e12)) - (other.group1.xyzx * anti_wedge.group1.wwwx), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.e5) * anti_wedge.group1.xyz) + (float3(anti_wedge.scalar) * other.group0.xyz) + (other.group1.yzx * anti_wedge.group2.zxy) - (other.group1.zxy * anti_wedge.group2.yzx)), other.e5 * anti_wedge.scalar), 
            /* e1, e2, e3, e4 */
            float4(float3(1.0), 0.0) * float4(anti_wedge.group0.www, 0.0) * float4(other.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
    }
}
// Fancy infix trick (second half)
public CircleRotor operator /(AntiProjectViaHorizonOntoInfixPartial<CircleRotor> lhs, AntiLine rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension CircleRotor {
    public CircleRotor anti_project_via_horizon_onto(AntiLine other) {
        Line right_dual = Line(
            /* e415, e425, e435 */
            other.group0.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group1.xyz * float3(-1.0)
        );
        AntiDipoleInversion anti_wedge = AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(float3(1.0), 0.0) * float4(right_dual.group0.xyz, 0.0) * float4(this.group2.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e235, e315, e125, e4 */
            float4((float3(this.e12345) * right_dual.group1.xyz), -(this.e423 * right_dual.e415) - (this.e431 * right_dual.e425) - (this.e412 * right_dual.e435)), 
            /* e1, e2, e3, e5 */
            float4((this.e412 * right_dual.e315) + (this.e321 * right_dual.e415), (this.e423 * right_dual.e125) + (this.e321 * right_dual.e425), (this.e431 * right_dual.e235) + (this.e321 * right_dual.e435), -(this.e415 * right_dual.e235) - (this.e425 * right_dual.e315) - (this.e435 * right_dual.e125) - (this.e315 * right_dual.e425) - (this.e125 * right_dual.e435)) - float4((this.group0.xyz.yzx * right_dual.group1.xyz.zxy), this.e235 * right_dual.e415)
        );
        return CircleRotor(
            /* e423, e431, e412 */
            float3(anti_wedge.e4) * other.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4((float3(anti_wedge.e4) * other.group1.xyz), -(anti_wedge.e1 * other.e23) - (anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12)), 
            /* e235, e315, e125, e12345 */
            float4((anti_wedge.e2 * other.e35) + (anti_wedge.e5 * other.e23), (anti_wedge.e3 * other.e15) + (anti_wedge.e5 * other.e31), (anti_wedge.e1 * other.e25) + (anti_wedge.e5 * other.e12), -(anti_wedge.e431 * other.e25) - (anti_wedge.e412 * other.e35) - (anti_wedge.e415 * other.e23) - (anti_wedge.e425 * other.e31) - (anti_wedge.e435 * other.e12)) - float4((other.group1.xyz.yzx * anti_wedge.group3.zxy), anti_wedge.e423 * other.e15)
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<CircleRotor> lhs, AntiMotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension CircleRotor {
    public VersorEven anti_project_via_horizon_onto(AntiMotor other) {
        Motor right_dual = Motor(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        VersorEven anti_wedge = VersorEven(
            /* e423, e431, e412, e12345 */
            float4(right_dual.e12345) * float4(this.group0.xyz, this.e12345), 
            /* e415, e425, e435, e321 */
            float4(((float3(this.e12345) * right_dual.group0.xyz) + (float3(right_dual.e12345) * this.group1.xyz)), this.e321 * right_dual.e12345), 
            /* e235, e315, e125, e5 */
            float4(this.e12345 * right_dual.e235, this.e12345 * right_dual.e315, this.e12345 * right_dual.e125, -(this.e415 * right_dual.e235) - (this.e425 * right_dual.e315) - (this.e435 * right_dual.e125) - (this.e235 * right_dual.e415) - (this.e315 * right_dual.e425) - (this.e125 * right_dual.e435)) + (this.group2 * float4(right_dual.group0.www, right_dual.e5)), 
            /* e1, e2, e3, e4 */
            float4((this.e412 * right_dual.e315) + (this.e321 * right_dual.e415), (this.e423 * right_dual.e125) + (this.e321 * right_dual.e425), (this.e431 * right_dual.e235) + (this.e321 * right_dual.e435), -(this.e431 * right_dual.e425) - (this.e412 * right_dual.e435)) - float4((this.group0.xyz.yzx * right_dual.group1.zxy), this.e423 * right_dual.e415)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            (other.group0 * float4(anti_wedge.group3.www, anti_wedge.e12345)) + float4(float3(0.0), -(other.e23 * anti_wedge.e415) - (other.e31 * anti_wedge.e425) - (other.e12 * anti_wedge.e435) - (other.e15 * anti_wedge.e423) - (other.e25 * anti_wedge.e431) - (other.e35 * anti_wedge.e412)) + float4((other.group0.www * anti_wedge.group0.xyz), other.e3215 * anti_wedge.e4), 
            /* e415, e425, e435, e321 */
            float4(other.e15 * anti_wedge.e4, other.e25 * anti_wedge.e4, other.e35 * anti_wedge.e4, -(other.e23 * anti_wedge.e1) - (other.e31 * anti_wedge.e2) - (other.e12 * anti_wedge.e3)) + (float4(other.scalar) * anti_wedge.group1), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.scalar) * anti_wedge.group2.xyz) + (float3(anti_wedge.e5) * other.group0.xyz) + (other.group1.zxy * anti_wedge.group3.yzx) - (other.group1.yzx * anti_wedge.group3.zxy)), other.scalar * anti_wedge.e5), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * anti_wedge.group3
        );
    }
}
// Fancy infix trick (second half)
public CircleRotor operator /(AntiProjectViaHorizonOntoInfixPartial<CircleRotor> lhs, AntiPlane rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension CircleRotor {
    public CircleRotor anti_project_via_horizon_onto(AntiPlane other) {
        Plane right_dual = Plane(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        DipoleInversion anti_wedge = DipoleInversion(
            /* e41, e42, e43 */
            (this.group0.xyz.zxy * right_dual.group0.yzx) - (this.group0.xyz.yzx * right_dual.group0.zxy), 
            /* e23, e31, e12, e45 */
            float4(this.e423 * right_dual.e3215, this.e431 * right_dual.e3215, this.e412 * right_dual.e3215, -(this.e425 * right_dual.e4315) - (this.e435 * right_dual.e4125)) - (this.group1.wwwx * right_dual.group0.xyzx), 
            /* e15, e25, e35, e1234 */
            float4((float3(right_dual.e3215) * this.group1.xyz), 0.0) + float4((this.group2.yzx * right_dual.group0.zxy), 0.0) - float4((this.group2.zxy * right_dual.group0.yzx), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e12345) * right_dual.group0
        );
        return CircleRotor(
            /* e423, e431, e412 */
            (anti_wedge.group0.xyz.yzx * other.group0.zxy) - (anti_wedge.group0.xyz.zxy * other.group0.yzx), 
            /* e415, e425, e435, e321 */
            float4(other.e5 * anti_wedge.e41, other.e5 * anti_wedge.e42, other.e5 * anti_wedge.e43, -(other.e2 * anti_wedge.e31) - (other.e3 * anti_wedge.e12)) - (other.group0.xyzx * anti_wedge.group1.wwwx), 
            /* e235, e315, e125, e12345 */
            float4(other.e3 * anti_wedge.e25 * -1.0, other.e1 * anti_wedge.e35 * -1.0, other.e2 * anti_wedge.e15 * -1.0, (other.e3 * anti_wedge.e4125) + (other.e5 * anti_wedge.e1234)) + (other.group0.yzxx * float4(anti_wedge.group2.zxy, anti_wedge.e4235)) + (other.group0.wwwy * float4(anti_wedge.group1.xyz, anti_wedge.e4315))
        );
    }
}
// Fancy infix trick (second half)
public AntiScalar operator /(AntiProjectViaHorizonOntoInfixPartial<CircleRotor> lhs, AntiScalar rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension CircleRotor {
    public AntiScalar anti_project_via_horizon_onto(AntiScalar other) {
        return AntiScalar(
            /* e12345 */
            pow(other.e12345, 2) * this.e12345 * -1.0
        );
    }
}
// Fancy infix trick (second half)
public CircleRotor operator /(AntiProjectViaHorizonOntoInfixPartial<CircleRotor> lhs, Circle rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension CircleRotor {
    public CircleRotor anti_project_via_horizon_onto(Circle other) {
        Dipole right_dual = Dipole(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35 */
            other.group2.xyz
        );
        AntiCircleRotor anti_wedge = AntiCircleRotor(
            /* e41, e42, e43 */
            float3(this.e12345) * right_dual.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(this.e12345) * right_dual.group1, 
            /* e15, e25, e35, scalar */
            float4((float3(this.e12345) * right_dual.group2.xyz), -(this.e423 * right_dual.e15) - (this.e431 * right_dual.e25) - (this.e412 * right_dual.e35) - (this.e415 * right_dual.e23) - (this.e425 * right_dual.e31) - (this.e435 * right_dual.e12) - (this.e321 * right_dual.e45) - (this.e235 * right_dual.e41) - (this.e315 * right_dual.e42) - (this.e125 * right_dual.e43))
        );
        return CircleRotor(
            /* e423, e431, e412 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(anti_wedge.scalar) * other.group1, 
            /* e235, e315, e125, e12345 */
            float4((float3(anti_wedge.scalar) * other.group2.xyz), -(anti_wedge.e41 * other.e235) - (anti_wedge.e42 * other.e315) - (anti_wedge.e43 * other.e125) - (anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435) - (anti_wedge.e45 * other.e321) - (anti_wedge.e15 * other.e423) - (anti_wedge.e25 * other.e431) - (anti_wedge.e35 * other.e412))
        );
    }
}
// Fancy infix trick (second half)
public CircleRotor operator /(AntiProjectViaHorizonOntoInfixPartial<CircleRotor> lhs, CircleRotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension CircleRotor {
    public CircleRotor anti_project_via_horizon_onto(CircleRotor other) {
        AntiCircleRotor right_dual = AntiCircleRotor(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiCircleRotor anti_wedge = AntiCircleRotor(
            /* e41, e42, e43 */
            float3(this.e12345) * right_dual.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(this.e12345) * right_dual.group1, 
            /* e15, e25, e35, scalar */
            float4((float3(this.e12345) * right_dual.group2.xyz), (right_dual.scalar * this.e12345) - (right_dual.e41 * this.e235) - (right_dual.e42 * this.e315) - (right_dual.e43 * this.e125) - (right_dual.e23 * this.e415) - (right_dual.e31 * this.e425) - (right_dual.e12 * this.e435) - (right_dual.e45 * this.e321) - (right_dual.e15 * this.e423) - (right_dual.e25 * this.e431) - (right_dual.e35 * this.e412))
        );
        return CircleRotor(
            /* e423, e431, e412 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(anti_wedge.scalar) * other.group1, 
            /* e235, e315, e125, e12345 */
            float4((anti_wedge.group2.www * other.group2.xyz), (anti_wedge.scalar * other.e12345) - (anti_wedge.e41 * other.e235) - (anti_wedge.e42 * other.e315) - (anti_wedge.e43 * other.e125) - (anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435) - (anti_wedge.e45 * other.e321) - (anti_wedge.e15 * other.e423) - (anti_wedge.e25 * other.e431) - (anti_wedge.e35 * other.e412))
        );
    }
}
// Fancy infix trick (second half)
public CircleRotor operator /(AntiProjectViaHorizonOntoInfixPartial<CircleRotor> lhs, Dipole rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension CircleRotor {
    public CircleRotor anti_project_via_horizon_onto(Dipole other) {
        Circle right_dual = Circle(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125 */
            other.group2.xyz * float3(-1.0)
        );
        AntiDipoleInversion anti_wedge = AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(this.e12345) * right_dual.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(this.e12345) * right_dual.group1, 
            /* e235, e315, e125, e4 */
            float4((float3(this.e12345) * right_dual.group2.xyz), -(right_dual.e423 * this.e415) - (right_dual.e431 * this.e425) - (right_dual.e412 * this.e435) - (right_dual.e415 * this.e423) - (right_dual.e425 * this.e431) - (right_dual.e435 * this.e412)), 
            /* e1, e2, e3, e5 */
            float4((right_dual.e412 * this.e315) + (right_dual.e415 * this.e321) + (right_dual.e321 * this.e415) + (right_dual.e315 * this.e412), (right_dual.e423 * this.e125) + (right_dual.e425 * this.e321) + (right_dual.e321 * this.e425) + (right_dual.e125 * this.e423), (right_dual.e431 * this.e235) + (right_dual.e435 * this.e321) + (right_dual.e321 * this.e435) + (right_dual.e235 * this.e431), -(right_dual.e415 * this.e235) - (right_dual.e425 * this.e315) - (right_dual.e435 * this.e125) - (right_dual.e125 * this.e435)) - float4((right_dual.group0.xyz.yzx * this.group2.zxy), right_dual.e235 * this.e415) - float4((right_dual.group2.xyz.zxy * this.group0.xyz.yzx), right_dual.e315 * this.e425)
        );
        return CircleRotor(
            /* e423, e431, e412 */
            (float3(anti_wedge.e4) * other.group1.xyz) + (other.group0.xyz.yzx * anti_wedge.group3.zxy) - (other.group0.xyz.zxy * anti_wedge.group3.yzx), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e4 * other.e15) + (anti_wedge.e5 * other.e41), (anti_wedge.e4 * other.e25) + (anti_wedge.e5 * other.e42), (anti_wedge.e4 * other.e35) + (anti_wedge.e5 * other.e43), -(anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12)) - (anti_wedge.group3.xyzx * other.group1.wwwx), 
            /* e235, e315, e125, e12345 */
            float4((anti_wedge.e2 * other.e35) + (anti_wedge.e5 * other.e23), (anti_wedge.e3 * other.e15) + (anti_wedge.e5 * other.e31), (anti_wedge.e1 * other.e25) + (anti_wedge.e5 * other.e12), -(anti_wedge.e431 * other.e25) - (anti_wedge.e412 * other.e35) - (anti_wedge.e415 * other.e23) - (anti_wedge.e425 * other.e31) - (anti_wedge.e435 * other.e12) - (anti_wedge.e321 * other.e45) - (anti_wedge.e235 * other.e41) - (anti_wedge.e315 * other.e42) - (anti_wedge.e125 * other.e43)) - float4((other.group2.xyz.yzx * anti_wedge.group3.zxy), anti_wedge.e423 * other.e15)
        );
    }
}
// Fancy infix trick (second half)
public CircleRotor operator /(AntiProjectViaHorizonOntoInfixPartial<CircleRotor> lhs, DipoleInversion rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension CircleRotor {
    public CircleRotor anti_project_via_horizon_onto(DipoleInversion other) {
        AntiDipoleInversion right_dual = AntiDipoleInversion(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiDipoleInversion anti_wedge = AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(this.e12345) * right_dual.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(this.e12345) * right_dual.group1, 
            /* e235, e315, e125, e4 */
            float4((float3(this.e12345) * right_dual.group2.xyz), (right_dual.e4 * this.e12345) - (right_dual.e423 * this.e415) - (right_dual.e431 * this.e425) - (right_dual.e412 * this.e435) - (right_dual.e415 * this.e423) - (right_dual.e425 * this.e431) - (right_dual.e435 * this.e412)), 
            /* e1, e2, e3, e5 */
            float4((right_dual.e415 * this.e321) + (right_dual.e321 * this.e415) + (right_dual.e315 * this.e412) + (right_dual.e1 * this.e12345), (right_dual.e425 * this.e321) + (right_dual.e321 * this.e425) + (right_dual.e125 * this.e423) + (right_dual.e2 * this.e12345), (right_dual.e435 * this.e321) + (right_dual.e321 * this.e435) + (right_dual.e235 * this.e431) + (right_dual.e3 * this.e12345), -(right_dual.e435 * this.e125) - (right_dual.e235 * this.e415) - (right_dual.e315 * this.e425) - (right_dual.e125 * this.e435)) + (this.group2.yzxw * float4(right_dual.group0.xyz.zxy, right_dual.e5)) - (this.group2.zxyx * float4(right_dual.group0.xyz.yzx, right_dual.e415)) - float4((this.group0.xyz.yzx * right_dual.group2.zxy), right_dual.e425 * this.e315)
        );
        return CircleRotor(
            /* e423, e431, e412 */
            (float3(anti_wedge.e4) * other.group1.xyz) + (other.group0.xyz.yzx * anti_wedge.group3.zxy) - (other.group0.xyz.zxy * anti_wedge.group3.yzx), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e4 * other.e15) + (anti_wedge.e5 * other.e41), (anti_wedge.e4 * other.e25) + (anti_wedge.e5 * other.e42), (anti_wedge.e4 * other.e35) + (anti_wedge.e5 * other.e43), -(anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12)) - (anti_wedge.group3.xyzx * other.group1.wwwx), 
            /* e235, e315, e125, e12345 */
            (anti_wedge.group3.wwwx * float4(other.group1.xyz, other.e4235)) + float4(float3(0.0), (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) + (anti_wedge.e5 * other.e1234) - (anti_wedge.e431 * other.e25) - (anti_wedge.e412 * other.e35) - (anti_wedge.e415 * other.e23) - (anti_wedge.e425 * other.e31) - (anti_wedge.e435 * other.e12) - (anti_wedge.e321 * other.e45) - (anti_wedge.e235 * other.e41) - (anti_wedge.e315 * other.e42) - (anti_wedge.e125 * other.e43)) + float4((anti_wedge.group3.yzx * other.group2.zxy), anti_wedge.e4 * other.e3215) - (other.group2.yzxx * float4(anti_wedge.group3.zxy, anti_wedge.e423))
        );
    }
}
// Fancy infix trick (second half)
public Motor operator /(AntiProjectViaHorizonOntoInfixPartial<CircleRotor> lhs, DualNum rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension CircleRotor {
    public Motor anti_project_via_horizon_onto(DualNum other) {
        AntiDualNum right_dual = AntiDualNum(
            /* e3215, scalar */
            other.group0.xy * float2(-1.0)
        );
        AntiMotor anti_wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4(right_dual.group0.xy.xx, right_dual.e3215, right_dual.scalar) * float4(this.group0.xyz, this.e12345), 
            /* e15, e25, e35, e3215 */
            float4(right_dual.e3215) * float4(this.group1.xyz, this.e12345)
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4(float3(0.0), anti_wedge.scalar * other.e12345), 
            /* e235, e315, e125, e5 */
            float4(other.e5) * anti_wedge.group0
        );
    }
}
// Fancy infix trick (second half)
public Motor operator /(AntiProjectViaHorizonOntoInfixPartial<CircleRotor> lhs, FlatPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension CircleRotor {
    public Motor anti_project_via_horizon_onto(FlatPoint other) {
        AntiFlatPoint right_dual = AntiFlatPoint(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiFlector anti_wedge = AntiFlector(
            /* e235, e315, e125, e321 */
            float4(this.e12345) * right_dual.group0, 
            /* e1, e2, e3, e5 */
            float4((right_dual.e315 * this.e412) + (right_dual.e321 * this.e415), (right_dual.e125 * this.e423) + (right_dual.e321 * this.e425), (right_dual.e235 * this.e431) + (right_dual.e321 * this.e435), -(right_dual.e315 * this.e425) - (right_dual.e125 * this.e435)) - float4((this.group0.xyz.yzx * right_dual.group0.zxy), right_dual.e235 * this.e415)
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4(other.e45) * float4(anti_wedge.group1.xyz, anti_wedge.e321) * float4(-1.0), 
            /* e235, e315, e125, e5 */
            float4(((anti_wedge.group1.yzx * other.group0.zxy) - (anti_wedge.group1.zxy * other.group0.yzx)), 0.0)
        );
    }
}
// Fancy infix trick (second half)
public Motor operator /(AntiProjectViaHorizonOntoInfixPartial<CircleRotor> lhs, Flector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension CircleRotor {
    public Motor anti_project_via_horizon_onto(Flector other) {
        AntiFlector right_dual = AntiFlector(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiFlector anti_wedge = AntiFlector(
            /* e235, e315, e125, e321 */
            float4(this.e12345) * right_dual.group0, 
            /* e1, e2, e3, e5 */
            float4((right_dual.e321 * this.e415) + (right_dual.e1 * this.e12345), (right_dual.e321 * this.e425) + (right_dual.e2 * this.e12345), (right_dual.e321 * this.e435) + (right_dual.e3 * this.e12345), -(right_dual.e315 * this.e425) - (right_dual.e125 * this.e435)) + float4((this.group0.xyz.zxy * right_dual.group0.yzx), right_dual.e5 * this.e12345) - float4((this.group0.xyz.yzx * right_dual.group0.zxy), right_dual.e235 * this.e415)
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4((float3(other.e45) * anti_wedge.group1.xyz * float3(-1.0)), (anti_wedge.e1 * other.e4235) + (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) - (anti_wedge.e321 * other.e45)), 
            /* e235, e315, e125, e5 */
            float4(((anti_wedge.group1.yzx * other.group0.zxy) - (anti_wedge.group1.zxy * other.group0.yzx)), 0.0)
        );
    }
}
// Fancy infix trick (second half)
public Motor operator /(AntiProjectViaHorizonOntoInfixPartial<CircleRotor> lhs, Line rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension CircleRotor {
    public Motor anti_project_via_horizon_onto(Line other) {
        AntiLine right_dual = AntiLine(
            /* e23, e31, e12 */
            other.group0.xyz, 
            /* e15, e25, e35 */
            other.group1.xyz
        );
        AntiMotor anti_wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4((float3(this.e12345) * right_dual.group0.xyz), -(right_dual.e23 * this.e415) - (right_dual.e31 * this.e425) - (right_dual.e12 * this.e435) - (right_dual.e15 * this.e423) - (right_dual.e25 * this.e431) - (right_dual.e35 * this.e412)), 
            /* e15, e25, e35, e3215 */
            float4(float3(1.0), 0.0) * float4(right_dual.group1.xyz, 0.0) * float4(this.group2.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4((float3(anti_wedge.scalar) * other.group0.xyz), -(anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435)), 
            /* e235, e315, e125, e5 */
            float4(float3(1.0), 0.0) * float4(other.group1.xyz, 0.0) * float4(anti_wedge.group0.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
    }
}
// Fancy infix trick (second half)
public Motor operator /(AntiProjectViaHorizonOntoInfixPartial<CircleRotor> lhs, Motor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension CircleRotor {
    public Motor anti_project_via_horizon_onto(Motor other) {
        AntiMotor right_dual = AntiMotor(
            /* e23, e31, e12, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiMotor anti_wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4(right_dual.e23 * this.e12345, right_dual.e31 * this.e12345, right_dual.e12 * this.e12345, -(right_dual.e23 * this.e415) - (right_dual.e31 * this.e425) - (right_dual.e12 * this.e435) - (right_dual.e15 * this.e423) - (right_dual.e25 * this.e431) - (right_dual.e35 * this.e412)) + float4((this.group0.xyz * right_dual.group1.www), right_dual.scalar * this.e12345), 
            /* e15, e25, e35, e3215 */
            float4(((float3(right_dual.e3215) * this.group1.xyz) + (float3(this.e12345) * right_dual.group1.xyz)), right_dual.e3215 * this.e12345)
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4((anti_wedge.group0.www * other.group0.xyz), (anti_wedge.scalar * other.e12345) - (anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435)), 
            /* e235, e315, e125, e5 */
            float4(((float3(anti_wedge.scalar) * other.group1.xyz) + (float3(other.e5) * anti_wedge.group0.xyz)), anti_wedge.scalar * other.e5)
        );
    }
}
// Fancy infix trick (second half)
public MultiVector operator /(AntiProjectViaHorizonOntoInfixPartial<CircleRotor> lhs, MultiVector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension CircleRotor {
    public MultiVector anti_project_via_horizon_onto(MultiVector other) {
        MultiVector right_dual = MultiVector(
            /* scalar, e12345 */
            other.group0.xy.yx * float2(-1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215, 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43 */
            other.group7.xyz, 
            /* e23, e31, e12 */
            other.group6.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412 */
            other.group4.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group3.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        MultiVector anti_wedge = MultiVector(
            /* scalar, e12345 */
            float2((this.e12345 * right_dual.scalar) - (this.e423 * right_dual.e15) - (this.e431 * right_dual.e25) - (this.e412 * right_dual.e35) - (this.e415 * right_dual.e23) - (this.e425 * right_dual.e31) - (this.e435 * right_dual.e12) - (this.e321 * right_dual.e45) - (this.e235 * right_dual.e41) - (this.e315 * right_dual.e42) - (this.e125 * right_dual.e43), this.e12345 * right_dual.e12345), 
            /* e1, e2, e3, e4 */
            float4((this.e415 * right_dual.e321) + (this.e321 * right_dual.e415) + (this.e315 * right_dual.e412) + (this.e12345 * right_dual.e1), (this.e425 * right_dual.e321) + (this.e321 * right_dual.e425) + (this.e125 * right_dual.e423) + (this.e12345 * right_dual.e2), (this.e435 * right_dual.e321) + (this.e321 * right_dual.e435) + (this.e235 * right_dual.e431) + (this.e12345 * right_dual.e3), -(this.e412 * right_dual.e435) - (this.e415 * right_dual.e423) - (this.e425 * right_dual.e431) - (this.e435 * right_dual.e412)) + float4((this.group0.xyz.zxy * right_dual.group8.xyz.yzx), this.e12345 * right_dual.e4) - float4((this.group0.xyz.yzx * right_dual.group8.xyz.zxy), this.e423 * right_dual.e415) - float4((right_dual.group7.xyz.yzx * this.group2.zxy), this.e431 * right_dual.e425), 
            /* e5 */
            (this.e12345 * right_dual.e5) - (this.e415 * right_dual.e235) - (this.e425 * right_dual.e315) - (this.e435 * right_dual.e125) - (this.e235 * right_dual.e415) - (this.e315 * right_dual.e425) - (this.e125 * right_dual.e435), 
            /* e15, e25, e35, e45 */
            float4((this.e315 * right_dual.e4125) + (this.e12345 * right_dual.e15), (this.e125 * right_dual.e4235) + (this.e12345 * right_dual.e25), (this.e235 * right_dual.e4315) + (this.e12345 * right_dual.e35), -(this.e425 * right_dual.e4315) - (this.e435 * right_dual.e4125)) + float4((right_dual.group9.www * this.group1.xyz), this.e12345 * right_dual.e45) - (right_dual.group9.yzxx * float4(this.group2.zxy, this.e415)), 
            /* e41, e42, e43 */
            (float3(this.e12345) * right_dual.group4.xyz) + (float3(right_dual.e1234) * this.group1.xyz) + (this.group0.xyz.zxy * right_dual.group9.yzx) - (this.group0.xyz.yzx * right_dual.group9.zxy), 
            /* e23, e31, e12 */
            (float3(this.e12345) * right_dual.group5.xyz) + (float3(right_dual.e3215) * this.group0.xyz) + (float3(right_dual.e1234) * this.group2.xyz) - (float3(this.e321) * right_dual.group9.xyz), 
            /* e415, e425, e435, e321 */
            (float4(this.e12345) * right_dual.group6) + (float4(right_dual.e12345) * this.group1), 
            /* e423, e431, e412 */
            (float3(this.e12345) * right_dual.group7.xyz) + (float3(right_dual.e12345) * this.group0.xyz), 
            /* e235, e315, e125 */
            (float3(this.e12345) * right_dual.group8.xyz) + (float3(right_dual.e12345) * this.group2.xyz), 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e12345) * right_dual.group9, 
            /* e1234 */
            this.e12345 * right_dual.e1234
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(anti_wedge.scalar * other.scalar, (anti_wedge.scalar * other.e12345) + (anti_wedge.e12345 * other.scalar) + (anti_wedge.e1 * other.e4235) + (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) + (anti_wedge.e4 * other.e3215) + (anti_wedge.e5 * other.e1234) + (anti_wedge.e4235 * other.e1) + (anti_wedge.e4315 * other.e2) + (anti_wedge.e4125 * other.e3) + (anti_wedge.e3215 * other.e4) + (anti_wedge.e1234 * other.e5) - (anti_wedge.e15 * other.e423) - (anti_wedge.e25 * other.e431) - (anti_wedge.e35 * other.e412) - (anti_wedge.e45 * other.e321) - (anti_wedge.e41 * other.e235) - (anti_wedge.e42 * other.e315) - (anti_wedge.e43 * other.e125) - (anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435) - (anti_wedge.e415 * other.e23) - (anti_wedge.e425 * other.e31) - (anti_wedge.e435 * other.e12) - (anti_wedge.e321 * other.e45) - (anti_wedge.e423 * other.e15) - (anti_wedge.e431 * other.e25) - (anti_wedge.e412 * other.e35) - (anti_wedge.e235 * other.e41) - (anti_wedge.e315 * other.e42) - (anti_wedge.e125 * other.e43)), 
            /* e1, e2, e3, e4 */
            (float4(anti_wedge.scalar) * other.group1) + (float4(other.scalar) * anti_wedge.group1), 
            /* e5 */
            (anti_wedge.scalar * other.e5) + (anti_wedge.e5 * other.scalar), 
            /* e15, e25, e35, e45 */
            (float4(anti_wedge.scalar) * other.group3) + (float4(anti_wedge.e5) * other.group1) + (float4(other.scalar) * anti_wedge.group3) - (float4(other.e5) * anti_wedge.group1), 
            /* e41, e42, e43 */
            (float3(anti_wedge.scalar) * other.group4.xyz) + (float3(other.scalar) * anti_wedge.group4.xyz) + (float3(other.e4) * anti_wedge.group1.xyz) - (float3(anti_wedge.e4) * other.group1.xyz), 
            /* e23, e31, e12 */
            (float3(anti_wedge.scalar) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group5.xyz) + (anti_wedge.group1.zxy * other.group1.yzx) - (anti_wedge.group1.yzx * other.group1.zxy), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e4 * other.e15) + (anti_wedge.e5 * other.e41) + (anti_wedge.e15 * other.e4) + (anti_wedge.e41 * other.e5), (anti_wedge.e4 * other.e25) + (anti_wedge.e5 * other.e42) + (anti_wedge.e25 * other.e4) + (anti_wedge.e42 * other.e5), (anti_wedge.e4 * other.e35) + (anti_wedge.e5 * other.e43) + (anti_wedge.e35 * other.e4) + (anti_wedge.e43 * other.e5), -(anti_wedge.e1 * other.e23) - (anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12) - (anti_wedge.e12 * other.e3)) + (float4(anti_wedge.scalar) * other.group6) + (float4(other.scalar) * anti_wedge.group6) - (other.group1.xyzy * float4(anti_wedge.group3.www, anti_wedge.e31)) - float4((other.group3.www * anti_wedge.group1.xyz), anti_wedge.e23 * other.e1), 
            /* e423, e431, e412 */
            (float3(anti_wedge.scalar) * other.group7.xyz) + (float3(anti_wedge.e4) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group7.xyz) + (float3(other.e4) * anti_wedge.group5.xyz) + (anti_wedge.group4.xyz.yzx * other.group1.zxy) + (other.group4.xyz.yzx * anti_wedge.group1.zxy) - (anti_wedge.group4.xyz.zxy * other.group1.yzx) - (other.group4.xyz.zxy * anti_wedge.group1.yzx), 
            /* e235, e315, e125 */
            (float3(anti_wedge.scalar) * other.group8.xyz) + (float3(anti_wedge.e5) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group8.xyz) + (float3(other.e5) * anti_wedge.group5.xyz) + (anti_wedge.group1.yzx * other.group3.zxy) + (anti_wedge.group3.zxy * other.group1.yzx) - (anti_wedge.group1.zxy * other.group3.yzx) - (anti_wedge.group3.yzx * other.group1.zxy), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e2 * other.e435) + (anti_wedge.e5 * other.e423) + (anti_wedge.e45 * other.e23) + (anti_wedge.e425 * other.e3), (anti_wedge.e3 * other.e415) + (anti_wedge.e5 * other.e431) + (anti_wedge.e45 * other.e31) + (anti_wedge.e435 * other.e1), (anti_wedge.e1 * other.e425) + (anti_wedge.e5 * other.e412) + (anti_wedge.e45 * other.e12) + (anti_wedge.e415 * other.e2), -(anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12) - (anti_wedge.e321 * other.e5)) + (float4(anti_wedge.scalar) * other.group9) + (float4(other.scalar) * anti_wedge.group9) + float4((anti_wedge.group5.xyz * other.group3.www), anti_wedge.e2 * other.e315) + float4((anti_wedge.group8.xyz * other.group1.www), anti_wedge.e3 * other.e125) + float4((anti_wedge.group4.xyz.yzx * other.group3.zxy), anti_wedge.e1 * other.e235) + float4((other.group4.xyz.yzx * anti_wedge.group3.zxy), anti_wedge.e5 * other.e321) - (other.group1.yzxz * float4(anti_wedge.group6.zxy, anti_wedge.e125)) - (other.group3.yzxx * float4(anti_wedge.group4.xyz.zxy, anti_wedge.e23)) - float4((float3(other.e5) * anti_wedge.group7.xyz), anti_wedge.e31 * other.e25) - float4((other.group8.xyz * anti_wedge.group1.www), anti_wedge.e235 * other.e1) - float4((other.group4.xyz.zxy * anti_wedge.group3.yzx), anti_wedge.e12 * other.e35) - float4((anti_wedge.group1.zxy * other.group6.yzx), anti_wedge.e315 * other.e2), 
            /* e1234 */
            (anti_wedge.scalar * other.e1234) + (anti_wedge.e321 * other.e4) + (anti_wedge.e423 * other.e1) + (anti_wedge.e431 * other.e2) + (anti_wedge.e412 * other.e3) + (anti_wedge.e1234 * other.scalar) - (anti_wedge.e1 * other.e423) - (anti_wedge.e2 * other.e431) - (anti_wedge.e3 * other.e412) - (anti_wedge.e4 * other.e321) - (anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12) - (anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)
        );
    }
}
// Fancy infix trick (second half)
public AntiScalar operator /(AntiProjectViaHorizonOntoInfixPartial<CircleRotor> lhs, Plane rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension CircleRotor {
    public AntiScalar anti_project_via_horizon_onto(Plane other) {
        AntiPlane anti_wedge = AntiPlane(
            /* e1, e2, e3, e5 */
            float4(this.e12345) * float4(other.e4235 * -1.0, other.e4315 * -1.0, other.e4125 * -1.0, other.e3215)
        );
        return AntiScalar(
            /* e12345 */
            (anti_wedge.e1 * other.e4235) + (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125)
        );
    }
}
// Fancy infix trick (second half)
public CircleRotor operator /(AntiProjectViaHorizonOntoInfixPartial<CircleRotor> lhs, RoundPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension CircleRotor {
    public CircleRotor anti_project_via_horizon_onto(RoundPoint other) {
        Sphere right_dual = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        DipoleInversion anti_wedge = DipoleInversion(
            /* e41, e42, e43 */
            (float3(right_dual.e1234) * this.group1.xyz) + (this.group0.xyz.zxy * right_dual.group0.yzx) - (this.group0.xyz.yzx * right_dual.group0.zxy), 
            /* e23, e31, e12, e45 */
            float4((this.e423 * right_dual.e3215) + (this.e235 * right_dual.e1234), (this.e431 * right_dual.e3215) + (this.e315 * right_dual.e1234), (this.e412 * right_dual.e3215) + (this.e125 * right_dual.e1234), -(this.e425 * right_dual.e4315) - (this.e435 * right_dual.e4125)) - (this.group1.wwwx * right_dual.group0.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_dual.e3215) * this.group1.xyz) + (this.group2.yzx * right_dual.group0.zxy) - (this.group2.zxy * right_dual.group0.yzx)), this.e12345 * right_dual.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e12345) * right_dual.group0
        );
        return CircleRotor(
            /* e423, e431, e412 */
            (float3(other.e4) * anti_wedge.group1.xyz) + (anti_wedge.group0.xyz.yzx * other.group0.zxy) - (anti_wedge.group0.xyz.zxy * other.group0.yzx), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e41 * other.e5) + (anti_wedge.e15 * other.e4), (anti_wedge.e42 * other.e5) + (anti_wedge.e25 * other.e4), (anti_wedge.e43 * other.e5) + (anti_wedge.e35 * other.e4), -(anti_wedge.e31 * other.e2) - (anti_wedge.e12 * other.e3)) - (anti_wedge.group1.wwwx * other.group0.xyzx), 
            /* e235, e315, e125, e12345 */
            float4(anti_wedge.e25 * other.e3 * -1.0, anti_wedge.e35 * other.e1 * -1.0, anti_wedge.e15 * other.e2 * -1.0, (anti_wedge.e4315 * other.e2) + (anti_wedge.e4125 * other.e3) + (anti_wedge.e3215 * other.e4)) + (float4(other.e5) * float4(anti_wedge.group1.xyz, anti_wedge.e1234)) + (other.group0.yzxx * float4(anti_wedge.group2.zxy, anti_wedge.e4235))
        );
    }
}
// Fancy infix trick (second half)
public CircleRotor operator /(AntiProjectViaHorizonOntoInfixPartial<CircleRotor> lhs, Scalar rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension CircleRotor {
    public CircleRotor anti_project_via_horizon_onto(Scalar other) {
        AntiScalar right_dual = AntiScalar(
            /* e12345 */
            other.scalar
        );
        CircleRotor anti_wedge = CircleRotor(
            /* e423, e431, e412 */
            float3(right_dual.e12345) * this.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(right_dual.e12345) * this.group1, 
            /* e235, e315, e125, e12345 */
            float4(right_dual.e12345) * this.group2
        );
        return CircleRotor(
            /* e423, e431, e412 */
            float3(other.scalar) * anti_wedge.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.scalar) * anti_wedge.group1, 
            /* e235, e315, e125, e12345 */
            float4(other.scalar) * anti_wedge.group2
        );
    }
}
// Fancy infix trick (second half)
public AntiScalar operator /(AntiProjectViaHorizonOntoInfixPartial<CircleRotor> lhs, Sphere rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension CircleRotor {
    public AntiScalar anti_project_via_horizon_onto(Sphere other) {
        RoundPoint right_dual = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(other.group0.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215
        );
        RoundPoint anti_wedge = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(this.e12345) * right_dual.group0, 
            /* e5 */
            this.e12345 * right_dual.e5
        );
        return AntiScalar(
            /* e12345 */
            (anti_wedge.e1 * other.e4235) + (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) + (anti_wedge.e4 * other.e3215) + (anti_wedge.e5 * other.e1234)
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<CircleRotor> lhs, VersorEven rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension CircleRotor {
    public VersorEven anti_project_via_horizon_onto(VersorEven other) {
        VersorOdd right_dual = VersorOdd(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        VersorOdd anti_wedge = VersorOdd(
            /* e41, e42, e43, scalar */
            float4((this.e415 * right_dual.e1234) + (this.e12345 * right_dual.e41), (this.e425 * right_dual.e1234) + (this.e12345 * right_dual.e42), (this.e435 * right_dual.e1234) + (this.e12345 * right_dual.e43), -(this.e431 * right_dual.e25) - (this.e412 * right_dual.e35) - (this.e415 * right_dual.e23) - (this.e425 * right_dual.e31) - (this.e435 * right_dual.e12) - (this.e321 * right_dual.e45) - (this.e235 * right_dual.e41) - (this.e315 * right_dual.e42) - (this.e125 * right_dual.e43)) + float4((this.group0.xyz.zxy * right_dual.group3.yzx), this.e12345 * right_dual.scalar) - float4((this.group0.xyz.yzx * right_dual.group3.zxy), this.e423 * right_dual.e15), 
            /* e23, e31, e12, e45 */
            float4((this.e235 * right_dual.e1234) + (this.e12345 * right_dual.e23), (this.e315 * right_dual.e1234) + (this.e12345 * right_dual.e31), (this.e125 * right_dual.e1234) + (this.e12345 * right_dual.e12), -(this.e425 * right_dual.e4315) - (this.e435 * right_dual.e4125)) + float4((this.group0.xyz * right_dual.group3.www), this.e12345 * right_dual.e45) - (this.group1.wwwx * right_dual.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(this.e12345) * right_dual.group2.xyz) + (float3(right_dual.e3215) * this.group1.xyz) + (this.group2.yzx * right_dual.group3.zxy) - (this.group2.zxy * right_dual.group3.yzx)), this.e12345 * right_dual.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e12345) * right_dual.group3
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            (float4(anti_wedge.scalar) * other.group0) + (other.group3.wwwx * float4(anti_wedge.group1.xyz, anti_wedge.e4235)) + float4(float3(0.0), (other.e2 * anti_wedge.e4315) + (other.e3 * anti_wedge.e4125) + (other.e4 * anti_wedge.e3215) - (other.e431 * anti_wedge.e25) - (other.e412 * anti_wedge.e35) - (other.e415 * anti_wedge.e23) - (other.e425 * anti_wedge.e31) - (other.e435 * anti_wedge.e12) - (other.e321 * anti_wedge.e45) - (other.e235 * anti_wedge.e41) - (other.e315 * anti_wedge.e42) - (other.e125 * anti_wedge.e43)) + float4((other.group3.zxy * anti_wedge.group0.yzx), other.e5 * anti_wedge.e1234) - float4((other.group3.yzx * anti_wedge.group0.zxy), other.e423 * anti_wedge.e15), 
            /* e415, e425, e435, e321 */
            float4((other.e5 * anti_wedge.e41) + (other.e4 * anti_wedge.e15), (other.e5 * anti_wedge.e42) + (other.e4 * anti_wedge.e25), (other.e5 * anti_wedge.e43) + (other.e4 * anti_wedge.e35), -(other.e2 * anti_wedge.e31) - (other.e3 * anti_wedge.e12)) + (float4(anti_wedge.scalar) * other.group1) - (other.group3.xyzx * anti_wedge.group1.wwwx), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.e5) * anti_wedge.group1.xyz) + (float3(anti_wedge.scalar) * other.group2.xyz) + (other.group3.yzx * anti_wedge.group2.zxy) - (other.group3.zxy * anti_wedge.group2.yzx)), other.e5 * anti_wedge.scalar), 
            /* e1, e2, e3, e4 */
            float4(anti_wedge.scalar) * other.group3
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<CircleRotor> lhs, VersorOdd rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension CircleRotor {
    public VersorEven anti_project_via_horizon_onto(VersorOdd other) {
        VersorEven right_dual = VersorEven(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        VersorEven anti_wedge = VersorEven(
            /* e423, e431, e412, e12345 */
            float4(((float3(this.e12345) * right_dual.group0.xyz) + (float3(right_dual.e12345) * this.group0.xyz)), this.e12345 * right_dual.e12345), 
            /* e415, e425, e435, e321 */
            (float4(this.e12345) * right_dual.group1) + (float4(right_dual.e12345) * this.group1), 
            /* e235, e315, e125, e5 */
            float4(this.e12345 * right_dual.e235, this.e12345 * right_dual.e315, this.e12345 * right_dual.e125, -(this.e415 * right_dual.e235) - (this.e425 * right_dual.e315) - (this.e435 * right_dual.e125) - (this.e235 * right_dual.e415) - (this.e315 * right_dual.e425) - (this.e125 * right_dual.e435)) + (this.group2 * float4(right_dual.group0.www, right_dual.e5)), 
            /* e1, e2, e3, e4 */
            float4((this.e415 * right_dual.e321) + (this.e321 * right_dual.e415) + (this.e315 * right_dual.e412) + (this.e12345 * right_dual.e1), (this.e425 * right_dual.e321) + (this.e321 * right_dual.e425) + (this.e125 * right_dual.e423) + (this.e12345 * right_dual.e2), (this.e435 * right_dual.e321) + (this.e321 * right_dual.e435) + (this.e235 * right_dual.e431) + (this.e12345 * right_dual.e3), -(this.e412 * right_dual.e435) - (this.e415 * right_dual.e423) - (this.e425 * right_dual.e431) - (this.e435 * right_dual.e412)) + float4((this.group0.xyz.zxy * right_dual.group2.yzx), this.e12345 * right_dual.e4) - float4((this.group0.xyz.yzx * right_dual.group2.zxy), this.e423 * right_dual.e415) - float4((this.group2.zxy * right_dual.group0.yzx), this.e431 * right_dual.e425)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            (float4(other.scalar) * anti_wedge.group0) + (anti_wedge.group3.wwwx * float4(other.group1.xyz, other.e4235)) + float4(float3(0.0), (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) + (anti_wedge.e4 * other.e3215) - (anti_wedge.e431 * other.e25) - (anti_wedge.e412 * other.e35) - (anti_wedge.e415 * other.e23) - (anti_wedge.e425 * other.e31) - (anti_wedge.e435 * other.e12) - (anti_wedge.e321 * other.e45) - (anti_wedge.e235 * other.e41) - (anti_wedge.e315 * other.e42) - (anti_wedge.e125 * other.e43)) + float4((anti_wedge.group3.zxy * other.group0.yzx), anti_wedge.e5 * other.e1234) - float4((anti_wedge.group3.yzx * other.group0.zxy), anti_wedge.e423 * other.e15), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e5 * other.e41) + (anti_wedge.e4 * other.e15), (anti_wedge.e5 * other.e42) + (anti_wedge.e4 * other.e25), (anti_wedge.e5 * other.e43) + (anti_wedge.e4 * other.e35), -(anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12)) + (float4(other.scalar) * anti_wedge.group1) - (anti_wedge.group3.xyzx * other.group1.wwwx), 
            /* e235, e315, e125, e5 */
            float4(((float3(anti_wedge.e5) * other.group1.xyz) + (float3(other.scalar) * anti_wedge.group2.xyz) + (anti_wedge.group3.yzx * other.group2.zxy) - (anti_wedge.group3.zxy * other.group2.yzx)), anti_wedge.e5 * other.scalar), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * anti_wedge.group3
        );
    }
}
// Fancy infix trick (first half)
public AntiProjectViaHorizonOntoInfixPartial<Dipole> operator /(Dipole lhs, AntiProjectViaHorizonOntoInfix rhs) {
    return AntiProjectViaHorizonOntoInfixPartial<Dipole>(lhs);
}
// Fancy infix trick (second half)
public VersorOdd operator /(AntiProjectViaHorizonOntoInfixPartial<Dipole> lhs, AntiCircleRotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Dipole {
    public VersorOdd anti_project_via_horizon_onto(AntiCircleRotor other) {
        CircleRotor right_dual = CircleRotor(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiCircleRotor anti_wedge = AntiCircleRotor(
            /* e41, e42, e43 */
            float3(right_dual.e12345) * this.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(right_dual.e12345) * this.group1, 
            /* e15, e25, e35, scalar */
            float4((float3(right_dual.e12345) * this.group2.xyz), -(right_dual.e423 * this.e15) - (right_dual.e431 * this.e25) - (right_dual.e412 * this.e35) - (right_dual.e415 * this.e23) - (right_dual.e425 * this.e31) - (right_dual.e435 * this.e12) - (right_dual.e321 * this.e45) - (right_dual.e235 * this.e41) - (right_dual.e315 * this.e42) - (right_dual.e125 * this.e43))
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(((float3(anti_wedge.scalar) * other.group0.xyz) + (float3(other.scalar) * anti_wedge.group0.xyz)), anti_wedge.scalar * other.scalar), 
            /* e23, e31, e12, e45 */
            (float4(anti_wedge.scalar) * other.group1) + (float4(other.scalar) * anti_wedge.group1), 
            /* e15, e25, e35, e1234 */
            float4((anti_wedge.e15 * other.scalar) + (anti_wedge.scalar * other.e15), (anti_wedge.e25 * other.scalar) + (anti_wedge.scalar * other.e25), (anti_wedge.e35 * other.scalar) + (anti_wedge.scalar * other.e35), -(anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12) - (anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e42 * other.e35) + (anti_wedge.e23 * other.e45) + (anti_wedge.e45 * other.e23) + (anti_wedge.e35 * other.e42), (anti_wedge.e43 * other.e15) + (anti_wedge.e31 * other.e45) + (anti_wedge.e45 * other.e31) + (anti_wedge.e15 * other.e43), (anti_wedge.e41 * other.e25) + (anti_wedge.e12 * other.e45) + (anti_wedge.e45 * other.e12) + (anti_wedge.e25 * other.e41), -(anti_wedge.e12 * other.e35) - (anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12)) - (other.group2.yzxx * float4(anti_wedge.group0.xyz.zxy, anti_wedge.e23)) - float4((other.group0.xyz.zxy * anti_wedge.group2.yzx), anti_wedge.e31 * other.e25)
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<Dipole> lhs, AntiDipoleInversion rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Dipole {
    public DipoleInversion anti_project_via_horizon_onto(AntiDipoleInversion other) {
        DipoleInversion right_dual = DipoleInversion(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        RoundPoint anti_wedge = RoundPoint(
            /* e1, e2, e3, e4 */
            float4((this.e41 * right_dual.e3215) + (this.e31 * right_dual.e4125), (this.e42 * right_dual.e3215) + (this.e12 * right_dual.e4235), (this.e43 * right_dual.e3215) + (this.e23 * right_dual.e4315), -(this.e43 * right_dual.e4125) - (this.e45 * right_dual.e1234)) - (right_dual.group3.yzxy * float4(this.group1.zxy, this.e42)) - float4((this.group2.xyz * right_dual.group2.www), this.e41 * right_dual.e4235), 
            /* e5 */
            (this.e45 * right_dual.e3215) + (this.e15 * right_dual.e4235) + (this.e25 * right_dual.e4315) + (this.e35 * right_dual.e4125)
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            (float3(other.e4) * anti_wedge.group0.xyz) - (float3(anti_wedge.e4) * other.group3.xyz), 
            /* e23, e31, e12, e45 */
            float4((other.group3.yzx * anti_wedge.group0.zxy), other.e4 * anti_wedge.e5) - (other.group3.zxyw * anti_wedge.group0.yzxw), 
            /* e15, e25, e35, e1234 */
            float4(other.e1 * anti_wedge.e5, other.e2 * anti_wedge.e5, other.e3 * anti_wedge.e5, -(other.e431 * anti_wedge.e2) - (other.e412 * anti_wedge.e3) - (other.e321 * anti_wedge.e4)) - (anti_wedge.group0.xyzx * float4(other.group3.www, other.e423)), 
            /* e4235, e4315, e4125, e3215 */
            float4(-(other.e425 * anti_wedge.e3) - (other.e235 * anti_wedge.e4), -(other.e435 * anti_wedge.e1) - (other.e315 * anti_wedge.e4), -(other.e415 * anti_wedge.e2) - (other.e125 * anti_wedge.e4), (other.e315 * anti_wedge.e2) + (other.e125 * anti_wedge.e3)) + (float4(anti_wedge.e5) * float4(other.group0.xyz, other.e321)) + (anti_wedge.group0.yzxx * float4(other.group1.zxy, other.e235))
        );
    }
}
// Fancy infix trick (second half)
public Dipole operator /(AntiProjectViaHorizonOntoInfixPartial<Dipole> lhs, AntiDualNum rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Dipole {
    public Dipole anti_project_via_horizon_onto(AntiDualNum other) {
        DualNum right_dual = DualNum(
            /* e5, e12345 */
            other.group0.xy
        );
        Dipole anti_wedge = Dipole(
            /* e41, e42, e43 */
            float3(right_dual.e12345) * this.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(right_dual.e12345) * this.group1, 
            /* e15, e25, e35 */
            float3(right_dual.e12345) * this.group2.xyz
        );
        return Dipole(
            /* e41, e42, e43 */
            float3(other.scalar) * anti_wedge.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(other.scalar) * anti_wedge.group1, 
            /* e15, e25, e35 */
            float3(other.scalar) * anti_wedge.group2.xyz
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<Dipole> lhs, AntiFlector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Dipole {
    public DipoleInversion anti_project_via_horizon_onto(AntiFlector other) {
        Flector right_dual = Flector(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        RoundPoint anti_wedge = RoundPoint(
            /* e1, e2, e3, e4 */
            float4((this.e41 * right_dual.e3215) + (this.e31 * right_dual.e4125), (this.e42 * right_dual.e3215) + (this.e12 * right_dual.e4235), (this.e43 * right_dual.e3215) + (this.e23 * right_dual.e4315), -(this.e42 * right_dual.e4315) - (this.e43 * right_dual.e4125)) - (right_dual.group1.yzxx * float4(this.group1.zxy, this.e41)), 
            /* e5 */
            (this.e45 * right_dual.e3215) + (this.e15 * right_dual.e4235) + (this.e25 * right_dual.e4315) + (this.e35 * right_dual.e4125)
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            float3(anti_wedge.e4) * other.group1.xyz * float3(-1.0), 
            /* e23, e31, e12, e45 */
            float4(((other.group1.yzx * anti_wedge.group0.zxy) - (other.group1.zxy * anti_wedge.group0.yzx)), other.e5 * anti_wedge.e4 * -1.0), 
            /* e15, e25, e35, e1234 */
            float4(((float3(anti_wedge.e5) * other.group1.xyz) - (float3(other.e5) * anti_wedge.group0.xyz)), other.e321 * anti_wedge.e4 * -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4((float3(anti_wedge.e4) * other.group0.xyz * float3(-1.0)), (other.e235 * anti_wedge.e1) + (other.e315 * anti_wedge.e2) + (other.e125 * anti_wedge.e3) + (other.e321 * anti_wedge.e5))
        );
    }
}
// Fancy infix trick (second half)
public AntiLine operator /(AntiProjectViaHorizonOntoInfixPartial<Dipole> lhs, AntiLine rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Dipole {
    public AntiLine anti_project_via_horizon_onto(AntiLine other) {
        Line right_dual = Line(
            /* e415, e425, e435 */
            other.group0.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group1.xyz * float3(-1.0)
        );
        Scalar anti_wedge = Scalar(
            /* scalar */
            -(this.e41 * right_dual.e235) - (this.e42 * right_dual.e315) - (this.e43 * right_dual.e125) - (this.e23 * right_dual.e415) - (this.e31 * right_dual.e425) - (this.e12 * right_dual.e435)
        );
        return AntiLine(
            /* e23, e31, e12 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e15, e25, e35 */
            float3(anti_wedge.scalar) * other.group1.xyz
        );
    }
}
// Fancy infix trick (second half)
public VersorOdd operator /(AntiProjectViaHorizonOntoInfixPartial<Dipole> lhs, AntiMotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Dipole {
    public VersorOdd anti_project_via_horizon_onto(AntiMotor other) {
        Motor right_dual = Motor(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiCircleRotor anti_wedge = AntiCircleRotor(
            /* e41, e42, e43 */
            float3(right_dual.e12345) * this.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(right_dual.e12345) * this.group1, 
            /* e15, e25, e35, scalar */
            float4((float3(right_dual.e12345) * this.group2.xyz), -(this.e41 * right_dual.e235) - (this.e42 * right_dual.e315) - (this.e43 * right_dual.e125) - (this.e23 * right_dual.e415) - (this.e31 * right_dual.e425) - (this.e12 * right_dual.e435))
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(other.scalar) * float4(anti_wedge.group0.xyz, anti_wedge.scalar), 
            /* e23, e31, e12, e45 */
            float4(((float3(anti_wedge.scalar) * other.group0.xyz) + (float3(other.scalar) * anti_wedge.group1.xyz)), anti_wedge.e45 * other.scalar), 
            /* e15, e25, e35, e1234 */
            float4((anti_wedge.e15 * other.scalar) + (anti_wedge.scalar * other.e15), (anti_wedge.e25 * other.scalar) + (anti_wedge.scalar * other.e25), (anti_wedge.e35 * other.scalar) + (anti_wedge.scalar * other.e35), -(anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12)), 
            /* e4235, e4315, e4125, e3215 */
            float4(anti_wedge.e45 * other.e23, anti_wedge.e45 * other.e31, anti_wedge.e45 * other.e12, -(anti_wedge.e31 * other.e25) - (anti_wedge.e12 * other.e35) - (anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12)) + (other.group1.zxyw * float4(anti_wedge.group0.xyz.yzx, anti_wedge.scalar)) - (other.group1.yzxx * float4(anti_wedge.group0.xyz.zxy, anti_wedge.e23))
        );
    }
}
// Fancy infix trick (second half)
public Dipole operator /(AntiProjectViaHorizonOntoInfixPartial<Dipole> lhs, AntiPlane rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Dipole {
    public Dipole anti_project_via_horizon_onto(AntiPlane other) {
        Plane right_dual = Plane(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        RoundPoint anti_wedge = RoundPoint(
            /* e1, e2, e3, e4 */
            float4((this.e41 * right_dual.e3215) + (this.e31 * right_dual.e4125), (this.e42 * right_dual.e3215) + (this.e12 * right_dual.e4235), (this.e43 * right_dual.e3215) + (this.e23 * right_dual.e4315), -(this.e42 * right_dual.e4315) - (this.e43 * right_dual.e4125)) - (right_dual.group0.yzxx * float4(this.group1.zxy, this.e41)), 
            /* e5 */
            (this.e45 * right_dual.e3215) + (this.e15 * right_dual.e4235) + (this.e25 * right_dual.e4315) + (this.e35 * right_dual.e4125)
        );
        return Dipole(
            /* e41, e42, e43 */
            float3(anti_wedge.e4) * other.group0.xyz * float3(-1.0), 
            /* e23, e31, e12, e45 */
            float4(((other.group0.yzx * anti_wedge.group0.zxy) - (other.group0.zxy * anti_wedge.group0.yzx)), other.e5 * anti_wedge.e4 * -1.0), 
            /* e15, e25, e35 */
            (float3(anti_wedge.e5) * other.group0.xyz) - (float3(other.e5) * anti_wedge.group0.xyz)
        );
    }
}
// Fancy infix trick (second half)
public Dipole operator /(AntiProjectViaHorizonOntoInfixPartial<Dipole> lhs, Dipole rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Dipole {
    public Dipole anti_project_via_horizon_onto(Dipole other) {
        Circle right_dual = Circle(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125 */
            other.group2.xyz * float3(-1.0)
        );
        Scalar anti_wedge = Scalar(
            /* scalar */
            -(right_dual.e423 * this.e15) - (right_dual.e431 * this.e25) - (right_dual.e412 * this.e35) - (right_dual.e415 * this.e23) - (right_dual.e425 * this.e31) - (right_dual.e435 * this.e12) - (right_dual.e321 * this.e45) - (right_dual.e235 * this.e41) - (right_dual.e315 * this.e42) - (right_dual.e125 * this.e43)
        );
        return Dipole(
            /* e41, e42, e43 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(anti_wedge.scalar) * other.group1, 
            /* e15, e25, e35 */
            float3(anti_wedge.scalar) * other.group2.xyz
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<Dipole> lhs, DipoleInversion rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Dipole {
    public DipoleInversion anti_project_via_horizon_onto(DipoleInversion other) {
        AntiDipoleInversion right_dual = AntiDipoleInversion(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        Scalar anti_wedge = Scalar(
            /* scalar */
            -(right_dual.e423 * this.e15) - (right_dual.e431 * this.e25) - (right_dual.e412 * this.e35) - (right_dual.e415 * this.e23) - (right_dual.e425 * this.e31) - (right_dual.e435 * this.e12) - (right_dual.e321 * this.e45) - (right_dual.e235 * this.e41) - (right_dual.e315 * this.e42) - (right_dual.e125 * this.e43)
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(anti_wedge.scalar) * other.group1, 
            /* e15, e25, e35, e1234 */
            float4(anti_wedge.scalar) * other.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(anti_wedge.scalar) * other.group3
        );
    }
}
// Fancy infix trick (second half)
public FlatPoint operator /(AntiProjectViaHorizonOntoInfixPartial<Dipole> lhs, DualNum rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Dipole {
    public FlatPoint anti_project_via_horizon_onto(DualNum other) {
        AntiDualNum right_dual = AntiDualNum(
            /* e3215, scalar */
            other.group0.xy * float2(-1.0)
        );
        return FlatPoint(
            /* e15, e25, e35, e45 */
            float4(other.group0.xy.xx, other.e5, 0.0) * float4(float3(1.0), 0.0) * float4(float4(right_dual.e3215 * this.e41, right_dual.e3215 * this.e42, right_dual.e3215 * this.e43, right_dual.e3215 * this.e45).xyz, 0.0) * float4(-1.0, -1.0, -1.0, 0.0)
        );
    }
}
// Fancy infix trick (second half)
public FlatPoint operator /(AntiProjectViaHorizonOntoInfixPartial<Dipole> lhs, FlatPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Dipole {
    public FlatPoint anti_project_via_horizon_onto(FlatPoint other) {
        AntiFlatPoint right_dual = AntiFlatPoint(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return FlatPoint(
            /* e15, e25, e35, e45 */
            float4(-(right_dual.e235 * this.e41) - (right_dual.e315 * this.e42) - (right_dual.e125 * this.e43) - (right_dual.e321 * this.e45)) * other.group0
        );
    }
}
// Fancy infix trick (second half)
public Flector operator /(AntiProjectViaHorizonOntoInfixPartial<Dipole> lhs, Flector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Dipole {
    public Flector anti_project_via_horizon_onto(Flector other) {
        AntiFlector right_dual = AntiFlector(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        Scalar anti_wedge = Scalar(
            /* scalar */
            -(right_dual.e235 * this.e41) - (right_dual.e315 * this.e42) - (right_dual.e125 * this.e43) - (right_dual.e321 * this.e45)
        );
        return Flector(
            /* e15, e25, e35, e45 */
            float4(anti_wedge.scalar) * other.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4(anti_wedge.scalar) * other.group1
        );
    }
}
// Fancy infix trick (second half)
public Flector operator /(AntiProjectViaHorizonOntoInfixPartial<Dipole> lhs, Motor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Dipole {
    public Flector anti_project_via_horizon_onto(Motor other) {
        AntiMotor right_dual = AntiMotor(
            /* e23, e31, e12, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiPlane anti_wedge = AntiPlane(
            /* e1, e2, e3, e5 */
            float4((this.group0.xyz * right_dual.group1.www), right_dual.e3215 * this.e45)
        );
        return Flector(
            /* e15, e25, e35, e45 */
            float4(float3(1.0), 0.0) * float4(other.group1.www, 0.0) * float4(anti_wedge.group0.xyz, 0.0) * float4(-1.0, -1.0, -1.0, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(anti_wedge.e3 * other.e425 * -1.0, anti_wedge.e1 * other.e435 * -1.0, anti_wedge.e2 * other.e415 * -1.0, (anti_wedge.e2 * other.e315) + (anti_wedge.e3 * other.e125)) + (anti_wedge.group0.yzxx * float4(other.group0.zxy, other.e235))
        );
    }
}
// Fancy infix trick (second half)
public MultiVector operator /(AntiProjectViaHorizonOntoInfixPartial<Dipole> lhs, MultiVector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Dipole {
    public MultiVector anti_project_via_horizon_onto(MultiVector other) {
        MultiVector right_dual = MultiVector(
            /* scalar, e12345 */
            other.group0.xy.yx * float2(-1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215, 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43 */
            other.group7.xyz, 
            /* e23, e31, e12 */
            other.group6.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412 */
            other.group4.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group3.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        MultiVector anti_wedge = MultiVector(
            /* scalar, e12345 */
            float2(-(this.e41 * right_dual.e235) - (this.e42 * right_dual.e315) - (this.e43 * right_dual.e125) - (this.e23 * right_dual.e415) - (this.e31 * right_dual.e425) - (this.e12 * right_dual.e435) - (this.e45 * right_dual.e321) - (this.e15 * right_dual.e423) - (this.e25 * right_dual.e431) - (this.e35 * right_dual.e412), 0.0), 
            /* e1, e2, e3, e4 */
            float4((this.e41 * right_dual.e3215) + (this.e31 * right_dual.e4125), (this.e42 * right_dual.e3215) + (this.e12 * right_dual.e4235), (this.e43 * right_dual.e3215) + (this.e23 * right_dual.e4315), -(this.e43 * right_dual.e4125) - (this.e45 * right_dual.e1234)) - (right_dual.group9.yzxy * float4(this.group1.zxy, this.e42)) - float4((float3(right_dual.e1234) * this.group2.xyz), this.e41 * right_dual.e4235), 
            /* e5 */
            (this.e45 * right_dual.e3215) + (this.e15 * right_dual.e4235) + (this.e25 * right_dual.e4315) + (this.e35 * right_dual.e4125), 
            /* e15, e25, e35, e45 */
            float4(right_dual.e12345) * float4(this.group2.xyz, this.e45), 
            /* e41, e42, e43 */
            float3(right_dual.e12345) * this.group0.xyz, 
            /* e23, e31, e12 */
            float3(right_dual.e12345) * this.group1.xyz, 
            /* e415, e425, e435, e321 */
            float4(0.0), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            float3(0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(0.0), 
            /* e1234 */
            0.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(anti_wedge.scalar * other.scalar, (anti_wedge.scalar * other.e12345) + (anti_wedge.e12345 * other.scalar) + (anti_wedge.e1 * other.e4235) + (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) + (anti_wedge.e4 * other.e3215) + (anti_wedge.e5 * other.e1234) + (anti_wedge.e4235 * other.e1) + (anti_wedge.e4315 * other.e2) + (anti_wedge.e4125 * other.e3) + (anti_wedge.e3215 * other.e4) + (anti_wedge.e1234 * other.e5) - (anti_wedge.e15 * other.e423) - (anti_wedge.e25 * other.e431) - (anti_wedge.e35 * other.e412) - (anti_wedge.e45 * other.e321) - (anti_wedge.e41 * other.e235) - (anti_wedge.e42 * other.e315) - (anti_wedge.e43 * other.e125) - (anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435) - (anti_wedge.e415 * other.e23) - (anti_wedge.e425 * other.e31) - (anti_wedge.e435 * other.e12) - (anti_wedge.e321 * other.e45) - (anti_wedge.e423 * other.e15) - (anti_wedge.e431 * other.e25) - (anti_wedge.e412 * other.e35) - (anti_wedge.e235 * other.e41) - (anti_wedge.e315 * other.e42) - (anti_wedge.e125 * other.e43)), 
            /* e1, e2, e3, e4 */
            (float4(anti_wedge.scalar) * other.group1) + (float4(other.scalar) * anti_wedge.group1), 
            /* e5 */
            (anti_wedge.scalar * other.e5) + (anti_wedge.e5 * other.scalar), 
            /* e15, e25, e35, e45 */
            (float4(anti_wedge.scalar) * other.group3) + (float4(anti_wedge.e5) * other.group1) + (float4(other.scalar) * anti_wedge.group3) - (float4(other.e5) * anti_wedge.group1), 
            /* e41, e42, e43 */
            (float3(anti_wedge.scalar) * other.group4.xyz) + (float3(other.scalar) * anti_wedge.group4.xyz) + (float3(other.e4) * anti_wedge.group1.xyz) - (float3(anti_wedge.e4) * other.group1.xyz), 
            /* e23, e31, e12 */
            (float3(anti_wedge.scalar) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group5.xyz) + (anti_wedge.group1.zxy * other.group1.yzx) - (anti_wedge.group1.yzx * other.group1.zxy), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e4 * other.e15) + (anti_wedge.e5 * other.e41) + (anti_wedge.e15 * other.e4) + (anti_wedge.e41 * other.e5), (anti_wedge.e4 * other.e25) + (anti_wedge.e5 * other.e42) + (anti_wedge.e25 * other.e4) + (anti_wedge.e42 * other.e5), (anti_wedge.e4 * other.e35) + (anti_wedge.e5 * other.e43) + (anti_wedge.e35 * other.e4) + (anti_wedge.e43 * other.e5), -(anti_wedge.e1 * other.e23) - (anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12) - (anti_wedge.e12 * other.e3)) + (float4(anti_wedge.scalar) * other.group6) + (float4(other.scalar) * anti_wedge.group6) - (other.group1.xyzy * float4(anti_wedge.group3.www, anti_wedge.e31)) - float4((other.group3.www * anti_wedge.group1.xyz), anti_wedge.e23 * other.e1), 
            /* e423, e431, e412 */
            (float3(anti_wedge.scalar) * other.group7.xyz) + (float3(anti_wedge.e4) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group7.xyz) + (float3(other.e4) * anti_wedge.group5.xyz) + (anti_wedge.group4.xyz.yzx * other.group1.zxy) + (other.group4.xyz.yzx * anti_wedge.group1.zxy) - (anti_wedge.group4.xyz.zxy * other.group1.yzx) - (other.group4.xyz.zxy * anti_wedge.group1.yzx), 
            /* e235, e315, e125 */
            (float3(anti_wedge.scalar) * other.group8.xyz) + (float3(anti_wedge.e5) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group8.xyz) + (float3(other.e5) * anti_wedge.group5.xyz) + (anti_wedge.group1.yzx * other.group3.zxy) + (anti_wedge.group3.zxy * other.group1.yzx) - (anti_wedge.group1.zxy * other.group3.yzx) - (anti_wedge.group3.yzx * other.group1.zxy), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e2 * other.e435) + (anti_wedge.e5 * other.e423) + (anti_wedge.e45 * other.e23) + (anti_wedge.e425 * other.e3), (anti_wedge.e3 * other.e415) + (anti_wedge.e5 * other.e431) + (anti_wedge.e45 * other.e31) + (anti_wedge.e435 * other.e1), (anti_wedge.e1 * other.e425) + (anti_wedge.e5 * other.e412) + (anti_wedge.e45 * other.e12) + (anti_wedge.e415 * other.e2), -(anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12) - (anti_wedge.e321 * other.e5)) + (float4(anti_wedge.scalar) * other.group9) + (float4(other.scalar) * anti_wedge.group9) + float4((anti_wedge.group5.xyz * other.group3.www), anti_wedge.e2 * other.e315) + float4((anti_wedge.group8.xyz * other.group1.www), anti_wedge.e3 * other.e125) + float4((anti_wedge.group4.xyz.yzx * other.group3.zxy), anti_wedge.e1 * other.e235) + float4((other.group4.xyz.yzx * anti_wedge.group3.zxy), anti_wedge.e5 * other.e321) - (other.group1.yzxz * float4(anti_wedge.group6.zxy, anti_wedge.e125)) - (other.group3.yzxx * float4(anti_wedge.group4.xyz.zxy, anti_wedge.e23)) - float4((float3(other.e5) * anti_wedge.group7.xyz), anti_wedge.e31 * other.e25) - float4((other.group8.xyz * anti_wedge.group1.www), anti_wedge.e235 * other.e1) - float4((other.group4.xyz.zxy * anti_wedge.group3.yzx), anti_wedge.e12 * other.e35) - float4((anti_wedge.group1.zxy * other.group6.yzx), anti_wedge.e315 * other.e2), 
            /* e1234 */
            (anti_wedge.scalar * other.e1234) + (anti_wedge.e321 * other.e4) + (anti_wedge.e423 * other.e1) + (anti_wedge.e431 * other.e2) + (anti_wedge.e412 * other.e3) + (anti_wedge.e1234 * other.scalar) - (anti_wedge.e1 * other.e423) - (anti_wedge.e2 * other.e431) - (anti_wedge.e3 * other.e412) - (anti_wedge.e4 * other.e321) - (anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12) - (anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)
        );
    }
}
// Fancy infix trick (second half)
public Dipole operator /(AntiProjectViaHorizonOntoInfixPartial<Dipole> lhs, RoundPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Dipole {
    public Dipole anti_project_via_horizon_onto(RoundPoint other) {
        Sphere right_dual = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        RoundPoint anti_wedge = RoundPoint(
            /* e1, e2, e3, e4 */
            float4((this.e41 * right_dual.e3215) + (this.e31 * right_dual.e4125), (this.e42 * right_dual.e3215) + (this.e12 * right_dual.e4235), (this.e43 * right_dual.e3215) + (this.e23 * right_dual.e4315), -(this.e43 * right_dual.e4125) - (this.e45 * right_dual.e1234)) - (right_dual.group0.yzxy * float4(this.group1.zxy, this.e42)) - float4((float3(right_dual.e1234) * this.group2.xyz), this.e41 * right_dual.e4235), 
            /* e5 */
            (this.e45 * right_dual.e3215) + (this.e15 * right_dual.e4235) + (this.e25 * right_dual.e4315) + (this.e35 * right_dual.e4125)
        );
        return Dipole(
            /* e41, e42, e43 */
            (float3(other.e4) * anti_wedge.group0.xyz) - (float3(anti_wedge.e4) * other.group0.xyz), 
            /* e23, e31, e12, e45 */
            float4((anti_wedge.group0.zxy * other.group0.yzx), anti_wedge.e5 * other.e4) - (anti_wedge.group0.yzxw * float4(other.group0.zxy, other.e5)), 
            /* e15, e25, e35 */
            (float3(anti_wedge.e5) * other.group0.xyz) - (float3(other.e5) * anti_wedge.group0.xyz)
        );
    }
}
// Fancy infix trick (second half)
public Dipole operator /(AntiProjectViaHorizonOntoInfixPartial<Dipole> lhs, Scalar rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Dipole {
    public Dipole anti_project_via_horizon_onto(Scalar other) {
        AntiScalar right_dual = AntiScalar(
            /* e12345 */
            other.scalar
        );
        Dipole anti_wedge = Dipole(
            /* e41, e42, e43 */
            float3(right_dual.e12345) * this.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(right_dual.e12345) * this.group1, 
            /* e15, e25, e35 */
            float3(right_dual.e12345) * this.group2.xyz
        );
        return Dipole(
            /* e41, e42, e43 */
            float3(other.scalar) * anti_wedge.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(other.scalar) * anti_wedge.group1, 
            /* e15, e25, e35 */
            float3(other.scalar) * anti_wedge.group2.xyz
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<Dipole> lhs, VersorEven rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Dipole {
    public DipoleInversion anti_project_via_horizon_onto(VersorEven other) {
        VersorOdd right_dual = VersorOdd(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        RoundPoint anti_wedge = RoundPoint(
            /* e1, e2, e3, e4 */
            float4((this.e41 * right_dual.e3215) + (this.e31 * right_dual.e4125), (this.e42 * right_dual.e3215) + (this.e12 * right_dual.e4235), (this.e43 * right_dual.e3215) + (this.e23 * right_dual.e4315), -(this.e43 * right_dual.e4125) - (this.e45 * right_dual.e1234)) - (right_dual.group3.yzxy * float4(this.group1.zxy, this.e42)) - float4((this.group2.xyz * right_dual.group2.www), this.e41 * right_dual.e4235), 
            /* e5 */
            (this.e45 * right_dual.e3215) + (this.e15 * right_dual.e4235) + (this.e25 * right_dual.e4315) + (this.e35 * right_dual.e4125)
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            (float3(other.e4) * anti_wedge.group0.xyz) - (float3(anti_wedge.e4) * other.group3.xyz), 
            /* e23, e31, e12, e45 */
            float4((anti_wedge.group0.zxy * other.group3.yzx), anti_wedge.e5 * other.e4) - (anti_wedge.group0.yzxw * float4(other.group3.zxy, other.e5)), 
            /* e15, e25, e35, e1234 */
            float4(anti_wedge.e5 * other.e1, anti_wedge.e5 * other.e2, anti_wedge.e5 * other.e3, -(anti_wedge.e2 * other.e431) - (anti_wedge.e3 * other.e412) - (anti_wedge.e4 * other.e321)) - (anti_wedge.group0.xyzx * float4(other.group2.www, other.e423)), 
            /* e4235, e4315, e4125, e3215 */
            float4(-(anti_wedge.e3 * other.e425) - (anti_wedge.e4 * other.e235), -(anti_wedge.e1 * other.e435) - (anti_wedge.e4 * other.e315), -(anti_wedge.e2 * other.e415) - (anti_wedge.e4 * other.e125), (anti_wedge.e3 * other.e125) + (anti_wedge.e5 * other.e321)) + (anti_wedge.group0.yzxx * float4(other.group1.zxy, other.e235)) + float4((float3(anti_wedge.e5) * other.group0.xyz), anti_wedge.e2 * other.e315)
        );
    }
}
// Fancy infix trick (second half)
public VersorOdd operator /(AntiProjectViaHorizonOntoInfixPartial<Dipole> lhs, VersorOdd rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Dipole {
    public VersorOdd anti_project_via_horizon_onto(VersorOdd other) {
        VersorEven right_dual = VersorEven(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiCircleRotor anti_wedge = AntiCircleRotor(
            /* e41, e42, e43 */
            float3(right_dual.e12345) * this.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(right_dual.e12345) * this.group1, 
            /* e15, e25, e35, scalar */
            float4((float3(right_dual.e12345) * this.group2.xyz), -(this.e41 * right_dual.e235) - (this.e42 * right_dual.e315) - (this.e43 * right_dual.e125) - (this.e23 * right_dual.e415) - (this.e31 * right_dual.e425) - (this.e12 * right_dual.e435) - (this.e45 * right_dual.e321) - (this.e15 * right_dual.e423) - (this.e25 * right_dual.e431) - (this.e35 * right_dual.e412))
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(((float3(anti_wedge.scalar) * other.group0.xyz) + (float3(other.scalar) * anti_wedge.group0.xyz)), anti_wedge.scalar * other.scalar), 
            /* e23, e31, e12, e45 */
            (float4(anti_wedge.scalar) * other.group1) + (float4(other.scalar) * anti_wedge.group1), 
            /* e15, e25, e35, e1234 */
            float4(anti_wedge.scalar * other.e15, anti_wedge.scalar * other.e25, anti_wedge.scalar * other.e35, -(anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12) - (anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)) + (anti_wedge.group2 * float4(other.group0.www, other.e1234)), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e23 * other.e45) + (anti_wedge.e45 * other.e23) + (anti_wedge.e35 * other.e42) + (anti_wedge.scalar * other.e4235), (anti_wedge.e31 * other.e45) + (anti_wedge.e45 * other.e31) + (anti_wedge.e15 * other.e43) + (anti_wedge.scalar * other.e4315), (anti_wedge.e12 * other.e45) + (anti_wedge.e45 * other.e12) + (anti_wedge.e25 * other.e41) + (anti_wedge.scalar * other.e4125), -(anti_wedge.e12 * other.e35) - (anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12)) + float4((anti_wedge.group0.xyz.yzx * other.group2.zxy), anti_wedge.scalar * other.e3215) - (other.group2.yzxx * float4(anti_wedge.group0.xyz.zxy, anti_wedge.e23)) - float4((anti_wedge.group2.yzx * other.group0.zxy), anti_wedge.e31 * other.e25)
        );
    }
}
// Fancy infix trick (first half)
public AntiProjectViaHorizonOntoInfixPartial<DipoleInversion> operator /(DipoleInversion lhs, AntiProjectViaHorizonOntoInfix rhs) {
    return AntiProjectViaHorizonOntoInfixPartial<DipoleInversion>(lhs);
}
// Fancy infix trick (second half)
public VersorOdd operator /(AntiProjectViaHorizonOntoInfixPartial<DipoleInversion> lhs, AntiCircleRotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension DipoleInversion {
    public VersorOdd anti_project_via_horizon_onto(AntiCircleRotor other) {
        CircleRotor right_dual = CircleRotor(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        VersorOdd anti_wedge = VersorOdd(
            /* e41, e42, e43, scalar */
            float4((right_dual.e412 * this.e4315) + (right_dual.e415 * this.e1234) + (right_dual.e12345 * this.e41), (right_dual.e423 * this.e4125) + (right_dual.e425 * this.e1234) + (right_dual.e12345 * this.e42), (right_dual.e431 * this.e4235) + (right_dual.e435 * this.e1234) + (right_dual.e12345 * this.e43), -(right_dual.e431 * this.e25) - (right_dual.e412 * this.e35) - (right_dual.e415 * this.e23) - (right_dual.e425 * this.e31) - (right_dual.e435 * this.e12) - (right_dual.e321 * this.e45) - (right_dual.e235 * this.e41) - (right_dual.e315 * this.e42) - (right_dual.e125 * this.e43)) - float4((right_dual.group0.xyz.yzx * this.group3.zxy), right_dual.e423 * this.e15), 
            /* e23, e31, e12, e45 */
            float4((right_dual.e235 * this.e1234) + (right_dual.e12345 * this.e23), (right_dual.e315 * this.e1234) + (right_dual.e12345 * this.e31), (right_dual.e125 * this.e1234) + (right_dual.e12345 * this.e12), -(right_dual.e425 * this.e4315) - (right_dual.e435 * this.e4125)) + float4((right_dual.group0.xyz * this.group3.www), right_dual.e12345 * this.e45) - (right_dual.group1.wwwx * this.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_dual.e12345) * this.group2.xyz) + (float3(this.e3215) * right_dual.group1.xyz) + (right_dual.group2.yzx * this.group3.zxy) - (right_dual.group2.zxy * this.group3.yzx)), right_dual.e12345 * this.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * this.group3
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(((float3(other.scalar) * anti_wedge.group0.xyz) + (float3(anti_wedge.scalar) * other.group0.xyz)), other.scalar * anti_wedge.scalar), 
            /* e23, e31, e12, e45 */
            (float4(other.scalar) * anti_wedge.group1) + (float4(anti_wedge.scalar) * other.group1), 
            /* e15, e25, e35, e1234 */
            float4(other.scalar * anti_wedge.e15, other.scalar * anti_wedge.e25, other.scalar * anti_wedge.e35, -(other.e41 * anti_wedge.e23) - (other.e42 * anti_wedge.e31) - (other.e43 * anti_wedge.e12) - (other.e23 * anti_wedge.e41) - (other.e31 * anti_wedge.e42) - (other.e12 * anti_wedge.e43)) + (other.group2 * float4(anti_wedge.group0.www, anti_wedge.e1234)), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e23 * anti_wedge.e45) + (other.e45 * anti_wedge.e23) + (other.e35 * anti_wedge.e42) + (other.scalar * anti_wedge.e4235), (other.e31 * anti_wedge.e45) + (other.e45 * anti_wedge.e31) + (other.e15 * anti_wedge.e43) + (other.scalar * anti_wedge.e4315), (other.e12 * anti_wedge.e45) + (other.e45 * anti_wedge.e12) + (other.e25 * anti_wedge.e41) + (other.scalar * anti_wedge.e4125), -(other.e12 * anti_wedge.e35) - (other.e15 * anti_wedge.e23) - (other.e25 * anti_wedge.e31) - (other.e35 * anti_wedge.e12)) + float4((other.group0.xyz.yzx * anti_wedge.group2.zxy), other.scalar * anti_wedge.e3215) - (anti_wedge.group2.yzxx * float4(other.group0.xyz.zxy, other.e23)) - float4((other.group2.yzx * anti_wedge.group0.zxy), other.e31 * anti_wedge.e25)
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<DipoleInversion> lhs, AntiDipoleInversion rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension DipoleInversion {
    public DipoleInversion anti_project_via_horizon_onto(AntiDipoleInversion other) {
        DipoleInversion right_dual = DipoleInversion(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiDipoleInversion anti_wedge = AntiDipoleInversion(
            /* e423, e431, e412 */
            (float3(this.e1234) * right_dual.group3.xyz) - (float3(right_dual.e1234) * this.group3.xyz), 
            /* e415, e425, e435, e321 */
            (right_dual.group3.yzxw * float4(this.group3.zxy, this.e1234)) - (this.group3.yzxw * float4(right_dual.group3.zxy, right_dual.e1234)), 
            /* e235, e315, e125, e4 */
            (this.group3.xyzx * float4(right_dual.group3.www, right_dual.e41)) + float4(float3(0.0), (right_dual.e42 * this.e4315) + (right_dual.e43 * this.e4125) + (right_dual.e45 * this.e1234) - (right_dual.e1234 * this.e45) - (right_dual.e4315 * this.e42) - (right_dual.e4125 * this.e43)) - float4((this.group3.www * right_dual.group3.xyz), right_dual.e4235 * this.e41), 
            /* e1, e2, e3, e5 */
            (right_dual.group3.zxyw * this.group1.yzxw) + (this.group2.wwwz * float4(right_dual.group2.xyz, right_dual.e4125)) + float4((this.group0.xyz * right_dual.group3.www), right_dual.e4235 * this.e15) + float4((right_dual.group1.zxy * this.group3.yzx), right_dual.e4315 * this.e25) - (float4(this.e3215) * float4(right_dual.group0.xyz, right_dual.e45)) - (right_dual.group2.wwwy * float4(this.group2.xyz, this.e4315)) - (this.group3.zxyx * float4(right_dual.group1.yzx, right_dual.e15)) - float4((right_dual.group3.yzx * this.group1.zxy), right_dual.e35 * this.e4125)
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            (float3(other.e4) * anti_wedge.group3.xyz) - (float3(anti_wedge.e4) * other.group3.xyz), 
            /* e23, e31, e12, e45 */
            (anti_wedge.group3.zxyw * float4(other.group3.yzx, other.e4)) - (other.group3.zxyw * float4(anti_wedge.group3.yzx, anti_wedge.e4)), 
            /* e15, e25, e35, e1234 */
            (other.group3.xyzx * float4(anti_wedge.group3.www, anti_wedge.e423)) + float4(float3(0.0), (anti_wedge.e431 * other.e2) + (anti_wedge.e412 * other.e3) + (anti_wedge.e321 * other.e4) - (anti_wedge.e4 * other.e321) - (anti_wedge.e2 * other.e431) - (anti_wedge.e3 * other.e412)) - float4((other.group3.www * anti_wedge.group3.xyz), anti_wedge.e1 * other.e423), 
            /* e4235, e4315, e4125, e3215 */
            (anti_wedge.group3.yzxw * other.group1.zxyw) + (other.group2.wwwz * float4(anti_wedge.group2.xyz, anti_wedge.e3)) + float4((other.group0.xyz * anti_wedge.group3.www), anti_wedge.e1 * other.e235) + float4((anti_wedge.group1.yzx * other.group3.zxy), anti_wedge.e2 * other.e315) - (float4(other.e5) * float4(anti_wedge.group0.xyz, anti_wedge.e321)) - (anti_wedge.group2.wwwy * float4(other.group2.xyz, other.e2)) - (other.group3.yzxx * float4(anti_wedge.group1.zxy, anti_wedge.e235)) - float4((anti_wedge.group3.zxy * other.group1.yzx), anti_wedge.e125 * other.e3)
        );
    }
}
// Fancy infix trick (second half)
public VersorOdd operator /(AntiProjectViaHorizonOntoInfixPartial<DipoleInversion> lhs, AntiDualNum rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension DipoleInversion {
    public VersorOdd anti_project_via_horizon_onto(AntiDualNum other) {
        DualNum right_dual = DualNum(
            /* e5, e12345 */
            other.group0.xy
        );
        VersorOdd anti_wedge = VersorOdd(
            /* e41, e42, e43, scalar */
            float4(right_dual.group0.xy.yy, right_dual.e12345, right_dual.e5) * float4(this.group0.xyz, this.e1234), 
            /* e23, e31, e12, e45 */
            float4(right_dual.e12345) * this.group1, 
            /* e15, e25, e35, e1234 */
            float4(right_dual.e12345) * this.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * this.group3
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(other.scalar) * anti_wedge.group0, 
            /* e23, e31, e12, e45 */
            float4(other.scalar) * anti_wedge.group1, 
            /* e15, e25, e35, e1234 */
            float4(other.scalar) * anti_wedge.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xy.yy, other.scalar, (other.e3215 * anti_wedge.scalar) + (other.scalar * anti_wedge.e3215)) * float4(anti_wedge.group3.xyz, 1.0)
        );
    }
}
// Fancy infix trick (second half)
public Sphere operator /(AntiProjectViaHorizonOntoInfixPartial<DipoleInversion> lhs, AntiFlatPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension DipoleInversion {
    public Sphere anti_project_via_horizon_onto(AntiFlatPoint other) {
        FlatPoint right_dual = FlatPoint(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        RoundPoint anti_wedge = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(this.e1234) * right_dual.group0, 
            /* e5 */
            -(this.e4235 * right_dual.e15) - (this.e4315 * right_dual.e25) - (this.e4125 * right_dual.e35) - (this.e3215 * right_dual.e45)
        );
        return Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4((float3(anti_wedge.e4) * other.group0.xyz * float3(-1.0)), (other.e235 * anti_wedge.e1) + (other.e315 * anti_wedge.e2) + (other.e125 * anti_wedge.e3) + (other.e321 * anti_wedge.e5)), 
            /* e1234 */
            other.e321 * anti_wedge.e4 * -1.0
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<DipoleInversion> lhs, AntiFlector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension DipoleInversion {
    public DipoleInversion anti_project_via_horizon_onto(AntiFlector other) {
        Flector right_dual = Flector(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiDipoleInversion anti_wedge = AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(this.e1234) * right_dual.group1.xyz, 
            /* e415, e425, e435, e321 */
            float4(((this.group3.zxy * right_dual.group1.yzx) - (this.group3.yzx * right_dual.group1.zxy)), this.e1234 * right_dual.e3215), 
            /* e235, e315, e125, e4 */
            float4(float3(0.0), -(this.e42 * right_dual.e4315) - (this.e43 * right_dual.e4125)) + float4((right_dual.group1.www * this.group3.xyz), this.e1234 * right_dual.e45) - (right_dual.group1.xyzx * float4(this.group3.www, this.e41)), 
            /* e1, e2, e3, e5 */
            (float4(right_dual.e3215) * float4(this.group0.xyz, this.e45)) + (this.group2.wwwy * float4(right_dual.group0.xyz, right_dual.e4315)) + (right_dual.group1.zxyx * float4(this.group1.yzx, this.e15)) + float4(float3(0.0), (this.e35 * right_dual.e4125) - (this.e4315 * right_dual.e25) - (this.e4125 * right_dual.e35) - (this.e3215 * right_dual.e45)) - float4((this.group1.zxy * right_dual.group1.yzx), this.e4235 * right_dual.e15)
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            float3(anti_wedge.e4) * other.group1.xyz * float3(-1.0), 
            /* e23, e31, e12, e45 */
            float4(((anti_wedge.group3.zxy * other.group1.yzx) - (anti_wedge.group3.yzx * other.group1.zxy)), anti_wedge.e4 * other.e5 * -1.0), 
            /* e15, e25, e35, e1234 */
            (other.group1.xyzx * float4(anti_wedge.group3.www, anti_wedge.e423)) + float4(float3(0.0), (anti_wedge.e431 * other.e2) + (anti_wedge.e412 * other.e3)) - float4((other.group1.www * anti_wedge.group3.xyz), anti_wedge.e4 * other.e321), 
            /* e4235, e4315, e4125, e3215 */
            float4(float3(0.0), (anti_wedge.e2 * other.e315) + (anti_wedge.e3 * other.e125) + (anti_wedge.e5 * other.e321) - (anti_wedge.e125 * other.e3)) + float4((anti_wedge.group1.yzx * other.group1.zxy), anti_wedge.e1 * other.e235) - (float4(other.e5) * float4(anti_wedge.group0.xyz, anti_wedge.e321)) - (anti_wedge.group2.wwwy * float4(other.group0.xyz, other.e2)) - (other.group1.yzxx * float4(anti_wedge.group1.zxy, anti_wedge.e235))
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<DipoleInversion> lhs, AntiLine rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension DipoleInversion {
    public DipoleInversion anti_project_via_horizon_onto(AntiLine other) {
        Line right_dual = Line(
            /* e415, e425, e435 */
            other.group0.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group1.xyz * float3(-1.0)
        );
        AntiCircleRotor anti_wedge = AntiCircleRotor(
            /* e41, e42, e43 */
            float3(this.e1234) * right_dual.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4((float3(this.e1234) * right_dual.group1.xyz), -(this.e4235 * right_dual.e415) - (this.e4315 * right_dual.e425) - (this.e4125 * right_dual.e435)), 
            /* e15, e25, e35, scalar */
            float4((this.e4125 * right_dual.e315) + (this.e3215 * right_dual.e415), (this.e4235 * right_dual.e125) + (this.e3215 * right_dual.e425), (this.e4315 * right_dual.e235) + (this.e3215 * right_dual.e435), -(this.e42 * right_dual.e315) - (this.e43 * right_dual.e125) - (this.e23 * right_dual.e415) - (this.e31 * right_dual.e425) - (this.e12 * right_dual.e435)) - float4((right_dual.group1.xyz.zxy * this.group3.yzx), this.e41 * right_dual.e235)
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12, e45 */
            float4(float3(1.0), 0.0) * float4(other.group0.xyz, 0.0) * float4(anti_wedge.group2.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e15, e25, e35, e1234 */
            float4((float3(anti_wedge.scalar) * other.group1.xyz), -(anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12)), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e42 * other.e35) + (anti_wedge.e45 * other.e23), (anti_wedge.e43 * other.e15) + (anti_wedge.e45 * other.e31), (anti_wedge.e41 * other.e25) + (anti_wedge.e45 * other.e12), -(anti_wedge.e23 * other.e15) - (anti_wedge.e31 * other.e25) - (anti_wedge.e12 * other.e35) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12)) - float4((anti_wedge.group0.xyz.zxy * other.group1.xyz.yzx), anti_wedge.e15 * other.e23)
        );
    }
}
// Fancy infix trick (second half)
public VersorOdd operator /(AntiProjectViaHorizonOntoInfixPartial<DipoleInversion> lhs, AntiMotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension DipoleInversion {
    public VersorOdd anti_project_via_horizon_onto(AntiMotor other) {
        Motor right_dual = Motor(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        VersorOdd anti_wedge = VersorOdd(
            /* e41, e42, e43, scalar */
            float4(this.e1234 * right_dual.e415, this.e1234 * right_dual.e425, this.e1234 * right_dual.e435, -(this.e41 * right_dual.e235) - (this.e42 * right_dual.e315) - (this.e43 * right_dual.e125) - (this.e23 * right_dual.e415) - (this.e31 * right_dual.e425) - (this.e12 * right_dual.e435)) + float4((this.group0.xyz * right_dual.group0.www), this.e1234 * right_dual.e5), 
            /* e23, e31, e12, e45 */
            float4(this.e1234 * right_dual.e235, this.e1234 * right_dual.e315, this.e1234 * right_dual.e125, -(this.e4235 * right_dual.e415) - (this.e4315 * right_dual.e425) - (this.e4125 * right_dual.e435)) + (float4(right_dual.e12345) * this.group1), 
            /* e15, e25, e35, e1234 */
            float4(((float3(this.e3215) * right_dual.group0.xyz) + (float3(right_dual.e12345) * this.group2.xyz) + (this.group3.zxy * right_dual.group1.yzx) - (this.group3.yzx * right_dual.group1.zxy)), this.e1234 * right_dual.e12345), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * this.group3
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(other.scalar) * anti_wedge.group0, 
            /* e23, e31, e12, e45 */
            float4(((float3(other.scalar) * anti_wedge.group1.xyz) + (float3(anti_wedge.scalar) * other.group0.xyz)), other.scalar * anti_wedge.e45), 
            /* e15, e25, e35, e1234 */
            float4(other.e15 * anti_wedge.scalar, other.e25 * anti_wedge.scalar, other.e35 * anti_wedge.scalar, -(other.e23 * anti_wedge.e41) - (other.e31 * anti_wedge.e42) - (other.e12 * anti_wedge.e43)) + (float4(other.scalar) * anti_wedge.group2), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.e35 * anti_wedge.e42, other.e15 * anti_wedge.e43, other.e25 * anti_wedge.e41, -(other.e31 * anti_wedge.e25) - (other.e12 * anti_wedge.e35) - (other.e15 * anti_wedge.e23) - (other.e25 * anti_wedge.e31) - (other.e35 * anti_wedge.e12)) + (other.group0 * float4(anti_wedge.group1.www, anti_wedge.e3215)) + float4((other.group0.www * anti_wedge.group3.xyz), other.e3215 * anti_wedge.scalar) - float4((other.group1.yzx * anti_wedge.group0.zxy), other.e23 * anti_wedge.e15)
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<DipoleInversion> lhs, AntiPlane rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension DipoleInversion {
    public DipoleInversion anti_project_via_horizon_onto(AntiPlane other) {
        Plane right_dual = Plane(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiDipoleInversion anti_wedge = AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(this.e1234) * right_dual.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(((this.group3.zxy * right_dual.group0.yzx) - (this.group3.yzx * right_dual.group0.zxy)), this.e1234 * right_dual.e3215), 
            /* e235, e315, e125, e4 */
            float4(this.e4235 * right_dual.e3215, this.e4315 * right_dual.e3215, this.e4125 * right_dual.e3215, -(this.e42 * right_dual.e4315) - (this.e43 * right_dual.e4125)) - (right_dual.group0.xyzx * float4(this.group3.www, this.e41)), 
            /* e1, e2, e3, e5 */
            float4(this.e12 * right_dual.e4315 * -1.0, this.e23 * right_dual.e4125 * -1.0, this.e31 * right_dual.e4235 * -1.0, (this.e25 * right_dual.e4315) + (this.e35 * right_dual.e4125)) + (float4(right_dual.e3215) * float4(this.group0.xyz, this.e45)) + (right_dual.group0.zxyx * float4(this.group1.yzx, this.e15))
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            float3(anti_wedge.e4) * other.group0.xyz * float3(-1.0), 
            /* e23, e31, e12, e45 */
            float4(((anti_wedge.group3.zxy * other.group0.yzx) - (anti_wedge.group3.yzx * other.group0.zxy)), anti_wedge.e4 * other.e5 * -1.0), 
            /* e15, e25, e35, e1234 */
            float4(anti_wedge.e1 * other.e5 * -1.0, anti_wedge.e2 * other.e5 * -1.0, anti_wedge.e3 * other.e5 * -1.0, (anti_wedge.e431 * other.e2) + (anti_wedge.e412 * other.e3)) + (other.group0.xyzx * float4(anti_wedge.group3.www, anti_wedge.e423)), 
            /* e4235, e4315, e4125, e3215 */
            float4(anti_wedge.e425 * other.e3, anti_wedge.e435 * other.e1, anti_wedge.e415 * other.e2, -(anti_wedge.e315 * other.e2) - (anti_wedge.e125 * other.e3)) - (float4(other.e5) * float4(anti_wedge.group0.xyz, anti_wedge.e321)) - (other.group0.yzxx * float4(anti_wedge.group1.zxy, anti_wedge.e235))
        );
    }
}
// Fancy infix trick (second half)
public Sphere operator /(AntiProjectViaHorizonOntoInfixPartial<DipoleInversion> lhs, Circle rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension DipoleInversion {
    public Sphere anti_project_via_horizon_onto(Circle other) {
        Dipole right_dual = Dipole(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35 */
            other.group2.xyz
        );
        RoundPoint anti_wedge = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(-(right_dual.e41 * this.e3215) - (right_dual.e31 * this.e4125), -(right_dual.e42 * this.e3215) - (right_dual.e12 * this.e4235), -(right_dual.e43 * this.e3215) - (right_dual.e23 * this.e4315), (right_dual.e43 * this.e4125) + (right_dual.e45 * this.e1234)) + (this.group3.yzxy * float4(right_dual.group1.zxy, right_dual.e42)) + float4((right_dual.group2.xyz * this.group2.www), right_dual.e41 * this.e4235), 
            /* e5 */
            -(right_dual.e45 * this.e3215) - (right_dual.e15 * this.e4235) - (right_dual.e25 * this.e4315) - (right_dual.e35 * this.e4125)
        );
        return Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(-(other.e425 * anti_wedge.e3) - (other.e235 * anti_wedge.e4), -(other.e435 * anti_wedge.e1) - (other.e315 * anti_wedge.e4), -(other.e415 * anti_wedge.e2) - (other.e125 * anti_wedge.e4), (other.e321 * anti_wedge.e5) + (other.e125 * anti_wedge.e3)) + (anti_wedge.group0.yzxy * float4(other.group1.zxy, other.e315)) + float4((float3(anti_wedge.e5) * other.group0.xyz), other.e235 * anti_wedge.e1), 
            /* e1234 */
            -(other.e423 * anti_wedge.e1) - (other.e431 * anti_wedge.e2) - (other.e412 * anti_wedge.e3) - (other.e321 * anti_wedge.e4)
        );
    }
}
// Fancy infix trick (second half)
public Sphere operator /(AntiProjectViaHorizonOntoInfixPartial<DipoleInversion> lhs, CircleRotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension DipoleInversion {
    public Sphere anti_project_via_horizon_onto(CircleRotor other) {
        AntiCircleRotor right_dual = AntiCircleRotor(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        RoundPoint anti_wedge = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(-(right_dual.e41 * this.e3215) - (right_dual.e31 * this.e4125), -(right_dual.e42 * this.e3215) - (right_dual.e12 * this.e4235), -(right_dual.e43 * this.e3215) - (right_dual.e23 * this.e4315), (right_dual.e43 * this.e4125) + (right_dual.e45 * this.e1234)) + (this.group3.yzxx * float4(right_dual.group1.zxy, right_dual.e41)) + float4((this.group2.www * right_dual.group2.xyz), right_dual.e42 * this.e4315), 
            /* e5 */
            -(right_dual.e45 * this.e3215) - (right_dual.e15 * this.e4235) - (right_dual.e25 * this.e4315) - (right_dual.e35 * this.e4125)
        );
        return Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(-(other.e425 * anti_wedge.e3) - (other.e235 * anti_wedge.e4), -(other.e435 * anti_wedge.e1) - (other.e315 * anti_wedge.e4), -(other.e415 * anti_wedge.e2) - (other.e125 * anti_wedge.e4), (other.e315 * anti_wedge.e2) + (other.e125 * anti_wedge.e3)) + (float4(anti_wedge.e5) * float4(other.group0.xyz, other.e321)) + (anti_wedge.group0.yzxx * float4(other.group1.zxy, other.e235)), 
            /* e1234 */
            -(other.e423 * anti_wedge.e1) - (other.e431 * anti_wedge.e2) - (other.e412 * anti_wedge.e3) - (other.e321 * anti_wedge.e4)
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<DipoleInversion> lhs, Dipole rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension DipoleInversion {
    public DipoleInversion anti_project_via_horizon_onto(Dipole other) {
        Circle right_dual = Circle(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125 */
            other.group2.xyz * float3(-1.0)
        );
        AntiCircleRotor anti_wedge = AntiCircleRotor(
            /* e41, e42, e43 */
            (float3(this.e1234) * right_dual.group1.xyz) + (right_dual.group0.xyz.zxy * this.group3.yzx) - (right_dual.group0.xyz.yzx * this.group3.zxy), 
            /* e23, e31, e12, e45 */
            float4((right_dual.e423 * this.e3215) + (right_dual.e235 * this.e1234), (right_dual.e431 * this.e3215) + (right_dual.e315 * this.e1234), (right_dual.e412 * this.e3215) + (right_dual.e125 * this.e1234), -(right_dual.e425 * this.e4315) - (right_dual.e435 * this.e4125)) - (right_dual.group1.wwwx * this.group3.xyzx), 
            /* e15, e25, e35, scalar */
            float4((right_dual.e415 * this.e3215) + (right_dual.e315 * this.e4125), (right_dual.e425 * this.e3215) + (right_dual.e125 * this.e4235), (right_dual.e435 * this.e3215) + (right_dual.e235 * this.e4315), -(right_dual.e431 * this.e25) - (right_dual.e412 * this.e35) - (right_dual.e415 * this.e23) - (right_dual.e425 * this.e31) - (right_dual.e435 * this.e12) - (right_dual.e321 * this.e45) - (right_dual.e235 * this.e41) - (right_dual.e315 * this.e42) - (right_dual.e125 * this.e43)) - float4((right_dual.group2.xyz.zxy * this.group3.yzx), right_dual.e423 * this.e15)
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(anti_wedge.scalar) * other.group1, 
            /* e15, e25, e35, e1234 */
            float4((float3(anti_wedge.scalar) * other.group2.xyz), -(anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12) - (anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e42 * other.e35) + (anti_wedge.e23 * other.e45) + (anti_wedge.e45 * other.e23) + (anti_wedge.e35 * other.e42), (anti_wedge.e43 * other.e15) + (anti_wedge.e31 * other.e45) + (anti_wedge.e45 * other.e31) + (anti_wedge.e15 * other.e43), (anti_wedge.e41 * other.e25) + (anti_wedge.e12 * other.e45) + (anti_wedge.e45 * other.e12) + (anti_wedge.e25 * other.e41), -(anti_wedge.e12 * other.e35) - (anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12)) - float4((anti_wedge.group0.xyz.zxy * other.group2.xyz.yzx), anti_wedge.e23 * other.e15) - float4((other.group0.xyz.zxy * anti_wedge.group2.yzx), anti_wedge.e31 * other.e25)
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<DipoleInversion> lhs, DipoleInversion rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension DipoleInversion {
    public DipoleInversion anti_project_via_horizon_onto(DipoleInversion other) {
        AntiDipoleInversion right_dual = AntiDipoleInversion(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiCircleRotor anti_wedge = AntiCircleRotor(
            /* e41, e42, e43 */
            (float3(this.e1234) * right_dual.group1.xyz) + (right_dual.group0.xyz.zxy * this.group3.yzx) - (right_dual.group0.xyz.yzx * this.group3.zxy), 
            /* e23, e31, e12, e45 */
            float4((right_dual.e423 * this.e3215) + (right_dual.e235 * this.e1234), (right_dual.e431 * this.e3215) + (right_dual.e315 * this.e1234), (right_dual.e412 * this.e3215) + (right_dual.e125 * this.e1234), -(right_dual.e425 * this.e4315) - (right_dual.e435 * this.e4125)) - (right_dual.group1.wwwx * this.group3.xyzx), 
            /* e15, e25, e35, scalar */
            (float4(this.e3215) * float4(right_dual.group1.xyz, right_dual.e4)) + (this.group3.zxyx * float4(right_dual.group2.yzx, right_dual.e1)) + float4(float3(0.0), (right_dual.e2 * this.e4315) + (right_dual.e3 * this.e4125) + (right_dual.e5 * this.e1234) - (right_dual.e431 * this.e25) - (right_dual.e412 * this.e35) - (right_dual.e415 * this.e23) - (right_dual.e425 * this.e31) - (right_dual.e435 * this.e12) - (right_dual.e321 * this.e45) - (right_dual.e235 * this.e41) - (right_dual.e315 * this.e42) - (right_dual.e125 * this.e43)) - float4((right_dual.group2.zxy * this.group3.yzx), right_dual.e423 * this.e15)
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(anti_wedge.scalar) * other.group1, 
            /* e15, e25, e35, e1234 */
            float4((anti_wedge.group2.www * other.group2.xyz), (anti_wedge.scalar * other.e1234) - (anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12) - (anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e23 * other.e45) + (anti_wedge.e45 * other.e23) + (anti_wedge.e35 * other.e42) + (anti_wedge.scalar * other.e4235), (anti_wedge.e31 * other.e45) + (anti_wedge.e45 * other.e31) + (anti_wedge.e15 * other.e43) + (anti_wedge.scalar * other.e4315), (anti_wedge.e12 * other.e45) + (anti_wedge.e45 * other.e12) + (anti_wedge.e25 * other.e41) + (anti_wedge.scalar * other.e4125), -(anti_wedge.e12 * other.e35) - (anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12)) + float4((anti_wedge.group0.xyz.yzx * other.group2.zxy), anti_wedge.scalar * other.e3215) - (other.group2.yzxx * float4(anti_wedge.group0.xyz.zxy, anti_wedge.e23)) - float4((other.group0.xyz.zxy * anti_wedge.group2.yzx), anti_wedge.e31 * other.e25)
        );
    }
}
// Fancy infix trick (second half)
public Flector operator /(AntiProjectViaHorizonOntoInfixPartial<DipoleInversion> lhs, DualNum rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension DipoleInversion {
    public Flector anti_project_via_horizon_onto(DualNum other) {
        AntiDualNum right_dual = AntiDualNum(
            /* e3215, scalar */
            other.group0.xy * float2(-1.0)
        );
        AntiFlector anti_wedge = AntiFlector(
            /* e235, e315, e125, e321 */
            float4(right_dual.e3215) * float4(this.group3.xyz, this.e1234), 
            /* e1, e2, e3, e5 */
            float4(right_dual.e3215) * float4(this.group0.xyz, this.e45)
        );
        return Flector(
            /* e15, e25, e35, e45 */
            float4(other.group0.xy.xx, other.e5, 0.0) * float4(float3(1.0), 0.0) * float4(anti_wedge.group1.xyz, 0.0) * float4(-1.0, -1.0, -1.0, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(float3(0.0), anti_wedge.e321 * other.e5 * -1.0)
        );
    }
}
// Fancy infix trick (second half)
public Flector operator /(AntiProjectViaHorizonOntoInfixPartial<DipoleInversion> lhs, FlatPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension DipoleInversion {
    public Flector anti_project_via_horizon_onto(FlatPoint other) {
        AntiFlatPoint right_dual = AntiFlatPoint(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiMotor anti_wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4(right_dual.e235 * this.e1234, right_dual.e315 * this.e1234, right_dual.e125 * this.e1234, -(right_dual.e315 * this.e42) - (right_dual.e125 * this.e43) - (right_dual.e321 * this.e45)) - float4((right_dual.group0.www * this.group3.xyz), right_dual.e235 * this.e41), 
            /* e15, e25, e35, e3215 */
            float4(((right_dual.group0.yzx * this.group3.zxy) - (right_dual.group0.zxy * this.group3.yzx)), 0.0)
        );
        return Flector(
            /* e15, e25, e35, e45 */
            float4(anti_wedge.scalar) * other.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4((float3(other.e45) * anti_wedge.group0.xyz), -(anti_wedge.e23 * other.e15) - (anti_wedge.e31 * other.e25) - (anti_wedge.e12 * other.e35))
        );
    }
}
// Fancy infix trick (second half)
public Flector operator /(AntiProjectViaHorizonOntoInfixPartial<DipoleInversion> lhs, Flector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension DipoleInversion {
    public Flector anti_project_via_horizon_onto(Flector other) {
        AntiFlector right_dual = AntiFlector(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiMotor anti_wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4(float3(0.0), (right_dual.e2 * this.e4315) + (right_dual.e3 * this.e4125) + (right_dual.e5 * this.e1234) - (right_dual.e315 * this.e42) - (right_dual.e125 * this.e43) - (right_dual.e321 * this.e45)) + float4((this.group2.www * right_dual.group0.xyz), right_dual.e1 * this.e4235) - float4((right_dual.group0.www * this.group3.xyz), right_dual.e235 * this.e41), 
            /* e15, e25, e35, e3215 */
            float4(((right_dual.group0.yzx * this.group3.zxy) - (right_dual.group0.zxy * this.group3.yzx)), 0.0)
        );
        return Flector(
            /* e15, e25, e35, e45 */
            float4(anti_wedge.scalar) * other.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4(anti_wedge.scalar * other.e4235, anti_wedge.scalar * other.e4315, anti_wedge.scalar * other.e4125, -(anti_wedge.e23 * other.e15) - (anti_wedge.e31 * other.e25) - (anti_wedge.e12 * other.e35)) + (anti_wedge.group0 * float4(other.group0.www, other.e3215))
        );
    }
}
// Fancy infix trick (second half)
public Plane operator /(AntiProjectViaHorizonOntoInfixPartial<DipoleInversion> lhs, Line rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension DipoleInversion {
    public Plane anti_project_via_horizon_onto(Line other) {
        AntiLine right_dual = AntiLine(
            /* e23, e31, e12 */
            other.group0.xyz, 
            /* e15, e25, e35 */
            other.group1.xyz
        );
        AntiPlane anti_wedge = AntiPlane(
            /* e1, e2, e3, e5 */
            float4((right_dual.e12 * this.e4315) + (right_dual.e15 * this.e1234), (right_dual.e23 * this.e4125) + (right_dual.e25 * this.e1234), (right_dual.e31 * this.e4235) + (right_dual.e35 * this.e1234), -(right_dual.e25 * this.e4315) - (right_dual.e35 * this.e4125)) - (this.group3.zxyx * float4(right_dual.group0.xyz.yzx, right_dual.e15))
        );
        return Plane(
            /* e4235, e4315, e4125, e3215 */
            float4(anti_wedge.e3 * other.e425 * -1.0, anti_wedge.e1 * other.e435 * -1.0, anti_wedge.e2 * other.e415 * -1.0, (anti_wedge.e2 * other.e315) + (anti_wedge.e3 * other.e125)) + (anti_wedge.group0.yzxx * float4(other.group0.xyz.zxy, other.e235))
        );
    }
}
// Fancy infix trick (second half)
public Flector operator /(AntiProjectViaHorizonOntoInfixPartial<DipoleInversion> lhs, Motor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension DipoleInversion {
    public Flector anti_project_via_horizon_onto(Motor other) {
        AntiMotor right_dual = AntiMotor(
            /* e23, e31, e12, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiFlector anti_wedge = AntiFlector(
            /* e235, e315, e125, e321 */
            float4(right_dual.e3215) * float4(this.group3.xyz, this.e1234), 
            /* e1, e2, e3, e5 */
            float4((right_dual.e12 * this.e4315) + (right_dual.e15 * this.e1234), (right_dual.e23 * this.e4125) + (right_dual.e25 * this.e1234), (right_dual.e31 * this.e4235) + (right_dual.e35 * this.e1234), -(right_dual.e25 * this.e4315) - (right_dual.e35 * this.e4125)) + float4((this.group0.xyz * right_dual.group1.www), right_dual.e3215 * this.e45) - (this.group3.zxyx * float4(right_dual.group0.yzx, right_dual.e15))
        );
        return Flector(
            /* e15, e25, e35, e45 */
            float4(float3(1.0), 0.0) * float4(other.group1.www, 0.0) * float4(anti_wedge.group1.xyz, 0.0) * float4(-1.0, -1.0, -1.0, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            (anti_wedge.group1.yzxx * float4(other.group0.zxy, other.e235)) + float4(float3(0.0), (anti_wedge.e2 * other.e315) + (anti_wedge.e3 * other.e125)) - float4((anti_wedge.group1.zxy * other.group0.yzx), anti_wedge.e321 * other.e5)
        );
    }
}
// Fancy infix trick (second half)
public MultiVector operator /(AntiProjectViaHorizonOntoInfixPartial<DipoleInversion> lhs, MultiVector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension DipoleInversion {
    public MultiVector anti_project_via_horizon_onto(MultiVector other) {
        MultiVector right_dual = MultiVector(
            /* scalar, e12345 */
            other.group0.xy.yx * float2(-1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215, 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43 */
            other.group7.xyz, 
            /* e23, e31, e12 */
            other.group6.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412 */
            other.group4.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group3.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        MultiVector anti_wedge = MultiVector(
            /* scalar, e12345 */
            float2((this.e1234 * right_dual.e5) + (this.e4235 * right_dual.e1) + (this.e4315 * right_dual.e2) + (this.e4125 * right_dual.e3) + (this.e3215 * right_dual.e4) - (this.e41 * right_dual.e235) - (this.e42 * right_dual.e315) - (this.e43 * right_dual.e125) - (this.e23 * right_dual.e415) - (this.e31 * right_dual.e425) - (this.e12 * right_dual.e435) - (this.e45 * right_dual.e321) - (this.e15 * right_dual.e423) - (this.e25 * right_dual.e431) - (this.e35 * right_dual.e412), 0.0), 
            /* e1, e2, e3, e4 */
            (float4(this.e1234) * right_dual.group3) + (this.group3.yzxy * float4(right_dual.group5.xyz.zxy, right_dual.e42)) + float4((this.group0.xyz * right_dual.group9.www), this.e4235 * right_dual.e41) + float4((this.group1.yzx * right_dual.group9.zxy), this.e4125 * right_dual.e43) - (float4(right_dual.e1234) * float4(this.group2.xyz, this.e45)) - (right_dual.group9.yzxz * float4(this.group1.zxy, this.e43)) - float4((right_dual.group4.xyz * this.group3.www), this.e41 * right_dual.e4235) - float4((right_dual.group5.xyz.yzx * this.group3.zxy), this.e42 * right_dual.e4315), 
            /* e5 */
            (this.e45 * right_dual.e3215) + (this.e15 * right_dual.e4235) + (this.e25 * right_dual.e4315) + (this.e35 * right_dual.e4125) - (this.e4235 * right_dual.e15) - (this.e4315 * right_dual.e25) - (this.e4125 * right_dual.e35) - (this.e3215 * right_dual.e45), 
            /* e15, e25, e35, e45 */
            float4((this.e4125 * right_dual.e315) + (this.e3215 * right_dual.e415), (this.e4235 * right_dual.e125) + (this.e3215 * right_dual.e425), (this.e4315 * right_dual.e235) + (this.e3215 * right_dual.e435), -(this.e4315 * right_dual.e425) - (this.e4125 * right_dual.e435)) + (float4(right_dual.e12345) * float4(this.group2.xyz, this.e45)) - float4((right_dual.group8.xyz.zxy * this.group3.yzx), this.e4235 * right_dual.e415), 
            /* e41, e42, e43 */
            (float3(this.e1234) * right_dual.group6.xyz) + (float3(right_dual.e12345) * this.group0.xyz) + (right_dual.group7.xyz.zxy * this.group3.yzx) - (right_dual.group7.xyz.yzx * this.group3.zxy), 
            /* e23, e31, e12 */
            (float3(this.e1234) * right_dual.group8.xyz) + (float3(this.e3215) * right_dual.group7.xyz) + (float3(right_dual.e12345) * this.group1.xyz) - (float3(right_dual.e321) * this.group3.xyz), 
            /* e415, e425, e435, e321 */
            (right_dual.group9.yzxw * float4(this.group3.zxy, this.e1234)) - (this.group3.yzxw * float4(right_dual.group9.zxy, right_dual.e1234)), 
            /* e423, e431, e412 */
            (float3(this.e1234) * right_dual.group9.xyz) - (float3(right_dual.e1234) * this.group3.xyz), 
            /* e235, e315, e125 */
            (float3(right_dual.e3215) * this.group3.xyz) - (float3(this.e3215) * right_dual.group9.xyz), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * this.group3, 
            /* e1234 */
            this.e1234 * right_dual.e12345
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(anti_wedge.scalar * other.scalar, (anti_wedge.scalar * other.e12345) + (anti_wedge.e12345 * other.scalar) + (anti_wedge.e1 * other.e4235) + (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) + (anti_wedge.e4 * other.e3215) + (anti_wedge.e5 * other.e1234) + (anti_wedge.e4235 * other.e1) + (anti_wedge.e4315 * other.e2) + (anti_wedge.e4125 * other.e3) + (anti_wedge.e3215 * other.e4) + (anti_wedge.e1234 * other.e5) - (anti_wedge.e15 * other.e423) - (anti_wedge.e25 * other.e431) - (anti_wedge.e35 * other.e412) - (anti_wedge.e45 * other.e321) - (anti_wedge.e41 * other.e235) - (anti_wedge.e42 * other.e315) - (anti_wedge.e43 * other.e125) - (anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435) - (anti_wedge.e415 * other.e23) - (anti_wedge.e425 * other.e31) - (anti_wedge.e435 * other.e12) - (anti_wedge.e321 * other.e45) - (anti_wedge.e423 * other.e15) - (anti_wedge.e431 * other.e25) - (anti_wedge.e412 * other.e35) - (anti_wedge.e235 * other.e41) - (anti_wedge.e315 * other.e42) - (anti_wedge.e125 * other.e43)), 
            /* e1, e2, e3, e4 */
            (float4(anti_wedge.scalar) * other.group1) + (float4(other.scalar) * anti_wedge.group1), 
            /* e5 */
            (anti_wedge.scalar * other.e5) + (anti_wedge.e5 * other.scalar), 
            /* e15, e25, e35, e45 */
            (float4(anti_wedge.scalar) * other.group3) + (float4(anti_wedge.e5) * other.group1) + (float4(other.scalar) * anti_wedge.group3) - (float4(other.e5) * anti_wedge.group1), 
            /* e41, e42, e43 */
            (float3(anti_wedge.scalar) * other.group4.xyz) + (float3(other.scalar) * anti_wedge.group4.xyz) + (float3(other.e4) * anti_wedge.group1.xyz) - (float3(anti_wedge.e4) * other.group1.xyz), 
            /* e23, e31, e12 */
            (float3(anti_wedge.scalar) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group5.xyz) + (anti_wedge.group1.zxy * other.group1.yzx) - (anti_wedge.group1.yzx * other.group1.zxy), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e4 * other.e15) + (anti_wedge.e5 * other.e41) + (anti_wedge.e15 * other.e4) + (anti_wedge.e41 * other.e5), (anti_wedge.e4 * other.e25) + (anti_wedge.e5 * other.e42) + (anti_wedge.e25 * other.e4) + (anti_wedge.e42 * other.e5), (anti_wedge.e4 * other.e35) + (anti_wedge.e5 * other.e43) + (anti_wedge.e35 * other.e4) + (anti_wedge.e43 * other.e5), -(anti_wedge.e1 * other.e23) - (anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12) - (anti_wedge.e12 * other.e3)) + (float4(anti_wedge.scalar) * other.group6) + (float4(other.scalar) * anti_wedge.group6) - (other.group1.xyzy * float4(anti_wedge.group3.www, anti_wedge.e31)) - float4((other.group3.www * anti_wedge.group1.xyz), anti_wedge.e23 * other.e1), 
            /* e423, e431, e412 */
            (float3(anti_wedge.scalar) * other.group7.xyz) + (float3(anti_wedge.e4) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group7.xyz) + (float3(other.e4) * anti_wedge.group5.xyz) + (anti_wedge.group4.xyz.yzx * other.group1.zxy) + (other.group4.xyz.yzx * anti_wedge.group1.zxy) - (anti_wedge.group4.xyz.zxy * other.group1.yzx) - (other.group4.xyz.zxy * anti_wedge.group1.yzx), 
            /* e235, e315, e125 */
            (float3(anti_wedge.scalar) * other.group8.xyz) + (float3(anti_wedge.e5) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group8.xyz) + (float3(other.e5) * anti_wedge.group5.xyz) + (anti_wedge.group1.yzx * other.group3.zxy) + (anti_wedge.group3.zxy * other.group1.yzx) - (anti_wedge.group1.zxy * other.group3.yzx) - (anti_wedge.group3.yzx * other.group1.zxy), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e2 * other.e435) + (anti_wedge.e5 * other.e423) + (anti_wedge.e45 * other.e23) + (anti_wedge.e425 * other.e3), (anti_wedge.e3 * other.e415) + (anti_wedge.e5 * other.e431) + (anti_wedge.e45 * other.e31) + (anti_wedge.e435 * other.e1), (anti_wedge.e1 * other.e425) + (anti_wedge.e5 * other.e412) + (anti_wedge.e45 * other.e12) + (anti_wedge.e415 * other.e2), -(anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12) - (anti_wedge.e321 * other.e5)) + (float4(anti_wedge.scalar) * other.group9) + (float4(other.scalar) * anti_wedge.group9) + float4((anti_wedge.group5.xyz * other.group3.www), anti_wedge.e2 * other.e315) + float4((anti_wedge.group8.xyz * other.group1.www), anti_wedge.e3 * other.e125) + float4((anti_wedge.group4.xyz.yzx * other.group3.zxy), anti_wedge.e1 * other.e235) + float4((other.group4.xyz.yzx * anti_wedge.group3.zxy), anti_wedge.e5 * other.e321) - (other.group1.yzxz * float4(anti_wedge.group6.zxy, anti_wedge.e125)) - (other.group3.yzxx * float4(anti_wedge.group4.xyz.zxy, anti_wedge.e23)) - float4((float3(other.e5) * anti_wedge.group7.xyz), anti_wedge.e31 * other.e25) - float4((other.group8.xyz * anti_wedge.group1.www), anti_wedge.e235 * other.e1) - float4((other.group4.xyz.zxy * anti_wedge.group3.yzx), anti_wedge.e12 * other.e35) - float4((anti_wedge.group1.zxy * other.group6.yzx), anti_wedge.e315 * other.e2), 
            /* e1234 */
            (anti_wedge.scalar * other.e1234) + (anti_wedge.e321 * other.e4) + (anti_wedge.e423 * other.e1) + (anti_wedge.e431 * other.e2) + (anti_wedge.e412 * other.e3) + (anti_wedge.e1234 * other.scalar) - (anti_wedge.e1 * other.e423) - (anti_wedge.e2 * other.e431) - (anti_wedge.e3 * other.e412) - (anti_wedge.e4 * other.e321) - (anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12) - (anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)
        );
    }
}
// Fancy infix trick (second half)
public Plane operator /(AntiProjectViaHorizonOntoInfixPartial<DipoleInversion> lhs, Plane rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension DipoleInversion {
    public Plane anti_project_via_horizon_onto(Plane other) {
        AntiPlane right_dual = AntiPlane(
            /* e1, e2, e3, e5 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return Plane(
            /* e4235, e4315, e4125, e3215 */
            float4((right_dual.e1 * this.e4235) + (right_dual.e2 * this.e4315) + (right_dual.e3 * this.e4125) + (right_dual.e5 * this.e1234)) * other.group0
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<DipoleInversion> lhs, RoundPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension DipoleInversion {
    public DipoleInversion anti_project_via_horizon_onto(RoundPoint other) {
        Sphere right_dual = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        AntiDipoleInversion anti_wedge = AntiDipoleInversion(
            /* e423, e431, e412 */
            (float3(this.e1234) * right_dual.group0.xyz) - (float3(right_dual.e1234) * this.group3.xyz), 
            /* e415, e425, e435, e321 */
            (right_dual.group0.yzxw * float4(this.group3.zxy, this.e1234)) - (this.group3.yzxw * float4(right_dual.group0.zxy, right_dual.e1234)), 
            /* e235, e315, e125, e4 */
            float4(this.e4235 * right_dual.e3215, this.e4315 * right_dual.e3215, this.e4125 * right_dual.e3215, -(this.e42 * right_dual.e4315) - (this.e43 * right_dual.e4125) - (this.e45 * right_dual.e1234)) - (right_dual.group0.xyzx * float4(this.group3.www, this.e41)), 
            /* e1, e2, e3, e5 */
            float4(-(this.e12 * right_dual.e4315) - (this.e15 * right_dual.e1234), -(this.e23 * right_dual.e4125) - (this.e25 * right_dual.e1234), -(this.e31 * right_dual.e4235) - (this.e35 * right_dual.e1234), (this.e25 * right_dual.e4315) + (this.e35 * right_dual.e4125)) + (float4(right_dual.e3215) * float4(this.group0.xyz, this.e45)) + (right_dual.group0.zxyx * float4(this.group1.yzx, this.e15))
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            (float3(other.e4) * anti_wedge.group3.xyz) - (float3(anti_wedge.e4) * other.group0.xyz), 
            /* e23, e31, e12, e45 */
            (anti_wedge.group3.zxyw * other.group0.yzxw) - float4((anti_wedge.group3.yzx * other.group0.zxy), anti_wedge.e4 * other.e5), 
            /* e15, e25, e35, e1234 */
            float4(anti_wedge.e1 * other.e5 * -1.0, anti_wedge.e2 * other.e5 * -1.0, anti_wedge.e3 * other.e5 * -1.0, (anti_wedge.e431 * other.e2) + (anti_wedge.e412 * other.e3) + (anti_wedge.e321 * other.e4)) + (other.group0.xyzx * float4(anti_wedge.group3.www, anti_wedge.e423)), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e425 * other.e3) + (anti_wedge.e235 * other.e4), (anti_wedge.e435 * other.e1) + (anti_wedge.e315 * other.e4), (anti_wedge.e415 * other.e2) + (anti_wedge.e125 * other.e4), -(anti_wedge.e315 * other.e2) - (anti_wedge.e125 * other.e3)) - (float4(other.e5) * float4(anti_wedge.group0.xyz, anti_wedge.e321)) - (other.group0.yzxx * float4(anti_wedge.group1.zxy, anti_wedge.e235))
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<DipoleInversion> lhs, Scalar rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension DipoleInversion {
    public DipoleInversion anti_project_via_horizon_onto(Scalar other) {
        AntiScalar right_dual = AntiScalar(
            /* e12345 */
            other.scalar
        );
        DipoleInversion anti_wedge = DipoleInversion(
            /* e41, e42, e43 */
            float3(right_dual.e12345) * this.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(right_dual.e12345) * this.group1, 
            /* e15, e25, e35, e1234 */
            float4(right_dual.e12345) * this.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * this.group3
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            float3(other.scalar) * anti_wedge.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(other.scalar) * anti_wedge.group1, 
            /* e15, e25, e35, e1234 */
            float4(other.scalar) * anti_wedge.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar) * anti_wedge.group3
        );
    }
}
// Fancy infix trick (second half)
public Sphere operator /(AntiProjectViaHorizonOntoInfixPartial<DipoleInversion> lhs, Sphere rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension DipoleInversion {
    public Sphere anti_project_via_horizon_onto(Sphere other) {
        RoundPoint right_dual = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(other.group0.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215
        );
        Scalar anti_wedge = Scalar(
            /* scalar */
            (this.e1234 * right_dual.e5) + (this.e4235 * right_dual.e1) + (this.e4315 * right_dual.e2) + (this.e4125 * right_dual.e3) + (this.e3215 * right_dual.e4)
        );
        return Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(anti_wedge.scalar) * other.group0, 
            /* e1234 */
            anti_wedge.scalar * other.e1234
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<DipoleInversion> lhs, VersorEven rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension DipoleInversion {
    public DipoleInversion anti_project_via_horizon_onto(VersorEven other) {
        VersorOdd right_dual = VersorOdd(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiDipoleInversion anti_wedge = AntiDipoleInversion(
            /* e423, e431, e412 */
            (float3(this.e1234) * right_dual.group3.xyz) - (float3(right_dual.e1234) * this.group3.xyz), 
            /* e415, e425, e435, e321 */
            (right_dual.group3.yzxw * float4(this.group3.zxy, this.e1234)) - (this.group3.yzxw * float4(right_dual.group3.zxy, right_dual.e1234)), 
            /* e235, e315, e125, e4 */
            float4(float3(0.0), (this.e4235 * right_dual.e41) + (this.e4315 * right_dual.e42) + (this.e4125 * right_dual.e43) - (this.e42 * right_dual.e4315) - (this.e43 * right_dual.e4125) - (this.e45 * right_dual.e1234)) + float4((right_dual.group3.www * this.group3.xyz), this.e1234 * right_dual.e45) - (right_dual.group3.xyzx * float4(this.group3.www, this.e41)), 
            /* e1, e2, e3, e5 */
            (float4(right_dual.e3215) * float4(this.group0.xyz, this.e45)) + (this.group2.wwwy * float4(right_dual.group2.xyz, right_dual.e4315)) + (right_dual.group3.zxyx * float4(this.group1.yzx, this.e15)) + float4((this.group3.yzx * right_dual.group1.zxy), this.e35 * right_dual.e4125) - (float4(this.e3215) * float4(right_dual.group0.xyz, right_dual.e45)) - (this.group3.zxyz * float4(right_dual.group1.yzx, right_dual.e35)) - (right_dual.group2.wwwy * float4(this.group2.xyz, this.e4315)) - float4((this.group1.zxy * right_dual.group3.yzx), this.e4235 * right_dual.e15)
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            (float3(other.e4) * anti_wedge.group3.xyz) - (float3(anti_wedge.e4) * other.group3.xyz), 
            /* e23, e31, e12, e45 */
            (anti_wedge.group3.zxyw * other.group3.yzxw) - float4((anti_wedge.group3.yzx * other.group3.zxy), anti_wedge.e4 * other.e5), 
            /* e15, e25, e35, e1234 */
            (other.group3.xyzx * float4(anti_wedge.group3.www, anti_wedge.e423)) + float4(float3(0.0), (anti_wedge.e431 * other.e2) + (anti_wedge.e412 * other.e3) + (anti_wedge.e321 * other.e4) - (anti_wedge.e1 * other.e423) - (anti_wedge.e2 * other.e431) - (anti_wedge.e3 * other.e412)) - float4((other.group2.www * anti_wedge.group3.xyz), anti_wedge.e4 * other.e321), 
            /* e4235, e4315, e4125, e3215 */
            (float4(anti_wedge.e5) * float4(other.group0.xyz, other.e321)) + (anti_wedge.group3.yzxz * float4(other.group1.zxy, other.e125)) + float4((anti_wedge.group1.yzx * other.group3.zxy), anti_wedge.e1 * other.e235) + float4((other.group3.www * anti_wedge.group2.xyz), anti_wedge.e2 * other.e315) - (float4(other.e5) * float4(anti_wedge.group0.xyz, anti_wedge.e321)) - (anti_wedge.group2.wwwy * float4(other.group2.xyz, other.e2)) - (other.group3.yzxx * float4(anti_wedge.group1.zxy, anti_wedge.e235)) - float4((anti_wedge.group3.zxy * other.group1.yzx), anti_wedge.e125 * other.e3)
        );
    }
}
// Fancy infix trick (second half)
public VersorOdd operator /(AntiProjectViaHorizonOntoInfixPartial<DipoleInversion> lhs, VersorOdd rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension DipoleInversion {
    public VersorOdd anti_project_via_horizon_onto(VersorOdd other) {
        VersorEven right_dual = VersorEven(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        VersorOdd anti_wedge = VersorOdd(
            /* e41, e42, e43, scalar */
            (this.group3.yzxy * float4(right_dual.group0.zxy, right_dual.e2)) + float4(float3(0.0), (this.e4125 * right_dual.e3) + (this.e3215 * right_dual.e4) - (this.e42 * right_dual.e315) - (this.e43 * right_dual.e125) - (this.e23 * right_dual.e415) - (this.e31 * right_dual.e425) - (this.e12 * right_dual.e435) - (this.e45 * right_dual.e321) - (this.e15 * right_dual.e423) - (this.e25 * right_dual.e431) - (this.e35 * right_dual.e412)) + float4((this.group0.xyz * right_dual.group0.www), this.e1234 * right_dual.e5) + float4((this.group2.www * right_dual.group1.xyz), this.e4235 * right_dual.e1) - float4((this.group3.zxy * right_dual.group0.yzx), this.e41 * right_dual.e235), 
            /* e23, e31, e12, e45 */
            float4((this.e1234 * right_dual.e235) + (this.e3215 * right_dual.e423), (this.e1234 * right_dual.e315) + (this.e3215 * right_dual.e431), (this.e1234 * right_dual.e125) + (this.e3215 * right_dual.e412), -(this.e4315 * right_dual.e425) - (this.e4125 * right_dual.e435)) + (float4(right_dual.e12345) * this.group1) - (this.group3.xyzx * right_dual.group1.wwwx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(this.e3215) * right_dual.group1.xyz) + (float3(right_dual.e12345) * this.group2.xyz) + (this.group3.zxy * right_dual.group2.yzx) - (this.group3.yzx * right_dual.group2.zxy)), this.e1234 * right_dual.e12345), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * this.group3
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(((float3(anti_wedge.scalar) * other.group0.xyz) + (float3(other.scalar) * anti_wedge.group0.xyz)), anti_wedge.scalar * other.scalar), 
            /* e23, e31, e12, e45 */
            (float4(anti_wedge.scalar) * other.group1) + (float4(other.scalar) * anti_wedge.group1), 
            /* e15, e25, e35, e1234 */
            (float4(anti_wedge.scalar) * other.group2) + (float4(other.scalar) * anti_wedge.group2) + float4(float3(0.0), -(anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12) - (anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e23 * other.e45) + (anti_wedge.e45 * other.e23) + (anti_wedge.e35 * other.e42) + (anti_wedge.e4235 * other.scalar), (anti_wedge.e31 * other.e45) + (anti_wedge.e45 * other.e31) + (anti_wedge.e15 * other.e43) + (anti_wedge.e4315 * other.scalar), (anti_wedge.e12 * other.e45) + (anti_wedge.e45 * other.e12) + (anti_wedge.e25 * other.e41) + (anti_wedge.e4125 * other.scalar), -(anti_wedge.e12 * other.e35) - (anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12)) + (anti_wedge.group0.yzxw * float4(other.group2.zxy, other.e3215)) + float4((anti_wedge.group0.www * other.group3.xyz), anti_wedge.e3215 * other.scalar) - (other.group2.yzxx * float4(anti_wedge.group0.zxy, anti_wedge.e23)) - float4((anti_wedge.group2.yzx * other.group0.zxy), anti_wedge.e31 * other.e25)
        );
    }
}
// Fancy infix trick (first half)
public AntiProjectViaHorizonOntoInfixPartial<DualNum> operator /(DualNum lhs, AntiProjectViaHorizonOntoInfix rhs) {
    return AntiProjectViaHorizonOntoInfixPartial<DualNum>(lhs);
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<DualNum> lhs, AntiCircleRotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension DualNum {
    public VersorEven anti_project_via_horizon_onto(AntiCircleRotor other) {
        CircleRotor right_dual = CircleRotor(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        VersorEven anti_wedge = VersorEven(
            /* e423, e431, e412, e12345 */
            float4(this.e12345) * float4(right_dual.group0.xyz, right_dual.e12345), 
            /* e415, e425, e435, e321 */
            float4(this.e12345) * right_dual.group1, 
            /* e235, e315, e125, e5 */
            right_dual.group2 * float4(this.group0.xy.yy, this.e12345, this.e5), 
            /* e1, e2, e3, e4 */
            float4(0.0)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4((other.e23 * anti_wedge.e4) + (other.scalar * anti_wedge.e423), (other.e31 * anti_wedge.e4) + (other.scalar * anti_wedge.e431), (other.e12 * anti_wedge.e4) + (other.scalar * anti_wedge.e412), -(other.e42 * anti_wedge.e315) - (other.e43 * anti_wedge.e125) - (other.e23 * anti_wedge.e415) - (other.e31 * anti_wedge.e425) - (other.e12 * anti_wedge.e435) - (other.e45 * anti_wedge.e321) - (other.e15 * anti_wedge.e423) - (other.e25 * anti_wedge.e431) - (other.e35 * anti_wedge.e412)) + float4((other.group0.xyz.yzx * anti_wedge.group3.zxy), other.scalar * anti_wedge.e12345) - float4((other.group0.xyz.zxy * anti_wedge.group3.yzx), other.e41 * anti_wedge.e235), 
            /* e415, e425, e435, e321 */
            float4((other.e15 * anti_wedge.e4) + (other.scalar * anti_wedge.e415), (other.e25 * anti_wedge.e4) + (other.scalar * anti_wedge.e425), (other.e35 * anti_wedge.e4) + (other.scalar * anti_wedge.e435), -(other.e31 * anti_wedge.e2) - (other.e12 * anti_wedge.e3)) + float4((other.group0.xyz * anti_wedge.group2.www), other.scalar * anti_wedge.e321) - (other.group1.wwwx * anti_wedge.group3.xyzx), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.scalar) * anti_wedge.group2.xyz) + (float3(anti_wedge.e5) * other.group1.xyz) + (other.group2.zxy * anti_wedge.group3.yzx) - (other.group2.yzx * anti_wedge.group3.zxy)), other.scalar * anti_wedge.e5), 
            /* e1, e2, e3, e4 */
            float4(0.0)
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<DualNum> lhs, AntiDipoleInversion rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension DualNum {
    public VersorEven anti_project_via_horizon_onto(AntiDipoleInversion other) {
        DipoleInversion right_dual = DipoleInversion(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        VersorOdd anti_wedge = VersorOdd(
            /* e41, e42, e43, scalar */
            float4(this.group0.xy.yy, this.e12345, this.e5) * float4(right_dual.group0.xyz, right_dual.e1234), 
            /* e23, e31, e12, e45 */
            float4(this.e12345) * right_dual.group1, 
            /* e15, e25, e35, e1234 */
            float4(this.e12345) * right_dual.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e12345) * right_dual.group3
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            (other.group3.zxyy * float4(anti_wedge.group0.yzx, anti_wedge.e4315)) + float4(float3(0.0), (other.e3 * anti_wedge.e4125) + (other.e5 * anti_wedge.e1234) - (other.e431 * anti_wedge.e25) - (other.e412 * anti_wedge.e35) - (other.e415 * anti_wedge.e23) - (other.e425 * anti_wedge.e31) - (other.e435 * anti_wedge.e12) - (other.e321 * anti_wedge.e45) - (other.e235 * anti_wedge.e41) - (other.e315 * anti_wedge.e42) - (other.e125 * anti_wedge.e43)) + float4((other.group0.xyz * anti_wedge.group0.www), other.e4 * anti_wedge.e3215) + float4((other.group2.www * anti_wedge.group1.xyz), other.e1 * anti_wedge.e4235) - float4((other.group3.yzx * anti_wedge.group0.zxy), other.e423 * anti_wedge.e15), 
            /* e415, e425, e435, e321 */
            float4((other.e4 * anti_wedge.e15) + (other.e5 * anti_wedge.e41), (other.e4 * anti_wedge.e25) + (other.e5 * anti_wedge.e42), (other.e4 * anti_wedge.e35) + (other.e5 * anti_wedge.e43), -(other.e2 * anti_wedge.e31) - (other.e3 * anti_wedge.e12)) + (float4(anti_wedge.scalar) * other.group1) - (other.group3.xyzx * anti_wedge.group1.wwwx), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.e5) * anti_wedge.group1.xyz) + (float3(anti_wedge.scalar) * other.group2.xyz) + (other.group3.yzx * anti_wedge.group2.zxy) - (other.group3.zxy * anti_wedge.group2.yzx)), other.e5 * anti_wedge.scalar), 
            /* e1, e2, e3, e4 */
            float4(anti_wedge.scalar) * float4(other.group3.xyz, other.e4)
        );
    }
}
// Fancy infix trick (second half)
public DualNum operator /(AntiProjectViaHorizonOntoInfixPartial<DualNum> lhs, AntiDualNum rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension DualNum {
    public DualNum anti_project_via_horizon_onto(AntiDualNum other) {
        DualNum right_dual = DualNum(
            /* e5, e12345 */
            other.group0.xy
        );
        return DualNum(
            /* e5, e12345 */
            float2(other.scalar) * float2((right_dual.e5 * this.e12345) + (right_dual.e12345 * this.e5), right_dual.e12345 * this.e12345)
        );
    }
}
// Fancy infix trick (second half)
public AntiScalar operator /(AntiProjectViaHorizonOntoInfixPartial<DualNum> lhs, AntiFlatPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension DualNum {
    public AntiScalar anti_project_via_horizon_onto(AntiFlatPoint other) {
        return AntiScalar(
            /* e12345 */
            pow(other.e321, 2) * this.e12345
        );
    }
}
// Fancy infix trick (second half)
public Motor operator /(AntiProjectViaHorizonOntoInfixPartial<DualNum> lhs, AntiFlector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension DualNum {
    public Motor anti_project_via_horizon_onto(AntiFlector other) {
        Flector right_dual = Flector(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        Flector anti_wedge = Flector(
            /* e15, e25, e35, e45 */
            float4(this.e12345) * right_dual.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e12345) * right_dual.group1
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4((float3(anti_wedge.e45) * other.group1.xyz * float3(-1.0)), (other.e1 * anti_wedge.e4235) + (other.e2 * anti_wedge.e4315) + (other.e3 * anti_wedge.e4125) - (other.e321 * anti_wedge.e45)), 
            /* e235, e315, e125, e5 */
            float4(((other.group1.yzx * anti_wedge.group0.zxy) - (other.group1.zxy * anti_wedge.group0.yzx)), 0.0)
        );
    }
}
// Fancy infix trick (second half)
public AntiScalar operator /(AntiProjectViaHorizonOntoInfixPartial<DualNum> lhs, AntiLine rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension DualNum {
    public AntiScalar anti_project_via_horizon_onto(AntiLine other) {
        Line right_dual = Line(
            /* e415, e425, e435 */
            other.group0.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group1.xyz * float3(-1.0)
        );
        Line anti_wedge = Line(
            /* e415, e425, e435 */
            float3(this.e12345) * right_dual.group0.xyz, 
            /* e235, e315, e125 */
            float3(this.e12345) * right_dual.group1.xyz
        );
        return AntiScalar(
            /* e12345 */
            -(other.e23 * anti_wedge.e415) - (other.e31 * anti_wedge.e425) - (other.e12 * anti_wedge.e435)
        );
    }
}
// Fancy infix trick (second half)
public Motor operator /(AntiProjectViaHorizonOntoInfixPartial<DualNum> lhs, AntiMotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension DualNum {
    public Motor anti_project_via_horizon_onto(AntiMotor other) {
        Motor right_dual = Motor(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        Motor anti_wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4(this.e12345) * right_dual.group0, 
            /* e235, e315, e125, e5 */
            float4(this.group0.xy.yy, this.e12345, (this.e5 * right_dual.e12345) + (this.e12345 * right_dual.e5)) * float4(right_dual.group1.xyz, 1.0)
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4((other.group0.www * anti_wedge.group0.xyz), (other.scalar * anti_wedge.e12345) - (other.e23 * anti_wedge.e415) - (other.e31 * anti_wedge.e425) - (other.e12 * anti_wedge.e435)), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.scalar) * anti_wedge.group1.xyz) + (float3(anti_wedge.e5) * other.group0.xyz)), other.scalar * anti_wedge.e5)
        );
    }
}
// Fancy infix trick (second half)
public AntiScalar operator /(AntiProjectViaHorizonOntoInfixPartial<DualNum> lhs, AntiPlane rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension DualNum {
    public AntiScalar anti_project_via_horizon_onto(AntiPlane other) {
        Plane anti_wedge = Plane(
            /* e4235, e4315, e4125, e3215 */
            float4(this.e12345) * float4(other.group0.xyz, other.e5 * -1.0)
        );
        return AntiScalar(
            /* e12345 */
            (other.e1 * anti_wedge.e4235) + (other.e2 * anti_wedge.e4315) + (other.e3 * anti_wedge.e4125)
        );
    }
}
// Fancy infix trick (second half)
public AntiScalar operator /(AntiProjectViaHorizonOntoInfixPartial<DualNum> lhs, AntiScalar rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension DualNum {
    public AntiScalar anti_project_via_horizon_onto(AntiScalar other) {
        return AntiScalar(
            /* e12345 */
            pow(other.e12345, 2) * this.e12345 * -1.0
        );
    }
}
// Fancy infix trick (second half)
public AntiScalar operator /(AntiProjectViaHorizonOntoInfixPartial<DualNum> lhs, Circle rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension DualNum {
    public AntiScalar anti_project_via_horizon_onto(Circle other) {
        Dipole right_dual = Dipole(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35 */
            other.group2.xyz
        );
        Dipole anti_wedge = Dipole(
            /* e41, e42, e43 */
            float3(this.e12345) * right_dual.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(this.e12345) * right_dual.group1, 
            /* e15, e25, e35 */
            float3(this.e12345) * right_dual.group2.xyz
        );
        return AntiScalar(
            /* e12345 */
            -(other.e423 * anti_wedge.e15) - (other.e431 * anti_wedge.e25) - (other.e412 * anti_wedge.e35) - (other.e415 * anti_wedge.e23) - (other.e425 * anti_wedge.e31) - (other.e435 * anti_wedge.e12) - (other.e321 * anti_wedge.e45) - (other.e235 * anti_wedge.e41) - (other.e315 * anti_wedge.e42) - (other.e125 * anti_wedge.e43)
        );
    }
}
// Fancy infix trick (second half)
public CircleRotor operator /(AntiProjectViaHorizonOntoInfixPartial<DualNum> lhs, CircleRotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension DualNum {
    public CircleRotor anti_project_via_horizon_onto(CircleRotor other) {
        AntiCircleRotor right_dual = AntiCircleRotor(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiCircleRotor anti_wedge = AntiCircleRotor(
            /* e41, e42, e43 */
            float3(this.e12345) * right_dual.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(this.e12345) * right_dual.group1, 
            /* e15, e25, e35, scalar */
            float4(this.e12345) * right_dual.group2
        );
        return CircleRotor(
            /* e423, e431, e412 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(anti_wedge.scalar) * other.group1, 
            /* e235, e315, e125, e12345 */
            float4((anti_wedge.group2.www * other.group2.xyz), (anti_wedge.scalar * other.e12345) - (anti_wedge.e41 * other.e235) - (anti_wedge.e42 * other.e315) - (anti_wedge.e43 * other.e125) - (anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435) - (anti_wedge.e45 * other.e321) - (anti_wedge.e15 * other.e423) - (anti_wedge.e25 * other.e431) - (anti_wedge.e35 * other.e412))
        );
    }
}
// Fancy infix trick (second half)
public AntiScalar operator /(AntiProjectViaHorizonOntoInfixPartial<DualNum> lhs, Dipole rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension DualNum {
    public AntiScalar anti_project_via_horizon_onto(Dipole other) {
        Circle right_dual = Circle(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125 */
            other.group2.xyz * float3(-1.0)
        );
        Circle anti_wedge = Circle(
            /* e423, e431, e412 */
            float3(this.e12345) * right_dual.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(this.e12345) * right_dual.group1, 
            /* e235, e315, e125 */
            float3(this.e12345) * right_dual.group2.xyz
        );
        return AntiScalar(
            /* e12345 */
            -(anti_wedge.e423 * other.e15) - (anti_wedge.e431 * other.e25) - (anti_wedge.e412 * other.e35) - (anti_wedge.e415 * other.e23) - (anti_wedge.e425 * other.e31) - (anti_wedge.e435 * other.e12) - (anti_wedge.e321 * other.e45) - (anti_wedge.e235 * other.e41) - (anti_wedge.e315 * other.e42) - (anti_wedge.e125 * other.e43)
        );
    }
}
// Fancy infix trick (second half)
public CircleRotor operator /(AntiProjectViaHorizonOntoInfixPartial<DualNum> lhs, DipoleInversion rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension DualNum {
    public CircleRotor anti_project_via_horizon_onto(DipoleInversion other) {
        AntiDipoleInversion right_dual = AntiDipoleInversion(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiDipoleInversion anti_wedge = AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(this.e12345) * right_dual.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(this.e12345) * right_dual.group1, 
            /* e235, e315, e125, e4 */
            float4(this.e12345) * right_dual.group2, 
            /* e1, e2, e3, e5 */
            float4(this.e12345) * right_dual.group3
        );
        return CircleRotor(
            /* e423, e431, e412 */
            (float3(anti_wedge.e4) * other.group1.xyz) + (other.group0.xyz.yzx * anti_wedge.group3.zxy) - (other.group0.xyz.zxy * anti_wedge.group3.yzx), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e4 * other.e15) + (anti_wedge.e5 * other.e41), (anti_wedge.e4 * other.e25) + (anti_wedge.e5 * other.e42), (anti_wedge.e4 * other.e35) + (anti_wedge.e5 * other.e43), -(anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12)) - (anti_wedge.group3.xyzx * other.group1.wwwx), 
            /* e235, e315, e125, e12345 */
            (anti_wedge.group3.wwwx * float4(other.group1.xyz, other.e4235)) + float4(float3(0.0), (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) + (anti_wedge.e5 * other.e1234) - (anti_wedge.e431 * other.e25) - (anti_wedge.e412 * other.e35) - (anti_wedge.e415 * other.e23) - (anti_wedge.e425 * other.e31) - (anti_wedge.e435 * other.e12) - (anti_wedge.e321 * other.e45) - (anti_wedge.e235 * other.e41) - (anti_wedge.e315 * other.e42) - (anti_wedge.e125 * other.e43)) + float4((anti_wedge.group3.yzx * other.group2.zxy), anti_wedge.e4 * other.e3215) - (other.group2.yzxx * float4(anti_wedge.group3.zxy, anti_wedge.e423))
        );
    }
}
// Fancy infix trick (second half)
public DualNum operator /(AntiProjectViaHorizonOntoInfixPartial<DualNum> lhs, DualNum rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension DualNum {
    public DualNum anti_project_via_horizon_onto(DualNum other) {
        return DualNum(
            /* e5, e12345 */
            float2(other.e12345 * this.e12345 * -1.0) * other.group0.xy
        );
    }
}
// Fancy infix trick (second half)
public AntiScalar operator /(AntiProjectViaHorizonOntoInfixPartial<DualNum> lhs, FlatPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension DualNum {
    public AntiScalar anti_project_via_horizon_onto(FlatPoint other) {
        return AntiScalar(
            /* e12345 */
            pow(other.e45, 2) * this.e12345 * -1.0
        );
    }
}
// Fancy infix trick (second half)
public Motor operator /(AntiProjectViaHorizonOntoInfixPartial<DualNum> lhs, Flector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension DualNum {
    public Motor anti_project_via_horizon_onto(Flector other) {
        AntiFlector right_dual = AntiFlector(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiFlector anti_wedge = AntiFlector(
            /* e235, e315, e125, e321 */
            float4(this.e12345) * right_dual.group0, 
            /* e1, e2, e3, e5 */
            float4(this.e12345) * right_dual.group1
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4((float3(other.e45) * anti_wedge.group1.xyz * float3(-1.0)), (anti_wedge.e1 * other.e4235) + (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) - (anti_wedge.e321 * other.e45)), 
            /* e235, e315, e125, e5 */
            float4(((anti_wedge.group1.yzx * other.group0.zxy) - (anti_wedge.group1.zxy * other.group0.yzx)), 0.0)
        );
    }
}
// Fancy infix trick (second half)
public AntiScalar operator /(AntiProjectViaHorizonOntoInfixPartial<DualNum> lhs, Line rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension DualNum {
    public AntiScalar anti_project_via_horizon_onto(Line other) {
        AntiLine right_dual = AntiLine(
            /* e23, e31, e12 */
            other.group0.xyz, 
            /* e15, e25, e35 */
            other.group1.xyz
        );
        AntiLine anti_wedge = AntiLine(
            /* e23, e31, e12 */
            float3(this.e12345) * right_dual.group0.xyz, 
            /* e15, e25, e35 */
            float3(this.e12345) * right_dual.group1.xyz
        );
        return AntiScalar(
            /* e12345 */
            -(anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435)
        );
    }
}
// Fancy infix trick (second half)
public Motor operator /(AntiProjectViaHorizonOntoInfixPartial<DualNum> lhs, Motor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension DualNum {
    public Motor anti_project_via_horizon_onto(Motor other) {
        AntiMotor right_dual = AntiMotor(
            /* e23, e31, e12, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiMotor anti_wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4(this.e12345) * right_dual.group0, 
            /* e15, e25, e35, e3215 */
            float4(this.e12345) * right_dual.group1
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4((anti_wedge.group0.www * other.group0.xyz), (anti_wedge.scalar * other.e12345) - (anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435)), 
            /* e235, e315, e125, e5 */
            float4(((float3(anti_wedge.scalar) * other.group1.xyz) + (float3(other.e5) * anti_wedge.group0.xyz)), anti_wedge.scalar * other.e5)
        );
    }
}
// Fancy infix trick (second half)
public MultiVector operator /(AntiProjectViaHorizonOntoInfixPartial<DualNum> lhs, MultiVector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension DualNum {
    public MultiVector anti_project_via_horizon_onto(MultiVector other) {
        MultiVector right_dual = MultiVector(
            /* scalar, e12345 */
            other.group0.xy.yx * float2(-1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215, 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43 */
            other.group7.xyz, 
            /* e23, e31, e12 */
            other.group6.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412 */
            other.group4.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group3.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        MultiVector anti_wedge = MultiVector(
            /* scalar, e12345 */
            float2((this.e5 * right_dual.e1234) + (this.e12345 * right_dual.scalar), this.e12345 * right_dual.e12345), 
            /* e1, e2, e3, e4 */
            float4(this.e12345) * right_dual.group1, 
            /* e5 */
            (this.e5 * right_dual.e12345) + (this.e12345 * right_dual.e5), 
            /* e15, e25, e35, e45 */
            float4(this.e12345) * right_dual.group3, 
            /* e41, e42, e43 */
            float3(this.e12345) * right_dual.group4.xyz, 
            /* e23, e31, e12 */
            float3(this.e12345) * right_dual.group5.xyz, 
            /* e415, e425, e435, e321 */
            float4(this.e12345) * right_dual.group6, 
            /* e423, e431, e412 */
            float3(this.e12345) * right_dual.group7.xyz, 
            /* e235, e315, e125 */
            float3(this.e12345) * right_dual.group8.xyz, 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e12345) * right_dual.group9, 
            /* e1234 */
            this.e12345 * right_dual.e1234
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(anti_wedge.scalar * other.scalar, (anti_wedge.scalar * other.e12345) + (anti_wedge.e12345 * other.scalar) + (anti_wedge.e1 * other.e4235) + (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) + (anti_wedge.e4 * other.e3215) + (anti_wedge.e5 * other.e1234) + (anti_wedge.e4235 * other.e1) + (anti_wedge.e4315 * other.e2) + (anti_wedge.e4125 * other.e3) + (anti_wedge.e3215 * other.e4) + (anti_wedge.e1234 * other.e5) - (anti_wedge.e15 * other.e423) - (anti_wedge.e25 * other.e431) - (anti_wedge.e35 * other.e412) - (anti_wedge.e45 * other.e321) - (anti_wedge.e41 * other.e235) - (anti_wedge.e42 * other.e315) - (anti_wedge.e43 * other.e125) - (anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435) - (anti_wedge.e415 * other.e23) - (anti_wedge.e425 * other.e31) - (anti_wedge.e435 * other.e12) - (anti_wedge.e321 * other.e45) - (anti_wedge.e423 * other.e15) - (anti_wedge.e431 * other.e25) - (anti_wedge.e412 * other.e35) - (anti_wedge.e235 * other.e41) - (anti_wedge.e315 * other.e42) - (anti_wedge.e125 * other.e43)), 
            /* e1, e2, e3, e4 */
            (float4(anti_wedge.scalar) * other.group1) + (float4(other.scalar) * anti_wedge.group1), 
            /* e5 */
            (anti_wedge.scalar * other.e5) + (anti_wedge.e5 * other.scalar), 
            /* e15, e25, e35, e45 */
            (float4(anti_wedge.scalar) * other.group3) + (float4(anti_wedge.e5) * other.group1) + (float4(other.scalar) * anti_wedge.group3) - (float4(other.e5) * anti_wedge.group1), 
            /* e41, e42, e43 */
            (float3(anti_wedge.scalar) * other.group4.xyz) + (float3(other.scalar) * anti_wedge.group4.xyz) + (float3(other.e4) * anti_wedge.group1.xyz) - (float3(anti_wedge.e4) * other.group1.xyz), 
            /* e23, e31, e12 */
            (float3(anti_wedge.scalar) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group5.xyz) + (anti_wedge.group1.zxy * other.group1.yzx) - (anti_wedge.group1.yzx * other.group1.zxy), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e4 * other.e15) + (anti_wedge.e5 * other.e41) + (anti_wedge.e15 * other.e4) + (anti_wedge.e41 * other.e5), (anti_wedge.e4 * other.e25) + (anti_wedge.e5 * other.e42) + (anti_wedge.e25 * other.e4) + (anti_wedge.e42 * other.e5), (anti_wedge.e4 * other.e35) + (anti_wedge.e5 * other.e43) + (anti_wedge.e35 * other.e4) + (anti_wedge.e43 * other.e5), -(anti_wedge.e1 * other.e23) - (anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12) - (anti_wedge.e12 * other.e3)) + (float4(anti_wedge.scalar) * other.group6) + (float4(other.scalar) * anti_wedge.group6) - (other.group1.xyzy * float4(anti_wedge.group3.www, anti_wedge.e31)) - float4((other.group3.www * anti_wedge.group1.xyz), anti_wedge.e23 * other.e1), 
            /* e423, e431, e412 */
            (float3(anti_wedge.scalar) * other.group7.xyz) + (float3(anti_wedge.e4) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group7.xyz) + (float3(other.e4) * anti_wedge.group5.xyz) + (anti_wedge.group4.xyz.yzx * other.group1.zxy) + (other.group4.xyz.yzx * anti_wedge.group1.zxy) - (anti_wedge.group4.xyz.zxy * other.group1.yzx) - (other.group4.xyz.zxy * anti_wedge.group1.yzx), 
            /* e235, e315, e125 */
            (float3(anti_wedge.scalar) * other.group8.xyz) + (float3(anti_wedge.e5) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group8.xyz) + (float3(other.e5) * anti_wedge.group5.xyz) + (anti_wedge.group1.yzx * other.group3.zxy) + (anti_wedge.group3.zxy * other.group1.yzx) - (anti_wedge.group1.zxy * other.group3.yzx) - (anti_wedge.group3.yzx * other.group1.zxy), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e2 * other.e435) + (anti_wedge.e5 * other.e423) + (anti_wedge.e45 * other.e23) + (anti_wedge.e425 * other.e3), (anti_wedge.e3 * other.e415) + (anti_wedge.e5 * other.e431) + (anti_wedge.e45 * other.e31) + (anti_wedge.e435 * other.e1), (anti_wedge.e1 * other.e425) + (anti_wedge.e5 * other.e412) + (anti_wedge.e45 * other.e12) + (anti_wedge.e415 * other.e2), -(anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12) - (anti_wedge.e321 * other.e5)) + (float4(anti_wedge.scalar) * other.group9) + (float4(other.scalar) * anti_wedge.group9) + float4((anti_wedge.group5.xyz * other.group3.www), anti_wedge.e2 * other.e315) + float4((anti_wedge.group8.xyz * other.group1.www), anti_wedge.e3 * other.e125) + float4((anti_wedge.group4.xyz.yzx * other.group3.zxy), anti_wedge.e1 * other.e235) + float4((other.group4.xyz.yzx * anti_wedge.group3.zxy), anti_wedge.e5 * other.e321) - (other.group1.yzxz * float4(anti_wedge.group6.zxy, anti_wedge.e125)) - (other.group3.yzxx * float4(anti_wedge.group4.xyz.zxy, anti_wedge.e23)) - float4((float3(other.e5) * anti_wedge.group7.xyz), anti_wedge.e31 * other.e25) - float4((other.group8.xyz * anti_wedge.group1.www), anti_wedge.e235 * other.e1) - float4((other.group4.xyz.zxy * anti_wedge.group3.yzx), anti_wedge.e12 * other.e35) - float4((anti_wedge.group1.zxy * other.group6.yzx), anti_wedge.e315 * other.e2), 
            /* e1234 */
            (anti_wedge.scalar * other.e1234) + (anti_wedge.e321 * other.e4) + (anti_wedge.e423 * other.e1) + (anti_wedge.e431 * other.e2) + (anti_wedge.e412 * other.e3) + (anti_wedge.e1234 * other.scalar) - (anti_wedge.e1 * other.e423) - (anti_wedge.e2 * other.e431) - (anti_wedge.e3 * other.e412) - (anti_wedge.e4 * other.e321) - (anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12) - (anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)
        );
    }
}
// Fancy infix trick (second half)
public AntiScalar operator /(AntiProjectViaHorizonOntoInfixPartial<DualNum> lhs, Plane rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension DualNum {
    public AntiScalar anti_project_via_horizon_onto(Plane other) {
        AntiPlane anti_wedge = AntiPlane(
            /* e1, e2, e3, e5 */
            float4(this.e12345) * float4(other.e4235 * -1.0, other.e4315 * -1.0, other.e4125 * -1.0, other.e3215)
        );
        return AntiScalar(
            /* e12345 */
            (anti_wedge.e1 * other.e4235) + (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125)
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<DualNum> lhs, RoundPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension DualNum {
    public VersorEven anti_project_via_horizon_onto(RoundPoint other) {
        Sphere right_dual = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        VersorOdd anti_wedge = VersorOdd(
            /* e41, e42, e43, scalar */
            float4(float3(0.0), this.e5 * right_dual.e1234), 
            /* e23, e31, e12, e45 */
            float4(0.0), 
            /* e15, e25, e35, e1234 */
            float4(float3(0.0), this.e12345 * right_dual.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e12345) * right_dual.group0
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(other.e2 * anti_wedge.e43 * -1.0, other.e3 * anti_wedge.e41 * -1.0, other.e1 * anti_wedge.e42 * -1.0, (other.e3 * anti_wedge.e4125) + (other.e4 * anti_wedge.e3215) + (other.e5 * anti_wedge.e1234)) + (other.group0.zxyx * float4(anti_wedge.group0.yzx, anti_wedge.e4235)) + (other.group0.wwwy * float4(anti_wedge.group1.xyz, anti_wedge.e4315)), 
            /* e415, e425, e435, e321 */
            float4((float3(other.e4) * anti_wedge.group2.xyz), 0.0) + float4((float3(other.e5) * anti_wedge.group0.xyz), 0.0) - float4((float3(anti_wedge.e45) * other.group0.xyz), 0.0), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.e5) * anti_wedge.group1.xyz) + (other.group0.yzx * anti_wedge.group2.zxy) - (other.group0.zxy * anti_wedge.group2.yzx)), other.e5 * anti_wedge.scalar), 
            /* e1, e2, e3, e4 */
            float4(anti_wedge.scalar) * other.group0
        );
    }
}
// Fancy infix trick (second half)
public DualNum operator /(AntiProjectViaHorizonOntoInfixPartial<DualNum> lhs, Scalar rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension DualNum {
    public DualNum anti_project_via_horizon_onto(Scalar other) {
        AntiScalar right_dual = AntiScalar(
            /* e12345 */
            other.scalar
        );
        return DualNum(
            /* e5, e12345 */
            float2(other.scalar) * float2(right_dual.e12345 * this.e5, right_dual.e12345 * this.e12345)
        );
    }
}
// Fancy infix trick (second half)
public AntiScalar operator /(AntiProjectViaHorizonOntoInfixPartial<DualNum> lhs, Sphere rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension DualNum {
    public AntiScalar anti_project_via_horizon_onto(Sphere other) {
        RoundPoint right_dual = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(other.group0.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215
        );
        RoundPoint anti_wedge = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(this.e12345) * right_dual.group0, 
            /* e5 */
            this.e12345 * right_dual.e5
        );
        return AntiScalar(
            /* e12345 */
            (anti_wedge.e1 * other.e4235) + (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) + (anti_wedge.e4 * other.e3215) + (anti_wedge.e5 * other.e1234)
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<DualNum> lhs, VersorEven rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension DualNum {
    public VersorEven anti_project_via_horizon_onto(VersorEven other) {
        VersorOdd right_dual = VersorOdd(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        VersorOdd anti_wedge = VersorOdd(
            /* e41, e42, e43, scalar */
            float4(this.group0.xy.yy, this.e12345, (this.e5 * right_dual.e1234) + (this.e12345 * right_dual.scalar)) * float4(right_dual.group0.xyz, 1.0), 
            /* e23, e31, e12, e45 */
            float4(this.e12345) * right_dual.group1, 
            /* e15, e25, e35, e1234 */
            float4(this.e12345) * right_dual.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e12345) * right_dual.group3
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            (float4(anti_wedge.scalar) * other.group0) + (other.group3.wwwx * float4(anti_wedge.group1.xyz, anti_wedge.e4235)) + float4(float3(0.0), (other.e2 * anti_wedge.e4315) + (other.e3 * anti_wedge.e4125) + (other.e4 * anti_wedge.e3215) - (other.e431 * anti_wedge.e25) - (other.e412 * anti_wedge.e35) - (other.e415 * anti_wedge.e23) - (other.e425 * anti_wedge.e31) - (other.e435 * anti_wedge.e12) - (other.e321 * anti_wedge.e45) - (other.e235 * anti_wedge.e41) - (other.e315 * anti_wedge.e42) - (other.e125 * anti_wedge.e43)) + float4((other.group3.zxy * anti_wedge.group0.yzx), other.e5 * anti_wedge.e1234) - float4((other.group3.yzx * anti_wedge.group0.zxy), other.e423 * anti_wedge.e15), 
            /* e415, e425, e435, e321 */
            float4((other.e5 * anti_wedge.e41) + (other.e4 * anti_wedge.e15), (other.e5 * anti_wedge.e42) + (other.e4 * anti_wedge.e25), (other.e5 * anti_wedge.e43) + (other.e4 * anti_wedge.e35), -(other.e2 * anti_wedge.e31) - (other.e3 * anti_wedge.e12)) + (float4(anti_wedge.scalar) * other.group1) - (other.group3.xyzx * anti_wedge.group1.wwwx), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.e5) * anti_wedge.group1.xyz) + (float3(anti_wedge.scalar) * other.group2.xyz) + (other.group3.yzx * anti_wedge.group2.zxy) - (other.group3.zxy * anti_wedge.group2.yzx)), other.e5 * anti_wedge.scalar), 
            /* e1, e2, e3, e4 */
            float4(anti_wedge.scalar) * other.group3
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<DualNum> lhs, VersorOdd rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension DualNum {
    public VersorEven anti_project_via_horizon_onto(VersorOdd other) {
        VersorEven right_dual = VersorEven(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        VersorEven anti_wedge = VersorEven(
            /* e423, e431, e412, e12345 */
            float4(this.e12345) * right_dual.group0, 
            /* e415, e425, e435, e321 */
            float4(this.e12345) * right_dual.group1, 
            /* e235, e315, e125, e5 */
            float4(this.group0.xy.yy, this.e12345, (this.e5 * right_dual.e12345) + (this.e12345 * right_dual.e5)) * float4(right_dual.group2.xyz, 1.0), 
            /* e1, e2, e3, e4 */
            float4(this.e12345) * right_dual.group3
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            (float4(other.scalar) * anti_wedge.group0) + (anti_wedge.group3.wwwx * float4(other.group1.xyz, other.e4235)) + float4(float3(0.0), (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) + (anti_wedge.e4 * other.e3215) - (anti_wedge.e431 * other.e25) - (anti_wedge.e412 * other.e35) - (anti_wedge.e415 * other.e23) - (anti_wedge.e425 * other.e31) - (anti_wedge.e435 * other.e12) - (anti_wedge.e321 * other.e45) - (anti_wedge.e235 * other.e41) - (anti_wedge.e315 * other.e42) - (anti_wedge.e125 * other.e43)) + float4((anti_wedge.group3.zxy * other.group0.yzx), anti_wedge.e5 * other.e1234) - float4((anti_wedge.group3.yzx * other.group0.zxy), anti_wedge.e423 * other.e15), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e5 * other.e41) + (anti_wedge.e4 * other.e15), (anti_wedge.e5 * other.e42) + (anti_wedge.e4 * other.e25), (anti_wedge.e5 * other.e43) + (anti_wedge.e4 * other.e35), -(anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12)) + (float4(other.scalar) * anti_wedge.group1) - (anti_wedge.group3.xyzx * other.group1.wwwx), 
            /* e235, e315, e125, e5 */
            float4(((float3(anti_wedge.e5) * other.group1.xyz) + (float3(other.scalar) * anti_wedge.group2.xyz) + (anti_wedge.group3.yzx * other.group2.zxy) - (anti_wedge.group3.zxy * other.group2.yzx)), anti_wedge.e5 * other.scalar), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * anti_wedge.group3
        );
    }
}
// Fancy infix trick (first half)
public AntiProjectViaHorizonOntoInfixPartial<FlatPoint> operator /(FlatPoint lhs, AntiProjectViaHorizonOntoInfix rhs) {
    return AntiProjectViaHorizonOntoInfixPartial<FlatPoint>(lhs);
}
// Fancy infix trick (second half)
public VersorOdd operator /(AntiProjectViaHorizonOntoInfixPartial<FlatPoint> lhs, AntiCircleRotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension FlatPoint {
    public VersorOdd anti_project_via_horizon_onto(AntiCircleRotor other) {
        CircleRotor right_dual = CircleRotor(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiCircleRotor anti_wedge = AntiCircleRotor(
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12, e45 */
            float4(float3(0.0), right_dual.e12345 * this.e45), 
            /* e15, e25, e35, scalar */
            float4((right_dual.group2.www * this.group0.xyz), -(right_dual.e423 * this.e15) - (right_dual.e431 * this.e25) - (right_dual.e412 * this.e35) - (right_dual.e321 * this.e45))
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(((float3(anti_wedge.scalar) * other.group0.xyz) + (float3(other.scalar) * anti_wedge.group0.xyz)), anti_wedge.scalar * other.scalar), 
            /* e23, e31, e12, e45 */
            (float4(anti_wedge.scalar) * other.group1) + (float4(other.scalar) * anti_wedge.group1), 
            /* e15, e25, e35, e1234 */
            float4((anti_wedge.e15 * other.scalar) + (anti_wedge.scalar * other.e15), (anti_wedge.e25 * other.scalar) + (anti_wedge.scalar * other.e25), (anti_wedge.e35 * other.scalar) + (anti_wedge.scalar * other.e35), -(anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12) - (anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e42 * other.e35) + (anti_wedge.e23 * other.e45) + (anti_wedge.e45 * other.e23) + (anti_wedge.e35 * other.e42), (anti_wedge.e43 * other.e15) + (anti_wedge.e31 * other.e45) + (anti_wedge.e45 * other.e31) + (anti_wedge.e15 * other.e43), (anti_wedge.e41 * other.e25) + (anti_wedge.e12 * other.e45) + (anti_wedge.e45 * other.e12) + (anti_wedge.e25 * other.e41), -(anti_wedge.e12 * other.e35) - (anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12)) - (other.group2.yzxx * float4(anti_wedge.group0.xyz.zxy, anti_wedge.e23)) - float4((other.group0.xyz.zxy * anti_wedge.group2.yzx), anti_wedge.e31 * other.e25)
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<FlatPoint> lhs, AntiDipoleInversion rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension FlatPoint {
    public DipoleInversion anti_project_via_horizon_onto(AntiDipoleInversion other) {
        DipoleInversion right_dual = DipoleInversion(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        RoundPoint anti_wedge = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(right_dual.e1234) * this.group0 * float4(-1.0), 
            /* e5 */
            (right_dual.e4235 * this.e15) + (right_dual.e4315 * this.e25) + (right_dual.e4125 * this.e35) + (right_dual.e3215 * this.e45)
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            (float3(other.e4) * anti_wedge.group0.xyz) - (float3(anti_wedge.e4) * other.group3.xyz), 
            /* e23, e31, e12, e45 */
            float4((other.group3.yzx * anti_wedge.group0.zxy), other.e4 * anti_wedge.e5) - (other.group3.zxyw * anti_wedge.group0.yzxw), 
            /* e15, e25, e35, e1234 */
            float4(other.e1 * anti_wedge.e5, other.e2 * anti_wedge.e5, other.e3 * anti_wedge.e5, -(other.e431 * anti_wedge.e2) - (other.e412 * anti_wedge.e3) - (other.e321 * anti_wedge.e4)) - (anti_wedge.group0.xyzx * float4(other.group3.www, other.e423)), 
            /* e4235, e4315, e4125, e3215 */
            float4(-(other.e425 * anti_wedge.e3) - (other.e235 * anti_wedge.e4), -(other.e435 * anti_wedge.e1) - (other.e315 * anti_wedge.e4), -(other.e415 * anti_wedge.e2) - (other.e125 * anti_wedge.e4), (other.e315 * anti_wedge.e2) + (other.e125 * anti_wedge.e3)) + (float4(anti_wedge.e5) * float4(other.group0.xyz, other.e321)) + (anti_wedge.group0.yzxx * float4(other.group1.zxy, other.e235))
        );
    }
}
// Fancy infix trick (second half)
public FlatPoint operator /(AntiProjectViaHorizonOntoInfixPartial<FlatPoint> lhs, AntiDualNum rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension FlatPoint {
    public FlatPoint anti_project_via_horizon_onto(AntiDualNum other) {
        DualNum right_dual = DualNum(
            /* e5, e12345 */
            other.group0.xy
        );
        return FlatPoint(
            /* e15, e25, e35, e45 */
            float4(other.scalar) * float4(right_dual.e12345 * this.e15, right_dual.e12345 * this.e25, right_dual.e12345 * this.e35, right_dual.e12345 * this.e45)
        );
    }
}
// Fancy infix trick (second half)
public Flector operator /(AntiProjectViaHorizonOntoInfixPartial<FlatPoint> lhs, AntiFlector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension FlatPoint {
    public Flector anti_project_via_horizon_onto(AntiFlector other) {
        Flector right_dual = Flector(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        DualNum anti_wedge = DualNum(
            /* e5, e12345 */
            float2((this.e15 * right_dual.e4235) + (this.e25 * right_dual.e4315) + (this.e35 * right_dual.e4125) + (this.e45 * right_dual.e3215), 0.0)
        );
        return Flector(
            /* e15, e25, e35, e45 */
            float4(anti_wedge.group0.xy.xx, anti_wedge.e5, 0.0) * float4(float3(1.0), 0.0) * float4(other.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(float3(0.0), other.e321 * anti_wedge.e5)
        );
    }
}
// Fancy infix trick (second half)
public Flector operator /(AntiProjectViaHorizonOntoInfixPartial<FlatPoint> lhs, AntiMotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension FlatPoint {
    public Flector anti_project_via_horizon_onto(AntiMotor other) {
        FlatPoint anti_wedge = FlatPoint(
            /* e15, e25, e35, e45 */
            float4(other.scalar) * this.group0
        );
        return Flector(
            /* e15, e25, e35, e45 */
            float4(other.scalar) * anti_wedge.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4((float3(anti_wedge.e45) * other.group0.xyz), -(other.e23 * anti_wedge.e15) - (other.e31 * anti_wedge.e25) - (other.e12 * anti_wedge.e35))
        );
    }
}
// Fancy infix trick (second half)
public FlatPoint operator /(AntiProjectViaHorizonOntoInfixPartial<FlatPoint> lhs, AntiPlane rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension FlatPoint {
    public FlatPoint anti_project_via_horizon_onto(AntiPlane other) {
        Plane right_dual = Plane(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        DualNum anti_wedge = DualNum(
            /* e5, e12345 */
            float2((this.e15 * right_dual.e4235) + (this.e25 * right_dual.e4315) + (this.e35 * right_dual.e4125) + (this.e45 * right_dual.e3215), 0.0)
        );
        return FlatPoint(
            /* e15, e25, e35, e45 */
            float4(anti_wedge.group0.xy.xx, anti_wedge.e5, 0.0) * float4(float3(1.0), 0.0) * float4(other.group0.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
    }
}
// Fancy infix trick (second half)
public Dipole operator /(AntiProjectViaHorizonOntoInfixPartial<FlatPoint> lhs, Dipole rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension FlatPoint {
    public Dipole anti_project_via_horizon_onto(Dipole other) {
        Circle right_dual = Circle(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125 */
            other.group2.xyz * float3(-1.0)
        );
        Scalar anti_wedge = Scalar(
            /* scalar */
            -(right_dual.e423 * this.e15) - (right_dual.e431 * this.e25) - (right_dual.e412 * this.e35) - (right_dual.e321 * this.e45)
        );
        return Dipole(
            /* e41, e42, e43 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(anti_wedge.scalar) * other.group1, 
            /* e15, e25, e35 */
            float3(anti_wedge.scalar) * other.group2.xyz
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<FlatPoint> lhs, DipoleInversion rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension FlatPoint {
    public DipoleInversion anti_project_via_horizon_onto(DipoleInversion other) {
        AntiDipoleInversion right_dual = AntiDipoleInversion(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        Scalar anti_wedge = Scalar(
            /* scalar */
            -(right_dual.e423 * this.e15) - (right_dual.e431 * this.e25) - (right_dual.e412 * this.e35) - (right_dual.e321 * this.e45)
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(anti_wedge.scalar) * other.group1, 
            /* e15, e25, e35, e1234 */
            float4(anti_wedge.scalar) * other.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(anti_wedge.scalar) * other.group3
        );
    }
}
// Fancy infix trick (second half)
public FlatPoint operator /(AntiProjectViaHorizonOntoInfixPartial<FlatPoint> lhs, FlatPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension FlatPoint {
    public FlatPoint anti_project_via_horizon_onto(FlatPoint other) {
        return FlatPoint(
            /* e15, e25, e35, e45 */
            float4(other.e45 * this.e45 * -1.0) * other.group0
        );
    }
}
// Fancy infix trick (second half)
public Flector operator /(AntiProjectViaHorizonOntoInfixPartial<FlatPoint> lhs, Flector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension FlatPoint {
    public Flector anti_project_via_horizon_onto(Flector other) {
        Scalar anti_wedge = Scalar(
            /* scalar */
            (other.group0 * float4(-1.0, -1.0, -1.0, 1.0))[3] * this.e45 * -1.0
        );
        return Flector(
            /* e15, e25, e35, e45 */
            float4(anti_wedge.scalar) * other.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4(anti_wedge.scalar) * other.group1
        );
    }
}
// Fancy infix trick (second half)
public MultiVector operator /(AntiProjectViaHorizonOntoInfixPartial<FlatPoint> lhs, MultiVector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension FlatPoint {
    public MultiVector anti_project_via_horizon_onto(MultiVector other) {
        MultiVector right_dual = MultiVector(
            /* scalar, e12345 */
            other.group0.xy.yx * float2(-1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215, 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43 */
            other.group7.xyz, 
            /* e23, e31, e12 */
            other.group6.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412 */
            other.group4.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group3.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        MultiVector anti_wedge = MultiVector(
            /* scalar, e12345 */
            float2(-(this.e15 * right_dual.e423) - (this.e25 * right_dual.e431) - (this.e35 * right_dual.e412) - (this.e45 * right_dual.e321), 0.0), 
            /* e1, e2, e3, e4 */
            float4(right_dual.e1234) * this.group0 * float4(-1.0), 
            /* e5 */
            (this.e15 * right_dual.e4235) + (this.e25 * right_dual.e4315) + (this.e35 * right_dual.e4125) + (this.e45 * right_dual.e3215), 
            /* e15, e25, e35, e45 */
            float4(right_dual.e12345) * this.group0, 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(0.0), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            float3(0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(0.0), 
            /* e1234 */
            0.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(anti_wedge.scalar * other.scalar, (anti_wedge.scalar * other.e12345) + (anti_wedge.e12345 * other.scalar) + (anti_wedge.e1 * other.e4235) + (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) + (anti_wedge.e4 * other.e3215) + (anti_wedge.e5 * other.e1234) + (anti_wedge.e4235 * other.e1) + (anti_wedge.e4315 * other.e2) + (anti_wedge.e4125 * other.e3) + (anti_wedge.e3215 * other.e4) + (anti_wedge.e1234 * other.e5) - (anti_wedge.e15 * other.e423) - (anti_wedge.e25 * other.e431) - (anti_wedge.e35 * other.e412) - (anti_wedge.e45 * other.e321) - (anti_wedge.e41 * other.e235) - (anti_wedge.e42 * other.e315) - (anti_wedge.e43 * other.e125) - (anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435) - (anti_wedge.e415 * other.e23) - (anti_wedge.e425 * other.e31) - (anti_wedge.e435 * other.e12) - (anti_wedge.e321 * other.e45) - (anti_wedge.e423 * other.e15) - (anti_wedge.e431 * other.e25) - (anti_wedge.e412 * other.e35) - (anti_wedge.e235 * other.e41) - (anti_wedge.e315 * other.e42) - (anti_wedge.e125 * other.e43)), 
            /* e1, e2, e3, e4 */
            (float4(anti_wedge.scalar) * other.group1) + (float4(other.scalar) * anti_wedge.group1), 
            /* e5 */
            (anti_wedge.scalar * other.e5) + (anti_wedge.e5 * other.scalar), 
            /* e15, e25, e35, e45 */
            (float4(anti_wedge.scalar) * other.group3) + (float4(anti_wedge.e5) * other.group1) + (float4(other.scalar) * anti_wedge.group3) - (float4(other.e5) * anti_wedge.group1), 
            /* e41, e42, e43 */
            (float3(anti_wedge.scalar) * other.group4.xyz) + (float3(other.scalar) * anti_wedge.group4.xyz) + (float3(other.e4) * anti_wedge.group1.xyz) - (float3(anti_wedge.e4) * other.group1.xyz), 
            /* e23, e31, e12 */
            (float3(anti_wedge.scalar) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group5.xyz) + (anti_wedge.group1.zxy * other.group1.yzx) - (anti_wedge.group1.yzx * other.group1.zxy), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e4 * other.e15) + (anti_wedge.e5 * other.e41) + (anti_wedge.e15 * other.e4) + (anti_wedge.e41 * other.e5), (anti_wedge.e4 * other.e25) + (anti_wedge.e5 * other.e42) + (anti_wedge.e25 * other.e4) + (anti_wedge.e42 * other.e5), (anti_wedge.e4 * other.e35) + (anti_wedge.e5 * other.e43) + (anti_wedge.e35 * other.e4) + (anti_wedge.e43 * other.e5), -(anti_wedge.e1 * other.e23) - (anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12) - (anti_wedge.e12 * other.e3)) + (float4(anti_wedge.scalar) * other.group6) + (float4(other.scalar) * anti_wedge.group6) - (other.group1.xyzy * float4(anti_wedge.group3.www, anti_wedge.e31)) - float4((other.group3.www * anti_wedge.group1.xyz), anti_wedge.e23 * other.e1), 
            /* e423, e431, e412 */
            (float3(anti_wedge.scalar) * other.group7.xyz) + (float3(anti_wedge.e4) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group7.xyz) + (float3(other.e4) * anti_wedge.group5.xyz) + (anti_wedge.group4.xyz.yzx * other.group1.zxy) + (other.group4.xyz.yzx * anti_wedge.group1.zxy) - (anti_wedge.group4.xyz.zxy * other.group1.yzx) - (other.group4.xyz.zxy * anti_wedge.group1.yzx), 
            /* e235, e315, e125 */
            (float3(anti_wedge.scalar) * other.group8.xyz) + (float3(anti_wedge.e5) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group8.xyz) + (float3(other.e5) * anti_wedge.group5.xyz) + (anti_wedge.group1.yzx * other.group3.zxy) + (anti_wedge.group3.zxy * other.group1.yzx) - (anti_wedge.group1.zxy * other.group3.yzx) - (anti_wedge.group3.yzx * other.group1.zxy), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e2 * other.e435) + (anti_wedge.e5 * other.e423) + (anti_wedge.e45 * other.e23) + (anti_wedge.e425 * other.e3), (anti_wedge.e3 * other.e415) + (anti_wedge.e5 * other.e431) + (anti_wedge.e45 * other.e31) + (anti_wedge.e435 * other.e1), (anti_wedge.e1 * other.e425) + (anti_wedge.e5 * other.e412) + (anti_wedge.e45 * other.e12) + (anti_wedge.e415 * other.e2), -(anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12) - (anti_wedge.e321 * other.e5)) + (float4(anti_wedge.scalar) * other.group9) + (float4(other.scalar) * anti_wedge.group9) + float4((anti_wedge.group5.xyz * other.group3.www), anti_wedge.e2 * other.e315) + float4((anti_wedge.group8.xyz * other.group1.www), anti_wedge.e3 * other.e125) + float4((anti_wedge.group4.xyz.yzx * other.group3.zxy), anti_wedge.e1 * other.e235) + float4((other.group4.xyz.yzx * anti_wedge.group3.zxy), anti_wedge.e5 * other.e321) - (other.group1.yzxz * float4(anti_wedge.group6.zxy, anti_wedge.e125)) - (other.group3.yzxx * float4(anti_wedge.group4.xyz.zxy, anti_wedge.e23)) - float4((float3(other.e5) * anti_wedge.group7.xyz), anti_wedge.e31 * other.e25) - float4((other.group8.xyz * anti_wedge.group1.www), anti_wedge.e235 * other.e1) - float4((other.group4.xyz.zxy * anti_wedge.group3.yzx), anti_wedge.e12 * other.e35) - float4((anti_wedge.group1.zxy * other.group6.yzx), anti_wedge.e315 * other.e2), 
            /* e1234 */
            (anti_wedge.scalar * other.e1234) + (anti_wedge.e321 * other.e4) + (anti_wedge.e423 * other.e1) + (anti_wedge.e431 * other.e2) + (anti_wedge.e412 * other.e3) + (anti_wedge.e1234 * other.scalar) - (anti_wedge.e1 * other.e423) - (anti_wedge.e2 * other.e431) - (anti_wedge.e3 * other.e412) - (anti_wedge.e4 * other.e321) - (anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12) - (anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)
        );
    }
}
// Fancy infix trick (second half)
public Dipole operator /(AntiProjectViaHorizonOntoInfixPartial<FlatPoint> lhs, RoundPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension FlatPoint {
    public Dipole anti_project_via_horizon_onto(RoundPoint other) {
        Sphere right_dual = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        RoundPoint anti_wedge = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(right_dual.e1234) * this.group0 * float4(-1.0), 
            /* e5 */
            (this.e15 * right_dual.e4235) + (this.e25 * right_dual.e4315) + (this.e35 * right_dual.e4125) + (this.e45 * right_dual.e3215)
        );
        return Dipole(
            /* e41, e42, e43 */
            (float3(other.e4) * anti_wedge.group0.xyz) - (float3(anti_wedge.e4) * other.group0.xyz), 
            /* e23, e31, e12, e45 */
            float4((anti_wedge.group0.zxy * other.group0.yzx), anti_wedge.e5 * other.e4) - (anti_wedge.group0.yzxw * float4(other.group0.zxy, other.e5)), 
            /* e15, e25, e35 */
            (float3(anti_wedge.e5) * other.group0.xyz) - (float3(other.e5) * anti_wedge.group0.xyz)
        );
    }
}
// Fancy infix trick (second half)
public FlatPoint operator /(AntiProjectViaHorizonOntoInfixPartial<FlatPoint> lhs, Scalar rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension FlatPoint {
    public FlatPoint anti_project_via_horizon_onto(Scalar other) {
        AntiScalar right_dual = AntiScalar(
            /* e12345 */
            other.scalar
        );
        return FlatPoint(
            /* e15, e25, e35, e45 */
            float4(other.scalar) * float4(right_dual.e12345 * this.e15, right_dual.e12345 * this.e25, right_dual.e12345 * this.e35, right_dual.e12345 * this.e45)
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<FlatPoint> lhs, VersorEven rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension FlatPoint {
    public DipoleInversion anti_project_via_horizon_onto(VersorEven other) {
        VersorOdd right_dual = VersorOdd(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        RoundPoint anti_wedge = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(right_dual.e1234) * this.group0 * float4(-1.0), 
            /* e5 */
            (this.e15 * right_dual.e4235) + (this.e25 * right_dual.e4315) + (this.e35 * right_dual.e4125) + (this.e45 * right_dual.e3215)
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            (float3(other.e4) * anti_wedge.group0.xyz) - (float3(anti_wedge.e4) * other.group3.xyz), 
            /* e23, e31, e12, e45 */
            float4((anti_wedge.group0.zxy * other.group3.yzx), anti_wedge.e5 * other.e4) - (anti_wedge.group0.yzxw * float4(other.group3.zxy, other.e5)), 
            /* e15, e25, e35, e1234 */
            float4(anti_wedge.e5 * other.e1, anti_wedge.e5 * other.e2, anti_wedge.e5 * other.e3, -(anti_wedge.e2 * other.e431) - (anti_wedge.e3 * other.e412) - (anti_wedge.e4 * other.e321)) - (anti_wedge.group0.xyzx * float4(other.group2.www, other.e423)), 
            /* e4235, e4315, e4125, e3215 */
            float4(-(anti_wedge.e3 * other.e425) - (anti_wedge.e4 * other.e235), -(anti_wedge.e1 * other.e435) - (anti_wedge.e4 * other.e315), -(anti_wedge.e2 * other.e415) - (anti_wedge.e4 * other.e125), (anti_wedge.e3 * other.e125) + (anti_wedge.e5 * other.e321)) + (anti_wedge.group0.yzxx * float4(other.group1.zxy, other.e235)) + float4((float3(anti_wedge.e5) * other.group0.xyz), anti_wedge.e2 * other.e315)
        );
    }
}
// Fancy infix trick (second half)
public VersorOdd operator /(AntiProjectViaHorizonOntoInfixPartial<FlatPoint> lhs, VersorOdd rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension FlatPoint {
    public VersorOdd anti_project_via_horizon_onto(VersorOdd other) {
        VersorEven right_dual = VersorEven(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiCircleRotor anti_wedge = AntiCircleRotor(
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12, e45 */
            float4(float3(0.0), this.e45 * right_dual.e12345), 
            /* e15, e25, e35, scalar */
            float4((float3(right_dual.e12345) * this.group0.xyz), -(this.e15 * right_dual.e423) - (this.e25 * right_dual.e431) - (this.e35 * right_dual.e412) - (this.e45 * right_dual.e321))
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(((float3(anti_wedge.scalar) * other.group0.xyz) + (float3(other.scalar) * anti_wedge.group0.xyz)), anti_wedge.scalar * other.scalar), 
            /* e23, e31, e12, e45 */
            (float4(anti_wedge.scalar) * other.group1) + (float4(other.scalar) * anti_wedge.group1), 
            /* e15, e25, e35, e1234 */
            float4(anti_wedge.scalar * other.e15, anti_wedge.scalar * other.e25, anti_wedge.scalar * other.e35, -(anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12) - (anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)) + (anti_wedge.group2 * float4(other.group0.www, other.e1234)), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e23 * other.e45) + (anti_wedge.e45 * other.e23) + (anti_wedge.e35 * other.e42) + (anti_wedge.scalar * other.e4235), (anti_wedge.e31 * other.e45) + (anti_wedge.e45 * other.e31) + (anti_wedge.e15 * other.e43) + (anti_wedge.scalar * other.e4315), (anti_wedge.e12 * other.e45) + (anti_wedge.e45 * other.e12) + (anti_wedge.e25 * other.e41) + (anti_wedge.scalar * other.e4125), -(anti_wedge.e12 * other.e35) - (anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12)) + float4((anti_wedge.group0.xyz.yzx * other.group2.zxy), anti_wedge.scalar * other.e3215) - (other.group2.yzxx * float4(anti_wedge.group0.xyz.zxy, anti_wedge.e23)) - float4((anti_wedge.group2.yzx * other.group0.zxy), anti_wedge.e31 * other.e25)
        );
    }
}
// Fancy infix trick (first half)
public AntiProjectViaHorizonOntoInfixPartial<Flector> operator /(Flector lhs, AntiProjectViaHorizonOntoInfix rhs) {
    return AntiProjectViaHorizonOntoInfixPartial<Flector>(lhs);
}
// Fancy infix trick (second half)
public VersorOdd operator /(AntiProjectViaHorizonOntoInfixPartial<Flector> lhs, AntiCircleRotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Flector {
    public VersorOdd anti_project_via_horizon_onto(AntiCircleRotor other) {
        CircleRotor right_dual = CircleRotor(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        VersorOdd anti_wedge = VersorOdd(
            /* e41, e42, e43, scalar */
            float4(right_dual.e412 * this.e4315, right_dual.e423 * this.e4125, right_dual.e431 * this.e4235, -(right_dual.e431 * this.e25) - (right_dual.e412 * this.e35) - (right_dual.e321 * this.e45)) - float4((right_dual.group0.xyz.yzx * this.group1.zxy), right_dual.e423 * this.e15), 
            /* e23, e31, e12, e45 */
            float4(float3(0.0), -(right_dual.e425 * this.e4315) - (right_dual.e435 * this.e4125)) + float4((right_dual.group0.xyz * this.group1.www), right_dual.e12345 * this.e45) - (right_dual.group1.wwwx * this.group1.xyzx), 
            /* e15, e25, e35, e1234 */
            float4((float3(right_dual.e12345) * this.group0.xyz), 0.0) + float4((float3(this.e3215) * right_dual.group1.xyz), 0.0) + float4((right_dual.group2.yzx * this.group1.zxy), 0.0) - float4((right_dual.group2.zxy * this.group1.yzx), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * this.group1
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(((float3(other.scalar) * anti_wedge.group0.xyz) + (float3(anti_wedge.scalar) * other.group0.xyz)), other.scalar * anti_wedge.scalar), 
            /* e23, e31, e12, e45 */
            (float4(other.scalar) * anti_wedge.group1) + (float4(anti_wedge.scalar) * other.group1), 
            /* e15, e25, e35, e1234 */
            float4(other.scalar * anti_wedge.e15, other.scalar * anti_wedge.e25, other.scalar * anti_wedge.e35, -(other.e41 * anti_wedge.e23) - (other.e42 * anti_wedge.e31) - (other.e43 * anti_wedge.e12) - (other.e23 * anti_wedge.e41) - (other.e31 * anti_wedge.e42) - (other.e12 * anti_wedge.e43)) + (other.group2 * float4(anti_wedge.group0.www, anti_wedge.e1234)), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e23 * anti_wedge.e45) + (other.e45 * anti_wedge.e23) + (other.e35 * anti_wedge.e42) + (other.scalar * anti_wedge.e4235), (other.e31 * anti_wedge.e45) + (other.e45 * anti_wedge.e31) + (other.e15 * anti_wedge.e43) + (other.scalar * anti_wedge.e4315), (other.e12 * anti_wedge.e45) + (other.e45 * anti_wedge.e12) + (other.e25 * anti_wedge.e41) + (other.scalar * anti_wedge.e4125), -(other.e12 * anti_wedge.e35) - (other.e15 * anti_wedge.e23) - (other.e25 * anti_wedge.e31) - (other.e35 * anti_wedge.e12)) + float4((other.group0.xyz.yzx * anti_wedge.group2.zxy), other.scalar * anti_wedge.e3215) - (anti_wedge.group2.yzxx * float4(other.group0.xyz.zxy, other.e23)) - float4((other.group2.yzx * anti_wedge.group0.zxy), other.e31 * anti_wedge.e25)
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<Flector> lhs, AntiDipoleInversion rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Flector {
    public DipoleInversion anti_project_via_horizon_onto(AntiDipoleInversion other) {
        DipoleInversion right_dual = DipoleInversion(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiDipoleInversion anti_wedge = AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(right_dual.e1234) * this.group1.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            float4(((right_dual.group3.yzx * this.group1.zxy) - (right_dual.group3.zxy * this.group1.yzx)), right_dual.e1234 * this.e3215 * -1.0), 
            /* e235, e315, e125, e4 */
            (this.group1.xyzx * float4(right_dual.group3.www, right_dual.e41)) + float4(float3(0.0), (right_dual.e42 * this.e4315) + (right_dual.e43 * this.e4125)) - float4((this.group1.www * right_dual.group3.xyz), right_dual.e1234 * this.e45), 
            /* e1, e2, e3, e5 */
            float4(float3(0.0), (right_dual.e4315 * this.e25) + (right_dual.e4125 * this.e35) + (right_dual.e3215 * this.e45) - (right_dual.e35 * this.e4125)) + float4((right_dual.group1.zxy * this.group1.yzx), right_dual.e4235 * this.e15) - (float4(this.e3215) * float4(right_dual.group0.xyz, right_dual.e45)) - (right_dual.group2.wwwy * float4(this.group0.xyz, this.e4315)) - (this.group1.zxyx * float4(right_dual.group1.yzx, right_dual.e15))
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            (float3(other.e4) * anti_wedge.group3.xyz) - (float3(anti_wedge.e4) * other.group3.xyz), 
            /* e23, e31, e12, e45 */
            (anti_wedge.group3.zxyw * float4(other.group3.yzx, other.e4)) - (other.group3.zxyw * float4(anti_wedge.group3.yzx, anti_wedge.e4)), 
            /* e15, e25, e35, e1234 */
            (other.group3.xyzx * float4(anti_wedge.group3.www, anti_wedge.e423)) + float4(float3(0.0), (anti_wedge.e431 * other.e2) + (anti_wedge.e412 * other.e3) + (anti_wedge.e321 * other.e4) - (anti_wedge.e4 * other.e321) - (anti_wedge.e2 * other.e431) - (anti_wedge.e3 * other.e412)) - float4((other.group3.www * anti_wedge.group3.xyz), anti_wedge.e1 * other.e423), 
            /* e4235, e4315, e4125, e3215 */
            (anti_wedge.group3.yzxw * other.group1.zxyw) + (other.group2.wwwz * float4(anti_wedge.group2.xyz, anti_wedge.e3)) + float4((other.group0.xyz * anti_wedge.group3.www), anti_wedge.e1 * other.e235) + float4((anti_wedge.group1.yzx * other.group3.zxy), anti_wedge.e2 * other.e315) - (float4(other.e5) * float4(anti_wedge.group0.xyz, anti_wedge.e321)) - (anti_wedge.group2.wwwy * float4(other.group2.xyz, other.e2)) - (other.group3.yzxx * float4(anti_wedge.group1.zxy, anti_wedge.e235)) - float4((anti_wedge.group3.zxy * other.group1.yzx), anti_wedge.e125 * other.e3)
        );
    }
}
// Fancy infix trick (second half)
public Flector operator /(AntiProjectViaHorizonOntoInfixPartial<Flector> lhs, AntiDualNum rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Flector {
    public Flector anti_project_via_horizon_onto(AntiDualNum other) {
        DualNum right_dual = DualNum(
            /* e5, e12345 */
            other.group0.xy
        );
        Flector anti_wedge = Flector(
            /* e15, e25, e35, e45 */
            float4(right_dual.e12345) * this.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * this.group1
        );
        return Flector(
            /* e15, e25, e35, e45 */
            float4(other.scalar) * anti_wedge.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar) * anti_wedge.group1
        );
    }
}
// Fancy infix trick (second half)
public AntiDualNum operator /(AntiProjectViaHorizonOntoInfixPartial<Flector> lhs, AntiFlatPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Flector {
    public AntiDualNum anti_project_via_horizon_onto(AntiFlatPoint other) {
        FlatPoint right_dual = FlatPoint(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDualNum(
            /* e3215, scalar */
            float2(-(other.e321 * right_dual.e15 * this.e4235) - (other.e321 * right_dual.e25 * this.e4315) - (other.e321 * right_dual.e35 * this.e4125) - (other.e321 * right_dual.e45 * this.e3215), 1.0) * float2(1.0, 0.0)
        );
    }
}
// Fancy infix trick (second half)
public Flector operator /(AntiProjectViaHorizonOntoInfixPartial<Flector> lhs, AntiFlector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Flector {
    public Flector anti_project_via_horizon_onto(AntiFlector other) {
        Flector right_dual = Flector(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        Motor anti_wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4(((right_dual.group1.yzx * this.group1.zxy) - (right_dual.group1.zxy * this.group1.yzx)), 0.0), 
            /* e235, e315, e125, e5 */
            (right_dual.group1.wwwx * float4(this.group1.xyz, this.e15)) + float4(float3(0.0), (right_dual.e4315 * this.e25) + (right_dual.e4125 * this.e35) + (right_dual.e3215 * this.e45) - (right_dual.e25 * this.e4315) - (right_dual.e35 * this.e4125) - (right_dual.e45 * this.e3215)) - (this.group1.wwwx * float4(right_dual.group1.xyz, right_dual.e15))
        );
        return Flector(
            /* e15, e25, e35, e45 */
            float4(float3(1.0), 0.0) * float4(anti_wedge.group1.www, 0.0) * float4(other.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(float3(0.0), -(other.e2 * anti_wedge.e315) - (other.e3 * anti_wedge.e125)) + float4((other.group1.zxy * anti_wedge.group0.yzx), other.e321 * anti_wedge.e5) - (other.group1.yzxx * float4(anti_wedge.group0.zxy, anti_wedge.e235))
        );
    }
}
// Fancy infix trick (second half)
public Plane operator /(AntiProjectViaHorizonOntoInfixPartial<Flector> lhs, AntiLine rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Flector {
    public Plane anti_project_via_horizon_onto(AntiLine other) {
        Line right_dual = Line(
            /* e415, e425, e435 */
            other.group0.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group1.xyz * float3(-1.0)
        );
        FlatPoint anti_wedge = FlatPoint(
            /* e15, e25, e35, e45 */
            float4((this.e4125 * right_dual.e315) + (this.e3215 * right_dual.e415), (this.e4235 * right_dual.e125) + (this.e3215 * right_dual.e425), (this.e4315 * right_dual.e235) + (this.e3215 * right_dual.e435), -(this.e4315 * right_dual.e425) - (this.e4125 * right_dual.e435)) - (this.group1.yzxx * float4(right_dual.group1.xyz.zxy, right_dual.e415))
        );
        return Plane(
            /* e4235, e4315, e4125, e3215 */
            float4((float3(anti_wedge.e45) * other.group0.xyz), -(other.e23 * anti_wedge.e15) - (other.e31 * anti_wedge.e25) - (other.e12 * anti_wedge.e35))
        );
    }
}
// Fancy infix trick (second half)
public Flector operator /(AntiProjectViaHorizonOntoInfixPartial<Flector> lhs, AntiMotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Flector {
    public Flector anti_project_via_horizon_onto(AntiMotor other) {
        Motor right_dual = Motor(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        Flector anti_wedge = Flector(
            /* e15, e25, e35, e45 */
            float4((this.e4125 * right_dual.e315) + (this.e3215 * right_dual.e415), (this.e4235 * right_dual.e125) + (this.e3215 * right_dual.e425), (this.e4315 * right_dual.e235) + (this.e3215 * right_dual.e435), -(this.e4315 * right_dual.e425) - (this.e4125 * right_dual.e435)) + (float4(right_dual.e12345) * this.group0) - (this.group1.yzxx * float4(right_dual.group1.zxy, right_dual.e415)), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * this.group1
        );
        return Flector(
            /* e15, e25, e35, e45 */
            float4(other.scalar) * anti_wedge.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar * anti_wedge.e4235, other.scalar * anti_wedge.e4315, other.scalar * anti_wedge.e4125, -(other.e23 * anti_wedge.e15) - (other.e31 * anti_wedge.e25) - (other.e12 * anti_wedge.e35)) + (other.group0 * float4(anti_wedge.group0.www, anti_wedge.e3215))
        );
    }
}
// Fancy infix trick (second half)
public Flector operator /(AntiProjectViaHorizonOntoInfixPartial<Flector> lhs, AntiPlane rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Flector {
    public Flector anti_project_via_horizon_onto(AntiPlane other) {
        Plane right_dual = Plane(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        Motor anti_wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4(((this.group1.zxy * right_dual.group0.yzx) - (this.group1.yzx * right_dual.group0.zxy)), 0.0), 
            /* e235, e315, e125, e5 */
            float4(this.e3215 * right_dual.e4235 * -1.0, this.e3215 * right_dual.e4315 * -1.0, this.e3215 * right_dual.e4125 * -1.0, (this.e25 * right_dual.e4315) + (this.e35 * right_dual.e4125) + (this.e45 * right_dual.e3215)) + (right_dual.group0.wwwx * float4(this.group1.xyz, this.e15))
        );
        return Flector(
            /* e15, e25, e35, e45 */
            float4(float3(1.0), 0.0) * float4(anti_wedge.group1.www, 0.0) * float4(other.group0.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.e3 * anti_wedge.e425, other.e1 * anti_wedge.e435, other.e2 * anti_wedge.e415, -(other.e2 * anti_wedge.e315) - (other.e3 * anti_wedge.e125)) - (other.group0.yzxx * float4(anti_wedge.group0.zxy, anti_wedge.e235))
        );
    }
}
// Fancy infix trick (second half)
public Sphere operator /(AntiProjectViaHorizonOntoInfixPartial<Flector> lhs, Circle rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Flector {
    public Sphere anti_project_via_horizon_onto(Circle other) {
        Dipole right_dual = Dipole(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35 */
            other.group2.xyz
        );
        RoundPoint anti_wedge = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(-(right_dual.e41 * this.e3215) - (right_dual.e31 * this.e4125), -(right_dual.e42 * this.e3215) - (right_dual.e12 * this.e4235), -(right_dual.e43 * this.e3215) - (right_dual.e23 * this.e4315), (right_dual.e42 * this.e4315) + (right_dual.e43 * this.e4125)) + (this.group1.yzxx * float4(right_dual.group1.zxy, right_dual.e41)), 
            /* e5 */
            -(right_dual.e45 * this.e3215) - (right_dual.e15 * this.e4235) - (right_dual.e25 * this.e4315) - (right_dual.e35 * this.e4125)
        );
        return Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(-(other.e425 * anti_wedge.e3) - (other.e235 * anti_wedge.e4), -(other.e435 * anti_wedge.e1) - (other.e315 * anti_wedge.e4), -(other.e415 * anti_wedge.e2) - (other.e125 * anti_wedge.e4), (other.e321 * anti_wedge.e5) + (other.e125 * anti_wedge.e3)) + (anti_wedge.group0.yzxy * float4(other.group1.zxy, other.e315)) + float4((float3(anti_wedge.e5) * other.group0.xyz), other.e235 * anti_wedge.e1), 
            /* e1234 */
            -(other.e423 * anti_wedge.e1) - (other.e431 * anti_wedge.e2) - (other.e412 * anti_wedge.e3) - (other.e321 * anti_wedge.e4)
        );
    }
}
// Fancy infix trick (second half)
public Sphere operator /(AntiProjectViaHorizonOntoInfixPartial<Flector> lhs, CircleRotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Flector {
    public Sphere anti_project_via_horizon_onto(CircleRotor other) {
        AntiCircleRotor right_dual = AntiCircleRotor(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        RoundPoint anti_wedge = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(-(right_dual.e41 * this.e3215) - (right_dual.e31 * this.e4125), -(right_dual.e42 * this.e3215) - (right_dual.e12 * this.e4235), -(right_dual.e43 * this.e3215) - (right_dual.e23 * this.e4315), (right_dual.e42 * this.e4315) + (right_dual.e43 * this.e4125)) + (this.group1.yzxx * float4(right_dual.group1.zxy, right_dual.e41)), 
            /* e5 */
            -(right_dual.e45 * this.e3215) - (right_dual.e15 * this.e4235) - (right_dual.e25 * this.e4315) - (right_dual.e35 * this.e4125)
        );
        return Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(-(other.e425 * anti_wedge.e3) - (other.e235 * anti_wedge.e4), -(other.e435 * anti_wedge.e1) - (other.e315 * anti_wedge.e4), -(other.e415 * anti_wedge.e2) - (other.e125 * anti_wedge.e4), (other.e315 * anti_wedge.e2) + (other.e125 * anti_wedge.e3)) + (float4(anti_wedge.e5) * float4(other.group0.xyz, other.e321)) + (anti_wedge.group0.yzxx * float4(other.group1.zxy, other.e235)), 
            /* e1234 */
            -(other.e423 * anti_wedge.e1) - (other.e431 * anti_wedge.e2) - (other.e412 * anti_wedge.e3) - (other.e321 * anti_wedge.e4)
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<Flector> lhs, Dipole rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Flector {
    public DipoleInversion anti_project_via_horizon_onto(Dipole other) {
        Circle right_dual = Circle(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125 */
            other.group2.xyz * float3(-1.0)
        );
        AntiCircleRotor anti_wedge = AntiCircleRotor(
            /* e41, e42, e43 */
            (right_dual.group0.xyz.zxy * this.group1.yzx) - (right_dual.group0.xyz.yzx * this.group1.zxy), 
            /* e23, e31, e12, e45 */
            float4(right_dual.e423 * this.e3215, right_dual.e431 * this.e3215, right_dual.e412 * this.e3215, -(right_dual.e425 * this.e4315) - (right_dual.e435 * this.e4125)) - (right_dual.group1.wwwx * this.group1.xyzx), 
            /* e15, e25, e35, scalar */
            float4((right_dual.e415 * this.e3215) + (right_dual.e315 * this.e4125), (right_dual.e425 * this.e3215) + (right_dual.e125 * this.e4235), (right_dual.e435 * this.e3215) + (right_dual.e235 * this.e4315), -(right_dual.e431 * this.e25) - (right_dual.e412 * this.e35) - (right_dual.e321 * this.e45)) - float4((right_dual.group2.xyz.zxy * this.group1.yzx), right_dual.e423 * this.e15)
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(anti_wedge.scalar) * other.group1, 
            /* e15, e25, e35, e1234 */
            float4((float3(anti_wedge.scalar) * other.group2.xyz), -(anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12) - (anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e42 * other.e35) + (anti_wedge.e23 * other.e45) + (anti_wedge.e45 * other.e23) + (anti_wedge.e35 * other.e42), (anti_wedge.e43 * other.e15) + (anti_wedge.e31 * other.e45) + (anti_wedge.e45 * other.e31) + (anti_wedge.e15 * other.e43), (anti_wedge.e41 * other.e25) + (anti_wedge.e12 * other.e45) + (anti_wedge.e45 * other.e12) + (anti_wedge.e25 * other.e41), -(anti_wedge.e12 * other.e35) - (anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12)) - float4((anti_wedge.group0.xyz.zxy * other.group2.xyz.yzx), anti_wedge.e23 * other.e15) - float4((other.group0.xyz.zxy * anti_wedge.group2.yzx), anti_wedge.e31 * other.e25)
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<Flector> lhs, DipoleInversion rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Flector {
    public DipoleInversion anti_project_via_horizon_onto(DipoleInversion other) {
        AntiDipoleInversion right_dual = AntiDipoleInversion(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiCircleRotor anti_wedge = AntiCircleRotor(
            /* e41, e42, e43 */
            (right_dual.group0.xyz.zxy * this.group1.yzx) - (right_dual.group0.xyz.yzx * this.group1.zxy), 
            /* e23, e31, e12, e45 */
            float4(right_dual.e423 * this.e3215, right_dual.e431 * this.e3215, right_dual.e412 * this.e3215, -(right_dual.e425 * this.e4315) - (right_dual.e435 * this.e4125)) - (right_dual.group1.wwwx * this.group1.xyzx), 
            /* e15, e25, e35, scalar */
            (float4(this.e3215) * float4(right_dual.group1.xyz, right_dual.e4)) + (this.group1.zxyx * float4(right_dual.group2.yzx, right_dual.e1)) + float4(float3(0.0), (right_dual.e2 * this.e4315) + (right_dual.e3 * this.e4125) - (right_dual.e431 * this.e25) - (right_dual.e412 * this.e35) - (right_dual.e321 * this.e45)) - float4((right_dual.group2.zxy * this.group1.yzx), right_dual.e423 * this.e15)
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(anti_wedge.scalar) * other.group1, 
            /* e15, e25, e35, e1234 */
            float4((anti_wedge.group2.www * other.group2.xyz), (anti_wedge.scalar * other.e1234) - (anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12) - (anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e23 * other.e45) + (anti_wedge.e45 * other.e23) + (anti_wedge.e35 * other.e42) + (anti_wedge.scalar * other.e4235), (anti_wedge.e31 * other.e45) + (anti_wedge.e45 * other.e31) + (anti_wedge.e15 * other.e43) + (anti_wedge.scalar * other.e4315), (anti_wedge.e12 * other.e45) + (anti_wedge.e45 * other.e12) + (anti_wedge.e25 * other.e41) + (anti_wedge.scalar * other.e4125), -(anti_wedge.e12 * other.e35) - (anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12)) + float4((anti_wedge.group0.xyz.yzx * other.group2.zxy), anti_wedge.scalar * other.e3215) - (other.group2.yzxx * float4(anti_wedge.group0.xyz.zxy, anti_wedge.e23)) - float4((other.group0.xyz.zxy * anti_wedge.group2.yzx), anti_wedge.e31 * other.e25)
        );
    }
}
// Fancy infix trick (second half)
public FlatPoint operator /(AntiProjectViaHorizonOntoInfixPartial<Flector> lhs, DualNum rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Flector {
    public FlatPoint anti_project_via_horizon_onto(DualNum other) {
        return FlatPoint(
            /* e15, e25, e35, e45 */
            float4(other.group0.xy.xx, other.e5, 0.0) * float4(float3(0.0), 0.0) * float4(float3(1.0), 0.0) * float4(-1.0, -1.0, -1.0, 0.0)
        );
    }
}
// Fancy infix trick (second half)
public Flector operator /(AntiProjectViaHorizonOntoInfixPartial<Flector> lhs, FlatPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Flector {
    public Flector anti_project_via_horizon_onto(FlatPoint other) {
        AntiFlatPoint right_dual = AntiFlatPoint(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiMotor anti_wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4(right_dual.e321) * float4(this.group1.xyz, this.e45) * float4(-1.0), 
            /* e15, e25, e35, e3215 */
            float4(((right_dual.group0.yzx * this.group1.zxy) - (right_dual.group0.zxy * this.group1.yzx)), 0.0)
        );
        return Flector(
            /* e15, e25, e35, e45 */
            float4(anti_wedge.scalar) * other.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4((float3(other.e45) * anti_wedge.group0.xyz), -(anti_wedge.e23 * other.e15) - (anti_wedge.e31 * other.e25) - (anti_wedge.e12 * other.e35))
        );
    }
}
// Fancy infix trick (second half)
public Flector operator /(AntiProjectViaHorizonOntoInfixPartial<Flector> lhs, Flector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Flector {
    public Flector anti_project_via_horizon_onto(Flector other) {
        AntiFlector right_dual = AntiFlector(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiMotor anti_wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4((right_dual.group0.www * this.group1.xyz * float3(-1.0)), (right_dual.e1 * this.e4235) + (right_dual.e2 * this.e4315) + (right_dual.e3 * this.e4125) - (right_dual.e321 * this.e45)), 
            /* e15, e25, e35, e3215 */
            float4(((right_dual.group0.yzx * this.group1.zxy) - (right_dual.group0.zxy * this.group1.yzx)), 0.0)
        );
        return Flector(
            /* e15, e25, e35, e45 */
            float4(anti_wedge.scalar) * other.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4(anti_wedge.scalar * other.e4235, anti_wedge.scalar * other.e4315, anti_wedge.scalar * other.e4125, -(anti_wedge.e23 * other.e15) - (anti_wedge.e31 * other.e25) - (anti_wedge.e12 * other.e35)) + (anti_wedge.group0 * float4(other.group0.www, other.e3215))
        );
    }
}
// Fancy infix trick (second half)
public Plane operator /(AntiProjectViaHorizonOntoInfixPartial<Flector> lhs, Line rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Flector {
    public Plane anti_project_via_horizon_onto(Line other) {
        AntiLine right_dual = AntiLine(
            /* e23, e31, e12 */
            other.group0.xyz, 
            /* e15, e25, e35 */
            other.group1.xyz
        );
        AntiPlane anti_wedge = AntiPlane(
            /* e1, e2, e3, e5 */
            float4(right_dual.e12 * this.e4315, right_dual.e23 * this.e4125, right_dual.e31 * this.e4235, -(right_dual.e25 * this.e4315) - (right_dual.e35 * this.e4125)) - (this.group1.zxyx * float4(right_dual.group0.xyz.yzx, right_dual.e15))
        );
        return Plane(
            /* e4235, e4315, e4125, e3215 */
            float4(anti_wedge.e3 * other.e425 * -1.0, anti_wedge.e1 * other.e435 * -1.0, anti_wedge.e2 * other.e415 * -1.0, (anti_wedge.e2 * other.e315) + (anti_wedge.e3 * other.e125)) + (anti_wedge.group0.yzxx * float4(other.group0.xyz.zxy, other.e235))
        );
    }
}
// Fancy infix trick (second half)
public Flector operator /(AntiProjectViaHorizonOntoInfixPartial<Flector> lhs, Motor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Flector {
    public Flector anti_project_via_horizon_onto(Motor other) {
        AntiMotor right_dual = AntiMotor(
            /* e23, e31, e12, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiFlector anti_wedge = AntiFlector(
            /* e235, e315, e125, e321 */
            float4(float3(1.0), 0.0) * float4(right_dual.group1.www, 0.0) * float4(this.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e1, e2, e3, e5 */
            float4(float3(0.0), -(right_dual.e25 * this.e4315) - (right_dual.e35 * this.e4125)) + float4((right_dual.group0.zxy * this.group1.yzx), right_dual.e3215 * this.e45) - (this.group1.zxyx * float4(right_dual.group0.yzx, right_dual.e15))
        );
        return Flector(
            /* e15, e25, e35, e45 */
            float4(float3(1.0), 0.0) * float4(other.group1.www, 0.0) * float4(anti_wedge.group1.xyz, 0.0) * float4(-1.0, -1.0, -1.0, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            (anti_wedge.group1.yzxx * float4(other.group0.zxy, other.e235)) + float4(float3(0.0), (anti_wedge.e2 * other.e315) + (anti_wedge.e3 * other.e125)) - float4((anti_wedge.group1.zxy * other.group0.yzx), anti_wedge.e321 * other.e5)
        );
    }
}
// Fancy infix trick (second half)
public MultiVector operator /(AntiProjectViaHorizonOntoInfixPartial<Flector> lhs, MultiVector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Flector {
    public MultiVector anti_project_via_horizon_onto(MultiVector other) {
        MultiVector right_dual = MultiVector(
            /* scalar, e12345 */
            other.group0.xy.yx * float2(-1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215, 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43 */
            other.group7.xyz, 
            /* e23, e31, e12 */
            other.group6.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412 */
            other.group4.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group3.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        MultiVector anti_wedge = MultiVector(
            /* scalar, e12345 */
            float2((this.e4235 * right_dual.e1) + (this.e4315 * right_dual.e2) + (this.e4125 * right_dual.e3) + (this.e3215 * right_dual.e4) - (this.e15 * right_dual.e423) - (this.e25 * right_dual.e431) - (this.e35 * right_dual.e412) - (this.e45 * right_dual.e321), 0.0), 
            /* e1, e2, e3, e4 */
            float4(-(this.e15 * right_dual.e1234) - (this.e4125 * right_dual.e31), -(this.e25 * right_dual.e1234) - (this.e4235 * right_dual.e12), -(this.e35 * right_dual.e1234) - (this.e4315 * right_dual.e23), (this.e4315 * right_dual.e42) + (this.e4125 * right_dual.e43)) + (this.group1.yzxx * float4(right_dual.group5.xyz.zxy, right_dual.e41)) - float4((right_dual.group4.xyz * this.group1.www), this.e45 * right_dual.e1234), 
            /* e5 */
            (this.e15 * right_dual.e4235) + (this.e25 * right_dual.e4315) + (this.e35 * right_dual.e4125) + (this.e45 * right_dual.e3215) - (this.e4235 * right_dual.e15) - (this.e4315 * right_dual.e25) - (this.e4125 * right_dual.e35) - (this.e3215 * right_dual.e45), 
            /* e15, e25, e35, e45 */
            float4((this.e4125 * right_dual.e315) + (this.e3215 * right_dual.e415), (this.e4235 * right_dual.e125) + (this.e3215 * right_dual.e425), (this.e4315 * right_dual.e235) + (this.e3215 * right_dual.e435), -(this.e4315 * right_dual.e425) - (this.e4125 * right_dual.e435)) + (float4(right_dual.e12345) * this.group0) - float4((right_dual.group8.xyz.zxy * this.group1.yzx), this.e4235 * right_dual.e415), 
            /* e41, e42, e43 */
            (right_dual.group7.xyz.zxy * this.group1.yzx) - (right_dual.group7.xyz.yzx * this.group1.zxy), 
            /* e23, e31, e12 */
            (float3(this.e3215) * right_dual.group7.xyz) - (float3(right_dual.e321) * this.group1.xyz), 
            /* e415, e425, e435, e321 */
            float4(((this.group1.zxy * right_dual.group9.yzx) - (this.group1.yzx * right_dual.group9.zxy)), this.e3215 * right_dual.e1234 * -1.0), 
            /* e423, e431, e412 */
            float3(right_dual.e1234) * this.group1.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            (float3(right_dual.e3215) * this.group1.xyz) - (float3(this.e3215) * right_dual.group9.xyz), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * this.group1, 
            /* e1234 */
            0.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(anti_wedge.scalar * other.scalar, (anti_wedge.scalar * other.e12345) + (anti_wedge.e12345 * other.scalar) + (anti_wedge.e1 * other.e4235) + (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) + (anti_wedge.e4 * other.e3215) + (anti_wedge.e5 * other.e1234) + (anti_wedge.e4235 * other.e1) + (anti_wedge.e4315 * other.e2) + (anti_wedge.e4125 * other.e3) + (anti_wedge.e3215 * other.e4) + (anti_wedge.e1234 * other.e5) - (anti_wedge.e15 * other.e423) - (anti_wedge.e25 * other.e431) - (anti_wedge.e35 * other.e412) - (anti_wedge.e45 * other.e321) - (anti_wedge.e41 * other.e235) - (anti_wedge.e42 * other.e315) - (anti_wedge.e43 * other.e125) - (anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435) - (anti_wedge.e415 * other.e23) - (anti_wedge.e425 * other.e31) - (anti_wedge.e435 * other.e12) - (anti_wedge.e321 * other.e45) - (anti_wedge.e423 * other.e15) - (anti_wedge.e431 * other.e25) - (anti_wedge.e412 * other.e35) - (anti_wedge.e235 * other.e41) - (anti_wedge.e315 * other.e42) - (anti_wedge.e125 * other.e43)), 
            /* e1, e2, e3, e4 */
            (float4(anti_wedge.scalar) * other.group1) + (float4(other.scalar) * anti_wedge.group1), 
            /* e5 */
            (anti_wedge.scalar * other.e5) + (anti_wedge.e5 * other.scalar), 
            /* e15, e25, e35, e45 */
            (float4(anti_wedge.scalar) * other.group3) + (float4(anti_wedge.e5) * other.group1) + (float4(other.scalar) * anti_wedge.group3) - (float4(other.e5) * anti_wedge.group1), 
            /* e41, e42, e43 */
            (float3(anti_wedge.scalar) * other.group4.xyz) + (float3(other.scalar) * anti_wedge.group4.xyz) + (float3(other.e4) * anti_wedge.group1.xyz) - (float3(anti_wedge.e4) * other.group1.xyz), 
            /* e23, e31, e12 */
            (float3(anti_wedge.scalar) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group5.xyz) + (anti_wedge.group1.zxy * other.group1.yzx) - (anti_wedge.group1.yzx * other.group1.zxy), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e4 * other.e15) + (anti_wedge.e5 * other.e41) + (anti_wedge.e15 * other.e4) + (anti_wedge.e41 * other.e5), (anti_wedge.e4 * other.e25) + (anti_wedge.e5 * other.e42) + (anti_wedge.e25 * other.e4) + (anti_wedge.e42 * other.e5), (anti_wedge.e4 * other.e35) + (anti_wedge.e5 * other.e43) + (anti_wedge.e35 * other.e4) + (anti_wedge.e43 * other.e5), -(anti_wedge.e1 * other.e23) - (anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12) - (anti_wedge.e12 * other.e3)) + (float4(anti_wedge.scalar) * other.group6) + (float4(other.scalar) * anti_wedge.group6) - (other.group1.xyzy * float4(anti_wedge.group3.www, anti_wedge.e31)) - float4((other.group3.www * anti_wedge.group1.xyz), anti_wedge.e23 * other.e1), 
            /* e423, e431, e412 */
            (float3(anti_wedge.scalar) * other.group7.xyz) + (float3(anti_wedge.e4) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group7.xyz) + (float3(other.e4) * anti_wedge.group5.xyz) + (anti_wedge.group4.xyz.yzx * other.group1.zxy) + (other.group4.xyz.yzx * anti_wedge.group1.zxy) - (anti_wedge.group4.xyz.zxy * other.group1.yzx) - (other.group4.xyz.zxy * anti_wedge.group1.yzx), 
            /* e235, e315, e125 */
            (float3(anti_wedge.scalar) * other.group8.xyz) + (float3(anti_wedge.e5) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group8.xyz) + (float3(other.e5) * anti_wedge.group5.xyz) + (anti_wedge.group1.yzx * other.group3.zxy) + (anti_wedge.group3.zxy * other.group1.yzx) - (anti_wedge.group1.zxy * other.group3.yzx) - (anti_wedge.group3.yzx * other.group1.zxy), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e2 * other.e435) + (anti_wedge.e5 * other.e423) + (anti_wedge.e45 * other.e23) + (anti_wedge.e425 * other.e3), (anti_wedge.e3 * other.e415) + (anti_wedge.e5 * other.e431) + (anti_wedge.e45 * other.e31) + (anti_wedge.e435 * other.e1), (anti_wedge.e1 * other.e425) + (anti_wedge.e5 * other.e412) + (anti_wedge.e45 * other.e12) + (anti_wedge.e415 * other.e2), -(anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12) - (anti_wedge.e321 * other.e5)) + (float4(anti_wedge.scalar) * other.group9) + (float4(other.scalar) * anti_wedge.group9) + float4((anti_wedge.group5.xyz * other.group3.www), anti_wedge.e2 * other.e315) + float4((anti_wedge.group8.xyz * other.group1.www), anti_wedge.e3 * other.e125) + float4((anti_wedge.group4.xyz.yzx * other.group3.zxy), anti_wedge.e1 * other.e235) + float4((other.group4.xyz.yzx * anti_wedge.group3.zxy), anti_wedge.e5 * other.e321) - (other.group1.yzxz * float4(anti_wedge.group6.zxy, anti_wedge.e125)) - (other.group3.yzxx * float4(anti_wedge.group4.xyz.zxy, anti_wedge.e23)) - float4((float3(other.e5) * anti_wedge.group7.xyz), anti_wedge.e31 * other.e25) - float4((other.group8.xyz * anti_wedge.group1.www), anti_wedge.e235 * other.e1) - float4((other.group4.xyz.zxy * anti_wedge.group3.yzx), anti_wedge.e12 * other.e35) - float4((anti_wedge.group1.zxy * other.group6.yzx), anti_wedge.e315 * other.e2), 
            /* e1234 */
            (anti_wedge.scalar * other.e1234) + (anti_wedge.e321 * other.e4) + (anti_wedge.e423 * other.e1) + (anti_wedge.e431 * other.e2) + (anti_wedge.e412 * other.e3) + (anti_wedge.e1234 * other.scalar) - (anti_wedge.e1 * other.e423) - (anti_wedge.e2 * other.e431) - (anti_wedge.e3 * other.e412) - (anti_wedge.e4 * other.e321) - (anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12) - (anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)
        );
    }
}
// Fancy infix trick (second half)
public Plane operator /(AntiProjectViaHorizonOntoInfixPartial<Flector> lhs, Plane rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Flector {
    public Plane anti_project_via_horizon_onto(Plane other) {
        AntiPlane right_dual = AntiPlane(
            /* e1, e2, e3, e5 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return Plane(
            /* e4235, e4315, e4125, e3215 */
            float4((right_dual.e1 * this.e4235) + (right_dual.e2 * this.e4315) + (right_dual.e3 * this.e4125)) * other.group0
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<Flector> lhs, RoundPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Flector {
    public DipoleInversion anti_project_via_horizon_onto(RoundPoint other) {
        Sphere right_dual = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        AntiDipoleInversion anti_wedge = AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(right_dual.e1234) * this.group1.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            float4(((this.group1.zxy * right_dual.group0.yzx) - (this.group1.yzx * right_dual.group0.zxy)), this.e3215 * right_dual.e1234 * -1.0), 
            /* e235, e315, e125, e4 */
            float4(((float3(right_dual.e3215) * this.group1.xyz) - (float3(this.e3215) * right_dual.group0.xyz)), this.e45 * right_dual.e1234 * -1.0), 
            /* e1, e2, e3, e5 */
            float4((float3(right_dual.e1234) * this.group0.xyz * float3(-1.0)), (this.e15 * right_dual.e4235) + (this.e25 * right_dual.e4315) + (this.e35 * right_dual.e4125) + (this.e45 * right_dual.e3215))
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            (float3(other.e4) * anti_wedge.group3.xyz) - (float3(anti_wedge.e4) * other.group0.xyz), 
            /* e23, e31, e12, e45 */
            (anti_wedge.group3.zxyw * other.group0.yzxw) - float4((anti_wedge.group3.yzx * other.group0.zxy), anti_wedge.e4 * other.e5), 
            /* e15, e25, e35, e1234 */
            float4(anti_wedge.e1 * other.e5 * -1.0, anti_wedge.e2 * other.e5 * -1.0, anti_wedge.e3 * other.e5 * -1.0, (anti_wedge.e431 * other.e2) + (anti_wedge.e412 * other.e3) + (anti_wedge.e321 * other.e4)) + (other.group0.xyzx * float4(anti_wedge.group3.www, anti_wedge.e423)), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e425 * other.e3) + (anti_wedge.e235 * other.e4), (anti_wedge.e435 * other.e1) + (anti_wedge.e315 * other.e4), (anti_wedge.e415 * other.e2) + (anti_wedge.e125 * other.e4), -(anti_wedge.e315 * other.e2) - (anti_wedge.e125 * other.e3)) - (float4(other.e5) * float4(anti_wedge.group0.xyz, anti_wedge.e321)) - (other.group0.yzxx * float4(anti_wedge.group1.zxy, anti_wedge.e235))
        );
    }
}
// Fancy infix trick (second half)
public Flector operator /(AntiProjectViaHorizonOntoInfixPartial<Flector> lhs, Scalar rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Flector {
    public Flector anti_project_via_horizon_onto(Scalar other) {
        AntiScalar right_dual = AntiScalar(
            /* e12345 */
            other.scalar
        );
        Flector anti_wedge = Flector(
            /* e15, e25, e35, e45 */
            float4(right_dual.e12345) * this.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * this.group1
        );
        return Flector(
            /* e15, e25, e35, e45 */
            float4(other.scalar) * anti_wedge.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar) * anti_wedge.group1
        );
    }
}
// Fancy infix trick (second half)
public Sphere operator /(AntiProjectViaHorizonOntoInfixPartial<Flector> lhs, Sphere rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Flector {
    public Sphere anti_project_via_horizon_onto(Sphere other) {
        RoundPoint right_dual = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(other.group0.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215
        );
        Scalar anti_wedge = Scalar(
            /* scalar */
            (this.e4235 * right_dual.e1) + (this.e4315 * right_dual.e2) + (this.e4125 * right_dual.e3) + (this.e3215 * right_dual.e4)
        );
        return Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(anti_wedge.scalar) * other.group0, 
            /* e1234 */
            anti_wedge.scalar * other.e1234
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<Flector> lhs, VersorEven rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Flector {
    public DipoleInversion anti_project_via_horizon_onto(VersorEven other) {
        VersorOdd right_dual = VersorOdd(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiDipoleInversion anti_wedge = AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(right_dual.e1234) * this.group1.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            float4(((this.group1.zxy * right_dual.group3.yzx) - (this.group1.yzx * right_dual.group3.zxy)), this.e3215 * right_dual.e1234 * -1.0), 
            /* e235, e315, e125, e4 */
            (this.group1.xyzx * float4(right_dual.group3.www, right_dual.e41)) + float4(float3(0.0), (this.e4315 * right_dual.e42) + (this.e4125 * right_dual.e43)) - float4((this.group1.www * right_dual.group3.xyz), this.e45 * right_dual.e1234), 
            /* e1, e2, e3, e5 */
            float4(float3(0.0), (this.e25 * right_dual.e4315) + (this.e35 * right_dual.e4125) + (this.e45 * right_dual.e3215) - (this.e3215 * right_dual.e45)) + float4((this.group1.yzx * right_dual.group1.zxy), this.e15 * right_dual.e4235) - (this.group1.zxyy * float4(right_dual.group1.yzx, right_dual.e25)) - (this.group1.wwwz * float4(right_dual.group0.xyz, right_dual.e35)) - (right_dual.group2.wwwx * float4(this.group0.xyz, this.e4235))
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            (float3(other.e4) * anti_wedge.group3.xyz) - (float3(anti_wedge.e4) * other.group3.xyz), 
            /* e23, e31, e12, e45 */
            (anti_wedge.group3.zxyw * other.group3.yzxw) - float4((anti_wedge.group3.yzx * other.group3.zxy), anti_wedge.e4 * other.e5), 
            /* e15, e25, e35, e1234 */
            (other.group3.xyzx * float4(anti_wedge.group3.www, anti_wedge.e423)) + float4(float3(0.0), (anti_wedge.e431 * other.e2) + (anti_wedge.e412 * other.e3) + (anti_wedge.e321 * other.e4) - (anti_wedge.e1 * other.e423) - (anti_wedge.e2 * other.e431) - (anti_wedge.e3 * other.e412)) - float4((other.group2.www * anti_wedge.group3.xyz), anti_wedge.e4 * other.e321), 
            /* e4235, e4315, e4125, e3215 */
            (float4(anti_wedge.e5) * float4(other.group0.xyz, other.e321)) + (anti_wedge.group3.yzxz * float4(other.group1.zxy, other.e125)) + float4((anti_wedge.group1.yzx * other.group3.zxy), anti_wedge.e1 * other.e235) + float4((other.group3.www * anti_wedge.group2.xyz), anti_wedge.e2 * other.e315) - (float4(other.e5) * float4(anti_wedge.group0.xyz, anti_wedge.e321)) - (anti_wedge.group2.wwwy * float4(other.group2.xyz, other.e2)) - (other.group3.yzxx * float4(anti_wedge.group1.zxy, anti_wedge.e235)) - float4((anti_wedge.group3.zxy * other.group1.yzx), anti_wedge.e125 * other.e3)
        );
    }
}
// Fancy infix trick (second half)
public VersorOdd operator /(AntiProjectViaHorizonOntoInfixPartial<Flector> lhs, VersorOdd rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Flector {
    public VersorOdd anti_project_via_horizon_onto(VersorOdd other) {
        VersorEven right_dual = VersorEven(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        VersorOdd anti_wedge = VersorOdd(
            /* e41, e42, e43, scalar */
            (this.group1.yzxx * float4(right_dual.group0.zxy, right_dual.e1)) + float4(float3(0.0), (this.e4315 * right_dual.e2) + (this.e4125 * right_dual.e3) + (this.e3215 * right_dual.e4) - (this.e25 * right_dual.e431) - (this.e35 * right_dual.e412) - (this.e45 * right_dual.e321)) - (right_dual.group0.yzxx * float4(this.group1.zxy, this.e15)), 
            /* e23, e31, e12, e45 */
            (right_dual.group0 * float4(this.group1.www, this.e45)) + float4(float3(0.0), -(this.e4315 * right_dual.e425) - (this.e4125 * right_dual.e435)) - (this.group1.xyzx * right_dual.group1.wwwx), 
            /* e15, e25, e35, e1234 */
            float4((float3(this.e3215) * right_dual.group1.xyz), 0.0) + float4((float3(right_dual.e12345) * this.group0.xyz), 0.0) + float4((this.group1.zxy * right_dual.group2.yzx), 0.0) - float4((this.group1.yzx * right_dual.group2.zxy), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * this.group1
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(((float3(anti_wedge.scalar) * other.group0.xyz) + (float3(other.scalar) * anti_wedge.group0.xyz)), anti_wedge.scalar * other.scalar), 
            /* e23, e31, e12, e45 */
            (float4(anti_wedge.scalar) * other.group1) + (float4(other.scalar) * anti_wedge.group1), 
            /* e15, e25, e35, e1234 */
            (float4(anti_wedge.scalar) * other.group2) + (float4(other.scalar) * anti_wedge.group2) + float4(float3(0.0), -(anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12) - (anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e23 * other.e45) + (anti_wedge.e45 * other.e23) + (anti_wedge.e35 * other.e42) + (anti_wedge.e4235 * other.scalar), (anti_wedge.e31 * other.e45) + (anti_wedge.e45 * other.e31) + (anti_wedge.e15 * other.e43) + (anti_wedge.e4315 * other.scalar), (anti_wedge.e12 * other.e45) + (anti_wedge.e45 * other.e12) + (anti_wedge.e25 * other.e41) + (anti_wedge.e4125 * other.scalar), -(anti_wedge.e12 * other.e35) - (anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12)) + (anti_wedge.group0.yzxw * float4(other.group2.zxy, other.e3215)) + float4((anti_wedge.group0.www * other.group3.xyz), anti_wedge.e3215 * other.scalar) - (other.group2.yzxx * float4(anti_wedge.group0.zxy, anti_wedge.e23)) - float4((anti_wedge.group2.yzx * other.group0.zxy), anti_wedge.e31 * other.e25)
        );
    }
}
// Fancy infix trick (first half)
public AntiProjectViaHorizonOntoInfixPartial<Line> operator /(Line lhs, AntiProjectViaHorizonOntoInfix rhs) {
    return AntiProjectViaHorizonOntoInfixPartial<Line>(lhs);
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<Line> lhs, AntiCircleRotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Line {
    public VersorEven anti_project_via_horizon_onto(AntiCircleRotor other) {
        CircleRotor right_dual = CircleRotor(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiDipoleInversion anti_wedge = AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(float3(1.0), 0.0) * float4(this.group0.xyz, 0.0) * float4(right_dual.group2.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e235, e315, e125, e4 */
            float4((float3(right_dual.e12345) * this.group1.xyz), -(right_dual.e423 * this.e415) - (right_dual.e431 * this.e425) - (right_dual.e412 * this.e435)), 
            /* e1, e2, e3, e5 */
            float4((right_dual.e412 * this.e315) + (right_dual.e321 * this.e415), (right_dual.e423 * this.e125) + (right_dual.e321 * this.e425), (right_dual.e431 * this.e235) + (right_dual.e321 * this.e435), -(right_dual.e415 * this.e235) - (right_dual.e425 * this.e315) - (right_dual.e435 * this.e125) - (right_dual.e315 * this.e425) - (right_dual.e125 * this.e435)) - float4((right_dual.group0.xyz.yzx * this.group1.xyz.zxy), right_dual.e235 * this.e415)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4((other.e42 * anti_wedge.e3) + (other.e23 * anti_wedge.e4) + (other.scalar * anti_wedge.e423), (other.e43 * anti_wedge.e1) + (other.e31 * anti_wedge.e4) + (other.scalar * anti_wedge.e431), (other.e41 * anti_wedge.e2) + (other.e12 * anti_wedge.e4) + (other.scalar * anti_wedge.e412), -(other.e42 * anti_wedge.e315) - (other.e43 * anti_wedge.e125) - (other.e23 * anti_wedge.e415) - (other.e31 * anti_wedge.e425) - (other.e12 * anti_wedge.e435) - (other.e45 * anti_wedge.e321) - (other.e15 * anti_wedge.e423) - (other.e25 * anti_wedge.e431) - (other.e35 * anti_wedge.e412)) - float4((other.group0.xyz.zxy * anti_wedge.group3.yzx), other.e41 * anti_wedge.e235), 
            /* e415, e425, e435, e321 */
            float4((other.e15 * anti_wedge.e4) + (other.scalar * anti_wedge.e415), (other.e25 * anti_wedge.e4) + (other.scalar * anti_wedge.e425), (other.e35 * anti_wedge.e4) + (other.scalar * anti_wedge.e435), -(other.e31 * anti_wedge.e2) - (other.e12 * anti_wedge.e3)) + float4((other.group0.xyz * anti_wedge.group3.www), other.scalar * anti_wedge.e321) - (other.group1.wwwx * anti_wedge.group3.xyzx), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.scalar) * anti_wedge.group2.xyz) + (float3(anti_wedge.e5) * other.group1.xyz) + (other.group2.zxy * anti_wedge.group3.yzx) - (other.group2.yzx * anti_wedge.group3.zxy)), other.scalar * anti_wedge.e5), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * float4(anti_wedge.group3.xyz, anti_wedge.e4)
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<Line> lhs, AntiDipoleInversion rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Line {
    public VersorEven anti_project_via_horizon_onto(AntiDipoleInversion other) {
        DipoleInversion right_dual = DipoleInversion(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiCircleRotor anti_wedge = AntiCircleRotor(
            /* e41, e42, e43 */
            float3(right_dual.e1234) * this.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4((float3(right_dual.e1234) * this.group1.xyz), -(right_dual.e4235 * this.e415) - (right_dual.e4315 * this.e425) - (right_dual.e4125 * this.e435)), 
            /* e15, e25, e35, scalar */
            float4((right_dual.e4125 * this.e315) + (right_dual.e3215 * this.e415), (right_dual.e4235 * this.e125) + (right_dual.e3215 * this.e425), (right_dual.e4315 * this.e235) + (right_dual.e3215 * this.e435), -(right_dual.e42 * this.e315) - (right_dual.e43 * this.e125) - (right_dual.e23 * this.e415) - (right_dual.e31 * this.e425) - (right_dual.e12 * this.e435)) - float4((this.group1.xyz.zxy * right_dual.group3.yzx), right_dual.e41 * this.e235)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4((anti_wedge.e42 * other.e3) + (anti_wedge.e23 * other.e4) + (anti_wedge.scalar * other.e423), (anti_wedge.e43 * other.e1) + (anti_wedge.e31 * other.e4) + (anti_wedge.scalar * other.e431), (anti_wedge.e41 * other.e2) + (anti_wedge.e12 * other.e4) + (anti_wedge.scalar * other.e412), -(anti_wedge.e42 * other.e315) - (anti_wedge.e43 * other.e125) - (anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435) - (anti_wedge.e45 * other.e321) - (anti_wedge.e15 * other.e423) - (anti_wedge.e25 * other.e431) - (anti_wedge.e35 * other.e412)) - float4((anti_wedge.group0.xyz.zxy * other.group3.yzx), anti_wedge.e41 * other.e235), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e15 * other.e4) + (anti_wedge.scalar * other.e415), (anti_wedge.e25 * other.e4) + (anti_wedge.scalar * other.e425), (anti_wedge.e35 * other.e4) + (anti_wedge.scalar * other.e435), -(anti_wedge.e31 * other.e2) - (anti_wedge.e12 * other.e3)) + float4((anti_wedge.group0.xyz * other.group3.www), anti_wedge.scalar * other.e321) - (anti_wedge.group1.wwwx * other.group3.xyzx), 
            /* e235, e315, e125, e5 */
            float4(((float3(anti_wedge.scalar) * other.group2.xyz) + (float3(other.e5) * anti_wedge.group1.xyz) + (anti_wedge.group2.zxy * other.group3.yzx) - (anti_wedge.group2.yzx * other.group3.zxy)), anti_wedge.scalar * other.e5), 
            /* e1, e2, e3, e4 */
            float4(anti_wedge.scalar) * float4(other.group3.xyz, other.e4)
        );
    }
}
// Fancy infix trick (second half)
public Line operator /(AntiProjectViaHorizonOntoInfixPartial<Line> lhs, AntiDualNum rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Line {
    public Line anti_project_via_horizon_onto(AntiDualNum other) {
        DualNum right_dual = DualNum(
            /* e5, e12345 */
            other.group0.xy
        );
        Line anti_wedge = Line(
            /* e415, e425, e435 */
            float3(right_dual.e12345) * this.group0.xyz, 
            /* e235, e315, e125 */
            float3(right_dual.e12345) * this.group1.xyz
        );
        return Line(
            /* e415, e425, e435 */
            float3(other.scalar) * anti_wedge.group0.xyz, 
            /* e235, e315, e125 */
            float3(other.scalar) * anti_wedge.group1.xyz
        );
    }
}
// Fancy infix trick (second half)
public Motor operator /(AntiProjectViaHorizonOntoInfixPartial<Line> lhs, AntiFlector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Line {
    public Motor anti_project_via_horizon_onto(AntiFlector other) {
        Flector right_dual = Flector(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        FlatPoint anti_wedge = FlatPoint(
            /* e15, e25, e35, e45 */
            float4((right_dual.e4125 * this.e315) + (right_dual.e3215 * this.e415), (right_dual.e4235 * this.e125) + (right_dual.e3215 * this.e425), (right_dual.e4315 * this.e235) + (right_dual.e3215 * this.e435), -(right_dual.e4315 * this.e425) - (right_dual.e4125 * this.e435)) - (right_dual.group1.yzxx * float4(this.group1.xyz.zxy, this.e415))
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4(anti_wedge.e45) * float4(other.group1.xyz, other.e321) * float4(-1.0), 
            /* e235, e315, e125, e5 */
            float4(((other.group1.yzx * anti_wedge.group0.zxy) - (other.group1.zxy * anti_wedge.group0.yzx)), 0.0)
        );
    }
}
// Fancy infix trick (second half)
public AntiFlatPoint operator /(AntiProjectViaHorizonOntoInfixPartial<Line> lhs, AntiLine rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Line {
    public AntiFlatPoint anti_project_via_horizon_onto(AntiLine other) {
        Line right_dual = Line(
            /* e415, e425, e435 */
            other.group0.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group1.xyz * float3(-1.0)
        );
        DualNum anti_wedge = DualNum(
            /* e5, e12345 */
            float2(-(right_dual.e415 * this.e235) - (right_dual.e425 * this.e315) - (right_dual.e435 * this.e125) - (right_dual.e235 * this.e415) - (right_dual.e315 * this.e425) - (right_dual.e125 * this.e435), 0.0)
        );
        return AntiFlatPoint(
            /* e235, e315, e125, e321 */
            float4(anti_wedge.group0.xy.xx, anti_wedge.e5, 0.0) * float4(float3(1.0), 0.0) * float4(other.group0.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
    }
}
// Fancy infix trick (second half)
public Motor operator /(AntiProjectViaHorizonOntoInfixPartial<Line> lhs, AntiMotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Line {
    public Motor anti_project_via_horizon_onto(AntiMotor other) {
        Motor right_dual = Motor(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        Motor anti_wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4(float3(1.0), 0.0) * float4(this.group0.xyz, 0.0) * float4(right_dual.group0.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e235, e315, e125, e5 */
            float4((float3(right_dual.e12345) * this.group1.xyz), -(this.e415 * right_dual.e235) - (this.e425 * right_dual.e315) - (this.e435 * right_dual.e125) - (this.e235 * right_dual.e415) - (this.e315 * right_dual.e425) - (this.e125 * right_dual.e435))
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4((other.group0.www * anti_wedge.group0.xyz), (other.scalar * anti_wedge.e12345) - (other.e23 * anti_wedge.e415) - (other.e31 * anti_wedge.e425) - (other.e12 * anti_wedge.e435)), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.scalar) * anti_wedge.group1.xyz) + (float3(anti_wedge.e5) * other.group0.xyz)), other.scalar * anti_wedge.e5)
        );
    }
}
// Fancy infix trick (second half)
public Line operator /(AntiProjectViaHorizonOntoInfixPartial<Line> lhs, AntiPlane rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Line {
    public Line anti_project_via_horizon_onto(AntiPlane other) {
        Plane right_dual = Plane(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        FlatPoint anti_wedge = FlatPoint(
            /* e15, e25, e35, e45 */
            float4((this.e415 * right_dual.e3215) + (this.e315 * right_dual.e4125), (this.e425 * right_dual.e3215) + (this.e125 * right_dual.e4235), (this.e435 * right_dual.e3215) + (this.e235 * right_dual.e4315), -(this.e425 * right_dual.e4315) - (this.e435 * right_dual.e4125)) - (right_dual.group0.yzxx * float4(this.group1.xyz.zxy, this.e415))
        );
        return Line(
            /* e415, e425, e435 */
            float3(anti_wedge.e45) * other.group0.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            (other.group0.yzx * anti_wedge.group0.zxy) - (other.group0.zxy * anti_wedge.group0.yzx)
        );
    }
}
// Fancy infix trick (second half)
public Circle operator /(AntiProjectViaHorizonOntoInfixPartial<Line> lhs, Circle rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Line {
    public Circle anti_project_via_horizon_onto(Circle other) {
        Dipole right_dual = Dipole(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35 */
            other.group2.xyz
        );
        Scalar anti_wedge = Scalar(
            /* scalar */
            -(right_dual.e41 * this.e235) - (right_dual.e42 * this.e315) - (right_dual.e43 * this.e125) - (right_dual.e23 * this.e415) - (right_dual.e31 * this.e425) - (right_dual.e12 * this.e435)
        );
        return Circle(
            /* e423, e431, e412 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(anti_wedge.scalar) * other.group1, 
            /* e235, e315, e125 */
            float3(anti_wedge.scalar) * other.group2.xyz
        );
    }
}
// Fancy infix trick (second half)
public CircleRotor operator /(AntiProjectViaHorizonOntoInfixPartial<Line> lhs, CircleRotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Line {
    public CircleRotor anti_project_via_horizon_onto(CircleRotor other) {
        AntiCircleRotor right_dual = AntiCircleRotor(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        Scalar anti_wedge = Scalar(
            /* scalar */
            -(right_dual.e41 * this.e235) - (right_dual.e42 * this.e315) - (right_dual.e43 * this.e125) - (right_dual.e23 * this.e415) - (right_dual.e31 * this.e425) - (right_dual.e12 * this.e435)
        );
        return CircleRotor(
            /* e423, e431, e412 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(anti_wedge.scalar) * other.group1, 
            /* e235, e315, e125, e12345 */
            float4(anti_wedge.scalar) * other.group2
        );
    }
}
// Fancy infix trick (second half)
public Circle operator /(AntiProjectViaHorizonOntoInfixPartial<Line> lhs, Dipole rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Line {
    public Circle anti_project_via_horizon_onto(Dipole other) {
        Circle right_dual = Circle(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125 */
            other.group2.xyz * float3(-1.0)
        );
        RoundPoint anti_wedge = RoundPoint(
            /* e1, e2, e3, e4 */
            float4((right_dual.e412 * this.e315) + (right_dual.e321 * this.e415), (right_dual.e423 * this.e125) + (right_dual.e321 * this.e425), (right_dual.e431 * this.e235) + (right_dual.e321 * this.e435), -(right_dual.e431 * this.e425) - (right_dual.e412 * this.e435)) - float4((right_dual.group0.xyz.yzx * this.group1.xyz.zxy), right_dual.e423 * this.e415), 
            /* e5 */
            -(right_dual.e415 * this.e235) - (right_dual.e425 * this.e315) - (right_dual.e435 * this.e125) - (right_dual.e235 * this.e415) - (right_dual.e315 * this.e425) - (right_dual.e125 * this.e435)
        );
        return Circle(
            /* e423, e431, e412 */
            (float3(anti_wedge.e4) * other.group1.xyz) + (other.group0.xyz.yzx * anti_wedge.group0.zxy) - (other.group0.xyz.zxy * anti_wedge.group0.yzx), 
            /* e415, e425, e435, e321 */
            float4((other.e41 * anti_wedge.e5) + (other.e15 * anti_wedge.e4), (other.e42 * anti_wedge.e5) + (other.e25 * anti_wedge.e4), (other.e43 * anti_wedge.e5) + (other.e35 * anti_wedge.e4), -(other.e31 * anti_wedge.e2) - (other.e12 * anti_wedge.e3)) - (other.group1.wwwx * anti_wedge.group0.xyzx), 
            /* e235, e315, e125 */
            (float3(anti_wedge.e5) * other.group1.xyz) + (other.group2.xyz.zxy * anti_wedge.group0.yzx) - (other.group2.xyz.yzx * anti_wedge.group0.zxy)
        );
    }
}
// Fancy infix trick (second half)
public CircleRotor operator /(AntiProjectViaHorizonOntoInfixPartial<Line> lhs, DipoleInversion rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Line {
    public CircleRotor anti_project_via_horizon_onto(DipoleInversion other) {
        AntiDipoleInversion right_dual = AntiDipoleInversion(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        RoundPoint anti_wedge = RoundPoint(
            /* e1, e2, e3, e4 */
            float4((right_dual.e412 * this.e315) + (right_dual.e321 * this.e415), (right_dual.e423 * this.e125) + (right_dual.e321 * this.e425), (right_dual.e431 * this.e235) + (right_dual.e321 * this.e435), -(right_dual.e431 * this.e425) - (right_dual.e412 * this.e435)) - float4((right_dual.group0.xyz.yzx * this.group1.xyz.zxy), right_dual.e423 * this.e415), 
            /* e5 */
            -(right_dual.e415 * this.e235) - (right_dual.e425 * this.e315) - (right_dual.e435 * this.e125) - (right_dual.e235 * this.e415) - (right_dual.e315 * this.e425) - (right_dual.e125 * this.e435)
        );
        return CircleRotor(
            /* e423, e431, e412 */
            (float3(anti_wedge.e4) * other.group1.xyz) + (other.group0.xyz.yzx * anti_wedge.group0.zxy) - (other.group0.xyz.zxy * anti_wedge.group0.yzx), 
            /* e415, e425, e435, e321 */
            float4((other.e41 * anti_wedge.e5) + (other.e15 * anti_wedge.e4), (other.e42 * anti_wedge.e5) + (other.e25 * anti_wedge.e4), (other.e43 * anti_wedge.e5) + (other.e35 * anti_wedge.e4), -(other.e31 * anti_wedge.e2) - (other.e12 * anti_wedge.e3)) - (other.group1.wwwx * anti_wedge.group0.xyzx), 
            /* e235, e315, e125, e12345 */
            float4(other.e25 * anti_wedge.e3 * -1.0, other.e35 * anti_wedge.e1 * -1.0, other.e15 * anti_wedge.e2 * -1.0, (other.e4315 * anti_wedge.e2) + (other.e4125 * anti_wedge.e3) + (other.e3215 * anti_wedge.e4)) + (float4(anti_wedge.e5) * float4(other.group1.xyz, other.e1234)) + (anti_wedge.group0.yzxx * float4(other.group2.zxy, other.e4235))
        );
    }
}
// Fancy infix trick (second half)
public Line operator /(AntiProjectViaHorizonOntoInfixPartial<Line> lhs, FlatPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Line {
    public Line anti_project_via_horizon_onto(FlatPoint other) {
        AntiFlatPoint right_dual = AntiFlatPoint(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiPlane anti_wedge = AntiPlane(
            /* e1, e2, e3, e5 */
            float4((float3(right_dual.e321) * this.group0.xyz), -(right_dual.e235 * this.e415) - (right_dual.e315 * this.e425) - (right_dual.e125 * this.e435))
        );
        return Line(
            /* e415, e425, e435 */
            float3(other.e45) * anti_wedge.group0.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            (anti_wedge.group0.yzx * other.group0.zxy) - (anti_wedge.group0.zxy * other.group0.yzx)
        );
    }
}
// Fancy infix trick (second half)
public Motor operator /(AntiProjectViaHorizonOntoInfixPartial<Line> lhs, Flector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Line {
    public Motor anti_project_via_horizon_onto(Flector other) {
        AntiFlector right_dual = AntiFlector(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiPlane anti_wedge = AntiPlane(
            /* e1, e2, e3, e5 */
            float4((float3(right_dual.e321) * this.group0.xyz), -(right_dual.e235 * this.e415) - (right_dual.e315 * this.e425) - (right_dual.e125 * this.e435))
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4((float3(other.e45) * anti_wedge.group0.xyz * float3(-1.0)), (anti_wedge.e1 * other.e4235) + (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125)), 
            /* e235, e315, e125, e5 */
            float4(((anti_wedge.group0.yzx * other.group0.zxy) - (anti_wedge.group0.zxy * other.group0.yzx)), 0.0)
        );
    }
}
// Fancy infix trick (second half)
public Line operator /(AntiProjectViaHorizonOntoInfixPartial<Line> lhs, Line rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Line {
    public Line anti_project_via_horizon_onto(Line other) {
        AntiLine right_dual = AntiLine(
            /* e23, e31, e12 */
            other.group0.xyz, 
            /* e15, e25, e35 */
            other.group1.xyz
        );
        Scalar anti_wedge = Scalar(
            /* scalar */
            -(right_dual.e23 * this.e415) - (right_dual.e31 * this.e425) - (right_dual.e12 * this.e435)
        );
        return Line(
            /* e415, e425, e435 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e235, e315, e125 */
            float3(anti_wedge.scalar) * other.group1.xyz
        );
    }
}
// Fancy infix trick (second half)
public Motor operator /(AntiProjectViaHorizonOntoInfixPartial<Line> lhs, Motor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Line {
    public Motor anti_project_via_horizon_onto(Motor other) {
        AntiMotor right_dual = AntiMotor(
            /* e23, e31, e12, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiMotor anti_wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4(float3(0.0), -(right_dual.e23 * this.e415) - (right_dual.e31 * this.e425) - (right_dual.e12 * this.e435)), 
            /* e15, e25, e35, e3215 */
            float4(float3(1.0), 0.0) * float4(this.group0.xyz, 0.0) * float4(right_dual.group1.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4((anti_wedge.group0.www * other.group0.xyz), (anti_wedge.scalar * other.e12345) - (anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435)), 
            /* e235, e315, e125, e5 */
            float4(((float3(anti_wedge.scalar) * other.group1.xyz) + (float3(other.e5) * anti_wedge.group0.xyz)), anti_wedge.scalar * other.e5)
        );
    }
}
// Fancy infix trick (second half)
public MultiVector operator /(AntiProjectViaHorizonOntoInfixPartial<Line> lhs, MultiVector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Line {
    public MultiVector anti_project_via_horizon_onto(MultiVector other) {
        MultiVector right_dual = MultiVector(
            /* scalar, e12345 */
            other.group0.xy.yx * float2(-1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215, 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43 */
            other.group7.xyz, 
            /* e23, e31, e12 */
            other.group6.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412 */
            other.group4.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group3.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        MultiVector anti_wedge = MultiVector(
            /* scalar, e12345 */
            float2(-(this.e415 * right_dual.e23) - (this.e425 * right_dual.e31) - (this.e435 * right_dual.e12) - (this.e235 * right_dual.e41) - (this.e315 * right_dual.e42) - (this.e125 * right_dual.e43), 0.0), 
            /* e1, e2, e3, e4 */
            float4((this.e415 * right_dual.e321) + (this.e315 * right_dual.e412), (this.e425 * right_dual.e321) + (this.e125 * right_dual.e423), (this.e435 * right_dual.e321) + (this.e235 * right_dual.e431), -(this.e425 * right_dual.e431) - (this.e435 * right_dual.e412)) - float4((this.group1.xyz.zxy * right_dual.group7.xyz.yzx), this.e415 * right_dual.e423), 
            /* e5 */
            -(this.e415 * right_dual.e235) - (this.e425 * right_dual.e315) - (this.e435 * right_dual.e125) - (this.e235 * right_dual.e415) - (this.e315 * right_dual.e425) - (this.e125 * right_dual.e435), 
            /* e15, e25, e35, e45 */
            float4((this.e415 * right_dual.e3215) + (this.e315 * right_dual.e4125), (this.e425 * right_dual.e3215) + (this.e125 * right_dual.e4235), (this.e435 * right_dual.e3215) + (this.e235 * right_dual.e4315), -(this.e425 * right_dual.e4315) - (this.e435 * right_dual.e4125)) - (right_dual.group9.yzxx * float4(this.group1.xyz.zxy, this.e415)), 
            /* e41, e42, e43 */
            float3(right_dual.e1234) * this.group0.xyz, 
            /* e23, e31, e12 */
            float3(right_dual.e1234) * this.group1.xyz, 
            /* e415, e425, e435, e321 */
            float4(right_dual.group0.xy.yy, right_dual.e12345, 0.0) * float4(float3(1.0), 0.0) * float4(this.group0.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            float3(right_dual.e12345) * this.group1.xyz, 
            /* e4235, e4315, e4125, e3215 */
            float4(0.0), 
            /* e1234 */
            0.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(anti_wedge.scalar * other.scalar, (anti_wedge.scalar * other.e12345) + (anti_wedge.e12345 * other.scalar) + (anti_wedge.e1 * other.e4235) + (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) + (anti_wedge.e4 * other.e3215) + (anti_wedge.e5 * other.e1234) + (anti_wedge.e4235 * other.e1) + (anti_wedge.e4315 * other.e2) + (anti_wedge.e4125 * other.e3) + (anti_wedge.e3215 * other.e4) + (anti_wedge.e1234 * other.e5) - (anti_wedge.e15 * other.e423) - (anti_wedge.e25 * other.e431) - (anti_wedge.e35 * other.e412) - (anti_wedge.e45 * other.e321) - (anti_wedge.e41 * other.e235) - (anti_wedge.e42 * other.e315) - (anti_wedge.e43 * other.e125) - (anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435) - (anti_wedge.e415 * other.e23) - (anti_wedge.e425 * other.e31) - (anti_wedge.e435 * other.e12) - (anti_wedge.e321 * other.e45) - (anti_wedge.e423 * other.e15) - (anti_wedge.e431 * other.e25) - (anti_wedge.e412 * other.e35) - (anti_wedge.e235 * other.e41) - (anti_wedge.e315 * other.e42) - (anti_wedge.e125 * other.e43)), 
            /* e1, e2, e3, e4 */
            (float4(anti_wedge.scalar) * other.group1) + (float4(other.scalar) * anti_wedge.group1), 
            /* e5 */
            (anti_wedge.scalar * other.e5) + (anti_wedge.e5 * other.scalar), 
            /* e15, e25, e35, e45 */
            (float4(anti_wedge.scalar) * other.group3) + (float4(anti_wedge.e5) * other.group1) + (float4(other.scalar) * anti_wedge.group3) - (float4(other.e5) * anti_wedge.group1), 
            /* e41, e42, e43 */
            (float3(anti_wedge.scalar) * other.group4.xyz) + (float3(other.scalar) * anti_wedge.group4.xyz) + (float3(other.e4) * anti_wedge.group1.xyz) - (float3(anti_wedge.e4) * other.group1.xyz), 
            /* e23, e31, e12 */
            (float3(anti_wedge.scalar) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group5.xyz) + (anti_wedge.group1.zxy * other.group1.yzx) - (anti_wedge.group1.yzx * other.group1.zxy), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e4 * other.e15) + (anti_wedge.e5 * other.e41) + (anti_wedge.e15 * other.e4) + (anti_wedge.e41 * other.e5), (anti_wedge.e4 * other.e25) + (anti_wedge.e5 * other.e42) + (anti_wedge.e25 * other.e4) + (anti_wedge.e42 * other.e5), (anti_wedge.e4 * other.e35) + (anti_wedge.e5 * other.e43) + (anti_wedge.e35 * other.e4) + (anti_wedge.e43 * other.e5), -(anti_wedge.e1 * other.e23) - (anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12) - (anti_wedge.e12 * other.e3)) + (float4(anti_wedge.scalar) * other.group6) + (float4(other.scalar) * anti_wedge.group6) - (other.group1.xyzy * float4(anti_wedge.group3.www, anti_wedge.e31)) - float4((other.group3.www * anti_wedge.group1.xyz), anti_wedge.e23 * other.e1), 
            /* e423, e431, e412 */
            (float3(anti_wedge.scalar) * other.group7.xyz) + (float3(anti_wedge.e4) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group7.xyz) + (float3(other.e4) * anti_wedge.group5.xyz) + (anti_wedge.group4.xyz.yzx * other.group1.zxy) + (other.group4.xyz.yzx * anti_wedge.group1.zxy) - (anti_wedge.group4.xyz.zxy * other.group1.yzx) - (other.group4.xyz.zxy * anti_wedge.group1.yzx), 
            /* e235, e315, e125 */
            (float3(anti_wedge.scalar) * other.group8.xyz) + (float3(anti_wedge.e5) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group8.xyz) + (float3(other.e5) * anti_wedge.group5.xyz) + (anti_wedge.group1.yzx * other.group3.zxy) + (anti_wedge.group3.zxy * other.group1.yzx) - (anti_wedge.group1.zxy * other.group3.yzx) - (anti_wedge.group3.yzx * other.group1.zxy), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e2 * other.e435) + (anti_wedge.e5 * other.e423) + (anti_wedge.e45 * other.e23) + (anti_wedge.e425 * other.e3), (anti_wedge.e3 * other.e415) + (anti_wedge.e5 * other.e431) + (anti_wedge.e45 * other.e31) + (anti_wedge.e435 * other.e1), (anti_wedge.e1 * other.e425) + (anti_wedge.e5 * other.e412) + (anti_wedge.e45 * other.e12) + (anti_wedge.e415 * other.e2), -(anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12) - (anti_wedge.e321 * other.e5)) + (float4(anti_wedge.scalar) * other.group9) + (float4(other.scalar) * anti_wedge.group9) + float4((anti_wedge.group5.xyz * other.group3.www), anti_wedge.e2 * other.e315) + float4((anti_wedge.group8.xyz * other.group1.www), anti_wedge.e3 * other.e125) + float4((anti_wedge.group4.xyz.yzx * other.group3.zxy), anti_wedge.e1 * other.e235) + float4((other.group4.xyz.yzx * anti_wedge.group3.zxy), anti_wedge.e5 * other.e321) - (other.group1.yzxz * float4(anti_wedge.group6.zxy, anti_wedge.e125)) - (other.group3.yzxx * float4(anti_wedge.group4.xyz.zxy, anti_wedge.e23)) - float4((float3(other.e5) * anti_wedge.group7.xyz), anti_wedge.e31 * other.e25) - float4((other.group8.xyz * anti_wedge.group1.www), anti_wedge.e235 * other.e1) - float4((other.group4.xyz.zxy * anti_wedge.group3.yzx), anti_wedge.e12 * other.e35) - float4((anti_wedge.group1.zxy * other.group6.yzx), anti_wedge.e315 * other.e2), 
            /* e1234 */
            (anti_wedge.scalar * other.e1234) + (anti_wedge.e321 * other.e4) + (anti_wedge.e423 * other.e1) + (anti_wedge.e431 * other.e2) + (anti_wedge.e412 * other.e3) + (anti_wedge.e1234 * other.scalar) - (anti_wedge.e1 * other.e423) - (anti_wedge.e2 * other.e431) - (anti_wedge.e3 * other.e412) - (anti_wedge.e4 * other.e321) - (anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12) - (anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)
        );
    }
}
// Fancy infix trick (second half)
public Circle operator /(AntiProjectViaHorizonOntoInfixPartial<Line> lhs, RoundPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Line {
    public Circle anti_project_via_horizon_onto(RoundPoint other) {
        Sphere right_dual = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        Dipole anti_wedge = Dipole(
            /* e41, e42, e43 */
            float3(right_dual.e1234) * this.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4((float3(right_dual.e1234) * this.group1.xyz), -(this.e415 * right_dual.e4235) - (this.e425 * right_dual.e4315) - (this.e435 * right_dual.e4125)), 
            /* e15, e25, e35 */
            (float3(right_dual.e3215) * this.group0.xyz) + (this.group1.xyz.yzx * right_dual.group0.zxy) - (this.group1.xyz.zxy * right_dual.group0.yzx)
        );
        return Circle(
            /* e423, e431, e412 */
            (float3(other.e4) * anti_wedge.group1.xyz) + (anti_wedge.group0.xyz.yzx * other.group0.zxy) - (anti_wedge.group0.xyz.zxy * other.group0.yzx), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e41 * other.e5) + (anti_wedge.e15 * other.e4), (anti_wedge.e42 * other.e5) + (anti_wedge.e25 * other.e4), (anti_wedge.e43 * other.e5) + (anti_wedge.e35 * other.e4), -(anti_wedge.e31 * other.e2) - (anti_wedge.e12 * other.e3)) - (anti_wedge.group1.wwwx * other.group0.xyzx), 
            /* e235, e315, e125 */
            (float3(other.e5) * anti_wedge.group1.xyz) + (anti_wedge.group2.xyz.zxy * other.group0.yzx) - (anti_wedge.group2.xyz.yzx * other.group0.zxy)
        );
    }
}
// Fancy infix trick (second half)
public Line operator /(AntiProjectViaHorizonOntoInfixPartial<Line> lhs, Scalar rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Line {
    public Line anti_project_via_horizon_onto(Scalar other) {
        AntiScalar right_dual = AntiScalar(
            /* e12345 */
            other.scalar
        );
        Line anti_wedge = Line(
            /* e415, e425, e435 */
            float3(right_dual.e12345) * this.group0.xyz, 
            /* e235, e315, e125 */
            float3(right_dual.e12345) * this.group1.xyz
        );
        return Line(
            /* e415, e425, e435 */
            float3(other.scalar) * anti_wedge.group0.xyz, 
            /* e235, e315, e125 */
            float3(other.scalar) * anti_wedge.group1.xyz
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<Line> lhs, VersorEven rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Line {
    public VersorEven anti_project_via_horizon_onto(VersorEven other) {
        VersorOdd right_dual = VersorOdd(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiCircleRotor anti_wedge = AntiCircleRotor(
            /* e41, e42, e43 */
            float3(right_dual.e1234) * this.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4((float3(right_dual.e1234) * this.group1.xyz), -(this.e415 * right_dual.e4235) - (this.e425 * right_dual.e4315) - (this.e435 * right_dual.e4125)), 
            /* e15, e25, e35, scalar */
            float4((this.e415 * right_dual.e3215) + (this.e315 * right_dual.e4125), (this.e425 * right_dual.e3215) + (this.e125 * right_dual.e4235), (this.e435 * right_dual.e3215) + (this.e235 * right_dual.e4315), -(this.e425 * right_dual.e31) - (this.e435 * right_dual.e12) - (this.e235 * right_dual.e41) - (this.e315 * right_dual.e42) - (this.e125 * right_dual.e43)) - float4((this.group1.xyz.zxy * right_dual.group3.yzx), this.e415 * right_dual.e23)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4((anti_wedge.e23 * other.e4) + (anti_wedge.scalar * other.e423), (anti_wedge.e31 * other.e4) + (anti_wedge.scalar * other.e431), (anti_wedge.e12 * other.e4) + (anti_wedge.scalar * other.e412), -(anti_wedge.e42 * other.e315) - (anti_wedge.e43 * other.e125) - (anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435) - (anti_wedge.e45 * other.e321) - (anti_wedge.e15 * other.e423) - (anti_wedge.e25 * other.e431) - (anti_wedge.e35 * other.e412)) + float4((anti_wedge.group0.xyz.yzx * other.group3.zxy), anti_wedge.scalar * other.e12345) - float4((anti_wedge.group0.xyz.zxy * other.group3.yzx), anti_wedge.e41 * other.e235), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e15 * other.e4) + (anti_wedge.scalar * other.e415), (anti_wedge.e25 * other.e4) + (anti_wedge.scalar * other.e425), (anti_wedge.e35 * other.e4) + (anti_wedge.scalar * other.e435), -(anti_wedge.e31 * other.e2) - (anti_wedge.e12 * other.e3)) + float4((anti_wedge.group0.xyz * other.group2.www), anti_wedge.scalar * other.e321) - (anti_wedge.group1.wwwx * other.group3.xyzx), 
            /* e235, e315, e125, e5 */
            float4(((float3(anti_wedge.scalar) * other.group2.xyz) + (float3(other.e5) * anti_wedge.group1.xyz) + (anti_wedge.group2.zxy * other.group3.yzx) - (anti_wedge.group2.yzx * other.group3.zxy)), anti_wedge.scalar * other.e5), 
            /* e1, e2, e3, e4 */
            float4(anti_wedge.scalar) * other.group3
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<Line> lhs, VersorOdd rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Line {
    public VersorEven anti_project_via_horizon_onto(VersorOdd other) {
        VersorEven right_dual = VersorEven(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiDipoleInversion anti_wedge = AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(float3(1.0), 0.0) * float4(this.group0.xyz, 0.0) * float4(right_dual.group0.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e235, e315, e125, e4 */
            float4((float3(right_dual.e12345) * this.group1.xyz), -(this.e415 * right_dual.e423) - (this.e425 * right_dual.e431) - (this.e435 * right_dual.e412)), 
            /* e1, e2, e3, e5 */
            float4((this.e415 * right_dual.e321) + (this.e315 * right_dual.e412), (this.e425 * right_dual.e321) + (this.e125 * right_dual.e423), (this.e435 * right_dual.e321) + (this.e235 * right_dual.e431), -(this.e425 * right_dual.e315) - (this.e435 * right_dual.e125) - (this.e235 * right_dual.e415) - (this.e315 * right_dual.e425) - (this.e125 * right_dual.e435)) - float4((this.group1.xyz.zxy * right_dual.group0.yzx), this.e415 * right_dual.e235)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            (anti_wedge.group3.zxyy * float4(other.group0.yzx, other.e4315)) + float4(float3(0.0), (anti_wedge.e3 * other.e4125) + (anti_wedge.e5 * other.e1234) - (anti_wedge.e431 * other.e25) - (anti_wedge.e412 * other.e35) - (anti_wedge.e415 * other.e23) - (anti_wedge.e425 * other.e31) - (anti_wedge.e435 * other.e12) - (anti_wedge.e321 * other.e45) - (anti_wedge.e235 * other.e41) - (anti_wedge.e315 * other.e42) - (anti_wedge.e125 * other.e43)) + float4((anti_wedge.group0.xyz * other.group0.www), anti_wedge.e4 * other.e3215) + float4((anti_wedge.group2.www * other.group1.xyz), anti_wedge.e1 * other.e4235) - float4((anti_wedge.group3.yzx * other.group0.zxy), anti_wedge.e423 * other.e15), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e4 * other.e15) + (anti_wedge.e5 * other.e41), (anti_wedge.e4 * other.e25) + (anti_wedge.e5 * other.e42), (anti_wedge.e4 * other.e35) + (anti_wedge.e5 * other.e43), -(anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12)) + (float4(other.scalar) * anti_wedge.group1) - (anti_wedge.group3.xyzx * other.group1.wwwx), 
            /* e235, e315, e125, e5 */
            float4(((float3(anti_wedge.e5) * other.group1.xyz) + (float3(other.scalar) * anti_wedge.group2.xyz) + (anti_wedge.group3.yzx * other.group2.zxy) - (anti_wedge.group3.zxy * other.group2.yzx)), anti_wedge.e5 * other.scalar), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * float4(anti_wedge.group3.xyz, anti_wedge.e4)
        );
    }
}
// Fancy infix trick (first half)
public AntiProjectViaHorizonOntoInfixPartial<Motor> operator /(Motor lhs, AntiProjectViaHorizonOntoInfix rhs) {
    return AntiProjectViaHorizonOntoInfixPartial<Motor>(lhs);
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<Motor> lhs, AntiCircleRotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Motor {
    public VersorEven anti_project_via_horizon_onto(AntiCircleRotor other) {
        CircleRotor right_dual = CircleRotor(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        VersorEven anti_wedge = VersorEven(
            /* e423, e431, e412, e12345 */
            float4(this.e12345) * float4(right_dual.group0.xyz, right_dual.e12345), 
            /* e415, e425, e435, e321 */
            float4(((float3(right_dual.e12345) * this.group0.xyz) + (float3(this.e12345) * right_dual.group1.xyz)), right_dual.e321 * this.e12345), 
            /* e235, e315, e125, e5 */
            float4(right_dual.e12345 * this.e235, right_dual.e12345 * this.e315, right_dual.e12345 * this.e125, -(right_dual.e415 * this.e235) - (right_dual.e425 * this.e315) - (right_dual.e435 * this.e125) - (right_dual.e235 * this.e415) - (right_dual.e315 * this.e425) - (right_dual.e125 * this.e435)) + (right_dual.group2 * float4(this.group0.www, this.e5)), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e412 * this.e315) + (right_dual.e321 * this.e415), (right_dual.e423 * this.e125) + (right_dual.e321 * this.e425), (right_dual.e431 * this.e235) + (right_dual.e321 * this.e435), -(right_dual.e431 * this.e425) - (right_dual.e412 * this.e435)) - float4((right_dual.group0.xyz.yzx * this.group1.zxy), right_dual.e423 * this.e415)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4((other.e23 * anti_wedge.e4) + (other.scalar * anti_wedge.e423), (other.e31 * anti_wedge.e4) + (other.scalar * anti_wedge.e431), (other.e12 * anti_wedge.e4) + (other.scalar * anti_wedge.e412), -(other.e42 * anti_wedge.e315) - (other.e43 * anti_wedge.e125) - (other.e23 * anti_wedge.e415) - (other.e31 * anti_wedge.e425) - (other.e12 * anti_wedge.e435) - (other.e45 * anti_wedge.e321) - (other.e15 * anti_wedge.e423) - (other.e25 * anti_wedge.e431) - (other.e35 * anti_wedge.e412)) + float4((other.group0.xyz.yzx * anti_wedge.group3.zxy), other.scalar * anti_wedge.e12345) - float4((other.group0.xyz.zxy * anti_wedge.group3.yzx), other.e41 * anti_wedge.e235), 
            /* e415, e425, e435, e321 */
            float4((other.e15 * anti_wedge.e4) + (other.scalar * anti_wedge.e415), (other.e25 * anti_wedge.e4) + (other.scalar * anti_wedge.e425), (other.e35 * anti_wedge.e4) + (other.scalar * anti_wedge.e435), -(other.e31 * anti_wedge.e2) - (other.e12 * anti_wedge.e3)) + float4((other.group0.xyz * anti_wedge.group2.www), other.scalar * anti_wedge.e321) - (other.group1.wwwx * anti_wedge.group3.xyzx), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.scalar) * anti_wedge.group2.xyz) + (float3(anti_wedge.e5) * other.group1.xyz) + (other.group2.zxy * anti_wedge.group3.yzx) - (other.group2.yzx * anti_wedge.group3.zxy)), other.scalar * anti_wedge.e5), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * anti_wedge.group3
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<Motor> lhs, AntiDipoleInversion rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Motor {
    public VersorEven anti_project_via_horizon_onto(AntiDipoleInversion other) {
        DipoleInversion right_dual = DipoleInversion(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        VersorOdd anti_wedge = VersorOdd(
            /* e41, e42, e43, scalar */
            float4(right_dual.e1234 * this.e415, right_dual.e1234 * this.e425, right_dual.e1234 * this.e435, -(right_dual.e41 * this.e235) - (right_dual.e42 * this.e315) - (right_dual.e43 * this.e125) - (right_dual.e23 * this.e415) - (right_dual.e31 * this.e425) - (right_dual.e12 * this.e435)) + float4((right_dual.group0.xyz * this.group0.www), right_dual.e1234 * this.e5), 
            /* e23, e31, e12, e45 */
            float4(right_dual.e1234 * this.e235, right_dual.e1234 * this.e315, right_dual.e1234 * this.e125, -(right_dual.e4235 * this.e415) - (right_dual.e4315 * this.e425) - (right_dual.e4125 * this.e435)) + (float4(this.e12345) * right_dual.group1), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_dual.e3215) * this.group0.xyz) + (float3(this.e12345) * right_dual.group2.xyz) + (right_dual.group3.zxy * this.group1.yzx) - (right_dual.group3.yzx * this.group1.zxy)), right_dual.e1234 * this.e12345), 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e12345) * right_dual.group3
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            (other.group3.zxyy * float4(anti_wedge.group0.yzx, anti_wedge.e4315)) + float4(float3(0.0), (other.e3 * anti_wedge.e4125) + (other.e5 * anti_wedge.e1234) - (other.e431 * anti_wedge.e25) - (other.e412 * anti_wedge.e35) - (other.e415 * anti_wedge.e23) - (other.e425 * anti_wedge.e31) - (other.e435 * anti_wedge.e12) - (other.e321 * anti_wedge.e45) - (other.e235 * anti_wedge.e41) - (other.e315 * anti_wedge.e42) - (other.e125 * anti_wedge.e43)) + float4((other.group0.xyz * anti_wedge.group0.www), other.e4 * anti_wedge.e3215) + float4((other.group2.www * anti_wedge.group1.xyz), other.e1 * anti_wedge.e4235) - float4((other.group3.yzx * anti_wedge.group0.zxy), other.e423 * anti_wedge.e15), 
            /* e415, e425, e435, e321 */
            float4((other.e4 * anti_wedge.e15) + (other.e5 * anti_wedge.e41), (other.e4 * anti_wedge.e25) + (other.e5 * anti_wedge.e42), (other.e4 * anti_wedge.e35) + (other.e5 * anti_wedge.e43), -(other.e2 * anti_wedge.e31) - (other.e3 * anti_wedge.e12)) + (float4(anti_wedge.scalar) * other.group1) - (other.group3.xyzx * anti_wedge.group1.wwwx), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.e5) * anti_wedge.group1.xyz) + (float3(anti_wedge.scalar) * other.group2.xyz) + (other.group3.yzx * anti_wedge.group2.zxy) - (other.group3.zxy * anti_wedge.group2.yzx)), other.e5 * anti_wedge.scalar), 
            /* e1, e2, e3, e4 */
            float4(anti_wedge.scalar) * float4(other.group3.xyz, other.e4)
        );
    }
}
// Fancy infix trick (second half)
public Motor operator /(AntiProjectViaHorizonOntoInfixPartial<Motor> lhs, AntiDualNum rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Motor {
    public Motor anti_project_via_horizon_onto(AntiDualNum other) {
        DualNum right_dual = DualNum(
            /* e5, e12345 */
            other.group0.xy
        );
        Motor anti_wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4(right_dual.e12345) * this.group0, 
            /* e235, e315, e125, e5 */
            float4(right_dual.group0.xy.yy, right_dual.e12345, (right_dual.e5 * this.e12345) + (right_dual.e12345 * this.e5)) * float4(this.group1.xyz, 1.0)
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4(other.scalar) * anti_wedge.group0, 
            /* e235, e315, e125, e5 */
            float4(other.scalar) * anti_wedge.group1
        );
    }
}
// Fancy infix trick (second half)
public AntiScalar operator /(AntiProjectViaHorizonOntoInfixPartial<Motor> lhs, AntiFlatPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Motor {
    public AntiScalar anti_project_via_horizon_onto(AntiFlatPoint other) {
        return AntiScalar(
            /* e12345 */
            pow(other.e321, 2) * this.e12345
        );
    }
}
// Fancy infix trick (second half)
public Motor operator /(AntiProjectViaHorizonOntoInfixPartial<Motor> lhs, AntiFlector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Motor {
    public Motor anti_project_via_horizon_onto(AntiFlector other) {
        Flector right_dual = Flector(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        Flector anti_wedge = Flector(
            /* e15, e25, e35, e45 */
            float4((right_dual.e4125 * this.e315) + (right_dual.e3215 * this.e415), (right_dual.e4235 * this.e125) + (right_dual.e3215 * this.e425), (right_dual.e4315 * this.e235) + (right_dual.e3215 * this.e435), -(right_dual.e4315 * this.e425) - (right_dual.e4125 * this.e435)) + (float4(this.e12345) * right_dual.group0) - (right_dual.group1.yzxx * float4(this.group1.zxy, this.e415)), 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e12345) * right_dual.group1
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4((float3(anti_wedge.e45) * other.group1.xyz * float3(-1.0)), (other.e1 * anti_wedge.e4235) + (other.e2 * anti_wedge.e4315) + (other.e3 * anti_wedge.e4125) - (other.e321 * anti_wedge.e45)), 
            /* e235, e315, e125, e5 */
            float4(((other.group1.yzx * anti_wedge.group0.zxy) - (other.group1.zxy * anti_wedge.group0.yzx)), 0.0)
        );
    }
}
// Fancy infix trick (second half)
public Motor operator /(AntiProjectViaHorizonOntoInfixPartial<Motor> lhs, AntiLine rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Motor {
    public Motor anti_project_via_horizon_onto(AntiLine other) {
        Line right_dual = Line(
            /* e415, e425, e435 */
            other.group0.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group1.xyz * float3(-1.0)
        );
        Motor anti_wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4(float3(1.0), 0.0) * float4(right_dual.group0.xyz, 0.0) * float4(this.group0.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e235, e315, e125, e5 */
            float4((float3(this.e12345) * right_dual.group1.xyz), -(right_dual.e415 * this.e235) - (right_dual.e425 * this.e315) - (right_dual.e435 * this.e125) - (right_dual.e235 * this.e415) - (right_dual.e315 * this.e425) - (right_dual.e125 * this.e435))
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4(float3(0.0), -(other.e23 * anti_wedge.e415) - (other.e31 * anti_wedge.e425) - (other.e12 * anti_wedge.e435)), 
            /* e235, e315, e125, e5 */
            float4(float3(1.0), 0.0) * float4(other.group0.xyz, 0.0) * float4(anti_wedge.group1.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
    }
}
// Fancy infix trick (second half)
public Motor operator /(AntiProjectViaHorizonOntoInfixPartial<Motor> lhs, AntiMotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Motor {
    public Motor anti_project_via_horizon_onto(AntiMotor other) {
        Motor right_dual = Motor(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        Motor anti_wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4(((float3(right_dual.e12345) * this.group0.xyz) + (float3(this.e12345) * right_dual.group0.xyz)), right_dual.e12345 * this.e12345), 
            /* e235, e315, e125, e5 */
            (float4(right_dual.e12345) * this.group1) + (float4(this.e12345) * right_dual.group1) + float4(float3(0.0), -(right_dual.e415 * this.e235) - (right_dual.e425 * this.e315) - (right_dual.e435 * this.e125) - (right_dual.e235 * this.e415) - (right_dual.e315 * this.e425) - (right_dual.e125 * this.e435))
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4((other.group0.www * anti_wedge.group0.xyz), (other.scalar * anti_wedge.e12345) - (other.e23 * anti_wedge.e415) - (other.e31 * anti_wedge.e425) - (other.e12 * anti_wedge.e435)), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.scalar) * anti_wedge.group1.xyz) + (float3(anti_wedge.e5) * other.group0.xyz)), other.scalar * anti_wedge.e5)
        );
    }
}
// Fancy infix trick (second half)
public Motor operator /(AntiProjectViaHorizonOntoInfixPartial<Motor> lhs, AntiPlane rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Motor {
    public Motor anti_project_via_horizon_onto(AntiPlane other) {
        Plane right_dual = Plane(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        Flector anti_wedge = Flector(
            /* e15, e25, e35, e45 */
            float4((this.e415 * right_dual.e3215) + (this.e315 * right_dual.e4125), (this.e425 * right_dual.e3215) + (this.e125 * right_dual.e4235), (this.e435 * right_dual.e3215) + (this.e235 * right_dual.e4315), -(this.e425 * right_dual.e4315) - (this.e435 * right_dual.e4125)) - (right_dual.group0.yzxx * float4(this.group1.zxy, this.e415)), 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e12345) * right_dual.group0
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4((float3(anti_wedge.e45) * other.group0.xyz * float3(-1.0)), (other.e1 * anti_wedge.e4235) + (other.e2 * anti_wedge.e4315) + (other.e3 * anti_wedge.e4125)), 
            /* e235, e315, e125, e5 */
            float4(((other.group0.yzx * anti_wedge.group0.zxy) - (other.group0.zxy * anti_wedge.group0.yzx)), 0.0)
        );
    }
}
// Fancy infix trick (second half)
public AntiScalar operator /(AntiProjectViaHorizonOntoInfixPartial<Motor> lhs, AntiScalar rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Motor {
    public AntiScalar anti_project_via_horizon_onto(AntiScalar other) {
        return AntiScalar(
            /* e12345 */
            pow(other.e12345, 2) * this.e12345 * -1.0
        );
    }
}
// Fancy infix trick (second half)
public CircleRotor operator /(AntiProjectViaHorizonOntoInfixPartial<Motor> lhs, Circle rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Motor {
    public CircleRotor anti_project_via_horizon_onto(Circle other) {
        Dipole right_dual = Dipole(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35 */
            other.group2.xyz
        );
        AntiCircleRotor anti_wedge = AntiCircleRotor(
            /* e41, e42, e43 */
            float3(this.e12345) * right_dual.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(this.e12345) * right_dual.group1, 
            /* e15, e25, e35, scalar */
            float4((float3(this.e12345) * right_dual.group2.xyz), -(right_dual.e41 * this.e235) - (right_dual.e42 * this.e315) - (right_dual.e43 * this.e125) - (right_dual.e23 * this.e415) - (right_dual.e31 * this.e425) - (right_dual.e12 * this.e435))
        );
        return CircleRotor(
            /* e423, e431, e412 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(anti_wedge.scalar) * other.group1, 
            /* e235, e315, e125, e12345 */
            float4((float3(anti_wedge.scalar) * other.group2.xyz), -(anti_wedge.e41 * other.e235) - (anti_wedge.e42 * other.e315) - (anti_wedge.e43 * other.e125) - (anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435) - (anti_wedge.e45 * other.e321) - (anti_wedge.e15 * other.e423) - (anti_wedge.e25 * other.e431) - (anti_wedge.e35 * other.e412))
        );
    }
}
// Fancy infix trick (second half)
public CircleRotor operator /(AntiProjectViaHorizonOntoInfixPartial<Motor> lhs, CircleRotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Motor {
    public CircleRotor anti_project_via_horizon_onto(CircleRotor other) {
        AntiCircleRotor right_dual = AntiCircleRotor(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiCircleRotor anti_wedge = AntiCircleRotor(
            /* e41, e42, e43 */
            float3(this.e12345) * right_dual.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(this.e12345) * right_dual.group1, 
            /* e15, e25, e35, scalar */
            float4((float3(this.e12345) * right_dual.group2.xyz), (right_dual.scalar * this.e12345) - (right_dual.e41 * this.e235) - (right_dual.e42 * this.e315) - (right_dual.e43 * this.e125) - (right_dual.e23 * this.e415) - (right_dual.e31 * this.e425) - (right_dual.e12 * this.e435))
        );
        return CircleRotor(
            /* e423, e431, e412 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(anti_wedge.scalar) * other.group1, 
            /* e235, e315, e125, e12345 */
            float4((anti_wedge.group2.www * other.group2.xyz), (anti_wedge.scalar * other.e12345) - (anti_wedge.e41 * other.e235) - (anti_wedge.e42 * other.e315) - (anti_wedge.e43 * other.e125) - (anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435) - (anti_wedge.e45 * other.e321) - (anti_wedge.e15 * other.e423) - (anti_wedge.e25 * other.e431) - (anti_wedge.e35 * other.e412))
        );
    }
}
// Fancy infix trick (second half)
public CircleRotor operator /(AntiProjectViaHorizonOntoInfixPartial<Motor> lhs, Dipole rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Motor {
    public CircleRotor anti_project_via_horizon_onto(Dipole other) {
        Circle right_dual = Circle(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125 */
            other.group2.xyz * float3(-1.0)
        );
        AntiDipoleInversion anti_wedge = AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(this.e12345) * right_dual.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(this.e12345) * right_dual.group1, 
            /* e235, e315, e125, e4 */
            float4((float3(this.e12345) * right_dual.group2.xyz), -(right_dual.e423 * this.e415) - (right_dual.e431 * this.e425) - (right_dual.e412 * this.e435)), 
            /* e1, e2, e3, e5 */
            float4((right_dual.e412 * this.e315) + (right_dual.e321 * this.e415), (right_dual.e423 * this.e125) + (right_dual.e321 * this.e425), (right_dual.e431 * this.e235) + (right_dual.e321 * this.e435), -(right_dual.e415 * this.e235) - (right_dual.e425 * this.e315) - (right_dual.e435 * this.e125) - (right_dual.e315 * this.e425) - (right_dual.e125 * this.e435)) - float4((right_dual.group0.xyz.yzx * this.group1.zxy), right_dual.e235 * this.e415)
        );
        return CircleRotor(
            /* e423, e431, e412 */
            (float3(anti_wedge.e4) * other.group1.xyz) + (other.group0.xyz.yzx * anti_wedge.group3.zxy) - (other.group0.xyz.zxy * anti_wedge.group3.yzx), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e4 * other.e15) + (anti_wedge.e5 * other.e41), (anti_wedge.e4 * other.e25) + (anti_wedge.e5 * other.e42), (anti_wedge.e4 * other.e35) + (anti_wedge.e5 * other.e43), -(anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12)) - (anti_wedge.group3.xyzx * other.group1.wwwx), 
            /* e235, e315, e125, e12345 */
            float4((anti_wedge.e2 * other.e35) + (anti_wedge.e5 * other.e23), (anti_wedge.e3 * other.e15) + (anti_wedge.e5 * other.e31), (anti_wedge.e1 * other.e25) + (anti_wedge.e5 * other.e12), -(anti_wedge.e431 * other.e25) - (anti_wedge.e412 * other.e35) - (anti_wedge.e415 * other.e23) - (anti_wedge.e425 * other.e31) - (anti_wedge.e435 * other.e12) - (anti_wedge.e321 * other.e45) - (anti_wedge.e235 * other.e41) - (anti_wedge.e315 * other.e42) - (anti_wedge.e125 * other.e43)) - float4((other.group2.xyz.yzx * anti_wedge.group3.zxy), anti_wedge.e423 * other.e15)
        );
    }
}
// Fancy infix trick (second half)
public CircleRotor operator /(AntiProjectViaHorizonOntoInfixPartial<Motor> lhs, DipoleInversion rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Motor {
    public CircleRotor anti_project_via_horizon_onto(DipoleInversion other) {
        AntiDipoleInversion right_dual = AntiDipoleInversion(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiDipoleInversion anti_wedge = AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(this.e12345) * right_dual.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(this.e12345) * right_dual.group1, 
            /* e235, e315, e125, e4 */
            float4((float3(this.e12345) * right_dual.group2.xyz), (right_dual.e4 * this.e12345) - (right_dual.e423 * this.e415) - (right_dual.e431 * this.e425) - (right_dual.e412 * this.e435)), 
            /* e1, e2, e3, e5 */
            float4((right_dual.e321 * this.e415) + (right_dual.e1 * this.e12345), (right_dual.e321 * this.e425) + (right_dual.e2 * this.e12345), (right_dual.e321 * this.e435) + (right_dual.e3 * this.e12345), -(right_dual.e425 * this.e315) - (right_dual.e435 * this.e125) - (right_dual.e235 * this.e415) - (right_dual.e315 * this.e425) - (right_dual.e125 * this.e435)) + float4((right_dual.group0.xyz.zxy * this.group1.yzx), right_dual.e5 * this.e12345) - (this.group1.zxyx * float4(right_dual.group0.xyz.yzx, right_dual.e415))
        );
        return CircleRotor(
            /* e423, e431, e412 */
            (float3(anti_wedge.e4) * other.group1.xyz) + (other.group0.xyz.yzx * anti_wedge.group3.zxy) - (other.group0.xyz.zxy * anti_wedge.group3.yzx), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e4 * other.e15) + (anti_wedge.e5 * other.e41), (anti_wedge.e4 * other.e25) + (anti_wedge.e5 * other.e42), (anti_wedge.e4 * other.e35) + (anti_wedge.e5 * other.e43), -(anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12)) - (anti_wedge.group3.xyzx * other.group1.wwwx), 
            /* e235, e315, e125, e12345 */
            (anti_wedge.group3.wwwx * float4(other.group1.xyz, other.e4235)) + float4(float3(0.0), (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) + (anti_wedge.e5 * other.e1234) - (anti_wedge.e431 * other.e25) - (anti_wedge.e412 * other.e35) - (anti_wedge.e415 * other.e23) - (anti_wedge.e425 * other.e31) - (anti_wedge.e435 * other.e12) - (anti_wedge.e321 * other.e45) - (anti_wedge.e235 * other.e41) - (anti_wedge.e315 * other.e42) - (anti_wedge.e125 * other.e43)) + float4((anti_wedge.group3.yzx * other.group2.zxy), anti_wedge.e4 * other.e3215) - (other.group2.yzxx * float4(anti_wedge.group3.zxy, anti_wedge.e423))
        );
    }
}
// Fancy infix trick (second half)
public Motor operator /(AntiProjectViaHorizonOntoInfixPartial<Motor> lhs, DualNum rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Motor {
    public Motor anti_project_via_horizon_onto(DualNum other) {
        AntiDualNum right_dual = AntiDualNum(
            /* e3215, scalar */
            other.group0.xy * float2(-1.0)
        );
        AntiMotor anti_wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4(float3(0.0), right_dual.scalar * this.e12345), 
            /* e15, e25, e35, e3215 */
            float4(right_dual.e3215) * this.group0
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4(float3(0.0), anti_wedge.scalar * other.e12345), 
            /* e235, e315, e125, e5 */
            float4(other.e5) * anti_wedge.group0
        );
    }
}
// Fancy infix trick (second half)
public Motor operator /(AntiProjectViaHorizonOntoInfixPartial<Motor> lhs, FlatPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Motor {
    public Motor anti_project_via_horizon_onto(FlatPoint other) {
        AntiFlatPoint right_dual = AntiFlatPoint(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiFlector anti_wedge = AntiFlector(
            /* e235, e315, e125, e321 */
            float4(this.e12345) * right_dual.group0, 
            /* e1, e2, e3, e5 */
            float4((right_dual.group0.www * this.group0.xyz), -(right_dual.e235 * this.e415) - (right_dual.e315 * this.e425) - (right_dual.e125 * this.e435))
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4(other.e45) * float4(anti_wedge.group1.xyz, anti_wedge.e321) * float4(-1.0), 
            /* e235, e315, e125, e5 */
            float4(((anti_wedge.group1.yzx * other.group0.zxy) - (anti_wedge.group1.zxy * other.group0.yzx)), 0.0)
        );
    }
}
// Fancy infix trick (second half)
public Motor operator /(AntiProjectViaHorizonOntoInfixPartial<Motor> lhs, Flector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Motor {
    public Motor anti_project_via_horizon_onto(Flector other) {
        AntiFlector right_dual = AntiFlector(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiFlector anti_wedge = AntiFlector(
            /* e235, e315, e125, e321 */
            float4(this.e12345) * right_dual.group0, 
            /* e1, e2, e3, e5 */
            float4(right_dual.e1 * this.e12345, right_dual.e2 * this.e12345, right_dual.e3 * this.e12345, -(right_dual.e235 * this.e415) - (right_dual.e315 * this.e425) - (right_dual.e125 * this.e435)) + (this.group0 * float4(right_dual.group0.www, right_dual.e5))
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4((float3(other.e45) * anti_wedge.group1.xyz * float3(-1.0)), (anti_wedge.e1 * other.e4235) + (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) - (anti_wedge.e321 * other.e45)), 
            /* e235, e315, e125, e5 */
            float4(((anti_wedge.group1.yzx * other.group0.zxy) - (anti_wedge.group1.zxy * other.group0.yzx)), 0.0)
        );
    }
}
// Fancy infix trick (second half)
public Motor operator /(AntiProjectViaHorizonOntoInfixPartial<Motor> lhs, Line rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Motor {
    public Motor anti_project_via_horizon_onto(Line other) {
        AntiLine right_dual = AntiLine(
            /* e23, e31, e12 */
            other.group0.xyz, 
            /* e15, e25, e35 */
            other.group1.xyz
        );
        AntiMotor anti_wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4((float3(this.e12345) * right_dual.group0.xyz), -(right_dual.e23 * this.e415) - (right_dual.e31 * this.e425) - (right_dual.e12 * this.e435)), 
            /* e15, e25, e35, e3215 */
            float4(float3(1.0), 0.0) * float4(right_dual.group1.xyz, 0.0) * float4(this.group0.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4((float3(anti_wedge.scalar) * other.group0.xyz), -(anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435)), 
            /* e235, e315, e125, e5 */
            float4(float3(1.0), 0.0) * float4(other.group1.xyz, 0.0) * float4(anti_wedge.group0.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
    }
}
// Fancy infix trick (second half)
public Motor operator /(AntiProjectViaHorizonOntoInfixPartial<Motor> lhs, Motor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Motor {
    public Motor anti_project_via_horizon_onto(Motor other) {
        AntiMotor right_dual = AntiMotor(
            /* e23, e31, e12, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiMotor anti_wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4((float3(this.e12345) * right_dual.group0.xyz), (right_dual.scalar * this.e12345) - (right_dual.e23 * this.e415) - (right_dual.e31 * this.e425) - (right_dual.e12 * this.e435)), 
            /* e15, e25, e35, e3215 */
            float4(((float3(right_dual.e3215) * this.group0.xyz) + (float3(this.e12345) * right_dual.group1.xyz)), right_dual.e3215 * this.e12345)
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4((anti_wedge.group0.www * other.group0.xyz), (anti_wedge.scalar * other.e12345) - (anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435)), 
            /* e235, e315, e125, e5 */
            float4(((float3(anti_wedge.scalar) * other.group1.xyz) + (float3(other.e5) * anti_wedge.group0.xyz)), anti_wedge.scalar * other.e5)
        );
    }
}
// Fancy infix trick (second half)
public MultiVector operator /(AntiProjectViaHorizonOntoInfixPartial<Motor> lhs, MultiVector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Motor {
    public MultiVector anti_project_via_horizon_onto(MultiVector other) {
        MultiVector right_dual = MultiVector(
            /* scalar, e12345 */
            other.group0.xy.yx * float2(-1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215, 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43 */
            other.group7.xyz, 
            /* e23, e31, e12 */
            other.group6.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412 */
            other.group4.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group3.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        MultiVector anti_wedge = MultiVector(
            /* scalar, e12345 */
            float2((this.e12345 * right_dual.scalar) + (this.e5 * right_dual.e1234) - (this.e415 * right_dual.e23) - (this.e425 * right_dual.e31) - (this.e435 * right_dual.e12) - (this.e235 * right_dual.e41) - (this.e315 * right_dual.e42) - (this.e125 * right_dual.e43), this.e12345 * right_dual.e12345), 
            /* e1, e2, e3, e4 */
            float4((this.e415 * right_dual.e321) + (this.e12345 * right_dual.e1), (this.e425 * right_dual.e321) + (this.e12345 * right_dual.e2), (this.e435 * right_dual.e321) + (this.e12345 * right_dual.e3), -(this.e425 * right_dual.e431) - (this.e435 * right_dual.e412)) + float4((right_dual.group7.xyz.zxy * this.group1.yzx), this.e12345 * right_dual.e4) - float4((right_dual.group7.xyz.yzx * this.group1.zxy), this.e415 * right_dual.e423), 
            /* e5 */
            (this.e12345 * right_dual.e5) + (this.e5 * right_dual.e12345) - (this.e415 * right_dual.e235) - (this.e425 * right_dual.e315) - (this.e435 * right_dual.e125) - (this.e235 * right_dual.e415) - (this.e315 * right_dual.e425) - (this.e125 * right_dual.e435), 
            /* e15, e25, e35, e45 */
            float4((this.e12345 * right_dual.e15) + (this.e315 * right_dual.e4125), (this.e12345 * right_dual.e25) + (this.e125 * right_dual.e4235), (this.e12345 * right_dual.e35) + (this.e235 * right_dual.e4315), -(this.e425 * right_dual.e4315) - (this.e435 * right_dual.e4125)) + (this.group0 * float4(right_dual.group9.www, right_dual.e45)) - (right_dual.group9.yzxx * float4(this.group1.zxy, this.e415)), 
            /* e41, e42, e43 */
            (float3(this.e12345) * right_dual.group4.xyz) + (float3(right_dual.e1234) * this.group0.xyz), 
            /* e23, e31, e12 */
            (float3(this.e12345) * right_dual.group5.xyz) + (float3(right_dual.e1234) * this.group1.xyz), 
            /* e415, e425, e435, e321 */
            float4(((float3(this.e12345) * right_dual.group6.xyz) + (float3(right_dual.e12345) * this.group0.xyz)), this.e12345 * right_dual.e321), 
            /* e423, e431, e412 */
            float3(this.e12345) * right_dual.group7.xyz, 
            /* e235, e315, e125 */
            (float3(this.e12345) * right_dual.group8.xyz) + (float3(right_dual.e12345) * this.group1.xyz), 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e12345) * right_dual.group9, 
            /* e1234 */
            this.e12345 * right_dual.e1234
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(anti_wedge.scalar * other.scalar, (anti_wedge.scalar * other.e12345) + (anti_wedge.e12345 * other.scalar) + (anti_wedge.e1 * other.e4235) + (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) + (anti_wedge.e4 * other.e3215) + (anti_wedge.e5 * other.e1234) + (anti_wedge.e4235 * other.e1) + (anti_wedge.e4315 * other.e2) + (anti_wedge.e4125 * other.e3) + (anti_wedge.e3215 * other.e4) + (anti_wedge.e1234 * other.e5) - (anti_wedge.e15 * other.e423) - (anti_wedge.e25 * other.e431) - (anti_wedge.e35 * other.e412) - (anti_wedge.e45 * other.e321) - (anti_wedge.e41 * other.e235) - (anti_wedge.e42 * other.e315) - (anti_wedge.e43 * other.e125) - (anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435) - (anti_wedge.e415 * other.e23) - (anti_wedge.e425 * other.e31) - (anti_wedge.e435 * other.e12) - (anti_wedge.e321 * other.e45) - (anti_wedge.e423 * other.e15) - (anti_wedge.e431 * other.e25) - (anti_wedge.e412 * other.e35) - (anti_wedge.e235 * other.e41) - (anti_wedge.e315 * other.e42) - (anti_wedge.e125 * other.e43)), 
            /* e1, e2, e3, e4 */
            (float4(anti_wedge.scalar) * other.group1) + (float4(other.scalar) * anti_wedge.group1), 
            /* e5 */
            (anti_wedge.scalar * other.e5) + (anti_wedge.e5 * other.scalar), 
            /* e15, e25, e35, e45 */
            (float4(anti_wedge.scalar) * other.group3) + (float4(anti_wedge.e5) * other.group1) + (float4(other.scalar) * anti_wedge.group3) - (float4(other.e5) * anti_wedge.group1), 
            /* e41, e42, e43 */
            (float3(anti_wedge.scalar) * other.group4.xyz) + (float3(other.scalar) * anti_wedge.group4.xyz) + (float3(other.e4) * anti_wedge.group1.xyz) - (float3(anti_wedge.e4) * other.group1.xyz), 
            /* e23, e31, e12 */
            (float3(anti_wedge.scalar) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group5.xyz) + (anti_wedge.group1.zxy * other.group1.yzx) - (anti_wedge.group1.yzx * other.group1.zxy), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e4 * other.e15) + (anti_wedge.e5 * other.e41) + (anti_wedge.e15 * other.e4) + (anti_wedge.e41 * other.e5), (anti_wedge.e4 * other.e25) + (anti_wedge.e5 * other.e42) + (anti_wedge.e25 * other.e4) + (anti_wedge.e42 * other.e5), (anti_wedge.e4 * other.e35) + (anti_wedge.e5 * other.e43) + (anti_wedge.e35 * other.e4) + (anti_wedge.e43 * other.e5), -(anti_wedge.e1 * other.e23) - (anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12) - (anti_wedge.e12 * other.e3)) + (float4(anti_wedge.scalar) * other.group6) + (float4(other.scalar) * anti_wedge.group6) - (other.group1.xyzy * float4(anti_wedge.group3.www, anti_wedge.e31)) - float4((other.group3.www * anti_wedge.group1.xyz), anti_wedge.e23 * other.e1), 
            /* e423, e431, e412 */
            (float3(anti_wedge.scalar) * other.group7.xyz) + (float3(anti_wedge.e4) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group7.xyz) + (float3(other.e4) * anti_wedge.group5.xyz) + (anti_wedge.group4.xyz.yzx * other.group1.zxy) + (other.group4.xyz.yzx * anti_wedge.group1.zxy) - (anti_wedge.group4.xyz.zxy * other.group1.yzx) - (other.group4.xyz.zxy * anti_wedge.group1.yzx), 
            /* e235, e315, e125 */
            (float3(anti_wedge.scalar) * other.group8.xyz) + (float3(anti_wedge.e5) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group8.xyz) + (float3(other.e5) * anti_wedge.group5.xyz) + (anti_wedge.group1.yzx * other.group3.zxy) + (anti_wedge.group3.zxy * other.group1.yzx) - (anti_wedge.group1.zxy * other.group3.yzx) - (anti_wedge.group3.yzx * other.group1.zxy), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e2 * other.e435) + (anti_wedge.e5 * other.e423) + (anti_wedge.e45 * other.e23) + (anti_wedge.e425 * other.e3), (anti_wedge.e3 * other.e415) + (anti_wedge.e5 * other.e431) + (anti_wedge.e45 * other.e31) + (anti_wedge.e435 * other.e1), (anti_wedge.e1 * other.e425) + (anti_wedge.e5 * other.e412) + (anti_wedge.e45 * other.e12) + (anti_wedge.e415 * other.e2), -(anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12) - (anti_wedge.e321 * other.e5)) + (float4(anti_wedge.scalar) * other.group9) + (float4(other.scalar) * anti_wedge.group9) + float4((anti_wedge.group5.xyz * other.group3.www), anti_wedge.e2 * other.e315) + float4((anti_wedge.group8.xyz * other.group1.www), anti_wedge.e3 * other.e125) + float4((anti_wedge.group4.xyz.yzx * other.group3.zxy), anti_wedge.e1 * other.e235) + float4((other.group4.xyz.yzx * anti_wedge.group3.zxy), anti_wedge.e5 * other.e321) - (other.group1.yzxz * float4(anti_wedge.group6.zxy, anti_wedge.e125)) - (other.group3.yzxx * float4(anti_wedge.group4.xyz.zxy, anti_wedge.e23)) - float4((float3(other.e5) * anti_wedge.group7.xyz), anti_wedge.e31 * other.e25) - float4((other.group8.xyz * anti_wedge.group1.www), anti_wedge.e235 * other.e1) - float4((other.group4.xyz.zxy * anti_wedge.group3.yzx), anti_wedge.e12 * other.e35) - float4((anti_wedge.group1.zxy * other.group6.yzx), anti_wedge.e315 * other.e2), 
            /* e1234 */
            (anti_wedge.scalar * other.e1234) + (anti_wedge.e321 * other.e4) + (anti_wedge.e423 * other.e1) + (anti_wedge.e431 * other.e2) + (anti_wedge.e412 * other.e3) + (anti_wedge.e1234 * other.scalar) - (anti_wedge.e1 * other.e423) - (anti_wedge.e2 * other.e431) - (anti_wedge.e3 * other.e412) - (anti_wedge.e4 * other.e321) - (anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12) - (anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)
        );
    }
}
// Fancy infix trick (second half)
public AntiScalar operator /(AntiProjectViaHorizonOntoInfixPartial<Motor> lhs, Plane rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Motor {
    public AntiScalar anti_project_via_horizon_onto(Plane other) {
        AntiPlane anti_wedge = AntiPlane(
            /* e1, e2, e3, e5 */
            float4(this.e12345) * float4(other.e4235 * -1.0, other.e4315 * -1.0, other.e4125 * -1.0, other.e3215)
        );
        return AntiScalar(
            /* e12345 */
            (anti_wedge.e1 * other.e4235) + (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125)
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<Motor> lhs, RoundPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Motor {
    public VersorEven anti_project_via_horizon_onto(RoundPoint other) {
        Sphere right_dual = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        VersorOdd anti_wedge = VersorOdd(
            /* e41, e42, e43, scalar */
            float4(right_dual.e1234) * float4(this.group0.xyz, this.e5), 
            /* e23, e31, e12, e45 */
            float4((float3(right_dual.e1234) * this.group1.xyz), -(this.e415 * right_dual.e4235) - (this.e425 * right_dual.e4315) - (this.e435 * right_dual.e4125)), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_dual.e3215) * this.group0.xyz) + (this.group1.yzx * right_dual.group0.zxy) - (this.group1.zxy * right_dual.group0.yzx)), this.e12345 * right_dual.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e12345) * right_dual.group0
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(other.e2 * anti_wedge.e43 * -1.0, other.e3 * anti_wedge.e41 * -1.0, other.e1 * anti_wedge.e42 * -1.0, (other.e3 * anti_wedge.e4125) + (other.e4 * anti_wedge.e3215) + (other.e5 * anti_wedge.e1234)) + (other.group0.zxyx * float4(anti_wedge.group0.yzx, anti_wedge.e4235)) + (other.group0.wwwy * float4(anti_wedge.group1.xyz, anti_wedge.e4315)), 
            /* e415, e425, e435, e321 */
            float4((other.e4 * anti_wedge.e15) + (other.e5 * anti_wedge.e41), (other.e4 * anti_wedge.e25) + (other.e5 * anti_wedge.e42), (other.e4 * anti_wedge.e35) + (other.e5 * anti_wedge.e43), -(other.e2 * anti_wedge.e31) - (other.e3 * anti_wedge.e12)) - (other.group0.xyzx * anti_wedge.group1.wwwx), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.e5) * anti_wedge.group1.xyz) + (other.group0.yzx * anti_wedge.group2.zxy) - (other.group0.zxy * anti_wedge.group2.yzx)), other.e5 * anti_wedge.scalar), 
            /* e1, e2, e3, e4 */
            float4(anti_wedge.scalar) * other.group0
        );
    }
}
// Fancy infix trick (second half)
public Motor operator /(AntiProjectViaHorizonOntoInfixPartial<Motor> lhs, Scalar rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Motor {
    public Motor anti_project_via_horizon_onto(Scalar other) {
        AntiScalar right_dual = AntiScalar(
            /* e12345 */
            other.scalar
        );
        Motor anti_wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4(right_dual.e12345) * this.group0, 
            /* e235, e315, e125, e5 */
            float4(right_dual.e12345) * this.group1
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4(other.scalar) * anti_wedge.group0, 
            /* e235, e315, e125, e5 */
            float4(other.scalar) * anti_wedge.group1
        );
    }
}
// Fancy infix trick (second half)
public AntiScalar operator /(AntiProjectViaHorizonOntoInfixPartial<Motor> lhs, Sphere rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Motor {
    public AntiScalar anti_project_via_horizon_onto(Sphere other) {
        RoundPoint right_dual = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(other.group0.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215
        );
        RoundPoint anti_wedge = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(this.e12345) * right_dual.group0, 
            /* e5 */
            this.e12345 * right_dual.e5
        );
        return AntiScalar(
            /* e12345 */
            (anti_wedge.e1 * other.e4235) + (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) + (anti_wedge.e4 * other.e3215) + (anti_wedge.e5 * other.e1234)
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<Motor> lhs, VersorEven rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Motor {
    public VersorEven anti_project_via_horizon_onto(VersorEven other) {
        VersorOdd right_dual = VersorOdd(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        VersorOdd anti_wedge = VersorOdd(
            /* e41, e42, e43, scalar */
            (this.group0 * float4(right_dual.group2.www, right_dual.scalar)) + float4(float3(0.0), -(this.e415 * right_dual.e23) - (this.e425 * right_dual.e31) - (this.e435 * right_dual.e12) - (this.e235 * right_dual.e41) - (this.e315 * right_dual.e42) - (this.e125 * right_dual.e43)) + float4((this.group0.www * right_dual.group0.xyz), this.e5 * right_dual.e1234), 
            /* e23, e31, e12, e45 */
            float4(this.e235 * right_dual.e1234, this.e315 * right_dual.e1234, this.e125 * right_dual.e1234, -(this.e415 * right_dual.e4235) - (this.e425 * right_dual.e4315) - (this.e435 * right_dual.e4125)) + (float4(this.e12345) * right_dual.group1), 
            /* e15, e25, e35, e1234 */
            float4(((float3(this.e12345) * right_dual.group2.xyz) + (float3(right_dual.e3215) * this.group0.xyz) + (this.group1.yzx * right_dual.group3.zxy) - (this.group1.zxy * right_dual.group3.yzx)), this.e12345 * right_dual.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e12345) * right_dual.group3
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            (float4(anti_wedge.scalar) * other.group0) + (other.group3.wwwx * float4(anti_wedge.group1.xyz, anti_wedge.e4235)) + float4(float3(0.0), (other.e2 * anti_wedge.e4315) + (other.e3 * anti_wedge.e4125) + (other.e4 * anti_wedge.e3215) - (other.e431 * anti_wedge.e25) - (other.e412 * anti_wedge.e35) - (other.e415 * anti_wedge.e23) - (other.e425 * anti_wedge.e31) - (other.e435 * anti_wedge.e12) - (other.e321 * anti_wedge.e45) - (other.e235 * anti_wedge.e41) - (other.e315 * anti_wedge.e42) - (other.e125 * anti_wedge.e43)) + float4((other.group3.zxy * anti_wedge.group0.yzx), other.e5 * anti_wedge.e1234) - float4((other.group3.yzx * anti_wedge.group0.zxy), other.e423 * anti_wedge.e15), 
            /* e415, e425, e435, e321 */
            float4((other.e5 * anti_wedge.e41) + (other.e4 * anti_wedge.e15), (other.e5 * anti_wedge.e42) + (other.e4 * anti_wedge.e25), (other.e5 * anti_wedge.e43) + (other.e4 * anti_wedge.e35), -(other.e2 * anti_wedge.e31) - (other.e3 * anti_wedge.e12)) + (float4(anti_wedge.scalar) * other.group1) - (other.group3.xyzx * anti_wedge.group1.wwwx), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.e5) * anti_wedge.group1.xyz) + (float3(anti_wedge.scalar) * other.group2.xyz) + (other.group3.yzx * anti_wedge.group2.zxy) - (other.group3.zxy * anti_wedge.group2.yzx)), other.e5 * anti_wedge.scalar), 
            /* e1, e2, e3, e4 */
            float4(anti_wedge.scalar) * other.group3
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<Motor> lhs, VersorOdd rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Motor {
    public VersorEven anti_project_via_horizon_onto(VersorOdd other) {
        VersorEven right_dual = VersorEven(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        VersorEven anti_wedge = VersorEven(
            /* e423, e431, e412, e12345 */
            float4(this.e12345) * right_dual.group0, 
            /* e415, e425, e435, e321 */
            float4(((float3(this.e12345) * right_dual.group1.xyz) + (float3(right_dual.e12345) * this.group0.xyz)), this.e12345 * right_dual.e321), 
            /* e235, e315, e125, e5 */
            (float4(this.e12345) * right_dual.group2) + (float4(right_dual.e12345) * this.group1) + float4(float3(0.0), -(this.e415 * right_dual.e235) - (this.e425 * right_dual.e315) - (this.e435 * right_dual.e125) - (this.e235 * right_dual.e415) - (this.e315 * right_dual.e425) - (this.e125 * right_dual.e435)), 
            /* e1, e2, e3, e4 */
            float4((this.e12345 * right_dual.e1) + (this.e315 * right_dual.e412), (this.e12345 * right_dual.e2) + (this.e125 * right_dual.e423), (this.e12345 * right_dual.e3) + (this.e235 * right_dual.e431), -(this.e425 * right_dual.e431) - (this.e435 * right_dual.e412)) + (this.group0 * float4(right_dual.group1.www, right_dual.e4)) - (right_dual.group0.yzxx * float4(this.group1.zxy, this.e415))
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            (float4(other.scalar) * anti_wedge.group0) + (anti_wedge.group3.wwwx * float4(other.group1.xyz, other.e4235)) + float4(float3(0.0), (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) + (anti_wedge.e4 * other.e3215) - (anti_wedge.e431 * other.e25) - (anti_wedge.e412 * other.e35) - (anti_wedge.e415 * other.e23) - (anti_wedge.e425 * other.e31) - (anti_wedge.e435 * other.e12) - (anti_wedge.e321 * other.e45) - (anti_wedge.e235 * other.e41) - (anti_wedge.e315 * other.e42) - (anti_wedge.e125 * other.e43)) + float4((anti_wedge.group3.zxy * other.group0.yzx), anti_wedge.e5 * other.e1234) - float4((anti_wedge.group3.yzx * other.group0.zxy), anti_wedge.e423 * other.e15), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e5 * other.e41) + (anti_wedge.e4 * other.e15), (anti_wedge.e5 * other.e42) + (anti_wedge.e4 * other.e25), (anti_wedge.e5 * other.e43) + (anti_wedge.e4 * other.e35), -(anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12)) + (float4(other.scalar) * anti_wedge.group1) - (anti_wedge.group3.xyzx * other.group1.wwwx), 
            /* e235, e315, e125, e5 */
            float4(((float3(anti_wedge.e5) * other.group1.xyz) + (float3(other.scalar) * anti_wedge.group2.xyz) + (anti_wedge.group3.yzx * other.group2.zxy) - (anti_wedge.group3.zxy * other.group2.yzx)), anti_wedge.e5 * other.scalar), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * anti_wedge.group3
        );
    }
}
// Fancy infix trick (first half)
public AntiProjectViaHorizonOntoInfixPartial<MultiVector> operator /(MultiVector lhs, AntiProjectViaHorizonOntoInfix rhs) {
    return AntiProjectViaHorizonOntoInfixPartial<MultiVector>(lhs);
}
// Fancy infix trick (second half)
public MultiVector operator /(AntiProjectViaHorizonOntoInfixPartial<MultiVector> lhs, AntiCircleRotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension MultiVector {
    public MultiVector anti_project_via_horizon_onto(AntiCircleRotor other) {
        CircleRotor right_dual = CircleRotor(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        MultiVector anti_wedge = MultiVector(
            /* scalar, e12345 */
            float2((right_dual.e12345 * this.scalar) - (right_dual.e423 * this.e15) - (right_dual.e431 * this.e25) - (right_dual.e412 * this.e35) - (right_dual.e415 * this.e23) - (right_dual.e425 * this.e31) - (right_dual.e435 * this.e12) - (right_dual.e321 * this.e45) - (right_dual.e235 * this.e41) - (right_dual.e315 * this.e42) - (right_dual.e125 * this.e43), right_dual.e12345 * this.e12345), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e415 * this.e321) + (right_dual.e321 * this.e415) + (right_dual.e315 * this.e412) + (right_dual.e12345 * this.e1), (right_dual.e425 * this.e321) + (right_dual.e321 * this.e425) + (right_dual.e125 * this.e423) + (right_dual.e12345 * this.e2), (right_dual.e435 * this.e321) + (right_dual.e321 * this.e435) + (right_dual.e235 * this.e431) + (right_dual.e12345 * this.e3), -(right_dual.e412 * this.e435) - (right_dual.e415 * this.e423) - (right_dual.e425 * this.e431) - (right_dual.e435 * this.e412)) + float4((right_dual.group0.xyz.zxy * this.group8.xyz.yzx), right_dual.e12345 * this.e4) - float4((right_dual.group0.xyz.yzx * this.group8.xyz.zxy), right_dual.e423 * this.e415) - float4((this.group7.xyz.yzx * right_dual.group2.zxy), right_dual.e431 * this.e425), 
            /* e5 */
            (right_dual.e12345 * this.e5) - (right_dual.e415 * this.e235) - (right_dual.e425 * this.e315) - (right_dual.e435 * this.e125) - (right_dual.e235 * this.e415) - (right_dual.e315 * this.e425) - (right_dual.e125 * this.e435), 
            /* e15, e25, e35, e45 */
            float4((right_dual.e315 * this.e4125) + (right_dual.e12345 * this.e15), (right_dual.e125 * this.e4235) + (right_dual.e12345 * this.e25), (right_dual.e235 * this.e4315) + (right_dual.e12345 * this.e35), -(right_dual.e425 * this.e4315) - (right_dual.e435 * this.e4125)) + float4((this.group9.www * right_dual.group1.xyz), right_dual.e12345 * this.e45) - (this.group9.yzxx * float4(right_dual.group2.zxy, right_dual.e415)), 
            /* e41, e42, e43 */
            (float3(right_dual.e12345) * this.group4.xyz) + (float3(this.e1234) * right_dual.group1.xyz) + (right_dual.group0.xyz.zxy * this.group9.yzx) - (right_dual.group0.xyz.yzx * this.group9.zxy), 
            /* e23, e31, e12 */
            (float3(right_dual.e12345) * this.group5.xyz) + (float3(this.e3215) * right_dual.group0.xyz) + (float3(this.e1234) * right_dual.group2.xyz) - (float3(right_dual.e321) * this.group9.xyz), 
            /* e415, e425, e435, e321 */
            (float4(right_dual.e12345) * this.group6) + (float4(this.e12345) * right_dual.group1), 
            /* e423, e431, e412 */
            (float3(right_dual.e12345) * this.group7.xyz) + (float3(this.e12345) * right_dual.group0.xyz), 
            /* e235, e315, e125 */
            (float3(right_dual.e12345) * this.group8.xyz) + (float3(this.e12345) * right_dual.group2.xyz), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * this.group9, 
            /* e1234 */
            right_dual.e12345 * this.e1234
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(other.scalar * anti_wedge.scalar, (other.scalar * anti_wedge.e12345) - (other.e41 * anti_wedge.e235) - (other.e42 * anti_wedge.e315) - (other.e43 * anti_wedge.e125) - (other.e23 * anti_wedge.e415) - (other.e31 * anti_wedge.e425) - (other.e12 * anti_wedge.e435) - (other.e45 * anti_wedge.e321) - (other.e15 * anti_wedge.e423) - (other.e25 * anti_wedge.e431) - (other.e35 * anti_wedge.e412)), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * anti_wedge.group1, 
            /* e5 */
            other.scalar * anti_wedge.e5, 
            /* e15, e25, e35, e45 */
            (float4(other.scalar) * anti_wedge.group3) + (float4(anti_wedge.scalar) * float4(other.group2.xyz, other.e45)), 
            /* e41, e42, e43 */
            (float3(other.scalar) * anti_wedge.group4.xyz) + (float3(anti_wedge.scalar) * other.group0.xyz), 
            /* e23, e31, e12 */
            (float3(other.scalar) * anti_wedge.group5.xyz) + (float3(anti_wedge.scalar) * other.group1.xyz), 
            /* e415, e425, e435, e321 */
            float4((other.e15 * anti_wedge.e4) + (other.scalar * anti_wedge.e415), (other.e25 * anti_wedge.e4) + (other.scalar * anti_wedge.e425), (other.e35 * anti_wedge.e4) + (other.scalar * anti_wedge.e435), -(other.e31 * anti_wedge.e2) - (other.e12 * anti_wedge.e3)) + float4((float3(anti_wedge.e5) * other.group0.xyz), other.scalar * anti_wedge.e321) - (other.group1.wwwx * anti_wedge.group1.xyzx), 
            /* e423, e431, e412 */
            (float3(other.scalar) * anti_wedge.group7.xyz) + (float3(anti_wedge.e4) * other.group1.xyz) + (other.group0.xyz.yzx * anti_wedge.group1.zxy) - (other.group0.xyz.zxy * anti_wedge.group1.yzx), 
            /* e235, e315, e125 */
            (float3(other.scalar) * anti_wedge.group8.xyz) + (float3(anti_wedge.e5) * other.group1.xyz) + (other.group2.zxy * anti_wedge.group1.yzx) - (other.group2.yzx * anti_wedge.group1.zxy), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e23 * anti_wedge.e45) + (other.e45 * anti_wedge.e23) + (other.e35 * anti_wedge.e42) + (other.scalar * anti_wedge.e4235), (other.e31 * anti_wedge.e45) + (other.e45 * anti_wedge.e31) + (other.e15 * anti_wedge.e43) + (other.scalar * anti_wedge.e4315), (other.e12 * anti_wedge.e45) + (other.e45 * anti_wedge.e12) + (other.e25 * anti_wedge.e41) + (other.scalar * anti_wedge.e4125), -(other.e23 * anti_wedge.e15) - (other.e31 * anti_wedge.e25) - (other.e12 * anti_wedge.e35) - (other.e35 * anti_wedge.e12)) + float4((other.group0.xyz.yzx * anti_wedge.group3.zxy), other.scalar * anti_wedge.e3215) - (other.group2.yzxy * float4(anti_wedge.group4.xyz.zxy, anti_wedge.e31)) - float4((other.group0.xyz.zxy * anti_wedge.group3.yzx), other.e15 * anti_wedge.e23), 
            /* e1234 */
            (other.scalar * anti_wedge.e1234) - (other.e41 * anti_wedge.e23) - (other.e42 * anti_wedge.e31) - (other.e43 * anti_wedge.e12) - (other.e23 * anti_wedge.e41) - (other.e31 * anti_wedge.e42) - (other.e12 * anti_wedge.e43)
        );
    }
}
// Fancy infix trick (second half)
public MultiVector operator /(AntiProjectViaHorizonOntoInfixPartial<MultiVector> lhs, AntiDipoleInversion rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension MultiVector {
    public MultiVector anti_project_via_horizon_onto(AntiDipoleInversion other) {
        DipoleInversion right_dual = DipoleInversion(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        MultiVector anti_wedge = MultiVector(
            /* scalar, e12345 */
            float2((right_dual.e1234 * this.e5) + (right_dual.e4235 * this.e1) + (right_dual.e4315 * this.e2) + (right_dual.e4125 * this.e3) + (right_dual.e3215 * this.e4) - (right_dual.e41 * this.e235) - (right_dual.e42 * this.e315) - (right_dual.e43 * this.e125) - (right_dual.e23 * this.e415) - (right_dual.e31 * this.e425) - (right_dual.e12 * this.e435) - (right_dual.e45 * this.e321) - (right_dual.e15 * this.e423) - (right_dual.e25 * this.e431) - (right_dual.e35 * this.e412), 0.0), 
            /* e1, e2, e3, e4 */
            (float4(this.e1234) * float4(right_dual.group2.xyz, right_dual.e45)) + (this.group9.yzxz * float4(right_dual.group1.zxy, right_dual.e43)) + float4((this.group4.xyz * right_dual.group3.www), right_dual.e41 * this.e4235) + float4((this.group5.xyz.yzx * right_dual.group3.zxy), right_dual.e42 * this.e4315) - (float4(right_dual.e1234) * this.group3) - (right_dual.group3.yzxy * float4(this.group5.xyz.zxy, this.e42)) - float4((right_dual.group0.xyz * this.group9.www), right_dual.e4235 * this.e41) - float4((right_dual.group1.yzx * this.group9.zxy), right_dual.e4125 * this.e43), 
            /* e5 */
            (right_dual.e4235 * this.e15) + (right_dual.e4315 * this.e25) + (right_dual.e4125 * this.e35) + (right_dual.e3215 * this.e45) - (right_dual.e45 * this.e3215) - (right_dual.e15 * this.e4235) - (right_dual.e25 * this.e4315) - (right_dual.e35 * this.e4125), 
            /* e15, e25, e35, e45 */
            float4((right_dual.e4125 * this.e315) + (right_dual.e3215 * this.e415), (right_dual.e4235 * this.e125) + (right_dual.e3215 * this.e425), (right_dual.e4315 * this.e235) + (right_dual.e3215 * this.e435), -(right_dual.e4315 * this.e425) - (right_dual.e4125 * this.e435)) + (float4(this.e12345) * float4(right_dual.group2.xyz, right_dual.e45)) - float4((this.group8.xyz.zxy * right_dual.group3.yzx), right_dual.e4235 * this.e415), 
            /* e41, e42, e43 */
            (float3(right_dual.e1234) * this.group6.xyz) + (float3(this.e12345) * right_dual.group0.xyz) + (this.group7.xyz.zxy * right_dual.group3.yzx) - (this.group7.xyz.yzx * right_dual.group3.zxy), 
            /* e23, e31, e12 */
            (float3(right_dual.e1234) * this.group8.xyz) + (float3(right_dual.e3215) * this.group7.xyz) + (float3(this.e12345) * right_dual.group1.xyz) - (float3(this.e321) * right_dual.group3.xyz), 
            /* e415, e425, e435, e321 */
            (right_dual.group3.yzxw * float4(this.group9.zxy, this.e1234)) - (this.group9.yzxw * float4(right_dual.group3.zxy, right_dual.e1234)), 
            /* e423, e431, e412 */
            (float3(this.e1234) * right_dual.group3.xyz) - (float3(right_dual.e1234) * this.group9.xyz), 
            /* e235, e315, e125 */
            (float3(right_dual.e3215) * this.group9.xyz) - (float3(this.e3215) * right_dual.group3.xyz), 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e12345) * right_dual.group3, 
            /* e1234 */
            right_dual.e1234 * this.e12345
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(0.0, (other.e4 * anti_wedge.e3215) + (other.e1 * anti_wedge.e4235) + (other.e2 * anti_wedge.e4315) + (other.e3 * anti_wedge.e4125) + (other.e5 * anti_wedge.e1234) - (other.e423 * anti_wedge.e15) - (other.e431 * anti_wedge.e25) - (other.e412 * anti_wedge.e35) - (other.e415 * anti_wedge.e23) - (other.e425 * anti_wedge.e31) - (other.e435 * anti_wedge.e12) - (other.e321 * anti_wedge.e45) - (other.e235 * anti_wedge.e41) - (other.e315 * anti_wedge.e42) - (other.e125 * anti_wedge.e43)), 
            /* e1, e2, e3, e4 */
            float4(anti_wedge.scalar) * float4(other.group3.xyz, other.e4), 
            /* e5 */
            other.e5 * anti_wedge.scalar, 
            /* e15, e25, e35, e45 */
            (float4(anti_wedge.e5) * float4(other.group3.xyz, other.e4)) - (float4(other.e5) * anti_wedge.group1), 
            /* e41, e42, e43 */
            (float3(other.e4) * anti_wedge.group1.xyz) - (float3(anti_wedge.e4) * other.group3.xyz), 
            /* e23, e31, e12 */
            (other.group3.yzx * anti_wedge.group1.zxy) - (other.group3.zxy * anti_wedge.group1.yzx), 
            /* e415, e425, e435, e321 */
            float4((other.e4 * anti_wedge.e15) + (other.e5 * anti_wedge.e41), (other.e4 * anti_wedge.e25) + (other.e5 * anti_wedge.e42), (other.e4 * anti_wedge.e35) + (other.e5 * anti_wedge.e43), -(other.e2 * anti_wedge.e31) - (other.e3 * anti_wedge.e12)) + (float4(anti_wedge.scalar) * other.group1) - float4((anti_wedge.group3.www * other.group3.xyz), other.e1 * anti_wedge.e23), 
            /* e423, e431, e412 */
            (float3(other.e4) * anti_wedge.group5.xyz) + (float3(anti_wedge.scalar) * other.group0.xyz) + (anti_wedge.group4.xyz.yzx * other.group3.zxy) - (anti_wedge.group4.xyz.zxy * other.group3.yzx), 
            /* e235, e315, e125 */
            (float3(other.e5) * anti_wedge.group5.xyz) + (float3(anti_wedge.scalar) * other.group2.xyz) + (other.group3.yzx * anti_wedge.group3.zxy) - (other.group3.zxy * anti_wedge.group3.yzx), 
            /* e4235, e4315, e4125, e3215 */
            (float4(anti_wedge.e5) * float4(other.group0.xyz, other.e321)) + (anti_wedge.group1.yzxy * float4(other.group1.zxy, other.e315)) + float4((anti_wedge.group8.xyz * other.group2.www), other.e235 * anti_wedge.e1) + float4((other.group3.zxy * anti_wedge.group6.yzx), other.e125 * anti_wedge.e3) - (other.group3.yzxw * anti_wedge.group6.zxyw) - (other.group3.wwwx * float4(anti_wedge.group7.xyz, anti_wedge.e235)) - float4((other.group1.yzx * anti_wedge.group1.zxy), other.e2 * anti_wedge.e315) - float4((anti_wedge.group1.www * other.group2.xyz), other.e3 * anti_wedge.e125), 
            /* e1234 */
            (other.e4 * anti_wedge.e321) + (other.e1 * anti_wedge.e423) + (other.e2 * anti_wedge.e431) + (other.e3 * anti_wedge.e412) - (other.e423 * anti_wedge.e1) - (other.e431 * anti_wedge.e2) - (other.e412 * anti_wedge.e3) - (other.e321 * anti_wedge.e4)
        );
    }
}
// Fancy infix trick (second half)
public MultiVector operator /(AntiProjectViaHorizonOntoInfixPartial<MultiVector> lhs, AntiDualNum rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension MultiVector {
    public MultiVector anti_project_via_horizon_onto(AntiDualNum other) {
        DualNum right_dual = DualNum(
            /* e5, e12345 */
            other.group0.xy
        );
        MultiVector anti_wedge = MultiVector(
            /* scalar, e12345 */
            float2((right_dual.e5 * this.e1234) + (right_dual.e12345 * this.scalar), right_dual.e12345 * this.e12345), 
            /* e1, e2, e3, e4 */
            float4(right_dual.e12345) * this.group1, 
            /* e5 */
            (right_dual.e5 * this.e12345) + (right_dual.e12345 * this.e5), 
            /* e15, e25, e35, e45 */
            float4(right_dual.e12345) * this.group3, 
            /* e41, e42, e43 */
            float3(right_dual.e12345) * this.group4.xyz, 
            /* e23, e31, e12 */
            float3(right_dual.e12345) * this.group5.xyz, 
            /* e415, e425, e435, e321 */
            float4(right_dual.e12345) * this.group6, 
            /* e423, e431, e412 */
            float3(right_dual.e12345) * this.group7.xyz, 
            /* e235, e315, e125 */
            float3(right_dual.e12345) * this.group8.xyz, 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * this.group9, 
            /* e1234 */
            right_dual.e12345 * this.e1234
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(other.scalar * anti_wedge.scalar, (other.e3215 * anti_wedge.e4) + (other.scalar * anti_wedge.e12345)), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * anti_wedge.group1, 
            /* e5 */
            other.scalar * anti_wedge.e5, 
            /* e15, e25, e35, e45 */
            float4(other.scalar) * anti_wedge.group3, 
            /* e41, e42, e43 */
            float3(other.scalar) * anti_wedge.group4.xyz, 
            /* e23, e31, e12 */
            float3(other.scalar) * anti_wedge.group5.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.scalar) * anti_wedge.group6, 
            /* e423, e431, e412 */
            float3(other.scalar) * anti_wedge.group7.xyz, 
            /* e235, e315, e125 */
            float3(other.scalar) * anti_wedge.group8.xyz, 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xy.yy, other.scalar, (other.e3215 * anti_wedge.scalar) + (other.scalar * anti_wedge.e3215)) * float4(anti_wedge.group9.xyz, 1.0), 
            /* e1234 */
            other.scalar * anti_wedge.e1234
        );
    }
}
// Fancy infix trick (second half)
public MultiVector operator /(AntiProjectViaHorizonOntoInfixPartial<MultiVector> lhs, AntiFlatPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension MultiVector {
    public MultiVector anti_project_via_horizon_onto(AntiFlatPoint other) {
        FlatPoint right_dual = FlatPoint(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        MultiVector anti_wedge = MultiVector(
            /* scalar, e12345 */
            float2(-(right_dual.e15 * this.e423) - (right_dual.e25 * this.e431) - (right_dual.e35 * this.e412) - (right_dual.e45 * this.e321), 0.0), 
            /* e1, e2, e3, e4 */
            float4(this.e1234) * right_dual.group0, 
            /* e5 */
            -(right_dual.e15 * this.e4235) - (right_dual.e25 * this.e4315) - (right_dual.e35 * this.e4125) - (right_dual.e45 * this.e3215), 
            /* e15, e25, e35, e45 */
            float4(this.e12345) * right_dual.group0, 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(0.0), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            float3(0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(0.0), 
            /* e1234 */
            0.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(0.0, -(other.e235 * anti_wedge.e41) - (other.e315 * anti_wedge.e42) - (other.e125 * anti_wedge.e43) - (other.e321 * anti_wedge.e45)), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5 */
            0.0, 
            /* e15, e25, e35, e45 */
            float4(0.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(float3(0.0), other.e321 * anti_wedge.scalar), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e4235, e4315, e4125, e3215 */
            float4((float3(anti_wedge.e4) * other.group0.xyz * float3(-1.0)), (other.e235 * anti_wedge.e1) + (other.e315 * anti_wedge.e2) + (other.e125 * anti_wedge.e3) + (other.e321 * anti_wedge.e5)), 
            /* e1234 */
            other.e321 * anti_wedge.e4 * -1.0
        );
    }
}
// Fancy infix trick (second half)
public MultiVector operator /(AntiProjectViaHorizonOntoInfixPartial<MultiVector> lhs, AntiFlector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension MultiVector {
    public MultiVector anti_project_via_horizon_onto(AntiFlector other) {
        Flector right_dual = Flector(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        MultiVector anti_wedge = MultiVector(
            /* scalar, e12345 */
            float2((right_dual.e4235 * this.e1) + (right_dual.e4315 * this.e2) + (right_dual.e4125 * this.e3) + (right_dual.e3215 * this.e4) - (right_dual.e15 * this.e423) - (right_dual.e25 * this.e431) - (right_dual.e35 * this.e412) - (right_dual.e45 * this.e321), 0.0), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e15 * this.e1234) + (right_dual.e4125 * this.e31), (right_dual.e25 * this.e1234) + (right_dual.e4235 * this.e12), (right_dual.e35 * this.e1234) + (right_dual.e4315 * this.e23), -(right_dual.e4315 * this.e42) - (right_dual.e4125 * this.e43)) + float4((this.group4.xyz * right_dual.group1.www), right_dual.e45 * this.e1234) - (right_dual.group1.yzxx * float4(this.group5.xyz.zxy, this.e41)), 
            /* e5 */
            (right_dual.e4235 * this.e15) + (right_dual.e4315 * this.e25) + (right_dual.e4125 * this.e35) + (right_dual.e3215 * this.e45) - (right_dual.e15 * this.e4235) - (right_dual.e25 * this.e4315) - (right_dual.e35 * this.e4125) - (right_dual.e45 * this.e3215), 
            /* e15, e25, e35, e45 */
            float4((right_dual.e4125 * this.e315) + (right_dual.e3215 * this.e415), (right_dual.e4235 * this.e125) + (right_dual.e3215 * this.e425), (right_dual.e4315 * this.e235) + (right_dual.e3215 * this.e435), -(right_dual.e4315 * this.e425) - (right_dual.e4125 * this.e435)) + (float4(this.e12345) * right_dual.group0) - float4((this.group8.xyz.zxy * right_dual.group1.yzx), right_dual.e4235 * this.e415), 
            /* e41, e42, e43 */
            (this.group7.xyz.zxy * right_dual.group1.yzx) - (this.group7.xyz.yzx * right_dual.group1.zxy), 
            /* e23, e31, e12 */
            (float3(right_dual.e3215) * this.group7.xyz) - (float3(this.e321) * right_dual.group1.xyz), 
            /* e415, e425, e435, e321 */
            float4(((right_dual.group1.yzx * this.group9.zxy) - (right_dual.group1.zxy * this.group9.yzx)), right_dual.e3215 * this.e1234), 
            /* e423, e431, e412 */
            float3(this.e1234) * right_dual.group1.xyz, 
            /* e235, e315, e125 */
            (float3(right_dual.e3215) * this.group9.xyz) - (float3(this.e3215) * right_dual.group1.xyz), 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e12345) * right_dual.group1, 
            /* e1234 */
            0.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(0.0, (other.e1 * anti_wedge.e4235) + (other.e2 * anti_wedge.e4315) + (other.e3 * anti_wedge.e4125) + (other.e5 * anti_wedge.e1234) - (other.e235 * anti_wedge.e41) - (other.e315 * anti_wedge.e42) - (other.e125 * anti_wedge.e43) - (other.e321 * anti_wedge.e45)), 
            /* e1, e2, e3, e4 */
            float4(anti_wedge.group0.xy.xx, anti_wedge.scalar, 0.0) * float4(float3(1.0), 0.0) * float4(other.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e5 */
            other.e5 * anti_wedge.scalar, 
            /* e15, e25, e35, e45 */
            float4(((float3(anti_wedge.e5) * other.group1.xyz) - (float3(other.e5) * anti_wedge.group1.xyz)), other.e5 * anti_wedge.e4 * -1.0), 
            /* e41, e42, e43 */
            float3(anti_wedge.e4) * other.group1.xyz * float3(-1.0), 
            /* e23, e31, e12 */
            (other.group1.yzx * anti_wedge.group1.zxy) - (other.group1.zxy * anti_wedge.group1.yzx), 
            /* e415, e425, e435, e321 */
            float4(float3(0.0), -(other.e2 * anti_wedge.e31) - (other.e3 * anti_wedge.e12)) + float4((anti_wedge.group4.xyz * other.group1.www), other.e321 * anti_wedge.scalar) - float4((anti_wedge.group3.www * other.group1.xyz), other.e1 * anti_wedge.e23), 
            /* e423, e431, e412 */
            (anti_wedge.group4.xyz.yzx * other.group1.zxy) - (anti_wedge.group4.xyz.zxy * other.group1.yzx), 
            /* e235, e315, e125 */
            (float3(other.e5) * anti_wedge.group5.xyz) + (float3(anti_wedge.scalar) * other.group0.xyz) + (other.group1.yzx * anti_wedge.group3.zxy) - (other.group1.zxy * anti_wedge.group3.yzx), 
            /* e4235, e4315, e4125, e3215 */
            float4(float3(0.0), (other.e315 * anti_wedge.e2) + (other.e125 * anti_wedge.e3) + (other.e321 * anti_wedge.e5) - (other.e5 * anti_wedge.e321)) + float4((other.group1.zxy * anti_wedge.group6.yzx), other.e235 * anti_wedge.e1) - (other.group1.wwwx * float4(anti_wedge.group7.xyz, anti_wedge.e235)) - float4((other.group1.yzx * anti_wedge.group6.zxy), other.e3 * anti_wedge.e125) - float4((anti_wedge.group1.www * other.group0.xyz), other.e2 * anti_wedge.e315), 
            /* e1234 */
            (other.e1 * anti_wedge.e423) + (other.e2 * anti_wedge.e431) + (other.e3 * anti_wedge.e412) - (other.e321 * anti_wedge.e4)
        );
    }
}
// Fancy infix trick (second half)
public MultiVector operator /(AntiProjectViaHorizonOntoInfixPartial<MultiVector> lhs, AntiLine rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension MultiVector {
    public MultiVector anti_project_via_horizon_onto(AntiLine other) {
        Line right_dual = Line(
            /* e415, e425, e435 */
            other.group0.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group1.xyz * float3(-1.0)
        );
        MultiVector anti_wedge = MultiVector(
            /* scalar, e12345 */
            float2(-(right_dual.e415 * this.e23) - (right_dual.e425 * this.e31) - (right_dual.e435 * this.e12) - (right_dual.e235 * this.e41) - (right_dual.e315 * this.e42) - (right_dual.e125 * this.e43), 0.0), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e415 * this.e321) + (right_dual.e315 * this.e412), (right_dual.e425 * this.e321) + (right_dual.e125 * this.e423), (right_dual.e435 * this.e321) + (right_dual.e235 * this.e431), -(right_dual.e425 * this.e431) - (right_dual.e435 * this.e412)) - float4((right_dual.group1.xyz.zxy * this.group7.xyz.yzx), right_dual.e415 * this.e423), 
            /* e5 */
            -(right_dual.e415 * this.e235) - (right_dual.e425 * this.e315) - (right_dual.e435 * this.e125) - (right_dual.e235 * this.e415) - (right_dual.e315 * this.e425) - (right_dual.e125 * this.e435), 
            /* e15, e25, e35, e45 */
            float4((right_dual.e415 * this.e3215) + (right_dual.e315 * this.e4125), (right_dual.e425 * this.e3215) + (right_dual.e125 * this.e4235), (right_dual.e435 * this.e3215) + (right_dual.e235 * this.e4315), -(right_dual.e425 * this.e4315) - (right_dual.e435 * this.e4125)) - (this.group9.yzxx * float4(right_dual.group1.xyz.zxy, right_dual.e415)), 
            /* e41, e42, e43 */
            float3(this.e1234) * right_dual.group0.xyz, 
            /* e23, e31, e12 */
            float3(this.e1234) * right_dual.group1.xyz, 
            /* e415, e425, e435, e321 */
            float4(this.group0.xy.yy, this.e12345, 0.0) * float4(float3(1.0), 0.0) * float4(right_dual.group0.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            float3(this.e12345) * right_dual.group1.xyz, 
            /* e4235, e4315, e4125, e3215 */
            float4(0.0), 
            /* e1234 */
            0.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(0.0, -(other.e23 * anti_wedge.e415) - (other.e31 * anti_wedge.e425) - (other.e12 * anti_wedge.e435) - (other.e15 * anti_wedge.e423) - (other.e25 * anti_wedge.e431) - (other.e35 * anti_wedge.e412)), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5 */
            0.0, 
            /* e15, e25, e35, e45 */
            float4(anti_wedge.group0.xy.xx, anti_wedge.scalar, 0.0) * float4(float3(1.0), 0.0) * float4(other.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4((float3(anti_wedge.e4) * other.group1.xyz), -(other.e23 * anti_wedge.e1) - (other.e31 * anti_wedge.e2) - (other.e12 * anti_wedge.e3)), 
            /* e423, e431, e412 */
            float3(anti_wedge.e4) * other.group0.xyz, 
            /* e235, e315, e125 */
            (float3(anti_wedge.e5) * other.group0.xyz) + (other.group1.xyz.zxy * anti_wedge.group1.yzx) - (other.group1.xyz.yzx * anti_wedge.group1.zxy), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e23 * anti_wedge.e45) + (other.e35 * anti_wedge.e42), (other.e31 * anti_wedge.e45) + (other.e15 * anti_wedge.e43), (other.e12 * anti_wedge.e45) + (other.e25 * anti_wedge.e41), -(other.e31 * anti_wedge.e25) - (other.e12 * anti_wedge.e35) - (other.e15 * anti_wedge.e23) - (other.e25 * anti_wedge.e31) - (other.e35 * anti_wedge.e12)) - float4((other.group1.xyz.yzx * anti_wedge.group4.xyz.zxy), other.e23 * anti_wedge.e15), 
            /* e1234 */
            -(other.e23 * anti_wedge.e41) - (other.e31 * anti_wedge.e42) - (other.e12 * anti_wedge.e43)
        );
    }
}
// Fancy infix trick (second half)
public MultiVector operator /(AntiProjectViaHorizonOntoInfixPartial<MultiVector> lhs, AntiMotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension MultiVector {
    public MultiVector anti_project_via_horizon_onto(AntiMotor other) {
        Motor right_dual = Motor(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        MultiVector anti_wedge = MultiVector(
            /* scalar, e12345 */
            float2((right_dual.e12345 * this.scalar) + (right_dual.e5 * this.e1234) - (right_dual.e415 * this.e23) - (right_dual.e425 * this.e31) - (right_dual.e435 * this.e12) - (right_dual.e235 * this.e41) - (right_dual.e315 * this.e42) - (right_dual.e125 * this.e43), right_dual.e12345 * this.e12345), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e415 * this.e321) + (right_dual.e12345 * this.e1), (right_dual.e425 * this.e321) + (right_dual.e12345 * this.e2), (right_dual.e435 * this.e321) + (right_dual.e12345 * this.e3), -(right_dual.e425 * this.e431) - (right_dual.e435 * this.e412)) + float4((this.group7.xyz.zxy * right_dual.group1.yzx), right_dual.e12345 * this.e4) - float4((this.group7.xyz.yzx * right_dual.group1.zxy), right_dual.e415 * this.e423), 
            /* e5 */
            (right_dual.e12345 * this.e5) + (right_dual.e5 * this.e12345) - (right_dual.e415 * this.e235) - (right_dual.e425 * this.e315) - (right_dual.e435 * this.e125) - (right_dual.e235 * this.e415) - (right_dual.e315 * this.e425) - (right_dual.e125 * this.e435), 
            /* e15, e25, e35, e45 */
            float4((right_dual.e12345 * this.e15) + (right_dual.e315 * this.e4125), (right_dual.e12345 * this.e25) + (right_dual.e125 * this.e4235), (right_dual.e12345 * this.e35) + (right_dual.e235 * this.e4315), -(right_dual.e425 * this.e4315) - (right_dual.e435 * this.e4125)) + (right_dual.group0 * float4(this.group9.www, this.e45)) - (this.group9.yzxx * float4(right_dual.group1.zxy, right_dual.e415)), 
            /* e41, e42, e43 */
            (float3(right_dual.e12345) * this.group4.xyz) + (float3(this.e1234) * right_dual.group0.xyz), 
            /* e23, e31, e12 */
            (float3(right_dual.e12345) * this.group5.xyz) + (float3(this.e1234) * right_dual.group1.xyz), 
            /* e415, e425, e435, e321 */
            float4(((float3(right_dual.e12345) * this.group6.xyz) + (float3(this.e12345) * right_dual.group0.xyz)), right_dual.e12345 * this.e321), 
            /* e423, e431, e412 */
            float3(right_dual.e12345) * this.group7.xyz, 
            /* e235, e315, e125 */
            (float3(right_dual.e12345) * this.group8.xyz) + (float3(this.e12345) * right_dual.group1.xyz), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * this.group9, 
            /* e1234 */
            right_dual.e12345 * this.e1234
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(other.scalar * anti_wedge.scalar, (other.scalar * anti_wedge.e12345) + (other.e3215 * anti_wedge.e4) - (other.e23 * anti_wedge.e415) - (other.e31 * anti_wedge.e425) - (other.e12 * anti_wedge.e435) - (other.e15 * anti_wedge.e423) - (other.e25 * anti_wedge.e431) - (other.e35 * anti_wedge.e412)), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * anti_wedge.group1, 
            /* e5 */
            other.scalar * anti_wedge.e5, 
            /* e15, e25, e35, e45 */
            float4(((float3(other.scalar) * anti_wedge.group3.xyz) + (float3(anti_wedge.scalar) * other.group1.xyz)), other.scalar * anti_wedge.e45), 
            /* e41, e42, e43 */
            float3(other.scalar) * anti_wedge.group4.xyz, 
            /* e23, e31, e12 */
            (float3(other.scalar) * anti_wedge.group5.xyz) + (float3(anti_wedge.scalar) * other.group0.xyz), 
            /* e415, e425, e435, e321 */
            float4(other.e15 * anti_wedge.e4, other.e25 * anti_wedge.e4, other.e35 * anti_wedge.e4, -(other.e23 * anti_wedge.e1) - (other.e31 * anti_wedge.e2) - (other.e12 * anti_wedge.e3)) + (float4(other.scalar) * anti_wedge.group6), 
            /* e423, e431, e412 */
            (float3(other.scalar) * anti_wedge.group7.xyz) + (float3(anti_wedge.e4) * other.group0.xyz), 
            /* e235, e315, e125 */
            (float3(other.scalar) * anti_wedge.group8.xyz) + (float3(anti_wedge.e5) * other.group0.xyz) + (other.group1.zxy * anti_wedge.group1.yzx) - (other.group1.yzx * anti_wedge.group1.zxy), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar * anti_wedge.e4235, other.scalar * anti_wedge.e4315, other.scalar * anti_wedge.e4125, -(other.e23 * anti_wedge.e15) - (other.e31 * anti_wedge.e25) - (other.e12 * anti_wedge.e35) - (other.e25 * anti_wedge.e31) - (other.e35 * anti_wedge.e12)) + (other.group0 * float4(anti_wedge.group3.www, anti_wedge.e3215)) + (other.group1.zxyw * float4(anti_wedge.group4.xyz.yzx, anti_wedge.scalar)) - (other.group1.yzxx * float4(anti_wedge.group4.xyz.zxy, anti_wedge.e23)), 
            /* e1234 */
            (other.scalar * anti_wedge.e1234) - (other.e23 * anti_wedge.e41) - (other.e31 * anti_wedge.e42) - (other.e12 * anti_wedge.e43)
        );
    }
}
// Fancy infix trick (second half)
public MultiVector operator /(AntiProjectViaHorizonOntoInfixPartial<MultiVector> lhs, AntiPlane rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension MultiVector {
    public MultiVector anti_project_via_horizon_onto(AntiPlane other) {
        Plane right_dual = Plane(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        MultiVector anti_wedge = MultiVector(
            /* scalar, e12345 */
            float2((this.e1 * right_dual.e4235) + (this.e2 * right_dual.e4315) + (this.e3 * right_dual.e4125) + (this.e4 * right_dual.e3215), 0.0), 
            /* e1, e2, e3, e4 */
            float4((this.e41 * right_dual.e3215) + (this.e31 * right_dual.e4125), (this.e42 * right_dual.e3215) + (this.e12 * right_dual.e4235), (this.e43 * right_dual.e3215) + (this.e23 * right_dual.e4315), -(this.e42 * right_dual.e4315) - (this.e43 * right_dual.e4125)) - (right_dual.group0.yzxx * float4(this.group5.xyz.zxy, this.e41)), 
            /* e5 */
            (this.e15 * right_dual.e4235) + (this.e25 * right_dual.e4315) + (this.e35 * right_dual.e4125) + (this.e45 * right_dual.e3215), 
            /* e15, e25, e35, e45 */
            float4((this.e415 * right_dual.e3215) + (this.e315 * right_dual.e4125), (this.e425 * right_dual.e3215) + (this.e125 * right_dual.e4235), (this.e435 * right_dual.e3215) + (this.e235 * right_dual.e4315), -(this.e425 * right_dual.e4315) - (this.e435 * right_dual.e4125)) - (right_dual.group0.yzxx * float4(this.group8.xyz.zxy, this.e415)), 
            /* e41, e42, e43 */
            (this.group7.xyz.zxy * right_dual.group0.yzx) - (this.group7.xyz.yzx * right_dual.group0.zxy), 
            /* e23, e31, e12 */
            (float3(right_dual.e3215) * this.group7.xyz) - (float3(this.e321) * right_dual.group0.xyz), 
            /* e415, e425, e435, e321 */
            float4(((this.group9.zxy * right_dual.group0.yzx) - (this.group9.yzx * right_dual.group0.zxy)), this.e1234 * right_dual.e3215), 
            /* e423, e431, e412 */
            float3(this.e1234) * right_dual.group0.xyz, 
            /* e235, e315, e125 */
            (float3(right_dual.e3215) * this.group9.xyz) - (float3(this.e3215) * right_dual.group0.xyz), 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e12345) * right_dual.group0, 
            /* e1234 */
            0.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(0.0, (other.e1 * anti_wedge.e4235) + (other.e2 * anti_wedge.e4315) + (other.e3 * anti_wedge.e4125) + (other.e5 * anti_wedge.e1234)), 
            /* e1, e2, e3, e4 */
            float4(anti_wedge.group0.xy.xx, anti_wedge.scalar, 0.0) * float4(float3(1.0), 0.0) * float4(other.group0.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e5 */
            other.e5 * anti_wedge.scalar, 
            /* e15, e25, e35, e45 */
            float4(((float3(anti_wedge.e5) * other.group0.xyz) - (float3(other.e5) * anti_wedge.group1.xyz)), other.e5 * anti_wedge.e4 * -1.0), 
            /* e41, e42, e43 */
            float3(anti_wedge.e4) * other.group0.xyz * float3(-1.0), 
            /* e23, e31, e12 */
            (other.group0.yzx * anti_wedge.group1.zxy) - (other.group0.zxy * anti_wedge.group1.yzx), 
            /* e415, e425, e435, e321 */
            float4(other.e5 * anti_wedge.e41, other.e5 * anti_wedge.e42, other.e5 * anti_wedge.e43, -(other.e2 * anti_wedge.e31) - (other.e3 * anti_wedge.e12)) - float4((anti_wedge.group3.www * other.group0.xyz), other.e1 * anti_wedge.e23), 
            /* e423, e431, e412 */
            (anti_wedge.group4.xyz.yzx * other.group0.zxy) - (anti_wedge.group4.xyz.zxy * other.group0.yzx), 
            /* e235, e315, e125 */
            (float3(other.e5) * anti_wedge.group5.xyz) + (other.group0.yzx * anti_wedge.group3.zxy) - (other.group0.zxy * anti_wedge.group3.yzx), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.e3 * anti_wedge.e425, other.e1 * anti_wedge.e435, other.e2 * anti_wedge.e415, -(other.e3 * anti_wedge.e125) - (other.e5 * anti_wedge.e321)) - (other.group0.wwwx * float4(anti_wedge.group7.xyz, anti_wedge.e235)) - float4((other.group0.yzx * anti_wedge.group6.zxy), other.e2 * anti_wedge.e315), 
            /* e1234 */
            (other.e1 * anti_wedge.e423) + (other.e2 * anti_wedge.e431) + (other.e3 * anti_wedge.e412)
        );
    }
}
// Fancy infix trick (second half)
public AntiScalar operator /(AntiProjectViaHorizonOntoInfixPartial<MultiVector> lhs, AntiScalar rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension MultiVector {
    public AntiScalar anti_project_via_horizon_onto(AntiScalar other) {
        return AntiScalar(
            /* e12345 */
            pow(other.e12345, 2) * this.e12345 * -1.0
        );
    }
}
// Fancy infix trick (second half)
public MultiVector operator /(AntiProjectViaHorizonOntoInfixPartial<MultiVector> lhs, Circle rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension MultiVector {
    public MultiVector anti_project_via_horizon_onto(Circle other) {
        Dipole right_dual = Dipole(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35 */
            other.group2.xyz
        );
        MultiVector anti_wedge = MultiVector(
            /* scalar, e12345 */
            float2(-(right_dual.e41 * this.e235) - (right_dual.e42 * this.e315) - (right_dual.e43 * this.e125) - (right_dual.e23 * this.e415) - (right_dual.e31 * this.e425) - (right_dual.e12 * this.e435) - (right_dual.e45 * this.e321) - (right_dual.e15 * this.e423) - (right_dual.e25 * this.e431) - (right_dual.e35 * this.e412), 0.0), 
            /* e1, e2, e3, e4 */
            float4(-(right_dual.e41 * this.e3215) - (right_dual.e31 * this.e4125), -(right_dual.e42 * this.e3215) - (right_dual.e12 * this.e4235), -(right_dual.e43 * this.e3215) - (right_dual.e23 * this.e4315), (right_dual.e43 * this.e4125) + (right_dual.e45 * this.e1234)) + (this.group9.yzxy * float4(right_dual.group1.zxy, right_dual.e42)) + float4((float3(this.e1234) * right_dual.group2.xyz), right_dual.e41 * this.e4235), 
            /* e5 */
            -(right_dual.e45 * this.e3215) - (right_dual.e15 * this.e4235) - (right_dual.e25 * this.e4315) - (right_dual.e35 * this.e4125), 
            /* e15, e25, e35, e45 */
            float4(this.e12345) * float4(right_dual.group2.xyz, right_dual.e45), 
            /* e41, e42, e43 */
            float3(this.e12345) * right_dual.group0.xyz, 
            /* e23, e31, e12 */
            float3(this.e12345) * right_dual.group1.xyz, 
            /* e415, e425, e435, e321 */
            float4(0.0), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            float3(0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(0.0), 
            /* e1234 */
            0.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(0.0, -(other.e423 * anti_wedge.e15) - (other.e431 * anti_wedge.e25) - (other.e412 * anti_wedge.e35) - (other.e415 * anti_wedge.e23) - (other.e425 * anti_wedge.e31) - (other.e435 * anti_wedge.e12) - (other.e321 * anti_wedge.e45) - (other.e235 * anti_wedge.e41) - (other.e315 * anti_wedge.e42) - (other.e125 * anti_wedge.e43)), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5 */
            0.0, 
            /* e15, e25, e35, e45 */
            float4(0.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(anti_wedge.scalar) * other.group1, 
            /* e423, e431, e412 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e235, e315, e125 */
            float3(anti_wedge.scalar) * other.group2.xyz, 
            /* e4235, e4315, e4125, e3215 */
            float4(-(other.e425 * anti_wedge.e3) - (other.e235 * anti_wedge.e4), -(other.e435 * anti_wedge.e1) - (other.e315 * anti_wedge.e4), -(other.e415 * anti_wedge.e2) - (other.e125 * anti_wedge.e4), (other.e321 * anti_wedge.e5) + (other.e125 * anti_wedge.e3)) + (anti_wedge.group1.yzxy * float4(other.group1.zxy, other.e315)) + float4((float3(anti_wedge.e5) * other.group0.xyz), other.e235 * anti_wedge.e1), 
            /* e1234 */
            -(other.e423 * anti_wedge.e1) - (other.e431 * anti_wedge.e2) - (other.e412 * anti_wedge.e3) - (other.e321 * anti_wedge.e4)
        );
    }
}
// Fancy infix trick (second half)
public MultiVector operator /(AntiProjectViaHorizonOntoInfixPartial<MultiVector> lhs, CircleRotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension MultiVector {
    public MultiVector anti_project_via_horizon_onto(CircleRotor other) {
        AntiCircleRotor right_dual = AntiCircleRotor(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        MultiVector anti_wedge = MultiVector(
            /* scalar, e12345 */
            float2((right_dual.scalar * this.e12345) - (right_dual.e41 * this.e235) - (right_dual.e42 * this.e315) - (right_dual.e43 * this.e125) - (right_dual.e23 * this.e415) - (right_dual.e31 * this.e425) - (right_dual.e12 * this.e435) - (right_dual.e45 * this.e321) - (right_dual.e15 * this.e423) - (right_dual.e25 * this.e431) - (right_dual.e35 * this.e412), 0.0), 
            /* e1, e2, e3, e4 */
            float4(-(right_dual.e41 * this.e3215) - (right_dual.e31 * this.e4125), -(right_dual.e42 * this.e3215) - (right_dual.e12 * this.e4235), -(right_dual.e43 * this.e3215) - (right_dual.e23 * this.e4315), (right_dual.e43 * this.e4125) + (right_dual.e45 * this.e1234)) + (this.group9.yzxx * float4(right_dual.group1.zxy, right_dual.e41)) + float4((float3(this.e1234) * right_dual.group2.xyz), right_dual.e42 * this.e4315), 
            /* e5 */
            -(right_dual.e45 * this.e3215) - (right_dual.e15 * this.e4235) - (right_dual.e25 * this.e4315) - (right_dual.e35 * this.e4125), 
            /* e15, e25, e35, e45 */
            float4(this.e12345) * float4(right_dual.group2.xyz, right_dual.e45), 
            /* e41, e42, e43 */
            float3(this.e12345) * right_dual.group0.xyz, 
            /* e23, e31, e12 */
            float3(this.e12345) * right_dual.group1.xyz, 
            /* e415, e425, e435, e321 */
            float4(0.0), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            float3(0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(0.0), 
            /* e1234 */
            0.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(0.0, (other.e12345 * anti_wedge.scalar) - (other.e423 * anti_wedge.e15) - (other.e431 * anti_wedge.e25) - (other.e412 * anti_wedge.e35) - (other.e415 * anti_wedge.e23) - (other.e425 * anti_wedge.e31) - (other.e435 * anti_wedge.e12) - (other.e321 * anti_wedge.e45) - (other.e235 * anti_wedge.e41) - (other.e315 * anti_wedge.e42) - (other.e125 * anti_wedge.e43)), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5 */
            0.0, 
            /* e15, e25, e35, e45 */
            float4(0.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(anti_wedge.scalar) * other.group1, 
            /* e423, e431, e412 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e235, e315, e125 */
            float3(anti_wedge.scalar) * other.group2.xyz, 
            /* e4235, e4315, e4125, e3215 */
            float4(-(other.e425 * anti_wedge.e3) - (other.e235 * anti_wedge.e4), -(other.e435 * anti_wedge.e1) - (other.e315 * anti_wedge.e4), -(other.e415 * anti_wedge.e2) - (other.e125 * anti_wedge.e4), (other.e315 * anti_wedge.e2) + (other.e125 * anti_wedge.e3)) + (float4(anti_wedge.e5) * float4(other.group0.xyz, other.e321)) + (anti_wedge.group1.yzxx * float4(other.group1.zxy, other.e235)), 
            /* e1234 */
            -(other.e423 * anti_wedge.e1) - (other.e431 * anti_wedge.e2) - (other.e412 * anti_wedge.e3) - (other.e321 * anti_wedge.e4)
        );
    }
}
// Fancy infix trick (second half)
public MultiVector operator /(AntiProjectViaHorizonOntoInfixPartial<MultiVector> lhs, Dipole rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension MultiVector {
    public MultiVector anti_project_via_horizon_onto(Dipole other) {
        Circle right_dual = Circle(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125 */
            other.group2.xyz * float3(-1.0)
        );
        MultiVector anti_wedge = MultiVector(
            /* scalar, e12345 */
            float2(-(right_dual.e423 * this.e15) - (right_dual.e431 * this.e25) - (right_dual.e412 * this.e35) - (right_dual.e415 * this.e23) - (right_dual.e425 * this.e31) - (right_dual.e435 * this.e12) - (right_dual.e321 * this.e45) - (right_dual.e235 * this.e41) - (right_dual.e315 * this.e42) - (right_dual.e125 * this.e43), 0.0), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e412 * this.e315) + (right_dual.e415 * this.e321) + (right_dual.e321 * this.e415) + (right_dual.e315 * this.e412), (right_dual.e423 * this.e125) + (right_dual.e425 * this.e321) + (right_dual.e321 * this.e425) + (right_dual.e125 * this.e423), (right_dual.e431 * this.e235) + (right_dual.e435 * this.e321) + (right_dual.e321 * this.e435) + (right_dual.e235 * this.e431), -(right_dual.e412 * this.e435) - (right_dual.e415 * this.e423) - (right_dual.e425 * this.e431) - (right_dual.e435 * this.e412)) - float4((right_dual.group0.xyz.yzx * this.group8.xyz.zxy), right_dual.e423 * this.e415) - float4((right_dual.group2.xyz.zxy * this.group7.xyz.yzx), right_dual.e431 * this.e425), 
            /* e5 */
            -(right_dual.e415 * this.e235) - (right_dual.e425 * this.e315) - (right_dual.e435 * this.e125) - (right_dual.e235 * this.e415) - (right_dual.e315 * this.e425) - (right_dual.e125 * this.e435), 
            /* e15, e25, e35, e45 */
            float4((right_dual.e415 * this.e3215) + (right_dual.e315 * this.e4125), (right_dual.e425 * this.e3215) + (right_dual.e125 * this.e4235), (right_dual.e435 * this.e3215) + (right_dual.e235 * this.e4315), -(right_dual.e425 * this.e4315) - (right_dual.e435 * this.e4125)) - (this.group9.yzxx * float4(right_dual.group2.xyz.zxy, right_dual.e415)), 
            /* e41, e42, e43 */
            (float3(this.e1234) * right_dual.group1.xyz) + (right_dual.group0.xyz.zxy * this.group9.yzx) - (right_dual.group0.xyz.yzx * this.group9.zxy), 
            /* e23, e31, e12 */
            (float3(this.e3215) * right_dual.group0.xyz) + (float3(this.e1234) * right_dual.group2.xyz) - (float3(right_dual.e321) * this.group9.xyz), 
            /* e415, e425, e435, e321 */
            float4(this.e12345) * right_dual.group1, 
            /* e423, e431, e412 */
            float3(this.e12345) * right_dual.group0.xyz, 
            /* e235, e315, e125 */
            float3(this.e12345) * right_dual.group2.xyz, 
            /* e4235, e4315, e4125, e3215 */
            float4(0.0), 
            /* e1234 */
            0.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(0.0, -(other.e41 * anti_wedge.e235) - (other.e42 * anti_wedge.e315) - (other.e43 * anti_wedge.e125) - (other.e23 * anti_wedge.e415) - (other.e31 * anti_wedge.e425) - (other.e12 * anti_wedge.e435) - (other.e45 * anti_wedge.e321) - (other.e15 * anti_wedge.e423) - (other.e25 * anti_wedge.e431) - (other.e35 * anti_wedge.e412)), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5 */
            0.0, 
            /* e15, e25, e35, e45 */
            float4(anti_wedge.scalar) * float4(other.group2.xyz, other.e45), 
            /* e41, e42, e43 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e23, e31, e12 */
            float3(anti_wedge.scalar) * other.group1.xyz, 
            /* e415, e425, e435, e321 */
            float4((other.e41 * anti_wedge.e5) + (other.e15 * anti_wedge.e4), (other.e42 * anti_wedge.e5) + (other.e25 * anti_wedge.e4), (other.e43 * anti_wedge.e5) + (other.e35 * anti_wedge.e4), -(other.e31 * anti_wedge.e2) - (other.e12 * anti_wedge.e3)) - (other.group1.wwwx * anti_wedge.group1.xyzx), 
            /* e423, e431, e412 */
            (float3(anti_wedge.e4) * other.group1.xyz) + (other.group0.xyz.yzx * anti_wedge.group1.zxy) - (other.group0.xyz.zxy * anti_wedge.group1.yzx), 
            /* e235, e315, e125 */
            (float3(anti_wedge.e5) * other.group1.xyz) + (other.group2.xyz.zxy * anti_wedge.group1.yzx) - (other.group2.xyz.yzx * anti_wedge.group1.zxy), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e42 * anti_wedge.e35) + (other.e23 * anti_wedge.e45) + (other.e45 * anti_wedge.e23) + (other.e35 * anti_wedge.e42), (other.e43 * anti_wedge.e15) + (other.e31 * anti_wedge.e45) + (other.e45 * anti_wedge.e31) + (other.e15 * anti_wedge.e43), (other.e41 * anti_wedge.e25) + (other.e12 * anti_wedge.e45) + (other.e45 * anti_wedge.e12) + (other.e25 * anti_wedge.e41), -(other.e23 * anti_wedge.e15) - (other.e31 * anti_wedge.e25) - (other.e12 * anti_wedge.e35) - (other.e35 * anti_wedge.e12)) - float4((other.group0.xyz.zxy * anti_wedge.group3.yzx), other.e15 * anti_wedge.e23) - float4((other.group2.xyz.yzx * anti_wedge.group4.xyz.zxy), other.e25 * anti_wedge.e31), 
            /* e1234 */
            -(other.e41 * anti_wedge.e23) - (other.e42 * anti_wedge.e31) - (other.e43 * anti_wedge.e12) - (other.e23 * anti_wedge.e41) - (other.e31 * anti_wedge.e42) - (other.e12 * anti_wedge.e43)
        );
    }
}
// Fancy infix trick (second half)
public MultiVector operator /(AntiProjectViaHorizonOntoInfixPartial<MultiVector> lhs, DipoleInversion rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension MultiVector {
    public MultiVector anti_project_via_horizon_onto(DipoleInversion other) {
        AntiDipoleInversion right_dual = AntiDipoleInversion(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        MultiVector anti_wedge = MultiVector(
            /* scalar, e12345 */
            float2((right_dual.e4 * this.e3215) + (right_dual.e1 * this.e4235) + (right_dual.e2 * this.e4315) + (right_dual.e3 * this.e4125) + (right_dual.e5 * this.e1234) - (right_dual.e423 * this.e15) - (right_dual.e431 * this.e25) - (right_dual.e412 * this.e35) - (right_dual.e415 * this.e23) - (right_dual.e425 * this.e31) - (right_dual.e435 * this.e12) - (right_dual.e321 * this.e45) - (right_dual.e235 * this.e41) - (right_dual.e315 * this.e42) - (right_dual.e125 * this.e43), 0.0), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e412 * this.e315) + (right_dual.e415 * this.e321) + (right_dual.e321 * this.e415) + (right_dual.e315 * this.e412), (right_dual.e423 * this.e125) + (right_dual.e425 * this.e321) + (right_dual.e321 * this.e425) + (right_dual.e125 * this.e423), (right_dual.e431 * this.e235) + (right_dual.e435 * this.e321) + (right_dual.e321 * this.e435) + (right_dual.e235 * this.e431), -(right_dual.e412 * this.e435) - (right_dual.e415 * this.e423) - (right_dual.e425 * this.e431) - (right_dual.e435 * this.e412)) + (float4(this.e12345) * float4(right_dual.group3.xyz, right_dual.e4)) - float4((right_dual.group0.xyz.yzx * this.group8.xyz.zxy), right_dual.e423 * this.e415) - float4((this.group7.xyz.yzx * right_dual.group2.zxy), right_dual.e431 * this.e425), 
            /* e5 */
            (right_dual.e5 * this.e12345) - (right_dual.e415 * this.e235) - (right_dual.e425 * this.e315) - (right_dual.e435 * this.e125) - (right_dual.e235 * this.e415) - (right_dual.e315 * this.e425) - (right_dual.e125 * this.e435), 
            /* e15, e25, e35, e45 */
            float4((right_dual.e415 * this.e3215) + (right_dual.e315 * this.e4125), (right_dual.e425 * this.e3215) + (right_dual.e125 * this.e4235), (right_dual.e435 * this.e3215) + (right_dual.e235 * this.e4315), -(right_dual.e425 * this.e4315) - (right_dual.e435 * this.e4125)) - (this.group9.yzxx * float4(right_dual.group2.zxy, right_dual.e415)), 
            /* e41, e42, e43 */
            (float3(this.e1234) * right_dual.group1.xyz) + (right_dual.group0.xyz.zxy * this.group9.yzx) - (right_dual.group0.xyz.yzx * this.group9.zxy), 
            /* e23, e31, e12 */
            (float3(this.e3215) * right_dual.group0.xyz) + (float3(this.e1234) * right_dual.group2.xyz) - (float3(right_dual.e321) * this.group9.xyz), 
            /* e415, e425, e435, e321 */
            float4(this.e12345) * right_dual.group1, 
            /* e423, e431, e412 */
            float3(this.e12345) * right_dual.group0.xyz, 
            /* e235, e315, e125 */
            float3(this.e12345) * right_dual.group2.xyz, 
            /* e4235, e4315, e4125, e3215 */
            float4(0.0), 
            /* e1234 */
            0.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(0.0, (other.e1234 * anti_wedge.e5) + (other.e4235 * anti_wedge.e1) + (other.e4315 * anti_wedge.e2) + (other.e4125 * anti_wedge.e3) + (other.e3215 * anti_wedge.e4) - (other.e41 * anti_wedge.e235) - (other.e42 * anti_wedge.e315) - (other.e43 * anti_wedge.e125) - (other.e23 * anti_wedge.e415) - (other.e31 * anti_wedge.e425) - (other.e12 * anti_wedge.e435) - (other.e45 * anti_wedge.e321) - (other.e15 * anti_wedge.e423) - (other.e25 * anti_wedge.e431) - (other.e35 * anti_wedge.e412)), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5 */
            0.0, 
            /* e15, e25, e35, e45 */
            float4(anti_wedge.scalar) * float4(other.group2.xyz, other.e45), 
            /* e41, e42, e43 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e23, e31, e12 */
            float3(anti_wedge.scalar) * other.group1.xyz, 
            /* e415, e425, e435, e321 */
            float4((other.e41 * anti_wedge.e5) + (other.e15 * anti_wedge.e4), (other.e42 * anti_wedge.e5) + (other.e25 * anti_wedge.e4), (other.e43 * anti_wedge.e5) + (other.e35 * anti_wedge.e4), -(other.e31 * anti_wedge.e2) - (other.e12 * anti_wedge.e3)) - (other.group1.wwwx * anti_wedge.group1.xyzx), 
            /* e423, e431, e412 */
            (float3(anti_wedge.e4) * other.group1.xyz) + (other.group0.xyz.yzx * anti_wedge.group1.zxy) - (other.group0.xyz.zxy * anti_wedge.group1.yzx), 
            /* e235, e315, e125 */
            (float3(anti_wedge.e5) * other.group1.xyz) + (other.group2.zxy * anti_wedge.group1.yzx) - (other.group2.yzx * anti_wedge.group1.zxy), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e42 * anti_wedge.e35) + (other.e23 * anti_wedge.e45) + (other.e45 * anti_wedge.e23) + (other.e35 * anti_wedge.e42), (other.e43 * anti_wedge.e15) + (other.e31 * anti_wedge.e45) + (other.e45 * anti_wedge.e31) + (other.e15 * anti_wedge.e43), (other.e41 * anti_wedge.e25) + (other.e12 * anti_wedge.e45) + (other.e45 * anti_wedge.e12) + (other.e25 * anti_wedge.e41), -(other.e23 * anti_wedge.e15) - (other.e31 * anti_wedge.e25) - (other.e12 * anti_wedge.e35) - (other.e35 * anti_wedge.e12)) + (float4(anti_wedge.scalar) * other.group3) - (other.group2.yzxy * float4(anti_wedge.group4.xyz.zxy, anti_wedge.e31)) - float4((other.group0.xyz.zxy * anti_wedge.group3.yzx), other.e15 * anti_wedge.e23), 
            /* e1234 */
            (other.e1234 * anti_wedge.scalar) - (other.e41 * anti_wedge.e23) - (other.e42 * anti_wedge.e31) - (other.e43 * anti_wedge.e12) - (other.e23 * anti_wedge.e41) - (other.e31 * anti_wedge.e42) - (other.e12 * anti_wedge.e43)
        );
    }
}
// Fancy infix trick (second half)
public MultiVector operator /(AntiProjectViaHorizonOntoInfixPartial<MultiVector> lhs, DualNum rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension MultiVector {
    public MultiVector anti_project_via_horizon_onto(DualNum other) {
        AntiDualNum right_dual = AntiDualNum(
            /* e3215, scalar */
            other.group0.xy * float2(-1.0)
        );
        MultiVector anti_wedge = MultiVector(
            /* scalar, e12345 */
            float2((right_dual.e3215 * this.e4) + (right_dual.scalar * this.e12345), 0.0), 
            /* e1, e2, e3, e4 */
            float4(right_dual.group0.xy.xx, right_dual.e3215, 0.0) * float4(float3(1.0), 0.0) * float4(this.group4.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e5 */
            right_dual.e3215 * this.e45, 
            /* e15, e25, e35, e45 */
            float4(right_dual.group0.xy.xx, right_dual.e3215, 0.0) * float4(float3(1.0), 0.0) * float4(this.group6.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(right_dual.e3215) * this.group7.xyz, 
            /* e415, e425, e435, e321 */
            float4(float3(0.0), right_dual.e3215 * this.e1234), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            float3(right_dual.e3215) * this.group9.xyz, 
            /* e4235, e4315, e4125, e3215 */
            float4(float3(0.0), right_dual.e3215 * this.e12345), 
            /* e1234 */
            0.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(0.0, (other.e5 * anti_wedge.e1234) + (other.e12345 * anti_wedge.scalar)), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5 */
            other.e5 * anti_wedge.scalar, 
            /* e15, e25, e35, e45 */
            float4(other.group0.xy.xx, other.e5, 0.0) * float4(float3(1.0), 0.0) * float4(anti_wedge.group1.xyz, 0.0) * float4(-1.0, -1.0, -1.0, 0.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(0.0), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            float3(other.e5) * anti_wedge.group5.xyz, 
            /* e4235, e4315, e4125, e3215 */
            float4(float3(0.0), other.e5 * anti_wedge.e321 * -1.0), 
            /* e1234 */
            0.0
        );
    }
}
// Fancy infix trick (second half)
public MultiVector operator /(AntiProjectViaHorizonOntoInfixPartial<MultiVector> lhs, FlatPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension MultiVector {
    public MultiVector anti_project_via_horizon_onto(FlatPoint other) {
        AntiFlatPoint right_dual = AntiFlatPoint(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        MultiVector anti_wedge = MultiVector(
            /* scalar, e12345 */
            float2(-(right_dual.e235 * this.e41) - (right_dual.e315 * this.e42) - (right_dual.e125 * this.e43) - (right_dual.e321 * this.e45), 0.0), 
            /* e1, e2, e3, e4 */
            float4((float3(right_dual.e321) * this.group6.xyz), 0.0) + float4((this.group7.xyz.zxy * right_dual.group0.yzx), 0.0) - float4((this.group7.xyz.yzx * right_dual.group0.zxy), 0.0), 
            /* e5 */
            -(right_dual.e235 * this.e415) - (right_dual.e315 * this.e425) - (right_dual.e125 * this.e435), 
            /* e15, e25, e35, e45 */
            float4(((right_dual.group0.yzx * this.group9.zxy) - (right_dual.group0.zxy * this.group9.yzx)), 0.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            (float3(this.e1234) * right_dual.group0.xyz) - (float3(right_dual.e321) * this.group9.xyz), 
            /* e415, e425, e435, e321 */
            float4(float3(0.0), right_dual.e321 * this.e12345), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            float3(this.e12345) * right_dual.group0.xyz, 
            /* e4235, e4315, e4125, e3215 */
            float4(0.0), 
            /* e1234 */
            0.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(0.0, -(other.e15 * anti_wedge.e423) - (other.e25 * anti_wedge.e431) - (other.e35 * anti_wedge.e412) - (other.e45 * anti_wedge.e321)), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5 */
            0.0, 
            /* e15, e25, e35, e45 */
            float4(anti_wedge.scalar) * other.group0, 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(((float3(anti_wedge.e4) * other.group0.xyz) - (float3(other.e45) * anti_wedge.group1.xyz)), 0.0), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            (other.group0.zxy * anti_wedge.group1.yzx) - (other.group0.yzx * anti_wedge.group1.zxy), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e35 * anti_wedge.e42) + (other.e45 * anti_wedge.e23), (other.e15 * anti_wedge.e43) + (other.e45 * anti_wedge.e31), (other.e25 * anti_wedge.e41) + (other.e45 * anti_wedge.e12), -(other.e25 * anti_wedge.e31) - (other.e35 * anti_wedge.e12)) - (other.group0.yzxx * float4(anti_wedge.group4.xyz.zxy, anti_wedge.e23)), 
            /* e1234 */
            0.0
        );
    }
}
// Fancy infix trick (second half)
public MultiVector operator /(AntiProjectViaHorizonOntoInfixPartial<MultiVector> lhs, Flector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension MultiVector {
    public MultiVector anti_project_via_horizon_onto(Flector other) {
        AntiFlector right_dual = AntiFlector(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        MultiVector anti_wedge = MultiVector(
            /* scalar, e12345 */
            float2((right_dual.e1 * this.e4235) + (right_dual.e2 * this.e4315) + (right_dual.e3 * this.e4125) + (right_dual.e5 * this.e1234) - (right_dual.e235 * this.e41) - (right_dual.e315 * this.e42) - (right_dual.e125 * this.e43) - (right_dual.e321 * this.e45), 0.0), 
            /* e1, e2, e3, e4 */
            float4((float3(right_dual.e321) * this.group6.xyz), 0.0) + float4((float3(this.e12345) * right_dual.group1.xyz), 0.0) + float4((this.group7.xyz.zxy * right_dual.group0.yzx), 0.0) - float4((this.group7.xyz.yzx * right_dual.group0.zxy), 0.0), 
            /* e5 */
            (right_dual.e5 * this.e12345) - (right_dual.e235 * this.e415) - (right_dual.e315 * this.e425) - (right_dual.e125 * this.e435), 
            /* e15, e25, e35, e45 */
            float4(((right_dual.group0.yzx * this.group9.zxy) - (right_dual.group0.zxy * this.group9.yzx)), 0.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            (float3(this.e1234) * right_dual.group0.xyz) - (float3(right_dual.e321) * this.group9.xyz), 
            /* e415, e425, e435, e321 */
            float4(float3(0.0), right_dual.e321 * this.e12345), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            float3(this.e12345) * right_dual.group0.xyz, 
            /* e4235, e4315, e4125, e3215 */
            float4(0.0), 
            /* e1234 */
            0.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(0.0, (other.e4235 * anti_wedge.e1) + (other.e4315 * anti_wedge.e2) + (other.e4125 * anti_wedge.e3) + (other.e3215 * anti_wedge.e4) - (other.e15 * anti_wedge.e423) - (other.e25 * anti_wedge.e431) - (other.e35 * anti_wedge.e412) - (other.e45 * anti_wedge.e321)), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5 */
            0.0, 
            /* e15, e25, e35, e45 */
            float4(anti_wedge.scalar) * other.group0, 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(((float3(anti_wedge.e4) * other.group0.xyz) - (float3(other.e45) * anti_wedge.group1.xyz)), 0.0), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            (other.group0.zxy * anti_wedge.group1.yzx) - (other.group0.yzx * anti_wedge.group1.zxy), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e35 * anti_wedge.e42) + (other.e45 * anti_wedge.e23), (other.e15 * anti_wedge.e43) + (other.e45 * anti_wedge.e31), (other.e25 * anti_wedge.e41) + (other.e45 * anti_wedge.e12), -(other.e25 * anti_wedge.e31) - (other.e35 * anti_wedge.e12)) + (float4(anti_wedge.scalar) * other.group1) - (other.group0.yzxx * float4(anti_wedge.group4.xyz.zxy, anti_wedge.e23)), 
            /* e1234 */
            0.0
        );
    }
}
// Fancy infix trick (second half)
public MultiVector operator /(AntiProjectViaHorizonOntoInfixPartial<MultiVector> lhs, Line rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension MultiVector {
    public MultiVector anti_project_via_horizon_onto(Line other) {
        AntiLine right_dual = AntiLine(
            /* e23, e31, e12 */
            other.group0.xyz, 
            /* e15, e25, e35 */
            other.group1.xyz
        );
        MultiVector anti_wedge = MultiVector(
            /* scalar, e12345 */
            float2(-(right_dual.e23 * this.e415) - (right_dual.e31 * this.e425) - (right_dual.e12 * this.e435) - (right_dual.e15 * this.e423) - (right_dual.e25 * this.e431) - (right_dual.e35 * this.e412), 0.0), 
            /* e1, e2, e3, e4 */
            float4((float3(this.e1234) * right_dual.group1.xyz), 0.0) + float4((right_dual.group0.xyz.zxy * this.group9.yzx), 0.0) - float4((right_dual.group0.xyz.yzx * this.group9.zxy), 0.0), 
            /* e5 */
            -(right_dual.e15 * this.e4235) - (right_dual.e25 * this.e4315) - (right_dual.e35 * this.e4125), 
            /* e15, e25, e35, e45 */
            float4(this.group0.xy.yy, this.e12345, 0.0) * float4(float3(1.0), 0.0) * float4(right_dual.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(this.e12345) * right_dual.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(0.0), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            float3(0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(0.0), 
            /* e1234 */
            0.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(0.0, -(other.e415 * anti_wedge.e23) - (other.e425 * anti_wedge.e31) - (other.e435 * anti_wedge.e12) - (other.e235 * anti_wedge.e41) - (other.e315 * anti_wedge.e42) - (other.e125 * anti_wedge.e43)), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5 */
            0.0, 
            /* e15, e25, e35, e45 */
            float4(0.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(anti_wedge.group0.xy.xx, anti_wedge.scalar, 0.0) * float4(float3(1.0), 0.0) * float4(other.group0.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            float3(anti_wedge.scalar) * other.group1.xyz, 
            /* e4235, e4315, e4125, e3215 */
            float4(-(other.e425 * anti_wedge.e3) - (other.e235 * anti_wedge.e4), -(other.e435 * anti_wedge.e1) - (other.e315 * anti_wedge.e4), -(other.e415 * anti_wedge.e2) - (other.e125 * anti_wedge.e4), (other.e315 * anti_wedge.e2) + (other.e125 * anti_wedge.e3)) + (anti_wedge.group1.yzxx * float4(other.group0.xyz.zxy, other.e235)), 
            /* e1234 */
            0.0
        );
    }
}
// Fancy infix trick (second half)
public MultiVector operator /(AntiProjectViaHorizonOntoInfixPartial<MultiVector> lhs, Motor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension MultiVector {
    public MultiVector anti_project_via_horizon_onto(Motor other) {
        AntiMotor right_dual = AntiMotor(
            /* e23, e31, e12, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        MultiVector anti_wedge = MultiVector(
            /* scalar, e12345 */
            float2((right_dual.scalar * this.e12345) + (right_dual.e3215 * this.e4) - (right_dual.e23 * this.e415) - (right_dual.e31 * this.e425) - (right_dual.e12 * this.e435) - (right_dual.e15 * this.e423) - (right_dual.e25 * this.e431) - (right_dual.e35 * this.e412), 0.0), 
            /* e1, e2, e3, e4 */
            float4((float3(right_dual.e3215) * this.group4.xyz), 0.0) + float4((float3(this.e1234) * right_dual.group1.xyz), 0.0) + float4((right_dual.group0.zxy * this.group9.yzx), 0.0) - float4((right_dual.group0.yzx * this.group9.zxy), 0.0), 
            /* e5 */
            (right_dual.e3215 * this.e45) - (right_dual.e15 * this.e4235) - (right_dual.e25 * this.e4315) - (right_dual.e35 * this.e4125), 
            /* e15, e25, e35, e45 */
            float4(((float3(right_dual.e3215) * this.group6.xyz) + (float3(this.e12345) * right_dual.group1.xyz)), 0.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            (float3(right_dual.e3215) * this.group7.xyz) + (float3(this.e12345) * right_dual.group0.xyz), 
            /* e415, e425, e435, e321 */
            float4(float3(0.0), right_dual.e3215 * this.e1234), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            float3(right_dual.e3215) * this.group9.xyz, 
            /* e4235, e4315, e4125, e3215 */
            float4(float3(0.0), right_dual.e3215 * this.e12345), 
            /* e1234 */
            0.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(0.0, (other.e12345 * anti_wedge.scalar) + (other.e5 * anti_wedge.e1234) - (other.e415 * anti_wedge.e23) - (other.e425 * anti_wedge.e31) - (other.e435 * anti_wedge.e12) - (other.e235 * anti_wedge.e41) - (other.e315 * anti_wedge.e42) - (other.e125 * anti_wedge.e43)), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5 */
            other.e5 * anti_wedge.scalar, 
            /* e15, e25, e35, e45 */
            float4(float3(1.0), 0.0) * float4(other.group1.www, 0.0) * float4(anti_wedge.group1.xyz, 0.0) * float4(-1.0, -1.0, -1.0, 0.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(((float3(other.e5) * anti_wedge.group4.xyz) + (float3(anti_wedge.scalar) * other.group0.xyz)), 0.0), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            (float3(other.e5) * anti_wedge.group5.xyz) + (float3(anti_wedge.scalar) * other.group1.xyz), 
            /* e4235, e4315, e4125, e3215 */
            float4(-(other.e425 * anti_wedge.e3) - (other.e235 * anti_wedge.e4), -(other.e435 * anti_wedge.e1) - (other.e315 * anti_wedge.e4), -(other.e415 * anti_wedge.e2) - (other.e125 * anti_wedge.e4), (other.e315 * anti_wedge.e2) + (other.e125 * anti_wedge.e3)) + (anti_wedge.group1.yzxx * float4(other.group0.zxy, other.e235)) - float4((anti_wedge.group7.xyz * other.group1.www), other.e5 * anti_wedge.e321), 
            /* e1234 */
            0.0
        );
    }
}
// Fancy infix trick (second half)
public MultiVector operator /(AntiProjectViaHorizonOntoInfixPartial<MultiVector> lhs, MultiVector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension MultiVector {
    public MultiVector anti_project_via_horizon_onto(MultiVector other) {
        MultiVector right_dual = MultiVector(
            /* scalar, e12345 */
            other.group0.xy.yx * float2(-1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215, 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43 */
            other.group7.xyz, 
            /* e23, e31, e12 */
            other.group6.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412 */
            other.group4.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group3.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        MultiVector anti_wedge = MultiVector(
            /* scalar, e12345 */
            float2((right_dual.scalar * this.e12345) + (right_dual.e12345 * this.scalar) + (right_dual.e1 * this.e4235) + (right_dual.e2 * this.e4315) + (right_dual.e3 * this.e4125) + (right_dual.e4 * this.e3215) + (right_dual.e5 * this.e1234) + (right_dual.e4235 * this.e1) + (right_dual.e4315 * this.e2) + (right_dual.e4125 * this.e3) + (right_dual.e3215 * this.e4) + (right_dual.e1234 * this.e5) - (right_dual.e15 * this.e423) - (right_dual.e25 * this.e431) - (right_dual.e35 * this.e412) - (right_dual.e45 * this.e321) - (right_dual.e41 * this.e235) - (right_dual.e42 * this.e315) - (right_dual.e43 * this.e125) - (right_dual.e23 * this.e415) - (right_dual.e31 * this.e425) - (right_dual.e12 * this.e435) - (right_dual.e415 * this.e23) - (right_dual.e425 * this.e31) - (right_dual.e435 * this.e12) - (right_dual.e321 * this.e45) - (right_dual.e423 * this.e15) - (right_dual.e431 * this.e25) - (right_dual.e412 * this.e35) - (right_dual.e235 * this.e41) - (right_dual.e315 * this.e42) - (right_dual.e125 * this.e43), right_dual.e12345 * this.e12345), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e15 * this.e1234) + (right_dual.e415 * this.e321) + (right_dual.e321 * this.e415) + (right_dual.e4125 * this.e31), (right_dual.e25 * this.e1234) + (right_dual.e425 * this.e321) + (right_dual.e321 * this.e425) + (right_dual.e4235 * this.e12), (right_dual.e35 * this.e1234) + (right_dual.e435 * this.e321) + (right_dual.e321 * this.e435) + (right_dual.e4315 * this.e23), -(right_dual.e415 * this.e423) - (right_dual.e425 * this.e431) - (right_dual.e435 * this.e412) - (right_dual.e1234 * this.e45)) + (float4(right_dual.e12345) * this.group1) + (float4(this.e12345) * right_dual.group1) + (this.group9.yzxx * float4(right_dual.group5.xyz.zxy, right_dual.e41)) + float4((this.group4.xyz * right_dual.group9.www), right_dual.e45 * this.e1234) + float4((right_dual.group7.xyz.zxy * this.group8.xyz.yzx), right_dual.e42 * this.e4315) + float4((right_dual.group8.xyz.yzx * this.group7.xyz.zxy), right_dual.e43 * this.e4125) - (right_dual.group9.yzxy * float4(this.group5.xyz.zxy, this.e42)) - float4((float3(right_dual.e1234) * this.group3.xyz), right_dual.e4125 * this.e43) - float4((right_dual.group4.xyz * this.group9.www), right_dual.e423 * this.e415) - float4((right_dual.group5.xyz.yzx * this.group9.zxy), right_dual.e431 * this.e425) - float4((right_dual.group7.xyz.yzx * this.group8.xyz.zxy), right_dual.e412 * this.e435) - float4((right_dual.group8.xyz.zxy * this.group7.xyz.yzx), right_dual.e4235 * this.e41), 
            /* e5 */
            (right_dual.e12345 * this.e5) + (right_dual.e5 * this.e12345) + (right_dual.e4235 * this.e15) + (right_dual.e4315 * this.e25) + (right_dual.e4125 * this.e35) + (right_dual.e3215 * this.e45) - (right_dual.e15 * this.e4235) - (right_dual.e25 * this.e4315) - (right_dual.e35 * this.e4125) - (right_dual.e45 * this.e3215) - (right_dual.e415 * this.e235) - (right_dual.e425 * this.e315) - (right_dual.e435 * this.e125) - (right_dual.e235 * this.e415) - (right_dual.e315 * this.e425) - (right_dual.e125 * this.e435), 
            /* e15, e25, e35, e45 */
            float4((right_dual.e415 * this.e3215) + (right_dual.e315 * this.e4125) + (right_dual.e4125 * this.e315) + (right_dual.e3215 * this.e415), (right_dual.e425 * this.e3215) + (right_dual.e125 * this.e4235) + (right_dual.e4235 * this.e125) + (right_dual.e3215 * this.e425), (right_dual.e435 * this.e3215) + (right_dual.e235 * this.e4315) + (right_dual.e4315 * this.e235) + (right_dual.e3215 * this.e435), -(right_dual.e435 * this.e4125) - (right_dual.e4235 * this.e415) - (right_dual.e4315 * this.e425) - (right_dual.e4125 * this.e435)) + (float4(right_dual.e12345) * this.group3) + (float4(this.e12345) * right_dual.group3) - (this.group9.yzxx * float4(right_dual.group8.xyz.zxy, right_dual.e415)) - float4((this.group8.xyz.zxy * right_dual.group9.yzx), right_dual.e425 * this.e4315), 
            /* e41, e42, e43 */
            (float3(right_dual.e12345) * this.group4.xyz) + (float3(right_dual.e1234) * this.group6.xyz) + (float3(this.e12345) * right_dual.group4.xyz) + (float3(this.e1234) * right_dual.group6.xyz) + (right_dual.group7.xyz.zxy * this.group9.yzx) + (this.group7.xyz.zxy * right_dual.group9.yzx) - (right_dual.group7.xyz.yzx * this.group9.zxy) - (this.group7.xyz.yzx * right_dual.group9.zxy), 
            /* e23, e31, e12 */
            (float3(right_dual.e12345) * this.group5.xyz) + (float3(right_dual.e3215) * this.group7.xyz) + (float3(right_dual.e1234) * this.group8.xyz) + (float3(this.e12345) * right_dual.group5.xyz) + (float3(this.e3215) * right_dual.group7.xyz) + (float3(this.e1234) * right_dual.group8.xyz) - (float3(right_dual.e321) * this.group9.xyz) - (float3(this.e321) * right_dual.group9.xyz), 
            /* e415, e425, e435, e321 */
            (float4(right_dual.e12345) * this.group6) + (float4(this.e12345) * right_dual.group6) + (right_dual.group9.yzxw * float4(this.group9.zxy, this.e1234)) - float4((right_dual.group9.zxy * this.group9.yzx), right_dual.e1234 * this.e3215), 
            /* e423, e431, e412 */
            (float3(right_dual.e12345) * this.group7.xyz) + (float3(this.e12345) * right_dual.group7.xyz) + (float3(this.e1234) * right_dual.group9.xyz) - (float3(right_dual.e1234) * this.group9.xyz), 
            /* e235, e315, e125 */
            (float3(right_dual.e12345) * this.group8.xyz) + (float3(right_dual.e3215) * this.group9.xyz) + (float3(this.e12345) * right_dual.group8.xyz) - (float3(this.e3215) * right_dual.group9.xyz), 
            /* e4235, e4315, e4125, e3215 */
            (float4(right_dual.e12345) * this.group9) + (float4(this.e12345) * right_dual.group9), 
            /* e1234 */
            (right_dual.e12345 * this.e1234) + (right_dual.e1234 * this.e12345)
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(anti_wedge.scalar * other.scalar, (anti_wedge.scalar * other.e12345) + (anti_wedge.e12345 * other.scalar) + (anti_wedge.e1 * other.e4235) + (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) + (anti_wedge.e4 * other.e3215) + (anti_wedge.e5 * other.e1234) + (anti_wedge.e4235 * other.e1) + (anti_wedge.e4315 * other.e2) + (anti_wedge.e4125 * other.e3) + (anti_wedge.e3215 * other.e4) + (anti_wedge.e1234 * other.e5) - (anti_wedge.e15 * other.e423) - (anti_wedge.e25 * other.e431) - (anti_wedge.e35 * other.e412) - (anti_wedge.e45 * other.e321) - (anti_wedge.e41 * other.e235) - (anti_wedge.e42 * other.e315) - (anti_wedge.e43 * other.e125) - (anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435) - (anti_wedge.e415 * other.e23) - (anti_wedge.e425 * other.e31) - (anti_wedge.e435 * other.e12) - (anti_wedge.e321 * other.e45) - (anti_wedge.e423 * other.e15) - (anti_wedge.e431 * other.e25) - (anti_wedge.e412 * other.e35) - (anti_wedge.e235 * other.e41) - (anti_wedge.e315 * other.e42) - (anti_wedge.e125 * other.e43)), 
            /* e1, e2, e3, e4 */
            (float4(anti_wedge.scalar) * other.group1) + (float4(other.scalar) * anti_wedge.group1), 
            /* e5 */
            (anti_wedge.scalar * other.e5) + (anti_wedge.e5 * other.scalar), 
            /* e15, e25, e35, e45 */
            (float4(anti_wedge.scalar) * other.group3) + (float4(anti_wedge.e5) * other.group1) + (float4(other.scalar) * anti_wedge.group3) - (float4(other.e5) * anti_wedge.group1), 
            /* e41, e42, e43 */
            (float3(anti_wedge.scalar) * other.group4.xyz) + (float3(other.scalar) * anti_wedge.group4.xyz) + (float3(other.e4) * anti_wedge.group1.xyz) - (float3(anti_wedge.e4) * other.group1.xyz), 
            /* e23, e31, e12 */
            (float3(anti_wedge.scalar) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group5.xyz) + (anti_wedge.group1.zxy * other.group1.yzx) - (anti_wedge.group1.yzx * other.group1.zxy), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e4 * other.e15) + (anti_wedge.e5 * other.e41) + (anti_wedge.e15 * other.e4) + (anti_wedge.e41 * other.e5), (anti_wedge.e4 * other.e25) + (anti_wedge.e5 * other.e42) + (anti_wedge.e25 * other.e4) + (anti_wedge.e42 * other.e5), (anti_wedge.e4 * other.e35) + (anti_wedge.e5 * other.e43) + (anti_wedge.e35 * other.e4) + (anti_wedge.e43 * other.e5), -(anti_wedge.e1 * other.e23) - (anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12) - (anti_wedge.e12 * other.e3)) + (float4(anti_wedge.scalar) * other.group6) + (float4(other.scalar) * anti_wedge.group6) - (other.group1.xyzy * float4(anti_wedge.group3.www, anti_wedge.e31)) - float4((other.group3.www * anti_wedge.group1.xyz), anti_wedge.e23 * other.e1), 
            /* e423, e431, e412 */
            (float3(anti_wedge.scalar) * other.group7.xyz) + (float3(anti_wedge.e4) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group7.xyz) + (float3(other.e4) * anti_wedge.group5.xyz) + (anti_wedge.group4.xyz.yzx * other.group1.zxy) + (other.group4.xyz.yzx * anti_wedge.group1.zxy) - (anti_wedge.group4.xyz.zxy * other.group1.yzx) - (other.group4.xyz.zxy * anti_wedge.group1.yzx), 
            /* e235, e315, e125 */
            (float3(anti_wedge.scalar) * other.group8.xyz) + (float3(anti_wedge.e5) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group8.xyz) + (float3(other.e5) * anti_wedge.group5.xyz) + (anti_wedge.group1.yzx * other.group3.zxy) + (anti_wedge.group3.zxy * other.group1.yzx) - (anti_wedge.group1.zxy * other.group3.yzx) - (anti_wedge.group3.yzx * other.group1.zxy), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e2 * other.e435) + (anti_wedge.e5 * other.e423) + (anti_wedge.e45 * other.e23) + (anti_wedge.e425 * other.e3), (anti_wedge.e3 * other.e415) + (anti_wedge.e5 * other.e431) + (anti_wedge.e45 * other.e31) + (anti_wedge.e435 * other.e1), (anti_wedge.e1 * other.e425) + (anti_wedge.e5 * other.e412) + (anti_wedge.e45 * other.e12) + (anti_wedge.e415 * other.e2), -(anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12) - (anti_wedge.e321 * other.e5)) + (float4(anti_wedge.scalar) * other.group9) + (float4(other.scalar) * anti_wedge.group9) + float4((anti_wedge.group5.xyz * other.group3.www), anti_wedge.e2 * other.e315) + float4((anti_wedge.group8.xyz * other.group1.www), anti_wedge.e3 * other.e125) + float4((anti_wedge.group4.xyz.yzx * other.group3.zxy), anti_wedge.e1 * other.e235) + float4((other.group4.xyz.yzx * anti_wedge.group3.zxy), anti_wedge.e5 * other.e321) - (other.group1.yzxz * float4(anti_wedge.group6.zxy, anti_wedge.e125)) - (other.group3.yzxx * float4(anti_wedge.group4.xyz.zxy, anti_wedge.e23)) - float4((float3(other.e5) * anti_wedge.group7.xyz), anti_wedge.e31 * other.e25) - float4((other.group8.xyz * anti_wedge.group1.www), anti_wedge.e235 * other.e1) - float4((other.group4.xyz.zxy * anti_wedge.group3.yzx), anti_wedge.e12 * other.e35) - float4((anti_wedge.group1.zxy * other.group6.yzx), anti_wedge.e315 * other.e2), 
            /* e1234 */
            (anti_wedge.scalar * other.e1234) + (anti_wedge.e321 * other.e4) + (anti_wedge.e423 * other.e1) + (anti_wedge.e431 * other.e2) + (anti_wedge.e412 * other.e3) + (anti_wedge.e1234 * other.scalar) - (anti_wedge.e1 * other.e423) - (anti_wedge.e2 * other.e431) - (anti_wedge.e3 * other.e412) - (anti_wedge.e4 * other.e321) - (anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12) - (anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)
        );
    }
}
// Fancy infix trick (second half)
public MultiVector operator /(AntiProjectViaHorizonOntoInfixPartial<MultiVector> lhs, Plane rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension MultiVector {
    public MultiVector anti_project_via_horizon_onto(Plane other) {
        AntiPlane right_dual = AntiPlane(
            /* e1, e2, e3, e5 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        MultiVector anti_wedge = MultiVector(
            /* scalar, e12345 */
            float2((right_dual.e1 * this.e4235) + (right_dual.e2 * this.e4315) + (right_dual.e3 * this.e4125) + (right_dual.e5 * this.e1234), 0.0), 
            /* e1, e2, e3, e4 */
            float4(this.group0.xy.yy, this.e12345, 0.0) * float4(float3(1.0), 0.0) * float4(right_dual.group0.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e5 */
            right_dual.e5 * this.e12345, 
            /* e15, e25, e35, e45 */
            float4(0.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(0.0), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            float3(0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(0.0), 
            /* e1234 */
            0.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(0.0, (anti_wedge.e1 * other.e4235) + (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) + (anti_wedge.e4 * other.e3215)), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5 */
            0.0, 
            /* e15, e25, e35, e45 */
            float4(0.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(0.0), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            float3(0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(anti_wedge.scalar) * other.group0, 
            /* e1234 */
            0.0
        );
    }
}
// Fancy infix trick (second half)
public MultiVector operator /(AntiProjectViaHorizonOntoInfixPartial<MultiVector> lhs, RoundPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension MultiVector {
    public MultiVector anti_project_via_horizon_onto(RoundPoint other) {
        Sphere right_dual = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        MultiVector anti_wedge = MultiVector(
            /* scalar, e12345 */
            float2((this.e1 * right_dual.e4235) + (this.e2 * right_dual.e4315) + (this.e3 * right_dual.e4125) + (this.e4 * right_dual.e3215) + (this.e5 * right_dual.e1234), 0.0), 
            /* e1, e2, e3, e4 */
            float4((this.e41 * right_dual.e3215) + (this.e31 * right_dual.e4125), (this.e42 * right_dual.e3215) + (this.e12 * right_dual.e4235), (this.e43 * right_dual.e3215) + (this.e23 * right_dual.e4315), -(this.e45 * right_dual.e1234) - (this.e43 * right_dual.e4125)) - (right_dual.group0.yzxx * float4(this.group5.xyz.zxy, this.e41)) - float4((float3(right_dual.e1234) * this.group3.xyz), this.e42 * right_dual.e4315), 
            /* e5 */
            (this.e15 * right_dual.e4235) + (this.e25 * right_dual.e4315) + (this.e35 * right_dual.e4125) + (this.e45 * right_dual.e3215), 
            /* e15, e25, e35, e45 */
            float4((this.e415 * right_dual.e3215) + (this.e315 * right_dual.e4125), (this.e425 * right_dual.e3215) + (this.e125 * right_dual.e4235), (this.e435 * right_dual.e3215) + (this.e235 * right_dual.e4315), -(this.e425 * right_dual.e4315) - (this.e435 * right_dual.e4125)) - (right_dual.group0.yzxx * float4(this.group8.xyz.zxy, this.e415)), 
            /* e41, e42, e43 */
            (float3(right_dual.e1234) * this.group6.xyz) + (this.group7.xyz.zxy * right_dual.group0.yzx) - (this.group7.xyz.yzx * right_dual.group0.zxy), 
            /* e23, e31, e12 */
            (float3(right_dual.e3215) * this.group7.xyz) + (float3(right_dual.e1234) * this.group8.xyz) - (float3(this.e321) * right_dual.group0.xyz), 
            /* e415, e425, e435, e321 */
            float4((this.group9.zxy * right_dual.group0.yzx), this.e1234 * right_dual.e3215) - (this.group9.yzxw * float4(right_dual.group0.zxy, right_dual.e1234)), 
            /* e423, e431, e412 */
            (float3(this.e1234) * right_dual.group0.xyz) - (float3(right_dual.e1234) * this.group9.xyz), 
            /* e235, e315, e125 */
            (float3(right_dual.e3215) * this.group9.xyz) - (float3(this.e3215) * right_dual.group0.xyz), 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e12345) * right_dual.group0, 
            /* e1234 */
            this.e12345 * right_dual.e1234
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(0.0, (anti_wedge.e4235 * other.e1) + (anti_wedge.e4315 * other.e2) + (anti_wedge.e4125 * other.e3) + (anti_wedge.e3215 * other.e4) + (anti_wedge.e1234 * other.e5)), 
            /* e1, e2, e3, e4 */
            float4(anti_wedge.scalar) * other.group0, 
            /* e5 */
            anti_wedge.scalar * other.e5, 
            /* e15, e25, e35, e45 */
            (float4(anti_wedge.e5) * other.group0) - (float4(other.e5) * anti_wedge.group1), 
            /* e41, e42, e43 */
            (float3(other.e4) * anti_wedge.group1.xyz) - (float3(anti_wedge.e4) * other.group0.xyz), 
            /* e23, e31, e12 */
            (anti_wedge.group1.zxy * other.group0.yzx) - (anti_wedge.group1.yzx * other.group0.zxy), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e15 * other.e4) + (anti_wedge.e41 * other.e5), (anti_wedge.e25 * other.e4) + (anti_wedge.e42 * other.e5), (anti_wedge.e35 * other.e4) + (anti_wedge.e43 * other.e5), -(anti_wedge.e31 * other.e2) - (anti_wedge.e12 * other.e3)) - (other.group0.xyzx * float4(anti_wedge.group3.www, anti_wedge.e23)), 
            /* e423, e431, e412 */
            (float3(other.e4) * anti_wedge.group5.xyz) + (anti_wedge.group4.xyz.yzx * other.group0.zxy) - (anti_wedge.group4.xyz.zxy * other.group0.yzx), 
            /* e235, e315, e125 */
            (float3(other.e5) * anti_wedge.group5.xyz) + (anti_wedge.group3.zxy * other.group0.yzx) - (anti_wedge.group3.yzx * other.group0.zxy), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e425 * other.e3) + (anti_wedge.e235 * other.e4), (anti_wedge.e435 * other.e1) + (anti_wedge.e315 * other.e4), (anti_wedge.e415 * other.e2) + (anti_wedge.e125 * other.e4), -(anti_wedge.e321 * other.e5) - (anti_wedge.e125 * other.e3)) - (other.group0.yzxy * float4(anti_wedge.group6.zxy, anti_wedge.e315)) - float4((float3(other.e5) * anti_wedge.group7.xyz), anti_wedge.e235 * other.e1), 
            /* e1234 */
            (anti_wedge.e321 * other.e4) + (anti_wedge.e423 * other.e1) + (anti_wedge.e431 * other.e2) + (anti_wedge.e412 * other.e3)
        );
    }
}
// Fancy infix trick (second half)
public MultiVector operator /(AntiProjectViaHorizonOntoInfixPartial<MultiVector> lhs, Scalar rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension MultiVector {
    public MultiVector anti_project_via_horizon_onto(Scalar other) {
        AntiScalar right_dual = AntiScalar(
            /* e12345 */
            other.scalar
        );
        MultiVector anti_wedge = MultiVector(
            /* scalar, e12345 */
            float2(right_dual.e12345) * this.group0.xy, 
            /* e1, e2, e3, e4 */
            float4(right_dual.e12345) * this.group1, 
            /* e5 */
            right_dual.e12345 * this.e5, 
            /* e15, e25, e35, e45 */
            float4(right_dual.e12345) * this.group3, 
            /* e41, e42, e43 */
            float3(right_dual.e12345) * this.group4.xyz, 
            /* e23, e31, e12 */
            float3(right_dual.e12345) * this.group5.xyz, 
            /* e415, e425, e435, e321 */
            float4(right_dual.e12345) * this.group6, 
            /* e423, e431, e412 */
            float3(right_dual.e12345) * this.group7.xyz, 
            /* e235, e315, e125 */
            float3(right_dual.e12345) * this.group8.xyz, 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * this.group9, 
            /* e1234 */
            right_dual.e12345 * this.e1234
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(other.scalar) * anti_wedge.group0.xy, 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * anti_wedge.group1, 
            /* e5 */
            anti_wedge.e5 * other.scalar, 
            /* e15, e25, e35, e45 */
            float4(other.scalar) * anti_wedge.group3, 
            /* e41, e42, e43 */
            float3(other.scalar) * anti_wedge.group4.xyz, 
            /* e23, e31, e12 */
            float3(other.scalar) * anti_wedge.group5.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.scalar) * anti_wedge.group6, 
            /* e423, e431, e412 */
            float3(other.scalar) * anti_wedge.group7.xyz, 
            /* e235, e315, e125 */
            float3(other.scalar) * anti_wedge.group8.xyz, 
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar) * anti_wedge.group9, 
            /* e1234 */
            anti_wedge.e1234 * other.scalar
        );
    }
}
// Fancy infix trick (second half)
public MultiVector operator /(AntiProjectViaHorizonOntoInfixPartial<MultiVector> lhs, Sphere rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension MultiVector {
    public MultiVector anti_project_via_horizon_onto(Sphere other) {
        RoundPoint right_dual = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(other.group0.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215
        );
        MultiVector anti_wedge = MultiVector(
            /* scalar, e12345 */
            float2((this.e4235 * right_dual.e1) + (this.e4315 * right_dual.e2) + (this.e4125 * right_dual.e3) + (this.e3215 * right_dual.e4) + (this.e1234 * right_dual.e5), 0.0), 
            /* e1, e2, e3, e4 */
            float4(this.e12345) * right_dual.group0, 
            /* e5 */
            this.e12345 * right_dual.e5, 
            /* e15, e25, e35, e45 */
            float4(0.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(0.0), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            float3(0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(0.0), 
            /* e1234 */
            0.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(0.0, (anti_wedge.e1 * other.e4235) + (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) + (anti_wedge.e4 * other.e3215) + (anti_wedge.e5 * other.e1234)), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5 */
            0.0, 
            /* e15, e25, e35, e45 */
            float4(0.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(0.0), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            float3(0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(anti_wedge.scalar) * other.group0, 
            /* e1234 */
            anti_wedge.scalar * other.e1234
        );
    }
}
// Fancy infix trick (second half)
public MultiVector operator /(AntiProjectViaHorizonOntoInfixPartial<MultiVector> lhs, VersorEven rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension MultiVector {
    public MultiVector anti_project_via_horizon_onto(VersorEven other) {
        VersorOdd right_dual = VersorOdd(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        MultiVector anti_wedge = MultiVector(
            /* scalar, e12345 */
            float2((this.e12345 * right_dual.scalar) + (this.e1 * right_dual.e4235) + (this.e2 * right_dual.e4315) + (this.e3 * right_dual.e4125) + (this.e4 * right_dual.e3215) + (this.e5 * right_dual.e1234) - (this.e415 * right_dual.e23) - (this.e425 * right_dual.e31) - (this.e435 * right_dual.e12) - (this.e321 * right_dual.e45) - (this.e423 * right_dual.e15) - (this.e431 * right_dual.e25) - (this.e412 * right_dual.e35) - (this.e235 * right_dual.e41) - (this.e315 * right_dual.e42) - (this.e125 * right_dual.e43), 0.0), 
            /* e1, e2, e3, e4 */
            (float4(this.e1234) * float4(right_dual.group2.xyz, right_dual.e45)) + (this.group9.yzxz * float4(right_dual.group1.zxy, right_dual.e43)) + float4((this.group4.xyz * right_dual.group3.www), this.e4235 * right_dual.e41) + float4((this.group5.xyz.yzx * right_dual.group3.zxy), this.e4315 * right_dual.e42) - (right_dual.group3.yzxx * float4(this.group5.xyz.zxy, this.e41)) - float4((this.group9.zxy * right_dual.group1.yzx), this.e43 * right_dual.e4125) - float4((this.group9.www * right_dual.group0.xyz), this.e45 * right_dual.e1234) - float4((right_dual.group2.www * this.group3.xyz), this.e42 * right_dual.e4315), 
            /* e5 */
            (this.e15 * right_dual.e4235) + (this.e25 * right_dual.e4315) + (this.e35 * right_dual.e4125) + (this.e45 * right_dual.e3215) - (this.e4235 * right_dual.e15) - (this.e4315 * right_dual.e25) - (this.e4125 * right_dual.e35) - (this.e3215 * right_dual.e45), 
            /* e15, e25, e35, e45 */
            float4((this.e415 * right_dual.e3215) + (this.e315 * right_dual.e4125), (this.e425 * right_dual.e3215) + (this.e125 * right_dual.e4235), (this.e435 * right_dual.e3215) + (this.e235 * right_dual.e4315), -(this.e425 * right_dual.e4315) - (this.e435 * right_dual.e4125)) + (float4(this.e12345) * float4(right_dual.group2.xyz, right_dual.e45)) - (right_dual.group3.yzxx * float4(this.group8.xyz.zxy, this.e415)), 
            /* e41, e42, e43 */
            (float3(this.e12345) * right_dual.group0.xyz) + (float3(right_dual.e1234) * this.group6.xyz) + (this.group7.xyz.zxy * right_dual.group3.yzx) - (this.group7.xyz.yzx * right_dual.group3.zxy), 
            /* e23, e31, e12 */
            (float3(this.e12345) * right_dual.group1.xyz) + (float3(right_dual.e1234) * this.group8.xyz) + (float3(right_dual.e3215) * this.group7.xyz) - (float3(this.e321) * right_dual.group3.xyz), 
            /* e415, e425, e435, e321 */
            float4((this.group9.zxy * right_dual.group3.yzx), this.e1234 * right_dual.e3215) - (this.group9.yzxw * float4(right_dual.group3.zxy, right_dual.e1234)), 
            /* e423, e431, e412 */
            (float3(this.e1234) * right_dual.group3.xyz) - (float3(right_dual.e1234) * this.group9.xyz), 
            /* e235, e315, e125 */
            (float3(right_dual.e3215) * this.group9.xyz) - (float3(this.e3215) * right_dual.group3.xyz), 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e12345) * right_dual.group3, 
            /* e1234 */
            this.e12345 * right_dual.e1234
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(0.0, (anti_wedge.scalar * other.e12345) + (anti_wedge.e4235 * other.e1) + (anti_wedge.e4315 * other.e2) + (anti_wedge.e4125 * other.e3) + (anti_wedge.e3215 * other.e4) + (anti_wedge.e1234 * other.e5) - (anti_wedge.e15 * other.e423) - (anti_wedge.e25 * other.e431) - (anti_wedge.e35 * other.e412) - (anti_wedge.e45 * other.e321) - (anti_wedge.e41 * other.e235) - (anti_wedge.e42 * other.e315) - (anti_wedge.e43 * other.e125) - (anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435)), 
            /* e1, e2, e3, e4 */
            float4(anti_wedge.scalar) * other.group3, 
            /* e5 */
            anti_wedge.scalar * other.e5, 
            /* e15, e25, e35, e45 */
            (float4(anti_wedge.e5) * other.group3) - (float4(other.e5) * anti_wedge.group1), 
            /* e41, e42, e43 */
            (float3(other.e4) * anti_wedge.group1.xyz) - (float3(anti_wedge.e4) * other.group3.xyz), 
            /* e23, e31, e12 */
            (anti_wedge.group1.zxy * other.group3.yzx) - (anti_wedge.group1.yzx * other.group3.zxy), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e15 * other.e4) + (anti_wedge.e41 * other.e5), (anti_wedge.e25 * other.e4) + (anti_wedge.e42 * other.e5), (anti_wedge.e35 * other.e4) + (anti_wedge.e43 * other.e5), -(anti_wedge.e31 * other.e2) - (anti_wedge.e12 * other.e3)) + (float4(anti_wedge.scalar) * other.group1) - (other.group3.xyzx * float4(anti_wedge.group3.www, anti_wedge.e23)), 
            /* e423, e431, e412 */
            (float3(anti_wedge.scalar) * other.group0.xyz) + (float3(other.e4) * anti_wedge.group5.xyz) + (anti_wedge.group4.xyz.yzx * other.group3.zxy) - (anti_wedge.group4.xyz.zxy * other.group3.yzx), 
            /* e235, e315, e125 */
            (float3(anti_wedge.scalar) * other.group2.xyz) + (float3(other.e5) * anti_wedge.group5.xyz) + (anti_wedge.group3.zxy * other.group3.yzx) - (anti_wedge.group3.yzx * other.group3.zxy), 
            /* e4235, e4315, e4125, e3215 */
            (float4(anti_wedge.e5) * float4(other.group0.xyz, other.e321)) + (anti_wedge.group1.yzxy * float4(other.group1.zxy, other.e315)) + float4((anti_wedge.group8.xyz * other.group3.www), anti_wedge.e1 * other.e235) + float4((anti_wedge.group6.yzx * other.group3.zxy), anti_wedge.e3 * other.e125) - (anti_wedge.group6.zxyw * float4(other.group3.yzx, other.e5)) - float4((anti_wedge.group7.xyz * other.group2.www), anti_wedge.e235 * other.e1) - float4((anti_wedge.group1.zxy * other.group1.yzx), anti_wedge.e315 * other.e2) - float4((anti_wedge.group1.www * other.group2.xyz), anti_wedge.e125 * other.e3), 
            /* e1234 */
            (anti_wedge.e321 * other.e4) + (anti_wedge.e423 * other.e1) + (anti_wedge.e431 * other.e2) + (anti_wedge.e412 * other.e3) - (anti_wedge.e1 * other.e423) - (anti_wedge.e2 * other.e431) - (anti_wedge.e3 * other.e412) - (anti_wedge.e4 * other.e321)
        );
    }
}
// Fancy infix trick (second half)
public MultiVector operator /(AntiProjectViaHorizonOntoInfixPartial<MultiVector> lhs, VersorOdd rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension MultiVector {
    public MultiVector anti_project_via_horizon_onto(VersorOdd other) {
        VersorEven right_dual = VersorEven(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        MultiVector anti_wedge = MultiVector(
            /* scalar, e12345 */
            float2((this.scalar * right_dual.e12345) + (this.e4235 * right_dual.e1) + (this.e4315 * right_dual.e2) + (this.e4125 * right_dual.e3) + (this.e3215 * right_dual.e4) + (this.e1234 * right_dual.e5) - (this.e15 * right_dual.e423) - (this.e25 * right_dual.e431) - (this.e35 * right_dual.e412) - (this.e45 * right_dual.e321) - (this.e41 * right_dual.e235) - (this.e42 * right_dual.e315) - (this.e43 * right_dual.e125) - (this.e23 * right_dual.e415) - (this.e31 * right_dual.e425) - (this.e12 * right_dual.e435), this.e12345 * right_dual.e12345), 
            /* e1, e2, e3, e4 */
            float4((this.e1 * right_dual.e12345) + (this.e415 * right_dual.e321) + (this.e321 * right_dual.e415) + (this.e315 * right_dual.e412), (this.e2 * right_dual.e12345) + (this.e425 * right_dual.e321) + (this.e321 * right_dual.e425) + (this.e125 * right_dual.e423), (this.e3 * right_dual.e12345) + (this.e435 * right_dual.e321) + (this.e321 * right_dual.e435) + (this.e235 * right_dual.e431), -(this.e415 * right_dual.e423) - (this.e425 * right_dual.e431) - (this.e435 * right_dual.e412) - (this.e412 * right_dual.e435)) + (float4(this.e12345) * right_dual.group3) + float4((this.group7.xyz.zxy * right_dual.group2.yzx), this.e4 * right_dual.e12345) - float4((this.group7.xyz.yzx * right_dual.group2.zxy), this.e423 * right_dual.e415) - float4((this.group8.xyz.zxy * right_dual.group0.yzx), this.e431 * right_dual.e425), 
            /* e5 */
            (this.e12345 * right_dual.e5) + (this.e5 * right_dual.e12345) - (this.e415 * right_dual.e235) - (this.e425 * right_dual.e315) - (this.e435 * right_dual.e125) - (this.e235 * right_dual.e415) - (this.e315 * right_dual.e425) - (this.e125 * right_dual.e435), 
            /* e15, e25, e35, e45 */
            float4((this.e4125 * right_dual.e315) + (this.e3215 * right_dual.e415), (this.e4235 * right_dual.e125) + (this.e3215 * right_dual.e425), (this.e4315 * right_dual.e235) + (this.e3215 * right_dual.e435), -(this.e4315 * right_dual.e425) - (this.e4125 * right_dual.e435)) + (float4(right_dual.e12345) * this.group3) - (this.group9.yzxx * float4(right_dual.group2.zxy, right_dual.e415)), 
            /* e41, e42, e43 */
            (float3(this.e1234) * right_dual.group1.xyz) + (float3(right_dual.e12345) * this.group4.xyz) + (this.group9.yzx * right_dual.group0.zxy) - (this.group9.zxy * right_dual.group0.yzx), 
            /* e23, e31, e12 */
            (float3(this.e3215) * right_dual.group0.xyz) + (float3(this.e1234) * right_dual.group2.xyz) + (float3(right_dual.e12345) * this.group5.xyz) - (float3(right_dual.e321) * this.group9.xyz), 
            /* e415, e425, e435, e321 */
            (float4(this.e12345) * right_dual.group1) + (float4(right_dual.e12345) * this.group6), 
            /* e423, e431, e412 */
            (float3(this.e12345) * right_dual.group0.xyz) + (float3(right_dual.e12345) * this.group7.xyz), 
            /* e235, e315, e125 */
            (float3(this.e12345) * right_dual.group2.xyz) + (float3(right_dual.e12345) * this.group8.xyz), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * this.group9, 
            /* e1234 */
            this.e1234 * right_dual.e12345
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(anti_wedge.scalar * other.scalar, (anti_wedge.e12345 * other.scalar) + (anti_wedge.e1 * other.e4235) + (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) + (anti_wedge.e4 * other.e3215) + (anti_wedge.e5 * other.e1234) - (anti_wedge.e415 * other.e23) - (anti_wedge.e425 * other.e31) - (anti_wedge.e435 * other.e12) - (anti_wedge.e321 * other.e45) - (anti_wedge.e423 * other.e15) - (anti_wedge.e431 * other.e25) - (anti_wedge.e412 * other.e35) - (anti_wedge.e235 * other.e41) - (anti_wedge.e315 * other.e42) - (anti_wedge.e125 * other.e43)), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * anti_wedge.group1, 
            /* e5 */
            anti_wedge.e5 * other.scalar, 
            /* e15, e25, e35, e45 */
            (float4(anti_wedge.scalar) * float4(other.group2.xyz, other.e45)) + (float4(other.scalar) * anti_wedge.group3), 
            /* e41, e42, e43 */
            (float3(anti_wedge.scalar) * other.group0.xyz) + (float3(other.scalar) * anti_wedge.group4.xyz), 
            /* e23, e31, e12 */
            (float3(anti_wedge.scalar) * other.group1.xyz) + (float3(other.scalar) * anti_wedge.group5.xyz), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e5 * other.e41) + (anti_wedge.e415 * other.scalar), (anti_wedge.e5 * other.e42) + (anti_wedge.e425 * other.scalar), (anti_wedge.e5 * other.e43) + (anti_wedge.e435 * other.scalar), -(anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12)) + float4((anti_wedge.group1.www * other.group2.xyz), anti_wedge.e321 * other.scalar) - (anti_wedge.group1.xyzx * other.group1.wwwx), 
            /* e423, e431, e412 */
            (float3(anti_wedge.e4) * other.group1.xyz) + (float3(other.scalar) * anti_wedge.group7.xyz) + (anti_wedge.group1.zxy * other.group0.yzx) - (anti_wedge.group1.yzx * other.group0.zxy), 
            /* e235, e315, e125 */
            (float3(anti_wedge.e5) * other.group1.xyz) + (float3(other.scalar) * anti_wedge.group8.xyz) + (anti_wedge.group1.yzx * other.group2.zxy) - (anti_wedge.group1.zxy * other.group2.yzx), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e35 * other.e42) + (anti_wedge.e45 * other.e23) + (anti_wedge.e23 * other.e45) + (anti_wedge.e4235 * other.scalar), (anti_wedge.e15 * other.e43) + (anti_wedge.e45 * other.e31) + (anti_wedge.e31 * other.e45) + (anti_wedge.e4315 * other.scalar), (anti_wedge.e25 * other.e41) + (anti_wedge.e45 * other.e12) + (anti_wedge.e12 * other.e45) + (anti_wedge.e4125 * other.scalar), -(anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12) - (anti_wedge.e12 * other.e35)) + (float4(anti_wedge.scalar) * other.group3) + float4((anti_wedge.group4.xyz.yzx * other.group2.zxy), anti_wedge.e3215 * other.scalar) - (other.group2.yzxx * float4(anti_wedge.group4.xyz.zxy, anti_wedge.e23)) - float4((anti_wedge.group3.yzx * other.group0.zxy), anti_wedge.e31 * other.e25), 
            /* e1234 */
            (anti_wedge.scalar * other.e1234) + (anti_wedge.e1234 * other.scalar) - (anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12) - (anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)
        );
    }
}
// Fancy infix trick (first half)
public AntiProjectViaHorizonOntoInfixPartial<Plane> operator /(Plane lhs, AntiProjectViaHorizonOntoInfix rhs) {
    return AntiProjectViaHorizonOntoInfixPartial<Plane>(lhs);
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<Plane> lhs, AntiCircleRotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Plane {
    public DipoleInversion anti_project_via_horizon_onto(AntiCircleRotor other) {
        CircleRotor right_dual = CircleRotor(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        DipoleInversion anti_wedge = DipoleInversion(
            /* e41, e42, e43 */
            (right_dual.group0.xyz.zxy * this.group0.yzx) - (right_dual.group0.xyz.yzx * this.group0.zxy), 
            /* e23, e31, e12, e45 */
            float4(right_dual.e423 * this.e3215, right_dual.e431 * this.e3215, right_dual.e412 * this.e3215, -(right_dual.e425 * this.e4315) - (right_dual.e435 * this.e4125)) - (right_dual.group1.wwwx * this.group0.xyzx), 
            /* e15, e25, e35, e1234 */
            float4((float3(this.e3215) * right_dual.group1.xyz), 0.0) + float4((right_dual.group2.yzx * this.group0.zxy), 0.0) - float4((right_dual.group2.zxy * this.group0.yzx), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * this.group0
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            float3(other.scalar) * anti_wedge.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(other.scalar) * anti_wedge.group1, 
            /* e15, e25, e35, e1234 */
            float4((other.group2.www * anti_wedge.group2.xyz), (other.scalar * anti_wedge.e1234) - (other.e41 * anti_wedge.e23) - (other.e42 * anti_wedge.e31) - (other.e43 * anti_wedge.e12) - (other.e23 * anti_wedge.e41) - (other.e31 * anti_wedge.e42) - (other.e12 * anti_wedge.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e23 * anti_wedge.e45) + (other.e45 * anti_wedge.e23) + (other.e35 * anti_wedge.e42) + (other.scalar * anti_wedge.e4235), (other.e31 * anti_wedge.e45) + (other.e45 * anti_wedge.e31) + (other.e15 * anti_wedge.e43) + (other.scalar * anti_wedge.e4315), (other.e12 * anti_wedge.e45) + (other.e45 * anti_wedge.e12) + (other.e25 * anti_wedge.e41) + (other.scalar * anti_wedge.e4125), -(other.e12 * anti_wedge.e35) - (other.e15 * anti_wedge.e23) - (other.e25 * anti_wedge.e31) - (other.e35 * anti_wedge.e12)) + float4((other.group0.xyz.yzx * anti_wedge.group2.zxy), other.scalar * anti_wedge.e3215) - (anti_wedge.group2.yzxx * float4(other.group0.xyz.zxy, other.e23)) - float4((anti_wedge.group0.xyz.zxy * other.group2.yzx), other.e31 * anti_wedge.e25)
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<Plane> lhs, AntiDipoleInversion rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Plane {
    public DipoleInversion anti_project_via_horizon_onto(AntiDipoleInversion other) {
        DipoleInversion right_dual = DipoleInversion(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiDipoleInversion anti_wedge = AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(right_dual.e1234) * this.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            float4(((right_dual.group3.yzx * this.group0.zxy) - (right_dual.group3.zxy * this.group0.yzx)), right_dual.e1234 * this.e3215 * -1.0), 
            /* e235, e315, e125, e4 */
            float4(right_dual.e4235 * this.e3215 * -1.0, right_dual.e4315 * this.e3215 * -1.0, right_dual.e4125 * this.e3215 * -1.0, (right_dual.e42 * this.e4315) + (right_dual.e43 * this.e4125)) + (this.group0.xyzx * float4(right_dual.group3.www, right_dual.e41)), 
            /* e1, e2, e3, e5 */
            float4(right_dual.e12 * this.e4315, right_dual.e23 * this.e4125, right_dual.e31 * this.e4235, -(right_dual.e25 * this.e4315) - (right_dual.e35 * this.e4125)) - (float4(this.e3215) * float4(right_dual.group0.xyz, right_dual.e45)) - (this.group0.zxyx * float4(right_dual.group1.yzx, right_dual.e15))
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            (float3(other.e4) * anti_wedge.group3.xyz) - (float3(anti_wedge.e4) * other.group3.xyz), 
            /* e23, e31, e12, e45 */
            (anti_wedge.group3.zxyw * float4(other.group3.yzx, other.e4)) - (other.group3.zxyw * float4(anti_wedge.group3.yzx, anti_wedge.e4)), 
            /* e15, e25, e35, e1234 */
            (other.group3.xyzx * float4(anti_wedge.group3.www, anti_wedge.e423)) + float4(float3(0.0), (anti_wedge.e431 * other.e2) + (anti_wedge.e412 * other.e3) + (anti_wedge.e321 * other.e4) - (anti_wedge.e4 * other.e321) - (anti_wedge.e2 * other.e431) - (anti_wedge.e3 * other.e412)) - float4((other.group3.www * anti_wedge.group3.xyz), anti_wedge.e1 * other.e423), 
            /* e4235, e4315, e4125, e3215 */
            (anti_wedge.group3.yzxw * other.group1.zxyw) + (other.group2.wwwz * float4(anti_wedge.group2.xyz, anti_wedge.e3)) + float4((other.group0.xyz * anti_wedge.group3.www), anti_wedge.e1 * other.e235) + float4((anti_wedge.group1.yzx * other.group3.zxy), anti_wedge.e2 * other.e315) - (float4(other.e5) * float4(anti_wedge.group0.xyz, anti_wedge.e321)) - (anti_wedge.group2.wwwy * float4(other.group2.xyz, other.e2)) - (other.group3.yzxx * float4(anti_wedge.group1.zxy, anti_wedge.e235)) - float4((anti_wedge.group3.zxy * other.group1.yzx), anti_wedge.e125 * other.e3)
        );
    }
}
// Fancy infix trick (second half)
public Plane operator /(AntiProjectViaHorizonOntoInfixPartial<Plane> lhs, AntiDualNum rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Plane {
    public Plane anti_project_via_horizon_onto(AntiDualNum other) {
        DualNum right_dual = DualNum(
            /* e5, e12345 */
            other.group0.xy
        );
        return Plane(
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar) * float4(right_dual.e12345 * this.e4235, right_dual.e12345 * this.e4315, right_dual.e12345 * this.e4125, right_dual.e12345 * this.e3215)
        );
    }
}
// Fancy infix trick (second half)
public AntiDualNum operator /(AntiProjectViaHorizonOntoInfixPartial<Plane> lhs, AntiFlatPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Plane {
    public AntiDualNum anti_project_via_horizon_onto(AntiFlatPoint other) {
        FlatPoint right_dual = FlatPoint(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDualNum(
            /* e3215, scalar */
            float2(-(other.e321 * right_dual.e15 * this.e4235) - (other.e321 * right_dual.e25 * this.e4315) - (other.e321 * right_dual.e35 * this.e4125) - (other.e321 * right_dual.e45 * this.e3215), 1.0) * float2(1.0, 0.0)
        );
    }
}
// Fancy infix trick (second half)
public Flector operator /(AntiProjectViaHorizonOntoInfixPartial<Plane> lhs, AntiFlector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Plane {
    public Flector anti_project_via_horizon_onto(AntiFlector other) {
        Flector right_dual = Flector(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        Motor anti_wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4(((right_dual.group1.yzx * this.group0.zxy) - (right_dual.group1.zxy * this.group0.yzx)), 0.0), 
            /* e235, e315, e125, e5 */
            float4(right_dual.e3215 * this.e4235, right_dual.e3215 * this.e4315, right_dual.e3215 * this.e4125, -(right_dual.e25 * this.e4315) - (right_dual.e35 * this.e4125) - (right_dual.e45 * this.e3215)) - (this.group0.wwwx * float4(right_dual.group1.xyz, right_dual.e15))
        );
        return Flector(
            /* e15, e25, e35, e45 */
            float4(float3(1.0), 0.0) * float4(anti_wedge.group1.www, 0.0) * float4(other.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(float3(0.0), -(other.e2 * anti_wedge.e315) - (other.e3 * anti_wedge.e125)) + float4((other.group1.zxy * anti_wedge.group0.yzx), other.e321 * anti_wedge.e5) - (other.group1.yzxx * float4(anti_wedge.group0.zxy, anti_wedge.e235))
        );
    }
}
// Fancy infix trick (second half)
public Plane operator /(AntiProjectViaHorizonOntoInfixPartial<Plane> lhs, AntiLine rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Plane {
    public Plane anti_project_via_horizon_onto(AntiLine other) {
        Line right_dual = Line(
            /* e415, e425, e435 */
            other.group0.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group1.xyz * float3(-1.0)
        );
        FlatPoint anti_wedge = FlatPoint(
            /* e15, e25, e35, e45 */
            float4((right_dual.e415 * this.e3215) + (right_dual.e315 * this.e4125), (right_dual.e425 * this.e3215) + (right_dual.e125 * this.e4235), (right_dual.e435 * this.e3215) + (right_dual.e235 * this.e4315), -(right_dual.e425 * this.e4315) - (right_dual.e435 * this.e4125)) - (this.group0.yzxx * float4(right_dual.group1.xyz.zxy, right_dual.e415))
        );
        return Plane(
            /* e4235, e4315, e4125, e3215 */
            float4((float3(anti_wedge.e45) * other.group0.xyz), -(other.e23 * anti_wedge.e15) - (other.e31 * anti_wedge.e25) - (other.e12 * anti_wedge.e35))
        );
    }
}
// Fancy infix trick (second half)
public Flector operator /(AntiProjectViaHorizonOntoInfixPartial<Plane> lhs, AntiMotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Plane {
    public Flector anti_project_via_horizon_onto(AntiMotor other) {
        Motor right_dual = Motor(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        Flector anti_wedge = Flector(
            /* e15, e25, e35, e45 */
            float4((right_dual.e415 * this.e3215) + (right_dual.e315 * this.e4125), (right_dual.e425 * this.e3215) + (right_dual.e125 * this.e4235), (right_dual.e435 * this.e3215) + (right_dual.e235 * this.e4315), -(right_dual.e425 * this.e4315) - (right_dual.e435 * this.e4125)) - (this.group0.yzxx * float4(right_dual.group1.zxy, right_dual.e415)), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * this.group0
        );
        return Flector(
            /* e15, e25, e35, e45 */
            float4(other.scalar) * anti_wedge.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar * anti_wedge.e4235, other.scalar * anti_wedge.e4315, other.scalar * anti_wedge.e4125, -(other.e23 * anti_wedge.e15) - (other.e31 * anti_wedge.e25) - (other.e12 * anti_wedge.e35)) + (other.group0 * float4(anti_wedge.group0.www, anti_wedge.e3215))
        );
    }
}
// Fancy infix trick (second half)
public Plane operator /(AntiProjectViaHorizonOntoInfixPartial<Plane> lhs, AntiPlane rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Plane {
    public Plane anti_project_via_horizon_onto(AntiPlane other) {
        Plane right_dual = Plane(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        Line anti_wedge = Line(
            /* e415, e425, e435 */
            (right_dual.group0.yzx * this.group0.zxy) - (right_dual.group0.zxy * this.group0.yzx), 
            /* e235, e315, e125 */
            (float3(right_dual.e3215) * this.group0.xyz) - (float3(this.e3215) * right_dual.group0.xyz)
        );
        return Plane(
            /* e4235, e4315, e4125, e3215 */
            float4(other.e3 * anti_wedge.e425, other.e1 * anti_wedge.e435, other.e2 * anti_wedge.e415, -(other.e2 * anti_wedge.e315) - (other.e3 * anti_wedge.e125)) - (other.group0.yzxx * float4(anti_wedge.group0.xyz.zxy, anti_wedge.e235))
        );
    }
}
// Fancy infix trick (second half)
public Sphere operator /(AntiProjectViaHorizonOntoInfixPartial<Plane> lhs, Circle rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Plane {
    public Sphere anti_project_via_horizon_onto(Circle other) {
        Dipole right_dual = Dipole(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35 */
            other.group2.xyz
        );
        RoundPoint anti_wedge = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(-(right_dual.e41 * this.e3215) - (right_dual.e31 * this.e4125), -(right_dual.e42 * this.e3215) - (right_dual.e12 * this.e4235), -(right_dual.e43 * this.e3215) - (right_dual.e23 * this.e4315), (right_dual.e42 * this.e4315) + (right_dual.e43 * this.e4125)) + (this.group0.yzxx * float4(right_dual.group1.zxy, right_dual.e41)), 
            /* e5 */
            -(right_dual.e45 * this.e3215) - (right_dual.e15 * this.e4235) - (right_dual.e25 * this.e4315) - (right_dual.e35 * this.e4125)
        );
        return Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(-(other.e425 * anti_wedge.e3) - (other.e235 * anti_wedge.e4), -(other.e435 * anti_wedge.e1) - (other.e315 * anti_wedge.e4), -(other.e415 * anti_wedge.e2) - (other.e125 * anti_wedge.e4), (other.e321 * anti_wedge.e5) + (other.e125 * anti_wedge.e3)) + (anti_wedge.group0.yzxy * float4(other.group1.zxy, other.e315)) + float4((float3(anti_wedge.e5) * other.group0.xyz), other.e235 * anti_wedge.e1), 
            /* e1234 */
            -(other.e423 * anti_wedge.e1) - (other.e431 * anti_wedge.e2) - (other.e412 * anti_wedge.e3) - (other.e321 * anti_wedge.e4)
        );
    }
}
// Fancy infix trick (second half)
public Sphere operator /(AntiProjectViaHorizonOntoInfixPartial<Plane> lhs, CircleRotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Plane {
    public Sphere anti_project_via_horizon_onto(CircleRotor other) {
        AntiCircleRotor right_dual = AntiCircleRotor(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        RoundPoint anti_wedge = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(-(right_dual.e41 * this.e3215) - (right_dual.e31 * this.e4125), -(right_dual.e42 * this.e3215) - (right_dual.e12 * this.e4235), -(right_dual.e43 * this.e3215) - (right_dual.e23 * this.e4315), (right_dual.e42 * this.e4315) + (right_dual.e43 * this.e4125)) + (this.group0.yzxx * float4(right_dual.group1.zxy, right_dual.e41)), 
            /* e5 */
            -(right_dual.e45 * this.e3215) - (right_dual.e15 * this.e4235) - (right_dual.e25 * this.e4315) - (right_dual.e35 * this.e4125)
        );
        return Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(-(other.e425 * anti_wedge.e3) - (other.e235 * anti_wedge.e4), -(other.e435 * anti_wedge.e1) - (other.e315 * anti_wedge.e4), -(other.e415 * anti_wedge.e2) - (other.e125 * anti_wedge.e4), (other.e315 * anti_wedge.e2) + (other.e125 * anti_wedge.e3)) + (float4(anti_wedge.e5) * float4(other.group0.xyz, other.e321)) + (anti_wedge.group0.yzxx * float4(other.group1.zxy, other.e235)), 
            /* e1234 */
            -(other.e423 * anti_wedge.e1) - (other.e431 * anti_wedge.e2) - (other.e412 * anti_wedge.e3) - (other.e321 * anti_wedge.e4)
        );
    }
}
// Fancy infix trick (second half)
public Sphere operator /(AntiProjectViaHorizonOntoInfixPartial<Plane> lhs, Dipole rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Plane {
    public Sphere anti_project_via_horizon_onto(Dipole other) {
        Circle right_dual = Circle(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125 */
            other.group2.xyz * float3(-1.0)
        );
        Dipole anti_wedge = Dipole(
            /* e41, e42, e43 */
            (right_dual.group0.xyz.zxy * this.group0.yzx) - (right_dual.group0.xyz.yzx * this.group0.zxy), 
            /* e23, e31, e12, e45 */
            float4(right_dual.e423 * this.e3215, right_dual.e431 * this.e3215, right_dual.e412 * this.e3215, -(right_dual.e425 * this.e4315) - (right_dual.e435 * this.e4125)) - (right_dual.group1.wwwx * this.group0.xyzx), 
            /* e15, e25, e35 */
            (float3(this.e3215) * right_dual.group1.xyz) + (right_dual.group2.xyz.yzx * this.group0.zxy) - (right_dual.group2.xyz.zxy * this.group0.yzx)
        );
        return Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e42 * other.e35) + (anti_wedge.e23 * other.e45) + (anti_wedge.e45 * other.e23) + (anti_wedge.e35 * other.e42), (anti_wedge.e43 * other.e15) + (anti_wedge.e31 * other.e45) + (anti_wedge.e45 * other.e31) + (anti_wedge.e15 * other.e43), (anti_wedge.e41 * other.e25) + (anti_wedge.e12 * other.e45) + (anti_wedge.e45 * other.e12) + (anti_wedge.e25 * other.e41), -(anti_wedge.e23 * other.e15) - (anti_wedge.e31 * other.e25) - (anti_wedge.e12 * other.e35) - (anti_wedge.e35 * other.e12)) - float4((anti_wedge.group0.xyz.zxy * other.group2.xyz.yzx), anti_wedge.e15 * other.e23) - float4((anti_wedge.group2.xyz.yzx * other.group0.xyz.zxy), anti_wedge.e25 * other.e31), 
            /* e1234 */
            -(anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12) - (anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<Plane> lhs, DipoleInversion rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Plane {
    public DipoleInversion anti_project_via_horizon_onto(DipoleInversion other) {
        AntiDipoleInversion right_dual = AntiDipoleInversion(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiCircleRotor anti_wedge = AntiCircleRotor(
            /* e41, e42, e43 */
            (right_dual.group0.xyz.zxy * this.group0.yzx) - (right_dual.group0.xyz.yzx * this.group0.zxy), 
            /* e23, e31, e12, e45 */
            float4(right_dual.e423 * this.e3215, right_dual.e431 * this.e3215, right_dual.e412 * this.e3215, -(right_dual.e425 * this.e4315) - (right_dual.e435 * this.e4125)) - (right_dual.group1.wwwx * this.group0.xyzx), 
            /* e15, e25, e35, scalar */
            float4(right_dual.e125 * this.e4315 * -1.0, right_dual.e235 * this.e4125 * -1.0, right_dual.e315 * this.e4235 * -1.0, (right_dual.e2 * this.e4315) + (right_dual.e3 * this.e4125)) + (float4(this.e3215) * float4(right_dual.group1.xyz, right_dual.e4)) + (this.group0.zxyx * float4(right_dual.group2.yzx, right_dual.e1))
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(anti_wedge.scalar) * other.group1, 
            /* e15, e25, e35, e1234 */
            float4((anti_wedge.group2.www * other.group2.xyz), (anti_wedge.scalar * other.e1234) - (anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12) - (anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e23 * other.e45) + (anti_wedge.e45 * other.e23) + (anti_wedge.e35 * other.e42) + (anti_wedge.scalar * other.e4235), (anti_wedge.e31 * other.e45) + (anti_wedge.e45 * other.e31) + (anti_wedge.e15 * other.e43) + (anti_wedge.scalar * other.e4315), (anti_wedge.e12 * other.e45) + (anti_wedge.e45 * other.e12) + (anti_wedge.e25 * other.e41) + (anti_wedge.scalar * other.e4125), -(anti_wedge.e12 * other.e35) - (anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12)) + float4((anti_wedge.group0.xyz.yzx * other.group2.zxy), anti_wedge.scalar * other.e3215) - (other.group2.yzxx * float4(anti_wedge.group0.xyz.zxy, anti_wedge.e23)) - float4((other.group0.xyz.zxy * anti_wedge.group2.yzx), anti_wedge.e31 * other.e25)
        );
    }
}
// Fancy infix trick (second half)
public Plane operator /(AntiProjectViaHorizonOntoInfixPartial<Plane> lhs, FlatPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Plane {
    public Plane anti_project_via_horizon_onto(FlatPoint other) {
        AntiFlatPoint right_dual = AntiFlatPoint(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiLine anti_wedge = AntiLine(
            /* e23, e31, e12 */
            float3(right_dual.e321) * this.group0.xyz * float3(-1.0), 
            /* e15, e25, e35 */
            (right_dual.group0.yzx * this.group0.zxy) - (right_dual.group0.zxy * this.group0.yzx)
        );
        return Plane(
            /* e4235, e4315, e4125, e3215 */
            float4((float3(other.e45) * anti_wedge.group0.xyz), -(anti_wedge.e23 * other.e15) - (anti_wedge.e31 * other.e25) - (anti_wedge.e12 * other.e35))
        );
    }
}
// Fancy infix trick (second half)
public Flector operator /(AntiProjectViaHorizonOntoInfixPartial<Plane> lhs, Flector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Plane {
    public Flector anti_project_via_horizon_onto(Flector other) {
        AntiFlector right_dual = AntiFlector(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiMotor anti_wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4((right_dual.group0.www * this.group0.xyz * float3(-1.0)), (right_dual.e1 * this.e4235) + (right_dual.e2 * this.e4315) + (right_dual.e3 * this.e4125)), 
            /* e15, e25, e35, e3215 */
            float4(((right_dual.group0.yzx * this.group0.zxy) - (right_dual.group0.zxy * this.group0.yzx)), 0.0)
        );
        return Flector(
            /* e15, e25, e35, e45 */
            float4(anti_wedge.scalar) * other.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4(anti_wedge.scalar * other.e4235, anti_wedge.scalar * other.e4315, anti_wedge.scalar * other.e4125, -(anti_wedge.e23 * other.e15) - (anti_wedge.e31 * other.e25) - (anti_wedge.e12 * other.e35)) + (anti_wedge.group0 * float4(other.group0.www, other.e3215))
        );
    }
}
// Fancy infix trick (second half)
public Plane operator /(AntiProjectViaHorizonOntoInfixPartial<Plane> lhs, Line rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Plane {
    public Plane anti_project_via_horizon_onto(Line other) {
        AntiLine right_dual = AntiLine(
            /* e23, e31, e12 */
            other.group0.xyz, 
            /* e15, e25, e35 */
            other.group1.xyz
        );
        AntiPlane anti_wedge = AntiPlane(
            /* e1, e2, e3, e5 */
            float4(right_dual.e12 * this.e4315, right_dual.e23 * this.e4125, right_dual.e31 * this.e4235, -(right_dual.e25 * this.e4315) - (right_dual.e35 * this.e4125)) - (this.group0.zxyx * float4(right_dual.group0.xyz.yzx, right_dual.e15))
        );
        return Plane(
            /* e4235, e4315, e4125, e3215 */
            float4(anti_wedge.e3 * other.e425 * -1.0, anti_wedge.e1 * other.e435 * -1.0, anti_wedge.e2 * other.e415 * -1.0, (anti_wedge.e2 * other.e315) + (anti_wedge.e3 * other.e125)) + (anti_wedge.group0.yzxx * float4(other.group0.xyz.zxy, other.e235))
        );
    }
}
// Fancy infix trick (second half)
public Flector operator /(AntiProjectViaHorizonOntoInfixPartial<Plane> lhs, Motor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Plane {
    public Flector anti_project_via_horizon_onto(Motor other) {
        AntiMotor right_dual = AntiMotor(
            /* e23, e31, e12, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiFlector anti_wedge = AntiFlector(
            /* e235, e315, e125, e321 */
            float4(float3(1.0), 0.0) * float4(right_dual.group1.www, 0.0) * float4(this.group0.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e1, e2, e3, e5 */
            float4(right_dual.e12 * this.e4315, right_dual.e23 * this.e4125, right_dual.e31 * this.e4235, -(right_dual.e25 * this.e4315) - (right_dual.e35 * this.e4125)) - (this.group0.zxyx * float4(right_dual.group0.yzx, right_dual.e15))
        );
        return Flector(
            /* e15, e25, e35, e45 */
            float4(float3(1.0), 0.0) * float4(other.group1.www, 0.0) * float4(anti_wedge.group1.xyz, 0.0) * float4(-1.0, -1.0, -1.0, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            (anti_wedge.group1.yzxx * float4(other.group0.zxy, other.e235)) + float4(float3(0.0), (anti_wedge.e2 * other.e315) + (anti_wedge.e3 * other.e125)) - float4((anti_wedge.group1.zxy * other.group0.yzx), anti_wedge.e321 * other.e5)
        );
    }
}
// Fancy infix trick (second half)
public MultiVector operator /(AntiProjectViaHorizonOntoInfixPartial<Plane> lhs, MultiVector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Plane {
    public MultiVector anti_project_via_horizon_onto(MultiVector other) {
        MultiVector right_dual = MultiVector(
            /* scalar, e12345 */
            other.group0.xy.yx * float2(-1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215, 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43 */
            other.group7.xyz, 
            /* e23, e31, e12 */
            other.group6.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412 */
            other.group4.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group3.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        MultiVector anti_wedge = MultiVector(
            /* scalar, e12345 */
            float2((right_dual.e1 * this.e4235) + (right_dual.e2 * this.e4315) + (right_dual.e3 * this.e4125) + (right_dual.e4 * this.e3215), 0.0), 
            /* e1, e2, e3, e4 */
            float4(-(right_dual.e41 * this.e3215) - (right_dual.e31 * this.e4125), -(right_dual.e42 * this.e3215) - (right_dual.e12 * this.e4235), -(right_dual.e43 * this.e3215) - (right_dual.e23 * this.e4315), (right_dual.e42 * this.e4315) + (right_dual.e43 * this.e4125)) + (this.group0.yzxx * float4(right_dual.group5.xyz.zxy, right_dual.e41)), 
            /* e5 */
            -(right_dual.e15 * this.e4235) - (right_dual.e25 * this.e4315) - (right_dual.e35 * this.e4125) - (right_dual.e45 * this.e3215), 
            /* e15, e25, e35, e45 */
            float4((right_dual.e415 * this.e3215) + (right_dual.e315 * this.e4125), (right_dual.e425 * this.e3215) + (right_dual.e125 * this.e4235), (right_dual.e435 * this.e3215) + (right_dual.e235 * this.e4315), -(right_dual.e425 * this.e4315) - (right_dual.e435 * this.e4125)) - (this.group0.yzxx * float4(right_dual.group8.xyz.zxy, right_dual.e415)), 
            /* e41, e42, e43 */
            (right_dual.group7.xyz.zxy * this.group0.yzx) - (right_dual.group7.xyz.yzx * this.group0.zxy), 
            /* e23, e31, e12 */
            (float3(this.e3215) * right_dual.group7.xyz) - (float3(right_dual.e321) * this.group0.xyz), 
            /* e415, e425, e435, e321 */
            float4(((right_dual.group9.yzx * this.group0.zxy) - (right_dual.group9.zxy * this.group0.yzx)), right_dual.e1234 * this.e3215 * -1.0), 
            /* e423, e431, e412 */
            float3(right_dual.e1234) * this.group0.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            (float3(right_dual.e3215) * this.group0.xyz) - (float3(this.e3215) * right_dual.group9.xyz), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * this.group0, 
            /* e1234 */
            0.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(anti_wedge.scalar * other.scalar, (anti_wedge.scalar * other.e12345) + (anti_wedge.e12345 * other.scalar) + (anti_wedge.e1 * other.e4235) + (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) + (anti_wedge.e4 * other.e3215) + (anti_wedge.e5 * other.e1234) + (anti_wedge.e4235 * other.e1) + (anti_wedge.e4315 * other.e2) + (anti_wedge.e4125 * other.e3) + (anti_wedge.e3215 * other.e4) + (anti_wedge.e1234 * other.e5) - (anti_wedge.e15 * other.e423) - (anti_wedge.e25 * other.e431) - (anti_wedge.e35 * other.e412) - (anti_wedge.e45 * other.e321) - (anti_wedge.e41 * other.e235) - (anti_wedge.e42 * other.e315) - (anti_wedge.e43 * other.e125) - (anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435) - (anti_wedge.e415 * other.e23) - (anti_wedge.e425 * other.e31) - (anti_wedge.e435 * other.e12) - (anti_wedge.e321 * other.e45) - (anti_wedge.e423 * other.e15) - (anti_wedge.e431 * other.e25) - (anti_wedge.e412 * other.e35) - (anti_wedge.e235 * other.e41) - (anti_wedge.e315 * other.e42) - (anti_wedge.e125 * other.e43)), 
            /* e1, e2, e3, e4 */
            (float4(anti_wedge.scalar) * other.group1) + (float4(other.scalar) * anti_wedge.group1), 
            /* e5 */
            (anti_wedge.scalar * other.e5) + (anti_wedge.e5 * other.scalar), 
            /* e15, e25, e35, e45 */
            (float4(anti_wedge.scalar) * other.group3) + (float4(anti_wedge.e5) * other.group1) + (float4(other.scalar) * anti_wedge.group3) - (float4(other.e5) * anti_wedge.group1), 
            /* e41, e42, e43 */
            (float3(anti_wedge.scalar) * other.group4.xyz) + (float3(other.scalar) * anti_wedge.group4.xyz) + (float3(other.e4) * anti_wedge.group1.xyz) - (float3(anti_wedge.e4) * other.group1.xyz), 
            /* e23, e31, e12 */
            (float3(anti_wedge.scalar) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group5.xyz) + (anti_wedge.group1.zxy * other.group1.yzx) - (anti_wedge.group1.yzx * other.group1.zxy), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e4 * other.e15) + (anti_wedge.e5 * other.e41) + (anti_wedge.e15 * other.e4) + (anti_wedge.e41 * other.e5), (anti_wedge.e4 * other.e25) + (anti_wedge.e5 * other.e42) + (anti_wedge.e25 * other.e4) + (anti_wedge.e42 * other.e5), (anti_wedge.e4 * other.e35) + (anti_wedge.e5 * other.e43) + (anti_wedge.e35 * other.e4) + (anti_wedge.e43 * other.e5), -(anti_wedge.e1 * other.e23) - (anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12) - (anti_wedge.e12 * other.e3)) + (float4(anti_wedge.scalar) * other.group6) + (float4(other.scalar) * anti_wedge.group6) - (other.group1.xyzy * float4(anti_wedge.group3.www, anti_wedge.e31)) - float4((other.group3.www * anti_wedge.group1.xyz), anti_wedge.e23 * other.e1), 
            /* e423, e431, e412 */
            (float3(anti_wedge.scalar) * other.group7.xyz) + (float3(anti_wedge.e4) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group7.xyz) + (float3(other.e4) * anti_wedge.group5.xyz) + (anti_wedge.group4.xyz.yzx * other.group1.zxy) + (other.group4.xyz.yzx * anti_wedge.group1.zxy) - (anti_wedge.group4.xyz.zxy * other.group1.yzx) - (other.group4.xyz.zxy * anti_wedge.group1.yzx), 
            /* e235, e315, e125 */
            (float3(anti_wedge.scalar) * other.group8.xyz) + (float3(anti_wedge.e5) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group8.xyz) + (float3(other.e5) * anti_wedge.group5.xyz) + (anti_wedge.group1.yzx * other.group3.zxy) + (anti_wedge.group3.zxy * other.group1.yzx) - (anti_wedge.group1.zxy * other.group3.yzx) - (anti_wedge.group3.yzx * other.group1.zxy), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e2 * other.e435) + (anti_wedge.e5 * other.e423) + (anti_wedge.e45 * other.e23) + (anti_wedge.e425 * other.e3), (anti_wedge.e3 * other.e415) + (anti_wedge.e5 * other.e431) + (anti_wedge.e45 * other.e31) + (anti_wedge.e435 * other.e1), (anti_wedge.e1 * other.e425) + (anti_wedge.e5 * other.e412) + (anti_wedge.e45 * other.e12) + (anti_wedge.e415 * other.e2), -(anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12) - (anti_wedge.e321 * other.e5)) + (float4(anti_wedge.scalar) * other.group9) + (float4(other.scalar) * anti_wedge.group9) + float4((anti_wedge.group5.xyz * other.group3.www), anti_wedge.e2 * other.e315) + float4((anti_wedge.group8.xyz * other.group1.www), anti_wedge.e3 * other.e125) + float4((anti_wedge.group4.xyz.yzx * other.group3.zxy), anti_wedge.e1 * other.e235) + float4((other.group4.xyz.yzx * anti_wedge.group3.zxy), anti_wedge.e5 * other.e321) - (other.group1.yzxz * float4(anti_wedge.group6.zxy, anti_wedge.e125)) - (other.group3.yzxx * float4(anti_wedge.group4.xyz.zxy, anti_wedge.e23)) - float4((float3(other.e5) * anti_wedge.group7.xyz), anti_wedge.e31 * other.e25) - float4((other.group8.xyz * anti_wedge.group1.www), anti_wedge.e235 * other.e1) - float4((other.group4.xyz.zxy * anti_wedge.group3.yzx), anti_wedge.e12 * other.e35) - float4((anti_wedge.group1.zxy * other.group6.yzx), anti_wedge.e315 * other.e2), 
            /* e1234 */
            (anti_wedge.scalar * other.e1234) + (anti_wedge.e321 * other.e4) + (anti_wedge.e423 * other.e1) + (anti_wedge.e431 * other.e2) + (anti_wedge.e412 * other.e3) + (anti_wedge.e1234 * other.scalar) - (anti_wedge.e1 * other.e423) - (anti_wedge.e2 * other.e431) - (anti_wedge.e3 * other.e412) - (anti_wedge.e4 * other.e321) - (anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12) - (anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)
        );
    }
}
// Fancy infix trick (second half)
public Plane operator /(AntiProjectViaHorizonOntoInfixPartial<Plane> lhs, Plane rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Plane {
    public Plane anti_project_via_horizon_onto(Plane other) {
        AntiPlane right_dual = AntiPlane(
            /* e1, e2, e3, e5 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return Plane(
            /* e4235, e4315, e4125, e3215 */
            float4((right_dual.e1 * this.e4235) + (right_dual.e2 * this.e4315) + (right_dual.e3 * this.e4125)) * other.group0
        );
    }
}
// Fancy infix trick (second half)
public Sphere operator /(AntiProjectViaHorizonOntoInfixPartial<Plane> lhs, RoundPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Plane {
    public Sphere anti_project_via_horizon_onto(RoundPoint other) {
        Sphere right_dual = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        Circle anti_wedge = Circle(
            /* e423, e431, e412 */
            float3(right_dual.e1234) * this.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            float4(((this.group0.zxy * right_dual.group0.yzx) - (this.group0.yzx * right_dual.group0.zxy)), this.e3215 * right_dual.e1234 * -1.0), 
            /* e235, e315, e125 */
            (float3(right_dual.e3215) * this.group0.xyz) - (float3(this.e3215) * right_dual.group0.xyz)
        );
        return Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e425 * other.e3) + (anti_wedge.e235 * other.e4), (anti_wedge.e435 * other.e1) + (anti_wedge.e315 * other.e4), (anti_wedge.e415 * other.e2) + (anti_wedge.e125 * other.e4), -(anti_wedge.e321 * other.e5) - (anti_wedge.e125 * other.e3)) - (other.group0.yzxy * float4(anti_wedge.group1.zxy, anti_wedge.e315)) - float4((float3(other.e5) * anti_wedge.group0.xyz), anti_wedge.e235 * other.e1), 
            /* e1234 */
            (anti_wedge.e423 * other.e1) + (anti_wedge.e431 * other.e2) + (anti_wedge.e412 * other.e3) + (anti_wedge.e321 * other.e4)
        );
    }
}
// Fancy infix trick (second half)
public Plane operator /(AntiProjectViaHorizonOntoInfixPartial<Plane> lhs, Scalar rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Plane {
    public Plane anti_project_via_horizon_onto(Scalar other) {
        AntiScalar right_dual = AntiScalar(
            /* e12345 */
            other.scalar
        );
        return Plane(
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar) * float4(right_dual.e12345 * this.e4235, right_dual.e12345 * this.e4315, right_dual.e12345 * this.e4125, right_dual.e12345 * this.e3215)
        );
    }
}
// Fancy infix trick (second half)
public Sphere operator /(AntiProjectViaHorizonOntoInfixPartial<Plane> lhs, Sphere rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Plane {
    public Sphere anti_project_via_horizon_onto(Sphere other) {
        RoundPoint right_dual = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(other.group0.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215
        );
        Scalar anti_wedge = Scalar(
            /* scalar */
            (this.e4235 * right_dual.e1) + (this.e4315 * right_dual.e2) + (this.e4125 * right_dual.e3) + (this.e3215 * right_dual.e4)
        );
        return Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(anti_wedge.scalar) * other.group0, 
            /* e1234 */
            anti_wedge.scalar * other.e1234
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<Plane> lhs, VersorEven rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Plane {
    public DipoleInversion anti_project_via_horizon_onto(VersorEven other) {
        VersorOdd right_dual = VersorOdd(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiDipoleInversion anti_wedge = AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(right_dual.e1234) * this.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            float4(((this.group0.zxy * right_dual.group3.yzx) - (this.group0.yzx * right_dual.group3.zxy)), this.e3215 * right_dual.e1234 * -1.0), 
            /* e235, e315, e125, e4 */
            float4(this.e3215 * right_dual.e4235 * -1.0, this.e3215 * right_dual.e4315 * -1.0, this.e3215 * right_dual.e4125 * -1.0, (this.e4315 * right_dual.e42) + (this.e4125 * right_dual.e43)) + (this.group0.xyzx * float4(right_dual.group3.www, right_dual.e41)), 
            /* e1, e2, e3, e5 */
            float4(this.e4315 * right_dual.e12, this.e4125 * right_dual.e23, this.e4235 * right_dual.e31, -(this.e4125 * right_dual.e35) - (this.e3215 * right_dual.e45)) - (this.group0.zxyx * float4(right_dual.group1.yzx, right_dual.e15)) - (this.group0.wwwy * float4(right_dual.group0.xyz, right_dual.e25))
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            (float3(other.e4) * anti_wedge.group3.xyz) - (float3(anti_wedge.e4) * other.group3.xyz), 
            /* e23, e31, e12, e45 */
            (anti_wedge.group3.zxyw * other.group3.yzxw) - float4((anti_wedge.group3.yzx * other.group3.zxy), anti_wedge.e4 * other.e5), 
            /* e15, e25, e35, e1234 */
            (other.group3.xyzx * float4(anti_wedge.group3.www, anti_wedge.e423)) + float4(float3(0.0), (anti_wedge.e431 * other.e2) + (anti_wedge.e412 * other.e3) + (anti_wedge.e321 * other.e4) - (anti_wedge.e1 * other.e423) - (anti_wedge.e2 * other.e431) - (anti_wedge.e3 * other.e412)) - float4((other.group2.www * anti_wedge.group3.xyz), anti_wedge.e4 * other.e321), 
            /* e4235, e4315, e4125, e3215 */
            (float4(anti_wedge.e5) * float4(other.group0.xyz, other.e321)) + (anti_wedge.group3.yzxz * float4(other.group1.zxy, other.e125)) + float4((anti_wedge.group1.yzx * other.group3.zxy), anti_wedge.e1 * other.e235) + float4((other.group3.www * anti_wedge.group2.xyz), anti_wedge.e2 * other.e315) - (float4(other.e5) * float4(anti_wedge.group0.xyz, anti_wedge.e321)) - (anti_wedge.group2.wwwy * float4(other.group2.xyz, other.e2)) - (other.group3.yzxx * float4(anti_wedge.group1.zxy, anti_wedge.e235)) - float4((anti_wedge.group3.zxy * other.group1.yzx), anti_wedge.e125 * other.e3)
        );
    }
}
// Fancy infix trick (second half)
public VersorOdd operator /(AntiProjectViaHorizonOntoInfixPartial<Plane> lhs, VersorOdd rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Plane {
    public VersorOdd anti_project_via_horizon_onto(VersorOdd other) {
        VersorEven right_dual = VersorEven(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        VersorOdd anti_wedge = VersorOdd(
            /* e41, e42, e43, scalar */
            float4(this.e4125 * right_dual.e431 * -1.0, this.e4235 * right_dual.e412 * -1.0, this.e4315 * right_dual.e423 * -1.0, (this.e4315 * right_dual.e2) + (this.e4125 * right_dual.e3) + (this.e3215 * right_dual.e4)) + (this.group0.yzxx * float4(right_dual.group0.zxy, right_dual.e1)), 
            /* e23, e31, e12, e45 */
            float4(this.e3215 * right_dual.e423, this.e3215 * right_dual.e431, this.e3215 * right_dual.e412, -(this.e4315 * right_dual.e425) - (this.e4125 * right_dual.e435)) - (this.group0.xyzx * right_dual.group1.wwwx), 
            /* e15, e25, e35, e1234 */
            float4((float3(this.e3215) * right_dual.group1.xyz), 0.0) + float4((this.group0.zxy * right_dual.group2.yzx), 0.0) - float4((this.group0.yzx * right_dual.group2.zxy), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * this.group0
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(((float3(anti_wedge.scalar) * other.group0.xyz) + (float3(other.scalar) * anti_wedge.group0.xyz)), anti_wedge.scalar * other.scalar), 
            /* e23, e31, e12, e45 */
            (float4(anti_wedge.scalar) * other.group1) + (float4(other.scalar) * anti_wedge.group1), 
            /* e15, e25, e35, e1234 */
            (float4(anti_wedge.scalar) * other.group2) + (float4(other.scalar) * anti_wedge.group2) + float4(float3(0.0), -(anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12) - (anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e23 * other.e45) + (anti_wedge.e45 * other.e23) + (anti_wedge.e35 * other.e42) + (anti_wedge.e4235 * other.scalar), (anti_wedge.e31 * other.e45) + (anti_wedge.e45 * other.e31) + (anti_wedge.e15 * other.e43) + (anti_wedge.e4315 * other.scalar), (anti_wedge.e12 * other.e45) + (anti_wedge.e45 * other.e12) + (anti_wedge.e25 * other.e41) + (anti_wedge.e4125 * other.scalar), -(anti_wedge.e12 * other.e35) - (anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12)) + (anti_wedge.group0.yzxw * float4(other.group2.zxy, other.e3215)) + float4((anti_wedge.group0.www * other.group3.xyz), anti_wedge.e3215 * other.scalar) - (other.group2.yzxx * float4(anti_wedge.group0.zxy, anti_wedge.e23)) - float4((anti_wedge.group2.yzx * other.group0.zxy), anti_wedge.e31 * other.e25)
        );
    }
}
// Fancy infix trick (first half)
public AntiProjectViaHorizonOntoInfixPartial<RoundPoint> operator /(RoundPoint lhs, AntiProjectViaHorizonOntoInfix rhs) {
    return AntiProjectViaHorizonOntoInfixPartial<RoundPoint>(lhs);
}
// Fancy infix trick (second half)
public AntiDipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<RoundPoint> lhs, AntiCircleRotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension RoundPoint {
    public AntiDipoleInversion anti_project_via_horizon_onto(AntiCircleRotor other) {
        CircleRotor right_dual = CircleRotor(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        RoundPoint anti_wedge = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(right_dual.e12345) * this.group0, 
            /* e5 */
            right_dual.e12345 * this.e5
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            (float3(anti_wedge.e4) * other.group1.xyz) + (other.group0.xyz.yzx * anti_wedge.group0.zxy) - (other.group0.xyz.zxy * anti_wedge.group0.yzx), 
            /* e415, e425, e435, e321 */
            float4((other.e41 * anti_wedge.e5) + (other.e15 * anti_wedge.e4), (other.e42 * anti_wedge.e5) + (other.e25 * anti_wedge.e4), (other.e43 * anti_wedge.e5) + (other.e35 * anti_wedge.e4), -(other.e31 * anti_wedge.e2) - (other.e12 * anti_wedge.e3)) - (other.group1.wwwx * anti_wedge.group0.xyzx), 
            /* e235, e315, e125, e4 */
            float4(((float3(anti_wedge.e5) * other.group1.xyz) + (other.group2.zxy * anti_wedge.group0.yzx) - (other.group2.yzx * anti_wedge.group0.zxy)), other.scalar * anti_wedge.e4), 
            /* e1, e2, e3, e5 */
            float4(other.scalar) * float4(anti_wedge.group0.xyz, anti_wedge.e5)
        );
    }
}
// Fancy infix trick (second half)
public AntiDipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<RoundPoint> lhs, AntiDipoleInversion rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension RoundPoint {
    public AntiDipoleInversion anti_project_via_horizon_onto(AntiDipoleInversion other) {
        DipoleInversion right_dual = DipoleInversion(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        Scalar anti_wedge = Scalar(
            /* scalar */
            (right_dual.e1234 * this.e5) + (right_dual.e4235 * this.e1) + (right_dual.e4315 * this.e2) + (right_dual.e4125 * this.e3) + (right_dual.e3215 * this.e4)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(anti_wedge.scalar) * other.group1, 
            /* e235, e315, e125, e4 */
            float4(anti_wedge.scalar) * other.group2, 
            /* e1, e2, e3, e5 */
            float4(anti_wedge.scalar) * other.group3
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<RoundPoint> lhs, AntiDualNum rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension RoundPoint {
    public VersorEven anti_project_via_horizon_onto(AntiDualNum other) {
        DualNum right_dual = DualNum(
            /* e5, e12345 */
            other.group0.xy
        );
        RoundPoint anti_wedge = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(right_dual.e12345) * this.group0, 
            /* e5 */
            right_dual.e12345 * this.e5
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(float3(0.0), other.e3215 * anti_wedge.e4), 
            /* e415, e425, e435, e321 */
            float4(0.0), 
            /* e235, e315, e125, e5 */
            float4(float3(0.0), other.scalar * anti_wedge.e5), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * anti_wedge.group0
        );
    }
}
// Fancy infix trick (second half)
public AntiFlector operator /(AntiProjectViaHorizonOntoInfixPartial<RoundPoint> lhs, AntiFlector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension RoundPoint {
    public AntiFlector anti_project_via_horizon_onto(AntiFlector other) {
        Flector right_dual = Flector(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        Scalar anti_wedge = Scalar(
            /* scalar */
            (right_dual.e4235 * this.e1) + (right_dual.e4315 * this.e2) + (right_dual.e4125 * this.e3) + (right_dual.e3215 * this.e4)
        );
        return AntiFlector(
            /* e235, e315, e125, e321 */
            float4(anti_wedge.scalar) * other.group0, 
            /* e1, e2, e3, e5 */
            float4(anti_wedge.scalar) * other.group1
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<RoundPoint> lhs, AntiMotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension RoundPoint {
    public VersorEven anti_project_via_horizon_onto(AntiMotor other) {
        Motor right_dual = Motor(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        RoundPoint anti_wedge = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(right_dual.e12345) * this.group0, 
            /* e5 */
            right_dual.e12345 * this.e5
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(anti_wedge.e4) * float4(other.group0.xyz, other.e3215), 
            /* e415, e425, e435, e321 */
            float4((float3(anti_wedge.e4) * other.group1.xyz), -(other.e23 * anti_wedge.e1) - (other.e31 * anti_wedge.e2) - (other.e12 * anti_wedge.e3)), 
            /* e235, e315, e125, e5 */
            float4(((float3(anti_wedge.e5) * other.group0.xyz) + (other.group1.zxy * anti_wedge.group0.yzx) - (other.group1.yzx * anti_wedge.group0.zxy)), other.scalar * anti_wedge.e5), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * anti_wedge.group0
        );
    }
}
// Fancy infix trick (second half)
public AntiPlane operator /(AntiProjectViaHorizonOntoInfixPartial<RoundPoint> lhs, AntiPlane rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension RoundPoint {
    public AntiPlane anti_project_via_horizon_onto(AntiPlane other) {
        Plane right_dual = Plane(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiPlane(
            /* e1, e2, e3, e5 */
            float4((right_dual.e4235 * this.e1) + (right_dual.e4315 * this.e2) + (right_dual.e4125 * this.e3) + (right_dual.e3215 * this.e4)) * other.group0
        );
    }
}
// Fancy infix trick (second half)
public DualNum operator /(AntiProjectViaHorizonOntoInfixPartial<RoundPoint> lhs, DualNum rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension RoundPoint {
    public DualNum anti_project_via_horizon_onto(DualNum other) {
        return DualNum(
            /* e5, e12345 */
            float2(other.e5 * this.e4 * -1.0) * other.group0.xy
        );
    }
}
// Fancy infix trick (second half)
public Motor operator /(AntiProjectViaHorizonOntoInfixPartial<RoundPoint> lhs, Motor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension RoundPoint {
    public Motor anti_project_via_horizon_onto(Motor other) {
        Scalar anti_wedge = Scalar(
            /* scalar */
            (other.group1 * float4(1.0, 1.0, 1.0, -1.0))[3] * this.e4
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4(anti_wedge.scalar) * other.group0, 
            /* e235, e315, e125, e5 */
            float4(anti_wedge.scalar) * other.group1
        );
    }
}
// Fancy infix trick (second half)
public MultiVector operator /(AntiProjectViaHorizonOntoInfixPartial<RoundPoint> lhs, MultiVector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension RoundPoint {
    public MultiVector anti_project_via_horizon_onto(MultiVector other) {
        MultiVector right_dual = MultiVector(
            /* scalar, e12345 */
            other.group0.xy.yx * float2(-1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215, 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43 */
            other.group7.xyz, 
            /* e23, e31, e12 */
            other.group6.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412 */
            other.group4.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group3.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        MultiVector anti_wedge = MultiVector(
            /* scalar, e12345 */
            float2((right_dual.e4235 * this.e1) + (right_dual.e4315 * this.e2) + (right_dual.e4125 * this.e3) + (right_dual.e3215 * this.e4) + (right_dual.e1234 * this.e5), 0.0), 
            /* e1, e2, e3, e4 */
            float4(right_dual.e12345) * this.group0, 
            /* e5 */
            right_dual.e12345 * this.e5, 
            /* e15, e25, e35, e45 */
            float4(0.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(0.0), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            float3(0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(0.0), 
            /* e1234 */
            0.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(anti_wedge.scalar * other.scalar, (anti_wedge.scalar * other.e12345) + (anti_wedge.e12345 * other.scalar) + (anti_wedge.e1 * other.e4235) + (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) + (anti_wedge.e4 * other.e3215) + (anti_wedge.e5 * other.e1234) + (anti_wedge.e4235 * other.e1) + (anti_wedge.e4315 * other.e2) + (anti_wedge.e4125 * other.e3) + (anti_wedge.e3215 * other.e4) + (anti_wedge.e1234 * other.e5) - (anti_wedge.e15 * other.e423) - (anti_wedge.e25 * other.e431) - (anti_wedge.e35 * other.e412) - (anti_wedge.e45 * other.e321) - (anti_wedge.e41 * other.e235) - (anti_wedge.e42 * other.e315) - (anti_wedge.e43 * other.e125) - (anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435) - (anti_wedge.e415 * other.e23) - (anti_wedge.e425 * other.e31) - (anti_wedge.e435 * other.e12) - (anti_wedge.e321 * other.e45) - (anti_wedge.e423 * other.e15) - (anti_wedge.e431 * other.e25) - (anti_wedge.e412 * other.e35) - (anti_wedge.e235 * other.e41) - (anti_wedge.e315 * other.e42) - (anti_wedge.e125 * other.e43)), 
            /* e1, e2, e3, e4 */
            (float4(anti_wedge.scalar) * other.group1) + (float4(other.scalar) * anti_wedge.group1), 
            /* e5 */
            (anti_wedge.scalar * other.e5) + (anti_wedge.e5 * other.scalar), 
            /* e15, e25, e35, e45 */
            (float4(anti_wedge.scalar) * other.group3) + (float4(anti_wedge.e5) * other.group1) + (float4(other.scalar) * anti_wedge.group3) - (float4(other.e5) * anti_wedge.group1), 
            /* e41, e42, e43 */
            (float3(anti_wedge.scalar) * other.group4.xyz) + (float3(other.scalar) * anti_wedge.group4.xyz) + (float3(other.e4) * anti_wedge.group1.xyz) - (float3(anti_wedge.e4) * other.group1.xyz), 
            /* e23, e31, e12 */
            (float3(anti_wedge.scalar) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group5.xyz) + (anti_wedge.group1.zxy * other.group1.yzx) - (anti_wedge.group1.yzx * other.group1.zxy), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e4 * other.e15) + (anti_wedge.e5 * other.e41) + (anti_wedge.e15 * other.e4) + (anti_wedge.e41 * other.e5), (anti_wedge.e4 * other.e25) + (anti_wedge.e5 * other.e42) + (anti_wedge.e25 * other.e4) + (anti_wedge.e42 * other.e5), (anti_wedge.e4 * other.e35) + (anti_wedge.e5 * other.e43) + (anti_wedge.e35 * other.e4) + (anti_wedge.e43 * other.e5), -(anti_wedge.e1 * other.e23) - (anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12) - (anti_wedge.e12 * other.e3)) + (float4(anti_wedge.scalar) * other.group6) + (float4(other.scalar) * anti_wedge.group6) - (other.group1.xyzy * float4(anti_wedge.group3.www, anti_wedge.e31)) - float4((other.group3.www * anti_wedge.group1.xyz), anti_wedge.e23 * other.e1), 
            /* e423, e431, e412 */
            (float3(anti_wedge.scalar) * other.group7.xyz) + (float3(anti_wedge.e4) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group7.xyz) + (float3(other.e4) * anti_wedge.group5.xyz) + (anti_wedge.group4.xyz.yzx * other.group1.zxy) + (other.group4.xyz.yzx * anti_wedge.group1.zxy) - (anti_wedge.group4.xyz.zxy * other.group1.yzx) - (other.group4.xyz.zxy * anti_wedge.group1.yzx), 
            /* e235, e315, e125 */
            (float3(anti_wedge.scalar) * other.group8.xyz) + (float3(anti_wedge.e5) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group8.xyz) + (float3(other.e5) * anti_wedge.group5.xyz) + (anti_wedge.group1.yzx * other.group3.zxy) + (anti_wedge.group3.zxy * other.group1.yzx) - (anti_wedge.group1.zxy * other.group3.yzx) - (anti_wedge.group3.yzx * other.group1.zxy), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e2 * other.e435) + (anti_wedge.e5 * other.e423) + (anti_wedge.e45 * other.e23) + (anti_wedge.e425 * other.e3), (anti_wedge.e3 * other.e415) + (anti_wedge.e5 * other.e431) + (anti_wedge.e45 * other.e31) + (anti_wedge.e435 * other.e1), (anti_wedge.e1 * other.e425) + (anti_wedge.e5 * other.e412) + (anti_wedge.e45 * other.e12) + (anti_wedge.e415 * other.e2), -(anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12) - (anti_wedge.e321 * other.e5)) + (float4(anti_wedge.scalar) * other.group9) + (float4(other.scalar) * anti_wedge.group9) + float4((anti_wedge.group5.xyz * other.group3.www), anti_wedge.e2 * other.e315) + float4((anti_wedge.group8.xyz * other.group1.www), anti_wedge.e3 * other.e125) + float4((anti_wedge.group4.xyz.yzx * other.group3.zxy), anti_wedge.e1 * other.e235) + float4((other.group4.xyz.yzx * anti_wedge.group3.zxy), anti_wedge.e5 * other.e321) - (other.group1.yzxz * float4(anti_wedge.group6.zxy, anti_wedge.e125)) - (other.group3.yzxx * float4(anti_wedge.group4.xyz.zxy, anti_wedge.e23)) - float4((float3(other.e5) * anti_wedge.group7.xyz), anti_wedge.e31 * other.e25) - float4((other.group8.xyz * anti_wedge.group1.www), anti_wedge.e235 * other.e1) - float4((other.group4.xyz.zxy * anti_wedge.group3.yzx), anti_wedge.e12 * other.e35) - float4((anti_wedge.group1.zxy * other.group6.yzx), anti_wedge.e315 * other.e2), 
            /* e1234 */
            (anti_wedge.scalar * other.e1234) + (anti_wedge.e321 * other.e4) + (anti_wedge.e423 * other.e1) + (anti_wedge.e431 * other.e2) + (anti_wedge.e412 * other.e3) + (anti_wedge.e1234 * other.scalar) - (anti_wedge.e1 * other.e423) - (anti_wedge.e2 * other.e431) - (anti_wedge.e3 * other.e412) - (anti_wedge.e4 * other.e321) - (anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12) - (anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)
        );
    }
}
// Fancy infix trick (second half)
public RoundPoint operator /(AntiProjectViaHorizonOntoInfixPartial<RoundPoint> lhs, RoundPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension RoundPoint {
    public RoundPoint anti_project_via_horizon_onto(RoundPoint other) {
        Sphere right_dual = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        Scalar anti_wedge = Scalar(
            /* scalar */
            (this.e1 * right_dual.e4235) + (this.e2 * right_dual.e4315) + (this.e3 * right_dual.e4125) + (this.e4 * right_dual.e3215) + (this.e5 * right_dual.e1234)
        );
        return RoundPoint(
            /* e1, e2, e3, e4 */
            float4(anti_wedge.scalar) * other.group0, 
            /* e5 */
            other.e5 * anti_wedge.scalar
        );
    }
}
// Fancy infix trick (second half)
public RoundPoint operator /(AntiProjectViaHorizonOntoInfixPartial<RoundPoint> lhs, Scalar rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension RoundPoint {
    public RoundPoint anti_project_via_horizon_onto(Scalar other) {
        AntiScalar right_dual = AntiScalar(
            /* e12345 */
            other.scalar
        );
        RoundPoint anti_wedge = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(right_dual.e12345) * this.group0, 
            /* e5 */
            right_dual.e12345 * this.e5
        );
        return RoundPoint(
            /* e1, e2, e3, e4 */
            float4(other.scalar) * anti_wedge.group0, 
            /* e5 */
            anti_wedge.e5 * other.scalar
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<RoundPoint> lhs, VersorEven rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension RoundPoint {
    public VersorEven anti_project_via_horizon_onto(VersorEven other) {
        VersorOdd right_dual = VersorOdd(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        Scalar anti_wedge = Scalar(
            /* scalar */
            (this.e1 * right_dual.e4235) + (this.e2 * right_dual.e4315) + (this.e3 * right_dual.e4125) + (this.e4 * right_dual.e3215) + (this.e5 * right_dual.e1234)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(anti_wedge.scalar) * other.group0, 
            /* e415, e425, e435, e321 */
            float4(anti_wedge.scalar) * other.group1, 
            /* e235, e315, e125, e5 */
            float4(anti_wedge.scalar) * other.group2, 
            /* e1, e2, e3, e4 */
            float4(anti_wedge.scalar) * other.group3
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<RoundPoint> lhs, VersorOdd rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension RoundPoint {
    public VersorEven anti_project_via_horizon_onto(VersorOdd other) {
        VersorEven right_dual = VersorEven(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        RoundPoint anti_wedge = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(right_dual.e12345) * this.group0, 
            /* e5 */
            this.e5 * right_dual.e12345
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(anti_wedge.e2 * other.e43 * -1.0, anti_wedge.e3 * other.e41 * -1.0, anti_wedge.e1 * other.e42 * -1.0, (anti_wedge.e3 * other.e4125) + (anti_wedge.e4 * other.e3215) + (anti_wedge.e5 * other.e1234)) + (anti_wedge.group0.zxyx * float4(other.group0.yzx, other.e4235)) + (anti_wedge.group0.wwwy * float4(other.group1.xyz, other.e4315)), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e4 * other.e15) + (anti_wedge.e5 * other.e41), (anti_wedge.e4 * other.e25) + (anti_wedge.e5 * other.e42), (anti_wedge.e4 * other.e35) + (anti_wedge.e5 * other.e43), -(anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12)) - (anti_wedge.group0.xyzx * other.group1.wwwx), 
            /* e235, e315, e125, e5 */
            float4(((float3(anti_wedge.e5) * other.group1.xyz) + (anti_wedge.group0.yzx * other.group2.zxy) - (anti_wedge.group0.zxy * other.group2.yzx)), anti_wedge.e5 * other.scalar), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * anti_wedge.group0
        );
    }
}
// Fancy infix trick (first half)
public AntiProjectViaHorizonOntoInfixPartial<Scalar> operator /(Scalar lhs, AntiProjectViaHorizonOntoInfix rhs) {
    return AntiProjectViaHorizonOntoInfixPartial<Scalar>(lhs);
}
// Fancy infix trick (second half)
public AntiCircleRotor operator /(AntiProjectViaHorizonOntoInfixPartial<Scalar> lhs, AntiCircleRotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Scalar {
    public AntiCircleRotor anti_project_via_horizon_onto(AntiCircleRotor other) {
        Scalar anti_wedge = Scalar(
            /* scalar */
            (other.group2 * float4(-1.0, -1.0, -1.0, 1.0))[3] * this.scalar
        );
        return AntiCircleRotor(
            /* e41, e42, e43 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(anti_wedge.scalar) * other.group1, 
            /* e15, e25, e35, scalar */
            float4(anti_wedge.scalar) * other.group2
        );
    }
}
// Fancy infix trick (second half)
public AntiDualNum operator /(AntiProjectViaHorizonOntoInfixPartial<Scalar> lhs, AntiDualNum rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Scalar {
    public AntiDualNum anti_project_via_horizon_onto(AntiDualNum other) {
        return AntiDualNum(
            /* e3215, scalar */
            float2(other.scalar * this.scalar) * other.group0.xy
        );
    }
}
// Fancy infix trick (second half)
public AntiMotor operator /(AntiProjectViaHorizonOntoInfixPartial<Scalar> lhs, AntiMotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Scalar {
    public AntiMotor anti_project_via_horizon_onto(AntiMotor other) {
        Scalar anti_wedge = Scalar(
            /* scalar */
            (other.group0 * float4(-1.0, -1.0, -1.0, 1.0))[3] * this.scalar
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4(anti_wedge.scalar) * other.group0, 
            /* e15, e25, e35, e3215 */
            float4(anti_wedge.scalar) * other.group1
        );
    }
}
// Fancy infix trick (second half)
public MultiVector operator /(AntiProjectViaHorizonOntoInfixPartial<Scalar> lhs, MultiVector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Scalar {
    public MultiVector anti_project_via_horizon_onto(MultiVector other) {
        Scalar anti_wedge = Scalar(
            /* scalar */
            (other.group0.xy.yx * float2(-1.0, 1.0))[1] * this.scalar
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(anti_wedge.scalar) * other.group0.xy, 
            /* e1, e2, e3, e4 */
            float4(anti_wedge.scalar) * other.group1, 
            /* e5 */
            other.e5 * anti_wedge.scalar, 
            /* e15, e25, e35, e45 */
            float4(anti_wedge.scalar) * other.group3, 
            /* e41, e42, e43 */
            float3(anti_wedge.scalar) * other.group4.xyz, 
            /* e23, e31, e12 */
            float3(anti_wedge.scalar) * other.group5.xyz, 
            /* e415, e425, e435, e321 */
            float4(anti_wedge.scalar) * other.group6, 
            /* e423, e431, e412 */
            float3(anti_wedge.scalar) * other.group7.xyz, 
            /* e235, e315, e125 */
            float3(anti_wedge.scalar) * other.group8.xyz, 
            /* e4235, e4315, e4125, e3215 */
            float4(anti_wedge.scalar) * other.group9, 
            /* e1234 */
            other.e1234 * anti_wedge.scalar
        );
    }
}
// Fancy infix trick (second half)
public Scalar operator /(AntiProjectViaHorizonOntoInfixPartial<Scalar> lhs, Scalar rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Scalar {
    public Scalar anti_project_via_horizon_onto(Scalar other) {
        return Scalar(
            /* scalar */
            pow(other.scalar, 2) * this.scalar
        );
    }
}
// Fancy infix trick (second half)
public VersorOdd operator /(AntiProjectViaHorizonOntoInfixPartial<Scalar> lhs, VersorOdd rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Scalar {
    public VersorOdd anti_project_via_horizon_onto(VersorOdd other) {
        Scalar anti_wedge = Scalar(
            /* scalar */
            (other.group0 * float4(-1.0, -1.0, -1.0, 1.0))[3] * this.scalar
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(anti_wedge.scalar) * other.group0, 
            /* e23, e31, e12, e45 */
            float4(anti_wedge.scalar) * other.group1, 
            /* e15, e25, e35, e1234 */
            float4(anti_wedge.scalar) * other.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(anti_wedge.scalar) * other.group3
        );
    }
}
// Fancy infix trick (first half)
public AntiProjectViaHorizonOntoInfixPartial<Sphere> operator /(Sphere lhs, AntiProjectViaHorizonOntoInfix rhs) {
    return AntiProjectViaHorizonOntoInfixPartial<Sphere>(lhs);
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<Sphere> lhs, AntiCircleRotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Sphere {
    public DipoleInversion anti_project_via_horizon_onto(AntiCircleRotor other) {
        CircleRotor right_dual = CircleRotor(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        DipoleInversion anti_wedge = DipoleInversion(
            /* e41, e42, e43 */
            (float3(this.e1234) * right_dual.group1.xyz) + (right_dual.group0.xyz.zxy * this.group0.yzx) - (right_dual.group0.xyz.yzx * this.group0.zxy), 
            /* e23, e31, e12, e45 */
            float4((right_dual.e423 * this.e3215) + (right_dual.e235 * this.e1234), (right_dual.e431 * this.e3215) + (right_dual.e315 * this.e1234), (right_dual.e412 * this.e3215) + (right_dual.e125 * this.e1234), -(right_dual.e425 * this.e4315) - (right_dual.e435 * this.e4125)) - (right_dual.group1.wwwx * this.group0.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(this.e3215) * right_dual.group1.xyz) + (right_dual.group2.yzx * this.group0.zxy) - (right_dual.group2.zxy * this.group0.yzx)), right_dual.e12345 * this.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * this.group0
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            float3(other.scalar) * anti_wedge.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(other.scalar) * anti_wedge.group1, 
            /* e15, e25, e35, e1234 */
            float4((other.group2.www * anti_wedge.group2.xyz), (other.scalar * anti_wedge.e1234) - (other.e41 * anti_wedge.e23) - (other.e42 * anti_wedge.e31) - (other.e43 * anti_wedge.e12) - (other.e23 * anti_wedge.e41) - (other.e31 * anti_wedge.e42) - (other.e12 * anti_wedge.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e23 * anti_wedge.e45) + (other.e45 * anti_wedge.e23) + (other.e35 * anti_wedge.e42) + (other.scalar * anti_wedge.e4235), (other.e31 * anti_wedge.e45) + (other.e45 * anti_wedge.e31) + (other.e15 * anti_wedge.e43) + (other.scalar * anti_wedge.e4315), (other.e12 * anti_wedge.e45) + (other.e45 * anti_wedge.e12) + (other.e25 * anti_wedge.e41) + (other.scalar * anti_wedge.e4125), -(other.e12 * anti_wedge.e35) - (other.e15 * anti_wedge.e23) - (other.e25 * anti_wedge.e31) - (other.e35 * anti_wedge.e12)) + float4((other.group0.xyz.yzx * anti_wedge.group2.zxy), other.scalar * anti_wedge.e3215) - (anti_wedge.group2.yzxx * float4(other.group0.xyz.zxy, other.e23)) - float4((anti_wedge.group0.xyz.zxy * other.group2.yzx), other.e31 * anti_wedge.e25)
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<Sphere> lhs, AntiDipoleInversion rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Sphere {
    public DipoleInversion anti_project_via_horizon_onto(AntiDipoleInversion other) {
        DipoleInversion right_dual = DipoleInversion(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiDipoleInversion anti_wedge = AntiDipoleInversion(
            /* e423, e431, e412 */
            (float3(this.e1234) * right_dual.group3.xyz) - (float3(right_dual.e1234) * this.group0.xyz), 
            /* e415, e425, e435, e321 */
            (right_dual.group3.yzxw * float4(this.group0.zxy, this.e1234)) - (this.group0.yzxw * float4(right_dual.group3.zxy, right_dual.e1234)), 
            /* e235, e315, e125, e4 */
            float4(right_dual.e4235 * this.e3215 * -1.0, right_dual.e4315 * this.e3215 * -1.0, right_dual.e4125 * this.e3215 * -1.0, (right_dual.e42 * this.e4315) + (right_dual.e43 * this.e4125) + (right_dual.e45 * this.e1234)) + (this.group0.xyzx * float4(right_dual.group3.www, right_dual.e41)), 
            /* e1, e2, e3, e5 */
            float4((right_dual.e12 * this.e4315) + (right_dual.e15 * this.e1234), (right_dual.e23 * this.e4125) + (right_dual.e25 * this.e1234), (right_dual.e31 * this.e4235) + (right_dual.e35 * this.e1234), -(right_dual.e25 * this.e4315) - (right_dual.e35 * this.e4125)) - (float4(this.e3215) * float4(right_dual.group0.xyz, right_dual.e45)) - (this.group0.zxyx * float4(right_dual.group1.yzx, right_dual.e15))
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            (float3(other.e4) * anti_wedge.group3.xyz) - (float3(anti_wedge.e4) * other.group3.xyz), 
            /* e23, e31, e12, e45 */
            (anti_wedge.group3.zxyw * float4(other.group3.yzx, other.e4)) - (other.group3.zxyw * float4(anti_wedge.group3.yzx, anti_wedge.e4)), 
            /* e15, e25, e35, e1234 */
            (other.group3.xyzx * float4(anti_wedge.group3.www, anti_wedge.e423)) + float4(float3(0.0), (anti_wedge.e431 * other.e2) + (anti_wedge.e412 * other.e3) + (anti_wedge.e321 * other.e4) - (anti_wedge.e4 * other.e321) - (anti_wedge.e2 * other.e431) - (anti_wedge.e3 * other.e412)) - float4((other.group3.www * anti_wedge.group3.xyz), anti_wedge.e1 * other.e423), 
            /* e4235, e4315, e4125, e3215 */
            (anti_wedge.group3.yzxw * other.group1.zxyw) + (other.group2.wwwz * float4(anti_wedge.group2.xyz, anti_wedge.e3)) + float4((other.group0.xyz * anti_wedge.group3.www), anti_wedge.e1 * other.e235) + float4((anti_wedge.group1.yzx * other.group3.zxy), anti_wedge.e2 * other.e315) - (float4(other.e5) * float4(anti_wedge.group0.xyz, anti_wedge.e321)) - (anti_wedge.group2.wwwy * float4(other.group2.xyz, other.e2)) - (other.group3.yzxx * float4(anti_wedge.group1.zxy, anti_wedge.e235)) - float4((anti_wedge.group3.zxy * other.group1.yzx), anti_wedge.e125 * other.e3)
        );
    }
}
// Fancy infix trick (second half)
public VersorOdd operator /(AntiProjectViaHorizonOntoInfixPartial<Sphere> lhs, AntiDualNum rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Sphere {
    public VersorOdd anti_project_via_horizon_onto(AntiDualNum other) {
        DualNum right_dual = DualNum(
            /* e5, e12345 */
            other.group0.xy
        );
        VersorOdd anti_wedge = VersorOdd(
            /* e41, e42, e43, scalar */
            float4(float3(0.0), right_dual.e5 * this.e1234), 
            /* e23, e31, e12, e45 */
            float4(0.0), 
            /* e15, e25, e35, e1234 */
            float4(float3(0.0), right_dual.e12345 * this.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * this.group0
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(other.scalar) * anti_wedge.group0, 
            /* e23, e31, e12, e45 */
            float4(0.0), 
            /* e15, e25, e35, e1234 */
            float4(other.scalar) * anti_wedge.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xy.yy, other.scalar, (other.e3215 * anti_wedge.scalar) + (other.scalar * anti_wedge.e3215)) * float4(anti_wedge.group3.xyz, 1.0)
        );
    }
}
// Fancy infix trick (second half)
public Sphere operator /(AntiProjectViaHorizonOntoInfixPartial<Sphere> lhs, AntiFlatPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Sphere {
    public Sphere anti_project_via_horizon_onto(AntiFlatPoint other) {
        FlatPoint right_dual = FlatPoint(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        RoundPoint anti_wedge = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(this.e1234) * right_dual.group0, 
            /* e5 */
            -(right_dual.e15 * this.e4235) - (right_dual.e25 * this.e4315) - (right_dual.e35 * this.e4125) - (right_dual.e45 * this.e3215)
        );
        return Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4((float3(anti_wedge.e4) * other.group0.xyz * float3(-1.0)), (other.e235 * anti_wedge.e1) + (other.e315 * anti_wedge.e2) + (other.e125 * anti_wedge.e3) + (other.e321 * anti_wedge.e5)), 
            /* e1234 */
            other.e321 * anti_wedge.e4 * -1.0
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<Sphere> lhs, AntiFlector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Sphere {
    public DipoleInversion anti_project_via_horizon_onto(AntiFlector other) {
        Flector right_dual = Flector(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiDipoleInversion anti_wedge = AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(this.e1234) * right_dual.group1.xyz, 
            /* e415, e425, e435, e321 */
            float4(((right_dual.group1.yzx * this.group0.zxy) - (right_dual.group1.zxy * this.group0.yzx)), right_dual.e3215 * this.e1234), 
            /* e235, e315, e125, e4 */
            float4(((float3(right_dual.e3215) * this.group0.xyz) - (float3(this.e3215) * right_dual.group1.xyz)), right_dual.e45 * this.e1234), 
            /* e1, e2, e3, e5 */
            float4((float3(this.e1234) * right_dual.group0.xyz), -(right_dual.e15 * this.e4235) - (right_dual.e25 * this.e4315) - (right_dual.e35 * this.e4125) - (right_dual.e45 * this.e3215))
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            float3(anti_wedge.e4) * other.group1.xyz * float3(-1.0), 
            /* e23, e31, e12, e45 */
            float4(((anti_wedge.group3.zxy * other.group1.yzx) - (anti_wedge.group3.yzx * other.group1.zxy)), anti_wedge.e4 * other.e5 * -1.0), 
            /* e15, e25, e35, e1234 */
            (other.group1.xyzx * float4(anti_wedge.group3.www, anti_wedge.e423)) + float4(float3(0.0), (anti_wedge.e431 * other.e2) + (anti_wedge.e412 * other.e3)) - float4((other.group1.www * anti_wedge.group3.xyz), anti_wedge.e4 * other.e321), 
            /* e4235, e4315, e4125, e3215 */
            float4(float3(0.0), (anti_wedge.e2 * other.e315) + (anti_wedge.e3 * other.e125) + (anti_wedge.e5 * other.e321) - (anti_wedge.e125 * other.e3)) + float4((anti_wedge.group1.yzx * other.group1.zxy), anti_wedge.e1 * other.e235) - (float4(other.e5) * float4(anti_wedge.group0.xyz, anti_wedge.e321)) - (anti_wedge.group2.wwwy * float4(other.group0.xyz, other.e2)) - (other.group1.yzxx * float4(anti_wedge.group1.zxy, anti_wedge.e235))
        );
    }
}
// Fancy infix trick (second half)
public Sphere operator /(AntiProjectViaHorizonOntoInfixPartial<Sphere> lhs, AntiLine rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Sphere {
    public Sphere anti_project_via_horizon_onto(AntiLine other) {
        Line right_dual = Line(
            /* e415, e425, e435 */
            other.group0.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group1.xyz * float3(-1.0)
        );
        Dipole anti_wedge = Dipole(
            /* e41, e42, e43 */
            float3(this.e1234) * right_dual.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4((float3(this.e1234) * right_dual.group1.xyz), -(right_dual.e415 * this.e4235) - (right_dual.e425 * this.e4315) - (right_dual.e435 * this.e4125)), 
            /* e15, e25, e35 */
            (float3(this.e3215) * right_dual.group0.xyz) + (right_dual.group1.xyz.yzx * this.group0.zxy) - (right_dual.group1.xyz.zxy * this.group0.yzx)
        );
        return Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4((other.e23 * anti_wedge.e45) + (other.e35 * anti_wedge.e42), (other.e31 * anti_wedge.e45) + (other.e15 * anti_wedge.e43), (other.e12 * anti_wedge.e45) + (other.e25 * anti_wedge.e41), -(other.e31 * anti_wedge.e25) - (other.e12 * anti_wedge.e35) - (other.e15 * anti_wedge.e23) - (other.e25 * anti_wedge.e31) - (other.e35 * anti_wedge.e12)) - float4((other.group1.xyz.yzx * anti_wedge.group0.xyz.zxy), other.e23 * anti_wedge.e15), 
            /* e1234 */
            -(other.e23 * anti_wedge.e41) - (other.e31 * anti_wedge.e42) - (other.e12 * anti_wedge.e43)
        );
    }
}
// Fancy infix trick (second half)
public VersorOdd operator /(AntiProjectViaHorizonOntoInfixPartial<Sphere> lhs, AntiMotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Sphere {
    public VersorOdd anti_project_via_horizon_onto(AntiMotor other) {
        Motor right_dual = Motor(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        VersorOdd anti_wedge = VersorOdd(
            /* e41, e42, e43, scalar */
            float4(this.e1234) * float4(right_dual.group0.xyz, right_dual.e5), 
            /* e23, e31, e12, e45 */
            float4((float3(this.e1234) * right_dual.group1.xyz), -(right_dual.e415 * this.e4235) - (right_dual.e425 * this.e4315) - (right_dual.e435 * this.e4125)), 
            /* e15, e25, e35, e1234 */
            float4(((float3(this.e3215) * right_dual.group0.xyz) + (right_dual.group1.yzx * this.group0.zxy) - (right_dual.group1.zxy * this.group0.yzx)), right_dual.e12345 * this.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * this.group0
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(other.scalar) * anti_wedge.group0, 
            /* e23, e31, e12, e45 */
            float4(((float3(other.scalar) * anti_wedge.group1.xyz) + (float3(anti_wedge.scalar) * other.group0.xyz)), other.scalar * anti_wedge.e45), 
            /* e15, e25, e35, e1234 */
            float4(other.e15 * anti_wedge.scalar, other.e25 * anti_wedge.scalar, other.e35 * anti_wedge.scalar, -(other.e23 * anti_wedge.e41) - (other.e31 * anti_wedge.e42) - (other.e12 * anti_wedge.e43)) + (float4(other.scalar) * anti_wedge.group2), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.e35 * anti_wedge.e42, other.e15 * anti_wedge.e43, other.e25 * anti_wedge.e41, -(other.e31 * anti_wedge.e25) - (other.e12 * anti_wedge.e35) - (other.e15 * anti_wedge.e23) - (other.e25 * anti_wedge.e31) - (other.e35 * anti_wedge.e12)) + (other.group0 * float4(anti_wedge.group1.www, anti_wedge.e3215)) + float4((other.group0.www * anti_wedge.group3.xyz), other.e3215 * anti_wedge.scalar) - float4((other.group1.yzx * anti_wedge.group0.zxy), other.e23 * anti_wedge.e15)
        );
    }
}
// Fancy infix trick (second half)
public Sphere operator /(AntiProjectViaHorizonOntoInfixPartial<Sphere> lhs, AntiPlane rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Sphere {
    public Sphere anti_project_via_horizon_onto(AntiPlane other) {
        Plane right_dual = Plane(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        Circle anti_wedge = Circle(
            /* e423, e431, e412 */
            float3(this.e1234) * right_dual.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(((right_dual.group0.yzx * this.group0.zxy) - (right_dual.group0.zxy * this.group0.yzx)), right_dual.e3215 * this.e1234), 
            /* e235, e315, e125 */
            (float3(right_dual.e3215) * this.group0.xyz) - (float3(this.e3215) * right_dual.group0.xyz)
        );
        return Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.e3 * anti_wedge.e425, other.e1 * anti_wedge.e435, other.e2 * anti_wedge.e415, -(other.e3 * anti_wedge.e125) - (other.e5 * anti_wedge.e321)) - (other.group0.wwwx * float4(anti_wedge.group0.xyz, anti_wedge.e235)) - float4((other.group0.yzx * anti_wedge.group1.zxy), other.e2 * anti_wedge.e315), 
            /* e1234 */
            (other.e1 * anti_wedge.e423) + (other.e2 * anti_wedge.e431) + (other.e3 * anti_wedge.e412)
        );
    }
}
// Fancy infix trick (second half)
public Sphere operator /(AntiProjectViaHorizonOntoInfixPartial<Sphere> lhs, Circle rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Sphere {
    public Sphere anti_project_via_horizon_onto(Circle other) {
        Dipole right_dual = Dipole(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35 */
            other.group2.xyz
        );
        RoundPoint anti_wedge = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(-(right_dual.e41 * this.e3215) - (right_dual.e31 * this.e4125), -(right_dual.e42 * this.e3215) - (right_dual.e12 * this.e4235), -(right_dual.e43 * this.e3215) - (right_dual.e23 * this.e4315), (right_dual.e43 * this.e4125) + (right_dual.e45 * this.e1234)) + (this.group0.yzxy * float4(right_dual.group1.zxy, right_dual.e42)) + float4((float3(this.e1234) * right_dual.group2.xyz), right_dual.e41 * this.e4235), 
            /* e5 */
            -(right_dual.e45 * this.e3215) - (right_dual.e15 * this.e4235) - (right_dual.e25 * this.e4315) - (right_dual.e35 * this.e4125)
        );
        return Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(-(other.e425 * anti_wedge.e3) - (other.e235 * anti_wedge.e4), -(other.e435 * anti_wedge.e1) - (other.e315 * anti_wedge.e4), -(other.e415 * anti_wedge.e2) - (other.e125 * anti_wedge.e4), (other.e321 * anti_wedge.e5) + (other.e125 * anti_wedge.e3)) + (anti_wedge.group0.yzxy * float4(other.group1.zxy, other.e315)) + float4((float3(anti_wedge.e5) * other.group0.xyz), other.e235 * anti_wedge.e1), 
            /* e1234 */
            -(other.e423 * anti_wedge.e1) - (other.e431 * anti_wedge.e2) - (other.e412 * anti_wedge.e3) - (other.e321 * anti_wedge.e4)
        );
    }
}
// Fancy infix trick (second half)
public Sphere operator /(AntiProjectViaHorizonOntoInfixPartial<Sphere> lhs, CircleRotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Sphere {
    public Sphere anti_project_via_horizon_onto(CircleRotor other) {
        AntiCircleRotor right_dual = AntiCircleRotor(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        RoundPoint anti_wedge = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(-(right_dual.e41 * this.e3215) - (right_dual.e31 * this.e4125), -(right_dual.e42 * this.e3215) - (right_dual.e12 * this.e4235), -(right_dual.e43 * this.e3215) - (right_dual.e23 * this.e4315), (right_dual.e43 * this.e4125) + (right_dual.e45 * this.e1234)) + (this.group0.yzxx * float4(right_dual.group1.zxy, right_dual.e41)) + float4((float3(this.e1234) * right_dual.group2.xyz), right_dual.e42 * this.e4315), 
            /* e5 */
            -(right_dual.e45 * this.e3215) - (right_dual.e15 * this.e4235) - (right_dual.e25 * this.e4315) - (right_dual.e35 * this.e4125)
        );
        return Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(-(other.e425 * anti_wedge.e3) - (other.e235 * anti_wedge.e4), -(other.e435 * anti_wedge.e1) - (other.e315 * anti_wedge.e4), -(other.e415 * anti_wedge.e2) - (other.e125 * anti_wedge.e4), (other.e315 * anti_wedge.e2) + (other.e125 * anti_wedge.e3)) + (float4(anti_wedge.e5) * float4(other.group0.xyz, other.e321)) + (anti_wedge.group0.yzxx * float4(other.group1.zxy, other.e235)), 
            /* e1234 */
            -(other.e423 * anti_wedge.e1) - (other.e431 * anti_wedge.e2) - (other.e412 * anti_wedge.e3) - (other.e321 * anti_wedge.e4)
        );
    }
}
// Fancy infix trick (second half)
public Sphere operator /(AntiProjectViaHorizonOntoInfixPartial<Sphere> lhs, Dipole rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Sphere {
    public Sphere anti_project_via_horizon_onto(Dipole other) {
        Circle right_dual = Circle(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125 */
            other.group2.xyz * float3(-1.0)
        );
        Dipole anti_wedge = Dipole(
            /* e41, e42, e43 */
            (float3(this.e1234) * right_dual.group1.xyz) + (right_dual.group0.xyz.zxy * this.group0.yzx) - (right_dual.group0.xyz.yzx * this.group0.zxy), 
            /* e23, e31, e12, e45 */
            float4((right_dual.e423 * this.e3215) + (right_dual.e235 * this.e1234), (right_dual.e431 * this.e3215) + (right_dual.e315 * this.e1234), (right_dual.e412 * this.e3215) + (right_dual.e125 * this.e1234), -(right_dual.e425 * this.e4315) - (right_dual.e435 * this.e4125)) - (right_dual.group1.wwwx * this.group0.xyzx), 
            /* e15, e25, e35 */
            (float3(this.e3215) * right_dual.group1.xyz) + (right_dual.group2.xyz.yzx * this.group0.zxy) - (right_dual.group2.xyz.zxy * this.group0.yzx)
        );
        return Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e42 * other.e35) + (anti_wedge.e23 * other.e45) + (anti_wedge.e45 * other.e23) + (anti_wedge.e35 * other.e42), (anti_wedge.e43 * other.e15) + (anti_wedge.e31 * other.e45) + (anti_wedge.e45 * other.e31) + (anti_wedge.e15 * other.e43), (anti_wedge.e41 * other.e25) + (anti_wedge.e12 * other.e45) + (anti_wedge.e45 * other.e12) + (anti_wedge.e25 * other.e41), -(anti_wedge.e23 * other.e15) - (anti_wedge.e31 * other.e25) - (anti_wedge.e12 * other.e35) - (anti_wedge.e35 * other.e12)) - float4((anti_wedge.group0.xyz.zxy * other.group2.xyz.yzx), anti_wedge.e15 * other.e23) - float4((anti_wedge.group2.xyz.yzx * other.group0.xyz.zxy), anti_wedge.e25 * other.e31), 
            /* e1234 */
            -(anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12) - (anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<Sphere> lhs, DipoleInversion rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Sphere {
    public DipoleInversion anti_project_via_horizon_onto(DipoleInversion other) {
        AntiDipoleInversion right_dual = AntiDipoleInversion(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiCircleRotor anti_wedge = AntiCircleRotor(
            /* e41, e42, e43 */
            (float3(this.e1234) * right_dual.group1.xyz) + (right_dual.group0.xyz.zxy * this.group0.yzx) - (right_dual.group0.xyz.yzx * this.group0.zxy), 
            /* e23, e31, e12, e45 */
            float4((right_dual.e423 * this.e3215) + (right_dual.e235 * this.e1234), (right_dual.e431 * this.e3215) + (right_dual.e315 * this.e1234), (right_dual.e412 * this.e3215) + (right_dual.e125 * this.e1234), -(right_dual.e425 * this.e4315) - (right_dual.e435 * this.e4125)) - (right_dual.group1.wwwx * this.group0.xyzx), 
            /* e15, e25, e35, scalar */
            float4(right_dual.e125 * this.e4315 * -1.0, right_dual.e235 * this.e4125 * -1.0, right_dual.e315 * this.e4235 * -1.0, (right_dual.e2 * this.e4315) + (right_dual.e3 * this.e4125) + (right_dual.e5 * this.e1234)) + (float4(this.e3215) * float4(right_dual.group1.xyz, right_dual.e4)) + (this.group0.zxyx * float4(right_dual.group2.yzx, right_dual.e1))
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(anti_wedge.scalar) * other.group1, 
            /* e15, e25, e35, e1234 */
            float4((anti_wedge.group2.www * other.group2.xyz), (anti_wedge.scalar * other.e1234) - (anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12) - (anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e23 * other.e45) + (anti_wedge.e45 * other.e23) + (anti_wedge.e35 * other.e42) + (anti_wedge.scalar * other.e4235), (anti_wedge.e31 * other.e45) + (anti_wedge.e45 * other.e31) + (anti_wedge.e15 * other.e43) + (anti_wedge.scalar * other.e4315), (anti_wedge.e12 * other.e45) + (anti_wedge.e45 * other.e12) + (anti_wedge.e25 * other.e41) + (anti_wedge.scalar * other.e4125), -(anti_wedge.e12 * other.e35) - (anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12)) + float4((anti_wedge.group0.xyz.yzx * other.group2.zxy), anti_wedge.scalar * other.e3215) - (other.group2.yzxx * float4(anti_wedge.group0.xyz.zxy, anti_wedge.e23)) - float4((other.group0.xyz.zxy * anti_wedge.group2.yzx), anti_wedge.e31 * other.e25)
        );
    }
}
// Fancy infix trick (second half)
public AntiDualNum operator /(AntiProjectViaHorizonOntoInfixPartial<Sphere> lhs, DualNum rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Sphere {
    public AntiDualNum anti_project_via_horizon_onto(DualNum other) {
        return AntiDualNum(
            /* e3215, scalar */
            float2(pow(other.e5, 2) * this.e1234, 1.0) * float2(1.0, 0.0)
        );
    }
}
// Fancy infix trick (second half)
public Plane operator /(AntiProjectViaHorizonOntoInfixPartial<Sphere> lhs, FlatPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Sphere {
    public Plane anti_project_via_horizon_onto(FlatPoint other) {
        AntiFlatPoint right_dual = AntiFlatPoint(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiLine anti_wedge = AntiLine(
            /* e23, e31, e12 */
            (float3(this.e1234) * right_dual.group0.xyz) - (float3(right_dual.e321) * this.group0.xyz), 
            /* e15, e25, e35 */
            (right_dual.group0.yzx * this.group0.zxy) - (right_dual.group0.zxy * this.group0.yzx)
        );
        return Plane(
            /* e4235, e4315, e4125, e3215 */
            float4((float3(other.e45) * anti_wedge.group0.xyz), -(anti_wedge.e23 * other.e15) - (anti_wedge.e31 * other.e25) - (anti_wedge.e12 * other.e35))
        );
    }
}
// Fancy infix trick (second half)
public Flector operator /(AntiProjectViaHorizonOntoInfixPartial<Sphere> lhs, Flector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Sphere {
    public Flector anti_project_via_horizon_onto(Flector other) {
        AntiFlector right_dual = AntiFlector(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiMotor anti_wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4(right_dual.e321 * this.e4235 * -1.0, right_dual.e321 * this.e4315 * -1.0, right_dual.e321 * this.e4125 * -1.0, (right_dual.e2 * this.e4315) + (right_dual.e3 * this.e4125) + (right_dual.e5 * this.e1234)) + float4((float3(this.e1234) * right_dual.group0.xyz), right_dual.e1 * this.e4235), 
            /* e15, e25, e35, e3215 */
            float4(((right_dual.group0.yzx * this.group0.zxy) - (right_dual.group0.zxy * this.group0.yzx)), 0.0)
        );
        return Flector(
            /* e15, e25, e35, e45 */
            float4(anti_wedge.scalar) * other.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4(anti_wedge.scalar * other.e4235, anti_wedge.scalar * other.e4315, anti_wedge.scalar * other.e4125, -(anti_wedge.e23 * other.e15) - (anti_wedge.e31 * other.e25) - (anti_wedge.e12 * other.e35)) + (anti_wedge.group0 * float4(other.group0.www, other.e3215))
        );
    }
}
// Fancy infix trick (second half)
public Plane operator /(AntiProjectViaHorizonOntoInfixPartial<Sphere> lhs, Line rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Sphere {
    public Plane anti_project_via_horizon_onto(Line other) {
        AntiLine right_dual = AntiLine(
            /* e23, e31, e12 */
            other.group0.xyz, 
            /* e15, e25, e35 */
            other.group1.xyz
        );
        AntiPlane anti_wedge = AntiPlane(
            /* e1, e2, e3, e5 */
            float4((right_dual.e12 * this.e4315) + (right_dual.e15 * this.e1234), (right_dual.e23 * this.e4125) + (right_dual.e25 * this.e1234), (right_dual.e31 * this.e4235) + (right_dual.e35 * this.e1234), -(right_dual.e25 * this.e4315) - (right_dual.e35 * this.e4125)) - (this.group0.zxyx * float4(right_dual.group0.xyz.yzx, right_dual.e15))
        );
        return Plane(
            /* e4235, e4315, e4125, e3215 */
            float4(anti_wedge.e3 * other.e425 * -1.0, anti_wedge.e1 * other.e435 * -1.0, anti_wedge.e2 * other.e415 * -1.0, (anti_wedge.e2 * other.e315) + (anti_wedge.e3 * other.e125)) + (anti_wedge.group0.yzxx * float4(other.group0.xyz.zxy, other.e235))
        );
    }
}
// Fancy infix trick (second half)
public Flector operator /(AntiProjectViaHorizonOntoInfixPartial<Sphere> lhs, Motor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Sphere {
    public Flector anti_project_via_horizon_onto(Motor other) {
        AntiMotor right_dual = AntiMotor(
            /* e23, e31, e12, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiFlector anti_wedge = AntiFlector(
            /* e235, e315, e125, e321 */
            float4(right_dual.e3215) * float4(this.group0.xyz, this.e1234), 
            /* e1, e2, e3, e5 */
            float4((right_dual.e12 * this.e4315) + (right_dual.e15 * this.e1234), (right_dual.e23 * this.e4125) + (right_dual.e25 * this.e1234), (right_dual.e31 * this.e4235) + (right_dual.e35 * this.e1234), -(right_dual.e25 * this.e4315) - (right_dual.e35 * this.e4125)) - (this.group0.zxyx * float4(right_dual.group0.yzx, right_dual.e15))
        );
        return Flector(
            /* e15, e25, e35, e45 */
            float4(float3(1.0), 0.0) * float4(other.group1.www, 0.0) * float4(anti_wedge.group1.xyz, 0.0) * float4(-1.0, -1.0, -1.0, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            (anti_wedge.group1.yzxx * float4(other.group0.zxy, other.e235)) + float4(float3(0.0), (anti_wedge.e2 * other.e315) + (anti_wedge.e3 * other.e125)) - float4((anti_wedge.group1.zxy * other.group0.yzx), anti_wedge.e321 * other.e5)
        );
    }
}
// Fancy infix trick (second half)
public MultiVector operator /(AntiProjectViaHorizonOntoInfixPartial<Sphere> lhs, MultiVector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Sphere {
    public MultiVector anti_project_via_horizon_onto(MultiVector other) {
        MultiVector right_dual = MultiVector(
            /* scalar, e12345 */
            other.group0.xy.yx * float2(-1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215, 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43 */
            other.group7.xyz, 
            /* e23, e31, e12 */
            other.group6.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412 */
            other.group4.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group3.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        MultiVector anti_wedge = MultiVector(
            /* scalar, e12345 */
            float2((right_dual.e1 * this.e4235) + (right_dual.e2 * this.e4315) + (right_dual.e3 * this.e4125) + (right_dual.e4 * this.e3215) + (right_dual.e5 * this.e1234), 0.0), 
            /* e1, e2, e3, e4 */
            float4(-(right_dual.e41 * this.e3215) - (right_dual.e31 * this.e4125), -(right_dual.e42 * this.e3215) - (right_dual.e12 * this.e4235), -(right_dual.e43 * this.e3215) - (right_dual.e23 * this.e4315), (right_dual.e45 * this.e1234) + (right_dual.e43 * this.e4125)) + (this.group0.yzxx * float4(right_dual.group5.xyz.zxy, right_dual.e41)) + float4((float3(this.e1234) * right_dual.group3.xyz), right_dual.e42 * this.e4315), 
            /* e5 */
            -(right_dual.e15 * this.e4235) - (right_dual.e25 * this.e4315) - (right_dual.e35 * this.e4125) - (right_dual.e45 * this.e3215), 
            /* e15, e25, e35, e45 */
            float4((right_dual.e415 * this.e3215) + (right_dual.e315 * this.e4125), (right_dual.e425 * this.e3215) + (right_dual.e125 * this.e4235), (right_dual.e435 * this.e3215) + (right_dual.e235 * this.e4315), -(right_dual.e425 * this.e4315) - (right_dual.e435 * this.e4125)) - (this.group0.yzxx * float4(right_dual.group8.xyz.zxy, right_dual.e415)), 
            /* e41, e42, e43 */
            (float3(this.e1234) * right_dual.group6.xyz) + (right_dual.group7.xyz.zxy * this.group0.yzx) - (right_dual.group7.xyz.yzx * this.group0.zxy), 
            /* e23, e31, e12 */
            (float3(this.e3215) * right_dual.group7.xyz) + (float3(this.e1234) * right_dual.group8.xyz) - (float3(right_dual.e321) * this.group0.xyz), 
            /* e415, e425, e435, e321 */
            (right_dual.group9.yzxw * float4(this.group0.zxy, this.e1234)) - float4((right_dual.group9.zxy * this.group0.yzx), right_dual.e1234 * this.e3215), 
            /* e423, e431, e412 */
            (float3(this.e1234) * right_dual.group9.xyz) - (float3(right_dual.e1234) * this.group0.xyz), 
            /* e235, e315, e125 */
            (float3(right_dual.e3215) * this.group0.xyz) - (float3(this.e3215) * right_dual.group9.xyz), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * this.group0, 
            /* e1234 */
            right_dual.e12345 * this.e1234
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(anti_wedge.scalar * other.scalar, (anti_wedge.scalar * other.e12345) + (anti_wedge.e12345 * other.scalar) + (anti_wedge.e1 * other.e4235) + (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) + (anti_wedge.e4 * other.e3215) + (anti_wedge.e5 * other.e1234) + (anti_wedge.e4235 * other.e1) + (anti_wedge.e4315 * other.e2) + (anti_wedge.e4125 * other.e3) + (anti_wedge.e3215 * other.e4) + (anti_wedge.e1234 * other.e5) - (anti_wedge.e15 * other.e423) - (anti_wedge.e25 * other.e431) - (anti_wedge.e35 * other.e412) - (anti_wedge.e45 * other.e321) - (anti_wedge.e41 * other.e235) - (anti_wedge.e42 * other.e315) - (anti_wedge.e43 * other.e125) - (anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435) - (anti_wedge.e415 * other.e23) - (anti_wedge.e425 * other.e31) - (anti_wedge.e435 * other.e12) - (anti_wedge.e321 * other.e45) - (anti_wedge.e423 * other.e15) - (anti_wedge.e431 * other.e25) - (anti_wedge.e412 * other.e35) - (anti_wedge.e235 * other.e41) - (anti_wedge.e315 * other.e42) - (anti_wedge.e125 * other.e43)), 
            /* e1, e2, e3, e4 */
            (float4(anti_wedge.scalar) * other.group1) + (float4(other.scalar) * anti_wedge.group1), 
            /* e5 */
            (anti_wedge.scalar * other.e5) + (anti_wedge.e5 * other.scalar), 
            /* e15, e25, e35, e45 */
            (float4(anti_wedge.scalar) * other.group3) + (float4(anti_wedge.e5) * other.group1) + (float4(other.scalar) * anti_wedge.group3) - (float4(other.e5) * anti_wedge.group1), 
            /* e41, e42, e43 */
            (float3(anti_wedge.scalar) * other.group4.xyz) + (float3(other.scalar) * anti_wedge.group4.xyz) + (float3(other.e4) * anti_wedge.group1.xyz) - (float3(anti_wedge.e4) * other.group1.xyz), 
            /* e23, e31, e12 */
            (float3(anti_wedge.scalar) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group5.xyz) + (anti_wedge.group1.zxy * other.group1.yzx) - (anti_wedge.group1.yzx * other.group1.zxy), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e4 * other.e15) + (anti_wedge.e5 * other.e41) + (anti_wedge.e15 * other.e4) + (anti_wedge.e41 * other.e5), (anti_wedge.e4 * other.e25) + (anti_wedge.e5 * other.e42) + (anti_wedge.e25 * other.e4) + (anti_wedge.e42 * other.e5), (anti_wedge.e4 * other.e35) + (anti_wedge.e5 * other.e43) + (anti_wedge.e35 * other.e4) + (anti_wedge.e43 * other.e5), -(anti_wedge.e1 * other.e23) - (anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12) - (anti_wedge.e12 * other.e3)) + (float4(anti_wedge.scalar) * other.group6) + (float4(other.scalar) * anti_wedge.group6) - (other.group1.xyzy * float4(anti_wedge.group3.www, anti_wedge.e31)) - float4((other.group3.www * anti_wedge.group1.xyz), anti_wedge.e23 * other.e1), 
            /* e423, e431, e412 */
            (float3(anti_wedge.scalar) * other.group7.xyz) + (float3(anti_wedge.e4) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group7.xyz) + (float3(other.e4) * anti_wedge.group5.xyz) + (anti_wedge.group4.xyz.yzx * other.group1.zxy) + (other.group4.xyz.yzx * anti_wedge.group1.zxy) - (anti_wedge.group4.xyz.zxy * other.group1.yzx) - (other.group4.xyz.zxy * anti_wedge.group1.yzx), 
            /* e235, e315, e125 */
            (float3(anti_wedge.scalar) * other.group8.xyz) + (float3(anti_wedge.e5) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group8.xyz) + (float3(other.e5) * anti_wedge.group5.xyz) + (anti_wedge.group1.yzx * other.group3.zxy) + (anti_wedge.group3.zxy * other.group1.yzx) - (anti_wedge.group1.zxy * other.group3.yzx) - (anti_wedge.group3.yzx * other.group1.zxy), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e2 * other.e435) + (anti_wedge.e5 * other.e423) + (anti_wedge.e45 * other.e23) + (anti_wedge.e425 * other.e3), (anti_wedge.e3 * other.e415) + (anti_wedge.e5 * other.e431) + (anti_wedge.e45 * other.e31) + (anti_wedge.e435 * other.e1), (anti_wedge.e1 * other.e425) + (anti_wedge.e5 * other.e412) + (anti_wedge.e45 * other.e12) + (anti_wedge.e415 * other.e2), -(anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12) - (anti_wedge.e321 * other.e5)) + (float4(anti_wedge.scalar) * other.group9) + (float4(other.scalar) * anti_wedge.group9) + float4((anti_wedge.group5.xyz * other.group3.www), anti_wedge.e2 * other.e315) + float4((anti_wedge.group8.xyz * other.group1.www), anti_wedge.e3 * other.e125) + float4((anti_wedge.group4.xyz.yzx * other.group3.zxy), anti_wedge.e1 * other.e235) + float4((other.group4.xyz.yzx * anti_wedge.group3.zxy), anti_wedge.e5 * other.e321) - (other.group1.yzxz * float4(anti_wedge.group6.zxy, anti_wedge.e125)) - (other.group3.yzxx * float4(anti_wedge.group4.xyz.zxy, anti_wedge.e23)) - float4((float3(other.e5) * anti_wedge.group7.xyz), anti_wedge.e31 * other.e25) - float4((other.group8.xyz * anti_wedge.group1.www), anti_wedge.e235 * other.e1) - float4((other.group4.xyz.zxy * anti_wedge.group3.yzx), anti_wedge.e12 * other.e35) - float4((anti_wedge.group1.zxy * other.group6.yzx), anti_wedge.e315 * other.e2), 
            /* e1234 */
            (anti_wedge.scalar * other.e1234) + (anti_wedge.e321 * other.e4) + (anti_wedge.e423 * other.e1) + (anti_wedge.e431 * other.e2) + (anti_wedge.e412 * other.e3) + (anti_wedge.e1234 * other.scalar) - (anti_wedge.e1 * other.e423) - (anti_wedge.e2 * other.e431) - (anti_wedge.e3 * other.e412) - (anti_wedge.e4 * other.e321) - (anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12) - (anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)
        );
    }
}
// Fancy infix trick (second half)
public Plane operator /(AntiProjectViaHorizonOntoInfixPartial<Sphere> lhs, Plane rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Sphere {
    public Plane anti_project_via_horizon_onto(Plane other) {
        AntiPlane right_dual = AntiPlane(
            /* e1, e2, e3, e5 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return Plane(
            /* e4235, e4315, e4125, e3215 */
            float4((right_dual.e1 * this.e4235) + (right_dual.e2 * this.e4315) + (right_dual.e3 * this.e4125) + (right_dual.e5 * this.e1234)) * other.group0
        );
    }
}
// Fancy infix trick (second half)
public Sphere operator /(AntiProjectViaHorizonOntoInfixPartial<Sphere> lhs, RoundPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Sphere {
    public Sphere anti_project_via_horizon_onto(RoundPoint other) {
        Sphere right_dual = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        Circle anti_wedge = Circle(
            /* e423, e431, e412 */
            (float3(this.e1234) * right_dual.group0.xyz) - (float3(right_dual.e1234) * this.group0.xyz), 
            /* e415, e425, e435, e321 */
            (right_dual.group0.yzxw * float4(this.group0.zxy, this.e1234)) - float4((right_dual.group0.zxy * this.group0.yzx), right_dual.e1234 * this.e3215), 
            /* e235, e315, e125 */
            (float3(right_dual.e3215) * this.group0.xyz) - (float3(this.e3215) * right_dual.group0.xyz)
        );
        return Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e425 * other.e3) + (anti_wedge.e235 * other.e4), (anti_wedge.e435 * other.e1) + (anti_wedge.e315 * other.e4), (anti_wedge.e415 * other.e2) + (anti_wedge.e125 * other.e4), -(anti_wedge.e321 * other.e5) - (anti_wedge.e125 * other.e3)) - (other.group0.yzxy * float4(anti_wedge.group1.zxy, anti_wedge.e315)) - float4((float3(other.e5) * anti_wedge.group0.xyz), anti_wedge.e235 * other.e1), 
            /* e1234 */
            (anti_wedge.e423 * other.e1) + (anti_wedge.e431 * other.e2) + (anti_wedge.e412 * other.e3) + (anti_wedge.e321 * other.e4)
        );
    }
}
// Fancy infix trick (second half)
public Sphere operator /(AntiProjectViaHorizonOntoInfixPartial<Sphere> lhs, Scalar rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Sphere {
    public Sphere anti_project_via_horizon_onto(Scalar other) {
        AntiScalar right_dual = AntiScalar(
            /* e12345 */
            other.scalar
        );
        Sphere anti_wedge = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * this.group0, 
            /* e1234 */
            right_dual.e12345 * this.e1234
        );
        return Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar) * anti_wedge.group0, 
            /* e1234 */
            other.scalar * anti_wedge.e1234
        );
    }
}
// Fancy infix trick (second half)
public Sphere operator /(AntiProjectViaHorizonOntoInfixPartial<Sphere> lhs, Sphere rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Sphere {
    public Sphere anti_project_via_horizon_onto(Sphere other) {
        RoundPoint right_dual = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(other.group0.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215
        );
        Scalar anti_wedge = Scalar(
            /* scalar */
            (right_dual.e1 * this.e4235) + (right_dual.e2 * this.e4315) + (right_dual.e3 * this.e4125) + (right_dual.e4 * this.e3215) + (right_dual.e5 * this.e1234)
        );
        return Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(anti_wedge.scalar) * other.group0, 
            /* e1234 */
            anti_wedge.scalar * other.e1234
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<Sphere> lhs, VersorEven rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Sphere {
    public DipoleInversion anti_project_via_horizon_onto(VersorEven other) {
        VersorOdd right_dual = VersorOdd(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiDipoleInversion anti_wedge = AntiDipoleInversion(
            /* e423, e431, e412 */
            (float3(this.e1234) * right_dual.group3.xyz) - (float3(right_dual.e1234) * this.group0.xyz), 
            /* e415, e425, e435, e321 */
            float4((this.group0.zxy * right_dual.group3.yzx), this.e1234 * right_dual.e3215) - (this.group0.yzxw * float4(right_dual.group3.zxy, right_dual.e1234)), 
            /* e235, e315, e125, e4 */
            float4(this.e3215 * right_dual.e4235 * -1.0, this.e3215 * right_dual.e4315 * -1.0, this.e3215 * right_dual.e4125 * -1.0, (this.e4315 * right_dual.e42) + (this.e4125 * right_dual.e43) + (this.e1234 * right_dual.e45)) + (this.group0.xyzx * float4(right_dual.group3.www, right_dual.e41)), 
            /* e1, e2, e3, e5 */
            float4((this.e4315 * right_dual.e12) + (this.e1234 * right_dual.e15), (this.e4125 * right_dual.e23) + (this.e1234 * right_dual.e25), (this.e4235 * right_dual.e31) + (this.e1234 * right_dual.e35), -(this.e4125 * right_dual.e35) - (this.e3215 * right_dual.e45)) - (this.group0.zxyx * float4(right_dual.group1.yzx, right_dual.e15)) - (this.group0.wwwy * float4(right_dual.group0.xyz, right_dual.e25))
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            (float3(other.e4) * anti_wedge.group3.xyz) - (float3(anti_wedge.e4) * other.group3.xyz), 
            /* e23, e31, e12, e45 */
            (anti_wedge.group3.zxyw * other.group3.yzxw) - float4((anti_wedge.group3.yzx * other.group3.zxy), anti_wedge.e4 * other.e5), 
            /* e15, e25, e35, e1234 */
            (other.group3.xyzx * float4(anti_wedge.group3.www, anti_wedge.e423)) + float4(float3(0.0), (anti_wedge.e431 * other.e2) + (anti_wedge.e412 * other.e3) + (anti_wedge.e321 * other.e4) - (anti_wedge.e1 * other.e423) - (anti_wedge.e2 * other.e431) - (anti_wedge.e3 * other.e412)) - float4((other.group2.www * anti_wedge.group3.xyz), anti_wedge.e4 * other.e321), 
            /* e4235, e4315, e4125, e3215 */
            (float4(anti_wedge.e5) * float4(other.group0.xyz, other.e321)) + (anti_wedge.group3.yzxz * float4(other.group1.zxy, other.e125)) + float4((anti_wedge.group1.yzx * other.group3.zxy), anti_wedge.e1 * other.e235) + float4((other.group3.www * anti_wedge.group2.xyz), anti_wedge.e2 * other.e315) - (float4(other.e5) * float4(anti_wedge.group0.xyz, anti_wedge.e321)) - (anti_wedge.group2.wwwy * float4(other.group2.xyz, other.e2)) - (other.group3.yzxx * float4(anti_wedge.group1.zxy, anti_wedge.e235)) - float4((anti_wedge.group3.zxy * other.group1.yzx), anti_wedge.e125 * other.e3)
        );
    }
}
// Fancy infix trick (second half)
public VersorOdd operator /(AntiProjectViaHorizonOntoInfixPartial<Sphere> lhs, VersorOdd rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension Sphere {
    public VersorOdd anti_project_via_horizon_onto(VersorOdd other) {
        VersorEven right_dual = VersorEven(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        VersorOdd anti_wedge = VersorOdd(
            /* e41, e42, e43, scalar */
            float4(this.e4125 * right_dual.e431 * -1.0, this.e4235 * right_dual.e412 * -1.0, this.e4315 * right_dual.e423 * -1.0, (this.e4125 * right_dual.e3) + (this.e3215 * right_dual.e4) + (this.e1234 * right_dual.e5)) + (this.group0.yzxx * float4(right_dual.group0.zxy, right_dual.e1)) + float4((float3(this.e1234) * right_dual.group1.xyz), this.e4315 * right_dual.e2), 
            /* e23, e31, e12, e45 */
            float4((this.e3215 * right_dual.e423) + (this.e1234 * right_dual.e235), (this.e3215 * right_dual.e431) + (this.e1234 * right_dual.e315), (this.e3215 * right_dual.e412) + (this.e1234 * right_dual.e125), -(this.e4315 * right_dual.e425) - (this.e4125 * right_dual.e435)) - (this.group0.xyzx * right_dual.group1.wwwx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(this.e3215) * right_dual.group1.xyz) + (this.group0.zxy * right_dual.group2.yzx) - (this.group0.yzx * right_dual.group2.zxy)), this.e1234 * right_dual.e12345), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * this.group0
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(((float3(anti_wedge.scalar) * other.group0.xyz) + (float3(other.scalar) * anti_wedge.group0.xyz)), anti_wedge.scalar * other.scalar), 
            /* e23, e31, e12, e45 */
            (float4(anti_wedge.scalar) * other.group1) + (float4(other.scalar) * anti_wedge.group1), 
            /* e15, e25, e35, e1234 */
            (float4(anti_wedge.scalar) * other.group2) + (float4(other.scalar) * anti_wedge.group2) + float4(float3(0.0), -(anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12) - (anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e23 * other.e45) + (anti_wedge.e45 * other.e23) + (anti_wedge.e35 * other.e42) + (anti_wedge.e4235 * other.scalar), (anti_wedge.e31 * other.e45) + (anti_wedge.e45 * other.e31) + (anti_wedge.e15 * other.e43) + (anti_wedge.e4315 * other.scalar), (anti_wedge.e12 * other.e45) + (anti_wedge.e45 * other.e12) + (anti_wedge.e25 * other.e41) + (anti_wedge.e4125 * other.scalar), -(anti_wedge.e12 * other.e35) - (anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12)) + (anti_wedge.group0.yzxw * float4(other.group2.zxy, other.e3215)) + float4((anti_wedge.group0.www * other.group3.xyz), anti_wedge.e3215 * other.scalar) - (other.group2.yzxx * float4(anti_wedge.group0.zxy, anti_wedge.e23)) - float4((anti_wedge.group2.yzx * other.group0.zxy), anti_wedge.e31 * other.e25)
        );
    }
}
// Fancy infix trick (first half)
public AntiProjectViaHorizonOntoInfixPartial<VersorEven> operator /(VersorEven lhs, AntiProjectViaHorizonOntoInfix rhs) {
    return AntiProjectViaHorizonOntoInfixPartial<VersorEven>(lhs);
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<VersorEven> lhs, AntiCircleRotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension VersorEven {
    public VersorEven anti_project_via_horizon_onto(AntiCircleRotor other) {
        CircleRotor right_dual = CircleRotor(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        VersorEven anti_wedge = VersorEven(
            /* e423, e431, e412, e12345 */
            float4(((float3(right_dual.e12345) * this.group0.xyz) + (float3(this.e12345) * right_dual.group0.xyz)), right_dual.e12345 * this.e12345), 
            /* e415, e425, e435, e321 */
            (float4(right_dual.e12345) * this.group1) + (float4(this.e12345) * right_dual.group1), 
            /* e235, e315, e125, e5 */
            float4(right_dual.e12345 * this.e235, right_dual.e12345 * this.e315, right_dual.e12345 * this.e125, -(right_dual.e415 * this.e235) - (right_dual.e425 * this.e315) - (right_dual.e435 * this.e125) - (right_dual.e235 * this.e415) - (right_dual.e315 * this.e425) - (right_dual.e125 * this.e435)) + (right_dual.group2 * float4(this.group0.www, this.e5)), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e415 * this.e321) + (right_dual.e321 * this.e415) + (right_dual.e315 * this.e412) + (right_dual.e12345 * this.e1), (right_dual.e425 * this.e321) + (right_dual.e321 * this.e425) + (right_dual.e125 * this.e423) + (right_dual.e12345 * this.e2), (right_dual.e435 * this.e321) + (right_dual.e321 * this.e435) + (right_dual.e235 * this.e431) + (right_dual.e12345 * this.e3), -(right_dual.e412 * this.e435) - (right_dual.e415 * this.e423) - (right_dual.e425 * this.e431) - (right_dual.e435 * this.e412)) + float4((right_dual.group0.xyz.zxy * this.group2.yzx), right_dual.e12345 * this.e4) - float4((right_dual.group0.xyz.yzx * this.group2.zxy), right_dual.e423 * this.e415) - float4((right_dual.group2.zxy * this.group0.yzx), right_dual.e431 * this.e425)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4((other.e23 * anti_wedge.e4) + (other.scalar * anti_wedge.e423), (other.e31 * anti_wedge.e4) + (other.scalar * anti_wedge.e431), (other.e12 * anti_wedge.e4) + (other.scalar * anti_wedge.e412), -(other.e42 * anti_wedge.e315) - (other.e43 * anti_wedge.e125) - (other.e23 * anti_wedge.e415) - (other.e31 * anti_wedge.e425) - (other.e12 * anti_wedge.e435) - (other.e45 * anti_wedge.e321) - (other.e15 * anti_wedge.e423) - (other.e25 * anti_wedge.e431) - (other.e35 * anti_wedge.e412)) + float4((other.group0.xyz.yzx * anti_wedge.group3.zxy), other.scalar * anti_wedge.e12345) - float4((other.group0.xyz.zxy * anti_wedge.group3.yzx), other.e41 * anti_wedge.e235), 
            /* e415, e425, e435, e321 */
            float4((other.e15 * anti_wedge.e4) + (other.scalar * anti_wedge.e415), (other.e25 * anti_wedge.e4) + (other.scalar * anti_wedge.e425), (other.e35 * anti_wedge.e4) + (other.scalar * anti_wedge.e435), -(other.e31 * anti_wedge.e2) - (other.e12 * anti_wedge.e3)) + float4((other.group0.xyz * anti_wedge.group2.www), other.scalar * anti_wedge.e321) - (other.group1.wwwx * anti_wedge.group3.xyzx), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.scalar) * anti_wedge.group2.xyz) + (float3(anti_wedge.e5) * other.group1.xyz) + (other.group2.zxy * anti_wedge.group3.yzx) - (other.group2.yzx * anti_wedge.group3.zxy)), other.scalar * anti_wedge.e5), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * anti_wedge.group3
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<VersorEven> lhs, AntiDipoleInversion rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension VersorEven {
    public VersorEven anti_project_via_horizon_onto(AntiDipoleInversion other) {
        DipoleInversion right_dual = DipoleInversion(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        VersorOdd anti_wedge = VersorOdd(
            /* e41, e42, e43, scalar */
            (right_dual.group3.yzxy * float4(this.group0.zxy, this.e2)) + float4(float3(0.0), (right_dual.e4125 * this.e3) + (right_dual.e3215 * this.e4) - (right_dual.e42 * this.e315) - (right_dual.e43 * this.e125) - (right_dual.e23 * this.e415) - (right_dual.e31 * this.e425) - (right_dual.e12 * this.e435) - (right_dual.e45 * this.e321) - (right_dual.e15 * this.e423) - (right_dual.e25 * this.e431) - (right_dual.e35 * this.e412)) + float4((right_dual.group0.xyz * this.group0.www), right_dual.e1234 * this.e5) + float4((right_dual.group2.www * this.group1.xyz), right_dual.e4235 * this.e1) - float4((right_dual.group3.zxy * this.group0.yzx), right_dual.e41 * this.e235), 
            /* e23, e31, e12, e45 */
            float4((right_dual.e1234 * this.e235) + (right_dual.e3215 * this.e423), (right_dual.e1234 * this.e315) + (right_dual.e3215 * this.e431), (right_dual.e1234 * this.e125) + (right_dual.e3215 * this.e412), -(right_dual.e4315 * this.e425) - (right_dual.e4125 * this.e435)) + (float4(this.e12345) * right_dual.group1) - (right_dual.group3.xyzx * this.group1.wwwx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_dual.e3215) * this.group1.xyz) + (float3(this.e12345) * right_dual.group2.xyz) + (right_dual.group3.zxy * this.group2.yzx) - (right_dual.group3.yzx * this.group2.zxy)), right_dual.e1234 * this.e12345), 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e12345) * right_dual.group3
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            (other.group3.zxyy * float4(anti_wedge.group0.yzx, anti_wedge.e4315)) + float4(float3(0.0), (other.e3 * anti_wedge.e4125) + (other.e5 * anti_wedge.e1234) - (other.e431 * anti_wedge.e25) - (other.e412 * anti_wedge.e35) - (other.e415 * anti_wedge.e23) - (other.e425 * anti_wedge.e31) - (other.e435 * anti_wedge.e12) - (other.e321 * anti_wedge.e45) - (other.e235 * anti_wedge.e41) - (other.e315 * anti_wedge.e42) - (other.e125 * anti_wedge.e43)) + float4((other.group0.xyz * anti_wedge.group0.www), other.e4 * anti_wedge.e3215) + float4((other.group2.www * anti_wedge.group1.xyz), other.e1 * anti_wedge.e4235) - float4((other.group3.yzx * anti_wedge.group0.zxy), other.e423 * anti_wedge.e15), 
            /* e415, e425, e435, e321 */
            float4((other.e4 * anti_wedge.e15) + (other.e5 * anti_wedge.e41), (other.e4 * anti_wedge.e25) + (other.e5 * anti_wedge.e42), (other.e4 * anti_wedge.e35) + (other.e5 * anti_wedge.e43), -(other.e2 * anti_wedge.e31) - (other.e3 * anti_wedge.e12)) + (float4(anti_wedge.scalar) * other.group1) - (other.group3.xyzx * anti_wedge.group1.wwwx), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.e5) * anti_wedge.group1.xyz) + (float3(anti_wedge.scalar) * other.group2.xyz) + (other.group3.yzx * anti_wedge.group2.zxy) - (other.group3.zxy * anti_wedge.group2.yzx)), other.e5 * anti_wedge.scalar), 
            /* e1, e2, e3, e4 */
            float4(anti_wedge.scalar) * float4(other.group3.xyz, other.e4)
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<VersorEven> lhs, AntiDualNum rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension VersorEven {
    public VersorEven anti_project_via_horizon_onto(AntiDualNum other) {
        DualNum right_dual = DualNum(
            /* e5, e12345 */
            other.group0.xy
        );
        VersorEven anti_wedge = VersorEven(
            /* e423, e431, e412, e12345 */
            float4(right_dual.e12345) * this.group0, 
            /* e415, e425, e435, e321 */
            float4(right_dual.e12345) * this.group1, 
            /* e235, e315, e125, e5 */
            float4(right_dual.group0.xy.yy, right_dual.e12345, (right_dual.e5 * this.e12345) + (right_dual.e12345 * this.e5)) * float4(this.group2.xyz, 1.0), 
            /* e1, e2, e3, e4 */
            float4(right_dual.e12345) * this.group3
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(other.group0.xy.yy, other.scalar, (other.e3215 * anti_wedge.e4) + (other.scalar * anti_wedge.e12345)) * float4(anti_wedge.group0.xyz, 1.0), 
            /* e415, e425, e435, e321 */
            float4(other.scalar) * anti_wedge.group1, 
            /* e235, e315, e125, e5 */
            float4(other.scalar) * anti_wedge.group2, 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * anti_wedge.group3
        );
    }
}
// Fancy infix trick (second half)
public CircleRotor operator /(AntiProjectViaHorizonOntoInfixPartial<VersorEven> lhs, AntiFlatPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension VersorEven {
    public CircleRotor anti_project_via_horizon_onto(AntiFlatPoint other) {
        FlatPoint right_dual = FlatPoint(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiCircleRotor anti_wedge = AntiCircleRotor(
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12, e45 */
            float4(float3(0.0), right_dual.e45 * this.e12345), 
            /* e15, e25, e35, scalar */
            float4((float3(this.e12345) * right_dual.group0.xyz), -(right_dual.e15 * this.e423) - (right_dual.e25 * this.e431) - (right_dual.e35 * this.e412) - (right_dual.e45 * this.e321))
        );
        return CircleRotor(
            /* e423, e431, e412 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(float3(0.0), anti_wedge.scalar * other.e321), 
            /* e235, e315, e125, e12345 */
            float4((anti_wedge.group2.www * other.group0.xyz), -(anti_wedge.e41 * other.e235) - (anti_wedge.e42 * other.e315) - (anti_wedge.e43 * other.e125) - (anti_wedge.e45 * other.e321))
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<VersorEven> lhs, AntiFlector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension VersorEven {
    public VersorEven anti_project_via_horizon_onto(AntiFlector other) {
        Flector right_dual = Flector(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        VersorOdd anti_wedge = VersorOdd(
            /* e41, e42, e43, scalar */
            (right_dual.group1.yzxx * float4(this.group0.zxy, this.e1)) + float4(float3(0.0), (right_dual.e4315 * this.e2) + (right_dual.e4125 * this.e3) + (right_dual.e3215 * this.e4) - (right_dual.e25 * this.e431) - (right_dual.e35 * this.e412) - (right_dual.e45 * this.e321)) - (this.group0.yzxx * float4(right_dual.group1.zxy, right_dual.e15)), 
            /* e23, e31, e12, e45 */
            (this.group0 * float4(right_dual.group1.www, right_dual.e45)) + float4(float3(0.0), -(right_dual.e4315 * this.e425) - (right_dual.e4125 * this.e435)) - (right_dual.group1.xyzx * this.group1.wwwx), 
            /* e15, e25, e35, e1234 */
            float4((float3(right_dual.e3215) * this.group1.xyz), 0.0) + float4((float3(this.e12345) * right_dual.group0.xyz), 0.0) + float4((right_dual.group1.zxy * this.group2.yzx), 0.0) - float4((right_dual.group1.yzx * this.group2.zxy), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e12345) * right_dual.group1
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            (other.group1.zxyx * float4(anti_wedge.group0.yzx, anti_wedge.e4235)) + float4(float3(0.0), (other.e2 * anti_wedge.e4315) + (other.e3 * anti_wedge.e4125) + (other.e5 * anti_wedge.e1234) - (other.e315 * anti_wedge.e42) - (other.e125 * anti_wedge.e43) - (other.e321 * anti_wedge.e45)) - (anti_wedge.group0.zxyx * float4(other.group1.yzx, other.e235)), 
            /* e415, e425, e435, e321 */
            (anti_wedge.group0 * float4(other.group1.www, other.e321)) + float4(float3(0.0), -(other.e2 * anti_wedge.e31) - (other.e3 * anti_wedge.e12)) - (other.group1.xyzx * anti_wedge.group1.wwwx), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.e5) * anti_wedge.group1.xyz) + (float3(anti_wedge.scalar) * other.group0.xyz) + (other.group1.yzx * anti_wedge.group2.zxy) - (other.group1.zxy * anti_wedge.group2.yzx)), other.e5 * anti_wedge.scalar), 
            /* e1, e2, e3, e4 */
            float4(float3(1.0), 0.0) * float4(anti_wedge.group0.www, 0.0) * float4(other.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
    }
}
// Fancy infix trick (second half)
public CircleRotor operator /(AntiProjectViaHorizonOntoInfixPartial<VersorEven> lhs, AntiLine rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension VersorEven {
    public CircleRotor anti_project_via_horizon_onto(AntiLine other) {
        Line right_dual = Line(
            /* e415, e425, e435 */
            other.group0.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group1.xyz * float3(-1.0)
        );
        AntiDipoleInversion anti_wedge = AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(float3(1.0), 0.0) * float4(right_dual.group0.xyz, 0.0) * float4(this.group0.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e235, e315, e125, e4 */
            float4((float3(this.e12345) * right_dual.group1.xyz), -(right_dual.e415 * this.e423) - (right_dual.e425 * this.e431) - (right_dual.e435 * this.e412)), 
            /* e1, e2, e3, e5 */
            float4((right_dual.e415 * this.e321) + (right_dual.e315 * this.e412), (right_dual.e425 * this.e321) + (right_dual.e125 * this.e423), (right_dual.e435 * this.e321) + (right_dual.e235 * this.e431), -(right_dual.e425 * this.e315) - (right_dual.e435 * this.e125) - (right_dual.e235 * this.e415) - (right_dual.e315 * this.e425) - (right_dual.e125 * this.e435)) - float4((right_dual.group1.xyz.zxy * this.group0.yzx), right_dual.e415 * this.e235)
        );
        return CircleRotor(
            /* e423, e431, e412 */
            float3(anti_wedge.e4) * other.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4((float3(anti_wedge.e4) * other.group1.xyz), -(anti_wedge.e1 * other.e23) - (anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12)), 
            /* e235, e315, e125, e12345 */
            float4((anti_wedge.e2 * other.e35) + (anti_wedge.e5 * other.e23), (anti_wedge.e3 * other.e15) + (anti_wedge.e5 * other.e31), (anti_wedge.e1 * other.e25) + (anti_wedge.e5 * other.e12), -(anti_wedge.e431 * other.e25) - (anti_wedge.e412 * other.e35) - (anti_wedge.e415 * other.e23) - (anti_wedge.e425 * other.e31) - (anti_wedge.e435 * other.e12)) - float4((other.group1.xyz.yzx * anti_wedge.group3.zxy), anti_wedge.e423 * other.e15)
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<VersorEven> lhs, AntiMotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension VersorEven {
    public VersorEven anti_project_via_horizon_onto(AntiMotor other) {
        Motor right_dual = Motor(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        VersorEven anti_wedge = VersorEven(
            /* e423, e431, e412, e12345 */
            float4(right_dual.e12345) * this.group0, 
            /* e415, e425, e435, e321 */
            float4(((float3(right_dual.e12345) * this.group1.xyz) + (float3(this.e12345) * right_dual.group0.xyz)), right_dual.e12345 * this.e321), 
            /* e235, e315, e125, e5 */
            (float4(right_dual.e12345) * this.group2) + (float4(this.e12345) * right_dual.group1) + float4(float3(0.0), -(right_dual.e415 * this.e235) - (right_dual.e425 * this.e315) - (right_dual.e435 * this.e125) - (right_dual.e235 * this.e415) - (right_dual.e315 * this.e425) - (right_dual.e125 * this.e435)), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e12345 * this.e1) + (right_dual.e315 * this.e412), (right_dual.e12345 * this.e2) + (right_dual.e125 * this.e423), (right_dual.e12345 * this.e3) + (right_dual.e235 * this.e431), -(right_dual.e425 * this.e431) - (right_dual.e435 * this.e412)) + (right_dual.group0 * float4(this.group1.www, this.e4)) - (this.group0.yzxx * float4(right_dual.group1.zxy, right_dual.e415))
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            (other.group0 * float4(anti_wedge.group3.www, anti_wedge.e12345)) + float4(float3(0.0), -(other.e23 * anti_wedge.e415) - (other.e31 * anti_wedge.e425) - (other.e12 * anti_wedge.e435) - (other.e15 * anti_wedge.e423) - (other.e25 * anti_wedge.e431) - (other.e35 * anti_wedge.e412)) + float4((other.group0.www * anti_wedge.group0.xyz), other.e3215 * anti_wedge.e4), 
            /* e415, e425, e435, e321 */
            float4(other.e15 * anti_wedge.e4, other.e25 * anti_wedge.e4, other.e35 * anti_wedge.e4, -(other.e23 * anti_wedge.e1) - (other.e31 * anti_wedge.e2) - (other.e12 * anti_wedge.e3)) + (float4(other.scalar) * anti_wedge.group1), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.scalar) * anti_wedge.group2.xyz) + (float3(anti_wedge.e5) * other.group0.xyz) + (other.group1.zxy * anti_wedge.group3.yzx) - (other.group1.yzx * anti_wedge.group3.zxy)), other.scalar * anti_wedge.e5), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * anti_wedge.group3
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<VersorEven> lhs, AntiPlane rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension VersorEven {
    public VersorEven anti_project_via_horizon_onto(AntiPlane other) {
        Plane right_dual = Plane(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        VersorOdd anti_wedge = VersorOdd(
            /* e41, e42, e43, scalar */
            float4(right_dual.e4125 * this.e431 * -1.0, right_dual.e4235 * this.e412 * -1.0, right_dual.e4315 * this.e423 * -1.0, (right_dual.e4315 * this.e2) + (right_dual.e4125 * this.e3) + (right_dual.e3215 * this.e4)) + (right_dual.group0.yzxx * float4(this.group0.zxy, this.e1)), 
            /* e23, e31, e12, e45 */
            float4(right_dual.e3215 * this.e423, right_dual.e3215 * this.e431, right_dual.e3215 * this.e412, -(right_dual.e4315 * this.e425) - (right_dual.e4125 * this.e435)) - (right_dual.group0.xyzx * this.group1.wwwx), 
            /* e15, e25, e35, e1234 */
            float4((float3(right_dual.e3215) * this.group1.xyz), 0.0) + float4((right_dual.group0.zxy * this.group2.yzx), 0.0) - float4((right_dual.group0.yzx * this.group2.zxy), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e12345) * right_dual.group0
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(other.e2 * anti_wedge.e43 * -1.0, other.e3 * anti_wedge.e41 * -1.0, other.e1 * anti_wedge.e42 * -1.0, (other.e2 * anti_wedge.e4315) + (other.e3 * anti_wedge.e4125) + (other.e5 * anti_wedge.e1234)) + (other.group0.zxyx * float4(anti_wedge.group0.yzx, anti_wedge.e4235)), 
            /* e415, e425, e435, e321 */
            float4(other.e5 * anti_wedge.e41, other.e5 * anti_wedge.e42, other.e5 * anti_wedge.e43, -(other.e2 * anti_wedge.e31) - (other.e3 * anti_wedge.e12)) - (other.group0.xyzx * anti_wedge.group1.wwwx), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.e5) * anti_wedge.group1.xyz) + (other.group0.yzx * anti_wedge.group2.zxy) - (other.group0.zxy * anti_wedge.group2.yzx)), other.e5 * anti_wedge.scalar), 
            /* e1, e2, e3, e4 */
            float4(float3(1.0), 0.0) * float4(anti_wedge.group0.www, 0.0) * float4(other.group0.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
    }
}
// Fancy infix trick (second half)
public AntiScalar operator /(AntiProjectViaHorizonOntoInfixPartial<VersorEven> lhs, AntiScalar rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension VersorEven {
    public AntiScalar anti_project_via_horizon_onto(AntiScalar other) {
        return AntiScalar(
            /* e12345 */
            pow(other.e12345, 2) * this.e12345 * -1.0
        );
    }
}
// Fancy infix trick (second half)
public CircleRotor operator /(AntiProjectViaHorizonOntoInfixPartial<VersorEven> lhs, Circle rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension VersorEven {
    public CircleRotor anti_project_via_horizon_onto(Circle other) {
        Dipole right_dual = Dipole(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35 */
            other.group2.xyz
        );
        AntiCircleRotor anti_wedge = AntiCircleRotor(
            /* e41, e42, e43 */
            float3(this.e12345) * right_dual.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(this.e12345) * right_dual.group1, 
            /* e15, e25, e35, scalar */
            float4((float3(this.e12345) * right_dual.group2.xyz), -(right_dual.e41 * this.e235) - (right_dual.e42 * this.e315) - (right_dual.e43 * this.e125) - (right_dual.e23 * this.e415) - (right_dual.e31 * this.e425) - (right_dual.e12 * this.e435) - (right_dual.e45 * this.e321) - (right_dual.e15 * this.e423) - (right_dual.e25 * this.e431) - (right_dual.e35 * this.e412))
        );
        return CircleRotor(
            /* e423, e431, e412 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(anti_wedge.scalar) * other.group1, 
            /* e235, e315, e125, e12345 */
            float4((float3(anti_wedge.scalar) * other.group2.xyz), -(anti_wedge.e41 * other.e235) - (anti_wedge.e42 * other.e315) - (anti_wedge.e43 * other.e125) - (anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435) - (anti_wedge.e45 * other.e321) - (anti_wedge.e15 * other.e423) - (anti_wedge.e25 * other.e431) - (anti_wedge.e35 * other.e412))
        );
    }
}
// Fancy infix trick (second half)
public CircleRotor operator /(AntiProjectViaHorizonOntoInfixPartial<VersorEven> lhs, CircleRotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension VersorEven {
    public CircleRotor anti_project_via_horizon_onto(CircleRotor other) {
        AntiCircleRotor right_dual = AntiCircleRotor(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiCircleRotor anti_wedge = AntiCircleRotor(
            /* e41, e42, e43 */
            float3(this.e12345) * right_dual.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(this.e12345) * right_dual.group1, 
            /* e15, e25, e35, scalar */
            float4((float3(this.e12345) * right_dual.group2.xyz), (right_dual.scalar * this.e12345) - (right_dual.e41 * this.e235) - (right_dual.e42 * this.e315) - (right_dual.e43 * this.e125) - (right_dual.e23 * this.e415) - (right_dual.e31 * this.e425) - (right_dual.e12 * this.e435) - (right_dual.e45 * this.e321) - (right_dual.e15 * this.e423) - (right_dual.e25 * this.e431) - (right_dual.e35 * this.e412))
        );
        return CircleRotor(
            /* e423, e431, e412 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(anti_wedge.scalar) * other.group1, 
            /* e235, e315, e125, e12345 */
            float4((anti_wedge.group2.www * other.group2.xyz), (anti_wedge.scalar * other.e12345) - (anti_wedge.e41 * other.e235) - (anti_wedge.e42 * other.e315) - (anti_wedge.e43 * other.e125) - (anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435) - (anti_wedge.e45 * other.e321) - (anti_wedge.e15 * other.e423) - (anti_wedge.e25 * other.e431) - (anti_wedge.e35 * other.e412))
        );
    }
}
// Fancy infix trick (second half)
public CircleRotor operator /(AntiProjectViaHorizonOntoInfixPartial<VersorEven> lhs, Dipole rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension VersorEven {
    public CircleRotor anti_project_via_horizon_onto(Dipole other) {
        Circle right_dual = Circle(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125 */
            other.group2.xyz * float3(-1.0)
        );
        AntiDipoleInversion anti_wedge = AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(this.e12345) * right_dual.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(this.e12345) * right_dual.group1, 
            /* e235, e315, e125, e4 */
            float4((float3(this.e12345) * right_dual.group2.xyz), -(right_dual.e423 * this.e415) - (right_dual.e431 * this.e425) - (right_dual.e412 * this.e435) - (right_dual.e415 * this.e423) - (right_dual.e425 * this.e431) - (right_dual.e435 * this.e412)), 
            /* e1, e2, e3, e5 */
            float4((right_dual.e412 * this.e315) + (right_dual.e415 * this.e321) + (right_dual.e321 * this.e415) + (right_dual.e315 * this.e412), (right_dual.e423 * this.e125) + (right_dual.e425 * this.e321) + (right_dual.e321 * this.e425) + (right_dual.e125 * this.e423), (right_dual.e431 * this.e235) + (right_dual.e435 * this.e321) + (right_dual.e321 * this.e435) + (right_dual.e235 * this.e431), -(right_dual.e415 * this.e235) - (right_dual.e425 * this.e315) - (right_dual.e435 * this.e125) - (right_dual.e125 * this.e435)) - float4((right_dual.group0.xyz.yzx * this.group2.zxy), right_dual.e235 * this.e415) - float4((right_dual.group2.xyz.zxy * this.group0.yzx), right_dual.e315 * this.e425)
        );
        return CircleRotor(
            /* e423, e431, e412 */
            (float3(anti_wedge.e4) * other.group1.xyz) + (other.group0.xyz.yzx * anti_wedge.group3.zxy) - (other.group0.xyz.zxy * anti_wedge.group3.yzx), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e4 * other.e15) + (anti_wedge.e5 * other.e41), (anti_wedge.e4 * other.e25) + (anti_wedge.e5 * other.e42), (anti_wedge.e4 * other.e35) + (anti_wedge.e5 * other.e43), -(anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12)) - (anti_wedge.group3.xyzx * other.group1.wwwx), 
            /* e235, e315, e125, e12345 */
            float4((anti_wedge.e2 * other.e35) + (anti_wedge.e5 * other.e23), (anti_wedge.e3 * other.e15) + (anti_wedge.e5 * other.e31), (anti_wedge.e1 * other.e25) + (anti_wedge.e5 * other.e12), -(anti_wedge.e431 * other.e25) - (anti_wedge.e412 * other.e35) - (anti_wedge.e415 * other.e23) - (anti_wedge.e425 * other.e31) - (anti_wedge.e435 * other.e12) - (anti_wedge.e321 * other.e45) - (anti_wedge.e235 * other.e41) - (anti_wedge.e315 * other.e42) - (anti_wedge.e125 * other.e43)) - float4((other.group2.xyz.yzx * anti_wedge.group3.zxy), anti_wedge.e423 * other.e15)
        );
    }
}
// Fancy infix trick (second half)
public CircleRotor operator /(AntiProjectViaHorizonOntoInfixPartial<VersorEven> lhs, DipoleInversion rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension VersorEven {
    public CircleRotor anti_project_via_horizon_onto(DipoleInversion other) {
        AntiDipoleInversion right_dual = AntiDipoleInversion(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiDipoleInversion anti_wedge = AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(this.e12345) * right_dual.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(this.e12345) * right_dual.group1, 
            /* e235, e315, e125, e4 */
            float4((float3(this.e12345) * right_dual.group2.xyz), (right_dual.e4 * this.e12345) - (right_dual.e423 * this.e415) - (right_dual.e431 * this.e425) - (right_dual.e412 * this.e435) - (right_dual.e415 * this.e423) - (right_dual.e425 * this.e431) - (right_dual.e435 * this.e412)), 
            /* e1, e2, e3, e5 */
            float4((right_dual.e415 * this.e321) + (right_dual.e321 * this.e415) + (right_dual.e315 * this.e412) + (right_dual.e1 * this.e12345), (right_dual.e425 * this.e321) + (right_dual.e321 * this.e425) + (right_dual.e125 * this.e423) + (right_dual.e2 * this.e12345), (right_dual.e435 * this.e321) + (right_dual.e321 * this.e435) + (right_dual.e235 * this.e431) + (right_dual.e3 * this.e12345), -(right_dual.e435 * this.e125) - (right_dual.e235 * this.e415) - (right_dual.e315 * this.e425) - (right_dual.e125 * this.e435)) + float4((right_dual.group0.xyz.zxy * this.group2.yzx), right_dual.e5 * this.e12345) - (this.group2.zxyx * float4(right_dual.group0.xyz.yzx, right_dual.e415)) - float4((right_dual.group2.zxy * this.group0.yzx), right_dual.e425 * this.e315)
        );
        return CircleRotor(
            /* e423, e431, e412 */
            (float3(anti_wedge.e4) * other.group1.xyz) + (other.group0.xyz.yzx * anti_wedge.group3.zxy) - (other.group0.xyz.zxy * anti_wedge.group3.yzx), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e4 * other.e15) + (anti_wedge.e5 * other.e41), (anti_wedge.e4 * other.e25) + (anti_wedge.e5 * other.e42), (anti_wedge.e4 * other.e35) + (anti_wedge.e5 * other.e43), -(anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12)) - (anti_wedge.group3.xyzx * other.group1.wwwx), 
            /* e235, e315, e125, e12345 */
            (anti_wedge.group3.wwwx * float4(other.group1.xyz, other.e4235)) + float4(float3(0.0), (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) + (anti_wedge.e5 * other.e1234) - (anti_wedge.e431 * other.e25) - (anti_wedge.e412 * other.e35) - (anti_wedge.e415 * other.e23) - (anti_wedge.e425 * other.e31) - (anti_wedge.e435 * other.e12) - (anti_wedge.e321 * other.e45) - (anti_wedge.e235 * other.e41) - (anti_wedge.e315 * other.e42) - (anti_wedge.e125 * other.e43)) + float4((anti_wedge.group3.yzx * other.group2.zxy), anti_wedge.e4 * other.e3215) - (other.group2.yzxx * float4(anti_wedge.group3.zxy, anti_wedge.e423))
        );
    }
}
// Fancy infix trick (second half)
public Motor operator /(AntiProjectViaHorizonOntoInfixPartial<VersorEven> lhs, DualNum rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension VersorEven {
    public Motor anti_project_via_horizon_onto(DualNum other) {
        AntiDualNum right_dual = AntiDualNum(
            /* e3215, scalar */
            other.group0.xy * float2(-1.0)
        );
        AntiMotor anti_wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4(right_dual.group0.xy.xx, right_dual.e3215, (right_dual.e3215 * this.e4) + (right_dual.scalar * this.e12345)) * float4(this.group0.xyz, 1.0), 
            /* e15, e25, e35, e3215 */
            float4(right_dual.e3215) * float4(this.group1.xyz, this.e12345)
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4(float3(0.0), anti_wedge.scalar * other.e12345), 
            /* e235, e315, e125, e5 */
            float4(other.e5) * anti_wedge.group0
        );
    }
}
// Fancy infix trick (second half)
public Motor operator /(AntiProjectViaHorizonOntoInfixPartial<VersorEven> lhs, FlatPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension VersorEven {
    public Motor anti_project_via_horizon_onto(FlatPoint other) {
        AntiFlatPoint right_dual = AntiFlatPoint(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiFlector anti_wedge = AntiFlector(
            /* e235, e315, e125, e321 */
            float4(this.e12345) * right_dual.group0, 
            /* e1, e2, e3, e5 */
            float4((right_dual.e315 * this.e412) + (right_dual.e321 * this.e415), (right_dual.e125 * this.e423) + (right_dual.e321 * this.e425), (right_dual.e235 * this.e431) + (right_dual.e321 * this.e435), -(right_dual.e315 * this.e425) - (right_dual.e125 * this.e435)) - (right_dual.group0.zxyx * float4(this.group0.yzx, this.e415))
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4(other.e45) * float4(anti_wedge.group1.xyz, anti_wedge.e321) * float4(-1.0), 
            /* e235, e315, e125, e5 */
            float4(((anti_wedge.group1.yzx * other.group0.zxy) - (anti_wedge.group1.zxy * other.group0.yzx)), 0.0)
        );
    }
}
// Fancy infix trick (second half)
public Motor operator /(AntiProjectViaHorizonOntoInfixPartial<VersorEven> lhs, Flector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension VersorEven {
    public Motor anti_project_via_horizon_onto(Flector other) {
        AntiFlector right_dual = AntiFlector(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiFlector anti_wedge = AntiFlector(
            /* e235, e315, e125, e321 */
            float4(this.e12345) * right_dual.group0, 
            /* e1, e2, e3, e5 */
            float4((right_dual.e321 * this.e415) + (right_dual.e1 * this.e12345), (right_dual.e321 * this.e425) + (right_dual.e2 * this.e12345), (right_dual.e321 * this.e435) + (right_dual.e3 * this.e12345), -(right_dual.e315 * this.e425) - (right_dual.e125 * this.e435)) + (this.group0.zxyw * float4(right_dual.group0.yzx, right_dual.e5)) - (right_dual.group0.zxyx * float4(this.group0.yzx, this.e415))
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4((float3(other.e45) * anti_wedge.group1.xyz * float3(-1.0)), (anti_wedge.e1 * other.e4235) + (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) - (anti_wedge.e321 * other.e45)), 
            /* e235, e315, e125, e5 */
            float4(((anti_wedge.group1.yzx * other.group0.zxy) - (anti_wedge.group1.zxy * other.group0.yzx)), 0.0)
        );
    }
}
// Fancy infix trick (second half)
public Motor operator /(AntiProjectViaHorizonOntoInfixPartial<VersorEven> lhs, Line rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension VersorEven {
    public Motor anti_project_via_horizon_onto(Line other) {
        AntiLine right_dual = AntiLine(
            /* e23, e31, e12 */
            other.group0.xyz, 
            /* e15, e25, e35 */
            other.group1.xyz
        );
        AntiMotor anti_wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4((float3(this.e12345) * right_dual.group0.xyz), -(right_dual.e23 * this.e415) - (right_dual.e31 * this.e425) - (right_dual.e12 * this.e435) - (right_dual.e15 * this.e423) - (right_dual.e25 * this.e431) - (right_dual.e35 * this.e412)), 
            /* e15, e25, e35, e3215 */
            float4(float3(1.0), 0.0) * float4(right_dual.group1.xyz, 0.0) * float4(this.group0.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4((float3(anti_wedge.scalar) * other.group0.xyz), -(anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435)), 
            /* e235, e315, e125, e5 */
            float4(float3(1.0), 0.0) * float4(other.group1.xyz, 0.0) * float4(anti_wedge.group0.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
    }
}
// Fancy infix trick (second half)
public Motor operator /(AntiProjectViaHorizonOntoInfixPartial<VersorEven> lhs, Motor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension VersorEven {
    public Motor anti_project_via_horizon_onto(Motor other) {
        AntiMotor right_dual = AntiMotor(
            /* e23, e31, e12, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiMotor anti_wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            (float4(right_dual.e3215) * float4(this.group0.xyz, this.e4)) + (float4(this.e12345) * right_dual.group0) + float4(float3(0.0), -(right_dual.e23 * this.e415) - (right_dual.e31 * this.e425) - (right_dual.e12 * this.e435) - (right_dual.e15 * this.e423) - (right_dual.e25 * this.e431) - (right_dual.e35 * this.e412)), 
            /* e15, e25, e35, e3215 */
            float4(((float3(right_dual.e3215) * this.group1.xyz) + (float3(this.e12345) * right_dual.group1.xyz)), right_dual.e3215 * this.e12345)
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4((anti_wedge.group0.www * other.group0.xyz), (anti_wedge.scalar * other.e12345) - (anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435)), 
            /* e235, e315, e125, e5 */
            float4(((float3(anti_wedge.scalar) * other.group1.xyz) + (float3(other.e5) * anti_wedge.group0.xyz)), anti_wedge.scalar * other.e5)
        );
    }
}
// Fancy infix trick (second half)
public MultiVector operator /(AntiProjectViaHorizonOntoInfixPartial<VersorEven> lhs, MultiVector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension VersorEven {
    public MultiVector anti_project_via_horizon_onto(MultiVector other) {
        MultiVector right_dual = MultiVector(
            /* scalar, e12345 */
            other.group0.xy.yx * float2(-1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215, 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43 */
            other.group7.xyz, 
            /* e23, e31, e12 */
            other.group6.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412 */
            other.group4.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group3.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        MultiVector anti_wedge = MultiVector(
            /* scalar, e12345 */
            float2((right_dual.scalar * this.e12345) + (right_dual.e4235 * this.e1) + (right_dual.e4315 * this.e2) + (right_dual.e4125 * this.e3) + (right_dual.e3215 * this.e4) + (right_dual.e1234 * this.e5) - (right_dual.e15 * this.e423) - (right_dual.e25 * this.e431) - (right_dual.e35 * this.e412) - (right_dual.e45 * this.e321) - (right_dual.e41 * this.e235) - (right_dual.e42 * this.e315) - (right_dual.e43 * this.e125) - (right_dual.e23 * this.e415) - (right_dual.e31 * this.e425) - (right_dual.e12 * this.e435), right_dual.e12345 * this.e12345), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e1 * this.e12345) + (right_dual.e415 * this.e321) + (right_dual.e321 * this.e415) + (right_dual.e315 * this.e412), (right_dual.e2 * this.e12345) + (right_dual.e425 * this.e321) + (right_dual.e321 * this.e425) + (right_dual.e125 * this.e423), (right_dual.e3 * this.e12345) + (right_dual.e435 * this.e321) + (right_dual.e321 * this.e435) + (right_dual.e235 * this.e431), -(right_dual.e415 * this.e423) - (right_dual.e425 * this.e431) - (right_dual.e435 * this.e412) - (right_dual.e412 * this.e435)) + (float4(right_dual.e12345) * this.group3) + float4((right_dual.group7.xyz.zxy * this.group2.yzx), right_dual.e4 * this.e12345) - float4((right_dual.group7.xyz.yzx * this.group2.zxy), right_dual.e423 * this.e415) - float4((right_dual.group8.xyz.zxy * this.group0.yzx), right_dual.e431 * this.e425), 
            /* e5 */
            (right_dual.e12345 * this.e5) + (right_dual.e5 * this.e12345) - (right_dual.e415 * this.e235) - (right_dual.e425 * this.e315) - (right_dual.e435 * this.e125) - (right_dual.e235 * this.e415) - (right_dual.e315 * this.e425) - (right_dual.e125 * this.e435), 
            /* e15, e25, e35, e45 */
            float4((right_dual.e4125 * this.e315) + (right_dual.e3215 * this.e415), (right_dual.e4235 * this.e125) + (right_dual.e3215 * this.e425), (right_dual.e4315 * this.e235) + (right_dual.e3215 * this.e435), -(right_dual.e4315 * this.e425) - (right_dual.e4125 * this.e435)) + (float4(this.e12345) * right_dual.group3) - (right_dual.group9.yzxx * float4(this.group2.zxy, this.e415)), 
            /* e41, e42, e43 */
            (float3(right_dual.e1234) * this.group1.xyz) + (float3(this.e12345) * right_dual.group4.xyz) + (right_dual.group9.yzx * this.group0.zxy) - (right_dual.group9.zxy * this.group0.yzx), 
            /* e23, e31, e12 */
            (float3(right_dual.e3215) * this.group0.xyz) + (float3(right_dual.e1234) * this.group2.xyz) + (float3(this.e12345) * right_dual.group5.xyz) - (float3(this.e321) * right_dual.group9.xyz), 
            /* e415, e425, e435, e321 */
            (float4(right_dual.e12345) * this.group1) + (float4(this.e12345) * right_dual.group6), 
            /* e423, e431, e412 */
            (float3(right_dual.e12345) * this.group0.xyz) + (float3(this.e12345) * right_dual.group7.xyz), 
            /* e235, e315, e125 */
            (float3(right_dual.e12345) * this.group2.xyz) + (float3(this.e12345) * right_dual.group8.xyz), 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e12345) * right_dual.group9, 
            /* e1234 */
            right_dual.e1234 * this.e12345
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(anti_wedge.scalar * other.scalar, (anti_wedge.scalar * other.e12345) + (anti_wedge.e12345 * other.scalar) + (anti_wedge.e1 * other.e4235) + (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) + (anti_wedge.e4 * other.e3215) + (anti_wedge.e5 * other.e1234) + (anti_wedge.e4235 * other.e1) + (anti_wedge.e4315 * other.e2) + (anti_wedge.e4125 * other.e3) + (anti_wedge.e3215 * other.e4) + (anti_wedge.e1234 * other.e5) - (anti_wedge.e15 * other.e423) - (anti_wedge.e25 * other.e431) - (anti_wedge.e35 * other.e412) - (anti_wedge.e45 * other.e321) - (anti_wedge.e41 * other.e235) - (anti_wedge.e42 * other.e315) - (anti_wedge.e43 * other.e125) - (anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435) - (anti_wedge.e415 * other.e23) - (anti_wedge.e425 * other.e31) - (anti_wedge.e435 * other.e12) - (anti_wedge.e321 * other.e45) - (anti_wedge.e423 * other.e15) - (anti_wedge.e431 * other.e25) - (anti_wedge.e412 * other.e35) - (anti_wedge.e235 * other.e41) - (anti_wedge.e315 * other.e42) - (anti_wedge.e125 * other.e43)), 
            /* e1, e2, e3, e4 */
            (float4(anti_wedge.scalar) * other.group1) + (float4(other.scalar) * anti_wedge.group1), 
            /* e5 */
            (anti_wedge.scalar * other.e5) + (anti_wedge.e5 * other.scalar), 
            /* e15, e25, e35, e45 */
            (float4(anti_wedge.scalar) * other.group3) + (float4(anti_wedge.e5) * other.group1) + (float4(other.scalar) * anti_wedge.group3) - (float4(other.e5) * anti_wedge.group1), 
            /* e41, e42, e43 */
            (float3(anti_wedge.scalar) * other.group4.xyz) + (float3(other.scalar) * anti_wedge.group4.xyz) + (float3(other.e4) * anti_wedge.group1.xyz) - (float3(anti_wedge.e4) * other.group1.xyz), 
            /* e23, e31, e12 */
            (float3(anti_wedge.scalar) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group5.xyz) + (anti_wedge.group1.zxy * other.group1.yzx) - (anti_wedge.group1.yzx * other.group1.zxy), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e4 * other.e15) + (anti_wedge.e5 * other.e41) + (anti_wedge.e15 * other.e4) + (anti_wedge.e41 * other.e5), (anti_wedge.e4 * other.e25) + (anti_wedge.e5 * other.e42) + (anti_wedge.e25 * other.e4) + (anti_wedge.e42 * other.e5), (anti_wedge.e4 * other.e35) + (anti_wedge.e5 * other.e43) + (anti_wedge.e35 * other.e4) + (anti_wedge.e43 * other.e5), -(anti_wedge.e1 * other.e23) - (anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12) - (anti_wedge.e12 * other.e3)) + (float4(anti_wedge.scalar) * other.group6) + (float4(other.scalar) * anti_wedge.group6) - (other.group1.xyzy * float4(anti_wedge.group3.www, anti_wedge.e31)) - float4((other.group3.www * anti_wedge.group1.xyz), anti_wedge.e23 * other.e1), 
            /* e423, e431, e412 */
            (float3(anti_wedge.scalar) * other.group7.xyz) + (float3(anti_wedge.e4) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group7.xyz) + (float3(other.e4) * anti_wedge.group5.xyz) + (anti_wedge.group4.xyz.yzx * other.group1.zxy) + (other.group4.xyz.yzx * anti_wedge.group1.zxy) - (anti_wedge.group4.xyz.zxy * other.group1.yzx) - (other.group4.xyz.zxy * anti_wedge.group1.yzx), 
            /* e235, e315, e125 */
            (float3(anti_wedge.scalar) * other.group8.xyz) + (float3(anti_wedge.e5) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group8.xyz) + (float3(other.e5) * anti_wedge.group5.xyz) + (anti_wedge.group1.yzx * other.group3.zxy) + (anti_wedge.group3.zxy * other.group1.yzx) - (anti_wedge.group1.zxy * other.group3.yzx) - (anti_wedge.group3.yzx * other.group1.zxy), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e2 * other.e435) + (anti_wedge.e5 * other.e423) + (anti_wedge.e45 * other.e23) + (anti_wedge.e425 * other.e3), (anti_wedge.e3 * other.e415) + (anti_wedge.e5 * other.e431) + (anti_wedge.e45 * other.e31) + (anti_wedge.e435 * other.e1), (anti_wedge.e1 * other.e425) + (anti_wedge.e5 * other.e412) + (anti_wedge.e45 * other.e12) + (anti_wedge.e415 * other.e2), -(anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12) - (anti_wedge.e321 * other.e5)) + (float4(anti_wedge.scalar) * other.group9) + (float4(other.scalar) * anti_wedge.group9) + float4((anti_wedge.group5.xyz * other.group3.www), anti_wedge.e2 * other.e315) + float4((anti_wedge.group8.xyz * other.group1.www), anti_wedge.e3 * other.e125) + float4((anti_wedge.group4.xyz.yzx * other.group3.zxy), anti_wedge.e1 * other.e235) + float4((other.group4.xyz.yzx * anti_wedge.group3.zxy), anti_wedge.e5 * other.e321) - (other.group1.yzxz * float4(anti_wedge.group6.zxy, anti_wedge.e125)) - (other.group3.yzxx * float4(anti_wedge.group4.xyz.zxy, anti_wedge.e23)) - float4((float3(other.e5) * anti_wedge.group7.xyz), anti_wedge.e31 * other.e25) - float4((other.group8.xyz * anti_wedge.group1.www), anti_wedge.e235 * other.e1) - float4((other.group4.xyz.zxy * anti_wedge.group3.yzx), anti_wedge.e12 * other.e35) - float4((anti_wedge.group1.zxy * other.group6.yzx), anti_wedge.e315 * other.e2), 
            /* e1234 */
            (anti_wedge.scalar * other.e1234) + (anti_wedge.e321 * other.e4) + (anti_wedge.e423 * other.e1) + (anti_wedge.e431 * other.e2) + (anti_wedge.e412 * other.e3) + (anti_wedge.e1234 * other.scalar) - (anti_wedge.e1 * other.e423) - (anti_wedge.e2 * other.e431) - (anti_wedge.e3 * other.e412) - (anti_wedge.e4 * other.e321) - (anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12) - (anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)
        );
    }
}
// Fancy infix trick (second half)
public AntiScalar operator /(AntiProjectViaHorizonOntoInfixPartial<VersorEven> lhs, Plane rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension VersorEven {
    public AntiScalar anti_project_via_horizon_onto(Plane other) {
        AntiPlane anti_wedge = AntiPlane(
            /* e1, e2, e3, e5 */
            float4(this.e12345) * float4(other.e4235 * -1.0, other.e4315 * -1.0, other.e4125 * -1.0, other.e3215)
        );
        return AntiScalar(
            /* e12345 */
            (anti_wedge.e1 * other.e4235) + (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125)
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<VersorEven> lhs, RoundPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension VersorEven {
    public VersorEven anti_project_via_horizon_onto(RoundPoint other) {
        Sphere right_dual = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        VersorOdd anti_wedge = VersorOdd(
            /* e41, e42, e43, scalar */
            float4(right_dual.e4125 * this.e431 * -1.0, right_dual.e4235 * this.e412 * -1.0, right_dual.e4315 * this.e423 * -1.0, (right_dual.e4125 * this.e3) + (right_dual.e3215 * this.e4) + (right_dual.e1234 * this.e5)) + (right_dual.group0.yzxx * float4(this.group0.zxy, this.e1)) + float4((float3(right_dual.e1234) * this.group1.xyz), right_dual.e4315 * this.e2), 
            /* e23, e31, e12, e45 */
            float4((right_dual.e3215 * this.e423) + (right_dual.e1234 * this.e235), (right_dual.e3215 * this.e431) + (right_dual.e1234 * this.e315), (right_dual.e3215 * this.e412) + (right_dual.e1234 * this.e125), -(right_dual.e4315 * this.e425) - (right_dual.e4125 * this.e435)) - (right_dual.group0.xyzx * this.group1.wwwx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_dual.e3215) * this.group1.xyz) + (right_dual.group0.zxy * this.group2.yzx) - (right_dual.group0.yzx * this.group2.zxy)), right_dual.e1234 * this.e12345), 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e12345) * right_dual.group0
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(other.e2 * anti_wedge.e43 * -1.0, other.e3 * anti_wedge.e41 * -1.0, other.e1 * anti_wedge.e42 * -1.0, (other.e3 * anti_wedge.e4125) + (other.e4 * anti_wedge.e3215) + (other.e5 * anti_wedge.e1234)) + (other.group0.zxyx * float4(anti_wedge.group0.yzx, anti_wedge.e4235)) + (other.group0.wwwy * float4(anti_wedge.group1.xyz, anti_wedge.e4315)), 
            /* e415, e425, e435, e321 */
            float4((other.e4 * anti_wedge.e15) + (other.e5 * anti_wedge.e41), (other.e4 * anti_wedge.e25) + (other.e5 * anti_wedge.e42), (other.e4 * anti_wedge.e35) + (other.e5 * anti_wedge.e43), -(other.e2 * anti_wedge.e31) - (other.e3 * anti_wedge.e12)) - (other.group0.xyzx * anti_wedge.group1.wwwx), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.e5) * anti_wedge.group1.xyz) + (other.group0.yzx * anti_wedge.group2.zxy) - (other.group0.zxy * anti_wedge.group2.yzx)), other.e5 * anti_wedge.scalar), 
            /* e1, e2, e3, e4 */
            float4(anti_wedge.scalar) * other.group0
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<VersorEven> lhs, Scalar rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension VersorEven {
    public VersorEven anti_project_via_horizon_onto(Scalar other) {
        AntiScalar right_dual = AntiScalar(
            /* e12345 */
            other.scalar
        );
        VersorEven anti_wedge = VersorEven(
            /* e423, e431, e412, e12345 */
            float4(right_dual.e12345) * this.group0, 
            /* e415, e425, e435, e321 */
            float4(right_dual.e12345) * this.group1, 
            /* e235, e315, e125, e5 */
            float4(right_dual.e12345) * this.group2, 
            /* e1, e2, e3, e4 */
            float4(right_dual.e12345) * this.group3
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(other.scalar) * anti_wedge.group0, 
            /* e415, e425, e435, e321 */
            float4(other.scalar) * anti_wedge.group1, 
            /* e235, e315, e125, e5 */
            float4(other.scalar) * anti_wedge.group2, 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * anti_wedge.group3
        );
    }
}
// Fancy infix trick (second half)
public AntiScalar operator /(AntiProjectViaHorizonOntoInfixPartial<VersorEven> lhs, Sphere rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension VersorEven {
    public AntiScalar anti_project_via_horizon_onto(Sphere other) {
        RoundPoint right_dual = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(other.group0.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215
        );
        RoundPoint anti_wedge = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(this.e12345) * right_dual.group0, 
            /* e5 */
            right_dual.e5 * this.e12345
        );
        return AntiScalar(
            /* e12345 */
            (anti_wedge.e1 * other.e4235) + (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) + (anti_wedge.e4 * other.e3215) + (anti_wedge.e5 * other.e1234)
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<VersorEven> lhs, VersorEven rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension VersorEven {
    public VersorEven anti_project_via_horizon_onto(VersorEven other) {
        VersorOdd right_dual = VersorOdd(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        VersorOdd anti_wedge = VersorOdd(
            /* e41, e42, e43, scalar */
            (this.group0.zxyw * float4(right_dual.group3.yzx, right_dual.scalar)) + float4(float3(0.0), (this.e2 * right_dual.e4315) + (this.e3 * right_dual.e4125) + (this.e4 * right_dual.e3215) - (this.e431 * right_dual.e25) - (this.e412 * right_dual.e35) - (this.e415 * right_dual.e23) - (this.e425 * right_dual.e31) - (this.e435 * right_dual.e12) - (this.e321 * right_dual.e45) - (this.e235 * right_dual.e41) - (this.e315 * right_dual.e42) - (this.e125 * right_dual.e43)) + float4((this.group0.www * right_dual.group0.xyz), this.e5 * right_dual.e1234) + float4((right_dual.group2.www * this.group1.xyz), this.e1 * right_dual.e4235) - (this.group0.yzxx * float4(right_dual.group3.zxy, right_dual.e15)), 
            /* e23, e31, e12, e45 */
            float4((this.e12345 * right_dual.e23) + (this.e235 * right_dual.e1234), (this.e12345 * right_dual.e31) + (this.e315 * right_dual.e1234), (this.e12345 * right_dual.e12) + (this.e125 * right_dual.e1234), -(this.e425 * right_dual.e4315) - (this.e435 * right_dual.e4125)) + (this.group0 * float4(right_dual.group3.www, right_dual.e45)) - (this.group1.wwwx * right_dual.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(this.e12345) * right_dual.group2.xyz) + (float3(right_dual.e3215) * this.group1.xyz) + (this.group2.yzx * right_dual.group3.zxy) - (this.group2.zxy * right_dual.group3.yzx)), this.e12345 * right_dual.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e12345) * right_dual.group3
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            (float4(anti_wedge.scalar) * other.group0) + (other.group3.wwwx * float4(anti_wedge.group1.xyz, anti_wedge.e4235)) + float4(float3(0.0), (other.e2 * anti_wedge.e4315) + (other.e3 * anti_wedge.e4125) + (other.e4 * anti_wedge.e3215) - (other.e431 * anti_wedge.e25) - (other.e412 * anti_wedge.e35) - (other.e415 * anti_wedge.e23) - (other.e425 * anti_wedge.e31) - (other.e435 * anti_wedge.e12) - (other.e321 * anti_wedge.e45) - (other.e235 * anti_wedge.e41) - (other.e315 * anti_wedge.e42) - (other.e125 * anti_wedge.e43)) + float4((other.group3.zxy * anti_wedge.group0.yzx), other.e5 * anti_wedge.e1234) - float4((other.group3.yzx * anti_wedge.group0.zxy), other.e423 * anti_wedge.e15), 
            /* e415, e425, e435, e321 */
            float4((other.e5 * anti_wedge.e41) + (other.e4 * anti_wedge.e15), (other.e5 * anti_wedge.e42) + (other.e4 * anti_wedge.e25), (other.e5 * anti_wedge.e43) + (other.e4 * anti_wedge.e35), -(other.e2 * anti_wedge.e31) - (other.e3 * anti_wedge.e12)) + (float4(anti_wedge.scalar) * other.group1) - (other.group3.xyzx * anti_wedge.group1.wwwx), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.e5) * anti_wedge.group1.xyz) + (float3(anti_wedge.scalar) * other.group2.xyz) + (other.group3.yzx * anti_wedge.group2.zxy) - (other.group3.zxy * anti_wedge.group2.yzx)), other.e5 * anti_wedge.scalar), 
            /* e1, e2, e3, e4 */
            float4(anti_wedge.scalar) * other.group3
        );
    }
}
// Fancy infix trick (second half)
public VersorEven operator /(AntiProjectViaHorizonOntoInfixPartial<VersorEven> lhs, VersorOdd rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension VersorEven {
    public VersorEven anti_project_via_horizon_onto(VersorOdd other) {
        VersorEven right_dual = VersorEven(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        VersorEven anti_wedge = VersorEven(
            /* e423, e431, e412, e12345 */
            float4(((float3(right_dual.e12345) * this.group0.xyz) + (float3(this.e12345) * right_dual.group0.xyz)), right_dual.e12345 * this.e12345), 
            /* e415, e425, e435, e321 */
            (float4(right_dual.e12345) * this.group1) + (float4(this.e12345) * right_dual.group1), 
            /* e235, e315, e125, e5 */
            (float4(right_dual.e12345) * this.group2) + (float4(this.e12345) * right_dual.group2) + float4(float3(0.0), -(right_dual.e415 * this.e235) - (right_dual.e425 * this.e315) - (right_dual.e435 * this.e125) - (right_dual.e235 * this.e415) - (right_dual.e315 * this.e425) - (right_dual.e125 * this.e435)), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e415 * this.e321) + (right_dual.e321 * this.e415) + (right_dual.e315 * this.e412) + (right_dual.e1 * this.e12345), (right_dual.e425 * this.e321) + (right_dual.e321 * this.e425) + (right_dual.e125 * this.e423) + (right_dual.e2 * this.e12345), (right_dual.e435 * this.e321) + (right_dual.e321 * this.e435) + (right_dual.e235 * this.e431) + (right_dual.e3 * this.e12345), -(right_dual.e412 * this.e435) - (right_dual.e415 * this.e423) - (right_dual.e425 * this.e431) - (right_dual.e435 * this.e412)) + (right_dual.group0.zxyw * float4(this.group2.yzx, this.e4)) + float4((right_dual.group0.www * this.group3.xyz), right_dual.e4 * this.e12345) - (right_dual.group0.yzxx * float4(this.group2.zxy, this.e415)) - float4((right_dual.group2.zxy * this.group0.yzx), right_dual.e431 * this.e425)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            (float4(other.scalar) * anti_wedge.group0) + (anti_wedge.group3.wwwx * float4(other.group1.xyz, other.e4235)) + float4(float3(0.0), (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) + (anti_wedge.e4 * other.e3215) - (anti_wedge.e431 * other.e25) - (anti_wedge.e412 * other.e35) - (anti_wedge.e415 * other.e23) - (anti_wedge.e425 * other.e31) - (anti_wedge.e435 * other.e12) - (anti_wedge.e321 * other.e45) - (anti_wedge.e235 * other.e41) - (anti_wedge.e315 * other.e42) - (anti_wedge.e125 * other.e43)) + float4((anti_wedge.group3.zxy * other.group0.yzx), anti_wedge.e5 * other.e1234) - float4((anti_wedge.group3.yzx * other.group0.zxy), anti_wedge.e423 * other.e15), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e5 * other.e41) + (anti_wedge.e4 * other.e15), (anti_wedge.e5 * other.e42) + (anti_wedge.e4 * other.e25), (anti_wedge.e5 * other.e43) + (anti_wedge.e4 * other.e35), -(anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12)) + (float4(other.scalar) * anti_wedge.group1) - (anti_wedge.group3.xyzx * other.group1.wwwx), 
            /* e235, e315, e125, e5 */
            float4(((float3(anti_wedge.e5) * other.group1.xyz) + (float3(other.scalar) * anti_wedge.group2.xyz) + (anti_wedge.group3.yzx * other.group2.zxy) - (anti_wedge.group3.zxy * other.group2.yzx)), anti_wedge.e5 * other.scalar), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * anti_wedge.group3
        );
    }
}
// Fancy infix trick (first half)
public AntiProjectViaHorizonOntoInfixPartial<VersorOdd> operator /(VersorOdd lhs, AntiProjectViaHorizonOntoInfix rhs) {
    return AntiProjectViaHorizonOntoInfixPartial<VersorOdd>(lhs);
}
// Fancy infix trick (second half)
public VersorOdd operator /(AntiProjectViaHorizonOntoInfixPartial<VersorOdd> lhs, AntiCircleRotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension VersorOdd {
    public VersorOdd anti_project_via_horizon_onto(AntiCircleRotor other) {
        CircleRotor right_dual = CircleRotor(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        VersorOdd anti_wedge = VersorOdd(
            /* e41, e42, e43, scalar */
            float4((right_dual.e415 * this.e1234) + (right_dual.e12345 * this.e41), (right_dual.e425 * this.e1234) + (right_dual.e12345 * this.e42), (right_dual.e435 * this.e1234) + (right_dual.e12345 * this.e43), -(right_dual.e431 * this.e25) - (right_dual.e412 * this.e35) - (right_dual.e415 * this.e23) - (right_dual.e425 * this.e31) - (right_dual.e435 * this.e12) - (right_dual.e321 * this.e45) - (right_dual.e235 * this.e41) - (right_dual.e315 * this.e42) - (right_dual.e125 * this.e43)) + float4((right_dual.group0.xyz.zxy * this.group3.yzx), right_dual.e12345 * this.scalar) - float4((right_dual.group0.xyz.yzx * this.group3.zxy), right_dual.e423 * this.e15), 
            /* e23, e31, e12, e45 */
            float4((right_dual.e235 * this.e1234) + (right_dual.e12345 * this.e23), (right_dual.e315 * this.e1234) + (right_dual.e12345 * this.e31), (right_dual.e125 * this.e1234) + (right_dual.e12345 * this.e12), -(right_dual.e425 * this.e4315) - (right_dual.e435 * this.e4125)) + float4((right_dual.group0.xyz * this.group3.www), right_dual.e12345 * this.e45) - (right_dual.group1.wwwx * this.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_dual.e12345) * this.group2.xyz) + (float3(this.e3215) * right_dual.group1.xyz) + (right_dual.group2.yzx * this.group3.zxy) - (right_dual.group2.zxy * this.group3.yzx)), right_dual.e12345 * this.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * this.group3
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(((float3(other.scalar) * anti_wedge.group0.xyz) + (float3(anti_wedge.scalar) * other.group0.xyz)), other.scalar * anti_wedge.scalar), 
            /* e23, e31, e12, e45 */
            (float4(other.scalar) * anti_wedge.group1) + (float4(anti_wedge.scalar) * other.group1), 
            /* e15, e25, e35, e1234 */
            float4(other.scalar * anti_wedge.e15, other.scalar * anti_wedge.e25, other.scalar * anti_wedge.e35, -(other.e41 * anti_wedge.e23) - (other.e42 * anti_wedge.e31) - (other.e43 * anti_wedge.e12) - (other.e23 * anti_wedge.e41) - (other.e31 * anti_wedge.e42) - (other.e12 * anti_wedge.e43)) + (other.group2 * float4(anti_wedge.group0.www, anti_wedge.e1234)), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e23 * anti_wedge.e45) + (other.e45 * anti_wedge.e23) + (other.e35 * anti_wedge.e42) + (other.scalar * anti_wedge.e4235), (other.e31 * anti_wedge.e45) + (other.e45 * anti_wedge.e31) + (other.e15 * anti_wedge.e43) + (other.scalar * anti_wedge.e4315), (other.e12 * anti_wedge.e45) + (other.e45 * anti_wedge.e12) + (other.e25 * anti_wedge.e41) + (other.scalar * anti_wedge.e4125), -(other.e12 * anti_wedge.e35) - (other.e15 * anti_wedge.e23) - (other.e25 * anti_wedge.e31) - (other.e35 * anti_wedge.e12)) + float4((other.group0.xyz.yzx * anti_wedge.group2.zxy), other.scalar * anti_wedge.e3215) - (anti_wedge.group2.yzxx * float4(other.group0.xyz.zxy, other.e23)) - float4((other.group2.yzx * anti_wedge.group0.zxy), other.e31 * anti_wedge.e25)
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<VersorOdd> lhs, AntiDipoleInversion rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension VersorOdd {
    public DipoleInversion anti_project_via_horizon_onto(AntiDipoleInversion other) {
        DipoleInversion right_dual = DipoleInversion(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiDipoleInversion anti_wedge = AntiDipoleInversion(
            /* e423, e431, e412 */
            (float3(this.e1234) * right_dual.group3.xyz) - (float3(right_dual.e1234) * this.group3.xyz), 
            /* e415, e425, e435, e321 */
            (right_dual.group3.yzxw * float4(this.group3.zxy, this.e1234)) - (this.group3.yzxw * float4(right_dual.group3.zxy, right_dual.e1234)), 
            /* e235, e315, e125, e4 */
            (this.group3.xyzx * float4(right_dual.group3.www, right_dual.e41)) + float4(float3(0.0), (right_dual.e42 * this.e4315) + (right_dual.e43 * this.e4125) + (right_dual.e45 * this.e1234) - (right_dual.e4235 * this.e41) - (right_dual.e4315 * this.e42) - (right_dual.e4125 * this.e43)) - float4((this.group3.www * right_dual.group3.xyz), right_dual.e1234 * this.e45), 
            /* e1, e2, e3, e5 */
            (float4(right_dual.e3215) * float4(this.group0.xyz, this.e45)) + (right_dual.group3.zxyz * float4(this.group1.yzx, this.e35)) + (this.group2.wwwy * float4(right_dual.group2.xyz, right_dual.e4315)) + float4((right_dual.group1.zxy * this.group3.yzx), right_dual.e4235 * this.e15) - (float4(this.e3215) * float4(right_dual.group0.xyz, right_dual.e45)) - (right_dual.group2.wwwy * float4(this.group2.xyz, this.e4315)) - (this.group3.zxyx * float4(right_dual.group1.yzx, right_dual.e15)) - float4((right_dual.group3.yzx * this.group1.zxy), right_dual.e35 * this.e4125)
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            (float3(other.e4) * anti_wedge.group3.xyz) - (float3(anti_wedge.e4) * other.group3.xyz), 
            /* e23, e31, e12, e45 */
            (anti_wedge.group3.zxyw * float4(other.group3.yzx, other.e4)) - (other.group3.zxyw * float4(anti_wedge.group3.yzx, anti_wedge.e4)), 
            /* e15, e25, e35, e1234 */
            (other.group3.xyzx * float4(anti_wedge.group3.www, anti_wedge.e423)) + float4(float3(0.0), (anti_wedge.e431 * other.e2) + (anti_wedge.e412 * other.e3) + (anti_wedge.e321 * other.e4) - (anti_wedge.e4 * other.e321) - (anti_wedge.e2 * other.e431) - (anti_wedge.e3 * other.e412)) - float4((other.group3.www * anti_wedge.group3.xyz), anti_wedge.e1 * other.e423), 
            /* e4235, e4315, e4125, e3215 */
            (anti_wedge.group3.yzxw * other.group1.zxyw) + (other.group2.wwwz * float4(anti_wedge.group2.xyz, anti_wedge.e3)) + float4((other.group0.xyz * anti_wedge.group3.www), anti_wedge.e1 * other.e235) + float4((anti_wedge.group1.yzx * other.group3.zxy), anti_wedge.e2 * other.e315) - (float4(other.e5) * float4(anti_wedge.group0.xyz, anti_wedge.e321)) - (anti_wedge.group2.wwwy * float4(other.group2.xyz, other.e2)) - (other.group3.yzxx * float4(anti_wedge.group1.zxy, anti_wedge.e235)) - float4((anti_wedge.group3.zxy * other.group1.yzx), anti_wedge.e125 * other.e3)
        );
    }
}
// Fancy infix trick (second half)
public VersorOdd operator /(AntiProjectViaHorizonOntoInfixPartial<VersorOdd> lhs, AntiDualNum rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension VersorOdd {
    public VersorOdd anti_project_via_horizon_onto(AntiDualNum other) {
        DualNum right_dual = DualNum(
            /* e5, e12345 */
            other.group0.xy
        );
        VersorOdd anti_wedge = VersorOdd(
            /* e41, e42, e43, scalar */
            float4(right_dual.group0.xy.yy, right_dual.e12345, (right_dual.e5 * this.e1234) + (right_dual.e12345 * this.scalar)) * float4(this.group0.xyz, 1.0), 
            /* e23, e31, e12, e45 */
            float4(right_dual.e12345) * this.group1, 
            /* e15, e25, e35, e1234 */
            float4(right_dual.e12345) * this.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * this.group3
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(other.scalar) * anti_wedge.group0, 
            /* e23, e31, e12, e45 */
            float4(other.scalar) * anti_wedge.group1, 
            /* e15, e25, e35, e1234 */
            float4(other.scalar) * anti_wedge.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xy.yy, other.scalar, (other.e3215 * anti_wedge.scalar) + (other.scalar * anti_wedge.e3215)) * float4(anti_wedge.group3.xyz, 1.0)
        );
    }
}
// Fancy infix trick (second half)
public Sphere operator /(AntiProjectViaHorizonOntoInfixPartial<VersorOdd> lhs, AntiFlatPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension VersorOdd {
    public Sphere anti_project_via_horizon_onto(AntiFlatPoint other) {
        FlatPoint right_dual = FlatPoint(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        RoundPoint anti_wedge = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(this.e1234) * right_dual.group0, 
            /* e5 */
            -(right_dual.e15 * this.e4235) - (right_dual.e25 * this.e4315) - (right_dual.e35 * this.e4125) - (right_dual.e45 * this.e3215)
        );
        return Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4((float3(anti_wedge.e4) * other.group0.xyz * float3(-1.0)), (other.e235 * anti_wedge.e1) + (other.e315 * anti_wedge.e2) + (other.e125 * anti_wedge.e3) + (other.e321 * anti_wedge.e5)), 
            /* e1234 */
            other.e321 * anti_wedge.e4 * -1.0
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<VersorOdd> lhs, AntiFlector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension VersorOdd {
    public DipoleInversion anti_project_via_horizon_onto(AntiFlector other) {
        Flector right_dual = Flector(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiDipoleInversion anti_wedge = AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(this.e1234) * right_dual.group1.xyz, 
            /* e415, e425, e435, e321 */
            float4(((right_dual.group1.yzx * this.group3.zxy) - (right_dual.group1.zxy * this.group3.yzx)), right_dual.e3215 * this.e1234), 
            /* e235, e315, e125, e4 */
            float4(float3(0.0), -(right_dual.e4315 * this.e42) - (right_dual.e4125 * this.e43)) + float4((right_dual.group1.www * this.group3.xyz), right_dual.e45 * this.e1234) - (right_dual.group1.xyzx * float4(this.group3.www, this.e41)), 
            /* e1, e2, e3, e5 */
            (right_dual.group1.zxyy * float4(this.group1.yzx, this.e25)) + (right_dual.group1.wwwz * float4(this.group0.xyz, this.e35)) + (this.group2.wwwx * float4(right_dual.group0.xyz, right_dual.e4235)) + float4(float3(0.0), (right_dual.e3215 * this.e45) - (right_dual.e25 * this.e4315) - (right_dual.e35 * this.e4125) - (right_dual.e45 * this.e3215)) - float4((right_dual.group1.yzx * this.group1.zxy), right_dual.e15 * this.e4235)
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            float3(anti_wedge.e4) * other.group1.xyz * float3(-1.0), 
            /* e23, e31, e12, e45 */
            float4(((anti_wedge.group3.zxy * other.group1.yzx) - (anti_wedge.group3.yzx * other.group1.zxy)), anti_wedge.e4 * other.e5 * -1.0), 
            /* e15, e25, e35, e1234 */
            (other.group1.xyzx * float4(anti_wedge.group3.www, anti_wedge.e423)) + float4(float3(0.0), (anti_wedge.e431 * other.e2) + (anti_wedge.e412 * other.e3)) - float4((other.group1.www * anti_wedge.group3.xyz), anti_wedge.e4 * other.e321), 
            /* e4235, e4315, e4125, e3215 */
            float4(float3(0.0), (anti_wedge.e2 * other.e315) + (anti_wedge.e3 * other.e125) + (anti_wedge.e5 * other.e321) - (anti_wedge.e125 * other.e3)) + float4((anti_wedge.group1.yzx * other.group1.zxy), anti_wedge.e1 * other.e235) - (float4(other.e5) * float4(anti_wedge.group0.xyz, anti_wedge.e321)) - (anti_wedge.group2.wwwy * float4(other.group0.xyz, other.e2)) - (other.group1.yzxx * float4(anti_wedge.group1.zxy, anti_wedge.e235))
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<VersorOdd> lhs, AntiLine rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension VersorOdd {
    public DipoleInversion anti_project_via_horizon_onto(AntiLine other) {
        Line right_dual = Line(
            /* e415, e425, e435 */
            other.group0.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group1.xyz * float3(-1.0)
        );
        AntiCircleRotor anti_wedge = AntiCircleRotor(
            /* e41, e42, e43 */
            float3(this.e1234) * right_dual.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4((float3(this.e1234) * right_dual.group1.xyz), -(right_dual.e415 * this.e4235) - (right_dual.e425 * this.e4315) - (right_dual.e435 * this.e4125)), 
            /* e15, e25, e35, scalar */
            float4((right_dual.e415 * this.e3215) + (right_dual.e315 * this.e4125), (right_dual.e425 * this.e3215) + (right_dual.e125 * this.e4235), (right_dual.e435 * this.e3215) + (right_dual.e235 * this.e4315), -(right_dual.e425 * this.e31) - (right_dual.e435 * this.e12) - (right_dual.e235 * this.e41) - (right_dual.e315 * this.e42) - (right_dual.e125 * this.e43)) - float4((right_dual.group1.xyz.zxy * this.group3.yzx), right_dual.e415 * this.e23)
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12, e45 */
            float4(float3(1.0), 0.0) * float4(other.group0.xyz, 0.0) * float4(anti_wedge.group2.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e15, e25, e35, e1234 */
            float4((float3(anti_wedge.scalar) * other.group1.xyz), -(anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12)), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e42 * other.e35) + (anti_wedge.e45 * other.e23), (anti_wedge.e43 * other.e15) + (anti_wedge.e45 * other.e31), (anti_wedge.e41 * other.e25) + (anti_wedge.e45 * other.e12), -(anti_wedge.e23 * other.e15) - (anti_wedge.e31 * other.e25) - (anti_wedge.e12 * other.e35) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12)) - float4((anti_wedge.group0.xyz.zxy * other.group1.xyz.yzx), anti_wedge.e15 * other.e23)
        );
    }
}
// Fancy infix trick (second half)
public VersorOdd operator /(AntiProjectViaHorizonOntoInfixPartial<VersorOdd> lhs, AntiMotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension VersorOdd {
    public VersorOdd anti_project_via_horizon_onto(AntiMotor other) {
        Motor right_dual = Motor(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        VersorOdd anti_wedge = VersorOdd(
            /* e41, e42, e43, scalar */
            (right_dual.group0 * float4(this.group2.www, this.scalar)) + float4(float3(0.0), -(right_dual.e415 * this.e23) - (right_dual.e425 * this.e31) - (right_dual.e435 * this.e12) - (right_dual.e235 * this.e41) - (right_dual.e315 * this.e42) - (right_dual.e125 * this.e43)) + float4((right_dual.group0.www * this.group0.xyz), right_dual.e5 * this.e1234), 
            /* e23, e31, e12, e45 */
            float4(right_dual.e235 * this.e1234, right_dual.e315 * this.e1234, right_dual.e125 * this.e1234, -(right_dual.e415 * this.e4235) - (right_dual.e425 * this.e4315) - (right_dual.e435 * this.e4125)) + (float4(right_dual.e12345) * this.group1), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_dual.e12345) * this.group2.xyz) + (float3(this.e3215) * right_dual.group0.xyz) + (right_dual.group1.yzx * this.group3.zxy) - (right_dual.group1.zxy * this.group3.yzx)), right_dual.e12345 * this.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * this.group3
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(other.scalar) * anti_wedge.group0, 
            /* e23, e31, e12, e45 */
            float4(((float3(other.scalar) * anti_wedge.group1.xyz) + (float3(anti_wedge.scalar) * other.group0.xyz)), other.scalar * anti_wedge.e45), 
            /* e15, e25, e35, e1234 */
            float4(other.e15 * anti_wedge.scalar, other.e25 * anti_wedge.scalar, other.e35 * anti_wedge.scalar, -(other.e23 * anti_wedge.e41) - (other.e31 * anti_wedge.e42) - (other.e12 * anti_wedge.e43)) + (float4(other.scalar) * anti_wedge.group2), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.e35 * anti_wedge.e42, other.e15 * anti_wedge.e43, other.e25 * anti_wedge.e41, -(other.e31 * anti_wedge.e25) - (other.e12 * anti_wedge.e35) - (other.e15 * anti_wedge.e23) - (other.e25 * anti_wedge.e31) - (other.e35 * anti_wedge.e12)) + (other.group0 * float4(anti_wedge.group1.www, anti_wedge.e3215)) + float4((other.group0.www * anti_wedge.group3.xyz), other.e3215 * anti_wedge.scalar) - float4((other.group1.yzx * anti_wedge.group0.zxy), other.e23 * anti_wedge.e15)
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<VersorOdd> lhs, AntiPlane rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension VersorOdd {
    public DipoleInversion anti_project_via_horizon_onto(AntiPlane other) {
        Plane right_dual = Plane(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiDipoleInversion anti_wedge = AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(this.e1234) * right_dual.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(((right_dual.group0.yzx * this.group3.zxy) - (right_dual.group0.zxy * this.group3.yzx)), right_dual.e3215 * this.e1234), 
            /* e235, e315, e125, e4 */
            float4(right_dual.e3215 * this.e4235, right_dual.e3215 * this.e4315, right_dual.e3215 * this.e4125, -(right_dual.e4315 * this.e42) - (right_dual.e4125 * this.e43)) - (right_dual.group0.xyzx * float4(this.group3.www, this.e41)), 
            /* e1, e2, e3, e5 */
            float4(right_dual.e4315 * this.e12 * -1.0, right_dual.e4125 * this.e23 * -1.0, right_dual.e4235 * this.e31 * -1.0, (right_dual.e4125 * this.e35) + (right_dual.e3215 * this.e45)) + (right_dual.group0.zxyx * float4(this.group1.yzx, this.e15)) + (right_dual.group0.wwwy * float4(this.group0.xyz, this.e25))
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            float3(anti_wedge.e4) * other.group0.xyz * float3(-1.0), 
            /* e23, e31, e12, e45 */
            float4(((anti_wedge.group3.zxy * other.group0.yzx) - (anti_wedge.group3.yzx * other.group0.zxy)), anti_wedge.e4 * other.e5 * -1.0), 
            /* e15, e25, e35, e1234 */
            float4(anti_wedge.e1 * other.e5 * -1.0, anti_wedge.e2 * other.e5 * -1.0, anti_wedge.e3 * other.e5 * -1.0, (anti_wedge.e431 * other.e2) + (anti_wedge.e412 * other.e3)) + (other.group0.xyzx * float4(anti_wedge.group3.www, anti_wedge.e423)), 
            /* e4235, e4315, e4125, e3215 */
            float4(anti_wedge.e425 * other.e3, anti_wedge.e435 * other.e1, anti_wedge.e415 * other.e2, -(anti_wedge.e315 * other.e2) - (anti_wedge.e125 * other.e3)) - (float4(other.e5) * float4(anti_wedge.group0.xyz, anti_wedge.e321)) - (other.group0.yzxx * float4(anti_wedge.group1.zxy, anti_wedge.e235))
        );
    }
}
// Fancy infix trick (second half)
public Sphere operator /(AntiProjectViaHorizonOntoInfixPartial<VersorOdd> lhs, Circle rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension VersorOdd {
    public Sphere anti_project_via_horizon_onto(Circle other) {
        Dipole right_dual = Dipole(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35 */
            other.group2.xyz
        );
        RoundPoint anti_wedge = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(-(right_dual.e41 * this.e3215) - (right_dual.e31 * this.e4125), -(right_dual.e42 * this.e3215) - (right_dual.e12 * this.e4235), -(right_dual.e43 * this.e3215) - (right_dual.e23 * this.e4315), (right_dual.e43 * this.e4125) + (right_dual.e45 * this.e1234)) + (this.group3.yzxy * float4(right_dual.group1.zxy, right_dual.e42)) + float4((right_dual.group2.xyz * this.group2.www), right_dual.e41 * this.e4235), 
            /* e5 */
            -(right_dual.e45 * this.e3215) - (right_dual.e15 * this.e4235) - (right_dual.e25 * this.e4315) - (right_dual.e35 * this.e4125)
        );
        return Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(-(other.e425 * anti_wedge.e3) - (other.e235 * anti_wedge.e4), -(other.e435 * anti_wedge.e1) - (other.e315 * anti_wedge.e4), -(other.e415 * anti_wedge.e2) - (other.e125 * anti_wedge.e4), (other.e321 * anti_wedge.e5) + (other.e125 * anti_wedge.e3)) + (anti_wedge.group0.yzxy * float4(other.group1.zxy, other.e315)) + float4((float3(anti_wedge.e5) * other.group0.xyz), other.e235 * anti_wedge.e1), 
            /* e1234 */
            -(other.e423 * anti_wedge.e1) - (other.e431 * anti_wedge.e2) - (other.e412 * anti_wedge.e3) - (other.e321 * anti_wedge.e4)
        );
    }
}
// Fancy infix trick (second half)
public Sphere operator /(AntiProjectViaHorizonOntoInfixPartial<VersorOdd> lhs, CircleRotor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension VersorOdd {
    public Sphere anti_project_via_horizon_onto(CircleRotor other) {
        AntiCircleRotor right_dual = AntiCircleRotor(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        RoundPoint anti_wedge = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(-(right_dual.e41 * this.e3215) - (right_dual.e31 * this.e4125), -(right_dual.e42 * this.e3215) - (right_dual.e12 * this.e4235), -(right_dual.e43 * this.e3215) - (right_dual.e23 * this.e4315), (right_dual.e43 * this.e4125) + (right_dual.e45 * this.e1234)) + (this.group3.yzxx * float4(right_dual.group1.zxy, right_dual.e41)) + float4((this.group2.www * right_dual.group2.xyz), right_dual.e42 * this.e4315), 
            /* e5 */
            -(right_dual.e45 * this.e3215) - (right_dual.e15 * this.e4235) - (right_dual.e25 * this.e4315) - (right_dual.e35 * this.e4125)
        );
        return Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(-(other.e425 * anti_wedge.e3) - (other.e235 * anti_wedge.e4), -(other.e435 * anti_wedge.e1) - (other.e315 * anti_wedge.e4), -(other.e415 * anti_wedge.e2) - (other.e125 * anti_wedge.e4), (other.e315 * anti_wedge.e2) + (other.e125 * anti_wedge.e3)) + (float4(anti_wedge.e5) * float4(other.group0.xyz, other.e321)) + (anti_wedge.group0.yzxx * float4(other.group1.zxy, other.e235)), 
            /* e1234 */
            -(other.e423 * anti_wedge.e1) - (other.e431 * anti_wedge.e2) - (other.e412 * anti_wedge.e3) - (other.e321 * anti_wedge.e4)
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<VersorOdd> lhs, Dipole rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension VersorOdd {
    public DipoleInversion anti_project_via_horizon_onto(Dipole other) {
        Circle right_dual = Circle(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125 */
            other.group2.xyz * float3(-1.0)
        );
        AntiCircleRotor anti_wedge = AntiCircleRotor(
            /* e41, e42, e43 */
            (float3(this.e1234) * right_dual.group1.xyz) + (right_dual.group0.xyz.zxy * this.group3.yzx) - (right_dual.group0.xyz.yzx * this.group3.zxy), 
            /* e23, e31, e12, e45 */
            float4((right_dual.e423 * this.e3215) + (right_dual.e235 * this.e1234), (right_dual.e431 * this.e3215) + (right_dual.e315 * this.e1234), (right_dual.e412 * this.e3215) + (right_dual.e125 * this.e1234), -(right_dual.e425 * this.e4315) - (right_dual.e435 * this.e4125)) - (right_dual.group1.wwwx * this.group3.xyzx), 
            /* e15, e25, e35, scalar */
            float4((right_dual.e415 * this.e3215) + (right_dual.e315 * this.e4125), (right_dual.e425 * this.e3215) + (right_dual.e125 * this.e4235), (right_dual.e435 * this.e3215) + (right_dual.e235 * this.e4315), -(right_dual.e431 * this.e25) - (right_dual.e412 * this.e35) - (right_dual.e415 * this.e23) - (right_dual.e425 * this.e31) - (right_dual.e435 * this.e12) - (right_dual.e321 * this.e45) - (right_dual.e235 * this.e41) - (right_dual.e315 * this.e42) - (right_dual.e125 * this.e43)) - float4((right_dual.group2.xyz.zxy * this.group3.yzx), right_dual.e423 * this.e15)
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(anti_wedge.scalar) * other.group1, 
            /* e15, e25, e35, e1234 */
            float4((float3(anti_wedge.scalar) * other.group2.xyz), -(anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12) - (anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e42 * other.e35) + (anti_wedge.e23 * other.e45) + (anti_wedge.e45 * other.e23) + (anti_wedge.e35 * other.e42), (anti_wedge.e43 * other.e15) + (anti_wedge.e31 * other.e45) + (anti_wedge.e45 * other.e31) + (anti_wedge.e15 * other.e43), (anti_wedge.e41 * other.e25) + (anti_wedge.e12 * other.e45) + (anti_wedge.e45 * other.e12) + (anti_wedge.e25 * other.e41), -(anti_wedge.e12 * other.e35) - (anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12)) - float4((anti_wedge.group0.xyz.zxy * other.group2.xyz.yzx), anti_wedge.e23 * other.e15) - float4((other.group0.xyz.zxy * anti_wedge.group2.yzx), anti_wedge.e31 * other.e25)
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<VersorOdd> lhs, DipoleInversion rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension VersorOdd {
    public DipoleInversion anti_project_via_horizon_onto(DipoleInversion other) {
        AntiDipoleInversion right_dual = AntiDipoleInversion(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiCircleRotor anti_wedge = AntiCircleRotor(
            /* e41, e42, e43 */
            (float3(this.e1234) * right_dual.group1.xyz) + (right_dual.group0.xyz.zxy * this.group3.yzx) - (right_dual.group0.xyz.yzx * this.group3.zxy), 
            /* e23, e31, e12, e45 */
            float4((right_dual.e423 * this.e3215) + (right_dual.e235 * this.e1234), (right_dual.e431 * this.e3215) + (right_dual.e315 * this.e1234), (right_dual.e412 * this.e3215) + (right_dual.e125 * this.e1234), -(right_dual.e425 * this.e4315) - (right_dual.e435 * this.e4125)) - (right_dual.group1.wwwx * this.group3.xyzx), 
            /* e15, e25, e35, scalar */
            (float4(this.e3215) * float4(right_dual.group1.xyz, right_dual.e4)) + (this.group3.zxyx * float4(right_dual.group2.yzx, right_dual.e1)) + float4(float3(0.0), (right_dual.e2 * this.e4315) + (right_dual.e3 * this.e4125) + (right_dual.e5 * this.e1234) - (right_dual.e431 * this.e25) - (right_dual.e412 * this.e35) - (right_dual.e415 * this.e23) - (right_dual.e425 * this.e31) - (right_dual.e435 * this.e12) - (right_dual.e321 * this.e45) - (right_dual.e235 * this.e41) - (right_dual.e315 * this.e42) - (right_dual.e125 * this.e43)) - float4((right_dual.group2.zxy * this.group3.yzx), right_dual.e423 * this.e15)
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            float3(anti_wedge.scalar) * other.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(anti_wedge.scalar) * other.group1, 
            /* e15, e25, e35, e1234 */
            float4((anti_wedge.group2.www * other.group2.xyz), (anti_wedge.scalar * other.e1234) - (anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12) - (anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e23 * other.e45) + (anti_wedge.e45 * other.e23) + (anti_wedge.e35 * other.e42) + (anti_wedge.scalar * other.e4235), (anti_wedge.e31 * other.e45) + (anti_wedge.e45 * other.e31) + (anti_wedge.e15 * other.e43) + (anti_wedge.scalar * other.e4315), (anti_wedge.e12 * other.e45) + (anti_wedge.e45 * other.e12) + (anti_wedge.e25 * other.e41) + (anti_wedge.scalar * other.e4125), -(anti_wedge.e12 * other.e35) - (anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12)) + float4((anti_wedge.group0.xyz.yzx * other.group2.zxy), anti_wedge.scalar * other.e3215) - (other.group2.yzxx * float4(anti_wedge.group0.xyz.zxy, anti_wedge.e23)) - float4((other.group0.xyz.zxy * anti_wedge.group2.yzx), anti_wedge.e31 * other.e25)
        );
    }
}
// Fancy infix trick (second half)
public Flector operator /(AntiProjectViaHorizonOntoInfixPartial<VersorOdd> lhs, DualNum rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension VersorOdd {
    public Flector anti_project_via_horizon_onto(DualNum other) {
        AntiDualNum right_dual = AntiDualNum(
            /* e3215, scalar */
            other.group0.xy * float2(-1.0)
        );
        AntiFlector anti_wedge = AntiFlector(
            /* e235, e315, e125, e321 */
            float4(right_dual.e3215) * float4(this.group3.xyz, this.e1234), 
            /* e1, e2, e3, e5 */
            float4(right_dual.e3215) * float4(this.group0.xyz, this.e45)
        );
        return Flector(
            /* e15, e25, e35, e45 */
            float4(other.group0.xy.xx, other.e5, 0.0) * float4(float3(1.0), 0.0) * float4(anti_wedge.group1.xyz, 0.0) * float4(-1.0, -1.0, -1.0, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(float3(0.0), anti_wedge.e321 * other.e5 * -1.0)
        );
    }
}
// Fancy infix trick (second half)
public Flector operator /(AntiProjectViaHorizonOntoInfixPartial<VersorOdd> lhs, FlatPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension VersorOdd {
    public Flector anti_project_via_horizon_onto(FlatPoint other) {
        AntiFlatPoint right_dual = AntiFlatPoint(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiMotor anti_wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4(right_dual.e235 * this.e1234, right_dual.e315 * this.e1234, right_dual.e125 * this.e1234, -(right_dual.e315 * this.e42) - (right_dual.e125 * this.e43) - (right_dual.e321 * this.e45)) - (right_dual.group0.wwwx * float4(this.group3.xyz, this.e41)), 
            /* e15, e25, e35, e3215 */
            float4(((right_dual.group0.yzx * this.group3.zxy) - (right_dual.group0.zxy * this.group3.yzx)), 0.0)
        );
        return Flector(
            /* e15, e25, e35, e45 */
            float4(anti_wedge.scalar) * other.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4((float3(other.e45) * anti_wedge.group0.xyz), -(anti_wedge.e23 * other.e15) - (anti_wedge.e31 * other.e25) - (anti_wedge.e12 * other.e35))
        );
    }
}
// Fancy infix trick (second half)
public Flector operator /(AntiProjectViaHorizonOntoInfixPartial<VersorOdd> lhs, Flector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension VersorOdd {
    public Flector anti_project_via_horizon_onto(Flector other) {
        AntiFlector right_dual = AntiFlector(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        AntiMotor anti_wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4(float3(0.0), (right_dual.e2 * this.e4315) + (right_dual.e3 * this.e4125) + (right_dual.e5 * this.e1234) - (right_dual.e315 * this.e42) - (right_dual.e125 * this.e43) - (right_dual.e321 * this.e45)) + float4((this.group2.www * right_dual.group0.xyz), right_dual.e1 * this.e4235) - (right_dual.group0.wwwx * float4(this.group3.xyz, this.e41)), 
            /* e15, e25, e35, e3215 */
            float4(((right_dual.group0.yzx * this.group3.zxy) - (right_dual.group0.zxy * this.group3.yzx)), 0.0)
        );
        return Flector(
            /* e15, e25, e35, e45 */
            float4(anti_wedge.scalar) * other.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4(anti_wedge.scalar * other.e4235, anti_wedge.scalar * other.e4315, anti_wedge.scalar * other.e4125, -(anti_wedge.e23 * other.e15) - (anti_wedge.e31 * other.e25) - (anti_wedge.e12 * other.e35)) + (anti_wedge.group0 * float4(other.group0.www, other.e3215))
        );
    }
}
// Fancy infix trick (second half)
public Plane operator /(AntiProjectViaHorizonOntoInfixPartial<VersorOdd> lhs, Line rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension VersorOdd {
    public Plane anti_project_via_horizon_onto(Line other) {
        AntiLine right_dual = AntiLine(
            /* e23, e31, e12 */
            other.group0.xyz, 
            /* e15, e25, e35 */
            other.group1.xyz
        );
        AntiPlane anti_wedge = AntiPlane(
            /* e1, e2, e3, e5 */
            float4((right_dual.e12 * this.e4315) + (right_dual.e15 * this.e1234), (right_dual.e23 * this.e4125) + (right_dual.e25 * this.e1234), (right_dual.e31 * this.e4235) + (right_dual.e35 * this.e1234), -(right_dual.e25 * this.e4315) - (right_dual.e35 * this.e4125)) - (this.group3.zxyx * float4(right_dual.group0.xyz.yzx, right_dual.e15))
        );
        return Plane(
            /* e4235, e4315, e4125, e3215 */
            float4(anti_wedge.e3 * other.e425 * -1.0, anti_wedge.e1 * other.e435 * -1.0, anti_wedge.e2 * other.e415 * -1.0, (anti_wedge.e2 * other.e315) + (anti_wedge.e3 * other.e125)) + (anti_wedge.group0.yzxx * float4(other.group0.xyz.zxy, other.e235))
        );
    }
}
// Fancy infix trick (second half)
public Flector operator /(AntiProjectViaHorizonOntoInfixPartial<VersorOdd> lhs, Motor rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension VersorOdd {
    public Flector anti_project_via_horizon_onto(Motor other) {
        AntiMotor right_dual = AntiMotor(
            /* e23, e31, e12, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiFlector anti_wedge = AntiFlector(
            /* e235, e315, e125, e321 */
            float4(right_dual.e3215) * float4(this.group3.xyz, this.e1234), 
            /* e1, e2, e3, e5 */
            float4((right_dual.e15 * this.e1234) + (right_dual.e3215 * this.e41), (right_dual.e25 * this.e1234) + (right_dual.e3215 * this.e42), (right_dual.e35 * this.e1234) + (right_dual.e3215 * this.e43), -(right_dual.e25 * this.e4315) - (right_dual.e35 * this.e4125)) + float4((right_dual.group0.zxy * this.group3.yzx), right_dual.e3215 * this.e45) - (this.group3.zxyx * float4(right_dual.group0.yzx, right_dual.e15))
        );
        return Flector(
            /* e15, e25, e35, e45 */
            float4(float3(1.0), 0.0) * float4(other.group1.www, 0.0) * float4(anti_wedge.group1.xyz, 0.0) * float4(-1.0, -1.0, -1.0, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            (anti_wedge.group1.yzxx * float4(other.group0.zxy, other.e235)) + float4(float3(0.0), (anti_wedge.e2 * other.e315) + (anti_wedge.e3 * other.e125)) - float4((anti_wedge.group1.zxy * other.group0.yzx), anti_wedge.e321 * other.e5)
        );
    }
}
// Fancy infix trick (second half)
public MultiVector operator /(AntiProjectViaHorizonOntoInfixPartial<VersorOdd> lhs, MultiVector rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension VersorOdd {
    public MultiVector anti_project_via_horizon_onto(MultiVector other) {
        MultiVector right_dual = MultiVector(
            /* scalar, e12345 */
            other.group0.xy.yx * float2(-1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215, 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43 */
            other.group7.xyz, 
            /* e23, e31, e12 */
            other.group6.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412 */
            other.group4.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group3.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        MultiVector anti_wedge = MultiVector(
            /* scalar, e12345 */
            float2((right_dual.e12345 * this.scalar) + (right_dual.e1 * this.e4235) + (right_dual.e2 * this.e4315) + (right_dual.e3 * this.e4125) + (right_dual.e4 * this.e3215) + (right_dual.e5 * this.e1234) - (right_dual.e415 * this.e23) - (right_dual.e425 * this.e31) - (right_dual.e435 * this.e12) - (right_dual.e321 * this.e45) - (right_dual.e423 * this.e15) - (right_dual.e431 * this.e25) - (right_dual.e412 * this.e35) - (right_dual.e235 * this.e41) - (right_dual.e315 * this.e42) - (right_dual.e125 * this.e43), 0.0), 
            /* e1, e2, e3, e4 */
            (this.group3.yzxx * float4(right_dual.group5.xyz.zxy, right_dual.e41)) + float4((right_dual.group9.zxy * this.group1.yzx), right_dual.e43 * this.e4125) + float4((right_dual.group9.www * this.group0.xyz), right_dual.e45 * this.e1234) + float4((this.group2.www * right_dual.group3.xyz), right_dual.e42 * this.e4315) - (float4(right_dual.e1234) * float4(this.group2.xyz, this.e45)) - (right_dual.group9.yzxz * float4(this.group1.zxy, this.e43)) - float4((right_dual.group4.xyz * this.group3.www), right_dual.e4235 * this.e41) - float4((right_dual.group5.xyz.yzx * this.group3.zxy), right_dual.e4315 * this.e42), 
            /* e5 */
            (right_dual.e4235 * this.e15) + (right_dual.e4315 * this.e25) + (right_dual.e4125 * this.e35) + (right_dual.e3215 * this.e45) - (right_dual.e15 * this.e4235) - (right_dual.e25 * this.e4315) - (right_dual.e35 * this.e4125) - (right_dual.e45 * this.e3215), 
            /* e15, e25, e35, e45 */
            float4((right_dual.e415 * this.e3215) + (right_dual.e315 * this.e4125), (right_dual.e425 * this.e3215) + (right_dual.e125 * this.e4235), (right_dual.e435 * this.e3215) + (right_dual.e235 * this.e4315), -(right_dual.e425 * this.e4315) - (right_dual.e435 * this.e4125)) + (float4(right_dual.e12345) * float4(this.group2.xyz, this.e45)) - (this.group3.yzxx * float4(right_dual.group8.xyz.zxy, right_dual.e415)), 
            /* e41, e42, e43 */
            (float3(right_dual.e12345) * this.group0.xyz) + (float3(this.e1234) * right_dual.group6.xyz) + (right_dual.group7.xyz.zxy * this.group3.yzx) - (right_dual.group7.xyz.yzx * this.group3.zxy), 
            /* e23, e31, e12 */
            (float3(right_dual.e12345) * this.group1.xyz) + (float3(this.e1234) * right_dual.group8.xyz) + (float3(this.e3215) * right_dual.group7.xyz) - (float3(right_dual.e321) * this.group3.xyz), 
            /* e415, e425, e435, e321 */
            (right_dual.group9.yzxw * float4(this.group3.zxy, this.e1234)) - float4((right_dual.group9.zxy * this.group3.yzx), right_dual.e1234 * this.e3215), 
            /* e423, e431, e412 */
            (float3(this.e1234) * right_dual.group9.xyz) - (float3(right_dual.e1234) * this.group3.xyz), 
            /* e235, e315, e125 */
            (float3(right_dual.e3215) * this.group3.xyz) - (float3(this.e3215) * right_dual.group9.xyz), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * this.group3, 
            /* e1234 */
            right_dual.e12345 * this.e1234
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(anti_wedge.scalar * other.scalar, (anti_wedge.scalar * other.e12345) + (anti_wedge.e12345 * other.scalar) + (anti_wedge.e1 * other.e4235) + (anti_wedge.e2 * other.e4315) + (anti_wedge.e3 * other.e4125) + (anti_wedge.e4 * other.e3215) + (anti_wedge.e5 * other.e1234) + (anti_wedge.e4235 * other.e1) + (anti_wedge.e4315 * other.e2) + (anti_wedge.e4125 * other.e3) + (anti_wedge.e3215 * other.e4) + (anti_wedge.e1234 * other.e5) - (anti_wedge.e15 * other.e423) - (anti_wedge.e25 * other.e431) - (anti_wedge.e35 * other.e412) - (anti_wedge.e45 * other.e321) - (anti_wedge.e41 * other.e235) - (anti_wedge.e42 * other.e315) - (anti_wedge.e43 * other.e125) - (anti_wedge.e23 * other.e415) - (anti_wedge.e31 * other.e425) - (anti_wedge.e12 * other.e435) - (anti_wedge.e415 * other.e23) - (anti_wedge.e425 * other.e31) - (anti_wedge.e435 * other.e12) - (anti_wedge.e321 * other.e45) - (anti_wedge.e423 * other.e15) - (anti_wedge.e431 * other.e25) - (anti_wedge.e412 * other.e35) - (anti_wedge.e235 * other.e41) - (anti_wedge.e315 * other.e42) - (anti_wedge.e125 * other.e43)), 
            /* e1, e2, e3, e4 */
            (float4(anti_wedge.scalar) * other.group1) + (float4(other.scalar) * anti_wedge.group1), 
            /* e5 */
            (anti_wedge.scalar * other.e5) + (anti_wedge.e5 * other.scalar), 
            /* e15, e25, e35, e45 */
            (float4(anti_wedge.scalar) * other.group3) + (float4(anti_wedge.e5) * other.group1) + (float4(other.scalar) * anti_wedge.group3) - (float4(other.e5) * anti_wedge.group1), 
            /* e41, e42, e43 */
            (float3(anti_wedge.scalar) * other.group4.xyz) + (float3(other.scalar) * anti_wedge.group4.xyz) + (float3(other.e4) * anti_wedge.group1.xyz) - (float3(anti_wedge.e4) * other.group1.xyz), 
            /* e23, e31, e12 */
            (float3(anti_wedge.scalar) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group5.xyz) + (anti_wedge.group1.zxy * other.group1.yzx) - (anti_wedge.group1.yzx * other.group1.zxy), 
            /* e415, e425, e435, e321 */
            float4((anti_wedge.e4 * other.e15) + (anti_wedge.e5 * other.e41) + (anti_wedge.e15 * other.e4) + (anti_wedge.e41 * other.e5), (anti_wedge.e4 * other.e25) + (anti_wedge.e5 * other.e42) + (anti_wedge.e25 * other.e4) + (anti_wedge.e42 * other.e5), (anti_wedge.e4 * other.e35) + (anti_wedge.e5 * other.e43) + (anti_wedge.e35 * other.e4) + (anti_wedge.e43 * other.e5), -(anti_wedge.e1 * other.e23) - (anti_wedge.e2 * other.e31) - (anti_wedge.e3 * other.e12) - (anti_wedge.e12 * other.e3)) + (float4(anti_wedge.scalar) * other.group6) + (float4(other.scalar) * anti_wedge.group6) - (other.group1.xyzy * float4(anti_wedge.group3.www, anti_wedge.e31)) - float4((other.group3.www * anti_wedge.group1.xyz), anti_wedge.e23 * other.e1), 
            /* e423, e431, e412 */
            (float3(anti_wedge.scalar) * other.group7.xyz) + (float3(anti_wedge.e4) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group7.xyz) + (float3(other.e4) * anti_wedge.group5.xyz) + (anti_wedge.group4.xyz.yzx * other.group1.zxy) + (other.group4.xyz.yzx * anti_wedge.group1.zxy) - (anti_wedge.group4.xyz.zxy * other.group1.yzx) - (other.group4.xyz.zxy * anti_wedge.group1.yzx), 
            /* e235, e315, e125 */
            (float3(anti_wedge.scalar) * other.group8.xyz) + (float3(anti_wedge.e5) * other.group5.xyz) + (float3(other.scalar) * anti_wedge.group8.xyz) + (float3(other.e5) * anti_wedge.group5.xyz) + (anti_wedge.group1.yzx * other.group3.zxy) + (anti_wedge.group3.zxy * other.group1.yzx) - (anti_wedge.group1.zxy * other.group3.yzx) - (anti_wedge.group3.yzx * other.group1.zxy), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e2 * other.e435) + (anti_wedge.e5 * other.e423) + (anti_wedge.e45 * other.e23) + (anti_wedge.e425 * other.e3), (anti_wedge.e3 * other.e415) + (anti_wedge.e5 * other.e431) + (anti_wedge.e45 * other.e31) + (anti_wedge.e435 * other.e1), (anti_wedge.e1 * other.e425) + (anti_wedge.e5 * other.e412) + (anti_wedge.e45 * other.e12) + (anti_wedge.e415 * other.e2), -(anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12) - (anti_wedge.e321 * other.e5)) + (float4(anti_wedge.scalar) * other.group9) + (float4(other.scalar) * anti_wedge.group9) + float4((anti_wedge.group5.xyz * other.group3.www), anti_wedge.e2 * other.e315) + float4((anti_wedge.group8.xyz * other.group1.www), anti_wedge.e3 * other.e125) + float4((anti_wedge.group4.xyz.yzx * other.group3.zxy), anti_wedge.e1 * other.e235) + float4((other.group4.xyz.yzx * anti_wedge.group3.zxy), anti_wedge.e5 * other.e321) - (other.group1.yzxz * float4(anti_wedge.group6.zxy, anti_wedge.e125)) - (other.group3.yzxx * float4(anti_wedge.group4.xyz.zxy, anti_wedge.e23)) - float4((float3(other.e5) * anti_wedge.group7.xyz), anti_wedge.e31 * other.e25) - float4((other.group8.xyz * anti_wedge.group1.www), anti_wedge.e235 * other.e1) - float4((other.group4.xyz.zxy * anti_wedge.group3.yzx), anti_wedge.e12 * other.e35) - float4((anti_wedge.group1.zxy * other.group6.yzx), anti_wedge.e315 * other.e2), 
            /* e1234 */
            (anti_wedge.scalar * other.e1234) + (anti_wedge.e321 * other.e4) + (anti_wedge.e423 * other.e1) + (anti_wedge.e431 * other.e2) + (anti_wedge.e412 * other.e3) + (anti_wedge.e1234 * other.scalar) - (anti_wedge.e1 * other.e423) - (anti_wedge.e2 * other.e431) - (anti_wedge.e3 * other.e412) - (anti_wedge.e4 * other.e321) - (anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12) - (anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)
        );
    }
}
// Fancy infix trick (second half)
public Plane operator /(AntiProjectViaHorizonOntoInfixPartial<VersorOdd> lhs, Plane rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension VersorOdd {
    public Plane anti_project_via_horizon_onto(Plane other) {
        AntiPlane right_dual = AntiPlane(
            /* e1, e2, e3, e5 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return Plane(
            /* e4235, e4315, e4125, e3215 */
            float4((right_dual.e1 * this.e4235) + (right_dual.e2 * this.e4315) + (right_dual.e3 * this.e4125) + (right_dual.e5 * this.e1234)) * other.group0
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<VersorOdd> lhs, RoundPoint rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension VersorOdd {
    public DipoleInversion anti_project_via_horizon_onto(RoundPoint other) {
        Sphere right_dual = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        AntiDipoleInversion anti_wedge = AntiDipoleInversion(
            /* e423, e431, e412 */
            (float3(this.e1234) * right_dual.group0.xyz) - (float3(right_dual.e1234) * this.group3.xyz), 
            /* e415, e425, e435, e321 */
            (right_dual.group0.yzxw * float4(this.group3.zxy, this.e1234)) - float4((right_dual.group0.zxy * this.group3.yzx), right_dual.e1234 * this.e3215), 
            /* e235, e315, e125, e4 */
            float4(right_dual.e3215 * this.e4235, right_dual.e3215 * this.e4315, right_dual.e3215 * this.e4125, -(right_dual.e4315 * this.e42) - (right_dual.e4125 * this.e43) - (right_dual.e1234 * this.e45)) - (right_dual.group0.xyzx * float4(this.group3.www, this.e41)), 
            /* e1, e2, e3, e5 */
            float4(-(right_dual.e4315 * this.e12) - (right_dual.e1234 * this.e15), -(right_dual.e4125 * this.e23) - (right_dual.e1234 * this.e25), -(right_dual.e4235 * this.e31) - (right_dual.e1234 * this.e35), (right_dual.e4125 * this.e35) + (right_dual.e3215 * this.e45)) + (right_dual.group0.zxyx * float4(this.group1.yzx, this.e15)) + (right_dual.group0.wwwy * float4(this.group0.xyz, this.e25))
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            (float3(other.e4) * anti_wedge.group3.xyz) - (float3(anti_wedge.e4) * other.group0.xyz), 
            /* e23, e31, e12, e45 */
            (anti_wedge.group3.zxyw * other.group0.yzxw) - float4((anti_wedge.group3.yzx * other.group0.zxy), anti_wedge.e4 * other.e5), 
            /* e15, e25, e35, e1234 */
            float4(anti_wedge.e1 * other.e5 * -1.0, anti_wedge.e2 * other.e5 * -1.0, anti_wedge.e3 * other.e5 * -1.0, (anti_wedge.e431 * other.e2) + (anti_wedge.e412 * other.e3) + (anti_wedge.e321 * other.e4)) + (other.group0.xyzx * float4(anti_wedge.group3.www, anti_wedge.e423)), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e425 * other.e3) + (anti_wedge.e235 * other.e4), (anti_wedge.e435 * other.e1) + (anti_wedge.e315 * other.e4), (anti_wedge.e415 * other.e2) + (anti_wedge.e125 * other.e4), -(anti_wedge.e315 * other.e2) - (anti_wedge.e125 * other.e3)) - (float4(other.e5) * float4(anti_wedge.group0.xyz, anti_wedge.e321)) - (other.group0.yzxx * float4(anti_wedge.group1.zxy, anti_wedge.e235))
        );
    }
}
// Fancy infix trick (second half)
public VersorOdd operator /(AntiProjectViaHorizonOntoInfixPartial<VersorOdd> lhs, Scalar rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension VersorOdd {
    public VersorOdd anti_project_via_horizon_onto(Scalar other) {
        AntiScalar right_dual = AntiScalar(
            /* e12345 */
            other.scalar
        );
        VersorOdd anti_wedge = VersorOdd(
            /* e41, e42, e43, scalar */
            float4(right_dual.e12345) * this.group0, 
            /* e23, e31, e12, e45 */
            float4(right_dual.e12345) * this.group1, 
            /* e15, e25, e35, e1234 */
            float4(right_dual.e12345) * this.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * this.group3
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(other.scalar) * anti_wedge.group0, 
            /* e23, e31, e12, e45 */
            float4(other.scalar) * anti_wedge.group1, 
            /* e15, e25, e35, e1234 */
            float4(other.scalar) * anti_wedge.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar) * anti_wedge.group3
        );
    }
}
// Fancy infix trick (second half)
public Sphere operator /(AntiProjectViaHorizonOntoInfixPartial<VersorOdd> lhs, Sphere rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension VersorOdd {
    public Sphere anti_project_via_horizon_onto(Sphere other) {
        RoundPoint right_dual = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(other.group0.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215
        );
        Scalar anti_wedge = Scalar(
            /* scalar */
            (right_dual.e1 * this.e4235) + (right_dual.e2 * this.e4315) + (right_dual.e3 * this.e4125) + (right_dual.e4 * this.e3215) + (right_dual.e5 * this.e1234)
        );
        return Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(anti_wedge.scalar) * other.group0, 
            /* e1234 */
            anti_wedge.scalar * other.e1234
        );
    }
}
// Fancy infix trick (second half)
public DipoleInversion operator /(AntiProjectViaHorizonOntoInfixPartial<VersorOdd> lhs, VersorEven rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension VersorOdd {
    public DipoleInversion anti_project_via_horizon_onto(VersorEven other) {
        VersorOdd right_dual = VersorOdd(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        AntiDipoleInversion anti_wedge = AntiDipoleInversion(
            /* e423, e431, e412 */
            (float3(this.e1234) * right_dual.group3.xyz) - (float3(right_dual.e1234) * this.group3.xyz), 
            /* e415, e425, e435, e321 */
            (right_dual.group3.yzxw * float4(this.group3.zxy, this.e1234)) - (this.group3.yzxw * float4(right_dual.group3.zxy, right_dual.e1234)), 
            /* e235, e315, e125, e4 */
            (this.group3.xyzx * float4(right_dual.group3.www, right_dual.e41)) + float4(float3(0.0), (right_dual.e42 * this.e4315) + (right_dual.e43 * this.e4125) + (right_dual.e45 * this.e1234) - (right_dual.e4235 * this.e41) - (right_dual.e4315 * this.e42) - (right_dual.e4125 * this.e43)) - float4((this.group3.www * right_dual.group3.xyz), right_dual.e1234 * this.e45), 
            /* e1, e2, e3, e5 */
            (float4(right_dual.e3215) * float4(this.group0.xyz, this.e45)) + (right_dual.group3.zxyz * float4(this.group1.yzx, this.e35)) + (this.group2.wwwy * float4(right_dual.group2.xyz, right_dual.e4315)) + float4((right_dual.group1.zxy * this.group3.yzx), right_dual.e4235 * this.e15) - (float4(this.e3215) * float4(right_dual.group0.xyz, right_dual.e45)) - (right_dual.group2.wwwy * float4(this.group2.xyz, this.e4315)) - (this.group3.zxyx * float4(right_dual.group1.yzx, right_dual.e15)) - float4((right_dual.group3.yzx * this.group1.zxy), right_dual.e35 * this.e4125)
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            (float3(other.e4) * anti_wedge.group3.xyz) - (float3(anti_wedge.e4) * other.group3.xyz), 
            /* e23, e31, e12, e45 */
            (anti_wedge.group3.zxyw * other.group3.yzxw) - float4((anti_wedge.group3.yzx * other.group3.zxy), anti_wedge.e4 * other.e5), 
            /* e15, e25, e35, e1234 */
            (other.group3.xyzx * float4(anti_wedge.group3.www, anti_wedge.e423)) + float4(float3(0.0), (anti_wedge.e431 * other.e2) + (anti_wedge.e412 * other.e3) + (anti_wedge.e321 * other.e4) - (anti_wedge.e1 * other.e423) - (anti_wedge.e2 * other.e431) - (anti_wedge.e3 * other.e412)) - float4((other.group2.www * anti_wedge.group3.xyz), anti_wedge.e4 * other.e321), 
            /* e4235, e4315, e4125, e3215 */
            (float4(anti_wedge.e5) * float4(other.group0.xyz, other.e321)) + (anti_wedge.group3.yzxz * float4(other.group1.zxy, other.e125)) + float4((anti_wedge.group1.yzx * other.group3.zxy), anti_wedge.e1 * other.e235) + float4((other.group3.www * anti_wedge.group2.xyz), anti_wedge.e2 * other.e315) - (float4(other.e5) * float4(anti_wedge.group0.xyz, anti_wedge.e321)) - (anti_wedge.group2.wwwy * float4(other.group2.xyz, other.e2)) - (other.group3.yzxx * float4(anti_wedge.group1.zxy, anti_wedge.e235)) - float4((anti_wedge.group3.zxy * other.group1.yzx), anti_wedge.e125 * other.e3)
        );
    }
}
// Fancy infix trick (second half)
public VersorOdd operator /(AntiProjectViaHorizonOntoInfixPartial<VersorOdd> lhs, VersorOdd rhs) {
    return lhs.a.anti_project_via_horizon_onto(rhs);
}
public extension VersorOdd {
    public VersorOdd anti_project_via_horizon_onto(VersorOdd other) {
        VersorEven right_dual = VersorEven(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        VersorOdd anti_wedge = VersorOdd(
            /* e41, e42, e43, scalar */
            (right_dual.group0.zxyw * float4(this.group3.yzx, this.scalar)) + float4(float3(0.0), (right_dual.e2 * this.e4315) + (right_dual.e3 * this.e4125) + (right_dual.e4 * this.e3215) - (right_dual.e431 * this.e25) - (right_dual.e412 * this.e35) - (right_dual.e415 * this.e23) - (right_dual.e425 * this.e31) - (right_dual.e435 * this.e12) - (right_dual.e321 * this.e45) - (right_dual.e235 * this.e41) - (right_dual.e315 * this.e42) - (right_dual.e125 * this.e43)) + float4((right_dual.group0.www * this.group0.xyz), right_dual.e5 * this.e1234) + float4((this.group2.www * right_dual.group1.xyz), right_dual.e1 * this.e4235) - (right_dual.group0.yzxx * float4(this.group3.zxy, this.e15)), 
            /* e23, e31, e12, e45 */
            float4((right_dual.e12345 * this.e23) + (right_dual.e235 * this.e1234), (right_dual.e12345 * this.e31) + (right_dual.e315 * this.e1234), (right_dual.e12345 * this.e12) + (right_dual.e125 * this.e1234), -(right_dual.e425 * this.e4315) - (right_dual.e435 * this.e4125)) + (right_dual.group0 * float4(this.group3.www, this.e45)) - (right_dual.group1.wwwx * this.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_dual.e12345) * this.group2.xyz) + (float3(this.e3215) * right_dual.group1.xyz) + (right_dual.group2.yzx * this.group3.zxy) - (right_dual.group2.zxy * this.group3.yzx)), right_dual.e12345 * this.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * this.group3
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(((float3(anti_wedge.scalar) * other.group0.xyz) + (float3(other.scalar) * anti_wedge.group0.xyz)), anti_wedge.scalar * other.scalar), 
            /* e23, e31, e12, e45 */
            (float4(anti_wedge.scalar) * other.group1) + (float4(other.scalar) * anti_wedge.group1), 
            /* e15, e25, e35, e1234 */
            (float4(anti_wedge.scalar) * other.group2) + (float4(other.scalar) * anti_wedge.group2) + float4(float3(0.0), -(anti_wedge.e41 * other.e23) - (anti_wedge.e42 * other.e31) - (anti_wedge.e43 * other.e12) - (anti_wedge.e23 * other.e41) - (anti_wedge.e31 * other.e42) - (anti_wedge.e12 * other.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((anti_wedge.e23 * other.e45) + (anti_wedge.e45 * other.e23) + (anti_wedge.e35 * other.e42) + (anti_wedge.e4235 * other.scalar), (anti_wedge.e31 * other.e45) + (anti_wedge.e45 * other.e31) + (anti_wedge.e15 * other.e43) + (anti_wedge.e4315 * other.scalar), (anti_wedge.e12 * other.e45) + (anti_wedge.e45 * other.e12) + (anti_wedge.e25 * other.e41) + (anti_wedge.e4125 * other.scalar), -(anti_wedge.e12 * other.e35) - (anti_wedge.e15 * other.e23) - (anti_wedge.e25 * other.e31) - (anti_wedge.e35 * other.e12)) + (anti_wedge.group0.yzxw * float4(other.group2.zxy, other.e3215)) + float4((anti_wedge.group0.www * other.group3.xyz), anti_wedge.e3215 * other.scalar) - (other.group2.yzxx * float4(anti_wedge.group0.zxy, anti_wedge.e23)) - float4((anti_wedge.group2.yzx * other.group0.zxy), anti_wedge.e31 * other.e25)
        );
    }
}
