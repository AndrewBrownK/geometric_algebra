implementing cga3d;
using traits;
public extension AntiCircleRotor {
    // Fancy infix trick (first half)
    public AntiRejectOrthogonallyFromInfixPartial<AntiCircleRotor> operator /(AntiRejectOrthogonallyFromInfix rhs) {
        return AntiRejectOrthogonallyFromInfixPartial<AntiCircleRotor>(this);
    }
}
public extension AntiRejectOrthogonallyFromInfixPartial<AntiCircleRotor> {
    // Fancy infix trick (second half)
    public VersorOdd operator /(AntiCircleRotor rhs) {
        return this.a.anti_reject_orthogonally_from(rhs);
    }
}
public extension AntiCircleRotor {
    public VersorOdd anti_reject_orthogonally_from(AntiCircleRotor other) {
        VersorOdd wedge = VersorOdd(
            /* e41, e42, e43, scalar */
            float4(((float3(other.scalar) * this.group0.xyz) + (float3(this.scalar) * other.group0.xyz)), other.scalar * this.scalar), 
            /* e23, e31, e12, e45 */
            (float4(other.scalar) * this.group1) + (float4(this.scalar) * other.group1), 
            /* e15, e25, e35, e1234 */
            float4((other.e15 * this.scalar) + (other.scalar * this.e15), (other.e25 * this.scalar) + (other.scalar * this.e25), (other.e35 * this.scalar) + (other.scalar * this.e35), -(other.e41 * this.e23) - (other.e42 * this.e31) - (other.e43 * this.e12) - (other.e23 * this.e41) - (other.e31 * this.e42) - (other.e12 * this.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e42 * this.e35) + (other.e23 * this.e45) + (other.e45 * this.e23) + (other.e35 * this.e42), (other.e43 * this.e15) + (other.e31 * this.e45) + (other.e45 * this.e31) + (other.e15 * this.e43), (other.e41 * this.e25) + (other.e12 * this.e45) + (other.e45 * this.e12) + (other.e25 * this.e41), -(other.e12 * this.e35) - (other.e15 * this.e23) - (other.e25 * this.e31) - (other.e35 * this.e12)) - (this.group2.yzxx * float4(other.group0.xyz.zxy, other.e23)) - float4((this.group0.xyz.zxy * other.group2.yzx), other.e31 * this.e25)
        );
        CircleRotor right_anti_dual = CircleRotor(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4((right_anti_dual.e415 * wedge.e1234) + (right_anti_dual.e12345 * wedge.e41), (right_anti_dual.e425 * wedge.e1234) + (right_anti_dual.e12345 * wedge.e42), (right_anti_dual.e435 * wedge.e1234) + (right_anti_dual.e12345 * wedge.e43), -(right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e321 * wedge.e45) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43)) + float4((right_anti_dual.group0.xyz.zxy * wedge.group3.yzx), right_anti_dual.e12345 * wedge.scalar) - float4((right_anti_dual.group0.xyz.yzx * wedge.group3.zxy), right_anti_dual.e423 * wedge.e15), 
            /* e23, e31, e12, e45 */
            float4((right_anti_dual.e235 * wedge.e1234) + (right_anti_dual.e12345 * wedge.e23), (right_anti_dual.e315 * wedge.e1234) + (right_anti_dual.e12345 * wedge.e31), (right_anti_dual.e125 * wedge.e1234) + (right_anti_dual.e12345 * wedge.e12), -(right_anti_dual.e425 * wedge.e4315) - (right_anti_dual.e435 * wedge.e4125)) + float4((right_anti_dual.group0.xyz * wedge.group3.www), right_anti_dual.e12345 * wedge.e45) - (right_anti_dual.group1.wwwx * wedge.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_anti_dual.e12345) * wedge.group2.xyz) + (float3(wedge.e3215) * right_anti_dual.group1.xyz) + (right_anti_dual.group2.yzx * wedge.group3.zxy) - (right_anti_dual.group2.zxy * wedge.group3.yzx)), right_anti_dual.e12345 * wedge.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_anti_dual.e12345) * wedge.group3
        );
    }
}
public extension AntiCircleRotor {
    public VersorOdd anti_reject_orthogonally_from(AntiDipoleInversion other) {
        VersorEven wedge = VersorEven(
            /* e423, e431, e412, e12345 */
            float4((this.e42 * other.e3) + (this.e23 * other.e4) + (this.scalar * other.e423), (this.e43 * other.e1) + (this.e31 * other.e4) + (this.scalar * other.e431), (this.e41 * other.e2) + (this.e12 * other.e4) + (this.scalar * other.e412), -(this.e42 * other.e315) - (this.e43 * other.e125) - (this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435) - (this.e45 * other.e321) - (this.e15 * other.e423) - (this.e25 * other.e431) - (this.e35 * other.e412)) - float4((this.group0.xyz.zxy * other.group3.yzx), this.e41 * other.e235), 
            /* e415, e425, e435, e321 */
            float4((this.e15 * other.e4) + (this.scalar * other.e415), (this.e25 * other.e4) + (this.scalar * other.e425), (this.e35 * other.e4) + (this.scalar * other.e435), -(this.e31 * other.e2) - (this.e12 * other.e3)) + float4((this.group0.xyz * other.group3.www), this.scalar * other.e321) - (this.group1.wwwx * other.group3.xyzx), 
            /* e235, e315, e125, e5 */
            float4(((float3(this.scalar) * other.group2.xyz) + (float3(other.e5) * this.group1.xyz) + (this.group2.zxy * other.group3.yzx) - (this.group2.yzx * other.group3.zxy)), this.scalar * other.e5), 
            /* e1, e2, e3, e4 */
            float4(this.scalar) * float4(other.group3.xyz, other.e4)
        );
        DipoleInversion right_anti_dual = DipoleInversion(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            (right_anti_dual.group3.yzxy * float4(wedge.group0.zxy, wedge.e2)) + float4(float3(0.0), (right_anti_dual.e4125 * wedge.e3) + (right_anti_dual.e3215 * wedge.e4) - (right_anti_dual.e42 * wedge.e315) - (right_anti_dual.e43 * wedge.e125) - (right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435) - (right_anti_dual.e45 * wedge.e321) - (right_anti_dual.e15 * wedge.e423) - (right_anti_dual.e25 * wedge.e431) - (right_anti_dual.e35 * wedge.e412)) + float4((right_anti_dual.group0.xyz * wedge.group0.www), right_anti_dual.e1234 * wedge.e5) + float4((right_anti_dual.group2.www * wedge.group1.xyz), right_anti_dual.e4235 * wedge.e1) - float4((right_anti_dual.group3.zxy * wedge.group0.yzx), right_anti_dual.e41 * wedge.e235), 
            /* e23, e31, e12, e45 */
            float4((right_anti_dual.e1234 * wedge.e235) + (right_anti_dual.e3215 * wedge.e423), (right_anti_dual.e1234 * wedge.e315) + (right_anti_dual.e3215 * wedge.e431), (right_anti_dual.e1234 * wedge.e125) + (right_anti_dual.e3215 * wedge.e412), -(right_anti_dual.e4315 * wedge.e425) - (right_anti_dual.e4125 * wedge.e435)) + (float4(wedge.e12345) * right_anti_dual.group1) - (right_anti_dual.group3.xyzx * wedge.group1.wwwx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_anti_dual.e3215) * wedge.group1.xyz) + (float3(wedge.e12345) * right_anti_dual.group2.xyz) + (right_anti_dual.group3.zxy * wedge.group2.yzx) - (right_anti_dual.group3.yzx * wedge.group2.zxy)), right_anti_dual.e1234 * wedge.e12345), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_anti_dual.group3
        );
    }
}
public extension AntiCircleRotor {
    public VersorOdd anti_reject_orthogonally_from(AntiDualNum other) {
        VersorOdd wedge = VersorOdd(
            /* e41, e42, e43, scalar */
            float4(other.scalar) * float4(this.group0.xyz, this.scalar), 
            /* e23, e31, e12, e45 */
            float4(other.scalar) * this.group1, 
            /* e15, e25, e35, e1234 */
            float4(other.group0.xy.yy, other.scalar, 0.0) * float4(float3(1.0), 0.0) * float4(this.group2.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(float3(0.0), this.scalar * other.e3215)
        );
        DualNum right_anti_dual = DualNum(
            /* e5, e12345 */
            other.group0.xy
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(right_anti_dual.group0.xy.yy, right_anti_dual.e12345, (right_anti_dual.e5 * wedge.e1234) + (right_anti_dual.e12345 * wedge.scalar)) * float4(wedge.group0.xyz, 1.0), 
            /* e23, e31, e12, e45 */
            float4(right_anti_dual.e12345) * wedge.group1, 
            /* e15, e25, e35, e1234 */
            float4(right_anti_dual.group0.xy.yy, right_anti_dual.e12345, 0.0) * float4(float3(1.0), 0.0) * float4(wedge.group2.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_anti_dual.e12345) * wedge.group3
        );
    }
}
public extension AntiCircleRotor {
    public AntiCircleRotor anti_reject_orthogonally_from(AntiFlatPoint other) {
        CircleRotor wedge = CircleRotor(
            /* e423, e431, e412 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(float3(0.0), this.scalar * other.e321), 
            /* e235, e315, e125, e12345 */
            float4((this.group2.www * other.group0.xyz), -(this.e41 * other.e235) - (this.e42 * other.e315) - (this.e43 * other.e125) - (this.e45 * other.e321))
        );
        FlatPoint right_anti_dual = FlatPoint(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiCircleRotor(
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12, e45 */
            float4(float3(0.0), wedge.e12345 * right_anti_dual.e45), 
            /* e15, e25, e35, scalar */
            float4((wedge.group2.www * right_anti_dual.group0.xyz), -(wedge.e423 * right_anti_dual.e15) - (wedge.e431 * right_anti_dual.e25) - (wedge.e412 * right_anti_dual.e35) - (wedge.e321 * right_anti_dual.e45))
        );
    }
}
public extension AntiCircleRotor {
    public VersorOdd anti_reject_orthogonally_from(AntiFlector other) {
        VersorEven wedge = VersorEven(
            /* e423, e431, e412, e12345 */
            float4(this.e42 * other.e3, this.e43 * other.e1, this.e41 * other.e2, -(this.e42 * other.e315) - (this.e43 * other.e125) - (this.e45 * other.e321)) - float4((this.group0.xyz.zxy * other.group1.yzx), this.e41 * other.e235), 
            /* e415, e425, e435, e321 */
            float4(float3(0.0), -(this.e31 * other.e2) - (this.e12 * other.e3)) + float4((this.group0.xyz * other.group1.www), this.scalar * other.e321) - (this.group1.wwwx * other.group1.xyzx), 
            /* e235, e315, e125, e5 */
            float4(((float3(this.scalar) * other.group0.xyz) + (float3(other.e5) * this.group1.xyz) + (this.group2.zxy * other.group1.yzx) - (this.group2.yzx * other.group1.zxy)), this.scalar * other.e5), 
            /* e1, e2, e3, e4 */
            float4(float3(1.0), 0.0) * float4(this.group2.www, 0.0) * float4(other.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        Flector right_anti_dual = Flector(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            (right_anti_dual.group1.yzxx * float4(wedge.group0.zxy, wedge.e1)) + float4(float3(0.0), (right_anti_dual.e4315 * wedge.e2) + (right_anti_dual.e4125 * wedge.e3) + (right_anti_dual.e3215 * wedge.e4) - (right_anti_dual.e25 * wedge.e431) - (right_anti_dual.e35 * wedge.e412) - (right_anti_dual.e45 * wedge.e321)) - (wedge.group0.yzxx * float4(right_anti_dual.group1.zxy, right_anti_dual.e15)), 
            /* e23, e31, e12, e45 */
            (wedge.group0 * float4(right_anti_dual.group1.www, right_anti_dual.e45)) + float4(float3(0.0), -(right_anti_dual.e4315 * wedge.e425) - (right_anti_dual.e4125 * wedge.e435)) - (right_anti_dual.group1.xyzx * wedge.group1.wwwx), 
            /* e15, e25, e35, e1234 */
            float4((float3(right_anti_dual.e3215) * wedge.group1.xyz), 0.0) + float4((float3(wedge.e12345) * right_anti_dual.group0.xyz), 0.0) + float4((right_anti_dual.group1.zxy * wedge.group2.yzx), 0.0) - float4((right_anti_dual.group1.yzx * wedge.group2.zxy), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_anti_dual.group1
        );
    }
}
public extension AntiCircleRotor {
    public AntiCircleRotor anti_reject_orthogonally_from(AntiLine other) {
        DipoleInversion wedge = DipoleInversion(
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12, e45 */
            float4(float3(1.0), 0.0) * float4(other.group0.xyz, 0.0) * float4(this.group2.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e15, e25, e35, e1234 */
            float4((float3(this.scalar) * other.group1.xyz), -(this.e41 * other.e23) - (this.e42 * other.e31) - (this.e43 * other.e12)), 
            /* e4235, e4315, e4125, e3215 */
            float4((this.e42 * other.e35) + (this.e45 * other.e23), (this.e43 * other.e15) + (this.e45 * other.e31), (this.e41 * other.e25) + (this.e45 * other.e12), -(this.e23 * other.e15) - (this.e31 * other.e25) - (this.e12 * other.e35) - (this.e25 * other.e31) - (this.e35 * other.e12)) - float4((this.group0.xyz.zxy * other.group1.xyz.yzx), this.e15 * other.e23)
        );
        Line right_anti_dual = Line(
            /* e415, e425, e435 */
            other.group0.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group1.xyz * float3(-1.0)
        );
        return AntiCircleRotor(
            /* e41, e42, e43 */
            float3(wedge.e1234) * right_anti_dual.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4((float3(wedge.e1234) * right_anti_dual.group1.xyz), -(wedge.e4235 * right_anti_dual.e415) - (wedge.e4315 * right_anti_dual.e425) - (wedge.e4125 * right_anti_dual.e435)), 
            /* e15, e25, e35, scalar */
            float4((wedge.e4125 * right_anti_dual.e315) + (wedge.e3215 * right_anti_dual.e415), (wedge.e4235 * right_anti_dual.e125) + (wedge.e3215 * right_anti_dual.e425), (wedge.e4315 * right_anti_dual.e235) + (wedge.e3215 * right_anti_dual.e435), -(wedge.e42 * right_anti_dual.e315) - (wedge.e43 * right_anti_dual.e125) - (wedge.e23 * right_anti_dual.e415) - (wedge.e31 * right_anti_dual.e425) - (wedge.e12 * right_anti_dual.e435)) - float4((right_anti_dual.group1.xyz.zxy * wedge.group3.yzx), wedge.e41 * right_anti_dual.e235)
        );
    }
}
public extension AntiCircleRotor {
    public VersorOdd anti_reject_orthogonally_from(AntiMotor other) {
        VersorOdd wedge = VersorOdd(
            /* e41, e42, e43, scalar */
            float4(other.scalar) * float4(this.group0.xyz, this.scalar), 
            /* e23, e31, e12, e45 */
            float4(((float3(this.scalar) * other.group0.xyz) + (float3(other.scalar) * this.group1.xyz)), this.e45 * other.scalar), 
            /* e15, e25, e35, e1234 */
            float4((this.e15 * other.scalar) + (this.scalar * other.e15), (this.e25 * other.scalar) + (this.scalar * other.e25), (this.e35 * other.scalar) + (this.scalar * other.e35), -(this.e41 * other.e23) - (this.e42 * other.e31) - (this.e43 * other.e12)), 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e45 * other.e23, this.e45 * other.e31, this.e45 * other.e12, -(this.e31 * other.e25) - (this.e12 * other.e35) - (this.e15 * other.e23) - (this.e25 * other.e31) - (this.e35 * other.e12)) + (other.group1.zxyw * float4(this.group0.xyz.yzx, this.scalar)) - (other.group1.yzxx * float4(this.group0.xyz.zxy, this.e23))
        );
        Motor right_anti_dual = Motor(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            (right_anti_dual.group0 * float4(wedge.group2.www, wedge.scalar)) + float4(float3(0.0), -(right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43)) + float4((right_anti_dual.group0.www * wedge.group0.xyz), right_anti_dual.e5 * wedge.e1234), 
            /* e23, e31, e12, e45 */
            float4(right_anti_dual.e235 * wedge.e1234, right_anti_dual.e315 * wedge.e1234, right_anti_dual.e125 * wedge.e1234, -(right_anti_dual.e415 * wedge.e4235) - (right_anti_dual.e425 * wedge.e4315) - (right_anti_dual.e435 * wedge.e4125)) + (float4(right_anti_dual.e12345) * wedge.group1), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_anti_dual.e12345) * wedge.group2.xyz) + (float3(wedge.e3215) * right_anti_dual.group0.xyz) + (right_anti_dual.group1.yzx * wedge.group3.zxy) - (right_anti_dual.group1.zxy * wedge.group3.yzx)), right_anti_dual.e12345 * wedge.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_anti_dual.e12345) * wedge.group3
        );
    }
}
public extension AntiCircleRotor {
    public AntiCircleRotor anti_reject_orthogonally_from(AntiPlane other) {
        AntiDipoleInversion wedge = AntiDipoleInversion(
            /* e423, e431, e412 */
            (this.group0.xyz.yzx * other.group0.zxy) - (this.group0.xyz.zxy * other.group0.yzx), 
            /* e415, e425, e435, e321 */
            float4(this.e41 * other.e5, this.e42 * other.e5, this.e43 * other.e5, -(this.e31 * other.e2) - (this.e12 * other.e3)) - (this.group1.wwwx * other.group0.xyzx), 
            /* e235, e315, e125, e4 */
            float4((float3(other.e5) * this.group1.xyz), 0.0) + float4((this.group2.zxy * other.group0.yzx), 0.0) - float4((this.group2.yzx * other.group0.zxy), 0.0), 
            /* e1, e2, e3, e5 */
            float4(this.scalar) * other.group0
        );
        Plane right_anti_dual = Plane(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiCircleRotor(
            /* e41, e42, e43 */
            (wedge.group0.xyz.zxy * right_anti_dual.group0.yzx) - (wedge.group0.xyz.yzx * right_anti_dual.group0.zxy), 
            /* e23, e31, e12, e45 */
            float4(wedge.e423 * right_anti_dual.e3215, wedge.e431 * right_anti_dual.e3215, wedge.e412 * right_anti_dual.e3215, -(wedge.e425 * right_anti_dual.e4315) - (wedge.e435 * right_anti_dual.e4125)) - (wedge.group1.wwwx * right_anti_dual.group0.xyzx), 
            /* e15, e25, e35, scalar */
            float4(wedge.e125 * right_anti_dual.e4315 * -1.0, wedge.e235 * right_anti_dual.e4125 * -1.0, wedge.e315 * right_anti_dual.e4235 * -1.0, (wedge.e2 * right_anti_dual.e4315) + (wedge.e3 * right_anti_dual.e4125)) + (float4(right_anti_dual.e3215) * float4(wedge.group1.xyz, wedge.e4)) + (right_anti_dual.group0.zxyx * float4(wedge.group2.yzx, wedge.e1))
        );
    }
}
public extension AntiCircleRotor {
    public Scalar anti_reject_orthogonally_from(AntiScalar other) {
        return Scalar(
            /* scalar */
            this.scalar * pow(other.e12345, 2) * -1.0
        );
    }
}
public extension AntiCircleRotor {
    public AntiCircleRotor anti_reject_orthogonally_from(Circle other) {
        CircleRotor wedge = CircleRotor(
            /* e423, e431, e412 */
            float3(this.scalar) * other.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(this.scalar) * other.group1, 
            /* e235, e315, e125, e12345 */
            float4((float3(this.scalar) * other.group2.xyz), -(this.e41 * other.e235) - (this.e42 * other.e315) - (this.e43 * other.e125) - (this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435) - (this.e45 * other.e321) - (this.e15 * other.e423) - (this.e25 * other.e431) - (this.e35 * other.e412))
        );
        Dipole right_anti_dual = Dipole(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35 */
            other.group2.xyz
        );
        return AntiCircleRotor(
            /* e41, e42, e43 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(wedge.e12345) * right_anti_dual.group1, 
            /* e15, e25, e35, scalar */
            float4((float3(wedge.e12345) * right_anti_dual.group2.xyz), -(wedge.e423 * right_anti_dual.e15) - (wedge.e431 * right_anti_dual.e25) - (wedge.e412 * right_anti_dual.e35) - (wedge.e415 * right_anti_dual.e23) - (wedge.e425 * right_anti_dual.e31) - (wedge.e435 * right_anti_dual.e12) - (wedge.e321 * right_anti_dual.e45) - (wedge.e235 * right_anti_dual.e41) - (wedge.e315 * right_anti_dual.e42) - (wedge.e125 * right_anti_dual.e43))
        );
    }
}
public extension AntiCircleRotor {
    public AntiCircleRotor anti_reject_orthogonally_from(CircleRotor other) {
        CircleRotor wedge = CircleRotor(
            /* e423, e431, e412 */
            float3(this.scalar) * other.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(this.scalar) * other.group1, 
            /* e235, e315, e125, e12345 */
            float4((this.group2.www * other.group2.xyz), (this.scalar * other.e12345) - (this.e41 * other.e235) - (this.e42 * other.e315) - (this.e43 * other.e125) - (this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435) - (this.e45 * other.e321) - (this.e15 * other.e423) - (this.e25 * other.e431) - (this.e35 * other.e412))
        );
        AntiCircleRotor right_anti_dual = AntiCircleRotor(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiCircleRotor(
            /* e41, e42, e43 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(wedge.e12345) * right_anti_dual.group1, 
            /* e15, e25, e35, scalar */
            float4((float3(wedge.e12345) * right_anti_dual.group2.xyz), (right_anti_dual.scalar * wedge.e12345) - (right_anti_dual.e41 * wedge.e235) - (right_anti_dual.e42 * wedge.e315) - (right_anti_dual.e43 * wedge.e125) - (right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435) - (right_anti_dual.e45 * wedge.e321) - (right_anti_dual.e15 * wedge.e423) - (right_anti_dual.e25 * wedge.e431) - (right_anti_dual.e35 * wedge.e412))
        );
    }
}
public extension AntiCircleRotor {
    public AntiCircleRotor anti_reject_orthogonally_from(Dipole other) {
        DipoleInversion wedge = DipoleInversion(
            /* e41, e42, e43 */
            float3(this.scalar) * other.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(this.scalar) * other.group1, 
            /* e15, e25, e35, e1234 */
            float4((float3(this.scalar) * other.group2.xyz), -(this.e41 * other.e23) - (this.e42 * other.e31) - (this.e43 * other.e12) - (this.e23 * other.e41) - (this.e31 * other.e42) - (this.e12 * other.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((this.e42 * other.e35) + (this.e23 * other.e45) + (this.e45 * other.e23) + (this.e35 * other.e42), (this.e43 * other.e15) + (this.e31 * other.e45) + (this.e45 * other.e31) + (this.e15 * other.e43), (this.e41 * other.e25) + (this.e12 * other.e45) + (this.e45 * other.e12) + (this.e25 * other.e41), -(this.e12 * other.e35) - (this.e15 * other.e23) - (this.e25 * other.e31) - (this.e35 * other.e12)) - float4((this.group0.xyz.zxy * other.group2.xyz.yzx), this.e23 * other.e15) - float4((other.group0.xyz.zxy * this.group2.yzx), this.e31 * other.e25)
        );
        Circle right_anti_dual = Circle(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125 */
            other.group2.xyz * float3(-1.0)
        );
        return AntiCircleRotor(
            /* e41, e42, e43 */
            (float3(wedge.e1234) * right_anti_dual.group1.xyz) + (right_anti_dual.group0.xyz.zxy * wedge.group3.yzx) - (right_anti_dual.group0.xyz.yzx * wedge.group3.zxy), 
            /* e23, e31, e12, e45 */
            float4((right_anti_dual.e423 * wedge.e3215) + (right_anti_dual.e235 * wedge.e1234), (right_anti_dual.e431 * wedge.e3215) + (right_anti_dual.e315 * wedge.e1234), (right_anti_dual.e412 * wedge.e3215) + (right_anti_dual.e125 * wedge.e1234), -(right_anti_dual.e425 * wedge.e4315) - (right_anti_dual.e435 * wedge.e4125)) - (right_anti_dual.group1.wwwx * wedge.group3.xyzx), 
            /* e15, e25, e35, scalar */
            float4((right_anti_dual.e415 * wedge.e3215) + (right_anti_dual.e315 * wedge.e4125), (right_anti_dual.e425 * wedge.e3215) + (right_anti_dual.e125 * wedge.e4235), (right_anti_dual.e435 * wedge.e3215) + (right_anti_dual.e235 * wedge.e4315), -(right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e321 * wedge.e45) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43)) - float4((right_anti_dual.group2.xyz.zxy * wedge.group3.yzx), right_anti_dual.e423 * wedge.e15)
        );
    }
}
public extension AntiCircleRotor {
    public AntiCircleRotor anti_reject_orthogonally_from(DipoleInversion other) {
        DipoleInversion wedge = DipoleInversion(
            /* e41, e42, e43 */
            float3(this.scalar) * other.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(this.scalar) * other.group1, 
            /* e15, e25, e35, e1234 */
            float4((this.group2.www * other.group2.xyz), (this.scalar * other.e1234) - (this.e41 * other.e23) - (this.e42 * other.e31) - (this.e43 * other.e12) - (this.e23 * other.e41) - (this.e31 * other.e42) - (this.e12 * other.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((this.e23 * other.e45) + (this.e45 * other.e23) + (this.e35 * other.e42) + (this.scalar * other.e4235), (this.e31 * other.e45) + (this.e45 * other.e31) + (this.e15 * other.e43) + (this.scalar * other.e4315), (this.e12 * other.e45) + (this.e45 * other.e12) + (this.e25 * other.e41) + (this.scalar * other.e4125), -(this.e12 * other.e35) - (this.e15 * other.e23) - (this.e25 * other.e31) - (this.e35 * other.e12)) + float4((this.group0.xyz.yzx * other.group2.zxy), this.scalar * other.e3215) - (other.group2.yzxx * float4(this.group0.xyz.zxy, this.e23)) - float4((other.group0.xyz.zxy * this.group2.yzx), this.e31 * other.e25)
        );
        AntiDipoleInversion right_anti_dual = AntiDipoleInversion(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiCircleRotor(
            /* e41, e42, e43 */
            (float3(wedge.e1234) * right_anti_dual.group1.xyz) + (right_anti_dual.group0.xyz.zxy * wedge.group3.yzx) - (right_anti_dual.group0.xyz.yzx * wedge.group3.zxy), 
            /* e23, e31, e12, e45 */
            float4((right_anti_dual.e423 * wedge.e3215) + (right_anti_dual.e235 * wedge.e1234), (right_anti_dual.e431 * wedge.e3215) + (right_anti_dual.e315 * wedge.e1234), (right_anti_dual.e412 * wedge.e3215) + (right_anti_dual.e125 * wedge.e1234), -(right_anti_dual.e425 * wedge.e4315) - (right_anti_dual.e435 * wedge.e4125)) - (right_anti_dual.group1.wwwx * wedge.group3.xyzx), 
            /* e15, e25, e35, scalar */
            (float4(wedge.e3215) * float4(right_anti_dual.group1.xyz, right_anti_dual.e4)) + (wedge.group3.zxyx * float4(right_anti_dual.group2.yzx, right_anti_dual.e1)) + float4(float3(0.0), (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) + (right_anti_dual.e5 * wedge.e1234) - (right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e321 * wedge.e45) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43)) - float4((right_anti_dual.group2.zxy * wedge.group3.yzx), right_anti_dual.e423 * wedge.e15)
        );
    }
}
public extension AntiCircleRotor {
    public AntiMotor anti_reject_orthogonally_from(DualNum other) {
        Motor wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4(other.group0.xy.xx, other.e5, other.e12345) * float4(this.group0.xyz, this.scalar), 
            /* e235, e315, e125, e5 */
            float4(other.e5) * float4(this.group1.xyz, this.scalar)
        );
        AntiDualNum right_anti_dual = AntiDualNum(
            /* e3215, scalar */
            other.group0.xy * float2(-1.0)
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4(float3(0.0), right_anti_dual.scalar * wedge.e12345), 
            /* e15, e25, e35, e3215 */
            float4(right_anti_dual.e3215) * wedge.group0
        );
    }
}
public extension AntiCircleRotor {
    public AntiMotor anti_reject_orthogonally_from(FlatPoint other) {
        Flector wedge = Flector(
            /* e15, e25, e35, e45 */
            float4(this.scalar) * other.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4((this.e42 * other.e35) + (this.e23 * other.e45), (this.e43 * other.e15) + (this.e31 * other.e45), (this.e41 * other.e25) + (this.e12 * other.e45), -(this.e31 * other.e25) - (this.e12 * other.e35)) - (other.group0.yzxx * float4(this.group0.xyz.zxy, this.e23))
        );
        AntiFlatPoint right_anti_dual = AntiFlatPoint(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4(right_anti_dual.e321) * float4(wedge.group1.xyz, wedge.e45) * float4(-1.0), 
            /* e15, e25, e35, e3215 */
            float4(((right_anti_dual.group0.yzx * wedge.group1.zxy) - (right_anti_dual.group0.zxy * wedge.group1.yzx)), 0.0)
        );
    }
}
public extension AntiCircleRotor {
    public AntiMotor anti_reject_orthogonally_from(Flector other) {
        Flector wedge = Flector(
            /* e15, e25, e35, e45 */
            float4(this.scalar) * other.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4((this.e23 * other.e45) + (this.scalar * other.e4235), (this.e31 * other.e45) + (this.scalar * other.e4315), (this.e12 * other.e45) + (this.scalar * other.e4125), -(this.e31 * other.e25) - (this.e12 * other.e35)) + float4((this.group0.xyz.yzx * other.group0.zxy), this.scalar * other.e3215) - (other.group0.yzxx * float4(this.group0.xyz.zxy, this.e23))
        );
        AntiFlector right_anti_dual = AntiFlector(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4((right_anti_dual.group0.www * wedge.group1.xyz * float3(-1.0)), (right_anti_dual.e1 * wedge.e4235) + (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) - (right_anti_dual.e321 * wedge.e45)), 
            /* e15, e25, e35, e3215 */
            float4(((right_anti_dual.group0.yzx * wedge.group1.zxy) - (right_anti_dual.group0.zxy * wedge.group1.yzx)), 0.0)
        );
    }
}
public extension AntiCircleRotor {
    public AntiMotor anti_reject_orthogonally_from(Line other) {
        Motor wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4((float3(this.scalar) * other.group0.xyz), -(this.e41 * other.e235) - (this.e42 * other.e315) - (this.e43 * other.e125) - (this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435)), 
            /* e235, e315, e125, e5 */
            float4(float3(1.0), 0.0) * float4(other.group1.xyz, 0.0) * float4(this.group2.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        AntiLine right_anti_dual = AntiLine(
            /* e23, e31, e12 */
            other.group0.xyz, 
            /* e15, e25, e35 */
            other.group1.xyz
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4((float3(wedge.e12345) * right_anti_dual.group0.xyz), -(right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435)), 
            /* e15, e25, e35, e3215 */
            float4(float3(1.0), 0.0) * float4(right_anti_dual.group1.xyz, 0.0) * float4(wedge.group0.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
    }
}
public extension AntiCircleRotor {
    public AntiMotor anti_reject_orthogonally_from(Motor other) {
        Motor wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4(this.scalar * other.e415, this.scalar * other.e425, this.scalar * other.e435, -(this.e41 * other.e235) - (this.e42 * other.e315) - (this.e43 * other.e125) - (this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435)) + float4((this.group0.xyz * other.group1.www), this.scalar * other.e12345), 
            /* e235, e315, e125, e5 */
            float4(((float3(this.scalar) * other.group1.xyz) + (float3(other.e5) * this.group1.xyz)), this.scalar * other.e5)
        );
        AntiMotor right_anti_dual = AntiMotor(
            /* e23, e31, e12, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4((float3(wedge.e12345) * right_anti_dual.group0.xyz), (right_anti_dual.scalar * wedge.e12345) - (right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435)), 
            /* e15, e25, e35, e3215 */
            float4(((float3(right_anti_dual.e3215) * wedge.group0.xyz) + (float3(wedge.e12345) * right_anti_dual.group1.xyz)), right_anti_dual.e3215 * wedge.e12345)
        );
    }
}
public extension AntiCircleRotor {
    public MultiVector anti_reject_orthogonally_from(MultiVector other) {
        MultiVector wedge = MultiVector(
            /* scalar, e12345 */
            float2(this.scalar * other.scalar, (this.scalar * other.e12345) - (this.e41 * other.e235) - (this.e42 * other.e315) - (this.e43 * other.e125) - (this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435) - (this.e45 * other.e321) - (this.e15 * other.e423) - (this.e25 * other.e431) - (this.e35 * other.e412)), 
            /* e1, e2, e3, e4 */
            float4(this.scalar) * other.group1, 
            /* e5 */
            this.scalar * other.e5, 
            /* e15, e25, e35, e45 */
            (float4(this.scalar) * other.group3) + (float4(other.scalar) * float4(this.group2.xyz, this.e45)), 
            /* e41, e42, e43 */
            (float3(this.scalar) * other.group4.xyz) + (float3(other.scalar) * this.group0.xyz), 
            /* e23, e31, e12 */
            (float3(this.scalar) * other.group5.xyz) + (float3(other.scalar) * this.group1.xyz), 
            /* e415, e425, e435, e321 */
            float4((this.e15 * other.e4) + (this.scalar * other.e415), (this.e25 * other.e4) + (this.scalar * other.e425), (this.e35 * other.e4) + (this.scalar * other.e435), -(this.e31 * other.e2) - (this.e12 * other.e3)) + float4((float3(other.e5) * this.group0.xyz), this.scalar * other.e321) - (this.group1.wwwx * other.group1.xyzx), 
            /* e423, e431, e412 */
            (float3(this.scalar) * other.group7.xyz) + (float3(other.e4) * this.group1.xyz) + (this.group0.xyz.yzx * other.group1.zxy) - (this.group0.xyz.zxy * other.group1.yzx), 
            /* e235, e315, e125 */
            (float3(this.scalar) * other.group8.xyz) + (float3(other.e5) * this.group1.xyz) + (this.group2.zxy * other.group1.yzx) - (this.group2.yzx * other.group1.zxy), 
            /* e4235, e4315, e4125, e3215 */
            float4((this.e23 * other.e45) + (this.e45 * other.e23) + (this.e35 * other.e42) + (this.scalar * other.e4235), (this.e31 * other.e45) + (this.e45 * other.e31) + (this.e15 * other.e43) + (this.scalar * other.e4315), (this.e12 * other.e45) + (this.e45 * other.e12) + (this.e25 * other.e41) + (this.scalar * other.e4125), -(this.e23 * other.e15) - (this.e31 * other.e25) - (this.e12 * other.e35) - (this.e35 * other.e12)) + float4((this.group0.xyz.yzx * other.group3.zxy), this.scalar * other.e3215) - (this.group2.yzxy * float4(other.group4.xyz.zxy, other.e31)) - float4((this.group0.xyz.zxy * other.group3.yzx), this.e15 * other.e23), 
            /* e1234 */
            (this.scalar * other.e1234) - (this.e41 * other.e23) - (this.e42 * other.e31) - (this.e43 * other.e12) - (this.e23 * other.e41) - (this.e31 * other.e42) - (this.e12 * other.e43)
        );
        MultiVector right_anti_dual = MultiVector(
            /* scalar, e12345 */
            other.group0.xy.yx * float2(-1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215, 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43 */
            other.group7.xyz, 
            /* e23, e31, e12 */
            other.group6.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412 */
            other.group4.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group3.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2((right_anti_dual.scalar * wedge.e12345) + (right_anti_dual.e12345 * wedge.scalar) + (right_anti_dual.e1 * wedge.e4235) + (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) + (right_anti_dual.e4 * wedge.e3215) + (right_anti_dual.e5 * wedge.e1234) + (right_anti_dual.e4235 * wedge.e1) + (right_anti_dual.e4315 * wedge.e2) + (right_anti_dual.e4125 * wedge.e3) + (right_anti_dual.e3215 * wedge.e4) + (right_anti_dual.e1234 * wedge.e5) - (right_anti_dual.e15 * wedge.e423) - (right_anti_dual.e25 * wedge.e431) - (right_anti_dual.e35 * wedge.e412) - (right_anti_dual.e45 * wedge.e321) - (right_anti_dual.e41 * wedge.e235) - (right_anti_dual.e42 * wedge.e315) - (right_anti_dual.e43 * wedge.e125) - (right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e321 * wedge.e45) - (right_anti_dual.e423 * wedge.e15) - (right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43), right_anti_dual.e12345 * wedge.e12345), 
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e15 * wedge.e1234) + (right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e4125 * wedge.e31), (right_anti_dual.e25 * wedge.e1234) + (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e4235 * wedge.e12), (right_anti_dual.e35 * wedge.e1234) + (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e4315 * wedge.e23), -(right_anti_dual.e415 * wedge.e423) - (right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412) - (right_anti_dual.e1234 * wedge.e45)) + (float4(right_anti_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_anti_dual.group1) + (wedge.group9.yzxx * float4(right_anti_dual.group5.xyz.zxy, right_anti_dual.e41)) + float4((wedge.group4.xyz * right_anti_dual.group9.www), right_anti_dual.e45 * wedge.e1234) + float4((right_anti_dual.group7.xyz.zxy * wedge.group8.xyz.yzx), right_anti_dual.e42 * wedge.e4315) + float4((right_anti_dual.group8.xyz.yzx * wedge.group7.xyz.zxy), right_anti_dual.e43 * wedge.e4125) - (right_anti_dual.group9.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((float3(right_anti_dual.e1234) * wedge.group3.xyz), right_anti_dual.e4125 * wedge.e43) - float4((right_anti_dual.group4.xyz * wedge.group9.www), right_anti_dual.e423 * wedge.e415) - float4((right_anti_dual.group5.xyz.yzx * wedge.group9.zxy), right_anti_dual.e431 * wedge.e425) - float4((right_anti_dual.group7.xyz.yzx * wedge.group8.xyz.zxy), right_anti_dual.e412 * wedge.e435) - float4((right_anti_dual.group8.xyz.zxy * wedge.group7.xyz.yzx), right_anti_dual.e4235 * wedge.e41), 
            /* e5 */
            (right_anti_dual.e12345 * wedge.e5) + (right_anti_dual.e5 * wedge.e12345) + (right_anti_dual.e4235 * wedge.e15) + (right_anti_dual.e4315 * wedge.e25) + (right_anti_dual.e4125 * wedge.e35) + (right_anti_dual.e3215 * wedge.e45) - (right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125) - (right_anti_dual.e45 * wedge.e3215) - (right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435), 
            /* e15, e25, e35, e45 */
            float4((right_anti_dual.e415 * wedge.e3215) + (right_anti_dual.e315 * wedge.e4125) + (right_anti_dual.e4125 * wedge.e315) + (right_anti_dual.e3215 * wedge.e415), (right_anti_dual.e425 * wedge.e3215) + (right_anti_dual.e125 * wedge.e4235) + (right_anti_dual.e4235 * wedge.e125) + (right_anti_dual.e3215 * wedge.e425), (right_anti_dual.e435 * wedge.e3215) + (right_anti_dual.e235 * wedge.e4315) + (right_anti_dual.e4315 * wedge.e235) + (right_anti_dual.e3215 * wedge.e435), -(right_anti_dual.e435 * wedge.e4125) - (right_anti_dual.e4235 * wedge.e415) - (right_anti_dual.e4315 * wedge.e425) - (right_anti_dual.e4125 * wedge.e435)) + (float4(right_anti_dual.e12345) * wedge.group3) + (float4(wedge.e12345) * right_anti_dual.group3) - (wedge.group9.yzxx * float4(right_anti_dual.group8.xyz.zxy, right_anti_dual.e415)) - float4((wedge.group8.xyz.zxy * right_anti_dual.group9.yzx), right_anti_dual.e425 * wedge.e4315), 
            /* e41, e42, e43 */
            (float3(right_anti_dual.e12345) * wedge.group4.xyz) + (float3(right_anti_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_anti_dual.group4.xyz) + (float3(wedge.e1234) * right_anti_dual.group6.xyz) + (right_anti_dual.group7.xyz.zxy * wedge.group9.yzx) + (wedge.group7.xyz.zxy * right_anti_dual.group9.yzx) - (right_anti_dual.group7.xyz.yzx * wedge.group9.zxy) - (wedge.group7.xyz.yzx * right_anti_dual.group9.zxy), 
            /* e23, e31, e12 */
            (float3(right_anti_dual.e12345) * wedge.group5.xyz) + (float3(right_anti_dual.e3215) * wedge.group7.xyz) + (float3(right_anti_dual.e1234) * wedge.group8.xyz) + (float3(wedge.e12345) * right_anti_dual.group5.xyz) + (float3(wedge.e3215) * right_anti_dual.group7.xyz) + (float3(wedge.e1234) * right_anti_dual.group8.xyz) - (float3(right_anti_dual.e321) * wedge.group9.xyz) - (float3(wedge.e321) * right_anti_dual.group9.xyz), 
            /* e415, e425, e435, e321 */
            (float4(right_anti_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_anti_dual.group6) + (right_anti_dual.group9.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - float4((right_anti_dual.group9.zxy * wedge.group9.yzx), right_anti_dual.e1234 * wedge.e3215), 
            /* e423, e431, e412 */
            (float3(right_anti_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_anti_dual.group7.xyz) + (float3(wedge.e1234) * right_anti_dual.group9.xyz) - (float3(right_anti_dual.e1234) * wedge.group9.xyz), 
            /* e235, e315, e125 */
            (float3(right_anti_dual.e12345) * wedge.group8.xyz) + (float3(right_anti_dual.e3215) * wedge.group9.xyz) + (float3(wedge.e12345) * right_anti_dual.group8.xyz) - (float3(wedge.e3215) * right_anti_dual.group9.xyz), 
            /* e4235, e4315, e4125, e3215 */
            (float4(right_anti_dual.e12345) * wedge.group9) + (float4(wedge.e12345) * right_anti_dual.group9), 
            /* e1234 */
            (right_anti_dual.e12345 * wedge.e1234) + (right_anti_dual.e1234 * wedge.e12345)
        );
    }
}
public extension AntiCircleRotor {
    public Scalar anti_reject_orthogonally_from(Plane other) {
        Plane wedge = Plane(
            /* e4235, e4315, e4125, e3215 */
            float4(this.scalar) * other.group0
        );
        AntiPlane right_anti_dual = AntiPlane(
            /* e1, e2, e3, e5 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return Scalar(
            /* scalar */
            (right_anti_dual.e1 * wedge.e4235) + (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125)
        );
    }
}
public extension AntiCircleRotor {
    public AntiCircleRotor anti_reject_orthogonally_from(RoundPoint other) {
        AntiDipoleInversion wedge = AntiDipoleInversion(
            /* e423, e431, e412 */
            (float3(other.e4) * this.group1.xyz) + (this.group0.xyz.yzx * other.group0.zxy) - (this.group0.xyz.zxy * other.group0.yzx), 
            /* e415, e425, e435, e321 */
            float4((this.e41 * other.e5) + (this.e15 * other.e4), (this.e42 * other.e5) + (this.e25 * other.e4), (this.e43 * other.e5) + (this.e35 * other.e4), -(this.e31 * other.e2) - (this.e12 * other.e3)) - (this.group1.wwwx * other.group0.xyzx), 
            /* e235, e315, e125, e4 */
            float4(((float3(other.e5) * this.group1.xyz) + (this.group2.zxy * other.group0.yzx) - (this.group2.yzx * other.group0.zxy)), this.scalar * other.e4), 
            /* e1, e2, e3, e5 */
            float4(this.scalar) * float4(other.group0.xyz, other.e5)
        );
        Sphere right_anti_dual = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        return AntiCircleRotor(
            /* e41, e42, e43 */
            (float3(right_anti_dual.e1234) * wedge.group1.xyz) + (wedge.group0.xyz.zxy * right_anti_dual.group0.yzx) - (wedge.group0.xyz.yzx * right_anti_dual.group0.zxy), 
            /* e23, e31, e12, e45 */
            float4((wedge.e423 * right_anti_dual.e3215) + (wedge.e235 * right_anti_dual.e1234), (wedge.e431 * right_anti_dual.e3215) + (wedge.e315 * right_anti_dual.e1234), (wedge.e412 * right_anti_dual.e3215) + (wedge.e125 * right_anti_dual.e1234), -(wedge.e425 * right_anti_dual.e4315) - (wedge.e435 * right_anti_dual.e4125)) - (wedge.group1.wwwx * right_anti_dual.group0.xyzx), 
            /* e15, e25, e35, scalar */
            float4(wedge.e125 * right_anti_dual.e4315 * -1.0, wedge.e235 * right_anti_dual.e4125 * -1.0, wedge.e315 * right_anti_dual.e4235 * -1.0, (wedge.e2 * right_anti_dual.e4315) + (wedge.e3 * right_anti_dual.e4125) + (wedge.e5 * right_anti_dual.e1234)) + (float4(right_anti_dual.e3215) * float4(wedge.group1.xyz, wedge.e4)) + (right_anti_dual.group0.zxyx * float4(wedge.group2.yzx, wedge.e1))
        );
    }
}
public extension AntiCircleRotor {
    public AntiCircleRotor anti_reject_orthogonally_from(Scalar other) {
        AntiCircleRotor wedge = AntiCircleRotor(
            /* e41, e42, e43 */
            float3(other.scalar) * this.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(other.scalar) * this.group1, 
            /* e15, e25, e35, scalar */
            float4(other.scalar) * this.group2
        );
        AntiScalar right_anti_dual = AntiScalar(
            /* e12345 */
            other.scalar
        );
        return AntiCircleRotor(
            /* e41, e42, e43 */
            float3(right_anti_dual.e12345) * wedge.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(right_anti_dual.e12345) * wedge.group1, 
            /* e15, e25, e35, scalar */
            float4(right_anti_dual.e12345) * wedge.group2
        );
    }
}
public extension AntiCircleRotor {
    public Scalar anti_reject_orthogonally_from(Sphere other) {
        Sphere wedge = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(this.scalar) * other.group0, 
            /* e1234 */
            this.scalar * other.e1234
        );
        RoundPoint right_anti_dual = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(other.group0.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215
        );
        return Scalar(
            /* scalar */
            (right_anti_dual.e1 * wedge.e4235) + (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) + (right_anti_dual.e4 * wedge.e3215) + (right_anti_dual.e5 * wedge.e1234)
        );
    }
}
public extension AntiCircleRotor {
    public VersorOdd anti_reject_orthogonally_from(VersorEven other) {
        VersorEven wedge = VersorEven(
            /* e423, e431, e412, e12345 */
            float4((this.e23 * other.e4) + (this.scalar * other.e423), (this.e31 * other.e4) + (this.scalar * other.e431), (this.e12 * other.e4) + (this.scalar * other.e412), -(this.e42 * other.e315) - (this.e43 * other.e125) - (this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435) - (this.e45 * other.e321) - (this.e15 * other.e423) - (this.e25 * other.e431) - (this.e35 * other.e412)) + float4((this.group0.xyz.yzx * other.group3.zxy), this.scalar * other.e12345) - float4((this.group0.xyz.zxy * other.group3.yzx), this.e41 * other.e235), 
            /* e415, e425, e435, e321 */
            float4((this.e15 * other.e4) + (this.scalar * other.e415), (this.e25 * other.e4) + (this.scalar * other.e425), (this.e35 * other.e4) + (this.scalar * other.e435), -(this.e31 * other.e2) - (this.e12 * other.e3)) + float4((this.group0.xyz * other.group2.www), this.scalar * other.e321) - (this.group1.wwwx * other.group3.xyzx), 
            /* e235, e315, e125, e5 */
            float4(((float3(this.scalar) * other.group2.xyz) + (float3(other.e5) * this.group1.xyz) + (this.group2.zxy * other.group3.yzx) - (this.group2.yzx * other.group3.zxy)), this.scalar * other.e5), 
            /* e1, e2, e3, e4 */
            float4(this.scalar) * other.group3
        );
        VersorOdd right_anti_dual = VersorOdd(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            (wedge.group0.zxyw * float4(right_anti_dual.group3.yzx, right_anti_dual.scalar)) + float4(float3(0.0), (wedge.e2 * right_anti_dual.e4315) + (wedge.e3 * right_anti_dual.e4125) + (wedge.e4 * right_anti_dual.e3215) - (wedge.e431 * right_anti_dual.e25) - (wedge.e412 * right_anti_dual.e35) - (wedge.e415 * right_anti_dual.e23) - (wedge.e425 * right_anti_dual.e31) - (wedge.e435 * right_anti_dual.e12) - (wedge.e321 * right_anti_dual.e45) - (wedge.e235 * right_anti_dual.e41) - (wedge.e315 * right_anti_dual.e42) - (wedge.e125 * right_anti_dual.e43)) + float4((wedge.group0.www * right_anti_dual.group0.xyz), wedge.e5 * right_anti_dual.e1234) + float4((right_anti_dual.group2.www * wedge.group1.xyz), wedge.e1 * right_anti_dual.e4235) - (wedge.group0.yzxx * float4(right_anti_dual.group3.zxy, right_anti_dual.e15)), 
            /* e23, e31, e12, e45 */
            float4((wedge.e12345 * right_anti_dual.e23) + (wedge.e235 * right_anti_dual.e1234), (wedge.e12345 * right_anti_dual.e31) + (wedge.e315 * right_anti_dual.e1234), (wedge.e12345 * right_anti_dual.e12) + (wedge.e125 * right_anti_dual.e1234), -(wedge.e425 * right_anti_dual.e4315) - (wedge.e435 * right_anti_dual.e4125)) + (wedge.group0 * float4(right_anti_dual.group3.www, right_anti_dual.e45)) - (wedge.group1.wwwx * right_anti_dual.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(wedge.e12345) * right_anti_dual.group2.xyz) + (float3(right_anti_dual.e3215) * wedge.group1.xyz) + (wedge.group2.yzx * right_anti_dual.group3.zxy) - (wedge.group2.zxy * right_anti_dual.group3.yzx)), wedge.e12345 * right_anti_dual.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_anti_dual.group3
        );
    }
}
public extension AntiCircleRotor {
    public VersorOdd anti_reject_orthogonally_from(VersorOdd other) {
        VersorOdd wedge = VersorOdd(
            /* e41, e42, e43, scalar */
            float4(((float3(this.scalar) * other.group0.xyz) + (float3(other.scalar) * this.group0.xyz)), this.scalar * other.scalar), 
            /* e23, e31, e12, e45 */
            (float4(this.scalar) * other.group1) + (float4(other.scalar) * this.group1), 
            /* e15, e25, e35, e1234 */
            float4(this.scalar * other.e15, this.scalar * other.e25, this.scalar * other.e35, -(this.e41 * other.e23) - (this.e42 * other.e31) - (this.e43 * other.e12) - (this.e23 * other.e41) - (this.e31 * other.e42) - (this.e12 * other.e43)) + (this.group2 * float4(other.group0.www, other.e1234)), 
            /* e4235, e4315, e4125, e3215 */
            float4((this.e23 * other.e45) + (this.e45 * other.e23) + (this.e35 * other.e42) + (this.scalar * other.e4235), (this.e31 * other.e45) + (this.e45 * other.e31) + (this.e15 * other.e43) + (this.scalar * other.e4315), (this.e12 * other.e45) + (this.e45 * other.e12) + (this.e25 * other.e41) + (this.scalar * other.e4125), -(this.e12 * other.e35) - (this.e15 * other.e23) - (this.e25 * other.e31) - (this.e35 * other.e12)) + float4((this.group0.xyz.yzx * other.group2.zxy), this.scalar * other.e3215) - (other.group2.yzxx * float4(this.group0.xyz.zxy, this.e23)) - float4((this.group2.yzx * other.group0.zxy), this.e31 * other.e25)
        );
        VersorEven right_anti_dual = VersorEven(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            (right_anti_dual.group0.zxyw * float4(wedge.group3.yzx, wedge.scalar)) + float4(float3(0.0), (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) + (right_anti_dual.e4 * wedge.e3215) - (right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e321 * wedge.e45) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43)) + float4((right_anti_dual.group0.www * wedge.group0.xyz), right_anti_dual.e5 * wedge.e1234) + float4((wedge.group2.www * right_anti_dual.group1.xyz), right_anti_dual.e1 * wedge.e4235) - (right_anti_dual.group0.yzxx * float4(wedge.group3.zxy, wedge.e15)), 
            /* e23, e31, e12, e45 */
            float4((right_anti_dual.e12345 * wedge.e23) + (right_anti_dual.e235 * wedge.e1234), (right_anti_dual.e12345 * wedge.e31) + (right_anti_dual.e315 * wedge.e1234), (right_anti_dual.e12345 * wedge.e12) + (right_anti_dual.e125 * wedge.e1234), -(right_anti_dual.e425 * wedge.e4315) - (right_anti_dual.e435 * wedge.e4125)) + (right_anti_dual.group0 * float4(wedge.group3.www, wedge.e45)) - (right_anti_dual.group1.wwwx * wedge.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_anti_dual.e12345) * wedge.group2.xyz) + (float3(wedge.e3215) * right_anti_dual.group1.xyz) + (right_anti_dual.group2.yzx * wedge.group3.zxy) - (right_anti_dual.group2.zxy * wedge.group3.yzx)), right_anti_dual.e12345 * wedge.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_anti_dual.e12345) * wedge.group3
        );
    }
}
public extension AntiDipoleInversion {
    // Fancy infix trick (first half)
    public AntiRejectOrthogonallyFromInfixPartial<AntiDipoleInversion> operator /(AntiRejectOrthogonallyFromInfix rhs) {
        return AntiRejectOrthogonallyFromInfixPartial<AntiDipoleInversion>(this);
    }
}
public extension AntiRejectOrthogonallyFromInfixPartial<AntiDipoleInversion> {
    // Fancy infix trick (second half)
    public VersorEven operator /(AntiCircleRotor rhs) {
        return this.a.anti_reject_orthogonally_from(rhs);
    }
}
public extension AntiDipoleInversion {
    public VersorEven anti_reject_orthogonally_from(AntiCircleRotor other) {
        VersorEven wedge = VersorEven(
            /* e423, e431, e412, e12345 */
            float4((other.e42 * this.e3) + (other.e23 * this.e4) + (other.scalar * this.e423), (other.e43 * this.e1) + (other.e31 * this.e4) + (other.scalar * this.e431), (other.e41 * this.e2) + (other.e12 * this.e4) + (other.scalar * this.e412), -(other.e42 * this.e315) - (other.e43 * this.e125) - (other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435) - (other.e45 * this.e321) - (other.e15 * this.e423) - (other.e25 * this.e431) - (other.e35 * this.e412)) - float4((other.group0.xyz.zxy * this.group3.yzx), other.e41 * this.e235), 
            /* e415, e425, e435, e321 */
            float4((other.e15 * this.e4) + (other.scalar * this.e415), (other.e25 * this.e4) + (other.scalar * this.e425), (other.e35 * this.e4) + (other.scalar * this.e435), -(other.e31 * this.e2) - (other.e12 * this.e3)) + float4((other.group0.xyz * this.group3.www), other.scalar * this.e321) - (other.group1.wwwx * this.group3.xyzx), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.scalar) * this.group2.xyz) + (float3(this.e5) * other.group1.xyz) + (other.group2.zxy * this.group3.yzx) - (other.group2.yzx * this.group3.zxy)), other.scalar * this.e5), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * float4(this.group3.xyz, this.e4)
        );
        CircleRotor right_anti_dual = CircleRotor(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(((float3(right_anti_dual.e12345) * wedge.group0.xyz) + (float3(wedge.e12345) * right_anti_dual.group0.xyz)), right_anti_dual.e12345 * wedge.e12345), 
            /* e415, e425, e435, e321 */
            (float4(right_anti_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_anti_dual.group1), 
            /* e235, e315, e125, e5 */
            float4(right_anti_dual.e12345 * wedge.e235, right_anti_dual.e12345 * wedge.e315, right_anti_dual.e12345 * wedge.e125, -(right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435)) + (right_anti_dual.group2 * float4(wedge.group0.www, wedge.e5)), 
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e315 * wedge.e412) + (right_anti_dual.e12345 * wedge.e1), (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e125 * wedge.e423) + (right_anti_dual.e12345 * wedge.e2), (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e235 * wedge.e431) + (right_anti_dual.e12345 * wedge.e3), -(right_anti_dual.e412 * wedge.e435) - (right_anti_dual.e415 * wedge.e423) - (right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412)) + float4((right_anti_dual.group0.xyz.zxy * wedge.group2.yzx), right_anti_dual.e12345 * wedge.e4) - float4((right_anti_dual.group0.xyz.yzx * wedge.group2.zxy), right_anti_dual.e423 * wedge.e415) - float4((right_anti_dual.group2.zxy * wedge.group0.yzx), right_anti_dual.e431 * wedge.e425)
        );
    }
}
public extension AntiDipoleInversion {
    public AntiDipoleInversion anti_reject_orthogonally_from(AntiDipoleInversion other) {
        DipoleInversion wedge = DipoleInversion(
            /* e41, e42, e43 */
            (float3(this.e4) * other.group3.xyz) - (float3(other.e4) * this.group3.xyz), 
            /* e23, e31, e12, e45 */
            (other.group3.zxyw * float4(this.group3.yzx, this.e4)) - (this.group3.zxyw * float4(other.group3.yzx, other.e4)), 
            /* e15, e25, e35, e1234 */
            (this.group3.xyzx * float4(other.group3.www, other.e423)) + float4(float3(0.0), (other.e431 * this.e2) + (other.e412 * this.e3) + (other.e321 * this.e4) - (other.e4 * this.e321) - (other.e2 * this.e431) - (other.e3 * this.e412)) - float4((this.group3.www * other.group3.xyz), other.e1 * this.e423), 
            /* e4235, e4315, e4125, e3215 */
            (other.group3.yzxw * this.group1.zxyw) + (this.group2.wwwz * float4(other.group2.xyz, other.e3)) + float4((this.group0.xyz * other.group3.www), other.e1 * this.e235) + float4((other.group1.yzx * this.group3.zxy), other.e2 * this.e315) - (float4(this.e5) * float4(other.group0.xyz, other.e321)) - (other.group2.wwwy * float4(this.group2.xyz, this.e2)) - (this.group3.yzxx * float4(other.group1.zxy, other.e235)) - float4((other.group3.zxy * this.group1.yzx), other.e125 * this.e3)
        );
        DipoleInversion right_anti_dual = DipoleInversion(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            (float3(wedge.e1234) * right_anti_dual.group3.xyz) - (float3(right_anti_dual.e1234) * wedge.group3.xyz), 
            /* e415, e425, e435, e321 */
            (right_anti_dual.group3.yzxw * float4(wedge.group3.zxy, wedge.e1234)) - (wedge.group3.yzxw * float4(right_anti_dual.group3.zxy, right_anti_dual.e1234)), 
            /* e235, e315, e125, e4 */
            (wedge.group3.xyzx * float4(right_anti_dual.group3.www, right_anti_dual.e41)) + float4(float3(0.0), (right_anti_dual.e42 * wedge.e4315) + (right_anti_dual.e43 * wedge.e4125) + (right_anti_dual.e45 * wedge.e1234) - (right_anti_dual.e1234 * wedge.e45) - (right_anti_dual.e4315 * wedge.e42) - (right_anti_dual.e4125 * wedge.e43)) - float4((wedge.group3.www * right_anti_dual.group3.xyz), right_anti_dual.e4235 * wedge.e41), 
            /* e1, e2, e3, e5 */
            (right_anti_dual.group3.zxyw * wedge.group1.yzxw) + (wedge.group2.wwwz * float4(right_anti_dual.group2.xyz, right_anti_dual.e4125)) + float4((wedge.group0.xyz * right_anti_dual.group3.www), right_anti_dual.e4235 * wedge.e15) + float4((right_anti_dual.group1.zxy * wedge.group3.yzx), right_anti_dual.e4315 * wedge.e25) - (float4(wedge.e3215) * float4(right_anti_dual.group0.xyz, right_anti_dual.e45)) - (right_anti_dual.group2.wwwy * float4(wedge.group2.xyz, wedge.e4315)) - (wedge.group3.zxyx * float4(right_anti_dual.group1.yzx, right_anti_dual.e15)) - float4((right_anti_dual.group3.yzx * wedge.group1.zxy), right_anti_dual.e35 * wedge.e4125)
        );
    }
}
public extension AntiDipoleInversion {
    public VersorEven anti_reject_orthogonally_from(AntiDualNum other) {
        VersorEven wedge = VersorEven(
            /* e423, e431, e412, e12345 */
            float4(other.group0.xy.yy, other.scalar, other.e3215) * float4(this.group0.xyz, this.e4), 
            /* e415, e425, e435, e321 */
            float4(other.scalar) * this.group1, 
            /* e235, e315, e125, e5 */
            float4(other.scalar) * float4(this.group2.xyz, this.e5), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * float4(this.group3.xyz, this.e4)
        );
        DualNum right_anti_dual = DualNum(
            /* e5, e12345 */
            other.group0.xy
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(right_anti_dual.e12345) * wedge.group0, 
            /* e415, e425, e435, e321 */
            float4(right_anti_dual.e12345) * wedge.group1, 
            /* e235, e315, e125, e5 */
            float4(right_anti_dual.group0.xy.yy, right_anti_dual.e12345, (right_anti_dual.e5 * wedge.e12345) + (right_anti_dual.e12345 * wedge.e5)) * float4(wedge.group2.xyz, 1.0), 
            /* e1, e2, e3, e4 */
            float4(right_anti_dual.e12345) * wedge.group3
        );
    }
}
public extension AntiDipoleInversion {
    public RoundPoint anti_reject_orthogonally_from(AntiFlatPoint other) {
        Sphere wedge = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4((this.group2.www * other.group0.xyz), -(this.e1 * other.e235) - (this.e2 * other.e315) - (this.e3 * other.e125) - (this.e5 * other.e321)), 
            /* e1234 */
            this.e4 * other.e321
        );
        FlatPoint right_anti_dual = FlatPoint(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return RoundPoint(
            /* e1, e2, e3, e4 */
            float4(wedge.e1234) * right_anti_dual.group0, 
            /* e5 */
            -(right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125) - (right_anti_dual.e45 * wedge.e3215)
        );
    }
}
public extension AntiDipoleInversion {
    public AntiDipoleInversion anti_reject_orthogonally_from(AntiFlector other) {
        DipoleInversion wedge = DipoleInversion(
            /* e41, e42, e43 */
            float3(this.e4) * other.group1.xyz, 
            /* e23, e31, e12, e45 */
            float4(((this.group3.yzx * other.group1.zxy) - (this.group3.zxy * other.group1.yzx)), this.e4 * other.e5), 
            /* e15, e25, e35, e1234 */
            float4(float3(0.0), -(this.e431 * other.e2) - (this.e412 * other.e3)) + float4((other.group1.www * this.group3.xyz), this.e4 * other.e321) - (other.group1.xyzx * float4(this.group3.www, this.e423)), 
            /* e4235, e4315, e4125, e3215 */
            (float4(other.e5) * float4(this.group0.xyz, this.e321)) + (this.group2.wwwy * float4(other.group0.xyz, other.e2)) + (other.group1.yzxx * float4(this.group1.zxy, this.e235)) + float4(float3(0.0), (this.e125 * other.e3) - (this.e2 * other.e315) - (this.e3 * other.e125) - (this.e5 * other.e321)) - float4((this.group1.yzx * other.group1.zxy), this.e1 * other.e235)
        );
        Flector right_anti_dual = Flector(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(wedge.e1234) * right_anti_dual.group1.xyz, 
            /* e415, e425, e435, e321 */
            float4(((wedge.group3.zxy * right_anti_dual.group1.yzx) - (wedge.group3.yzx * right_anti_dual.group1.zxy)), wedge.e1234 * right_anti_dual.e3215), 
            /* e235, e315, e125, e4 */
            float4(float3(0.0), -(wedge.e42 * right_anti_dual.e4315) - (wedge.e43 * right_anti_dual.e4125)) + float4((right_anti_dual.group1.www * wedge.group3.xyz), wedge.e1234 * right_anti_dual.e45) - (right_anti_dual.group1.xyzx * float4(wedge.group3.www, wedge.e41)), 
            /* e1, e2, e3, e5 */
            (float4(right_anti_dual.e3215) * float4(wedge.group0.xyz, wedge.e45)) + (wedge.group2.wwwy * float4(right_anti_dual.group0.xyz, right_anti_dual.e4315)) + (right_anti_dual.group1.zxyx * float4(wedge.group1.yzx, wedge.e15)) + float4(float3(0.0), (wedge.e35 * right_anti_dual.e4125) - (wedge.e4315 * right_anti_dual.e25) - (wedge.e4125 * right_anti_dual.e35) - (wedge.e3215 * right_anti_dual.e45)) - float4((wedge.group1.zxy * right_anti_dual.group1.yzx), wedge.e4235 * right_anti_dual.e15)
        );
    }
}
public extension AntiDipoleInversion {
    public AntiDipoleInversion anti_reject_orthogonally_from(AntiLine other) {
        CircleRotor wedge = CircleRotor(
            /* e423, e431, e412 */
            float3(this.e4) * other.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4((float3(this.e4) * other.group1.xyz), -(this.e1 * other.e23) - (this.e2 * other.e31) - (this.e3 * other.e12)), 
            /* e235, e315, e125, e12345 */
            float4((this.e2 * other.e35) + (this.e5 * other.e23), (this.e3 * other.e15) + (this.e5 * other.e31), (this.e1 * other.e25) + (this.e5 * other.e12), -(this.e431 * other.e25) - (this.e412 * other.e35) - (this.e415 * other.e23) - (this.e425 * other.e31) - (this.e435 * other.e12)) - float4((other.group1.xyz.yzx * this.group3.zxy), this.e423 * other.e15)
        );
        Line right_anti_dual = Line(
            /* e415, e425, e435 */
            other.group0.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group1.xyz * float3(-1.0)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(float3(1.0), 0.0) * float4(right_anti_dual.group0.xyz, 0.0) * float4(wedge.group2.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e235, e315, e125, e4 */
            float4((float3(wedge.e12345) * right_anti_dual.group1.xyz), -(wedge.e423 * right_anti_dual.e415) - (wedge.e431 * right_anti_dual.e425) - (wedge.e412 * right_anti_dual.e435)), 
            /* e1, e2, e3, e5 */
            float4((wedge.e412 * right_anti_dual.e315) + (wedge.e321 * right_anti_dual.e415), (wedge.e423 * right_anti_dual.e125) + (wedge.e321 * right_anti_dual.e425), (wedge.e431 * right_anti_dual.e235) + (wedge.e321 * right_anti_dual.e435), -(wedge.e415 * right_anti_dual.e235) - (wedge.e425 * right_anti_dual.e315) - (wedge.e435 * right_anti_dual.e125) - (wedge.e315 * right_anti_dual.e425) - (wedge.e125 * right_anti_dual.e435)) - float4((wedge.group0.xyz.yzx * right_anti_dual.group1.xyz.zxy), wedge.e235 * right_anti_dual.e415)
        );
    }
}
public extension AntiDipoleInversion {
    public VersorEven anti_reject_orthogonally_from(AntiMotor other) {
        VersorEven wedge = VersorEven(
            /* e423, e431, e412, e12345 */
            float4(this.e4 * other.e23, this.e4 * other.e31, this.e4 * other.e12, -(this.e423 * other.e15) - (this.e431 * other.e25) - (this.e412 * other.e35) - (this.e415 * other.e23) - (this.e425 * other.e31) - (this.e435 * other.e12)) + float4((this.group0.xyz * other.group0.www), this.e4 * other.e3215), 
            /* e415, e425, e435, e321 */
            float4(this.e4 * other.e15, this.e4 * other.e25, this.e4 * other.e35, -(this.e1 * other.e23) - (this.e2 * other.e31) - (this.e3 * other.e12)) + (float4(other.scalar) * this.group1), 
            /* e235, e315, e125, e5 */
            float4(((float3(this.e5) * other.group0.xyz) + (float3(other.scalar) * this.group2.xyz) + (this.group3.yzx * other.group1.zxy) - (this.group3.zxy * other.group1.yzx)), this.e5 * other.scalar), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * float4(this.group3.xyz, this.e4)
        );
        Motor right_anti_dual = Motor(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(right_anti_dual.e12345) * wedge.group0, 
            /* e415, e425, e435, e321 */
            float4(((float3(right_anti_dual.e12345) * wedge.group1.xyz) + (float3(wedge.e12345) * right_anti_dual.group0.xyz)), right_anti_dual.e12345 * wedge.e321), 
            /* e235, e315, e125, e5 */
            (float4(right_anti_dual.e12345) * wedge.group2) + (float4(wedge.e12345) * right_anti_dual.group1) + float4(float3(0.0), -(right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435)), 
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e12345 * wedge.e1) + (right_anti_dual.e315 * wedge.e412), (right_anti_dual.e12345 * wedge.e2) + (right_anti_dual.e125 * wedge.e423), (right_anti_dual.e12345 * wedge.e3) + (right_anti_dual.e235 * wedge.e431), -(right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412)) + (right_anti_dual.group0 * float4(wedge.group1.www, wedge.e4)) - (wedge.group0.yzxx * float4(right_anti_dual.group1.zxy, right_anti_dual.e415))
        );
    }
}
public extension AntiDipoleInversion {
    public AntiDipoleInversion anti_reject_orthogonally_from(AntiPlane other) {
        DipoleInversion wedge = DipoleInversion(
            /* e41, e42, e43 */
            float3(this.e4) * other.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(((this.group3.yzx * other.group0.zxy) - (this.group3.zxy * other.group0.yzx)), this.e4 * other.e5), 
            /* e15, e25, e35, e1234 */
            float4(this.e1 * other.e5, this.e2 * other.e5, this.e3 * other.e5, -(this.e431 * other.e2) - (this.e412 * other.e3)) - (other.group0.xyzx * float4(this.group3.www, this.e423)), 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e425 * other.e3 * -1.0, this.e435 * other.e1 * -1.0, this.e415 * other.e2 * -1.0, (this.e315 * other.e2) + (this.e125 * other.e3)) + (float4(other.e5) * float4(this.group0.xyz, this.e321)) + (other.group0.yzxx * float4(this.group1.zxy, this.e235))
        );
        Plane right_anti_dual = Plane(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(wedge.e1234) * right_anti_dual.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(((wedge.group3.zxy * right_anti_dual.group0.yzx) - (wedge.group3.yzx * right_anti_dual.group0.zxy)), wedge.e1234 * right_anti_dual.e3215), 
            /* e235, e315, e125, e4 */
            float4(wedge.e4235 * right_anti_dual.e3215, wedge.e4315 * right_anti_dual.e3215, wedge.e4125 * right_anti_dual.e3215, -(wedge.e42 * right_anti_dual.e4315) - (wedge.e43 * right_anti_dual.e4125)) - (right_anti_dual.group0.xyzx * float4(wedge.group3.www, wedge.e41)), 
            /* e1, e2, e3, e5 */
            float4(wedge.e12 * right_anti_dual.e4315 * -1.0, wedge.e23 * right_anti_dual.e4125 * -1.0, wedge.e31 * right_anti_dual.e4235 * -1.0, (wedge.e25 * right_anti_dual.e4315) + (wedge.e35 * right_anti_dual.e4125)) + (float4(right_anti_dual.e3215) * float4(wedge.group0.xyz, wedge.e45)) + (right_anti_dual.group0.zxyx * float4(wedge.group1.yzx, wedge.e15))
        );
    }
}
public extension AntiDipoleInversion {
    public RoundPoint anti_reject_orthogonally_from(Circle other) {
        Sphere wedge = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4((this.e4 * other.e235) + (this.e3 * other.e425), (this.e4 * other.e315) + (this.e1 * other.e435), (this.e4 * other.e125) + (this.e2 * other.e415), -(this.e3 * other.e125) - (this.e5 * other.e321)) - (this.group3.wwwx * float4(other.group0.xyz, other.e235)) - float4((this.group3.yzx * other.group1.zxy), this.e2 * other.e315), 
            /* e1234 */
            (this.e4 * other.e321) + (this.e1 * other.e423) + (this.e2 * other.e431) + (this.e3 * other.e412)
        );
        Dipole right_anti_dual = Dipole(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35 */
            other.group2.xyz
        );
        return RoundPoint(
            /* e1, e2, e3, e4 */
            float4(-(right_anti_dual.e41 * wedge.e3215) - (right_anti_dual.e31 * wedge.e4125), -(right_anti_dual.e42 * wedge.e3215) - (right_anti_dual.e12 * wedge.e4235), -(right_anti_dual.e43 * wedge.e3215) - (right_anti_dual.e23 * wedge.e4315), (right_anti_dual.e43 * wedge.e4125) + (right_anti_dual.e45 * wedge.e1234)) + (wedge.group0.yzxy * float4(right_anti_dual.group1.zxy, right_anti_dual.e42)) + float4((float3(wedge.e1234) * right_anti_dual.group2.xyz), right_anti_dual.e41 * wedge.e4235), 
            /* e5 */
            -(right_anti_dual.e45 * wedge.e3215) - (right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125)
        );
    }
}
public extension AntiDipoleInversion {
    public RoundPoint anti_reject_orthogonally_from(CircleRotor other) {
        Sphere wedge = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4((this.e4 * other.e235) + (this.e3 * other.e425), (this.e4 * other.e315) + (this.e1 * other.e435), (this.e4 * other.e125) + (this.e2 * other.e415), -(this.e3 * other.e125) - (this.e5 * other.e321)) - (this.group3.yzxy * float4(other.group1.zxy, other.e315)) - float4((other.group0.xyz * this.group3.www), this.e1 * other.e235), 
            /* e1234 */
            (this.e4 * other.e321) + (this.e1 * other.e423) + (this.e2 * other.e431) + (this.e3 * other.e412)
        );
        AntiCircleRotor right_anti_dual = AntiCircleRotor(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return RoundPoint(
            /* e1, e2, e3, e4 */
            float4(-(right_anti_dual.e41 * wedge.e3215) - (right_anti_dual.e31 * wedge.e4125), -(right_anti_dual.e42 * wedge.e3215) - (right_anti_dual.e12 * wedge.e4235), -(right_anti_dual.e43 * wedge.e3215) - (right_anti_dual.e23 * wedge.e4315), (right_anti_dual.e43 * wedge.e4125) + (right_anti_dual.e45 * wedge.e1234)) + (wedge.group0.yzxx * float4(right_anti_dual.group1.zxy, right_anti_dual.e41)) + float4((float3(wedge.e1234) * right_anti_dual.group2.xyz), right_anti_dual.e42 * wedge.e4315), 
            /* e5 */
            -(right_anti_dual.e45 * wedge.e3215) - (right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125)
        );
    }
}
public extension AntiDipoleInversion {
    public AntiDipoleInversion anti_reject_orthogonally_from(Dipole other) {
        CircleRotor wedge = CircleRotor(
            /* e423, e431, e412 */
            (float3(this.e4) * other.group1.xyz) + (other.group0.xyz.yzx * this.group3.zxy) - (other.group0.xyz.zxy * this.group3.yzx), 
            /* e415, e425, e435, e321 */
            float4((this.e4 * other.e15) + (this.e5 * other.e41), (this.e4 * other.e25) + (this.e5 * other.e42), (this.e4 * other.e35) + (this.e5 * other.e43), -(this.e2 * other.e31) - (this.e3 * other.e12)) - (this.group3.xyzx * other.group1.wwwx), 
            /* e235, e315, e125, e12345 */
            float4((this.e2 * other.e35) + (this.e5 * other.e23), (this.e3 * other.e15) + (this.e5 * other.e31), (this.e1 * other.e25) + (this.e5 * other.e12), -(this.e431 * other.e25) - (this.e412 * other.e35) - (this.e415 * other.e23) - (this.e425 * other.e31) - (this.e435 * other.e12) - (this.e321 * other.e45) - (this.e235 * other.e41) - (this.e315 * other.e42) - (this.e125 * other.e43)) - float4((other.group2.xyz.yzx * this.group3.zxy), this.e423 * other.e15)
        );
        Circle right_anti_dual = Circle(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125 */
            other.group2.xyz * float3(-1.0)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(wedge.e12345) * right_anti_dual.group1, 
            /* e235, e315, e125, e4 */
            float4((float3(wedge.e12345) * right_anti_dual.group2.xyz), -(right_anti_dual.e423 * wedge.e415) - (right_anti_dual.e431 * wedge.e425) - (right_anti_dual.e412 * wedge.e435) - (right_anti_dual.e415 * wedge.e423) - (right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412)), 
            /* e1, e2, e3, e5 */
            float4((right_anti_dual.e412 * wedge.e315) + (right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e315 * wedge.e412), (right_anti_dual.e423 * wedge.e125) + (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e125 * wedge.e423), (right_anti_dual.e431 * wedge.e235) + (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e235 * wedge.e431), -(right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e125 * wedge.e435)) - float4((right_anti_dual.group0.xyz.yzx * wedge.group2.zxy), right_anti_dual.e235 * wedge.e415) - float4((right_anti_dual.group2.xyz.zxy * wedge.group0.xyz.yzx), right_anti_dual.e315 * wedge.e425)
        );
    }
}
public extension AntiDipoleInversion {
    public AntiDipoleInversion anti_reject_orthogonally_from(DipoleInversion other) {
        CircleRotor wedge = CircleRotor(
            /* e423, e431, e412 */
            (float3(this.e4) * other.group1.xyz) + (other.group0.xyz.yzx * this.group3.zxy) - (other.group0.xyz.zxy * this.group3.yzx), 
            /* e415, e425, e435, e321 */
            float4((this.e4 * other.e15) + (this.e5 * other.e41), (this.e4 * other.e25) + (this.e5 * other.e42), (this.e4 * other.e35) + (this.e5 * other.e43), -(this.e2 * other.e31) - (this.e3 * other.e12)) - (this.group3.xyzx * other.group1.wwwx), 
            /* e235, e315, e125, e12345 */
            (this.group3.wwwx * float4(other.group1.xyz, other.e4235)) + float4(float3(0.0), (this.e2 * other.e4315) + (this.e3 * other.e4125) + (this.e5 * other.e1234) - (this.e431 * other.e25) - (this.e412 * other.e35) - (this.e415 * other.e23) - (this.e425 * other.e31) - (this.e435 * other.e12) - (this.e321 * other.e45) - (this.e235 * other.e41) - (this.e315 * other.e42) - (this.e125 * other.e43)) + float4((this.group3.yzx * other.group2.zxy), this.e4 * other.e3215) - (other.group2.yzxx * float4(this.group3.zxy, this.e423))
        );
        AntiDipoleInversion right_anti_dual = AntiDipoleInversion(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(wedge.e12345) * right_anti_dual.group1, 
            /* e235, e315, e125, e4 */
            float4((float3(wedge.e12345) * right_anti_dual.group2.xyz), (right_anti_dual.e4 * wedge.e12345) - (right_anti_dual.e423 * wedge.e415) - (right_anti_dual.e431 * wedge.e425) - (right_anti_dual.e412 * wedge.e435) - (right_anti_dual.e415 * wedge.e423) - (right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412)), 
            /* e1, e2, e3, e5 */
            float4((right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e315 * wedge.e412) + (right_anti_dual.e1 * wedge.e12345), (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e125 * wedge.e423) + (right_anti_dual.e2 * wedge.e12345), (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e235 * wedge.e431) + (right_anti_dual.e3 * wedge.e12345), -(right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435)) + (wedge.group2.yzxw * float4(right_anti_dual.group0.xyz.zxy, right_anti_dual.e5)) - (wedge.group2.zxyx * float4(right_anti_dual.group0.xyz.yzx, right_anti_dual.e415)) - float4((wedge.group0.xyz.yzx * right_anti_dual.group2.zxy), right_anti_dual.e425 * wedge.e315)
        );
    }
}
public extension AntiDipoleInversion {
    public AntiFlector anti_reject_orthogonally_from(DualNum other) {
        Flector wedge = Flector(
            /* e15, e25, e35, e45 */
            float4(other.e5) * float4(this.group3.xyz, this.e4), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.e5) * float4(this.group0.xyz, this.e321)
        );
        AntiDualNum right_anti_dual = AntiDualNum(
            /* e3215, scalar */
            other.group0.xy * float2(-1.0)
        );
        return AntiFlector(
            /* e235, e315, e125, e321 */
            float4(right_anti_dual.group0.xy.xx, right_anti_dual.e3215, 0.0) * float4(float3(1.0), 0.0) * float4(wedge.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e1, e2, e3, e5 */
            float4(float3(0.0), right_anti_dual.e3215 * wedge.e45)
        );
    }
}
public extension AntiDipoleInversion {
    public AntiFlector anti_reject_orthogonally_from(FlatPoint other) {
        Motor wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4(this.e4 * other.e15, this.e4 * other.e25, this.e4 * other.e35, -(this.e431 * other.e25) - (this.e412 * other.e35) - (this.e321 * other.e45)) - (other.group0.wwwx * float4(this.group3.xyz, this.e423)), 
            /* e235, e315, e125, e5 */
            float4(((this.group3.yzx * other.group0.zxy) - (this.group3.zxy * other.group0.yzx)), 0.0)
        );
        AntiFlatPoint right_anti_dual = AntiFlatPoint(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiFlector(
            /* e235, e315, e125, e321 */
            float4(wedge.e12345) * right_anti_dual.group0, 
            /* e1, e2, e3, e5 */
            float4((right_anti_dual.group0.www * wedge.group0.xyz), -(right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435))
        );
    }
}
public extension AntiDipoleInversion {
    public AntiFlector anti_reject_orthogonally_from(Flector other) {
        Motor wedge = Motor(
            /* e415, e425, e435, e12345 */
            (float4(this.e4) * float4(other.group0.xyz, other.e3215)) + float4(float3(0.0), (this.e1 * other.e4235) + (this.e2 * other.e4315) + (this.e3 * other.e4125) - (this.e431 * other.e25) - (this.e412 * other.e35) - (this.e321 * other.e45)) - (other.group0.wwwx * float4(this.group3.xyz, this.e423)), 
            /* e235, e315, e125, e5 */
            float4(((this.group3.yzx * other.group0.zxy) - (this.group3.zxy * other.group0.yzx)), 0.0)
        );
        AntiFlector right_anti_dual = AntiFlector(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiFlector(
            /* e235, e315, e125, e321 */
            float4(wedge.e12345) * right_anti_dual.group0, 
            /* e1, e2, e3, e5 */
            float4(right_anti_dual.e1 * wedge.e12345, right_anti_dual.e2 * wedge.e12345, right_anti_dual.e3 * wedge.e12345, -(right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435)) + (wedge.group0 * float4(right_anti_dual.group0.www, right_anti_dual.e5))
        );
    }
}
public extension AntiDipoleInversion {
    public AntiPlane anti_reject_orthogonally_from(Line other) {
        Plane wedge = Plane(
            /* e4235, e4315, e4125, e3215 */
            float4((this.e4 * other.e235) + (this.e3 * other.e425), (this.e4 * other.e315) + (this.e1 * other.e435), (this.e4 * other.e125) + (this.e2 * other.e415), -(this.e2 * other.e315) - (this.e3 * other.e125)) - (this.group3.yzxx * float4(other.group0.xyz.zxy, other.e235))
        );
        AntiLine right_anti_dual = AntiLine(
            /* e23, e31, e12 */
            other.group0.xyz, 
            /* e15, e25, e35 */
            other.group1.xyz
        );
        return AntiPlane(
            /* e1, e2, e3, e5 */
            float4(right_anti_dual.e12 * wedge.e4315, right_anti_dual.e23 * wedge.e4125, right_anti_dual.e31 * wedge.e4235, -(right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125)) - (wedge.group0.zxyx * float4(right_anti_dual.group0.xyz.yzx, right_anti_dual.e15))
        );
    }
}
public extension AntiDipoleInversion {
    public AntiFlector anti_reject_orthogonally_from(Motor other) {
        Flector wedge = Flector(
            /* e15, e25, e35, e45 */
            float4(other.e5) * float4(this.group3.xyz, this.e4), 
            /* e4235, e4315, e4125, e3215 */
            float4((this.e4 * other.e235) + (this.e3 * other.e425), (this.e4 * other.e315) + (this.e1 * other.e435), (this.e4 * other.e125) + (this.e2 * other.e415), -(this.e2 * other.e315) - (this.e3 * other.e125)) + (float4(other.e5) * float4(this.group0.xyz, this.e321)) - (this.group3.yzxx * float4(other.group0.zxy, other.e235))
        );
        AntiMotor right_anti_dual = AntiMotor(
            /* e23, e31, e12, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiFlector(
            /* e235, e315, e125, e321 */
            float4(float3(1.0), 0.0) * float4(right_anti_dual.group1.www, 0.0) * float4(wedge.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e1, e2, e3, e5 */
            float4(float3(0.0), -(right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125)) + float4((right_anti_dual.group0.zxy * wedge.group1.yzx), right_anti_dual.e3215 * wedge.e45) - (wedge.group1.zxyx * float4(right_anti_dual.group0.yzx, right_anti_dual.e15))
        );
    }
}
public extension AntiDipoleInversion {
    public MultiVector anti_reject_orthogonally_from(MultiVector other) {
        MultiVector wedge = MultiVector(
            /* scalar, e12345 */
            float2(0.0, (this.e4 * other.e3215) + (this.e1 * other.e4235) + (this.e2 * other.e4315) + (this.e3 * other.e4125) + (this.e5 * other.e1234) - (this.e423 * other.e15) - (this.e431 * other.e25) - (this.e412 * other.e35) - (this.e415 * other.e23) - (this.e425 * other.e31) - (this.e435 * other.e12) - (this.e321 * other.e45) - (this.e235 * other.e41) - (this.e315 * other.e42) - (this.e125 * other.e43)), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * float4(this.group3.xyz, this.e4), 
            /* e5 */
            this.e5 * other.scalar, 
            /* e15, e25, e35, e45 */
            (float4(other.e5) * float4(this.group3.xyz, this.e4)) - (float4(this.e5) * other.group1), 
            /* e41, e42, e43 */
            (float3(this.e4) * other.group1.xyz) - (float3(other.e4) * this.group3.xyz), 
            /* e23, e31, e12 */
            (this.group3.yzx * other.group1.zxy) - (this.group3.zxy * other.group1.yzx), 
            /* e415, e425, e435, e321 */
            float4((this.e4 * other.e15) + (this.e5 * other.e41), (this.e4 * other.e25) + (this.e5 * other.e42), (this.e4 * other.e35) + (this.e5 * other.e43), -(this.e2 * other.e31) - (this.e3 * other.e12)) + (float4(other.scalar) * this.group1) - float4((other.group3.www * this.group3.xyz), this.e1 * other.e23), 
            /* e423, e431, e412 */
            (float3(this.e4) * other.group5.xyz) + (float3(other.scalar) * this.group0.xyz) + (other.group4.xyz.yzx * this.group3.zxy) - (other.group4.xyz.zxy * this.group3.yzx), 
            /* e235, e315, e125 */
            (float3(this.e5) * other.group5.xyz) + (float3(other.scalar) * this.group2.xyz) + (this.group3.yzx * other.group3.zxy) - (this.group3.zxy * other.group3.yzx), 
            /* e4235, e4315, e4125, e3215 */
            (float4(other.e5) * float4(this.group0.xyz, this.e321)) + (other.group1.yzxy * float4(this.group1.zxy, this.e315)) + float4((other.group8.xyz * this.group2.www), this.e235 * other.e1) + float4((this.group3.zxy * other.group6.yzx), this.e125 * other.e3) - (this.group3.yzxw * other.group6.zxyw) - (this.group3.wwwx * float4(other.group7.xyz, other.e235)) - float4((this.group1.yzx * other.group1.zxy), this.e2 * other.e315) - float4((other.group1.www * this.group2.xyz), this.e3 * other.e125), 
            /* e1234 */
            (this.e4 * other.e321) + (this.e1 * other.e423) + (this.e2 * other.e431) + (this.e3 * other.e412) - (this.e423 * other.e1) - (this.e431 * other.e2) - (this.e412 * other.e3) - (this.e321 * other.e4)
        );
        MultiVector right_anti_dual = MultiVector(
            /* scalar, e12345 */
            other.group0.xy.yx * float2(-1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215, 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43 */
            other.group7.xyz, 
            /* e23, e31, e12 */
            other.group6.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412 */
            other.group4.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group3.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2((right_anti_dual.scalar * wedge.e12345) + (right_anti_dual.e12345 * wedge.scalar) + (right_anti_dual.e1 * wedge.e4235) + (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) + (right_anti_dual.e4 * wedge.e3215) + (right_anti_dual.e5 * wedge.e1234) + (right_anti_dual.e4235 * wedge.e1) + (right_anti_dual.e4315 * wedge.e2) + (right_anti_dual.e4125 * wedge.e3) + (right_anti_dual.e3215 * wedge.e4) + (right_anti_dual.e1234 * wedge.e5) - (right_anti_dual.e15 * wedge.e423) - (right_anti_dual.e25 * wedge.e431) - (right_anti_dual.e35 * wedge.e412) - (right_anti_dual.e45 * wedge.e321) - (right_anti_dual.e41 * wedge.e235) - (right_anti_dual.e42 * wedge.e315) - (right_anti_dual.e43 * wedge.e125) - (right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e321 * wedge.e45) - (right_anti_dual.e423 * wedge.e15) - (right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43), right_anti_dual.e12345 * wedge.e12345), 
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e15 * wedge.e1234) + (right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e4125 * wedge.e31), (right_anti_dual.e25 * wedge.e1234) + (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e4235 * wedge.e12), (right_anti_dual.e35 * wedge.e1234) + (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e4315 * wedge.e23), -(right_anti_dual.e415 * wedge.e423) - (right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412) - (right_anti_dual.e1234 * wedge.e45)) + (float4(right_anti_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_anti_dual.group1) + (wedge.group9.yzxx * float4(right_anti_dual.group5.xyz.zxy, right_anti_dual.e41)) + float4((wedge.group4.xyz * right_anti_dual.group9.www), right_anti_dual.e45 * wedge.e1234) + float4((right_anti_dual.group7.xyz.zxy * wedge.group8.xyz.yzx), right_anti_dual.e42 * wedge.e4315) + float4((right_anti_dual.group8.xyz.yzx * wedge.group7.xyz.zxy), right_anti_dual.e43 * wedge.e4125) - (right_anti_dual.group9.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((float3(right_anti_dual.e1234) * wedge.group3.xyz), right_anti_dual.e4125 * wedge.e43) - float4((right_anti_dual.group4.xyz * wedge.group9.www), right_anti_dual.e423 * wedge.e415) - float4((right_anti_dual.group5.xyz.yzx * wedge.group9.zxy), right_anti_dual.e431 * wedge.e425) - float4((right_anti_dual.group7.xyz.yzx * wedge.group8.xyz.zxy), right_anti_dual.e412 * wedge.e435) - float4((right_anti_dual.group8.xyz.zxy * wedge.group7.xyz.yzx), right_anti_dual.e4235 * wedge.e41), 
            /* e5 */
            (right_anti_dual.e12345 * wedge.e5) + (right_anti_dual.e5 * wedge.e12345) + (right_anti_dual.e4235 * wedge.e15) + (right_anti_dual.e4315 * wedge.e25) + (right_anti_dual.e4125 * wedge.e35) + (right_anti_dual.e3215 * wedge.e45) - (right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125) - (right_anti_dual.e45 * wedge.e3215) - (right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435), 
            /* e15, e25, e35, e45 */
            float4((right_anti_dual.e415 * wedge.e3215) + (right_anti_dual.e315 * wedge.e4125) + (right_anti_dual.e4125 * wedge.e315) + (right_anti_dual.e3215 * wedge.e415), (right_anti_dual.e425 * wedge.e3215) + (right_anti_dual.e125 * wedge.e4235) + (right_anti_dual.e4235 * wedge.e125) + (right_anti_dual.e3215 * wedge.e425), (right_anti_dual.e435 * wedge.e3215) + (right_anti_dual.e235 * wedge.e4315) + (right_anti_dual.e4315 * wedge.e235) + (right_anti_dual.e3215 * wedge.e435), -(right_anti_dual.e435 * wedge.e4125) - (right_anti_dual.e4235 * wedge.e415) - (right_anti_dual.e4315 * wedge.e425) - (right_anti_dual.e4125 * wedge.e435)) + (float4(right_anti_dual.e12345) * wedge.group3) + (float4(wedge.e12345) * right_anti_dual.group3) - (wedge.group9.yzxx * float4(right_anti_dual.group8.xyz.zxy, right_anti_dual.e415)) - float4((wedge.group8.xyz.zxy * right_anti_dual.group9.yzx), right_anti_dual.e425 * wedge.e4315), 
            /* e41, e42, e43 */
            (float3(right_anti_dual.e12345) * wedge.group4.xyz) + (float3(right_anti_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_anti_dual.group4.xyz) + (float3(wedge.e1234) * right_anti_dual.group6.xyz) + (right_anti_dual.group7.xyz.zxy * wedge.group9.yzx) + (wedge.group7.xyz.zxy * right_anti_dual.group9.yzx) - (right_anti_dual.group7.xyz.yzx * wedge.group9.zxy) - (wedge.group7.xyz.yzx * right_anti_dual.group9.zxy), 
            /* e23, e31, e12 */
            (float3(right_anti_dual.e12345) * wedge.group5.xyz) + (float3(right_anti_dual.e3215) * wedge.group7.xyz) + (float3(right_anti_dual.e1234) * wedge.group8.xyz) + (float3(wedge.e12345) * right_anti_dual.group5.xyz) + (float3(wedge.e3215) * right_anti_dual.group7.xyz) + (float3(wedge.e1234) * right_anti_dual.group8.xyz) - (float3(right_anti_dual.e321) * wedge.group9.xyz) - (float3(wedge.e321) * right_anti_dual.group9.xyz), 
            /* e415, e425, e435, e321 */
            (float4(right_anti_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_anti_dual.group6) + (right_anti_dual.group9.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - float4((right_anti_dual.group9.zxy * wedge.group9.yzx), right_anti_dual.e1234 * wedge.e3215), 
            /* e423, e431, e412 */
            (float3(right_anti_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_anti_dual.group7.xyz) + (float3(wedge.e1234) * right_anti_dual.group9.xyz) - (float3(right_anti_dual.e1234) * wedge.group9.xyz), 
            /* e235, e315, e125 */
            (float3(right_anti_dual.e12345) * wedge.group8.xyz) + (float3(right_anti_dual.e3215) * wedge.group9.xyz) + (float3(wedge.e12345) * right_anti_dual.group8.xyz) - (float3(wedge.e3215) * right_anti_dual.group9.xyz), 
            /* e4235, e4315, e4125, e3215 */
            (float4(right_anti_dual.e12345) * wedge.group9) + (float4(wedge.e12345) * right_anti_dual.group9), 
            /* e1234 */
            (right_anti_dual.e12345 * wedge.e1234) + (right_anti_dual.e1234 * wedge.e12345)
        );
    }
}
public extension AntiDipoleInversion {
    public AntiPlane anti_reject_orthogonally_from(Plane other) {
        return AntiPlane(
            /* e1, e2, e3, e5 */
            float4((this.e4 * other.e3215) + (this.e1 * other.e4235) + (this.e2 * other.e4315) + (this.e3 * other.e4125)) * float4(other.e4235 * -1.0, other.e4315 * -1.0, other.e4125 * -1.0, other.e3215)
        );
    }
}
public extension AntiDipoleInversion {
    public AntiDipoleInversion anti_reject_orthogonally_from(RoundPoint other) {
        DipoleInversion wedge = DipoleInversion(
            /* e41, e42, e43 */
            (float3(this.e4) * other.group0.xyz) - (float3(other.e4) * this.group3.xyz), 
            /* e23, e31, e12, e45 */
            float4((this.group3.yzx * other.group0.zxy), this.e4 * other.e5) - (this.group3.zxyw * other.group0.yzxw), 
            /* e15, e25, e35, e1234 */
            float4(this.e1 * other.e5, this.e2 * other.e5, this.e3 * other.e5, -(this.e431 * other.e2) - (this.e412 * other.e3) - (this.e321 * other.e4)) - (other.group0.xyzx * float4(this.group3.www, this.e423)), 
            /* e4235, e4315, e4125, e3215 */
            float4(-(this.e425 * other.e3) - (this.e235 * other.e4), -(this.e435 * other.e1) - (this.e315 * other.e4), -(this.e415 * other.e2) - (this.e125 * other.e4), (this.e315 * other.e2) + (this.e125 * other.e3)) + (float4(other.e5) * float4(this.group0.xyz, this.e321)) + (other.group0.yzxx * float4(this.group1.zxy, this.e235))
        );
        Sphere right_anti_dual = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            (float3(wedge.e1234) * right_anti_dual.group0.xyz) - (float3(right_anti_dual.e1234) * wedge.group3.xyz), 
            /* e415, e425, e435, e321 */
            (right_anti_dual.group0.yzxw * float4(wedge.group3.zxy, wedge.e1234)) - (wedge.group3.yzxw * float4(right_anti_dual.group0.zxy, right_anti_dual.e1234)), 
            /* e235, e315, e125, e4 */
            float4(wedge.e4235 * right_anti_dual.e3215, wedge.e4315 * right_anti_dual.e3215, wedge.e4125 * right_anti_dual.e3215, -(wedge.e42 * right_anti_dual.e4315) - (wedge.e43 * right_anti_dual.e4125) - (wedge.e45 * right_anti_dual.e1234)) - (right_anti_dual.group0.xyzx * float4(wedge.group3.www, wedge.e41)), 
            /* e1, e2, e3, e5 */
            float4(-(wedge.e12 * right_anti_dual.e4315) - (wedge.e15 * right_anti_dual.e1234), -(wedge.e23 * right_anti_dual.e4125) - (wedge.e25 * right_anti_dual.e1234), -(wedge.e31 * right_anti_dual.e4235) - (wedge.e35 * right_anti_dual.e1234), (wedge.e25 * right_anti_dual.e4315) + (wedge.e35 * right_anti_dual.e4125)) + (float4(right_anti_dual.e3215) * float4(wedge.group0.xyz, wedge.e45)) + (right_anti_dual.group0.zxyx * float4(wedge.group1.yzx, wedge.e15))
        );
    }
}
public extension AntiDipoleInversion {
    public AntiDipoleInversion anti_reject_orthogonally_from(Scalar other) {
        AntiDipoleInversion wedge = AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(other.scalar) * this.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.scalar) * this.group1, 
            /* e235, e315, e125, e4 */
            float4(other.scalar) * this.group2, 
            /* e1, e2, e3, e5 */
            float4(other.scalar) * this.group3
        );
        AntiScalar right_anti_dual = AntiScalar(
            /* e12345 */
            other.scalar
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(right_anti_dual.e12345) * wedge.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(right_anti_dual.e12345) * wedge.group1, 
            /* e235, e315, e125, e4 */
            float4(right_anti_dual.e12345) * wedge.group2, 
            /* e1, e2, e3, e5 */
            float4(right_anti_dual.e12345) * wedge.group3
        );
    }
}
public extension AntiDipoleInversion {
    public RoundPoint anti_reject_orthogonally_from(Sphere other) {
        AntiScalar wedge = AntiScalar(
            /* e12345 */
            (this.e4 * other.e3215) + (this.e1 * other.e4235) + (this.e2 * other.e4315) + (this.e3 * other.e4125) + (this.e5 * other.e1234)
        );
        RoundPoint right_anti_dual = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(other.group0.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215
        );
        return RoundPoint(
            /* e1, e2, e3, e4 */
            float4(wedge.e12345) * right_anti_dual.group0, 
            /* e5 */
            wedge.e12345 * right_anti_dual.e5
        );
    }
}
public extension AntiDipoleInversion {
    public AntiDipoleInversion anti_reject_orthogonally_from(VersorEven other) {
        DipoleInversion wedge = DipoleInversion(
            /* e41, e42, e43 */
            (float3(this.e4) * other.group3.xyz) - (float3(other.e4) * this.group3.xyz), 
            /* e23, e31, e12, e45 */
            float4((this.group3.yzx * other.group3.zxy), this.e4 * other.e5) - (this.group3.zxyw * other.group3.yzxw), 
            /* e15, e25, e35, e1234 */
            float4(float3(0.0), (this.e1 * other.e423) + (this.e2 * other.e431) + (this.e3 * other.e412) - (this.e431 * other.e2) - (this.e412 * other.e3) - (this.e321 * other.e4)) + float4((other.group2.www * this.group3.xyz), this.e4 * other.e321) - (other.group3.xyzx * float4(this.group3.www, this.e423)), 
            /* e4235, e4315, e4125, e3215 */
            (float4(other.e5) * float4(this.group0.xyz, this.e321)) + (this.group2.wwwy * float4(other.group2.xyz, other.e2)) + (other.group3.yzxx * float4(this.group1.zxy, this.e235)) + float4((this.group3.zxy * other.group1.yzx), this.e125 * other.e3) - (float4(this.e5) * float4(other.group0.xyz, other.e321)) - (this.group3.yzxz * float4(other.group1.zxy, other.e125)) - float4((this.group1.yzx * other.group3.zxy), this.e1 * other.e235) - float4((other.group3.www * this.group2.xyz), this.e2 * other.e315)
        );
        VersorOdd right_anti_dual = VersorOdd(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            (float3(wedge.e1234) * right_anti_dual.group3.xyz) - (float3(right_anti_dual.e1234) * wedge.group3.xyz), 
            /* e415, e425, e435, e321 */
            (right_anti_dual.group3.yzxw * float4(wedge.group3.zxy, wedge.e1234)) - (wedge.group3.yzxw * float4(right_anti_dual.group3.zxy, right_anti_dual.e1234)), 
            /* e235, e315, e125, e4 */
            float4(float3(0.0), (wedge.e4235 * right_anti_dual.e41) + (wedge.e4315 * right_anti_dual.e42) + (wedge.e4125 * right_anti_dual.e43) - (wedge.e42 * right_anti_dual.e4315) - (wedge.e43 * right_anti_dual.e4125) - (wedge.e45 * right_anti_dual.e1234)) + float4((right_anti_dual.group3.www * wedge.group3.xyz), wedge.e1234 * right_anti_dual.e45) - (right_anti_dual.group3.xyzx * float4(wedge.group3.www, wedge.e41)), 
            /* e1, e2, e3, e5 */
            (float4(right_anti_dual.e3215) * float4(wedge.group0.xyz, wedge.e45)) + (wedge.group2.wwwy * float4(right_anti_dual.group2.xyz, right_anti_dual.e4315)) + (right_anti_dual.group3.zxyx * float4(wedge.group1.yzx, wedge.e15)) + float4((wedge.group3.yzx * right_anti_dual.group1.zxy), wedge.e35 * right_anti_dual.e4125) - (float4(wedge.e3215) * float4(right_anti_dual.group0.xyz, right_anti_dual.e45)) - (wedge.group3.zxyz * float4(right_anti_dual.group1.yzx, right_anti_dual.e35)) - (right_anti_dual.group2.wwwy * float4(wedge.group2.xyz, wedge.e4315)) - float4((wedge.group1.zxy * right_anti_dual.group3.yzx), wedge.e4235 * right_anti_dual.e15)
        );
    }
}
public extension AntiDipoleInversion {
    public VersorEven anti_reject_orthogonally_from(VersorOdd other) {
        VersorEven wedge = VersorEven(
            /* e423, e431, e412, e12345 */
            (this.group3.zxyy * float4(other.group0.yzx, other.e4315)) + float4(float3(0.0), (this.e3 * other.e4125) + (this.e5 * other.e1234) - (this.e431 * other.e25) - (this.e412 * other.e35) - (this.e415 * other.e23) - (this.e425 * other.e31) - (this.e435 * other.e12) - (this.e321 * other.e45) - (this.e235 * other.e41) - (this.e315 * other.e42) - (this.e125 * other.e43)) + float4((this.group0.xyz * other.group0.www), this.e4 * other.e3215) + float4((this.group2.www * other.group1.xyz), this.e1 * other.e4235) - float4((this.group3.yzx * other.group0.zxy), this.e423 * other.e15), 
            /* e415, e425, e435, e321 */
            float4((this.e4 * other.e15) + (this.e5 * other.e41), (this.e4 * other.e25) + (this.e5 * other.e42), (this.e4 * other.e35) + (this.e5 * other.e43), -(this.e2 * other.e31) - (this.e3 * other.e12)) + (float4(other.scalar) * this.group1) - (this.group3.xyzx * other.group1.wwwx), 
            /* e235, e315, e125, e5 */
            float4(((float3(this.e5) * other.group1.xyz) + (float3(other.scalar) * this.group2.xyz) + (this.group3.yzx * other.group2.zxy) - (this.group3.zxy * other.group2.yzx)), this.e5 * other.scalar), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * float4(this.group3.xyz, this.e4)
        );
        VersorEven right_anti_dual = VersorEven(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(((float3(right_anti_dual.e12345) * wedge.group0.xyz) + (float3(wedge.e12345) * right_anti_dual.group0.xyz)), right_anti_dual.e12345 * wedge.e12345), 
            /* e415, e425, e435, e321 */
            (float4(right_anti_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_anti_dual.group1), 
            /* e235, e315, e125, e5 */
            (float4(right_anti_dual.e12345) * wedge.group2) + (float4(wedge.e12345) * right_anti_dual.group2) + float4(float3(0.0), -(right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435)), 
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e315 * wedge.e412) + (right_anti_dual.e1 * wedge.e12345), (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e125 * wedge.e423) + (right_anti_dual.e2 * wedge.e12345), (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e235 * wedge.e431) + (right_anti_dual.e3 * wedge.e12345), -(right_anti_dual.e412 * wedge.e435) - (right_anti_dual.e415 * wedge.e423) - (right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412)) + (right_anti_dual.group0.zxyw * float4(wedge.group2.yzx, wedge.e4)) + float4((right_anti_dual.group0.www * wedge.group3.xyz), right_anti_dual.e4 * wedge.e12345) - (right_anti_dual.group0.yzxx * float4(wedge.group2.zxy, wedge.e415)) - float4((right_anti_dual.group2.zxy * wedge.group0.yzx), right_anti_dual.e431 * wedge.e425)
        );
    }
}
public extension AntiDualNum {
    // Fancy infix trick (first half)
    public AntiRejectOrthogonallyFromInfixPartial<AntiDualNum> operator /(AntiRejectOrthogonallyFromInfix rhs) {
        return AntiRejectOrthogonallyFromInfixPartial<AntiDualNum>(this);
    }
}
public extension AntiRejectOrthogonallyFromInfixPartial<AntiDualNum> {
    // Fancy infix trick (second half)
    public VersorOdd operator /(AntiCircleRotor rhs) {
        return this.a.anti_reject_orthogonally_from(rhs);
    }
}
public extension AntiDualNum {
    public VersorOdd anti_reject_orthogonally_from(AntiCircleRotor other) {
        VersorOdd wedge = VersorOdd(
            /* e41, e42, e43, scalar */
            float4(this.scalar) * float4(other.group0.xyz, other.scalar), 
            /* e23, e31, e12, e45 */
            float4(this.scalar) * other.group1, 
            /* e15, e25, e35, e1234 */
            float4(this.group0.xy.yy, this.scalar, 0.0) * float4(float3(1.0), 0.0) * float4(other.group2.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(float3(0.0), other.scalar * this.e3215)
        );
        CircleRotor right_anti_dual = CircleRotor(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4((right_anti_dual.e415 * wedge.e1234) + (right_anti_dual.e12345 * wedge.e41), (right_anti_dual.e425 * wedge.e1234) + (right_anti_dual.e12345 * wedge.e42), (right_anti_dual.e435 * wedge.e1234) + (right_anti_dual.e12345 * wedge.e43), -(right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e321 * wedge.e45) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43)) + float4((right_anti_dual.group0.xyz.zxy * wedge.group3.yzx), right_anti_dual.e12345 * wedge.scalar) - float4((right_anti_dual.group0.xyz.yzx * wedge.group3.zxy), right_anti_dual.e423 * wedge.e15), 
            /* e23, e31, e12, e45 */
            float4((right_anti_dual.e235 * wedge.e1234) + (right_anti_dual.e12345 * wedge.e23), (right_anti_dual.e315 * wedge.e1234) + (right_anti_dual.e12345 * wedge.e31), (right_anti_dual.e125 * wedge.e1234) + (right_anti_dual.e12345 * wedge.e12), -(right_anti_dual.e425 * wedge.e4315) - (right_anti_dual.e435 * wedge.e4125)) + float4((right_anti_dual.group0.xyz * wedge.group3.www), right_anti_dual.e12345 * wedge.e45) - (right_anti_dual.group1.wwwx * wedge.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4((float3(right_anti_dual.e12345) * wedge.group2.xyz), 0.0) + float4((float3(wedge.e3215) * right_anti_dual.group1.xyz), 0.0) + float4((right_anti_dual.group2.yzx * wedge.group3.zxy), 0.0) - float4((right_anti_dual.group2.zxy * wedge.group3.yzx), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_anti_dual.e12345) * wedge.group3
        );
    }
}
public extension AntiDualNum {
    public VersorOdd anti_reject_orthogonally_from(AntiDipoleInversion other) {
        VersorEven wedge = VersorEven(
            /* e423, e431, e412, e12345 */
            float4(this.group0.xy.yy, this.scalar, this.e3215) * float4(other.group0.xyz, other.e4), 
            /* e415, e425, e435, e321 */
            float4(this.scalar) * other.group1, 
            /* e235, e315, e125, e5 */
            float4(this.scalar) * float4(other.group2.xyz, other.e5), 
            /* e1, e2, e3, e4 */
            float4(this.scalar) * float4(other.group3.xyz, other.e4)
        );
        DipoleInversion right_anti_dual = DipoleInversion(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            (right_anti_dual.group3.yzxy * float4(wedge.group0.zxy, wedge.e2)) + float4(float3(0.0), (right_anti_dual.e4125 * wedge.e3) + (right_anti_dual.e3215 * wedge.e4) - (right_anti_dual.e42 * wedge.e315) - (right_anti_dual.e43 * wedge.e125) - (right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435) - (right_anti_dual.e45 * wedge.e321) - (right_anti_dual.e15 * wedge.e423) - (right_anti_dual.e25 * wedge.e431) - (right_anti_dual.e35 * wedge.e412)) + float4((right_anti_dual.group0.xyz * wedge.group0.www), right_anti_dual.e1234 * wedge.e5) + float4((right_anti_dual.group2.www * wedge.group1.xyz), right_anti_dual.e4235 * wedge.e1) - float4((right_anti_dual.group3.zxy * wedge.group0.yzx), right_anti_dual.e41 * wedge.e235), 
            /* e23, e31, e12, e45 */
            float4((right_anti_dual.e1234 * wedge.e235) + (right_anti_dual.e3215 * wedge.e423), (right_anti_dual.e1234 * wedge.e315) + (right_anti_dual.e3215 * wedge.e431), (right_anti_dual.e1234 * wedge.e125) + (right_anti_dual.e3215 * wedge.e412), -(right_anti_dual.e4315 * wedge.e425) - (right_anti_dual.e4125 * wedge.e435)) + (float4(wedge.e12345) * right_anti_dual.group1) - (right_anti_dual.group3.xyzx * wedge.group1.wwwx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_anti_dual.e3215) * wedge.group1.xyz) + (float3(wedge.e12345) * right_anti_dual.group2.xyz) + (right_anti_dual.group3.zxy * wedge.group2.yzx) - (right_anti_dual.group3.yzx * wedge.group2.zxy)), right_anti_dual.e1234 * wedge.e12345), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_anti_dual.group3
        );
    }
}
public extension AntiDualNum {
    public AntiDualNum anti_reject_orthogonally_from(AntiDualNum other) {
        return AntiDualNum(
            /* e3215, scalar */
            float2(other.scalar) * float2((other.e3215 * this.scalar) + (other.scalar * this.e3215), other.scalar * this.scalar)
        );
    }
}
public extension AntiDualNum {
    public Scalar anti_reject_orthogonally_from(AntiFlatPoint other) {
        return Scalar(
            /* scalar */
            float4(other.group0.xyz, other.e321 * -1.0)[3] * this.scalar * other.e321 * -1.0
        );
    }
}
public extension AntiDualNum {
    public AntiMotor anti_reject_orthogonally_from(AntiFlector other) {
        AntiFlector wedge = AntiFlector(
            /* e235, e315, e125, e321 */
            float4(this.scalar) * other.group0, 
            /* e1, e2, e3, e5 */
            float4(this.scalar) * other.group1
        );
        Flector right_anti_dual = Flector(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4((wedge.group0.www * right_anti_dual.group1.xyz * float3(-1.0)), (wedge.e1 * right_anti_dual.e4235) + (wedge.e2 * right_anti_dual.e4315) + (wedge.e3 * right_anti_dual.e4125) - (wedge.e321 * right_anti_dual.e45)), 
            /* e15, e25, e35, e3215 */
            float4(((wedge.group0.yzx * right_anti_dual.group1.zxy) - (wedge.group0.zxy * right_anti_dual.group1.yzx)), 0.0)
        );
    }
}
public extension AntiDualNum {
    public Scalar anti_reject_orthogonally_from(AntiLine other) {
        AntiLine wedge = AntiLine(
            /* e23, e31, e12 */
            float3(this.scalar) * other.group0.xyz, 
            /* e15, e25, e35 */
            float3(this.scalar) * other.group1.xyz
        );
        Line right_anti_dual = Line(
            /* e415, e425, e435 */
            other.group0.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group1.xyz * float3(-1.0)
        );
        return Scalar(
            /* scalar */
            -(wedge.e23 * right_anti_dual.e415) - (wedge.e31 * right_anti_dual.e425) - (wedge.e12 * right_anti_dual.e435)
        );
    }
}
public extension AntiDualNum {
    public AntiMotor anti_reject_orthogonally_from(AntiMotor other) {
        AntiMotor wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4(this.scalar) * other.group0, 
            /* e15, e25, e35, e3215 */
            float4(this.group0.xy.yy, this.scalar, (this.e3215 * other.scalar) + (this.scalar * other.e3215)) * float4(other.group1.xyz, 1.0)
        );
        Motor right_anti_dual = Motor(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4((float3(right_anti_dual.e12345) * wedge.group0.xyz), (wedge.scalar * right_anti_dual.e12345) - (wedge.e23 * right_anti_dual.e415) - (wedge.e31 * right_anti_dual.e425) - (wedge.e12 * right_anti_dual.e435)), 
            /* e15, e25, e35, e3215 */
            float4(((float3(wedge.e3215) * right_anti_dual.group0.xyz) + (float3(right_anti_dual.e12345) * wedge.group1.xyz)), wedge.e3215 * right_anti_dual.e12345)
        );
    }
}
public extension AntiDualNum {
    public Scalar anti_reject_orthogonally_from(AntiPlane other) {
        AntiPlane wedge = AntiPlane(
            /* e1, e2, e3, e5 */
            float4(this.scalar) * other.group0
        );
        Plane right_anti_dual = Plane(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return Scalar(
            /* scalar */
            (wedge.e1 * right_anti_dual.e4235) + (wedge.e2 * right_anti_dual.e4315) + (wedge.e3 * right_anti_dual.e4125)
        );
    }
}
public extension AntiDualNum {
    public Scalar anti_reject_orthogonally_from(AntiScalar other) {
        return Scalar(
            /* scalar */
            this.scalar * pow(other.e12345, 2) * -1.0
        );
    }
}
public extension AntiDualNum {
    public Scalar anti_reject_orthogonally_from(Circle other) {
        Circle wedge = Circle(
            /* e423, e431, e412 */
            float3(this.scalar) * other.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(this.scalar) * other.group1, 
            /* e235, e315, e125 */
            float3(this.scalar) * other.group2.xyz
        );
        Dipole right_anti_dual = Dipole(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35 */
            other.group2.xyz
        );
        return Scalar(
            /* scalar */
            -(wedge.e423 * right_anti_dual.e15) - (wedge.e431 * right_anti_dual.e25) - (wedge.e412 * right_anti_dual.e35) - (wedge.e415 * right_anti_dual.e23) - (wedge.e425 * right_anti_dual.e31) - (wedge.e435 * right_anti_dual.e12) - (wedge.e321 * right_anti_dual.e45) - (wedge.e235 * right_anti_dual.e41) - (wedge.e315 * right_anti_dual.e42) - (wedge.e125 * right_anti_dual.e43)
        );
    }
}
public extension AntiDualNum {
    public AntiCircleRotor anti_reject_orthogonally_from(CircleRotor other) {
        CircleRotor wedge = CircleRotor(
            /* e423, e431, e412 */
            float3(this.scalar) * other.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(this.scalar) * other.group1, 
            /* e235, e315, e125, e12345 */
            float4(this.scalar) * other.group2
        );
        AntiCircleRotor right_anti_dual = AntiCircleRotor(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiCircleRotor(
            /* e41, e42, e43 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(wedge.e12345) * right_anti_dual.group1, 
            /* e15, e25, e35, scalar */
            float4((float3(wedge.e12345) * right_anti_dual.group2.xyz), (right_anti_dual.scalar * wedge.e12345) - (right_anti_dual.e41 * wedge.e235) - (right_anti_dual.e42 * wedge.e315) - (right_anti_dual.e43 * wedge.e125) - (right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435) - (right_anti_dual.e45 * wedge.e321) - (right_anti_dual.e15 * wedge.e423) - (right_anti_dual.e25 * wedge.e431) - (right_anti_dual.e35 * wedge.e412))
        );
    }
}
public extension AntiDualNum {
    public Scalar anti_reject_orthogonally_from(Dipole other) {
        Dipole wedge = Dipole(
            /* e41, e42, e43 */
            float3(this.scalar) * other.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(this.scalar) * other.group1, 
            /* e15, e25, e35 */
            float3(this.scalar) * other.group2.xyz
        );
        Circle right_anti_dual = Circle(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125 */
            other.group2.xyz * float3(-1.0)
        );
        return Scalar(
            /* scalar */
            -(right_anti_dual.e423 * wedge.e15) - (right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e321 * wedge.e45) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43)
        );
    }
}
public extension AntiDualNum {
    public AntiCircleRotor anti_reject_orthogonally_from(DipoleInversion other) {
        DipoleInversion wedge = DipoleInversion(
            /* e41, e42, e43 */
            float3(this.scalar) * other.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(this.scalar) * other.group1, 
            /* e15, e25, e35, e1234 */
            float4(this.scalar) * other.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(this.scalar) * other.group3
        );
        AntiDipoleInversion right_anti_dual = AntiDipoleInversion(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiCircleRotor(
            /* e41, e42, e43 */
            (float3(wedge.e1234) * right_anti_dual.group1.xyz) + (right_anti_dual.group0.xyz.zxy * wedge.group3.yzx) - (right_anti_dual.group0.xyz.yzx * wedge.group3.zxy), 
            /* e23, e31, e12, e45 */
            float4((right_anti_dual.e423 * wedge.e3215) + (right_anti_dual.e235 * wedge.e1234), (right_anti_dual.e431 * wedge.e3215) + (right_anti_dual.e315 * wedge.e1234), (right_anti_dual.e412 * wedge.e3215) + (right_anti_dual.e125 * wedge.e1234), -(right_anti_dual.e425 * wedge.e4315) - (right_anti_dual.e435 * wedge.e4125)) - (right_anti_dual.group1.wwwx * wedge.group3.xyzx), 
            /* e15, e25, e35, scalar */
            (float4(wedge.e3215) * float4(right_anti_dual.group1.xyz, right_anti_dual.e4)) + (wedge.group3.zxyx * float4(right_anti_dual.group2.yzx, right_anti_dual.e1)) + float4(float3(0.0), (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) + (right_anti_dual.e5 * wedge.e1234) - (right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e321 * wedge.e45) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43)) - float4((right_anti_dual.group2.zxy * wedge.group3.yzx), right_anti_dual.e423 * wedge.e15)
        );
    }
}
public extension AntiDualNum {
    public AntiDualNum anti_reject_orthogonally_from(DualNum other) {
        return AntiDualNum(
            /* e3215, scalar */
            float2(this.scalar * other.e12345) * float2(other.e5 * -1.0, other.e12345 * -1.0)
        );
    }
}
public extension AntiDualNum {
    public Scalar anti_reject_orthogonally_from(FlatPoint other) {
        return Scalar(
            /* scalar */
            this.scalar * pow(other.e45, 2) * -1.0
        );
    }
}
public extension AntiDualNum {
    public AntiMotor anti_reject_orthogonally_from(Flector other) {
        Flector wedge = Flector(
            /* e15, e25, e35, e45 */
            float4(this.scalar) * other.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4(this.scalar) * other.group1
        );
        AntiFlector right_anti_dual = AntiFlector(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4((right_anti_dual.group0.www * wedge.group1.xyz * float3(-1.0)), (right_anti_dual.e1 * wedge.e4235) + (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) - (right_anti_dual.e321 * wedge.e45)), 
            /* e15, e25, e35, e3215 */
            float4(((right_anti_dual.group0.yzx * wedge.group1.zxy) - (right_anti_dual.group0.zxy * wedge.group1.yzx)), 0.0)
        );
    }
}
public extension AntiDualNum {
    public Scalar anti_reject_orthogonally_from(Line other) {
        Line wedge = Line(
            /* e415, e425, e435 */
            float3(this.scalar) * other.group0.xyz, 
            /* e235, e315, e125 */
            float3(this.scalar) * other.group1.xyz
        );
        AntiLine right_anti_dual = AntiLine(
            /* e23, e31, e12 */
            other.group0.xyz, 
            /* e15, e25, e35 */
            other.group1.xyz
        );
        return Scalar(
            /* scalar */
            -(right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435)
        );
    }
}
public extension AntiDualNum {
    public AntiMotor anti_reject_orthogonally_from(Motor other) {
        Motor wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4(this.scalar) * other.group0, 
            /* e235, e315, e125, e5 */
            float4(this.scalar) * other.group1
        );
        AntiMotor right_anti_dual = AntiMotor(
            /* e23, e31, e12, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4((float3(wedge.e12345) * right_anti_dual.group0.xyz), (right_anti_dual.scalar * wedge.e12345) - (right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435)), 
            /* e15, e25, e35, e3215 */
            float4(((float3(right_anti_dual.e3215) * wedge.group0.xyz) + (float3(wedge.e12345) * right_anti_dual.group1.xyz)), right_anti_dual.e3215 * wedge.e12345)
        );
    }
}
public extension AntiDualNum {
    public MultiVector anti_reject_orthogonally_from(MultiVector other) {
        MultiVector wedge = MultiVector(
            /* scalar, e12345 */
            float2(this.scalar * other.scalar, (this.e3215 * other.e4) + (this.scalar * other.e12345)), 
            /* e1, e2, e3, e4 */
            float4(this.scalar) * other.group1, 
            /* e5 */
            this.scalar * other.e5, 
            /* e15, e25, e35, e45 */
            float4(this.scalar) * other.group3, 
            /* e41, e42, e43 */
            float3(this.scalar) * other.group4.xyz, 
            /* e23, e31, e12 */
            float3(this.scalar) * other.group5.xyz, 
            /* e415, e425, e435, e321 */
            float4(this.scalar) * other.group6, 
            /* e423, e431, e412 */
            float3(this.scalar) * other.group7.xyz, 
            /* e235, e315, e125 */
            float3(this.scalar) * other.group8.xyz, 
            /* e4235, e4315, e4125, e3215 */
            float4(this.group0.xy.yy, this.scalar, (this.e3215 * other.scalar) + (this.scalar * other.e3215)) * float4(other.group9.xyz, 1.0), 
            /* e1234 */
            this.scalar * other.e1234
        );
        MultiVector right_anti_dual = MultiVector(
            /* scalar, e12345 */
            other.group0.xy.yx * float2(-1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215, 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43 */
            other.group7.xyz, 
            /* e23, e31, e12 */
            other.group6.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412 */
            other.group4.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group3.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2((right_anti_dual.scalar * wedge.e12345) + (right_anti_dual.e12345 * wedge.scalar) + (right_anti_dual.e1 * wedge.e4235) + (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) + (right_anti_dual.e4 * wedge.e3215) + (right_anti_dual.e5 * wedge.e1234) + (right_anti_dual.e4235 * wedge.e1) + (right_anti_dual.e4315 * wedge.e2) + (right_anti_dual.e4125 * wedge.e3) + (right_anti_dual.e3215 * wedge.e4) + (right_anti_dual.e1234 * wedge.e5) - (right_anti_dual.e15 * wedge.e423) - (right_anti_dual.e25 * wedge.e431) - (right_anti_dual.e35 * wedge.e412) - (right_anti_dual.e45 * wedge.e321) - (right_anti_dual.e41 * wedge.e235) - (right_anti_dual.e42 * wedge.e315) - (right_anti_dual.e43 * wedge.e125) - (right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e321 * wedge.e45) - (right_anti_dual.e423 * wedge.e15) - (right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43), right_anti_dual.e12345 * wedge.e12345), 
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e15 * wedge.e1234) + (right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e4125 * wedge.e31), (right_anti_dual.e25 * wedge.e1234) + (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e4235 * wedge.e12), (right_anti_dual.e35 * wedge.e1234) + (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e4315 * wedge.e23), -(right_anti_dual.e415 * wedge.e423) - (right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412) - (right_anti_dual.e1234 * wedge.e45)) + (float4(right_anti_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_anti_dual.group1) + (wedge.group9.yzxx * float4(right_anti_dual.group5.xyz.zxy, right_anti_dual.e41)) + float4((wedge.group4.xyz * right_anti_dual.group9.www), right_anti_dual.e45 * wedge.e1234) + float4((right_anti_dual.group7.xyz.zxy * wedge.group8.xyz.yzx), right_anti_dual.e42 * wedge.e4315) + float4((right_anti_dual.group8.xyz.yzx * wedge.group7.xyz.zxy), right_anti_dual.e43 * wedge.e4125) - (right_anti_dual.group9.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((float3(right_anti_dual.e1234) * wedge.group3.xyz), right_anti_dual.e4125 * wedge.e43) - float4((right_anti_dual.group4.xyz * wedge.group9.www), right_anti_dual.e423 * wedge.e415) - float4((right_anti_dual.group5.xyz.yzx * wedge.group9.zxy), right_anti_dual.e431 * wedge.e425) - float4((right_anti_dual.group7.xyz.yzx * wedge.group8.xyz.zxy), right_anti_dual.e412 * wedge.e435) - float4((right_anti_dual.group8.xyz.zxy * wedge.group7.xyz.yzx), right_anti_dual.e4235 * wedge.e41), 
            /* e5 */
            (right_anti_dual.e12345 * wedge.e5) + (right_anti_dual.e5 * wedge.e12345) + (right_anti_dual.e4235 * wedge.e15) + (right_anti_dual.e4315 * wedge.e25) + (right_anti_dual.e4125 * wedge.e35) + (right_anti_dual.e3215 * wedge.e45) - (right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125) - (right_anti_dual.e45 * wedge.e3215) - (right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435), 
            /* e15, e25, e35, e45 */
            float4((right_anti_dual.e415 * wedge.e3215) + (right_anti_dual.e315 * wedge.e4125) + (right_anti_dual.e4125 * wedge.e315) + (right_anti_dual.e3215 * wedge.e415), (right_anti_dual.e425 * wedge.e3215) + (right_anti_dual.e125 * wedge.e4235) + (right_anti_dual.e4235 * wedge.e125) + (right_anti_dual.e3215 * wedge.e425), (right_anti_dual.e435 * wedge.e3215) + (right_anti_dual.e235 * wedge.e4315) + (right_anti_dual.e4315 * wedge.e235) + (right_anti_dual.e3215 * wedge.e435), -(right_anti_dual.e435 * wedge.e4125) - (right_anti_dual.e4235 * wedge.e415) - (right_anti_dual.e4315 * wedge.e425) - (right_anti_dual.e4125 * wedge.e435)) + (float4(right_anti_dual.e12345) * wedge.group3) + (float4(wedge.e12345) * right_anti_dual.group3) - (wedge.group9.yzxx * float4(right_anti_dual.group8.xyz.zxy, right_anti_dual.e415)) - float4((wedge.group8.xyz.zxy * right_anti_dual.group9.yzx), right_anti_dual.e425 * wedge.e4315), 
            /* e41, e42, e43 */
            (float3(right_anti_dual.e12345) * wedge.group4.xyz) + (float3(right_anti_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_anti_dual.group4.xyz) + (float3(wedge.e1234) * right_anti_dual.group6.xyz) + (right_anti_dual.group7.xyz.zxy * wedge.group9.yzx) + (wedge.group7.xyz.zxy * right_anti_dual.group9.yzx) - (right_anti_dual.group7.xyz.yzx * wedge.group9.zxy) - (wedge.group7.xyz.yzx * right_anti_dual.group9.zxy), 
            /* e23, e31, e12 */
            (float3(right_anti_dual.e12345) * wedge.group5.xyz) + (float3(right_anti_dual.e3215) * wedge.group7.xyz) + (float3(right_anti_dual.e1234) * wedge.group8.xyz) + (float3(wedge.e12345) * right_anti_dual.group5.xyz) + (float3(wedge.e3215) * right_anti_dual.group7.xyz) + (float3(wedge.e1234) * right_anti_dual.group8.xyz) - (float3(right_anti_dual.e321) * wedge.group9.xyz) - (float3(wedge.e321) * right_anti_dual.group9.xyz), 
            /* e415, e425, e435, e321 */
            (float4(right_anti_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_anti_dual.group6) + (right_anti_dual.group9.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - float4((right_anti_dual.group9.zxy * wedge.group9.yzx), right_anti_dual.e1234 * wedge.e3215), 
            /* e423, e431, e412 */
            (float3(right_anti_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_anti_dual.group7.xyz) + (float3(wedge.e1234) * right_anti_dual.group9.xyz) - (float3(right_anti_dual.e1234) * wedge.group9.xyz), 
            /* e235, e315, e125 */
            (float3(right_anti_dual.e12345) * wedge.group8.xyz) + (float3(right_anti_dual.e3215) * wedge.group9.xyz) + (float3(wedge.e12345) * right_anti_dual.group8.xyz) - (float3(wedge.e3215) * right_anti_dual.group9.xyz), 
            /* e4235, e4315, e4125, e3215 */
            (float4(right_anti_dual.e12345) * wedge.group9) + (float4(wedge.e12345) * right_anti_dual.group9), 
            /* e1234 */
            (right_anti_dual.e12345 * wedge.e1234) + (right_anti_dual.e1234 * wedge.e12345)
        );
    }
}
public extension AntiDualNum {
    public Scalar anti_reject_orthogonally_from(Plane other) {
        Plane wedge = Plane(
            /* e4235, e4315, e4125, e3215 */
            float4(this.scalar) * other.group0
        );
        AntiPlane right_anti_dual = AntiPlane(
            /* e1, e2, e3, e5 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return Scalar(
            /* scalar */
            (right_anti_dual.e1 * wedge.e4235) + (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125)
        );
    }
}
public extension AntiDualNum {
    public VersorOdd anti_reject_orthogonally_from(RoundPoint other) {
        VersorEven wedge = VersorEven(
            /* e423, e431, e412, e12345 */
            float4(float3(0.0), this.e3215 * other.e4), 
            /* e415, e425, e435, e321 */
            float4(0.0), 
            /* e235, e315, e125, e5 */
            float4(float3(0.0), this.scalar * other.e5), 
            /* e1, e2, e3, e4 */
            float4(this.scalar) * other.group0
        );
        Sphere right_anti_dual = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(right_anti_dual.e4125 * wedge.e431 * -1.0, right_anti_dual.e4235 * wedge.e412 * -1.0, right_anti_dual.e4315 * wedge.e423 * -1.0, (right_anti_dual.e4125 * wedge.e3) + (right_anti_dual.e3215 * wedge.e4) + (right_anti_dual.e1234 * wedge.e5)) + (right_anti_dual.group0.yzxx * float4(wedge.group0.zxy, wedge.e1)) + float4((float3(right_anti_dual.e1234) * wedge.group1.xyz), right_anti_dual.e4315 * wedge.e2), 
            /* e23, e31, e12, e45 */
            float4((float3(right_anti_dual.e3215) * wedge.group0.xyz), 0.0) + float4((float3(right_anti_dual.e1234) * wedge.group2.xyz), 0.0) - float4((float3(wedge.e321) * right_anti_dual.group0.xyz), 0.0), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_anti_dual.e3215) * wedge.group1.xyz) + (right_anti_dual.group0.zxy * wedge.group2.yzx) - (right_anti_dual.group0.yzx * wedge.group2.zxy)), right_anti_dual.e1234 * wedge.e12345), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_anti_dual.group0
        );
    }
}
public extension AntiDualNum {
    public AntiDualNum anti_reject_orthogonally_from(Scalar other) {
        return AntiDualNum(
            /* e3215, scalar */
            float2(other.scalar) * float2(this.e3215 * other.scalar, this.scalar * other.scalar)
        );
    }
}
public extension AntiDualNum {
    public Scalar anti_reject_orthogonally_from(Sphere other) {
        Sphere wedge = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(this.scalar) * other.group0, 
            /* e1234 */
            this.scalar * other.e1234
        );
        RoundPoint right_anti_dual = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(other.group0.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215
        );
        return Scalar(
            /* scalar */
            (right_anti_dual.e1 * wedge.e4235) + (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) + (right_anti_dual.e4 * wedge.e3215) + (right_anti_dual.e5 * wedge.e1234)
        );
    }
}
public extension AntiDualNum {
    public VersorOdd anti_reject_orthogonally_from(VersorEven other) {
        VersorEven wedge = VersorEven(
            /* e423, e431, e412, e12345 */
            float4(this.group0.xy.yy, this.scalar, (this.e3215 * other.e4) + (this.scalar * other.e12345)) * float4(other.group0.xyz, 1.0), 
            /* e415, e425, e435, e321 */
            float4(this.scalar) * other.group1, 
            /* e235, e315, e125, e5 */
            float4(this.scalar) * other.group2, 
            /* e1, e2, e3, e4 */
            float4(this.scalar) * other.group3
        );
        VersorOdd right_anti_dual = VersorOdd(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            (wedge.group0.zxyw * float4(right_anti_dual.group3.yzx, right_anti_dual.scalar)) + float4(float3(0.0), (wedge.e2 * right_anti_dual.e4315) + (wedge.e3 * right_anti_dual.e4125) + (wedge.e4 * right_anti_dual.e3215) - (wedge.e431 * right_anti_dual.e25) - (wedge.e412 * right_anti_dual.e35) - (wedge.e415 * right_anti_dual.e23) - (wedge.e425 * right_anti_dual.e31) - (wedge.e435 * right_anti_dual.e12) - (wedge.e321 * right_anti_dual.e45) - (wedge.e235 * right_anti_dual.e41) - (wedge.e315 * right_anti_dual.e42) - (wedge.e125 * right_anti_dual.e43)) + float4((wedge.group0.www * right_anti_dual.group0.xyz), wedge.e5 * right_anti_dual.e1234) + float4((right_anti_dual.group2.www * wedge.group1.xyz), wedge.e1 * right_anti_dual.e4235) - (wedge.group0.yzxx * float4(right_anti_dual.group3.zxy, right_anti_dual.e15)), 
            /* e23, e31, e12, e45 */
            float4((wedge.e12345 * right_anti_dual.e23) + (wedge.e235 * right_anti_dual.e1234), (wedge.e12345 * right_anti_dual.e31) + (wedge.e315 * right_anti_dual.e1234), (wedge.e12345 * right_anti_dual.e12) + (wedge.e125 * right_anti_dual.e1234), -(wedge.e425 * right_anti_dual.e4315) - (wedge.e435 * right_anti_dual.e4125)) + (wedge.group0 * float4(right_anti_dual.group3.www, right_anti_dual.e45)) - (wedge.group1.wwwx * right_anti_dual.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(wedge.e12345) * right_anti_dual.group2.xyz) + (float3(right_anti_dual.e3215) * wedge.group1.xyz) + (wedge.group2.yzx * right_anti_dual.group3.zxy) - (wedge.group2.zxy * right_anti_dual.group3.yzx)), wedge.e12345 * right_anti_dual.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_anti_dual.group3
        );
    }
}
public extension AntiDualNum {
    public VersorOdd anti_reject_orthogonally_from(VersorOdd other) {
        VersorOdd wedge = VersorOdd(
            /* e41, e42, e43, scalar */
            float4(this.scalar) * other.group0, 
            /* e23, e31, e12, e45 */
            float4(this.scalar) * other.group1, 
            /* e15, e25, e35, e1234 */
            float4(this.scalar) * other.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(this.group0.xy.yy, this.scalar, (this.e3215 * other.scalar) + (this.scalar * other.e3215)) * float4(other.group3.xyz, 1.0)
        );
        VersorEven right_anti_dual = VersorEven(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            (right_anti_dual.group0.zxyw * float4(wedge.group3.yzx, wedge.scalar)) + float4(float3(0.0), (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) + (right_anti_dual.e4 * wedge.e3215) - (right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e321 * wedge.e45) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43)) + float4((right_anti_dual.group0.www * wedge.group0.xyz), right_anti_dual.e5 * wedge.e1234) + float4((wedge.group2.www * right_anti_dual.group1.xyz), right_anti_dual.e1 * wedge.e4235) - (right_anti_dual.group0.yzxx * float4(wedge.group3.zxy, wedge.e15)), 
            /* e23, e31, e12, e45 */
            float4((right_anti_dual.e12345 * wedge.e23) + (right_anti_dual.e235 * wedge.e1234), (right_anti_dual.e12345 * wedge.e31) + (right_anti_dual.e315 * wedge.e1234), (right_anti_dual.e12345 * wedge.e12) + (right_anti_dual.e125 * wedge.e1234), -(right_anti_dual.e425 * wedge.e4315) - (right_anti_dual.e435 * wedge.e4125)) + (right_anti_dual.group0 * float4(wedge.group3.www, wedge.e45)) - (right_anti_dual.group1.wwwx * wedge.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_anti_dual.e12345) * wedge.group2.xyz) + (float3(wedge.e3215) * right_anti_dual.group1.xyz) + (right_anti_dual.group2.yzx * wedge.group3.zxy) - (right_anti_dual.group2.zxy * wedge.group3.yzx)), right_anti_dual.e12345 * wedge.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_anti_dual.e12345) * wedge.group3
        );
    }
}
public extension AntiFlatPoint {
    // Fancy infix trick (first half)
    public AntiRejectOrthogonallyFromInfixPartial<AntiFlatPoint> operator /(AntiRejectOrthogonallyFromInfix rhs) {
        return AntiRejectOrthogonallyFromInfixPartial<AntiFlatPoint>(this);
    }
}
public extension AntiRejectOrthogonallyFromInfixPartial<AntiFlatPoint> {
    // Fancy infix trick (second half)
    public VersorEven operator /(AntiCircleRotor rhs) {
        return this.a.anti_reject_orthogonally_from(rhs);
    }
}
public extension AntiFlatPoint {
    public VersorEven anti_reject_orthogonally_from(AntiCircleRotor other) {
        CircleRotor wedge = CircleRotor(
            /* e423, e431, e412 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(float3(0.0), other.scalar * this.e321), 
            /* e235, e315, e125, e12345 */
            float4((other.group2.www * this.group0.xyz), -(other.e41 * this.e235) - (other.e42 * this.e315) - (other.e43 * this.e125) - (other.e45 * this.e321))
        );
        CircleRotor right_anti_dual = CircleRotor(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(((float3(right_anti_dual.e12345) * wedge.group0.xyz) + (float3(wedge.e12345) * right_anti_dual.group0.xyz)), right_anti_dual.e12345 * wedge.e12345), 
            /* e415, e425, e435, e321 */
            (float4(right_anti_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_anti_dual.group1), 
            /* e235, e315, e125, e5 */
            float4((right_anti_dual.e235 * wedge.e12345) + (right_anti_dual.e12345 * wedge.e235), (right_anti_dual.e315 * wedge.e12345) + (right_anti_dual.e12345 * wedge.e315), (right_anti_dual.e125 * wedge.e12345) + (right_anti_dual.e12345 * wedge.e125), -(right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435)), 
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e412 * wedge.e315) + (right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e315 * wedge.e412), (right_anti_dual.e423 * wedge.e125) + (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e125 * wedge.e423), (right_anti_dual.e431 * wedge.e235) + (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e235 * wedge.e431), -(right_anti_dual.e412 * wedge.e435) - (right_anti_dual.e415 * wedge.e423) - (right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412)) - float4((right_anti_dual.group0.xyz.yzx * wedge.group2.zxy), right_anti_dual.e423 * wedge.e415) - float4((wedge.group0.xyz.yzx * right_anti_dual.group2.zxy), right_anti_dual.e431 * wedge.e425)
        );
    }
}
public extension AntiFlatPoint {
    public AntiDipoleInversion anti_reject_orthogonally_from(AntiDipoleInversion other) {
        Sphere wedge = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4((other.group2.www * this.group0.xyz * float3(-1.0)), (other.e1 * this.e235) + (other.e2 * this.e315) + (other.e3 * this.e125) + (other.e5 * this.e321)), 
            /* e1234 */
            other.e4 * this.e321 * -1.0
        );
        DipoleInversion right_anti_dual = DipoleInversion(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            (float3(wedge.e1234) * right_anti_dual.group3.xyz) - (float3(right_anti_dual.e1234) * wedge.group0.xyz), 
            /* e415, e425, e435, e321 */
            (right_anti_dual.group3.yzxw * float4(wedge.group0.zxy, wedge.e1234)) - (wedge.group0.yzxw * float4(right_anti_dual.group3.zxy, right_anti_dual.e1234)), 
            /* e235, e315, e125, e4 */
            float4(right_anti_dual.e4235 * wedge.e3215 * -1.0, right_anti_dual.e4315 * wedge.e3215 * -1.0, right_anti_dual.e4125 * wedge.e3215 * -1.0, (right_anti_dual.e42 * wedge.e4315) + (right_anti_dual.e43 * wedge.e4125) + (right_anti_dual.e45 * wedge.e1234)) + (wedge.group0.xyzx * float4(right_anti_dual.group3.www, right_anti_dual.e41)), 
            /* e1, e2, e3, e5 */
            float4((right_anti_dual.e12 * wedge.e4315) + (right_anti_dual.e15 * wedge.e1234), (right_anti_dual.e23 * wedge.e4125) + (right_anti_dual.e25 * wedge.e1234), (right_anti_dual.e31 * wedge.e4235) + (right_anti_dual.e35 * wedge.e1234), -(right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125)) - (float4(wedge.e3215) * float4(right_anti_dual.group0.xyz, right_anti_dual.e45)) - (wedge.group0.zxyx * float4(right_anti_dual.group1.yzx, right_anti_dual.e15))
        );
    }
}
public extension AntiFlatPoint {
    public AntiFlatPoint anti_reject_orthogonally_from(AntiDualNum other) {
        return AntiFlatPoint(
            /* e235, e315, e125, e321 */
            float4(other.scalar) * float4(other.scalar * this.e235, other.scalar * this.e315, other.scalar * this.e125, other.scalar * this.e321)
        );
    }
}
public extension AntiFlatPoint {
    public AntiFlector anti_reject_orthogonally_from(AntiFlector other) {
        AntiDualNum wedge = AntiDualNum(
            /* e3215, scalar */
            float2((this.e235 * other.e1) + (this.e315 * other.e2) + (this.e125 * other.e3) + (this.e321 * other.e5), 0.0)
        );
        Flector right_anti_dual = Flector(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiFlector(
            /* e235, e315, e125, e321 */
            float4(wedge.group0.xy.xx, wedge.e3215, 0.0) * float4(float3(1.0), 0.0) * float4(right_anti_dual.group1.xyz, 0.0) * float4(-1.0, -1.0, -1.0, 0.0), 
            /* e1, e2, e3, e5 */
            float4(float3(0.0), wedge.e3215 * right_anti_dual.e45 * -1.0)
        );
    }
}
public extension AntiFlatPoint {
    public AntiFlector anti_reject_orthogonally_from(AntiMotor other) {
        AntiFlatPoint wedge = AntiFlatPoint(
            /* e235, e315, e125, e321 */
            float4(other.scalar) * this.group0
        );
        Motor right_anti_dual = Motor(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiFlector(
            /* e235, e315, e125, e321 */
            float4(right_anti_dual.e12345) * wedge.group0, 
            /* e1, e2, e3, e5 */
            float4((wedge.group0.www * right_anti_dual.group0.xyz), -(wedge.e235 * right_anti_dual.e415) - (wedge.e315 * right_anti_dual.e425) - (wedge.e125 * right_anti_dual.e435))
        );
    }
}
public extension AntiFlatPoint {
    public AntiFlatPoint anti_reject_orthogonally_from(AntiPlane other) {
        AntiDualNum wedge = AntiDualNum(
            /* e3215, scalar */
            float2((this.e235 * other.e1) + (this.e315 * other.e2) + (this.e125 * other.e3) + (this.e321 * other.e5), 0.0)
        );
        return AntiFlatPoint(
            /* e235, e315, e125, e321 */
            float4(wedge.group0.xy.xx, wedge.e3215, 0.0) * float4(float3(1.0), 0.0) * float4(other.group0.xyz, 0.0) * float4(-1.0, -1.0, -1.0, 0.0)
        );
    }
}
public extension AntiFlatPoint {
    public Circle anti_reject_orthogonally_from(Dipole other) {
        AntiScalar wedge = AntiScalar(
            /* e12345 */
            -(this.e235 * other.e41) - (this.e315 * other.e42) - (this.e125 * other.e43) - (this.e321 * other.e45)
        );
        Circle right_anti_dual = Circle(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125 */
            other.group2.xyz * float3(-1.0)
        );
        return Circle(
            /* e423, e431, e412 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(wedge.e12345) * right_anti_dual.group1, 
            /* e235, e315, e125 */
            float3(wedge.e12345) * right_anti_dual.group2.xyz
        );
    }
}
public extension AntiFlatPoint {
    public AntiDipoleInversion anti_reject_orthogonally_from(DipoleInversion other) {
        AntiScalar wedge = AntiScalar(
            /* e12345 */
            -(this.e235 * other.e41) - (this.e315 * other.e42) - (this.e125 * other.e43) - (this.e321 * other.e45)
        );
        AntiDipoleInversion right_anti_dual = AntiDipoleInversion(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(wedge.e12345) * right_anti_dual.group1, 
            /* e235, e315, e125, e4 */
            float4(wedge.e12345) * right_anti_dual.group2, 
            /* e1, e2, e3, e5 */
            float4(wedge.e12345) * right_anti_dual.group3
        );
    }
}
public extension AntiFlatPoint {
    public AntiFlatPoint anti_reject_orthogonally_from(FlatPoint other) {
        return AntiFlatPoint(
            /* e235, e315, e125, e321 */
            float4(this.e321 * other.e45 * -1.0) * float4(other.e15 * -1.0, other.e25 * -1.0, other.e35 * -1.0, other.e45)
        );
    }
}
public extension AntiFlatPoint {
    public AntiFlector anti_reject_orthogonally_from(Flector other) {
        AntiScalar wedge = AntiScalar(
            /* e12345 */
            this.e321 * other.e45 * -1.0
        );
        AntiFlector right_anti_dual = AntiFlector(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiFlector(
            /* e235, e315, e125, e321 */
            float4(wedge.e12345) * right_anti_dual.group0, 
            /* e1, e2, e3, e5 */
            float4(wedge.e12345) * right_anti_dual.group1
        );
    }
}
public extension AntiFlatPoint {
    public MultiVector anti_reject_orthogonally_from(MultiVector other) {
        MultiVector wedge = MultiVector(
            /* scalar, e12345 */
            float2(0.0, -(this.e235 * other.e41) - (this.e315 * other.e42) - (this.e125 * other.e43) - (this.e321 * other.e45)), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5 */
            0.0, 
            /* e15, e25, e35, e45 */
            float4(0.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(float3(0.0), this.e321 * other.scalar), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            float3(other.scalar) * this.group0.xyz, 
            /* e4235, e4315, e4125, e3215 */
            float4((float3(other.e4) * this.group0.xyz * float3(-1.0)), (this.e235 * other.e1) + (this.e315 * other.e2) + (this.e125 * other.e3) + (this.e321 * other.e5)), 
            /* e1234 */
            this.e321 * other.e4 * -1.0
        );
        MultiVector right_anti_dual = MultiVector(
            /* scalar, e12345 */
            other.group0.xy.yx * float2(-1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215, 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43 */
            other.group7.xyz, 
            /* e23, e31, e12 */
            other.group6.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412 */
            other.group4.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group3.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2((right_anti_dual.scalar * wedge.e12345) + (right_anti_dual.e12345 * wedge.scalar) + (right_anti_dual.e1 * wedge.e4235) + (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) + (right_anti_dual.e4 * wedge.e3215) + (right_anti_dual.e5 * wedge.e1234) + (right_anti_dual.e4235 * wedge.e1) + (right_anti_dual.e4315 * wedge.e2) + (right_anti_dual.e4125 * wedge.e3) + (right_anti_dual.e3215 * wedge.e4) + (right_anti_dual.e1234 * wedge.e5) - (right_anti_dual.e15 * wedge.e423) - (right_anti_dual.e25 * wedge.e431) - (right_anti_dual.e35 * wedge.e412) - (right_anti_dual.e45 * wedge.e321) - (right_anti_dual.e41 * wedge.e235) - (right_anti_dual.e42 * wedge.e315) - (right_anti_dual.e43 * wedge.e125) - (right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e321 * wedge.e45) - (right_anti_dual.e423 * wedge.e15) - (right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43), right_anti_dual.e12345 * wedge.e12345), 
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e15 * wedge.e1234) + (right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e4125 * wedge.e31), (right_anti_dual.e25 * wedge.e1234) + (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e4235 * wedge.e12), (right_anti_dual.e35 * wedge.e1234) + (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e4315 * wedge.e23), -(right_anti_dual.e415 * wedge.e423) - (right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412) - (right_anti_dual.e1234 * wedge.e45)) + (float4(right_anti_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_anti_dual.group1) + (wedge.group9.yzxx * float4(right_anti_dual.group5.xyz.zxy, right_anti_dual.e41)) + float4((wedge.group4.xyz * right_anti_dual.group9.www), right_anti_dual.e45 * wedge.e1234) + float4((right_anti_dual.group7.xyz.zxy * wedge.group8.xyz.yzx), right_anti_dual.e42 * wedge.e4315) + float4((right_anti_dual.group8.xyz.yzx * wedge.group7.xyz.zxy), right_anti_dual.e43 * wedge.e4125) - (right_anti_dual.group9.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((float3(right_anti_dual.e1234) * wedge.group3.xyz), right_anti_dual.e4125 * wedge.e43) - float4((right_anti_dual.group4.xyz * wedge.group9.www), right_anti_dual.e423 * wedge.e415) - float4((right_anti_dual.group5.xyz.yzx * wedge.group9.zxy), right_anti_dual.e431 * wedge.e425) - float4((right_anti_dual.group7.xyz.yzx * wedge.group8.xyz.zxy), right_anti_dual.e412 * wedge.e435) - float4((right_anti_dual.group8.xyz.zxy * wedge.group7.xyz.yzx), right_anti_dual.e4235 * wedge.e41), 
            /* e5 */
            (right_anti_dual.e12345 * wedge.e5) + (right_anti_dual.e5 * wedge.e12345) + (right_anti_dual.e4235 * wedge.e15) + (right_anti_dual.e4315 * wedge.e25) + (right_anti_dual.e4125 * wedge.e35) + (right_anti_dual.e3215 * wedge.e45) - (right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125) - (right_anti_dual.e45 * wedge.e3215) - (right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435), 
            /* e15, e25, e35, e45 */
            float4((right_anti_dual.e415 * wedge.e3215) + (right_anti_dual.e315 * wedge.e4125) + (right_anti_dual.e4125 * wedge.e315) + (right_anti_dual.e3215 * wedge.e415), (right_anti_dual.e425 * wedge.e3215) + (right_anti_dual.e125 * wedge.e4235) + (right_anti_dual.e4235 * wedge.e125) + (right_anti_dual.e3215 * wedge.e425), (right_anti_dual.e435 * wedge.e3215) + (right_anti_dual.e235 * wedge.e4315) + (right_anti_dual.e4315 * wedge.e235) + (right_anti_dual.e3215 * wedge.e435), -(right_anti_dual.e435 * wedge.e4125) - (right_anti_dual.e4235 * wedge.e415) - (right_anti_dual.e4315 * wedge.e425) - (right_anti_dual.e4125 * wedge.e435)) + (float4(right_anti_dual.e12345) * wedge.group3) + (float4(wedge.e12345) * right_anti_dual.group3) - (wedge.group9.yzxx * float4(right_anti_dual.group8.xyz.zxy, right_anti_dual.e415)) - float4((wedge.group8.xyz.zxy * right_anti_dual.group9.yzx), right_anti_dual.e425 * wedge.e4315), 
            /* e41, e42, e43 */
            (float3(right_anti_dual.e12345) * wedge.group4.xyz) + (float3(right_anti_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_anti_dual.group4.xyz) + (float3(wedge.e1234) * right_anti_dual.group6.xyz) + (right_anti_dual.group7.xyz.zxy * wedge.group9.yzx) + (wedge.group7.xyz.zxy * right_anti_dual.group9.yzx) - (right_anti_dual.group7.xyz.yzx * wedge.group9.zxy) - (wedge.group7.xyz.yzx * right_anti_dual.group9.zxy), 
            /* e23, e31, e12 */
            (float3(right_anti_dual.e12345) * wedge.group5.xyz) + (float3(right_anti_dual.e3215) * wedge.group7.xyz) + (float3(right_anti_dual.e1234) * wedge.group8.xyz) + (float3(wedge.e12345) * right_anti_dual.group5.xyz) + (float3(wedge.e3215) * right_anti_dual.group7.xyz) + (float3(wedge.e1234) * right_anti_dual.group8.xyz) - (float3(right_anti_dual.e321) * wedge.group9.xyz) - (float3(wedge.e321) * right_anti_dual.group9.xyz), 
            /* e415, e425, e435, e321 */
            (float4(right_anti_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_anti_dual.group6) + (right_anti_dual.group9.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - float4((right_anti_dual.group9.zxy * wedge.group9.yzx), right_anti_dual.e1234 * wedge.e3215), 
            /* e423, e431, e412 */
            (float3(right_anti_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_anti_dual.group7.xyz) + (float3(wedge.e1234) * right_anti_dual.group9.xyz) - (float3(right_anti_dual.e1234) * wedge.group9.xyz), 
            /* e235, e315, e125 */
            (float3(right_anti_dual.e12345) * wedge.group8.xyz) + (float3(right_anti_dual.e3215) * wedge.group9.xyz) + (float3(wedge.e12345) * right_anti_dual.group8.xyz) - (float3(wedge.e3215) * right_anti_dual.group9.xyz), 
            /* e4235, e4315, e4125, e3215 */
            (float4(right_anti_dual.e12345) * wedge.group9) + (float4(wedge.e12345) * right_anti_dual.group9), 
            /* e1234 */
            (right_anti_dual.e12345 * wedge.e1234) + (right_anti_dual.e1234 * wedge.e12345)
        );
    }
}
public extension AntiFlatPoint {
    public Circle anti_reject_orthogonally_from(RoundPoint other) {
        Sphere wedge = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4((float3(other.e4) * this.group0.xyz * float3(-1.0)), (this.e235 * other.e1) + (this.e315 * other.e2) + (this.e125 * other.e3) + (this.e321 * other.e5)), 
            /* e1234 */
            this.e321 * other.e4 * -1.0
        );
        Sphere right_anti_dual = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        return Circle(
            /* e423, e431, e412 */
            (float3(wedge.e1234) * right_anti_dual.group0.xyz) - (float3(right_anti_dual.e1234) * wedge.group0.xyz), 
            /* e415, e425, e435, e321 */
            (right_anti_dual.group0.yzxw * float4(wedge.group0.zxy, wedge.e1234)) - float4((right_anti_dual.group0.zxy * wedge.group0.yzx), right_anti_dual.e1234 * wedge.e3215), 
            /* e235, e315, e125 */
            (float3(right_anti_dual.e3215) * wedge.group0.xyz) - (float3(wedge.e3215) * right_anti_dual.group0.xyz)
        );
    }
}
public extension AntiFlatPoint {
    public AntiFlatPoint anti_reject_orthogonally_from(Scalar other) {
        return AntiFlatPoint(
            /* e235, e315, e125, e321 */
            float4(other.scalar) * float4(this.e235 * other.scalar, this.e315 * other.scalar, this.e125 * other.scalar, this.e321 * other.scalar)
        );
    }
}
public extension AntiFlatPoint {
    public AntiDipoleInversion anti_reject_orthogonally_from(VersorEven other) {
        Sphere wedge = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4((float3(other.e4) * this.group0.xyz * float3(-1.0)), (this.e235 * other.e1) + (this.e315 * other.e2) + (this.e125 * other.e3) + (this.e321 * other.e5)), 
            /* e1234 */
            this.e321 * other.e4 * -1.0
        );
        VersorOdd right_anti_dual = VersorOdd(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            (float3(wedge.e1234) * right_anti_dual.group3.xyz) - (float3(right_anti_dual.e1234) * wedge.group0.xyz), 
            /* e415, e425, e435, e321 */
            float4((wedge.group0.zxy * right_anti_dual.group3.yzx), wedge.e1234 * right_anti_dual.e3215) - (wedge.group0.yzxw * float4(right_anti_dual.group3.zxy, right_anti_dual.e1234)), 
            /* e235, e315, e125, e4 */
            float4(wedge.e3215 * right_anti_dual.e4235 * -1.0, wedge.e3215 * right_anti_dual.e4315 * -1.0, wedge.e3215 * right_anti_dual.e4125 * -1.0, (wedge.e4315 * right_anti_dual.e42) + (wedge.e4125 * right_anti_dual.e43) + (wedge.e1234 * right_anti_dual.e45)) + (wedge.group0.xyzx * float4(right_anti_dual.group3.www, right_anti_dual.e41)), 
            /* e1, e2, e3, e5 */
            float4((wedge.e4315 * right_anti_dual.e12) + (wedge.e1234 * right_anti_dual.e15), (wedge.e4125 * right_anti_dual.e23) + (wedge.e1234 * right_anti_dual.e25), (wedge.e4235 * right_anti_dual.e31) + (wedge.e1234 * right_anti_dual.e35), -(wedge.e4125 * right_anti_dual.e35) - (wedge.e3215 * right_anti_dual.e45)) - (wedge.group0.zxyx * float4(right_anti_dual.group1.yzx, right_anti_dual.e15)) - (wedge.group0.wwwy * float4(right_anti_dual.group0.xyz, right_anti_dual.e25))
        );
    }
}
public extension AntiFlatPoint {
    public VersorEven anti_reject_orthogonally_from(VersorOdd other) {
        CircleRotor wedge = CircleRotor(
            /* e423, e431, e412 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(float3(0.0), this.e321 * other.scalar), 
            /* e235, e315, e125, e12345 */
            float4((float3(other.scalar) * this.group0.xyz), -(this.e235 * other.e41) - (this.e315 * other.e42) - (this.e125 * other.e43) - (this.e321 * other.e45))
        );
        VersorEven right_anti_dual = VersorEven(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(((float3(wedge.e12345) * right_anti_dual.group0.xyz) + (float3(right_anti_dual.e12345) * wedge.group0.xyz)), wedge.e12345 * right_anti_dual.e12345), 
            /* e415, e425, e435, e321 */
            (float4(wedge.e12345) * right_anti_dual.group1) + (float4(right_anti_dual.e12345) * wedge.group1), 
            /* e235, e315, e125, e5 */
            float4(wedge.e12345 * right_anti_dual.e235, wedge.e12345 * right_anti_dual.e315, wedge.e12345 * right_anti_dual.e125, -(wedge.e415 * right_anti_dual.e235) - (wedge.e425 * right_anti_dual.e315) - (wedge.e435 * right_anti_dual.e125) - (wedge.e235 * right_anti_dual.e415) - (wedge.e315 * right_anti_dual.e425) - (wedge.e125 * right_anti_dual.e435)) + (wedge.group2 * float4(right_anti_dual.group0.www, right_anti_dual.e5)), 
            /* e1, e2, e3, e4 */
            float4((wedge.e415 * right_anti_dual.e321) + (wedge.e321 * right_anti_dual.e415) + (wedge.e315 * right_anti_dual.e412) + (wedge.e12345 * right_anti_dual.e1), (wedge.e425 * right_anti_dual.e321) + (wedge.e321 * right_anti_dual.e425) + (wedge.e125 * right_anti_dual.e423) + (wedge.e12345 * right_anti_dual.e2), (wedge.e435 * right_anti_dual.e321) + (wedge.e321 * right_anti_dual.e435) + (wedge.e235 * right_anti_dual.e431) + (wedge.e12345 * right_anti_dual.e3), -(wedge.e412 * right_anti_dual.e435) - (wedge.e415 * right_anti_dual.e423) - (wedge.e425 * right_anti_dual.e431) - (wedge.e435 * right_anti_dual.e412)) + float4((wedge.group0.xyz.zxy * right_anti_dual.group2.yzx), wedge.e12345 * right_anti_dual.e4) - float4((wedge.group0.xyz.yzx * right_anti_dual.group2.zxy), wedge.e423 * right_anti_dual.e415) - float4((wedge.group2.zxy * right_anti_dual.group0.yzx), wedge.e431 * right_anti_dual.e425)
        );
    }
}
public extension AntiFlector {
    // Fancy infix trick (first half)
    public AntiRejectOrthogonallyFromInfixPartial<AntiFlector> operator /(AntiRejectOrthogonallyFromInfix rhs) {
        return AntiRejectOrthogonallyFromInfixPartial<AntiFlector>(this);
    }
}
public extension AntiRejectOrthogonallyFromInfixPartial<AntiFlector> {
    // Fancy infix trick (second half)
    public VersorEven operator /(AntiCircleRotor rhs) {
        return this.a.anti_reject_orthogonally_from(rhs);
    }
}
public extension AntiFlector {
    public VersorEven anti_reject_orthogonally_from(AntiCircleRotor other) {
        VersorEven wedge = VersorEven(
            /* e423, e431, e412, e12345 */
            float4(other.e42 * this.e3, other.e43 * this.e1, other.e41 * this.e2, -(other.e42 * this.e315) - (other.e43 * this.e125) - (other.e45 * this.e321)) - float4((other.group0.xyz.zxy * this.group1.yzx), other.e41 * this.e235), 
            /* e415, e425, e435, e321 */
            float4(float3(0.0), -(other.e31 * this.e2) - (other.e12 * this.e3)) + float4((other.group0.xyz * this.group1.www), other.scalar * this.e321) - (other.group1.wwwx * this.group1.xyzx), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.scalar) * this.group0.xyz) + (float3(this.e5) * other.group1.xyz) + (other.group2.zxy * this.group1.yzx) - (other.group2.yzx * this.group1.zxy)), other.scalar * this.e5), 
            /* e1, e2, e3, e4 */
            float4(float3(1.0), 0.0) * float4(other.group2.www, 0.0) * float4(this.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        CircleRotor right_anti_dual = CircleRotor(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(((float3(right_anti_dual.e12345) * wedge.group0.xyz) + (float3(wedge.e12345) * right_anti_dual.group0.xyz)), right_anti_dual.e12345 * wedge.e12345), 
            /* e415, e425, e435, e321 */
            (float4(right_anti_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_anti_dual.group1), 
            /* e235, e315, e125, e5 */
            float4(right_anti_dual.e12345 * wedge.e235, right_anti_dual.e12345 * wedge.e315, right_anti_dual.e12345 * wedge.e125, -(right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435)) + (right_anti_dual.group2 * float4(wedge.group0.www, wedge.e5)), 
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e315 * wedge.e412) + (right_anti_dual.e12345 * wedge.e1), (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e125 * wedge.e423) + (right_anti_dual.e12345 * wedge.e2), (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e235 * wedge.e431) + (right_anti_dual.e12345 * wedge.e3), -(right_anti_dual.e412 * wedge.e435) - (right_anti_dual.e415 * wedge.e423) - (right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412)) + float4((right_anti_dual.group0.xyz.zxy * wedge.group2.yzx), right_anti_dual.e12345 * wedge.e4) - float4((right_anti_dual.group0.xyz.yzx * wedge.group2.zxy), right_anti_dual.e423 * wedge.e415) - float4((right_anti_dual.group2.zxy * wedge.group0.yzx), right_anti_dual.e431 * wedge.e425)
        );
    }
}
public extension AntiFlector {
    public AntiDipoleInversion anti_reject_orthogonally_from(AntiDipoleInversion other) {
        DipoleInversion wedge = DipoleInversion(
            /* e41, e42, e43 */
            float3(other.e4) * this.group1.xyz * float3(-1.0), 
            /* e23, e31, e12, e45 */
            float4(((other.group3.zxy * this.group1.yzx) - (other.group3.yzx * this.group1.zxy)), other.e4 * this.e5 * -1.0), 
            /* e15, e25, e35, e1234 */
            (this.group1.xyzx * float4(other.group3.www, other.e423)) + float4(float3(0.0), (other.e431 * this.e2) + (other.e412 * this.e3)) - float4((this.group1.www * other.group3.xyz), other.e4 * this.e321), 
            /* e4235, e4315, e4125, e3215 */
            float4(float3(0.0), (other.e2 * this.e315) + (other.e3 * this.e125) + (other.e5 * this.e321) - (other.e125 * this.e3)) + float4((other.group1.yzx * this.group1.zxy), other.e1 * this.e235) - (float4(this.e5) * float4(other.group0.xyz, other.e321)) - (other.group2.wwwy * float4(this.group0.xyz, this.e2)) - (this.group1.yzxx * float4(other.group1.zxy, other.e235))
        );
        DipoleInversion right_anti_dual = DipoleInversion(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            (float3(wedge.e1234) * right_anti_dual.group3.xyz) - (float3(right_anti_dual.e1234) * wedge.group3.xyz), 
            /* e415, e425, e435, e321 */
            (right_anti_dual.group3.yzxw * float4(wedge.group3.zxy, wedge.e1234)) - (wedge.group3.yzxw * float4(right_anti_dual.group3.zxy, right_anti_dual.e1234)), 
            /* e235, e315, e125, e4 */
            (wedge.group3.xyzx * float4(right_anti_dual.group3.www, right_anti_dual.e41)) + float4(float3(0.0), (right_anti_dual.e42 * wedge.e4315) + (right_anti_dual.e43 * wedge.e4125) + (right_anti_dual.e45 * wedge.e1234) - (right_anti_dual.e1234 * wedge.e45) - (right_anti_dual.e4315 * wedge.e42) - (right_anti_dual.e4125 * wedge.e43)) - float4((wedge.group3.www * right_anti_dual.group3.xyz), right_anti_dual.e4235 * wedge.e41), 
            /* e1, e2, e3, e5 */
            (right_anti_dual.group3.zxyw * wedge.group1.yzxw) + (wedge.group2.wwwz * float4(right_anti_dual.group2.xyz, right_anti_dual.e4125)) + float4((wedge.group0.xyz * right_anti_dual.group3.www), right_anti_dual.e4235 * wedge.e15) + float4((right_anti_dual.group1.zxy * wedge.group3.yzx), right_anti_dual.e4315 * wedge.e25) - (float4(wedge.e3215) * float4(right_anti_dual.group0.xyz, right_anti_dual.e45)) - (right_anti_dual.group2.wwwy * float4(wedge.group2.xyz, wedge.e4315)) - (wedge.group3.zxyx * float4(right_anti_dual.group1.yzx, right_anti_dual.e15)) - float4((right_anti_dual.group3.yzx * wedge.group1.zxy), right_anti_dual.e35 * wedge.e4125)
        );
    }
}
public extension AntiFlector {
    public AntiFlector anti_reject_orthogonally_from(AntiDualNum other) {
        AntiFlector wedge = AntiFlector(
            /* e235, e315, e125, e321 */
            float4(other.scalar) * this.group0, 
            /* e1, e2, e3, e5 */
            float4(other.scalar) * this.group1
        );
        DualNum right_anti_dual = DualNum(
            /* e5, e12345 */
            other.group0.xy
        );
        return AntiFlector(
            /* e235, e315, e125, e321 */
            float4(right_anti_dual.e12345) * wedge.group0, 
            /* e1, e2, e3, e5 */
            float4(right_anti_dual.e12345) * wedge.group1
        );
    }
}
public extension AntiFlector {
    public DualNum anti_reject_orthogonally_from(AntiFlatPoint other) {
        return DualNum(
            /* e5, e12345 */
            float2(-(float4(other.group0.xyz, other.e321 * -1.0)[3] * other.e235 * this.e1) - (float4(other.group0.xyz, other.e321 * -1.0)[3] * other.e315 * this.e2) - (float4(other.group0.xyz, other.e321 * -1.0)[3] * other.e125 * this.e3) - (float4(other.group0.xyz, other.e321 * -1.0)[3] * other.e321 * this.e5), 1.0) * float2(-1.0, 0.0)
        );
    }
}
public extension AntiFlector {
    public AntiFlector anti_reject_orthogonally_from(AntiFlector other) {
        AntiMotor wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4(((other.group1.zxy * this.group1.yzx) - (other.group1.yzx * this.group1.zxy)), 0.0), 
            /* e15, e25, e35, e3215 */
            (other.group1.wwwx * float4(this.group1.xyz, this.e235)) + float4(float3(0.0), (other.e2 * this.e315) + (other.e3 * this.e125) + (other.e5 * this.e321) - (other.e315 * this.e2) - (other.e125 * this.e3) - (other.e321 * this.e5)) - (this.group1.wwwx * float4(other.group1.xyz, other.e235))
        );
        Flector right_anti_dual = Flector(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiFlector(
            /* e235, e315, e125, e321 */
            float4(float3(1.0), 0.0) * float4(wedge.group1.www, 0.0) * float4(right_anti_dual.group1.xyz, 0.0) * float4(-1.0, -1.0, -1.0, 0.0), 
            /* e1, e2, e3, e5 */
            (right_anti_dual.group1.zxyx * float4(wedge.group0.yzx, wedge.e15)) + float4(float3(0.0), (wedge.e25 * right_anti_dual.e4315) + (wedge.e35 * right_anti_dual.e4125)) - float4((wedge.group0.zxy * right_anti_dual.group1.yzx), wedge.e3215 * right_anti_dual.e45)
        );
    }
}
public extension AntiFlector {
    public AntiPlane anti_reject_orthogonally_from(AntiLine other) {
        AntiFlatPoint wedge = AntiFlatPoint(
            /* e235, e315, e125, e321 */
            float4((this.e2 * other.e35) + (this.e5 * other.e23), (this.e3 * other.e15) + (this.e5 * other.e31), (this.e1 * other.e25) + (this.e5 * other.e12), -(this.e2 * other.e31) - (this.e3 * other.e12)) - (this.group1.zxyx * float4(other.group1.xyz.yzx, other.e23))
        );
        Line right_anti_dual = Line(
            /* e415, e425, e435 */
            other.group0.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group1.xyz * float3(-1.0)
        );
        return AntiPlane(
            /* e1, e2, e3, e5 */
            float4((float3(wedge.e321) * right_anti_dual.group0.xyz), -(wedge.e235 * right_anti_dual.e415) - (wedge.e315 * right_anti_dual.e425) - (wedge.e125 * right_anti_dual.e435))
        );
    }
}
public extension AntiFlector {
    public AntiFlector anti_reject_orthogonally_from(AntiMotor other) {
        AntiFlector wedge = AntiFlector(
            /* e235, e315, e125, e321 */
            float4((this.e2 * other.e35) + (this.e5 * other.e23), (this.e3 * other.e15) + (this.e5 * other.e31), (this.e1 * other.e25) + (this.e5 * other.e12), -(this.e2 * other.e31) - (this.e3 * other.e12)) + (float4(other.scalar) * this.group0) - (this.group1.zxyx * float4(other.group1.yzx, other.e23)), 
            /* e1, e2, e3, e5 */
            float4(other.scalar) * this.group1
        );
        Motor right_anti_dual = Motor(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiFlector(
            /* e235, e315, e125, e321 */
            float4(right_anti_dual.e12345) * wedge.group0, 
            /* e1, e2, e3, e5 */
            float4(wedge.e1 * right_anti_dual.e12345, wedge.e2 * right_anti_dual.e12345, wedge.e3 * right_anti_dual.e12345, -(wedge.e235 * right_anti_dual.e415) - (wedge.e315 * right_anti_dual.e425) - (wedge.e125 * right_anti_dual.e435)) + (right_anti_dual.group0 * float4(wedge.group0.www, wedge.e5))
        );
    }
}
public extension AntiFlector {
    public AntiFlector anti_reject_orthogonally_from(AntiPlane other) {
        AntiMotor wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4(((this.group1.yzx * other.group0.zxy) - (this.group1.zxy * other.group0.yzx)), 0.0), 
            /* e15, e25, e35, e3215 */
            float4(this.e5 * other.e1 * -1.0, this.e5 * other.e2 * -1.0, this.e5 * other.e3 * -1.0, (this.e315 * other.e2) + (this.e125 * other.e3) + (this.e321 * other.e5)) + (other.group0.wwwx * float4(this.group1.xyz, this.e235))
        );
        Plane right_anti_dual = Plane(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiFlector(
            /* e235, e315, e125, e321 */
            float4(float3(1.0), 0.0) * float4(wedge.group1.www, 0.0) * float4(right_anti_dual.group0.xyz, 0.0) * float4(-1.0, -1.0, -1.0, 0.0), 
            /* e1, e2, e3, e5 */
            float4(wedge.e12 * right_anti_dual.e4315 * -1.0, wedge.e23 * right_anti_dual.e4125 * -1.0, wedge.e31 * right_anti_dual.e4235 * -1.0, (wedge.e25 * right_anti_dual.e4315) + (wedge.e35 * right_anti_dual.e4125)) + (right_anti_dual.group0.zxyx * float4(wedge.group0.yzx, wedge.e15))
        );
    }
}
public extension AntiFlector {
    public RoundPoint anti_reject_orthogonally_from(Circle other) {
        Sphere wedge = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(this.e3 * other.e425, this.e1 * other.e435, this.e2 * other.e415, -(this.e3 * other.e125) - (this.e5 * other.e321)) - (this.group1.wwwx * float4(other.group0.xyz, other.e235)) - float4((this.group1.yzx * other.group1.zxy), this.e2 * other.e315), 
            /* e1234 */
            (this.e1 * other.e423) + (this.e2 * other.e431) + (this.e3 * other.e412)
        );
        Dipole right_anti_dual = Dipole(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35 */
            other.group2.xyz
        );
        return RoundPoint(
            /* e1, e2, e3, e4 */
            float4(-(right_anti_dual.e41 * wedge.e3215) - (right_anti_dual.e31 * wedge.e4125), -(right_anti_dual.e42 * wedge.e3215) - (right_anti_dual.e12 * wedge.e4235), -(right_anti_dual.e43 * wedge.e3215) - (right_anti_dual.e23 * wedge.e4315), (right_anti_dual.e43 * wedge.e4125) + (right_anti_dual.e45 * wedge.e1234)) + (wedge.group0.yzxy * float4(right_anti_dual.group1.zxy, right_anti_dual.e42)) + float4((float3(wedge.e1234) * right_anti_dual.group2.xyz), right_anti_dual.e41 * wedge.e4235), 
            /* e5 */
            -(right_anti_dual.e45 * wedge.e3215) - (right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125)
        );
    }
}
public extension AntiFlector {
    public RoundPoint anti_reject_orthogonally_from(CircleRotor other) {
        Sphere wedge = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(this.e3 * other.e425, this.e1 * other.e435, this.e2 * other.e415, -(this.e3 * other.e125) - (this.e5 * other.e321)) - (this.group1.yzxy * float4(other.group1.zxy, other.e315)) - float4((other.group0.xyz * this.group1.www), this.e1 * other.e235), 
            /* e1234 */
            (this.e1 * other.e423) + (this.e2 * other.e431) + (this.e3 * other.e412)
        );
        AntiCircleRotor right_anti_dual = AntiCircleRotor(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return RoundPoint(
            /* e1, e2, e3, e4 */
            float4(-(right_anti_dual.e41 * wedge.e3215) - (right_anti_dual.e31 * wedge.e4125), -(right_anti_dual.e42 * wedge.e3215) - (right_anti_dual.e12 * wedge.e4235), -(right_anti_dual.e43 * wedge.e3215) - (right_anti_dual.e23 * wedge.e4315), (right_anti_dual.e43 * wedge.e4125) + (right_anti_dual.e45 * wedge.e1234)) + (wedge.group0.yzxx * float4(right_anti_dual.group1.zxy, right_anti_dual.e41)) + float4((float3(wedge.e1234) * right_anti_dual.group2.xyz), right_anti_dual.e42 * wedge.e4315), 
            /* e5 */
            -(right_anti_dual.e45 * wedge.e3215) - (right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125)
        );
    }
}
public extension AntiFlector {
    public AntiDipoleInversion anti_reject_orthogonally_from(Dipole other) {
        CircleRotor wedge = CircleRotor(
            /* e423, e431, e412 */
            (other.group0.xyz.yzx * this.group1.zxy) - (other.group0.xyz.zxy * this.group1.yzx), 
            /* e415, e425, e435, e321 */
            float4(this.e5 * other.e41, this.e5 * other.e42, this.e5 * other.e43, -(this.e2 * other.e31) - (this.e3 * other.e12)) - (this.group1.xyzx * other.group1.wwwx), 
            /* e235, e315, e125, e12345 */
            float4((this.e2 * other.e35) + (this.e5 * other.e23), (this.e3 * other.e15) + (this.e5 * other.e31), (this.e1 * other.e25) + (this.e5 * other.e12), -(this.e315 * other.e42) - (this.e125 * other.e43) - (this.e321 * other.e45)) - float4((other.group2.xyz.yzx * this.group1.zxy), this.e235 * other.e41)
        );
        Circle right_anti_dual = Circle(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125 */
            other.group2.xyz * float3(-1.0)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(wedge.e12345) * right_anti_dual.group1, 
            /* e235, e315, e125, e4 */
            float4((float3(wedge.e12345) * right_anti_dual.group2.xyz), -(right_anti_dual.e423 * wedge.e415) - (right_anti_dual.e431 * wedge.e425) - (right_anti_dual.e412 * wedge.e435) - (right_anti_dual.e415 * wedge.e423) - (right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412)), 
            /* e1, e2, e3, e5 */
            float4((right_anti_dual.e412 * wedge.e315) + (right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e315 * wedge.e412), (right_anti_dual.e423 * wedge.e125) + (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e125 * wedge.e423), (right_anti_dual.e431 * wedge.e235) + (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e235 * wedge.e431), -(right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e125 * wedge.e435)) - float4((right_anti_dual.group0.xyz.yzx * wedge.group2.zxy), right_anti_dual.e235 * wedge.e415) - float4((right_anti_dual.group2.xyz.zxy * wedge.group0.xyz.yzx), right_anti_dual.e315 * wedge.e425)
        );
    }
}
public extension AntiFlector {
    public AntiDipoleInversion anti_reject_orthogonally_from(DipoleInversion other) {
        CircleRotor wedge = CircleRotor(
            /* e423, e431, e412 */
            (other.group0.xyz.yzx * this.group1.zxy) - (other.group0.xyz.zxy * this.group1.yzx), 
            /* e415, e425, e435, e321 */
            float4(this.e5 * other.e41, this.e5 * other.e42, this.e5 * other.e43, -(this.e2 * other.e31) - (this.e3 * other.e12)) - (this.group1.xyzx * other.group1.wwwx), 
            /* e235, e315, e125, e12345 */
            (this.group1.yzxx * float4(other.group2.zxy, other.e4235)) + (this.group1.wwwy * float4(other.group1.xyz, other.e4315)) + float4(float3(0.0), (this.e3 * other.e4125) + (this.e5 * other.e1234) - (this.e315 * other.e42) - (this.e125 * other.e43) - (this.e321 * other.e45)) - float4((this.group1.zxy * other.group2.yzx), this.e235 * other.e41)
        );
        AntiDipoleInversion right_anti_dual = AntiDipoleInversion(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(wedge.e12345) * right_anti_dual.group1, 
            /* e235, e315, e125, e4 */
            float4((float3(wedge.e12345) * right_anti_dual.group2.xyz), (right_anti_dual.e4 * wedge.e12345) - (right_anti_dual.e423 * wedge.e415) - (right_anti_dual.e431 * wedge.e425) - (right_anti_dual.e412 * wedge.e435) - (right_anti_dual.e415 * wedge.e423) - (right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412)), 
            /* e1, e2, e3, e5 */
            float4((right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e315 * wedge.e412) + (right_anti_dual.e1 * wedge.e12345), (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e125 * wedge.e423) + (right_anti_dual.e2 * wedge.e12345), (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e235 * wedge.e431) + (right_anti_dual.e3 * wedge.e12345), -(right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435)) + (wedge.group2.yzxw * float4(right_anti_dual.group0.xyz.zxy, right_anti_dual.e5)) - (wedge.group2.zxyx * float4(right_anti_dual.group0.xyz.yzx, right_anti_dual.e415)) - float4((wedge.group0.xyz.yzx * right_anti_dual.group2.zxy), right_anti_dual.e425 * wedge.e315)
        );
    }
}
public extension AntiFlector {
    public AntiFlatPoint anti_reject_orthogonally_from(DualNum other) {
        AntiDualNum right_anti_dual = AntiDualNum(
            /* e3215, scalar */
            other.group0.xy * float2(-1.0)
        );
        return AntiFlatPoint(
            /* e235, e315, e125, e321 */
            float4(right_anti_dual.group0.xy.xx, right_anti_dual.e3215, 0.0) * float4(float3(0.0), 0.0) * float4(float3(1.0), 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
    }
}
public extension AntiFlector {
    public AntiFlector anti_reject_orthogonally_from(FlatPoint other) {
        Motor wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4(other.e45) * float4(this.group1.xyz, this.e321) * float4(-1.0), 
            /* e235, e315, e125, e5 */
            float4(((this.group1.yzx * other.group0.zxy) - (this.group1.zxy * other.group0.yzx)), 0.0)
        );
        AntiFlatPoint right_anti_dual = AntiFlatPoint(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiFlector(
            /* e235, e315, e125, e321 */
            float4(wedge.e12345) * right_anti_dual.group0, 
            /* e1, e2, e3, e5 */
            float4((right_anti_dual.group0.www * wedge.group0.xyz), -(right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435))
        );
    }
}
public extension AntiFlector {
    public AntiFlector anti_reject_orthogonally_from(Flector other) {
        Motor wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4((float3(other.e45) * this.group1.xyz * float3(-1.0)), (this.e1 * other.e4235) + (this.e2 * other.e4315) + (this.e3 * other.e4125) - (this.e321 * other.e45)), 
            /* e235, e315, e125, e5 */
            float4(((this.group1.yzx * other.group0.zxy) - (this.group1.zxy * other.group0.yzx)), 0.0)
        );
        AntiFlector right_anti_dual = AntiFlector(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiFlector(
            /* e235, e315, e125, e321 */
            float4(wedge.e12345) * right_anti_dual.group0, 
            /* e1, e2, e3, e5 */
            float4(right_anti_dual.e1 * wedge.e12345, right_anti_dual.e2 * wedge.e12345, right_anti_dual.e3 * wedge.e12345, -(right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435)) + (wedge.group0 * float4(right_anti_dual.group0.www, right_anti_dual.e5))
        );
    }
}
public extension AntiFlector {
    public AntiPlane anti_reject_orthogonally_from(Line other) {
        Plane wedge = Plane(
            /* e4235, e4315, e4125, e3215 */
            float4(this.e3 * other.e425, this.e1 * other.e435, this.e2 * other.e415, -(this.e2 * other.e315) - (this.e3 * other.e125)) - (this.group1.yzxx * float4(other.group0.xyz.zxy, other.e235))
        );
        AntiLine right_anti_dual = AntiLine(
            /* e23, e31, e12 */
            other.group0.xyz, 
            /* e15, e25, e35 */
            other.group1.xyz
        );
        return AntiPlane(
            /* e1, e2, e3, e5 */
            float4(right_anti_dual.e12 * wedge.e4315, right_anti_dual.e23 * wedge.e4125, right_anti_dual.e31 * wedge.e4235, -(right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125)) - (wedge.group0.zxyx * float4(right_anti_dual.group0.xyz.yzx, right_anti_dual.e15))
        );
    }
}
public extension AntiFlector {
    public AntiFlector anti_reject_orthogonally_from(Motor other) {
        Flector wedge = Flector(
            /* e15, e25, e35, e45 */
            float4(float3(1.0), 0.0) * float4(other.group1.www, 0.0) * float4(this.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(float3(0.0), -(this.e2 * other.e315) - (this.e3 * other.e125)) + float4((this.group1.zxy * other.group0.yzx), this.e321 * other.e5) - (this.group1.yzxx * float4(other.group0.zxy, other.e235))
        );
        AntiMotor right_anti_dual = AntiMotor(
            /* e23, e31, e12, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiFlector(
            /* e235, e315, e125, e321 */
            float4(float3(1.0), 0.0) * float4(right_anti_dual.group1.www, 0.0) * float4(wedge.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e1, e2, e3, e5 */
            float4(float3(0.0), -(right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125)) + float4((right_anti_dual.group0.zxy * wedge.group1.yzx), right_anti_dual.e3215 * wedge.e45) - (wedge.group1.zxyx * float4(right_anti_dual.group0.yzx, right_anti_dual.e15))
        );
    }
}
public extension AntiFlector {
    public MultiVector anti_reject_orthogonally_from(MultiVector other) {
        MultiVector wedge = MultiVector(
            /* scalar, e12345 */
            float2(0.0, (this.e1 * other.e4235) + (this.e2 * other.e4315) + (this.e3 * other.e4125) + (this.e5 * other.e1234) - (this.e235 * other.e41) - (this.e315 * other.e42) - (this.e125 * other.e43) - (this.e321 * other.e45)), 
            /* e1, e2, e3, e4 */
            float4(other.group0.xy.xx, other.scalar, 0.0) * float4(float3(1.0), 0.0) * float4(this.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e5 */
            this.e5 * other.scalar, 
            /* e15, e25, e35, e45 */
            float4(((float3(other.e5) * this.group1.xyz) - (float3(this.e5) * other.group1.xyz)), this.e5 * other.e4 * -1.0), 
            /* e41, e42, e43 */
            float3(other.e4) * this.group1.xyz * float3(-1.0), 
            /* e23, e31, e12 */
            (this.group1.yzx * other.group1.zxy) - (this.group1.zxy * other.group1.yzx), 
            /* e415, e425, e435, e321 */
            float4(float3(0.0), -(this.e2 * other.e31) - (this.e3 * other.e12)) + float4((other.group4.xyz * this.group1.www), this.e321 * other.scalar) - float4((other.group3.www * this.group1.xyz), this.e1 * other.e23), 
            /* e423, e431, e412 */
            (other.group4.xyz.yzx * this.group1.zxy) - (other.group4.xyz.zxy * this.group1.yzx), 
            /* e235, e315, e125 */
            (float3(this.e5) * other.group5.xyz) + (float3(other.scalar) * this.group0.xyz) + (this.group1.yzx * other.group3.zxy) - (this.group1.zxy * other.group3.yzx), 
            /* e4235, e4315, e4125, e3215 */
            float4(float3(0.0), (this.e315 * other.e2) + (this.e125 * other.e3) + (this.e321 * other.e5) - (this.e5 * other.e321)) + float4((this.group1.zxy * other.group6.yzx), this.e235 * other.e1) - (this.group1.wwwx * float4(other.group7.xyz, other.e235)) - float4((this.group1.yzx * other.group6.zxy), this.e3 * other.e125) - float4((other.group1.www * this.group0.xyz), this.e2 * other.e315), 
            /* e1234 */
            (this.e1 * other.e423) + (this.e2 * other.e431) + (this.e3 * other.e412) - (this.e321 * other.e4)
        );
        MultiVector right_anti_dual = MultiVector(
            /* scalar, e12345 */
            other.group0.xy.yx * float2(-1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215, 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43 */
            other.group7.xyz, 
            /* e23, e31, e12 */
            other.group6.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412 */
            other.group4.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group3.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2((right_anti_dual.scalar * wedge.e12345) + (right_anti_dual.e12345 * wedge.scalar) + (right_anti_dual.e1 * wedge.e4235) + (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) + (right_anti_dual.e4 * wedge.e3215) + (right_anti_dual.e5 * wedge.e1234) + (right_anti_dual.e4235 * wedge.e1) + (right_anti_dual.e4315 * wedge.e2) + (right_anti_dual.e4125 * wedge.e3) + (right_anti_dual.e3215 * wedge.e4) + (right_anti_dual.e1234 * wedge.e5) - (right_anti_dual.e15 * wedge.e423) - (right_anti_dual.e25 * wedge.e431) - (right_anti_dual.e35 * wedge.e412) - (right_anti_dual.e45 * wedge.e321) - (right_anti_dual.e41 * wedge.e235) - (right_anti_dual.e42 * wedge.e315) - (right_anti_dual.e43 * wedge.e125) - (right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e321 * wedge.e45) - (right_anti_dual.e423 * wedge.e15) - (right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43), right_anti_dual.e12345 * wedge.e12345), 
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e15 * wedge.e1234) + (right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e4125 * wedge.e31), (right_anti_dual.e25 * wedge.e1234) + (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e4235 * wedge.e12), (right_anti_dual.e35 * wedge.e1234) + (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e4315 * wedge.e23), -(right_anti_dual.e415 * wedge.e423) - (right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412) - (right_anti_dual.e1234 * wedge.e45)) + (float4(right_anti_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_anti_dual.group1) + (wedge.group9.yzxx * float4(right_anti_dual.group5.xyz.zxy, right_anti_dual.e41)) + float4((wedge.group4.xyz * right_anti_dual.group9.www), right_anti_dual.e45 * wedge.e1234) + float4((right_anti_dual.group7.xyz.zxy * wedge.group8.xyz.yzx), right_anti_dual.e42 * wedge.e4315) + float4((right_anti_dual.group8.xyz.yzx * wedge.group7.xyz.zxy), right_anti_dual.e43 * wedge.e4125) - (right_anti_dual.group9.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((float3(right_anti_dual.e1234) * wedge.group3.xyz), right_anti_dual.e4125 * wedge.e43) - float4((right_anti_dual.group4.xyz * wedge.group9.www), right_anti_dual.e423 * wedge.e415) - float4((right_anti_dual.group5.xyz.yzx * wedge.group9.zxy), right_anti_dual.e431 * wedge.e425) - float4((right_anti_dual.group7.xyz.yzx * wedge.group8.xyz.zxy), right_anti_dual.e412 * wedge.e435) - float4((right_anti_dual.group8.xyz.zxy * wedge.group7.xyz.yzx), right_anti_dual.e4235 * wedge.e41), 
            /* e5 */
            (right_anti_dual.e12345 * wedge.e5) + (right_anti_dual.e5 * wedge.e12345) + (right_anti_dual.e4235 * wedge.e15) + (right_anti_dual.e4315 * wedge.e25) + (right_anti_dual.e4125 * wedge.e35) + (right_anti_dual.e3215 * wedge.e45) - (right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125) - (right_anti_dual.e45 * wedge.e3215) - (right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435), 
            /* e15, e25, e35, e45 */
            float4((right_anti_dual.e415 * wedge.e3215) + (right_anti_dual.e315 * wedge.e4125) + (right_anti_dual.e4125 * wedge.e315) + (right_anti_dual.e3215 * wedge.e415), (right_anti_dual.e425 * wedge.e3215) + (right_anti_dual.e125 * wedge.e4235) + (right_anti_dual.e4235 * wedge.e125) + (right_anti_dual.e3215 * wedge.e425), (right_anti_dual.e435 * wedge.e3215) + (right_anti_dual.e235 * wedge.e4315) + (right_anti_dual.e4315 * wedge.e235) + (right_anti_dual.e3215 * wedge.e435), -(right_anti_dual.e435 * wedge.e4125) - (right_anti_dual.e4235 * wedge.e415) - (right_anti_dual.e4315 * wedge.e425) - (right_anti_dual.e4125 * wedge.e435)) + (float4(right_anti_dual.e12345) * wedge.group3) + (float4(wedge.e12345) * right_anti_dual.group3) - (wedge.group9.yzxx * float4(right_anti_dual.group8.xyz.zxy, right_anti_dual.e415)) - float4((wedge.group8.xyz.zxy * right_anti_dual.group9.yzx), right_anti_dual.e425 * wedge.e4315), 
            /* e41, e42, e43 */
            (float3(right_anti_dual.e12345) * wedge.group4.xyz) + (float3(right_anti_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_anti_dual.group4.xyz) + (float3(wedge.e1234) * right_anti_dual.group6.xyz) + (right_anti_dual.group7.xyz.zxy * wedge.group9.yzx) + (wedge.group7.xyz.zxy * right_anti_dual.group9.yzx) - (right_anti_dual.group7.xyz.yzx * wedge.group9.zxy) - (wedge.group7.xyz.yzx * right_anti_dual.group9.zxy), 
            /* e23, e31, e12 */
            (float3(right_anti_dual.e12345) * wedge.group5.xyz) + (float3(right_anti_dual.e3215) * wedge.group7.xyz) + (float3(right_anti_dual.e1234) * wedge.group8.xyz) + (float3(wedge.e12345) * right_anti_dual.group5.xyz) + (float3(wedge.e3215) * right_anti_dual.group7.xyz) + (float3(wedge.e1234) * right_anti_dual.group8.xyz) - (float3(right_anti_dual.e321) * wedge.group9.xyz) - (float3(wedge.e321) * right_anti_dual.group9.xyz), 
            /* e415, e425, e435, e321 */
            (float4(right_anti_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_anti_dual.group6) + (right_anti_dual.group9.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - float4((right_anti_dual.group9.zxy * wedge.group9.yzx), right_anti_dual.e1234 * wedge.e3215), 
            /* e423, e431, e412 */
            (float3(right_anti_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_anti_dual.group7.xyz) + (float3(wedge.e1234) * right_anti_dual.group9.xyz) - (float3(right_anti_dual.e1234) * wedge.group9.xyz), 
            /* e235, e315, e125 */
            (float3(right_anti_dual.e12345) * wedge.group8.xyz) + (float3(right_anti_dual.e3215) * wedge.group9.xyz) + (float3(wedge.e12345) * right_anti_dual.group8.xyz) - (float3(wedge.e3215) * right_anti_dual.group9.xyz), 
            /* e4235, e4315, e4125, e3215 */
            (float4(right_anti_dual.e12345) * wedge.group9) + (float4(wedge.e12345) * right_anti_dual.group9), 
            /* e1234 */
            (right_anti_dual.e12345 * wedge.e1234) + (right_anti_dual.e1234 * wedge.e12345)
        );
    }
}
public extension AntiFlector {
    public AntiPlane anti_reject_orthogonally_from(Plane other) {
        return AntiPlane(
            /* e1, e2, e3, e5 */
            float4((this.e1 * other.e4235) + (this.e2 * other.e4315) + (this.e3 * other.e4125)) * float4(other.e4235 * -1.0, other.e4315 * -1.0, other.e4125 * -1.0, other.e3215)
        );
    }
}
public extension AntiFlector {
    public AntiDipoleInversion anti_reject_orthogonally_from(RoundPoint other) {
        DipoleInversion wedge = DipoleInversion(
            /* e41, e42, e43 */
            float3(other.e4) * this.group1.xyz * float3(-1.0), 
            /* e23, e31, e12, e45 */
            float4(((this.group1.yzx * other.group0.zxy) - (this.group1.zxy * other.group0.yzx)), this.e5 * other.e4 * -1.0), 
            /* e15, e25, e35, e1234 */
            float4(((float3(other.e5) * this.group1.xyz) - (float3(this.e5) * other.group0.xyz)), this.e321 * other.e4 * -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4((float3(other.e4) * this.group0.xyz * float3(-1.0)), (this.e235 * other.e1) + (this.e315 * other.e2) + (this.e125 * other.e3) + (this.e321 * other.e5))
        );
        Sphere right_anti_dual = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            (float3(wedge.e1234) * right_anti_dual.group0.xyz) - (float3(right_anti_dual.e1234) * wedge.group3.xyz), 
            /* e415, e425, e435, e321 */
            (right_anti_dual.group0.yzxw * float4(wedge.group3.zxy, wedge.e1234)) - (wedge.group3.yzxw * float4(right_anti_dual.group0.zxy, right_anti_dual.e1234)), 
            /* e235, e315, e125, e4 */
            float4(wedge.e4235 * right_anti_dual.e3215, wedge.e4315 * right_anti_dual.e3215, wedge.e4125 * right_anti_dual.e3215, -(wedge.e42 * right_anti_dual.e4315) - (wedge.e43 * right_anti_dual.e4125) - (wedge.e45 * right_anti_dual.e1234)) - (right_anti_dual.group0.xyzx * float4(wedge.group3.www, wedge.e41)), 
            /* e1, e2, e3, e5 */
            float4(-(wedge.e12 * right_anti_dual.e4315) - (wedge.e15 * right_anti_dual.e1234), -(wedge.e23 * right_anti_dual.e4125) - (wedge.e25 * right_anti_dual.e1234), -(wedge.e31 * right_anti_dual.e4235) - (wedge.e35 * right_anti_dual.e1234), (wedge.e25 * right_anti_dual.e4315) + (wedge.e35 * right_anti_dual.e4125)) + (float4(right_anti_dual.e3215) * float4(wedge.group0.xyz, wedge.e45)) + (right_anti_dual.group0.zxyx * float4(wedge.group1.yzx, wedge.e15))
        );
    }
}
public extension AntiFlector {
    public AntiFlector anti_reject_orthogonally_from(Scalar other) {
        AntiFlector wedge = AntiFlector(
            /* e235, e315, e125, e321 */
            float4(other.scalar) * this.group0, 
            /* e1, e2, e3, e5 */
            float4(other.scalar) * this.group1
        );
        AntiScalar right_anti_dual = AntiScalar(
            /* e12345 */
            other.scalar
        );
        return AntiFlector(
            /* e235, e315, e125, e321 */
            float4(right_anti_dual.e12345) * wedge.group0, 
            /* e1, e2, e3, e5 */
            float4(right_anti_dual.e12345) * wedge.group1
        );
    }
}
public extension AntiFlector {
    public RoundPoint anti_reject_orthogonally_from(Sphere other) {
        AntiScalar wedge = AntiScalar(
            /* e12345 */
            (this.e1 * other.e4235) + (this.e2 * other.e4315) + (this.e3 * other.e4125) + (this.e5 * other.e1234)
        );
        RoundPoint right_anti_dual = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(other.group0.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215
        );
        return RoundPoint(
            /* e1, e2, e3, e4 */
            float4(wedge.e12345) * right_anti_dual.group0, 
            /* e5 */
            wedge.e12345 * right_anti_dual.e5
        );
    }
}
public extension AntiFlector {
    public AntiDipoleInversion anti_reject_orthogonally_from(VersorEven other) {
        DipoleInversion wedge = DipoleInversion(
            /* e41, e42, e43 */
            float3(other.e4) * this.group1.xyz * float3(-1.0), 
            /* e23, e31, e12, e45 */
            float4(((this.group1.yzx * other.group3.zxy) - (this.group1.zxy * other.group3.yzx)), this.e5 * other.e4 * -1.0), 
            /* e15, e25, e35, e1234 */
            (this.group1.xyzx * float4(other.group2.www, other.e423)) + float4(float3(0.0), (this.e2 * other.e431) + (this.e3 * other.e412)) - (other.group3 * float4(this.group1.www, this.e321)), 
            /* e4235, e4315, e4125, e3215 */
            float4(float3(0.0), (this.e315 * other.e2) + (this.e125 * other.e3) + (this.e321 * other.e5) - (this.e5 * other.e321)) + float4((this.group1.zxy * other.group1.yzx), this.e235 * other.e1) - (this.group1.yzxy * float4(other.group1.zxy, other.e315)) - (this.group1.wwwz * float4(other.group0.xyz, other.e125)) - float4((other.group3.www * this.group0.xyz), this.e1 * other.e235)
        );
        VersorOdd right_anti_dual = VersorOdd(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            (float3(wedge.e1234) * right_anti_dual.group3.xyz) - (float3(right_anti_dual.e1234) * wedge.group3.xyz), 
            /* e415, e425, e435, e321 */
            (right_anti_dual.group3.yzxw * float4(wedge.group3.zxy, wedge.e1234)) - (wedge.group3.yzxw * float4(right_anti_dual.group3.zxy, right_anti_dual.e1234)), 
            /* e235, e315, e125, e4 */
            float4(float3(0.0), (wedge.e4235 * right_anti_dual.e41) + (wedge.e4315 * right_anti_dual.e42) + (wedge.e4125 * right_anti_dual.e43) - (wedge.e42 * right_anti_dual.e4315) - (wedge.e43 * right_anti_dual.e4125) - (wedge.e45 * right_anti_dual.e1234)) + float4((right_anti_dual.group3.www * wedge.group3.xyz), wedge.e1234 * right_anti_dual.e45) - (right_anti_dual.group3.xyzx * float4(wedge.group3.www, wedge.e41)), 
            /* e1, e2, e3, e5 */
            (float4(right_anti_dual.e3215) * float4(wedge.group0.xyz, wedge.e45)) + (wedge.group2.wwwy * float4(right_anti_dual.group2.xyz, right_anti_dual.e4315)) + (right_anti_dual.group3.zxyx * float4(wedge.group1.yzx, wedge.e15)) + float4((wedge.group3.yzx * right_anti_dual.group1.zxy), wedge.e35 * right_anti_dual.e4125) - (float4(wedge.e3215) * float4(right_anti_dual.group0.xyz, right_anti_dual.e45)) - (wedge.group3.zxyz * float4(right_anti_dual.group1.yzx, right_anti_dual.e35)) - (right_anti_dual.group2.wwwy * float4(wedge.group2.xyz, wedge.e4315)) - float4((wedge.group1.zxy * right_anti_dual.group3.yzx), wedge.e4235 * right_anti_dual.e15)
        );
    }
}
public extension AntiFlector {
    public VersorEven anti_reject_orthogonally_from(VersorOdd other) {
        VersorEven wedge = VersorEven(
            /* e423, e431, e412, e12345 */
            (this.group1.zxyx * float4(other.group0.yzx, other.e4235)) + float4(float3(0.0), (this.e2 * other.e4315) + (this.e3 * other.e4125) + (this.e5 * other.e1234) - (this.e315 * other.e42) - (this.e125 * other.e43) - (this.e321 * other.e45)) - (other.group0.zxyx * float4(this.group1.yzx, this.e235)), 
            /* e415, e425, e435, e321 */
            (other.group0 * float4(this.group1.www, this.e321)) + float4(float3(0.0), -(this.e2 * other.e31) - (this.e3 * other.e12)) - (this.group1.xyzx * other.group1.wwwx), 
            /* e235, e315, e125, e5 */
            float4(((float3(this.e5) * other.group1.xyz) + (float3(other.scalar) * this.group0.xyz) + (this.group1.yzx * other.group2.zxy) - (this.group1.zxy * other.group2.yzx)), this.e5 * other.scalar), 
            /* e1, e2, e3, e4 */
            float4(float3(1.0), 0.0) * float4(other.group0.www, 0.0) * float4(this.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        VersorEven right_anti_dual = VersorEven(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(((float3(right_anti_dual.e12345) * wedge.group0.xyz) + (float3(wedge.e12345) * right_anti_dual.group0.xyz)), right_anti_dual.e12345 * wedge.e12345), 
            /* e415, e425, e435, e321 */
            (float4(right_anti_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_anti_dual.group1), 
            /* e235, e315, e125, e5 */
            (float4(right_anti_dual.e12345) * wedge.group2) + (float4(wedge.e12345) * right_anti_dual.group2) + float4(float3(0.0), -(right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435)), 
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e315 * wedge.e412) + (right_anti_dual.e1 * wedge.e12345), (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e125 * wedge.e423) + (right_anti_dual.e2 * wedge.e12345), (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e235 * wedge.e431) + (right_anti_dual.e3 * wedge.e12345), -(right_anti_dual.e412 * wedge.e435) - (right_anti_dual.e415 * wedge.e423) - (right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412)) + (right_anti_dual.group0.zxyw * float4(wedge.group2.yzx, wedge.e4)) + float4((right_anti_dual.group0.www * wedge.group3.xyz), right_anti_dual.e4 * wedge.e12345) - (right_anti_dual.group0.yzxx * float4(wedge.group2.zxy, wedge.e415)) - float4((right_anti_dual.group2.zxy * wedge.group0.yzx), right_anti_dual.e431 * wedge.e425)
        );
    }
}
public extension AntiLine {
    // Fancy infix trick (first half)
    public AntiRejectOrthogonallyFromInfixPartial<AntiLine> operator /(AntiRejectOrthogonallyFromInfix rhs) {
        return AntiRejectOrthogonallyFromInfixPartial<AntiLine>(this);
    }
}
public extension AntiRejectOrthogonallyFromInfixPartial<AntiLine> {
    // Fancy infix trick (second half)
    public VersorOdd operator /(AntiCircleRotor rhs) {
        return this.a.anti_reject_orthogonally_from(rhs);
    }
}
public extension AntiLine {
    public VersorOdd anti_reject_orthogonally_from(AntiCircleRotor other) {
        DipoleInversion wedge = DipoleInversion(
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12, e45 */
            float4(float3(1.0), 0.0) * float4(this.group0.xyz, 0.0) * float4(other.group2.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e15, e25, e35, e1234 */
            float4((float3(other.scalar) * this.group1.xyz), -(other.e41 * this.e23) - (other.e42 * this.e31) - (other.e43 * this.e12)), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e42 * this.e35) + (other.e45 * this.e23), (other.e43 * this.e15) + (other.e45 * this.e31), (other.e41 * this.e25) + (other.e45 * this.e12), -(other.e23 * this.e15) - (other.e31 * this.e25) - (other.e12 * this.e35) - (other.e25 * this.e31) - (other.e35 * this.e12)) - float4((other.group0.xyz.zxy * this.group1.xyz.yzx), other.e15 * this.e23)
        );
        CircleRotor right_anti_dual = CircleRotor(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4((right_anti_dual.e412 * wedge.e4315) + (right_anti_dual.e415 * wedge.e1234) + (right_anti_dual.e12345 * wedge.e41), (right_anti_dual.e423 * wedge.e4125) + (right_anti_dual.e425 * wedge.e1234) + (right_anti_dual.e12345 * wedge.e42), (right_anti_dual.e431 * wedge.e4235) + (right_anti_dual.e435 * wedge.e1234) + (right_anti_dual.e12345 * wedge.e43), -(right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e321 * wedge.e45) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43)) - float4((right_anti_dual.group0.xyz.yzx * wedge.group3.zxy), right_anti_dual.e423 * wedge.e15), 
            /* e23, e31, e12, e45 */
            float4((right_anti_dual.e235 * wedge.e1234) + (right_anti_dual.e12345 * wedge.e23), (right_anti_dual.e315 * wedge.e1234) + (right_anti_dual.e12345 * wedge.e31), (right_anti_dual.e125 * wedge.e1234) + (right_anti_dual.e12345 * wedge.e12), -(right_anti_dual.e425 * wedge.e4315) - (right_anti_dual.e435 * wedge.e4125)) + float4((right_anti_dual.group0.xyz * wedge.group3.www), right_anti_dual.e12345 * wedge.e45) - (right_anti_dual.group1.wwwx * wedge.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_anti_dual.e12345) * wedge.group2.xyz) + (float3(wedge.e3215) * right_anti_dual.group1.xyz) + (right_anti_dual.group2.yzx * wedge.group3.zxy) - (right_anti_dual.group2.zxy * wedge.group3.yzx)), right_anti_dual.e12345 * wedge.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_anti_dual.e12345) * wedge.group3
        );
    }
}
public extension AntiLine {
    public VersorOdd anti_reject_orthogonally_from(AntiDipoleInversion other) {
        CircleRotor wedge = CircleRotor(
            /* e423, e431, e412 */
            float3(other.e4) * this.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4((float3(other.e4) * this.group1.xyz), -(other.e1 * this.e23) - (other.e2 * this.e31) - (other.e3 * this.e12)), 
            /* e235, e315, e125, e12345 */
            float4((other.e2 * this.e35) + (other.e5 * this.e23), (other.e3 * this.e15) + (other.e5 * this.e31), (other.e1 * this.e25) + (other.e5 * this.e12), -(other.e431 * this.e25) - (other.e412 * this.e35) - (other.e415 * this.e23) - (other.e425 * this.e31) - (other.e435 * this.e12)) - float4((this.group1.xyz.yzx * other.group3.zxy), other.e423 * this.e15)
        );
        DipoleInversion right_anti_dual = DipoleInversion(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4((wedge.e412 * right_anti_dual.e4315) + (wedge.e415 * right_anti_dual.e1234) + (wedge.e12345 * right_anti_dual.e41), (wedge.e423 * right_anti_dual.e4125) + (wedge.e425 * right_anti_dual.e1234) + (wedge.e12345 * right_anti_dual.e42), (wedge.e431 * right_anti_dual.e4235) + (wedge.e435 * right_anti_dual.e1234) + (wedge.e12345 * right_anti_dual.e43), -(wedge.e431 * right_anti_dual.e25) - (wedge.e412 * right_anti_dual.e35) - (wedge.e415 * right_anti_dual.e23) - (wedge.e425 * right_anti_dual.e31) - (wedge.e435 * right_anti_dual.e12) - (wedge.e321 * right_anti_dual.e45) - (wedge.e235 * right_anti_dual.e41) - (wedge.e315 * right_anti_dual.e42) - (wedge.e125 * right_anti_dual.e43)) - float4((wedge.group0.xyz.yzx * right_anti_dual.group3.zxy), wedge.e423 * right_anti_dual.e15), 
            /* e23, e31, e12, e45 */
            float4((wedge.e235 * right_anti_dual.e1234) + (wedge.e12345 * right_anti_dual.e23), (wedge.e315 * right_anti_dual.e1234) + (wedge.e12345 * right_anti_dual.e31), (wedge.e125 * right_anti_dual.e1234) + (wedge.e12345 * right_anti_dual.e12), -(wedge.e425 * right_anti_dual.e4315) - (wedge.e435 * right_anti_dual.e4125)) + float4((wedge.group0.xyz * right_anti_dual.group3.www), wedge.e12345 * right_anti_dual.e45) - (wedge.group1.wwwx * right_anti_dual.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(wedge.e12345) * right_anti_dual.group2.xyz) + (float3(right_anti_dual.e3215) * wedge.group1.xyz) + (wedge.group2.yzx * right_anti_dual.group3.zxy) - (wedge.group2.zxy * right_anti_dual.group3.yzx)), wedge.e12345 * right_anti_dual.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_anti_dual.group3
        );
    }
}
public extension AntiLine {
    public AntiLine anti_reject_orthogonally_from(AntiDualNum other) {
        AntiLine wedge = AntiLine(
            /* e23, e31, e12 */
            float3(other.scalar) * this.group0.xyz, 
            /* e15, e25, e35 */
            float3(other.scalar) * this.group1.xyz
        );
        DualNum right_anti_dual = DualNum(
            /* e5, e12345 */
            other.group0.xy
        );
        return AntiLine(
            /* e23, e31, e12 */
            float3(right_anti_dual.e12345) * wedge.group0.xyz, 
            /* e15, e25, e35 */
            float3(right_anti_dual.e12345) * wedge.group1.xyz
        );
    }
}
public extension AntiLine {
    public AntiMotor anti_reject_orthogonally_from(AntiFlector other) {
        AntiFlatPoint wedge = AntiFlatPoint(
            /* e235, e315, e125, e321 */
            float4((other.e2 * this.e35) + (other.e5 * this.e23), (other.e3 * this.e15) + (other.e5 * this.e31), (other.e1 * this.e25) + (other.e5 * this.e12), -(other.e2 * this.e31) - (other.e3 * this.e12)) - (other.group1.zxyx * float4(this.group1.xyz.yzx, this.e23))
        );
        Flector right_anti_dual = Flector(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4(wedge.e321) * float4(right_anti_dual.group1.xyz, right_anti_dual.e45) * float4(-1.0), 
            /* e15, e25, e35, e3215 */
            float4(((wedge.group0.yzx * right_anti_dual.group1.zxy) - (wedge.group0.zxy * right_anti_dual.group1.yzx)), 0.0)
        );
    }
}
public extension AntiLine {
    public FlatPoint anti_reject_orthogonally_from(AntiLine other) {
        AntiDualNum wedge = AntiDualNum(
            /* e3215, scalar */
            float2(-(other.e23 * this.e15) - (other.e31 * this.e25) - (other.e12 * this.e35) - (other.e15 * this.e23) - (other.e25 * this.e31) - (other.e35 * this.e12), 0.0)
        );
        return FlatPoint(
            /* e15, e25, e35, e45 */
            float4(wedge.group0.xy.xx, wedge.e3215, 0.0) * float4(float3(1.0), 0.0) * float4(float3(other.e23 * -1.0, other.e31 * -1.0, other.e12 * -1.0), 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
    }
}
public extension AntiLine {
    public AntiMotor anti_reject_orthogonally_from(AntiMotor other) {
        AntiMotor wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4(float3(1.0), 0.0) * float4(this.group0.xyz, 0.0) * float4(other.group0.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e15, e25, e35, e3215 */
            float4((float3(other.scalar) * this.group1.xyz), -(this.e23 * other.e15) - (this.e31 * other.e25) - (this.e12 * other.e35) - (this.e15 * other.e23) - (this.e25 * other.e31) - (this.e35 * other.e12))
        );
        Motor right_anti_dual = Motor(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4((float3(right_anti_dual.e12345) * wedge.group0.xyz), (wedge.scalar * right_anti_dual.e12345) - (wedge.e23 * right_anti_dual.e415) - (wedge.e31 * right_anti_dual.e425) - (wedge.e12 * right_anti_dual.e435)), 
            /* e15, e25, e35, e3215 */
            float4(((float3(wedge.e3215) * right_anti_dual.group0.xyz) + (float3(right_anti_dual.e12345) * wedge.group1.xyz)), wedge.e3215 * right_anti_dual.e12345)
        );
    }
}
public extension AntiLine {
    public AntiLine anti_reject_orthogonally_from(AntiPlane other) {
        AntiFlatPoint wedge = AntiFlatPoint(
            /* e235, e315, e125, e321 */
            float4((this.e23 * other.e5) + (this.e35 * other.e2), (this.e31 * other.e5) + (this.e15 * other.e3), (this.e12 * other.e5) + (this.e25 * other.e1), -(this.e31 * other.e2) - (this.e12 * other.e3)) - (other.group0.zxyx * float4(this.group1.xyz.yzx, this.e23))
        );
        Plane right_anti_dual = Plane(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiLine(
            /* e23, e31, e12 */
            float3(wedge.e321) * right_anti_dual.group0.xyz * float3(-1.0), 
            /* e15, e25, e35 */
            (wedge.group0.yzx * right_anti_dual.group0.zxy) - (wedge.group0.zxy * right_anti_dual.group0.yzx)
        );
    }
}
public extension AntiLine {
    public Dipole anti_reject_orthogonally_from(Circle other) {
        AntiScalar wedge = AntiScalar(
            /* e12345 */
            -(this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435) - (this.e15 * other.e423) - (this.e25 * other.e431) - (this.e35 * other.e412)
        );
        Dipole right_anti_dual = Dipole(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35 */
            other.group2.xyz
        );
        return Dipole(
            /* e41, e42, e43 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(wedge.e12345) * right_anti_dual.group1, 
            /* e15, e25, e35 */
            float3(wedge.e12345) * right_anti_dual.group2.xyz
        );
    }
}
public extension AntiLine {
    public AntiCircleRotor anti_reject_orthogonally_from(CircleRotor other) {
        AntiScalar wedge = AntiScalar(
            /* e12345 */
            -(this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435) - (this.e15 * other.e423) - (this.e25 * other.e431) - (this.e35 * other.e412)
        );
        AntiCircleRotor right_anti_dual = AntiCircleRotor(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiCircleRotor(
            /* e41, e42, e43 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(wedge.e12345) * right_anti_dual.group1, 
            /* e15, e25, e35, scalar */
            float4(wedge.e12345) * right_anti_dual.group2
        );
    }
}
public extension AntiLine {
    public Dipole anti_reject_orthogonally_from(Dipole other) {
        Sphere wedge = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4((this.e23 * other.e45) + (this.e35 * other.e42), (this.e31 * other.e45) + (this.e15 * other.e43), (this.e12 * other.e45) + (this.e25 * other.e41), -(this.e31 * other.e25) - (this.e12 * other.e35) - (this.e15 * other.e23) - (this.e25 * other.e31) - (this.e35 * other.e12)) - float4((this.group1.xyz.yzx * other.group0.xyz.zxy), this.e23 * other.e15), 
            /* e1234 */
            -(this.e23 * other.e41) - (this.e31 * other.e42) - (this.e12 * other.e43)
        );
        Circle right_anti_dual = Circle(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125 */
            other.group2.xyz * float3(-1.0)
        );
        return Dipole(
            /* e41, e42, e43 */
            (float3(wedge.e1234) * right_anti_dual.group1.xyz) + (right_anti_dual.group0.xyz.zxy * wedge.group0.yzx) - (right_anti_dual.group0.xyz.yzx * wedge.group0.zxy), 
            /* e23, e31, e12, e45 */
            float4((right_anti_dual.e423 * wedge.e3215) + (right_anti_dual.e235 * wedge.e1234), (right_anti_dual.e431 * wedge.e3215) + (right_anti_dual.e315 * wedge.e1234), (right_anti_dual.e412 * wedge.e3215) + (right_anti_dual.e125 * wedge.e1234), -(right_anti_dual.e425 * wedge.e4315) - (right_anti_dual.e435 * wedge.e4125)) - (right_anti_dual.group1.wwwx * wedge.group0.xyzx), 
            /* e15, e25, e35 */
            (float3(wedge.e3215) * right_anti_dual.group1.xyz) + (right_anti_dual.group2.xyz.yzx * wedge.group0.zxy) - (right_anti_dual.group2.xyz.zxy * wedge.group0.yzx)
        );
    }
}
public extension AntiLine {
    public AntiCircleRotor anti_reject_orthogonally_from(DipoleInversion other) {
        Sphere wedge = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4((this.e23 * other.e45) + (this.e35 * other.e42), (this.e31 * other.e45) + (this.e15 * other.e43), (this.e12 * other.e45) + (this.e25 * other.e41), -(this.e31 * other.e25) - (this.e12 * other.e35) - (this.e15 * other.e23) - (this.e25 * other.e31) - (this.e35 * other.e12)) - float4((this.group1.xyz.yzx * other.group0.xyz.zxy), this.e23 * other.e15), 
            /* e1234 */
            -(this.e23 * other.e41) - (this.e31 * other.e42) - (this.e12 * other.e43)
        );
        AntiDipoleInversion right_anti_dual = AntiDipoleInversion(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiCircleRotor(
            /* e41, e42, e43 */
            (float3(wedge.e1234) * right_anti_dual.group1.xyz) + (right_anti_dual.group0.xyz.zxy * wedge.group0.yzx) - (right_anti_dual.group0.xyz.yzx * wedge.group0.zxy), 
            /* e23, e31, e12, e45 */
            float4((right_anti_dual.e423 * wedge.e3215) + (right_anti_dual.e235 * wedge.e1234), (right_anti_dual.e431 * wedge.e3215) + (right_anti_dual.e315 * wedge.e1234), (right_anti_dual.e412 * wedge.e3215) + (right_anti_dual.e125 * wedge.e1234), -(right_anti_dual.e425 * wedge.e4315) - (right_anti_dual.e435 * wedge.e4125)) - (right_anti_dual.group1.wwwx * wedge.group0.xyzx), 
            /* e15, e25, e35, scalar */
            float4(right_anti_dual.e125 * wedge.e4315 * -1.0, right_anti_dual.e235 * wedge.e4125 * -1.0, right_anti_dual.e315 * wedge.e4235 * -1.0, (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) + (right_anti_dual.e5 * wedge.e1234)) + (float4(wedge.e3215) * float4(right_anti_dual.group1.xyz, right_anti_dual.e4)) + (wedge.group0.zxyx * float4(right_anti_dual.group2.yzx, right_anti_dual.e1))
        );
    }
}
public extension AntiLine {
    public AntiLine anti_reject_orthogonally_from(FlatPoint other) {
        Plane wedge = Plane(
            /* e4235, e4315, e4125, e3215 */
            float4((float3(other.e45) * this.group0.xyz), -(this.e23 * other.e15) - (this.e31 * other.e25) - (this.e12 * other.e35))
        );
        AntiFlatPoint right_anti_dual = AntiFlatPoint(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiLine(
            /* e23, e31, e12 */
            float3(right_anti_dual.e321) * wedge.group0.xyz * float3(-1.0), 
            /* e15, e25, e35 */
            (right_anti_dual.group0.yzx * wedge.group0.zxy) - (right_anti_dual.group0.zxy * wedge.group0.yzx)
        );
    }
}
public extension AntiLine {
    public AntiMotor anti_reject_orthogonally_from(Flector other) {
        Plane wedge = Plane(
            /* e4235, e4315, e4125, e3215 */
            float4((float3(other.e45) * this.group0.xyz), -(this.e23 * other.e15) - (this.e31 * other.e25) - (this.e12 * other.e35))
        );
        AntiFlector right_anti_dual = AntiFlector(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4((right_anti_dual.group0.www * wedge.group0.xyz * float3(-1.0)), (right_anti_dual.e1 * wedge.e4235) + (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125)), 
            /* e15, e25, e35, e3215 */
            float4(((right_anti_dual.group0.yzx * wedge.group0.zxy) - (right_anti_dual.group0.zxy * wedge.group0.yzx)), 0.0)
        );
    }
}
public extension AntiLine {
    public AntiLine anti_reject_orthogonally_from(Line other) {
        AntiScalar wedge = AntiScalar(
            /* e12345 */
            -(this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435)
        );
        AntiLine right_anti_dual = AntiLine(
            /* e23, e31, e12 */
            other.group0.xyz, 
            /* e15, e25, e35 */
            other.group1.xyz
        );
        return AntiLine(
            /* e23, e31, e12 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e15, e25, e35 */
            float3(wedge.e12345) * right_anti_dual.group1.xyz
        );
    }
}
public extension AntiLine {
    public AntiMotor anti_reject_orthogonally_from(Motor other) {
        Motor wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4(float3(0.0), -(this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435)), 
            /* e235, e315, e125, e5 */
            float4(float3(1.0), 0.0) * float4(this.group0.xyz, 0.0) * float4(other.group1.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        AntiMotor right_anti_dual = AntiMotor(
            /* e23, e31, e12, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4((float3(wedge.e12345) * right_anti_dual.group0.xyz), (right_anti_dual.scalar * wedge.e12345) - (right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435)), 
            /* e15, e25, e35, e3215 */
            float4(((float3(right_anti_dual.e3215) * wedge.group0.xyz) + (float3(wedge.e12345) * right_anti_dual.group1.xyz)), right_anti_dual.e3215 * wedge.e12345)
        );
    }
}
public extension AntiLine {
    public MultiVector anti_reject_orthogonally_from(MultiVector other) {
        MultiVector wedge = MultiVector(
            /* scalar, e12345 */
            float2(0.0, -(this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435) - (this.e15 * other.e423) - (this.e25 * other.e431) - (this.e35 * other.e412)), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5 */
            0.0, 
            /* e15, e25, e35, e45 */
            float4(other.group0.xy.xx, other.scalar, 0.0) * float4(float3(1.0), 0.0) * float4(this.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(other.scalar) * this.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4((float3(other.e4) * this.group1.xyz), -(this.e23 * other.e1) - (this.e31 * other.e2) - (this.e12 * other.e3)), 
            /* e423, e431, e412 */
            float3(other.e4) * this.group0.xyz, 
            /* e235, e315, e125 */
            (float3(other.e5) * this.group0.xyz) + (this.group1.xyz.zxy * other.group1.yzx) - (this.group1.xyz.yzx * other.group1.zxy), 
            /* e4235, e4315, e4125, e3215 */
            float4((this.e23 * other.e45) + (this.e35 * other.e42), (this.e31 * other.e45) + (this.e15 * other.e43), (this.e12 * other.e45) + (this.e25 * other.e41), -(this.e31 * other.e25) - (this.e12 * other.e35) - (this.e15 * other.e23) - (this.e25 * other.e31) - (this.e35 * other.e12)) - float4((this.group1.xyz.yzx * other.group4.xyz.zxy), this.e23 * other.e15), 
            /* e1234 */
            -(this.e23 * other.e41) - (this.e31 * other.e42) - (this.e12 * other.e43)
        );
        MultiVector right_anti_dual = MultiVector(
            /* scalar, e12345 */
            other.group0.xy.yx * float2(-1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215, 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43 */
            other.group7.xyz, 
            /* e23, e31, e12 */
            other.group6.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412 */
            other.group4.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group3.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2((right_anti_dual.scalar * wedge.e12345) + (right_anti_dual.e12345 * wedge.scalar) + (right_anti_dual.e1 * wedge.e4235) + (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) + (right_anti_dual.e4 * wedge.e3215) + (right_anti_dual.e5 * wedge.e1234) + (right_anti_dual.e4235 * wedge.e1) + (right_anti_dual.e4315 * wedge.e2) + (right_anti_dual.e4125 * wedge.e3) + (right_anti_dual.e3215 * wedge.e4) + (right_anti_dual.e1234 * wedge.e5) - (right_anti_dual.e15 * wedge.e423) - (right_anti_dual.e25 * wedge.e431) - (right_anti_dual.e35 * wedge.e412) - (right_anti_dual.e45 * wedge.e321) - (right_anti_dual.e41 * wedge.e235) - (right_anti_dual.e42 * wedge.e315) - (right_anti_dual.e43 * wedge.e125) - (right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e321 * wedge.e45) - (right_anti_dual.e423 * wedge.e15) - (right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43), right_anti_dual.e12345 * wedge.e12345), 
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e15 * wedge.e1234) + (right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e4125 * wedge.e31), (right_anti_dual.e25 * wedge.e1234) + (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e4235 * wedge.e12), (right_anti_dual.e35 * wedge.e1234) + (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e4315 * wedge.e23), -(right_anti_dual.e415 * wedge.e423) - (right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412) - (right_anti_dual.e1234 * wedge.e45)) + (float4(right_anti_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_anti_dual.group1) + (wedge.group9.yzxx * float4(right_anti_dual.group5.xyz.zxy, right_anti_dual.e41)) + float4((wedge.group4.xyz * right_anti_dual.group9.www), right_anti_dual.e45 * wedge.e1234) + float4((right_anti_dual.group7.xyz.zxy * wedge.group8.xyz.yzx), right_anti_dual.e42 * wedge.e4315) + float4((right_anti_dual.group8.xyz.yzx * wedge.group7.xyz.zxy), right_anti_dual.e43 * wedge.e4125) - (right_anti_dual.group9.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((float3(right_anti_dual.e1234) * wedge.group3.xyz), right_anti_dual.e4125 * wedge.e43) - float4((right_anti_dual.group4.xyz * wedge.group9.www), right_anti_dual.e423 * wedge.e415) - float4((right_anti_dual.group5.xyz.yzx * wedge.group9.zxy), right_anti_dual.e431 * wedge.e425) - float4((right_anti_dual.group7.xyz.yzx * wedge.group8.xyz.zxy), right_anti_dual.e412 * wedge.e435) - float4((right_anti_dual.group8.xyz.zxy * wedge.group7.xyz.yzx), right_anti_dual.e4235 * wedge.e41), 
            /* e5 */
            (right_anti_dual.e12345 * wedge.e5) + (right_anti_dual.e5 * wedge.e12345) + (right_anti_dual.e4235 * wedge.e15) + (right_anti_dual.e4315 * wedge.e25) + (right_anti_dual.e4125 * wedge.e35) + (right_anti_dual.e3215 * wedge.e45) - (right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125) - (right_anti_dual.e45 * wedge.e3215) - (right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435), 
            /* e15, e25, e35, e45 */
            float4((right_anti_dual.e415 * wedge.e3215) + (right_anti_dual.e315 * wedge.e4125) + (right_anti_dual.e4125 * wedge.e315) + (right_anti_dual.e3215 * wedge.e415), (right_anti_dual.e425 * wedge.e3215) + (right_anti_dual.e125 * wedge.e4235) + (right_anti_dual.e4235 * wedge.e125) + (right_anti_dual.e3215 * wedge.e425), (right_anti_dual.e435 * wedge.e3215) + (right_anti_dual.e235 * wedge.e4315) + (right_anti_dual.e4315 * wedge.e235) + (right_anti_dual.e3215 * wedge.e435), -(right_anti_dual.e435 * wedge.e4125) - (right_anti_dual.e4235 * wedge.e415) - (right_anti_dual.e4315 * wedge.e425) - (right_anti_dual.e4125 * wedge.e435)) + (float4(right_anti_dual.e12345) * wedge.group3) + (float4(wedge.e12345) * right_anti_dual.group3) - (wedge.group9.yzxx * float4(right_anti_dual.group8.xyz.zxy, right_anti_dual.e415)) - float4((wedge.group8.xyz.zxy * right_anti_dual.group9.yzx), right_anti_dual.e425 * wedge.e4315), 
            /* e41, e42, e43 */
            (float3(right_anti_dual.e12345) * wedge.group4.xyz) + (float3(right_anti_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_anti_dual.group4.xyz) + (float3(wedge.e1234) * right_anti_dual.group6.xyz) + (right_anti_dual.group7.xyz.zxy * wedge.group9.yzx) + (wedge.group7.xyz.zxy * right_anti_dual.group9.yzx) - (right_anti_dual.group7.xyz.yzx * wedge.group9.zxy) - (wedge.group7.xyz.yzx * right_anti_dual.group9.zxy), 
            /* e23, e31, e12 */
            (float3(right_anti_dual.e12345) * wedge.group5.xyz) + (float3(right_anti_dual.e3215) * wedge.group7.xyz) + (float3(right_anti_dual.e1234) * wedge.group8.xyz) + (float3(wedge.e12345) * right_anti_dual.group5.xyz) + (float3(wedge.e3215) * right_anti_dual.group7.xyz) + (float3(wedge.e1234) * right_anti_dual.group8.xyz) - (float3(right_anti_dual.e321) * wedge.group9.xyz) - (float3(wedge.e321) * right_anti_dual.group9.xyz), 
            /* e415, e425, e435, e321 */
            (float4(right_anti_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_anti_dual.group6) + (right_anti_dual.group9.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - float4((right_anti_dual.group9.zxy * wedge.group9.yzx), right_anti_dual.e1234 * wedge.e3215), 
            /* e423, e431, e412 */
            (float3(right_anti_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_anti_dual.group7.xyz) + (float3(wedge.e1234) * right_anti_dual.group9.xyz) - (float3(right_anti_dual.e1234) * wedge.group9.xyz), 
            /* e235, e315, e125 */
            (float3(right_anti_dual.e12345) * wedge.group8.xyz) + (float3(right_anti_dual.e3215) * wedge.group9.xyz) + (float3(wedge.e12345) * right_anti_dual.group8.xyz) - (float3(wedge.e3215) * right_anti_dual.group9.xyz), 
            /* e4235, e4315, e4125, e3215 */
            (float4(right_anti_dual.e12345) * wedge.group9) + (float4(wedge.e12345) * right_anti_dual.group9), 
            /* e1234 */
            (right_anti_dual.e12345 * wedge.e1234) + (right_anti_dual.e1234 * wedge.e12345)
        );
    }
}
public extension AntiLine {
    public Dipole anti_reject_orthogonally_from(RoundPoint other) {
        Circle wedge = Circle(
            /* e423, e431, e412 */
            float3(other.e4) * this.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4((float3(other.e4) * this.group1.xyz), -(this.e23 * other.e1) - (this.e31 * other.e2) - (this.e12 * other.e3)), 
            /* e235, e315, e125 */
            (float3(other.e5) * this.group0.xyz) + (this.group1.xyz.zxy * other.group0.yzx) - (this.group1.xyz.yzx * other.group0.zxy)
        );
        Sphere right_anti_dual = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        return Dipole(
            /* e41, e42, e43 */
            (float3(right_anti_dual.e1234) * wedge.group1.xyz) + (wedge.group0.xyz.zxy * right_anti_dual.group0.yzx) - (wedge.group0.xyz.yzx * right_anti_dual.group0.zxy), 
            /* e23, e31, e12, e45 */
            float4((wedge.e423 * right_anti_dual.e3215) + (wedge.e235 * right_anti_dual.e1234), (wedge.e431 * right_anti_dual.e3215) + (wedge.e315 * right_anti_dual.e1234), (wedge.e412 * right_anti_dual.e3215) + (wedge.e125 * right_anti_dual.e1234), -(wedge.e425 * right_anti_dual.e4315) - (wedge.e435 * right_anti_dual.e4125)) - (wedge.group1.wwwx * right_anti_dual.group0.xyzx), 
            /* e15, e25, e35 */
            (float3(right_anti_dual.e3215) * wedge.group1.xyz) + (wedge.group2.xyz.yzx * right_anti_dual.group0.zxy) - (wedge.group2.xyz.zxy * right_anti_dual.group0.yzx)
        );
    }
}
public extension AntiLine {
    public AntiLine anti_reject_orthogonally_from(Scalar other) {
        AntiLine wedge = AntiLine(
            /* e23, e31, e12 */
            float3(other.scalar) * this.group0.xyz, 
            /* e15, e25, e35 */
            float3(other.scalar) * this.group1.xyz
        );
        AntiScalar right_anti_dual = AntiScalar(
            /* e12345 */
            other.scalar
        );
        return AntiLine(
            /* e23, e31, e12 */
            float3(right_anti_dual.e12345) * wedge.group0.xyz, 
            /* e15, e25, e35 */
            float3(right_anti_dual.e12345) * wedge.group1.xyz
        );
    }
}
public extension AntiLine {
    public VersorOdd anti_reject_orthogonally_from(VersorEven other) {
        CircleRotor wedge = CircleRotor(
            /* e423, e431, e412 */
            float3(other.e4) * this.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4((float3(other.e4) * this.group1.xyz), -(this.e23 * other.e1) - (this.e31 * other.e2) - (this.e12 * other.e3)), 
            /* e235, e315, e125, e12345 */
            float4((this.e23 * other.e5) + (this.e35 * other.e2), (this.e31 * other.e5) + (this.e15 * other.e3), (this.e12 * other.e5) + (this.e25 * other.e1), -(this.e31 * other.e425) - (this.e12 * other.e435) - (this.e15 * other.e423) - (this.e25 * other.e431) - (this.e35 * other.e412)) - float4((this.group1.xyz.yzx * other.group3.zxy), this.e23 * other.e415)
        );
        VersorOdd right_anti_dual = VersorOdd(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4((wedge.e415 * right_anti_dual.e1234) + (wedge.e12345 * right_anti_dual.e41), (wedge.e425 * right_anti_dual.e1234) + (wedge.e12345 * right_anti_dual.e42), (wedge.e435 * right_anti_dual.e1234) + (wedge.e12345 * right_anti_dual.e43), -(wedge.e431 * right_anti_dual.e25) - (wedge.e412 * right_anti_dual.e35) - (wedge.e415 * right_anti_dual.e23) - (wedge.e425 * right_anti_dual.e31) - (wedge.e435 * right_anti_dual.e12) - (wedge.e321 * right_anti_dual.e45) - (wedge.e235 * right_anti_dual.e41) - (wedge.e315 * right_anti_dual.e42) - (wedge.e125 * right_anti_dual.e43)) + float4((wedge.group0.xyz.zxy * right_anti_dual.group3.yzx), wedge.e12345 * right_anti_dual.scalar) - float4((wedge.group0.xyz.yzx * right_anti_dual.group3.zxy), wedge.e423 * right_anti_dual.e15), 
            /* e23, e31, e12, e45 */
            float4((wedge.e235 * right_anti_dual.e1234) + (wedge.e12345 * right_anti_dual.e23), (wedge.e315 * right_anti_dual.e1234) + (wedge.e12345 * right_anti_dual.e31), (wedge.e125 * right_anti_dual.e1234) + (wedge.e12345 * right_anti_dual.e12), -(wedge.e425 * right_anti_dual.e4315) - (wedge.e435 * right_anti_dual.e4125)) + float4((wedge.group0.xyz * right_anti_dual.group3.www), wedge.e12345 * right_anti_dual.e45) - (wedge.group1.wwwx * right_anti_dual.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(wedge.e12345) * right_anti_dual.group2.xyz) + (float3(right_anti_dual.e3215) * wedge.group1.xyz) + (wedge.group2.yzx * right_anti_dual.group3.zxy) - (wedge.group2.zxy * right_anti_dual.group3.yzx)), wedge.e12345 * right_anti_dual.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_anti_dual.group3
        );
    }
}
public extension AntiLine {
    public VersorOdd anti_reject_orthogonally_from(VersorOdd other) {
        DipoleInversion wedge = DipoleInversion(
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12, e45 */
            float4(float3(1.0), 0.0) * float4(this.group0.xyz, 0.0) * float4(other.group0.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e15, e25, e35, e1234 */
            float4((float3(other.scalar) * this.group1.xyz), -(this.e23 * other.e41) - (this.e31 * other.e42) - (this.e12 * other.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((this.e23 * other.e45) + (this.e35 * other.e42), (this.e31 * other.e45) + (this.e15 * other.e43), (this.e12 * other.e45) + (this.e25 * other.e41), -(this.e31 * other.e25) - (this.e12 * other.e35) - (this.e15 * other.e23) - (this.e25 * other.e31) - (this.e35 * other.e12)) - float4((this.group1.xyz.yzx * other.group0.zxy), this.e23 * other.e15)
        );
        VersorEven right_anti_dual = VersorEven(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            (wedge.group3.yzxy * float4(right_anti_dual.group0.zxy, right_anti_dual.e2)) + float4(float3(0.0), (wedge.e4125 * right_anti_dual.e3) + (wedge.e3215 * right_anti_dual.e4) - (wedge.e42 * right_anti_dual.e315) - (wedge.e43 * right_anti_dual.e125) - (wedge.e23 * right_anti_dual.e415) - (wedge.e31 * right_anti_dual.e425) - (wedge.e12 * right_anti_dual.e435) - (wedge.e45 * right_anti_dual.e321) - (wedge.e15 * right_anti_dual.e423) - (wedge.e25 * right_anti_dual.e431) - (wedge.e35 * right_anti_dual.e412)) + float4((wedge.group0.xyz * right_anti_dual.group0.www), wedge.e1234 * right_anti_dual.e5) + float4((wedge.group2.www * right_anti_dual.group1.xyz), wedge.e4235 * right_anti_dual.e1) - float4((wedge.group3.zxy * right_anti_dual.group0.yzx), wedge.e41 * right_anti_dual.e235), 
            /* e23, e31, e12, e45 */
            float4((wedge.e1234 * right_anti_dual.e235) + (wedge.e3215 * right_anti_dual.e423), (wedge.e1234 * right_anti_dual.e315) + (wedge.e3215 * right_anti_dual.e431), (wedge.e1234 * right_anti_dual.e125) + (wedge.e3215 * right_anti_dual.e412), -(wedge.e4315 * right_anti_dual.e425) - (wedge.e4125 * right_anti_dual.e435)) + (float4(right_anti_dual.e12345) * wedge.group1) - (wedge.group3.xyzx * right_anti_dual.group1.wwwx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(wedge.e3215) * right_anti_dual.group1.xyz) + (float3(right_anti_dual.e12345) * wedge.group2.xyz) + (wedge.group3.zxy * right_anti_dual.group2.yzx) - (wedge.group3.yzx * right_anti_dual.group2.zxy)), wedge.e1234 * right_anti_dual.e12345), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_anti_dual.e12345) * wedge.group3
        );
    }
}
public extension AntiMotor {
    // Fancy infix trick (first half)
    public AntiRejectOrthogonallyFromInfixPartial<AntiMotor> operator /(AntiRejectOrthogonallyFromInfix rhs) {
        return AntiRejectOrthogonallyFromInfixPartial<AntiMotor>(this);
    }
}
public extension AntiRejectOrthogonallyFromInfixPartial<AntiMotor> {
    // Fancy infix trick (second half)
    public VersorOdd operator /(AntiCircleRotor rhs) {
        return this.a.anti_reject_orthogonally_from(rhs);
    }
}
public extension AntiMotor {
    public VersorOdd anti_reject_orthogonally_from(AntiCircleRotor other) {
        VersorOdd wedge = VersorOdd(
            /* e41, e42, e43, scalar */
            float4(this.scalar) * float4(other.group0.xyz, other.scalar), 
            /* e23, e31, e12, e45 */
            float4(((float3(other.scalar) * this.group0.xyz) + (float3(this.scalar) * other.group1.xyz)), other.e45 * this.scalar), 
            /* e15, e25, e35, e1234 */
            float4((other.e15 * this.scalar) + (other.scalar * this.e15), (other.e25 * this.scalar) + (other.scalar * this.e25), (other.e35 * this.scalar) + (other.scalar * this.e35), -(other.e41 * this.e23) - (other.e42 * this.e31) - (other.e43 * this.e12)), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.e45 * this.e23, other.e45 * this.e31, other.e45 * this.e12, -(other.e31 * this.e25) - (other.e12 * this.e35) - (other.e15 * this.e23) - (other.e25 * this.e31) - (other.e35 * this.e12)) + (this.group1.zxyw * float4(other.group0.xyz.yzx, other.scalar)) - (this.group1.yzxx * float4(other.group0.xyz.zxy, other.e23))
        );
        CircleRotor right_anti_dual = CircleRotor(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4((right_anti_dual.e415 * wedge.e1234) + (right_anti_dual.e12345 * wedge.e41), (right_anti_dual.e425 * wedge.e1234) + (right_anti_dual.e12345 * wedge.e42), (right_anti_dual.e435 * wedge.e1234) + (right_anti_dual.e12345 * wedge.e43), -(right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e321 * wedge.e45) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43)) + float4((right_anti_dual.group0.xyz.zxy * wedge.group3.yzx), right_anti_dual.e12345 * wedge.scalar) - float4((right_anti_dual.group0.xyz.yzx * wedge.group3.zxy), right_anti_dual.e423 * wedge.e15), 
            /* e23, e31, e12, e45 */
            float4((right_anti_dual.e235 * wedge.e1234) + (right_anti_dual.e12345 * wedge.e23), (right_anti_dual.e315 * wedge.e1234) + (right_anti_dual.e12345 * wedge.e31), (right_anti_dual.e125 * wedge.e1234) + (right_anti_dual.e12345 * wedge.e12), -(right_anti_dual.e425 * wedge.e4315) - (right_anti_dual.e435 * wedge.e4125)) + float4((right_anti_dual.group0.xyz * wedge.group3.www), right_anti_dual.e12345 * wedge.e45) - (right_anti_dual.group1.wwwx * wedge.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_anti_dual.e12345) * wedge.group2.xyz) + (float3(wedge.e3215) * right_anti_dual.group1.xyz) + (right_anti_dual.group2.yzx * wedge.group3.zxy) - (right_anti_dual.group2.zxy * wedge.group3.yzx)), right_anti_dual.e12345 * wedge.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_anti_dual.e12345) * wedge.group3
        );
    }
}
public extension AntiMotor {
    public VersorOdd anti_reject_orthogonally_from(AntiDipoleInversion other) {
        VersorEven wedge = VersorEven(
            /* e423, e431, e412, e12345 */
            float4(other.e4 * this.e23, other.e4 * this.e31, other.e4 * this.e12, -(other.e423 * this.e15) - (other.e431 * this.e25) - (other.e412 * this.e35) - (other.e415 * this.e23) - (other.e425 * this.e31) - (other.e435 * this.e12)) + float4((other.group0.xyz * this.group0.www), other.e4 * this.e3215), 
            /* e415, e425, e435, e321 */
            float4(other.e4 * this.e15, other.e4 * this.e25, other.e4 * this.e35, -(other.e1 * this.e23) - (other.e2 * this.e31) - (other.e3 * this.e12)) + (float4(this.scalar) * other.group1), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.e5) * this.group0.xyz) + (float3(this.scalar) * other.group2.xyz) + (other.group3.yzx * this.group1.zxy) - (other.group3.zxy * this.group1.yzx)), other.e5 * this.scalar), 
            /* e1, e2, e3, e4 */
            float4(this.scalar) * float4(other.group3.xyz, other.e4)
        );
        DipoleInversion right_anti_dual = DipoleInversion(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            (right_anti_dual.group3.yzxy * float4(wedge.group0.zxy, wedge.e2)) + float4(float3(0.0), (right_anti_dual.e4125 * wedge.e3) + (right_anti_dual.e3215 * wedge.e4) - (right_anti_dual.e42 * wedge.e315) - (right_anti_dual.e43 * wedge.e125) - (right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435) - (right_anti_dual.e45 * wedge.e321) - (right_anti_dual.e15 * wedge.e423) - (right_anti_dual.e25 * wedge.e431) - (right_anti_dual.e35 * wedge.e412)) + float4((right_anti_dual.group0.xyz * wedge.group0.www), right_anti_dual.e1234 * wedge.e5) + float4((right_anti_dual.group2.www * wedge.group1.xyz), right_anti_dual.e4235 * wedge.e1) - float4((right_anti_dual.group3.zxy * wedge.group0.yzx), right_anti_dual.e41 * wedge.e235), 
            /* e23, e31, e12, e45 */
            float4((right_anti_dual.e1234 * wedge.e235) + (right_anti_dual.e3215 * wedge.e423), (right_anti_dual.e1234 * wedge.e315) + (right_anti_dual.e3215 * wedge.e431), (right_anti_dual.e1234 * wedge.e125) + (right_anti_dual.e3215 * wedge.e412), -(right_anti_dual.e4315 * wedge.e425) - (right_anti_dual.e4125 * wedge.e435)) + (float4(wedge.e12345) * right_anti_dual.group1) - (right_anti_dual.group3.xyzx * wedge.group1.wwwx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_anti_dual.e3215) * wedge.group1.xyz) + (float3(wedge.e12345) * right_anti_dual.group2.xyz) + (right_anti_dual.group3.zxy * wedge.group2.yzx) - (right_anti_dual.group3.yzx * wedge.group2.zxy)), right_anti_dual.e1234 * wedge.e12345), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_anti_dual.group3
        );
    }
}
public extension AntiMotor {
    public AntiMotor anti_reject_orthogonally_from(AntiDualNum other) {
        AntiMotor wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4(other.scalar) * this.group0, 
            /* e15, e25, e35, e3215 */
            float4(other.group0.xy.yy, other.scalar, (other.e3215 * this.scalar) + (other.scalar * this.e3215)) * float4(this.group1.xyz, 1.0)
        );
        DualNum right_anti_dual = DualNum(
            /* e5, e12345 */
            other.group0.xy
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4(right_anti_dual.e12345) * wedge.group0, 
            /* e15, e25, e35, e3215 */
            float4(right_anti_dual.e12345) * wedge.group1
        );
    }
}
public extension AntiMotor {
    public Scalar anti_reject_orthogonally_from(AntiFlatPoint other) {
        return Scalar(
            /* scalar */
            float4(other.group0.xyz, other.e321 * -1.0)[3] * other.e321 * this.scalar * -1.0
        );
    }
}
public extension AntiMotor {
    public AntiMotor anti_reject_orthogonally_from(AntiFlector other) {
        AntiFlector wedge = AntiFlector(
            /* e235, e315, e125, e321 */
            float4((other.e2 * this.e35) + (other.e5 * this.e23), (other.e3 * this.e15) + (other.e5 * this.e31), (other.e1 * this.e25) + (other.e5 * this.e12), -(other.e2 * this.e31) - (other.e3 * this.e12)) + (float4(this.scalar) * other.group0) - (other.group1.zxyx * float4(this.group1.yzx, this.e23)), 
            /* e1, e2, e3, e5 */
            float4(this.scalar) * other.group1
        );
        Flector right_anti_dual = Flector(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4((wedge.group0.www * right_anti_dual.group1.xyz * float3(-1.0)), (wedge.e1 * right_anti_dual.e4235) + (wedge.e2 * right_anti_dual.e4315) + (wedge.e3 * right_anti_dual.e4125) - (wedge.e321 * right_anti_dual.e45)), 
            /* e15, e25, e35, e3215 */
            float4(((wedge.group0.yzx * right_anti_dual.group1.zxy) - (wedge.group0.zxy * right_anti_dual.group1.yzx)), 0.0)
        );
    }
}
public extension AntiMotor {
    public AntiMotor anti_reject_orthogonally_from(AntiLine other) {
        AntiMotor wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4(float3(1.0), 0.0) * float4(other.group0.xyz, 0.0) * float4(this.group0.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e15, e25, e35, e3215 */
            float4((float3(this.scalar) * other.group1.xyz), -(other.e23 * this.e15) - (other.e31 * this.e25) - (other.e12 * this.e35) - (other.e15 * this.e23) - (other.e25 * this.e31) - (other.e35 * this.e12))
        );
        Line right_anti_dual = Line(
            /* e415, e425, e435 */
            other.group0.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group1.xyz * float3(-1.0)
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4(float3(0.0), -(wedge.e23 * right_anti_dual.e415) - (wedge.e31 * right_anti_dual.e425) - (wedge.e12 * right_anti_dual.e435)), 
            /* e15, e25, e35, e3215 */
            float4(float3(1.0), 0.0) * float4(right_anti_dual.group0.xyz, 0.0) * float4(wedge.group1.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
    }
}
public extension AntiMotor {
    public AntiMotor anti_reject_orthogonally_from(AntiMotor other) {
        AntiMotor wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4(((float3(other.scalar) * this.group0.xyz) + (float3(this.scalar) * other.group0.xyz)), other.scalar * this.scalar), 
            /* e15, e25, e35, e3215 */
            (float4(other.scalar) * this.group1) + (float4(this.scalar) * other.group1) + float4(float3(0.0), -(other.e23 * this.e15) - (other.e31 * this.e25) - (other.e12 * this.e35) - (other.e15 * this.e23) - (other.e25 * this.e31) - (other.e35 * this.e12))
        );
        Motor right_anti_dual = Motor(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4((float3(right_anti_dual.e12345) * wedge.group0.xyz), (wedge.scalar * right_anti_dual.e12345) - (wedge.e23 * right_anti_dual.e415) - (wedge.e31 * right_anti_dual.e425) - (wedge.e12 * right_anti_dual.e435)), 
            /* e15, e25, e35, e3215 */
            float4(((float3(wedge.e3215) * right_anti_dual.group0.xyz) + (float3(right_anti_dual.e12345) * wedge.group1.xyz)), wedge.e3215 * right_anti_dual.e12345)
        );
    }
}
public extension AntiMotor {
    public AntiMotor anti_reject_orthogonally_from(AntiPlane other) {
        AntiFlector wedge = AntiFlector(
            /* e235, e315, e125, e321 */
            float4((this.e23 * other.e5) + (this.e35 * other.e2), (this.e31 * other.e5) + (this.e15 * other.e3), (this.e12 * other.e5) + (this.e25 * other.e1), -(this.e31 * other.e2) - (this.e12 * other.e3)) - (other.group0.zxyx * float4(this.group1.yzx, this.e23)), 
            /* e1, e2, e3, e5 */
            float4(this.scalar) * other.group0
        );
        Plane right_anti_dual = Plane(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4((wedge.group0.www * right_anti_dual.group0.xyz * float3(-1.0)), (wedge.e1 * right_anti_dual.e4235) + (wedge.e2 * right_anti_dual.e4315) + (wedge.e3 * right_anti_dual.e4125)), 
            /* e15, e25, e35, e3215 */
            float4(((wedge.group0.yzx * right_anti_dual.group0.zxy) - (wedge.group0.zxy * right_anti_dual.group0.yzx)), 0.0)
        );
    }
}
public extension AntiMotor {
    public Scalar anti_reject_orthogonally_from(AntiScalar other) {
        return Scalar(
            /* scalar */
            this.scalar * pow(other.e12345, 2) * -1.0
        );
    }
}
public extension AntiMotor {
    public AntiCircleRotor anti_reject_orthogonally_from(Circle other) {
        CircleRotor wedge = CircleRotor(
            /* e423, e431, e412 */
            float3(this.scalar) * other.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(this.scalar) * other.group1, 
            /* e235, e315, e125, e12345 */
            float4((float3(this.scalar) * other.group2.xyz), -(this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435) - (this.e15 * other.e423) - (this.e25 * other.e431) - (this.e35 * other.e412))
        );
        Dipole right_anti_dual = Dipole(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35 */
            other.group2.xyz
        );
        return AntiCircleRotor(
            /* e41, e42, e43 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(wedge.e12345) * right_anti_dual.group1, 
            /* e15, e25, e35, scalar */
            float4((float3(wedge.e12345) * right_anti_dual.group2.xyz), -(wedge.e423 * right_anti_dual.e15) - (wedge.e431 * right_anti_dual.e25) - (wedge.e412 * right_anti_dual.e35) - (wedge.e415 * right_anti_dual.e23) - (wedge.e425 * right_anti_dual.e31) - (wedge.e435 * right_anti_dual.e12) - (wedge.e321 * right_anti_dual.e45) - (wedge.e235 * right_anti_dual.e41) - (wedge.e315 * right_anti_dual.e42) - (wedge.e125 * right_anti_dual.e43))
        );
    }
}
public extension AntiMotor {
    public AntiCircleRotor anti_reject_orthogonally_from(CircleRotor other) {
        CircleRotor wedge = CircleRotor(
            /* e423, e431, e412 */
            float3(this.scalar) * other.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(this.scalar) * other.group1, 
            /* e235, e315, e125, e12345 */
            float4((this.group0.www * other.group2.xyz), (this.scalar * other.e12345) - (this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435) - (this.e15 * other.e423) - (this.e25 * other.e431) - (this.e35 * other.e412))
        );
        AntiCircleRotor right_anti_dual = AntiCircleRotor(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiCircleRotor(
            /* e41, e42, e43 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(wedge.e12345) * right_anti_dual.group1, 
            /* e15, e25, e35, scalar */
            float4((float3(wedge.e12345) * right_anti_dual.group2.xyz), (right_anti_dual.scalar * wedge.e12345) - (right_anti_dual.e41 * wedge.e235) - (right_anti_dual.e42 * wedge.e315) - (right_anti_dual.e43 * wedge.e125) - (right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435) - (right_anti_dual.e45 * wedge.e321) - (right_anti_dual.e15 * wedge.e423) - (right_anti_dual.e25 * wedge.e431) - (right_anti_dual.e35 * wedge.e412))
        );
    }
}
public extension AntiMotor {
    public AntiCircleRotor anti_reject_orthogonally_from(Dipole other) {
        DipoleInversion wedge = DipoleInversion(
            /* e41, e42, e43 */
            float3(this.scalar) * other.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(this.scalar) * other.group1, 
            /* e15, e25, e35, e1234 */
            float4((float3(this.scalar) * other.group2.xyz), -(this.e23 * other.e41) - (this.e31 * other.e42) - (this.e12 * other.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((this.e23 * other.e45) + (this.e35 * other.e42), (this.e31 * other.e45) + (this.e15 * other.e43), (this.e12 * other.e45) + (this.e25 * other.e41), -(this.e31 * other.e25) - (this.e12 * other.e35) - (this.e15 * other.e23) - (this.e25 * other.e31) - (this.e35 * other.e12)) - float4((other.group0.xyz.zxy * this.group1.yzx), this.e23 * other.e15)
        );
        Circle right_anti_dual = Circle(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125 */
            other.group2.xyz * float3(-1.0)
        );
        return AntiCircleRotor(
            /* e41, e42, e43 */
            (float3(wedge.e1234) * right_anti_dual.group1.xyz) + (right_anti_dual.group0.xyz.zxy * wedge.group3.yzx) - (right_anti_dual.group0.xyz.yzx * wedge.group3.zxy), 
            /* e23, e31, e12, e45 */
            float4((right_anti_dual.e423 * wedge.e3215) + (right_anti_dual.e235 * wedge.e1234), (right_anti_dual.e431 * wedge.e3215) + (right_anti_dual.e315 * wedge.e1234), (right_anti_dual.e412 * wedge.e3215) + (right_anti_dual.e125 * wedge.e1234), -(right_anti_dual.e425 * wedge.e4315) - (right_anti_dual.e435 * wedge.e4125)) - (right_anti_dual.group1.wwwx * wedge.group3.xyzx), 
            /* e15, e25, e35, scalar */
            float4((right_anti_dual.e415 * wedge.e3215) + (right_anti_dual.e315 * wedge.e4125), (right_anti_dual.e425 * wedge.e3215) + (right_anti_dual.e125 * wedge.e4235), (right_anti_dual.e435 * wedge.e3215) + (right_anti_dual.e235 * wedge.e4315), -(right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e321 * wedge.e45) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43)) - float4((right_anti_dual.group2.xyz.zxy * wedge.group3.yzx), right_anti_dual.e423 * wedge.e15)
        );
    }
}
public extension AntiMotor {
    public AntiCircleRotor anti_reject_orthogonally_from(DipoleInversion other) {
        DipoleInversion wedge = DipoleInversion(
            /* e41, e42, e43 */
            float3(this.scalar) * other.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(this.scalar) * other.group1, 
            /* e15, e25, e35, e1234 */
            float4((this.group0.www * other.group2.xyz), (this.scalar * other.e1234) - (this.e23 * other.e41) - (this.e31 * other.e42) - (this.e12 * other.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((this.e23 * other.e45) + (this.scalar * other.e4235), (this.e31 * other.e45) + (this.scalar * other.e4315), (this.e12 * other.e45) + (this.scalar * other.e4125), -(this.e31 * other.e25) - (this.e12 * other.e35) - (this.e15 * other.e23) - (this.e25 * other.e31) - (this.e35 * other.e12)) + float4((other.group0.xyz.yzx * this.group1.zxy), this.scalar * other.e3215) - float4((other.group0.xyz.zxy * this.group1.yzx), this.e23 * other.e15)
        );
        AntiDipoleInversion right_anti_dual = AntiDipoleInversion(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiCircleRotor(
            /* e41, e42, e43 */
            (float3(wedge.e1234) * right_anti_dual.group1.xyz) + (right_anti_dual.group0.xyz.zxy * wedge.group3.yzx) - (right_anti_dual.group0.xyz.yzx * wedge.group3.zxy), 
            /* e23, e31, e12, e45 */
            float4((right_anti_dual.e423 * wedge.e3215) + (right_anti_dual.e235 * wedge.e1234), (right_anti_dual.e431 * wedge.e3215) + (right_anti_dual.e315 * wedge.e1234), (right_anti_dual.e412 * wedge.e3215) + (right_anti_dual.e125 * wedge.e1234), -(right_anti_dual.e425 * wedge.e4315) - (right_anti_dual.e435 * wedge.e4125)) - (right_anti_dual.group1.wwwx * wedge.group3.xyzx), 
            /* e15, e25, e35, scalar */
            (float4(wedge.e3215) * float4(right_anti_dual.group1.xyz, right_anti_dual.e4)) + (wedge.group3.zxyx * float4(right_anti_dual.group2.yzx, right_anti_dual.e1)) + float4(float3(0.0), (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) + (right_anti_dual.e5 * wedge.e1234) - (right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e321 * wedge.e45) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43)) - float4((right_anti_dual.group2.zxy * wedge.group3.yzx), right_anti_dual.e423 * wedge.e15)
        );
    }
}
public extension AntiMotor {
    public AntiMotor anti_reject_orthogonally_from(DualNum other) {
        Motor wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4(float3(0.0), this.scalar * other.e12345), 
            /* e235, e315, e125, e5 */
            float4(other.e5) * this.group0
        );
        AntiDualNum right_anti_dual = AntiDualNum(
            /* e3215, scalar */
            other.group0.xy * float2(-1.0)
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4(float3(0.0), right_anti_dual.scalar * wedge.e12345), 
            /* e15, e25, e35, e3215 */
            float4(right_anti_dual.e3215) * wedge.group0
        );
    }
}
public extension AntiMotor {
    public AntiMotor anti_reject_orthogonally_from(FlatPoint other) {
        Flector wedge = Flector(
            /* e15, e25, e35, e45 */
            float4(this.scalar) * other.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4((float3(other.e45) * this.group0.xyz), -(this.e23 * other.e15) - (this.e31 * other.e25) - (this.e12 * other.e35))
        );
        AntiFlatPoint right_anti_dual = AntiFlatPoint(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4(right_anti_dual.e321) * float4(wedge.group1.xyz, wedge.e45) * float4(-1.0), 
            /* e15, e25, e35, e3215 */
            float4(((right_anti_dual.group0.yzx * wedge.group1.zxy) - (right_anti_dual.group0.zxy * wedge.group1.yzx)), 0.0)
        );
    }
}
public extension AntiMotor {
    public AntiMotor anti_reject_orthogonally_from(Flector other) {
        Flector wedge = Flector(
            /* e15, e25, e35, e45 */
            float4(this.scalar) * other.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4(this.scalar * other.e4235, this.scalar * other.e4315, this.scalar * other.e4125, -(this.e23 * other.e15) - (this.e31 * other.e25) - (this.e12 * other.e35)) + (this.group0 * float4(other.group0.www, other.e3215))
        );
        AntiFlector right_anti_dual = AntiFlector(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4((right_anti_dual.group0.www * wedge.group1.xyz * float3(-1.0)), (right_anti_dual.e1 * wedge.e4235) + (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) - (right_anti_dual.e321 * wedge.e45)), 
            /* e15, e25, e35, e3215 */
            float4(((right_anti_dual.group0.yzx * wedge.group1.zxy) - (right_anti_dual.group0.zxy * wedge.group1.yzx)), 0.0)
        );
    }
}
public extension AntiMotor {
    public AntiMotor anti_reject_orthogonally_from(Line other) {
        Motor wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4((float3(this.scalar) * other.group0.xyz), -(this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435)), 
            /* e235, e315, e125, e5 */
            float4(float3(1.0), 0.0) * float4(other.group1.xyz, 0.0) * float4(this.group0.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        AntiLine right_anti_dual = AntiLine(
            /* e23, e31, e12 */
            other.group0.xyz, 
            /* e15, e25, e35 */
            other.group1.xyz
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4((float3(wedge.e12345) * right_anti_dual.group0.xyz), -(right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435)), 
            /* e15, e25, e35, e3215 */
            float4(float3(1.0), 0.0) * float4(right_anti_dual.group1.xyz, 0.0) * float4(wedge.group0.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
    }
}
public extension AntiMotor {
    public AntiMotor anti_reject_orthogonally_from(Motor other) {
        Motor wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4((this.group0.www * other.group0.xyz), (this.scalar * other.e12345) - (this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435)), 
            /* e235, e315, e125, e5 */
            float4(((float3(this.scalar) * other.group1.xyz) + (float3(other.e5) * this.group0.xyz)), this.scalar * other.e5)
        );
        AntiMotor right_anti_dual = AntiMotor(
            /* e23, e31, e12, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4((float3(wedge.e12345) * right_anti_dual.group0.xyz), (right_anti_dual.scalar * wedge.e12345) - (right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435)), 
            /* e15, e25, e35, e3215 */
            float4(((float3(right_anti_dual.e3215) * wedge.group0.xyz) + (float3(wedge.e12345) * right_anti_dual.group1.xyz)), right_anti_dual.e3215 * wedge.e12345)
        );
    }
}
public extension AntiMotor {
    public MultiVector anti_reject_orthogonally_from(MultiVector other) {
        MultiVector wedge = MultiVector(
            /* scalar, e12345 */
            float2(this.scalar * other.scalar, (this.scalar * other.e12345) + (this.e3215 * other.e4) - (this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435) - (this.e15 * other.e423) - (this.e25 * other.e431) - (this.e35 * other.e412)), 
            /* e1, e2, e3, e4 */
            float4(this.scalar) * other.group1, 
            /* e5 */
            this.scalar * other.e5, 
            /* e15, e25, e35, e45 */
            float4(((float3(this.scalar) * other.group3.xyz) + (float3(other.scalar) * this.group1.xyz)), this.scalar * other.e45), 
            /* e41, e42, e43 */
            float3(this.scalar) * other.group4.xyz, 
            /* e23, e31, e12 */
            (float3(this.scalar) * other.group5.xyz) + (float3(other.scalar) * this.group0.xyz), 
            /* e415, e425, e435, e321 */
            float4(this.e15 * other.e4, this.e25 * other.e4, this.e35 * other.e4, -(this.e23 * other.e1) - (this.e31 * other.e2) - (this.e12 * other.e3)) + (float4(this.scalar) * other.group6), 
            /* e423, e431, e412 */
            (float3(this.scalar) * other.group7.xyz) + (float3(other.e4) * this.group0.xyz), 
            /* e235, e315, e125 */
            (float3(this.scalar) * other.group8.xyz) + (float3(other.e5) * this.group0.xyz) + (this.group1.zxy * other.group1.yzx) - (this.group1.yzx * other.group1.zxy), 
            /* e4235, e4315, e4125, e3215 */
            float4(this.scalar * other.e4235, this.scalar * other.e4315, this.scalar * other.e4125, -(this.e23 * other.e15) - (this.e31 * other.e25) - (this.e12 * other.e35) - (this.e25 * other.e31) - (this.e35 * other.e12)) + (this.group0 * float4(other.group3.www, other.e3215)) + (this.group1.zxyw * float4(other.group4.xyz.yzx, other.scalar)) - (this.group1.yzxx * float4(other.group4.xyz.zxy, other.e23)), 
            /* e1234 */
            (this.scalar * other.e1234) - (this.e23 * other.e41) - (this.e31 * other.e42) - (this.e12 * other.e43)
        );
        MultiVector right_anti_dual = MultiVector(
            /* scalar, e12345 */
            other.group0.xy.yx * float2(-1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215, 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43 */
            other.group7.xyz, 
            /* e23, e31, e12 */
            other.group6.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412 */
            other.group4.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group3.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2((right_anti_dual.scalar * wedge.e12345) + (right_anti_dual.e12345 * wedge.scalar) + (right_anti_dual.e1 * wedge.e4235) + (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) + (right_anti_dual.e4 * wedge.e3215) + (right_anti_dual.e5 * wedge.e1234) + (right_anti_dual.e4235 * wedge.e1) + (right_anti_dual.e4315 * wedge.e2) + (right_anti_dual.e4125 * wedge.e3) + (right_anti_dual.e3215 * wedge.e4) + (right_anti_dual.e1234 * wedge.e5) - (right_anti_dual.e15 * wedge.e423) - (right_anti_dual.e25 * wedge.e431) - (right_anti_dual.e35 * wedge.e412) - (right_anti_dual.e45 * wedge.e321) - (right_anti_dual.e41 * wedge.e235) - (right_anti_dual.e42 * wedge.e315) - (right_anti_dual.e43 * wedge.e125) - (right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e321 * wedge.e45) - (right_anti_dual.e423 * wedge.e15) - (right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43), right_anti_dual.e12345 * wedge.e12345), 
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e15 * wedge.e1234) + (right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e4125 * wedge.e31), (right_anti_dual.e25 * wedge.e1234) + (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e4235 * wedge.e12), (right_anti_dual.e35 * wedge.e1234) + (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e4315 * wedge.e23), -(right_anti_dual.e415 * wedge.e423) - (right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412) - (right_anti_dual.e1234 * wedge.e45)) + (float4(right_anti_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_anti_dual.group1) + (wedge.group9.yzxx * float4(right_anti_dual.group5.xyz.zxy, right_anti_dual.e41)) + float4((wedge.group4.xyz * right_anti_dual.group9.www), right_anti_dual.e45 * wedge.e1234) + float4((right_anti_dual.group7.xyz.zxy * wedge.group8.xyz.yzx), right_anti_dual.e42 * wedge.e4315) + float4((right_anti_dual.group8.xyz.yzx * wedge.group7.xyz.zxy), right_anti_dual.e43 * wedge.e4125) - (right_anti_dual.group9.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((float3(right_anti_dual.e1234) * wedge.group3.xyz), right_anti_dual.e4125 * wedge.e43) - float4((right_anti_dual.group4.xyz * wedge.group9.www), right_anti_dual.e423 * wedge.e415) - float4((right_anti_dual.group5.xyz.yzx * wedge.group9.zxy), right_anti_dual.e431 * wedge.e425) - float4((right_anti_dual.group7.xyz.yzx * wedge.group8.xyz.zxy), right_anti_dual.e412 * wedge.e435) - float4((right_anti_dual.group8.xyz.zxy * wedge.group7.xyz.yzx), right_anti_dual.e4235 * wedge.e41), 
            /* e5 */
            (right_anti_dual.e12345 * wedge.e5) + (right_anti_dual.e5 * wedge.e12345) + (right_anti_dual.e4235 * wedge.e15) + (right_anti_dual.e4315 * wedge.e25) + (right_anti_dual.e4125 * wedge.e35) + (right_anti_dual.e3215 * wedge.e45) - (right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125) - (right_anti_dual.e45 * wedge.e3215) - (right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435), 
            /* e15, e25, e35, e45 */
            float4((right_anti_dual.e415 * wedge.e3215) + (right_anti_dual.e315 * wedge.e4125) + (right_anti_dual.e4125 * wedge.e315) + (right_anti_dual.e3215 * wedge.e415), (right_anti_dual.e425 * wedge.e3215) + (right_anti_dual.e125 * wedge.e4235) + (right_anti_dual.e4235 * wedge.e125) + (right_anti_dual.e3215 * wedge.e425), (right_anti_dual.e435 * wedge.e3215) + (right_anti_dual.e235 * wedge.e4315) + (right_anti_dual.e4315 * wedge.e235) + (right_anti_dual.e3215 * wedge.e435), -(right_anti_dual.e435 * wedge.e4125) - (right_anti_dual.e4235 * wedge.e415) - (right_anti_dual.e4315 * wedge.e425) - (right_anti_dual.e4125 * wedge.e435)) + (float4(right_anti_dual.e12345) * wedge.group3) + (float4(wedge.e12345) * right_anti_dual.group3) - (wedge.group9.yzxx * float4(right_anti_dual.group8.xyz.zxy, right_anti_dual.e415)) - float4((wedge.group8.xyz.zxy * right_anti_dual.group9.yzx), right_anti_dual.e425 * wedge.e4315), 
            /* e41, e42, e43 */
            (float3(right_anti_dual.e12345) * wedge.group4.xyz) + (float3(right_anti_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_anti_dual.group4.xyz) + (float3(wedge.e1234) * right_anti_dual.group6.xyz) + (right_anti_dual.group7.xyz.zxy * wedge.group9.yzx) + (wedge.group7.xyz.zxy * right_anti_dual.group9.yzx) - (right_anti_dual.group7.xyz.yzx * wedge.group9.zxy) - (wedge.group7.xyz.yzx * right_anti_dual.group9.zxy), 
            /* e23, e31, e12 */
            (float3(right_anti_dual.e12345) * wedge.group5.xyz) + (float3(right_anti_dual.e3215) * wedge.group7.xyz) + (float3(right_anti_dual.e1234) * wedge.group8.xyz) + (float3(wedge.e12345) * right_anti_dual.group5.xyz) + (float3(wedge.e3215) * right_anti_dual.group7.xyz) + (float3(wedge.e1234) * right_anti_dual.group8.xyz) - (float3(right_anti_dual.e321) * wedge.group9.xyz) - (float3(wedge.e321) * right_anti_dual.group9.xyz), 
            /* e415, e425, e435, e321 */
            (float4(right_anti_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_anti_dual.group6) + (right_anti_dual.group9.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - float4((right_anti_dual.group9.zxy * wedge.group9.yzx), right_anti_dual.e1234 * wedge.e3215), 
            /* e423, e431, e412 */
            (float3(right_anti_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_anti_dual.group7.xyz) + (float3(wedge.e1234) * right_anti_dual.group9.xyz) - (float3(right_anti_dual.e1234) * wedge.group9.xyz), 
            /* e235, e315, e125 */
            (float3(right_anti_dual.e12345) * wedge.group8.xyz) + (float3(right_anti_dual.e3215) * wedge.group9.xyz) + (float3(wedge.e12345) * right_anti_dual.group8.xyz) - (float3(wedge.e3215) * right_anti_dual.group9.xyz), 
            /* e4235, e4315, e4125, e3215 */
            (float4(right_anti_dual.e12345) * wedge.group9) + (float4(wedge.e12345) * right_anti_dual.group9), 
            /* e1234 */
            (right_anti_dual.e12345 * wedge.e1234) + (right_anti_dual.e1234 * wedge.e12345)
        );
    }
}
public extension AntiMotor {
    public Scalar anti_reject_orthogonally_from(Plane other) {
        Plane wedge = Plane(
            /* e4235, e4315, e4125, e3215 */
            float4(this.scalar) * other.group0
        );
        AntiPlane right_anti_dual = AntiPlane(
            /* e1, e2, e3, e5 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return Scalar(
            /* scalar */
            (right_anti_dual.e1 * wedge.e4235) + (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125)
        );
    }
}
public extension AntiMotor {
    public VersorOdd anti_reject_orthogonally_from(RoundPoint other) {
        VersorEven wedge = VersorEven(
            /* e423, e431, e412, e12345 */
            float4(other.e4) * float4(this.group0.xyz, this.e3215), 
            /* e415, e425, e435, e321 */
            float4((float3(other.e4) * this.group1.xyz), -(this.e23 * other.e1) - (this.e31 * other.e2) - (this.e12 * other.e3)), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.e5) * this.group0.xyz) + (this.group1.zxy * other.group0.yzx) - (this.group1.yzx * other.group0.zxy)), this.scalar * other.e5), 
            /* e1, e2, e3, e4 */
            float4(this.scalar) * other.group0
        );
        Sphere right_anti_dual = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(right_anti_dual.e4125 * wedge.e431 * -1.0, right_anti_dual.e4235 * wedge.e412 * -1.0, right_anti_dual.e4315 * wedge.e423 * -1.0, (right_anti_dual.e4125 * wedge.e3) + (right_anti_dual.e3215 * wedge.e4) + (right_anti_dual.e1234 * wedge.e5)) + (right_anti_dual.group0.yzxx * float4(wedge.group0.zxy, wedge.e1)) + float4((float3(right_anti_dual.e1234) * wedge.group1.xyz), right_anti_dual.e4315 * wedge.e2), 
            /* e23, e31, e12, e45 */
            float4((right_anti_dual.e3215 * wedge.e423) + (right_anti_dual.e1234 * wedge.e235), (right_anti_dual.e3215 * wedge.e431) + (right_anti_dual.e1234 * wedge.e315), (right_anti_dual.e3215 * wedge.e412) + (right_anti_dual.e1234 * wedge.e125), -(right_anti_dual.e4315 * wedge.e425) - (right_anti_dual.e4125 * wedge.e435)) - (right_anti_dual.group0.xyzx * wedge.group1.wwwx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_anti_dual.e3215) * wedge.group1.xyz) + (right_anti_dual.group0.zxy * wedge.group2.yzx) - (right_anti_dual.group0.yzx * wedge.group2.zxy)), right_anti_dual.e1234 * wedge.e12345), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_anti_dual.group0
        );
    }
}
public extension AntiMotor {
    public AntiMotor anti_reject_orthogonally_from(Scalar other) {
        AntiMotor wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4(other.scalar) * this.group0, 
            /* e15, e25, e35, e3215 */
            float4(other.scalar) * this.group1
        );
        AntiScalar right_anti_dual = AntiScalar(
            /* e12345 */
            other.scalar
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4(right_anti_dual.e12345) * wedge.group0, 
            /* e15, e25, e35, e3215 */
            float4(right_anti_dual.e12345) * wedge.group1
        );
    }
}
public extension AntiMotor {
    public Scalar anti_reject_orthogonally_from(Sphere other) {
        Sphere wedge = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(this.scalar) * other.group0, 
            /* e1234 */
            this.scalar * other.e1234
        );
        RoundPoint right_anti_dual = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(other.group0.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215
        );
        return Scalar(
            /* scalar */
            (right_anti_dual.e1 * wedge.e4235) + (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) + (right_anti_dual.e4 * wedge.e3215) + (right_anti_dual.e5 * wedge.e1234)
        );
    }
}
public extension AntiMotor {
    public VersorOdd anti_reject_orthogonally_from(VersorEven other) {
        VersorEven wedge = VersorEven(
            /* e423, e431, e412, e12345 */
            (this.group0 * float4(other.group3.www, other.e12345)) + float4(float3(0.0), -(this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435) - (this.e15 * other.e423) - (this.e25 * other.e431) - (this.e35 * other.e412)) + float4((this.group0.www * other.group0.xyz), this.e3215 * other.e4), 
            /* e415, e425, e435, e321 */
            float4(this.e15 * other.e4, this.e25 * other.e4, this.e35 * other.e4, -(this.e23 * other.e1) - (this.e31 * other.e2) - (this.e12 * other.e3)) + (float4(this.scalar) * other.group1), 
            /* e235, e315, e125, e5 */
            float4(((float3(this.scalar) * other.group2.xyz) + (float3(other.e5) * this.group0.xyz) + (this.group1.zxy * other.group3.yzx) - (this.group1.yzx * other.group3.zxy)), this.scalar * other.e5), 
            /* e1, e2, e3, e4 */
            float4(this.scalar) * other.group3
        );
        VersorOdd right_anti_dual = VersorOdd(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            (wedge.group0.zxyw * float4(right_anti_dual.group3.yzx, right_anti_dual.scalar)) + float4(float3(0.0), (wedge.e2 * right_anti_dual.e4315) + (wedge.e3 * right_anti_dual.e4125) + (wedge.e4 * right_anti_dual.e3215) - (wedge.e431 * right_anti_dual.e25) - (wedge.e412 * right_anti_dual.e35) - (wedge.e415 * right_anti_dual.e23) - (wedge.e425 * right_anti_dual.e31) - (wedge.e435 * right_anti_dual.e12) - (wedge.e321 * right_anti_dual.e45) - (wedge.e235 * right_anti_dual.e41) - (wedge.e315 * right_anti_dual.e42) - (wedge.e125 * right_anti_dual.e43)) + float4((wedge.group0.www * right_anti_dual.group0.xyz), wedge.e5 * right_anti_dual.e1234) + float4((right_anti_dual.group2.www * wedge.group1.xyz), wedge.e1 * right_anti_dual.e4235) - (wedge.group0.yzxx * float4(right_anti_dual.group3.zxy, right_anti_dual.e15)), 
            /* e23, e31, e12, e45 */
            float4((wedge.e12345 * right_anti_dual.e23) + (wedge.e235 * right_anti_dual.e1234), (wedge.e12345 * right_anti_dual.e31) + (wedge.e315 * right_anti_dual.e1234), (wedge.e12345 * right_anti_dual.e12) + (wedge.e125 * right_anti_dual.e1234), -(wedge.e425 * right_anti_dual.e4315) - (wedge.e435 * right_anti_dual.e4125)) + (wedge.group0 * float4(right_anti_dual.group3.www, right_anti_dual.e45)) - (wedge.group1.wwwx * right_anti_dual.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(wedge.e12345) * right_anti_dual.group2.xyz) + (float3(right_anti_dual.e3215) * wedge.group1.xyz) + (wedge.group2.yzx * right_anti_dual.group3.zxy) - (wedge.group2.zxy * right_anti_dual.group3.yzx)), wedge.e12345 * right_anti_dual.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_anti_dual.group3
        );
    }
}
public extension AntiMotor {
    public VersorOdd anti_reject_orthogonally_from(VersorOdd other) {
        VersorOdd wedge = VersorOdd(
            /* e41, e42, e43, scalar */
            float4(this.scalar) * other.group0, 
            /* e23, e31, e12, e45 */
            float4(((float3(this.scalar) * other.group1.xyz) + (float3(other.scalar) * this.group0.xyz)), this.scalar * other.e45), 
            /* e15, e25, e35, e1234 */
            float4(this.e15 * other.scalar, this.e25 * other.scalar, this.e35 * other.scalar, -(this.e23 * other.e41) - (this.e31 * other.e42) - (this.e12 * other.e43)) + (float4(this.scalar) * other.group2), 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e35 * other.e42, this.e15 * other.e43, this.e25 * other.e41, -(this.e31 * other.e25) - (this.e12 * other.e35) - (this.e15 * other.e23) - (this.e25 * other.e31) - (this.e35 * other.e12)) + (this.group0 * float4(other.group1.www, other.e3215)) + float4((this.group0.www * other.group3.xyz), this.e3215 * other.scalar) - float4((this.group1.yzx * other.group0.zxy), this.e23 * other.e15)
        );
        VersorEven right_anti_dual = VersorEven(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            (right_anti_dual.group0.zxyw * float4(wedge.group3.yzx, wedge.scalar)) + float4(float3(0.0), (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) + (right_anti_dual.e4 * wedge.e3215) - (right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e321 * wedge.e45) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43)) + float4((right_anti_dual.group0.www * wedge.group0.xyz), right_anti_dual.e5 * wedge.e1234) + float4((wedge.group2.www * right_anti_dual.group1.xyz), right_anti_dual.e1 * wedge.e4235) - (right_anti_dual.group0.yzxx * float4(wedge.group3.zxy, wedge.e15)), 
            /* e23, e31, e12, e45 */
            float4((right_anti_dual.e12345 * wedge.e23) + (right_anti_dual.e235 * wedge.e1234), (right_anti_dual.e12345 * wedge.e31) + (right_anti_dual.e315 * wedge.e1234), (right_anti_dual.e12345 * wedge.e12) + (right_anti_dual.e125 * wedge.e1234), -(right_anti_dual.e425 * wedge.e4315) - (right_anti_dual.e435 * wedge.e4125)) + (right_anti_dual.group0 * float4(wedge.group3.www, wedge.e45)) - (right_anti_dual.group1.wwwx * wedge.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_anti_dual.e12345) * wedge.group2.xyz) + (float3(wedge.e3215) * right_anti_dual.group1.xyz) + (right_anti_dual.group2.yzx * wedge.group3.zxy) - (right_anti_dual.group2.zxy * wedge.group3.yzx)), right_anti_dual.e12345 * wedge.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_anti_dual.e12345) * wedge.group3
        );
    }
}
public extension AntiPlane {
    // Fancy infix trick (first half)
    public AntiRejectOrthogonallyFromInfixPartial<AntiPlane> operator /(AntiRejectOrthogonallyFromInfix rhs) {
        return AntiRejectOrthogonallyFromInfixPartial<AntiPlane>(this);
    }
}
public extension AntiRejectOrthogonallyFromInfixPartial<AntiPlane> {
    // Fancy infix trick (second half)
    public AntiDipoleInversion operator /(AntiCircleRotor rhs) {
        return this.a.anti_reject_orthogonally_from(rhs);
    }
}
public extension AntiPlane {
    public AntiDipoleInversion anti_reject_orthogonally_from(AntiCircleRotor other) {
        AntiDipoleInversion wedge = AntiDipoleInversion(
            /* e423, e431, e412 */
            (other.group0.xyz.yzx * this.group0.zxy) - (other.group0.xyz.zxy * this.group0.yzx), 
            /* e415, e425, e435, e321 */
            float4(other.e41 * this.e5, other.e42 * this.e5, other.e43 * this.e5, -(other.e31 * this.e2) - (other.e12 * this.e3)) - (other.group1.wwwx * this.group0.xyzx), 
            /* e235, e315, e125, e4 */
            float4((float3(this.e5) * other.group1.xyz), 0.0) + float4((other.group2.zxy * this.group0.yzx), 0.0) - float4((other.group2.yzx * this.group0.zxy), 0.0), 
            /* e1, e2, e3, e5 */
            float4(other.scalar) * this.group0
        );
        CircleRotor right_anti_dual = CircleRotor(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(right_anti_dual.e12345) * wedge.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(right_anti_dual.e12345) * wedge.group1, 
            /* e235, e315, e125, e4 */
            float4((float3(right_anti_dual.e12345) * wedge.group2.xyz), (wedge.e4 * right_anti_dual.e12345) - (wedge.e423 * right_anti_dual.e415) - (wedge.e431 * right_anti_dual.e425) - (wedge.e412 * right_anti_dual.e435) - (wedge.e415 * right_anti_dual.e423) - (wedge.e425 * right_anti_dual.e431) - (wedge.e435 * right_anti_dual.e412)), 
            /* e1, e2, e3, e5 */
            float4((wedge.e415 * right_anti_dual.e321) + (wedge.e321 * right_anti_dual.e415) + (wedge.e315 * right_anti_dual.e412) + (wedge.e1 * right_anti_dual.e12345), (wedge.e425 * right_anti_dual.e321) + (wedge.e321 * right_anti_dual.e425) + (wedge.e125 * right_anti_dual.e423) + (wedge.e2 * right_anti_dual.e12345), (wedge.e435 * right_anti_dual.e321) + (wedge.e321 * right_anti_dual.e435) + (wedge.e235 * right_anti_dual.e431) + (wedge.e3 * right_anti_dual.e12345), -(wedge.e435 * right_anti_dual.e125) - (wedge.e235 * right_anti_dual.e415) - (wedge.e315 * right_anti_dual.e425) - (wedge.e125 * right_anti_dual.e435)) + (right_anti_dual.group2.yzxw * float4(wedge.group0.xyz.zxy, wedge.e5)) - (right_anti_dual.group2.zxyx * float4(wedge.group0.xyz.yzx, wedge.e415)) - float4((right_anti_dual.group0.xyz.yzx * wedge.group2.zxy), wedge.e425 * right_anti_dual.e315)
        );
    }
}
public extension AntiPlane {
    public AntiDipoleInversion anti_reject_orthogonally_from(AntiDipoleInversion other) {
        DipoleInversion wedge = DipoleInversion(
            /* e41, e42, e43 */
            float3(other.e4) * this.group0.xyz * float3(-1.0), 
            /* e23, e31, e12, e45 */
            float4(((other.group3.zxy * this.group0.yzx) - (other.group3.yzx * this.group0.zxy)), other.e4 * this.e5 * -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.e1 * this.e5 * -1.0, other.e2 * this.e5 * -1.0, other.e3 * this.e5 * -1.0, (other.e431 * this.e2) + (other.e412 * this.e3)) + (this.group0.xyzx * float4(other.group3.www, other.e423)), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.e425 * this.e3, other.e435 * this.e1, other.e415 * this.e2, -(other.e315 * this.e2) - (other.e125 * this.e3)) - (float4(this.e5) * float4(other.group0.xyz, other.e321)) - (this.group0.yzxx * float4(other.group1.zxy, other.e235))
        );
        DipoleInversion right_anti_dual = DipoleInversion(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            (float3(wedge.e1234) * right_anti_dual.group3.xyz) - (float3(right_anti_dual.e1234) * wedge.group3.xyz), 
            /* e415, e425, e435, e321 */
            (right_anti_dual.group3.yzxw * float4(wedge.group3.zxy, wedge.e1234)) - (wedge.group3.yzxw * float4(right_anti_dual.group3.zxy, right_anti_dual.e1234)), 
            /* e235, e315, e125, e4 */
            (wedge.group3.xyzx * float4(right_anti_dual.group3.www, right_anti_dual.e41)) + float4(float3(0.0), (right_anti_dual.e42 * wedge.e4315) + (right_anti_dual.e43 * wedge.e4125) + (right_anti_dual.e45 * wedge.e1234) - (right_anti_dual.e1234 * wedge.e45) - (right_anti_dual.e4315 * wedge.e42) - (right_anti_dual.e4125 * wedge.e43)) - float4((wedge.group3.www * right_anti_dual.group3.xyz), right_anti_dual.e4235 * wedge.e41), 
            /* e1, e2, e3, e5 */
            (right_anti_dual.group3.zxyw * wedge.group1.yzxw) + (wedge.group2.wwwz * float4(right_anti_dual.group2.xyz, right_anti_dual.e4125)) + float4((wedge.group0.xyz * right_anti_dual.group3.www), right_anti_dual.e4235 * wedge.e15) + float4((right_anti_dual.group1.zxy * wedge.group3.yzx), right_anti_dual.e4315 * wedge.e25) - (float4(wedge.e3215) * float4(right_anti_dual.group0.xyz, right_anti_dual.e45)) - (right_anti_dual.group2.wwwy * float4(wedge.group2.xyz, wedge.e4315)) - (wedge.group3.zxyx * float4(right_anti_dual.group1.yzx, right_anti_dual.e15)) - float4((right_anti_dual.group3.yzx * wedge.group1.zxy), right_anti_dual.e35 * wedge.e4125)
        );
    }
}
public extension AntiPlane {
    public AntiPlane anti_reject_orthogonally_from(AntiDualNum other) {
        return AntiPlane(
            /* e1, e2, e3, e5 */
            float4(other.scalar) * float4(other.scalar * this.e1, other.scalar * this.e2, other.scalar * this.e3, other.scalar * this.e5)
        );
    }
}
public extension AntiPlane {
    public DualNum anti_reject_orthogonally_from(AntiFlatPoint other) {
        return DualNum(
            /* e5, e12345 */
            float2(-(float4(other.group0.xyz, other.e321 * -1.0)[3] * other.e235 * this.e1) - (float4(other.group0.xyz, other.e321 * -1.0)[3] * other.e315 * this.e2) - (float4(other.group0.xyz, other.e321 * -1.0)[3] * other.e125 * this.e3) - (float4(other.group0.xyz, other.e321 * -1.0)[3] * other.e321 * this.e5), 1.0) * float2(-1.0, 0.0)
        );
    }
}
public extension AntiPlane {
    public AntiFlector anti_reject_orthogonally_from(AntiFlector other) {
        AntiMotor wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4(((other.group1.zxy * this.group0.yzx) - (other.group1.yzx * this.group0.zxy)), 0.0), 
            /* e15, e25, e35, e3215 */
            float4(other.e5 * this.e1, other.e5 * this.e2, other.e5 * this.e3, -(other.e315 * this.e2) - (other.e125 * this.e3) - (other.e321 * this.e5)) - (this.group0.wwwx * float4(other.group1.xyz, other.e235))
        );
        Flector right_anti_dual = Flector(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiFlector(
            /* e235, e315, e125, e321 */
            float4(float3(1.0), 0.0) * float4(wedge.group1.www, 0.0) * float4(right_anti_dual.group1.xyz, 0.0) * float4(-1.0, -1.0, -1.0, 0.0), 
            /* e1, e2, e3, e5 */
            (right_anti_dual.group1.zxyx * float4(wedge.group0.yzx, wedge.e15)) + float4(float3(0.0), (wedge.e25 * right_anti_dual.e4315) + (wedge.e35 * right_anti_dual.e4125)) - float4((wedge.group0.zxy * right_anti_dual.group1.yzx), wedge.e3215 * right_anti_dual.e45)
        );
    }
}
public extension AntiPlane {
    public AntiPlane anti_reject_orthogonally_from(AntiLine other) {
        AntiFlatPoint wedge = AntiFlatPoint(
            /* e235, e315, e125, e321 */
            float4((other.e23 * this.e5) + (other.e35 * this.e2), (other.e31 * this.e5) + (other.e15 * this.e3), (other.e12 * this.e5) + (other.e25 * this.e1), -(other.e31 * this.e2) - (other.e12 * this.e3)) - (this.group0.zxyx * float4(other.group1.xyz.yzx, other.e23))
        );
        Line right_anti_dual = Line(
            /* e415, e425, e435 */
            other.group0.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group1.xyz * float3(-1.0)
        );
        return AntiPlane(
            /* e1, e2, e3, e5 */
            float4((float3(wedge.e321) * right_anti_dual.group0.xyz), -(wedge.e235 * right_anti_dual.e415) - (wedge.e315 * right_anti_dual.e425) - (wedge.e125 * right_anti_dual.e435))
        );
    }
}
public extension AntiPlane {
    public AntiFlector anti_reject_orthogonally_from(AntiMotor other) {
        AntiFlector wedge = AntiFlector(
            /* e235, e315, e125, e321 */
            float4((other.e23 * this.e5) + (other.e35 * this.e2), (other.e31 * this.e5) + (other.e15 * this.e3), (other.e12 * this.e5) + (other.e25 * this.e1), -(other.e31 * this.e2) - (other.e12 * this.e3)) - (this.group0.zxyx * float4(other.group1.yzx, other.e23)), 
            /* e1, e2, e3, e5 */
            float4(other.scalar) * this.group0
        );
        Motor right_anti_dual = Motor(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiFlector(
            /* e235, e315, e125, e321 */
            float4(right_anti_dual.e12345) * wedge.group0, 
            /* e1, e2, e3, e5 */
            float4(wedge.e1 * right_anti_dual.e12345, wedge.e2 * right_anti_dual.e12345, wedge.e3 * right_anti_dual.e12345, -(wedge.e235 * right_anti_dual.e415) - (wedge.e315 * right_anti_dual.e425) - (wedge.e125 * right_anti_dual.e435)) + (right_anti_dual.group0 * float4(wedge.group0.www, wedge.e5))
        );
    }
}
public extension AntiPlane {
    public AntiPlane anti_reject_orthogonally_from(AntiPlane other) {
        AntiLine wedge = AntiLine(
            /* e23, e31, e12 */
            (other.group0.zxy * this.group0.yzx) - (other.group0.yzx * this.group0.zxy), 
            /* e15, e25, e35 */
            (float3(other.e5) * this.group0.xyz) - (float3(this.e5) * other.group0.xyz)
        );
        Plane right_anti_dual = Plane(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiPlane(
            /* e1, e2, e3, e5 */
            float4(wedge.e12 * right_anti_dual.e4315 * -1.0, wedge.e23 * right_anti_dual.e4125 * -1.0, wedge.e31 * right_anti_dual.e4235 * -1.0, (wedge.e25 * right_anti_dual.e4315) + (wedge.e35 * right_anti_dual.e4125)) + (right_anti_dual.group0.zxyx * float4(wedge.group0.xyz.yzx, wedge.e15))
        );
    }
}
public extension AntiPlane {
    public RoundPoint anti_reject_orthogonally_from(Circle other) {
        Sphere wedge = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(this.e3 * other.e425, this.e1 * other.e435, this.e2 * other.e415, -(this.e3 * other.e125) - (this.e5 * other.e321)) - (this.group0.wwwx * float4(other.group0.xyz, other.e235)) - float4((this.group0.yzx * other.group1.zxy), this.e2 * other.e315), 
            /* e1234 */
            (this.e1 * other.e423) + (this.e2 * other.e431) + (this.e3 * other.e412)
        );
        Dipole right_anti_dual = Dipole(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35 */
            other.group2.xyz
        );
        return RoundPoint(
            /* e1, e2, e3, e4 */
            float4(-(right_anti_dual.e41 * wedge.e3215) - (right_anti_dual.e31 * wedge.e4125), -(right_anti_dual.e42 * wedge.e3215) - (right_anti_dual.e12 * wedge.e4235), -(right_anti_dual.e43 * wedge.e3215) - (right_anti_dual.e23 * wedge.e4315), (right_anti_dual.e43 * wedge.e4125) + (right_anti_dual.e45 * wedge.e1234)) + (wedge.group0.yzxy * float4(right_anti_dual.group1.zxy, right_anti_dual.e42)) + float4((float3(wedge.e1234) * right_anti_dual.group2.xyz), right_anti_dual.e41 * wedge.e4235), 
            /* e5 */
            -(right_anti_dual.e45 * wedge.e3215) - (right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125)
        );
    }
}
public extension AntiPlane {
    public RoundPoint anti_reject_orthogonally_from(CircleRotor other) {
        Sphere wedge = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(this.e3 * other.e425, this.e1 * other.e435, this.e2 * other.e415, -(this.e3 * other.e125) - (this.e5 * other.e321)) - (this.group0.yzxy * float4(other.group1.zxy, other.e315)) - float4((other.group0.xyz * this.group0.www), this.e1 * other.e235), 
            /* e1234 */
            (this.e1 * other.e423) + (this.e2 * other.e431) + (this.e3 * other.e412)
        );
        AntiCircleRotor right_anti_dual = AntiCircleRotor(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return RoundPoint(
            /* e1, e2, e3, e4 */
            float4(-(right_anti_dual.e41 * wedge.e3215) - (right_anti_dual.e31 * wedge.e4125), -(right_anti_dual.e42 * wedge.e3215) - (right_anti_dual.e12 * wedge.e4235), -(right_anti_dual.e43 * wedge.e3215) - (right_anti_dual.e23 * wedge.e4315), (right_anti_dual.e43 * wedge.e4125) + (right_anti_dual.e45 * wedge.e1234)) + (wedge.group0.yzxx * float4(right_anti_dual.group1.zxy, right_anti_dual.e41)) + float4((float3(wedge.e1234) * right_anti_dual.group2.xyz), right_anti_dual.e42 * wedge.e4315), 
            /* e5 */
            -(right_anti_dual.e45 * wedge.e3215) - (right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125)
        );
    }
}
public extension AntiPlane {
    public RoundPoint anti_reject_orthogonally_from(Dipole other) {
        Circle wedge = Circle(
            /* e423, e431, e412 */
            (other.group0.xyz.yzx * this.group0.zxy) - (other.group0.xyz.zxy * this.group0.yzx), 
            /* e415, e425, e435, e321 */
            float4(this.e5 * other.e41, this.e5 * other.e42, this.e5 * other.e43, -(this.e2 * other.e31) - (this.e3 * other.e12)) - (this.group0.xyzx * other.group1.wwwx), 
            /* e235, e315, e125 */
            (float3(this.e5) * other.group1.xyz) + (other.group2.xyz.zxy * this.group0.yzx) - (other.group2.xyz.yzx * this.group0.zxy)
        );
        Circle right_anti_dual = Circle(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125 */
            other.group2.xyz * float3(-1.0)
        );
        return RoundPoint(
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e412 * wedge.e315) + (right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e315 * wedge.e412), (right_anti_dual.e423 * wedge.e125) + (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e125 * wedge.e423), (right_anti_dual.e431 * wedge.e235) + (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e235 * wedge.e431), -(right_anti_dual.e412 * wedge.e435) - (right_anti_dual.e415 * wedge.e423) - (right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412)) - float4((right_anti_dual.group0.xyz.yzx * wedge.group2.xyz.zxy), right_anti_dual.e423 * wedge.e415) - float4((right_anti_dual.group2.xyz.zxy * wedge.group0.xyz.yzx), right_anti_dual.e431 * wedge.e425), 
            /* e5 */
            -(right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435)
        );
    }
}
public extension AntiPlane {
    public AntiDipoleInversion anti_reject_orthogonally_from(DipoleInversion other) {
        CircleRotor wedge = CircleRotor(
            /* e423, e431, e412 */
            (other.group0.xyz.yzx * this.group0.zxy) - (other.group0.xyz.zxy * this.group0.yzx), 
            /* e415, e425, e435, e321 */
            float4(this.e5 * other.e41, this.e5 * other.e42, this.e5 * other.e43, -(this.e2 * other.e31) - (this.e3 * other.e12)) - (this.group0.xyzx * other.group1.wwwx), 
            /* e235, e315, e125, e12345 */
            float4(this.e3 * other.e25 * -1.0, this.e1 * other.e35 * -1.0, this.e2 * other.e15 * -1.0, (this.e3 * other.e4125) + (this.e5 * other.e1234)) + (this.group0.yzxx * float4(other.group2.zxy, other.e4235)) + (this.group0.wwwy * float4(other.group1.xyz, other.e4315))
        );
        AntiDipoleInversion right_anti_dual = AntiDipoleInversion(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(wedge.e12345) * right_anti_dual.group1, 
            /* e235, e315, e125, e4 */
            float4((float3(wedge.e12345) * right_anti_dual.group2.xyz), (right_anti_dual.e4 * wedge.e12345) - (right_anti_dual.e423 * wedge.e415) - (right_anti_dual.e431 * wedge.e425) - (right_anti_dual.e412 * wedge.e435) - (right_anti_dual.e415 * wedge.e423) - (right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412)), 
            /* e1, e2, e3, e5 */
            float4((right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e315 * wedge.e412) + (right_anti_dual.e1 * wedge.e12345), (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e125 * wedge.e423) + (right_anti_dual.e2 * wedge.e12345), (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e235 * wedge.e431) + (right_anti_dual.e3 * wedge.e12345), -(right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435)) + (wedge.group2.yzxw * float4(right_anti_dual.group0.xyz.zxy, right_anti_dual.e5)) - (wedge.group2.zxyx * float4(right_anti_dual.group0.xyz.yzx, right_anti_dual.e415)) - float4((wedge.group0.xyz.yzx * right_anti_dual.group2.zxy), right_anti_dual.e425 * wedge.e315)
        );
    }
}
public extension AntiPlane {
    public AntiPlane anti_reject_orthogonally_from(FlatPoint other) {
        Line wedge = Line(
            /* e415, e425, e435 */
            float3(other.e45) * this.group0.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            (this.group0.yzx * other.group0.zxy) - (this.group0.zxy * other.group0.yzx)
        );
        AntiFlatPoint right_anti_dual = AntiFlatPoint(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiPlane(
            /* e1, e2, e3, e5 */
            float4((float3(right_anti_dual.e321) * wedge.group0.xyz), -(right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435))
        );
    }
}
public extension AntiPlane {
    public AntiFlector anti_reject_orthogonally_from(Flector other) {
        Motor wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4((float3(other.e45) * this.group0.xyz * float3(-1.0)), (this.e1 * other.e4235) + (this.e2 * other.e4315) + (this.e3 * other.e4125)), 
            /* e235, e315, e125, e5 */
            float4(((this.group0.yzx * other.group0.zxy) - (this.group0.zxy * other.group0.yzx)), 0.0)
        );
        AntiFlector right_anti_dual = AntiFlector(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiFlector(
            /* e235, e315, e125, e321 */
            float4(wedge.e12345) * right_anti_dual.group0, 
            /* e1, e2, e3, e5 */
            float4(right_anti_dual.e1 * wedge.e12345, right_anti_dual.e2 * wedge.e12345, right_anti_dual.e3 * wedge.e12345, -(right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435)) + (wedge.group0 * float4(right_anti_dual.group0.www, right_anti_dual.e5))
        );
    }
}
public extension AntiPlane {
    public AntiPlane anti_reject_orthogonally_from(Line other) {
        Plane wedge = Plane(
            /* e4235, e4315, e4125, e3215 */
            float4(this.e3 * other.e425, this.e1 * other.e435, this.e2 * other.e415, -(this.e2 * other.e315) - (this.e3 * other.e125)) - (this.group0.yzxx * float4(other.group0.xyz.zxy, other.e235))
        );
        AntiLine right_anti_dual = AntiLine(
            /* e23, e31, e12 */
            other.group0.xyz, 
            /* e15, e25, e35 */
            other.group1.xyz
        );
        return AntiPlane(
            /* e1, e2, e3, e5 */
            float4(right_anti_dual.e12 * wedge.e4315, right_anti_dual.e23 * wedge.e4125, right_anti_dual.e31 * wedge.e4235, -(right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125)) - (wedge.group0.zxyx * float4(right_anti_dual.group0.xyz.yzx, right_anti_dual.e15))
        );
    }
}
public extension AntiPlane {
    public AntiFlector anti_reject_orthogonally_from(Motor other) {
        Flector wedge = Flector(
            /* e15, e25, e35, e45 */
            float4(float3(1.0), 0.0) * float4(other.group1.www, 0.0) * float4(this.group0.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e3 * other.e425, this.e1 * other.e435, this.e2 * other.e415, -(this.e2 * other.e315) - (this.e3 * other.e125)) - (this.group0.yzxx * float4(other.group0.zxy, other.e235))
        );
        AntiMotor right_anti_dual = AntiMotor(
            /* e23, e31, e12, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiFlector(
            /* e235, e315, e125, e321 */
            float4(float3(1.0), 0.0) * float4(right_anti_dual.group1.www, 0.0) * float4(wedge.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e1, e2, e3, e5 */
            float4(float3(0.0), -(right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125)) + float4((right_anti_dual.group0.zxy * wedge.group1.yzx), right_anti_dual.e3215 * wedge.e45) - (wedge.group1.zxyx * float4(right_anti_dual.group0.yzx, right_anti_dual.e15))
        );
    }
}
public extension AntiPlane {
    public MultiVector anti_reject_orthogonally_from(MultiVector other) {
        MultiVector wedge = MultiVector(
            /* scalar, e12345 */
            float2(0.0, (this.e1 * other.e4235) + (this.e2 * other.e4315) + (this.e3 * other.e4125) + (this.e5 * other.e1234)), 
            /* e1, e2, e3, e4 */
            float4(other.group0.xy.xx, other.scalar, 0.0) * float4(float3(1.0), 0.0) * float4(this.group0.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e5 */
            this.e5 * other.scalar, 
            /* e15, e25, e35, e45 */
            float4(((float3(other.e5) * this.group0.xyz) - (float3(this.e5) * other.group1.xyz)), this.e5 * other.e4 * -1.0), 
            /* e41, e42, e43 */
            float3(other.e4) * this.group0.xyz * float3(-1.0), 
            /* e23, e31, e12 */
            (this.group0.yzx * other.group1.zxy) - (this.group0.zxy * other.group1.yzx), 
            /* e415, e425, e435, e321 */
            float4(this.e5 * other.e41, this.e5 * other.e42, this.e5 * other.e43, -(this.e2 * other.e31) - (this.e3 * other.e12)) - float4((other.group3.www * this.group0.xyz), this.e1 * other.e23), 
            /* e423, e431, e412 */
            (other.group4.xyz.yzx * this.group0.zxy) - (other.group4.xyz.zxy * this.group0.yzx), 
            /* e235, e315, e125 */
            (float3(this.e5) * other.group5.xyz) + (this.group0.yzx * other.group3.zxy) - (this.group0.zxy * other.group3.yzx), 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e3 * other.e425, this.e1 * other.e435, this.e2 * other.e415, -(this.e3 * other.e125) - (this.e5 * other.e321)) - (this.group0.wwwx * float4(other.group7.xyz, other.e235)) - float4((this.group0.yzx * other.group6.zxy), this.e2 * other.e315), 
            /* e1234 */
            (this.e1 * other.e423) + (this.e2 * other.e431) + (this.e3 * other.e412)
        );
        MultiVector right_anti_dual = MultiVector(
            /* scalar, e12345 */
            other.group0.xy.yx * float2(-1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215, 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43 */
            other.group7.xyz, 
            /* e23, e31, e12 */
            other.group6.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412 */
            other.group4.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group3.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2((right_anti_dual.scalar * wedge.e12345) + (right_anti_dual.e12345 * wedge.scalar) + (right_anti_dual.e1 * wedge.e4235) + (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) + (right_anti_dual.e4 * wedge.e3215) + (right_anti_dual.e5 * wedge.e1234) + (right_anti_dual.e4235 * wedge.e1) + (right_anti_dual.e4315 * wedge.e2) + (right_anti_dual.e4125 * wedge.e3) + (right_anti_dual.e3215 * wedge.e4) + (right_anti_dual.e1234 * wedge.e5) - (right_anti_dual.e15 * wedge.e423) - (right_anti_dual.e25 * wedge.e431) - (right_anti_dual.e35 * wedge.e412) - (right_anti_dual.e45 * wedge.e321) - (right_anti_dual.e41 * wedge.e235) - (right_anti_dual.e42 * wedge.e315) - (right_anti_dual.e43 * wedge.e125) - (right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e321 * wedge.e45) - (right_anti_dual.e423 * wedge.e15) - (right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43), right_anti_dual.e12345 * wedge.e12345), 
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e15 * wedge.e1234) + (right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e4125 * wedge.e31), (right_anti_dual.e25 * wedge.e1234) + (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e4235 * wedge.e12), (right_anti_dual.e35 * wedge.e1234) + (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e4315 * wedge.e23), -(right_anti_dual.e415 * wedge.e423) - (right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412) - (right_anti_dual.e1234 * wedge.e45)) + (float4(right_anti_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_anti_dual.group1) + (wedge.group9.yzxx * float4(right_anti_dual.group5.xyz.zxy, right_anti_dual.e41)) + float4((wedge.group4.xyz * right_anti_dual.group9.www), right_anti_dual.e45 * wedge.e1234) + float4((right_anti_dual.group7.xyz.zxy * wedge.group8.xyz.yzx), right_anti_dual.e42 * wedge.e4315) + float4((right_anti_dual.group8.xyz.yzx * wedge.group7.xyz.zxy), right_anti_dual.e43 * wedge.e4125) - (right_anti_dual.group9.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((float3(right_anti_dual.e1234) * wedge.group3.xyz), right_anti_dual.e4125 * wedge.e43) - float4((right_anti_dual.group4.xyz * wedge.group9.www), right_anti_dual.e423 * wedge.e415) - float4((right_anti_dual.group5.xyz.yzx * wedge.group9.zxy), right_anti_dual.e431 * wedge.e425) - float4((right_anti_dual.group7.xyz.yzx * wedge.group8.xyz.zxy), right_anti_dual.e412 * wedge.e435) - float4((right_anti_dual.group8.xyz.zxy * wedge.group7.xyz.yzx), right_anti_dual.e4235 * wedge.e41), 
            /* e5 */
            (right_anti_dual.e12345 * wedge.e5) + (right_anti_dual.e5 * wedge.e12345) + (right_anti_dual.e4235 * wedge.e15) + (right_anti_dual.e4315 * wedge.e25) + (right_anti_dual.e4125 * wedge.e35) + (right_anti_dual.e3215 * wedge.e45) - (right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125) - (right_anti_dual.e45 * wedge.e3215) - (right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435), 
            /* e15, e25, e35, e45 */
            float4((right_anti_dual.e415 * wedge.e3215) + (right_anti_dual.e315 * wedge.e4125) + (right_anti_dual.e4125 * wedge.e315) + (right_anti_dual.e3215 * wedge.e415), (right_anti_dual.e425 * wedge.e3215) + (right_anti_dual.e125 * wedge.e4235) + (right_anti_dual.e4235 * wedge.e125) + (right_anti_dual.e3215 * wedge.e425), (right_anti_dual.e435 * wedge.e3215) + (right_anti_dual.e235 * wedge.e4315) + (right_anti_dual.e4315 * wedge.e235) + (right_anti_dual.e3215 * wedge.e435), -(right_anti_dual.e435 * wedge.e4125) - (right_anti_dual.e4235 * wedge.e415) - (right_anti_dual.e4315 * wedge.e425) - (right_anti_dual.e4125 * wedge.e435)) + (float4(right_anti_dual.e12345) * wedge.group3) + (float4(wedge.e12345) * right_anti_dual.group3) - (wedge.group9.yzxx * float4(right_anti_dual.group8.xyz.zxy, right_anti_dual.e415)) - float4((wedge.group8.xyz.zxy * right_anti_dual.group9.yzx), right_anti_dual.e425 * wedge.e4315), 
            /* e41, e42, e43 */
            (float3(right_anti_dual.e12345) * wedge.group4.xyz) + (float3(right_anti_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_anti_dual.group4.xyz) + (float3(wedge.e1234) * right_anti_dual.group6.xyz) + (right_anti_dual.group7.xyz.zxy * wedge.group9.yzx) + (wedge.group7.xyz.zxy * right_anti_dual.group9.yzx) - (right_anti_dual.group7.xyz.yzx * wedge.group9.zxy) - (wedge.group7.xyz.yzx * right_anti_dual.group9.zxy), 
            /* e23, e31, e12 */
            (float3(right_anti_dual.e12345) * wedge.group5.xyz) + (float3(right_anti_dual.e3215) * wedge.group7.xyz) + (float3(right_anti_dual.e1234) * wedge.group8.xyz) + (float3(wedge.e12345) * right_anti_dual.group5.xyz) + (float3(wedge.e3215) * right_anti_dual.group7.xyz) + (float3(wedge.e1234) * right_anti_dual.group8.xyz) - (float3(right_anti_dual.e321) * wedge.group9.xyz) - (float3(wedge.e321) * right_anti_dual.group9.xyz), 
            /* e415, e425, e435, e321 */
            (float4(right_anti_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_anti_dual.group6) + (right_anti_dual.group9.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - float4((right_anti_dual.group9.zxy * wedge.group9.yzx), right_anti_dual.e1234 * wedge.e3215), 
            /* e423, e431, e412 */
            (float3(right_anti_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_anti_dual.group7.xyz) + (float3(wedge.e1234) * right_anti_dual.group9.xyz) - (float3(right_anti_dual.e1234) * wedge.group9.xyz), 
            /* e235, e315, e125 */
            (float3(right_anti_dual.e12345) * wedge.group8.xyz) + (float3(right_anti_dual.e3215) * wedge.group9.xyz) + (float3(wedge.e12345) * right_anti_dual.group8.xyz) - (float3(wedge.e3215) * right_anti_dual.group9.xyz), 
            /* e4235, e4315, e4125, e3215 */
            (float4(right_anti_dual.e12345) * wedge.group9) + (float4(wedge.e12345) * right_anti_dual.group9), 
            /* e1234 */
            (right_anti_dual.e12345 * wedge.e1234) + (right_anti_dual.e1234 * wedge.e12345)
        );
    }
}
public extension AntiPlane {
    public AntiPlane anti_reject_orthogonally_from(Plane other) {
        return AntiPlane(
            /* e1, e2, e3, e5 */
            float4((this.e1 * other.e4235) + (this.e2 * other.e4315) + (this.e3 * other.e4125)) * float4(other.e4235 * -1.0, other.e4315 * -1.0, other.e4125 * -1.0, other.e3215)
        );
    }
}
public extension AntiPlane {
    public RoundPoint anti_reject_orthogonally_from(RoundPoint other) {
        Dipole wedge = Dipole(
            /* e41, e42, e43 */
            float3(other.e4) * this.group0.xyz * float3(-1.0), 
            /* e23, e31, e12, e45 */
            float4(((this.group0.yzx * other.group0.zxy) - (this.group0.zxy * other.group0.yzx)), this.e5 * other.e4 * -1.0), 
            /* e15, e25, e35 */
            (float3(other.e5) * this.group0.xyz) - (float3(this.e5) * other.group0.xyz)
        );
        Sphere right_anti_dual = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        return RoundPoint(
            /* e1, e2, e3, e4 */
            float4((wedge.e41 * right_anti_dual.e3215) + (wedge.e31 * right_anti_dual.e4125), (wedge.e42 * right_anti_dual.e3215) + (wedge.e12 * right_anti_dual.e4235), (wedge.e43 * right_anti_dual.e3215) + (wedge.e23 * right_anti_dual.e4315), -(wedge.e43 * right_anti_dual.e4125) - (wedge.e45 * right_anti_dual.e1234)) - (right_anti_dual.group0.yzxy * float4(wedge.group1.zxy, wedge.e42)) - float4((float3(right_anti_dual.e1234) * wedge.group2.xyz), wedge.e41 * right_anti_dual.e4235), 
            /* e5 */
            (wedge.e45 * right_anti_dual.e3215) + (wedge.e15 * right_anti_dual.e4235) + (wedge.e25 * right_anti_dual.e4315) + (wedge.e35 * right_anti_dual.e4125)
        );
    }
}
public extension AntiPlane {
    public AntiPlane anti_reject_orthogonally_from(Scalar other) {
        return AntiPlane(
            /* e1, e2, e3, e5 */
            float4(other.scalar) * float4(this.e1 * other.scalar, this.e2 * other.scalar, this.e3 * other.scalar, this.e5 * other.scalar)
        );
    }
}
public extension AntiPlane {
    public RoundPoint anti_reject_orthogonally_from(Sphere other) {
        AntiScalar wedge = AntiScalar(
            /* e12345 */
            (this.e1 * other.e4235) + (this.e2 * other.e4315) + (this.e3 * other.e4125) + (this.e5 * other.e1234)
        );
        RoundPoint right_anti_dual = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(other.group0.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215
        );
        return RoundPoint(
            /* e1, e2, e3, e4 */
            float4(wedge.e12345) * right_anti_dual.group0, 
            /* e5 */
            wedge.e12345 * right_anti_dual.e5
        );
    }
}
public extension AntiPlane {
    public AntiDipoleInversion anti_reject_orthogonally_from(VersorEven other) {
        DipoleInversion wedge = DipoleInversion(
            /* e41, e42, e43 */
            float3(other.e4) * this.group0.xyz * float3(-1.0), 
            /* e23, e31, e12, e45 */
            float4(((this.group0.yzx * other.group3.zxy) - (this.group0.zxy * other.group3.yzx)), this.e5 * other.e4 * -1.0), 
            /* e15, e25, e35, e1234 */
            float4(this.e5 * other.e1 * -1.0, this.e5 * other.e2 * -1.0, this.e5 * other.e3 * -1.0, (this.e2 * other.e431) + (this.e3 * other.e412)) + (this.group0.xyzx * float4(other.group2.www, other.e423)), 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e3 * other.e425, this.e1 * other.e435, this.e2 * other.e415, -(this.e3 * other.e125) - (this.e5 * other.e321)) - (this.group0.yzxx * float4(other.group1.zxy, other.e235)) - (this.group0.wwwy * float4(other.group0.xyz, other.e315))
        );
        VersorOdd right_anti_dual = VersorOdd(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            (float3(wedge.e1234) * right_anti_dual.group3.xyz) - (float3(right_anti_dual.e1234) * wedge.group3.xyz), 
            /* e415, e425, e435, e321 */
            (right_anti_dual.group3.yzxw * float4(wedge.group3.zxy, wedge.e1234)) - (wedge.group3.yzxw * float4(right_anti_dual.group3.zxy, right_anti_dual.e1234)), 
            /* e235, e315, e125, e4 */
            float4(float3(0.0), (wedge.e4235 * right_anti_dual.e41) + (wedge.e4315 * right_anti_dual.e42) + (wedge.e4125 * right_anti_dual.e43) - (wedge.e42 * right_anti_dual.e4315) - (wedge.e43 * right_anti_dual.e4125) - (wedge.e45 * right_anti_dual.e1234)) + float4((right_anti_dual.group3.www * wedge.group3.xyz), wedge.e1234 * right_anti_dual.e45) - (right_anti_dual.group3.xyzx * float4(wedge.group3.www, wedge.e41)), 
            /* e1, e2, e3, e5 */
            (float4(right_anti_dual.e3215) * float4(wedge.group0.xyz, wedge.e45)) + (wedge.group2.wwwy * float4(right_anti_dual.group2.xyz, right_anti_dual.e4315)) + (right_anti_dual.group3.zxyx * float4(wedge.group1.yzx, wedge.e15)) + float4((wedge.group3.yzx * right_anti_dual.group1.zxy), wedge.e35 * right_anti_dual.e4125) - (float4(wedge.e3215) * float4(right_anti_dual.group0.xyz, right_anti_dual.e45)) - (wedge.group3.zxyz * float4(right_anti_dual.group1.yzx, right_anti_dual.e35)) - (right_anti_dual.group2.wwwy * float4(wedge.group2.xyz, wedge.e4315)) - float4((wedge.group1.zxy * right_anti_dual.group3.yzx), wedge.e4235 * right_anti_dual.e15)
        );
    }
}
public extension AntiPlane {
    public VersorEven anti_reject_orthogonally_from(VersorOdd other) {
        VersorEven wedge = VersorEven(
            /* e423, e431, e412, e12345 */
            float4(this.e2 * other.e43 * -1.0, this.e3 * other.e41 * -1.0, this.e1 * other.e42 * -1.0, (this.e2 * other.e4315) + (this.e3 * other.e4125) + (this.e5 * other.e1234)) + (this.group0.zxyx * float4(other.group0.yzx, other.e4235)), 
            /* e415, e425, e435, e321 */
            float4(this.e5 * other.e41, this.e5 * other.e42, this.e5 * other.e43, -(this.e2 * other.e31) - (this.e3 * other.e12)) - (this.group0.xyzx * other.group1.wwwx), 
            /* e235, e315, e125, e5 */
            float4(((float3(this.e5) * other.group1.xyz) + (this.group0.yzx * other.group2.zxy) - (this.group0.zxy * other.group2.yzx)), this.e5 * other.scalar), 
            /* e1, e2, e3, e4 */
            float4(float3(1.0), 0.0) * float4(other.group0.www, 0.0) * float4(this.group0.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        VersorEven right_anti_dual = VersorEven(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(((float3(right_anti_dual.e12345) * wedge.group0.xyz) + (float3(wedge.e12345) * right_anti_dual.group0.xyz)), right_anti_dual.e12345 * wedge.e12345), 
            /* e415, e425, e435, e321 */
            (float4(right_anti_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_anti_dual.group1), 
            /* e235, e315, e125, e5 */
            (float4(right_anti_dual.e12345) * wedge.group2) + (float4(wedge.e12345) * right_anti_dual.group2) + float4(float3(0.0), -(right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435)), 
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e315 * wedge.e412) + (right_anti_dual.e1 * wedge.e12345), (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e125 * wedge.e423) + (right_anti_dual.e2 * wedge.e12345), (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e235 * wedge.e431) + (right_anti_dual.e3 * wedge.e12345), -(right_anti_dual.e412 * wedge.e435) - (right_anti_dual.e415 * wedge.e423) - (right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412)) + (right_anti_dual.group0.zxyw * float4(wedge.group2.yzx, wedge.e4)) + float4((right_anti_dual.group0.www * wedge.group3.xyz), right_anti_dual.e4 * wedge.e12345) - (right_anti_dual.group0.yzxx * float4(wedge.group2.zxy, wedge.e415)) - float4((right_anti_dual.group2.zxy * wedge.group0.yzx), right_anti_dual.e431 * wedge.e425)
        );
    }
}
public extension AntiScalar {
    // Fancy infix trick (first half)
    public AntiRejectOrthogonallyFromInfixPartial<AntiScalar> operator /(AntiRejectOrthogonallyFromInfix rhs) {
        return AntiRejectOrthogonallyFromInfixPartial<AntiScalar>(this);
    }
}
public extension AntiRejectOrthogonallyFromInfixPartial<AntiScalar> {
    // Fancy infix trick (second half)
    public CircleRotor operator /(AntiCircleRotor rhs) {
        return this.a.anti_reject_orthogonally_from(rhs);
    }
}
public extension AntiScalar {
    public CircleRotor anti_reject_orthogonally_from(AntiCircleRotor other) {
        AntiScalar wedge = AntiScalar(
            /* e12345 */
            other.scalar * this.e12345
        );
        CircleRotor right_anti_dual = CircleRotor(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return CircleRotor(
            /* e423, e431, e412 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(wedge.e12345) * right_anti_dual.group1, 
            /* e235, e315, e125, e12345 */
            float4(wedge.e12345) * right_anti_dual.group2
        );
    }
}
public extension AntiScalar {
    public DualNum anti_reject_orthogonally_from(AntiDualNum other) {
        return DualNum(
            /* e5, e12345 */
            float2(other.scalar * this.e12345) * other.group0.xy
        );
    }
}
public extension AntiScalar {
    public Motor anti_reject_orthogonally_from(AntiMotor other) {
        AntiScalar wedge = AntiScalar(
            /* e12345 */
            other.scalar * this.e12345
        );
        Motor right_anti_dual = Motor(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4(wedge.e12345) * right_anti_dual.group0, 
            /* e235, e315, e125, e5 */
            float4(wedge.e12345) * right_anti_dual.group1
        );
    }
}
public extension AntiScalar {
    public MultiVector anti_reject_orthogonally_from(MultiVector other) {
        AntiScalar wedge = AntiScalar(
            /* e12345 */
            this.e12345 * other.scalar
        );
        MultiVector right_anti_dual = MultiVector(
            /* scalar, e12345 */
            other.group0.xy.yx * float2(-1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215, 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43 */
            other.group7.xyz, 
            /* e23, e31, e12 */
            other.group6.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412 */
            other.group4.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group3.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(wedge.e12345) * right_anti_dual.group0.xy, 
            /* e1, e2, e3, e4 */
            float4(wedge.e12345) * right_anti_dual.group1, 
            /* e5 */
            wedge.e12345 * right_anti_dual.e5, 
            /* e15, e25, e35, e45 */
            float4(wedge.e12345) * right_anti_dual.group3, 
            /* e41, e42, e43 */
            float3(wedge.e12345) * right_anti_dual.group4.xyz, 
            /* e23, e31, e12 */
            float3(wedge.e12345) * right_anti_dual.group5.xyz, 
            /* e415, e425, e435, e321 */
            float4(wedge.e12345) * right_anti_dual.group6, 
            /* e423, e431, e412 */
            float3(wedge.e12345) * right_anti_dual.group7.xyz, 
            /* e235, e315, e125 */
            float3(wedge.e12345) * right_anti_dual.group8.xyz, 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_anti_dual.group9, 
            /* e1234 */
            wedge.e12345 * right_anti_dual.e1234
        );
    }
}
public extension AntiScalar {
    public AntiScalar anti_reject_orthogonally_from(Scalar other) {
        return AntiScalar(
            /* e12345 */
            this.e12345 * pow(other.scalar, 2)
        );
    }
}
public extension AntiScalar {
    public VersorEven anti_reject_orthogonally_from(VersorOdd other) {
        AntiScalar wedge = AntiScalar(
            /* e12345 */
            this.e12345 * other.scalar
        );
        VersorEven right_anti_dual = VersorEven(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(wedge.e12345) * right_anti_dual.group0, 
            /* e415, e425, e435, e321 */
            float4(wedge.e12345) * right_anti_dual.group1, 
            /* e235, e315, e125, e5 */
            float4(wedge.e12345) * right_anti_dual.group2, 
            /* e1, e2, e3, e4 */
            float4(wedge.e12345) * right_anti_dual.group3
        );
    }
}
public extension Circle {
    // Fancy infix trick (first half)
    public AntiRejectOrthogonallyFromInfixPartial<Circle> operator /(AntiRejectOrthogonallyFromInfix rhs) {
        return AntiRejectOrthogonallyFromInfixPartial<Circle>(this);
    }
}
public extension AntiRejectOrthogonallyFromInfixPartial<Circle> {
    // Fancy infix trick (second half)
    public VersorEven operator /(AntiCircleRotor rhs) {
        return this.a.anti_reject_orthogonally_from(rhs);
    }
}
public extension Circle {
    public VersorEven anti_reject_orthogonally_from(AntiCircleRotor other) {
        CircleRotor wedge = CircleRotor(
            /* e423, e431, e412 */
            float3(other.scalar) * this.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.scalar) * this.group1, 
            /* e235, e315, e125, e12345 */
            float4((float3(other.scalar) * this.group2.xyz), -(other.e41 * this.e235) - (other.e42 * this.e315) - (other.e43 * this.e125) - (other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435) - (other.e45 * this.e321) - (other.e15 * this.e423) - (other.e25 * this.e431) - (other.e35 * this.e412))
        );
        CircleRotor right_anti_dual = CircleRotor(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(((float3(right_anti_dual.e12345) * wedge.group0.xyz) + (float3(wedge.e12345) * right_anti_dual.group0.xyz)), right_anti_dual.e12345 * wedge.e12345), 
            /* e415, e425, e435, e321 */
            (float4(right_anti_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_anti_dual.group1), 
            /* e235, e315, e125, e5 */
            float4((right_anti_dual.e235 * wedge.e12345) + (right_anti_dual.e12345 * wedge.e235), (right_anti_dual.e315 * wedge.e12345) + (right_anti_dual.e12345 * wedge.e315), (right_anti_dual.e125 * wedge.e12345) + (right_anti_dual.e12345 * wedge.e125), -(right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435)), 
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e412 * wedge.e315) + (right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e315 * wedge.e412), (right_anti_dual.e423 * wedge.e125) + (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e125 * wedge.e423), (right_anti_dual.e431 * wedge.e235) + (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e235 * wedge.e431), -(right_anti_dual.e412 * wedge.e435) - (right_anti_dual.e415 * wedge.e423) - (right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412)) - float4((right_anti_dual.group0.xyz.yzx * wedge.group2.zxy), right_anti_dual.e423 * wedge.e415) - float4((wedge.group0.xyz.yzx * right_anti_dual.group2.zxy), right_anti_dual.e431 * wedge.e425)
        );
    }
}
public extension Circle {
    public AntiDipoleInversion anti_reject_orthogonally_from(AntiDipoleInversion other) {
        Sphere wedge = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(-(other.e4 * this.e235) - (other.e3 * this.e425), -(other.e4 * this.e315) - (other.e1 * this.e435), -(other.e4 * this.e125) - (other.e2 * this.e415), (other.e3 * this.e125) + (other.e5 * this.e321)) + (other.group3.wwwx * float4(this.group0.xyz, this.e235)) + float4((other.group3.yzx * this.group1.zxy), other.e2 * this.e315), 
            /* e1234 */
            -(other.e4 * this.e321) - (other.e1 * this.e423) - (other.e2 * this.e431) - (other.e3 * this.e412)
        );
        DipoleInversion right_anti_dual = DipoleInversion(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            (float3(wedge.e1234) * right_anti_dual.group3.xyz) - (float3(right_anti_dual.e1234) * wedge.group0.xyz), 
            /* e415, e425, e435, e321 */
            (right_anti_dual.group3.yzxw * float4(wedge.group0.zxy, wedge.e1234)) - (wedge.group0.yzxw * float4(right_anti_dual.group3.zxy, right_anti_dual.e1234)), 
            /* e235, e315, e125, e4 */
            float4(right_anti_dual.e4235 * wedge.e3215 * -1.0, right_anti_dual.e4315 * wedge.e3215 * -1.0, right_anti_dual.e4125 * wedge.e3215 * -1.0, (right_anti_dual.e42 * wedge.e4315) + (right_anti_dual.e43 * wedge.e4125) + (right_anti_dual.e45 * wedge.e1234)) + (wedge.group0.xyzx * float4(right_anti_dual.group3.www, right_anti_dual.e41)), 
            /* e1, e2, e3, e5 */
            float4((right_anti_dual.e12 * wedge.e4315) + (right_anti_dual.e15 * wedge.e1234), (right_anti_dual.e23 * wedge.e4125) + (right_anti_dual.e25 * wedge.e1234), (right_anti_dual.e31 * wedge.e4235) + (right_anti_dual.e35 * wedge.e1234), -(right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125)) - (float4(wedge.e3215) * float4(right_anti_dual.group0.xyz, right_anti_dual.e45)) - (wedge.group0.zxyx * float4(right_anti_dual.group1.yzx, right_anti_dual.e15))
        );
    }
}
public extension Circle {
    public Circle anti_reject_orthogonally_from(AntiDualNum other) {
        Circle wedge = Circle(
            /* e423, e431, e412 */
            float3(other.scalar) * this.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.scalar) * this.group1, 
            /* e235, e315, e125 */
            float3(other.scalar) * this.group2.xyz
        );
        DualNum right_anti_dual = DualNum(
            /* e5, e12345 */
            other.group0.xy
        );
        return Circle(
            /* e423, e431, e412 */
            float3(right_anti_dual.e12345) * wedge.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(right_anti_dual.e12345) * wedge.group1, 
            /* e235, e315, e125 */
            float3(right_anti_dual.e12345) * wedge.group2.xyz
        );
    }
}
public extension Circle {
    public AntiDipoleInversion anti_reject_orthogonally_from(AntiFlector other) {
        Sphere wedge = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.e3 * this.e425 * -1.0, other.e1 * this.e435 * -1.0, other.e2 * this.e415 * -1.0, (other.e3 * this.e125) + (other.e5 * this.e321)) + (other.group1.wwwx * float4(this.group0.xyz, this.e235)) + float4((other.group1.yzx * this.group1.zxy), other.e2 * this.e315), 
            /* e1234 */
            -(other.e1 * this.e423) - (other.e2 * this.e431) - (other.e3 * this.e412)
        );
        Flector right_anti_dual = Flector(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(wedge.e1234) * right_anti_dual.group1.xyz, 
            /* e415, e425, e435, e321 */
            float4(((right_anti_dual.group1.yzx * wedge.group0.zxy) - (right_anti_dual.group1.zxy * wedge.group0.yzx)), right_anti_dual.e3215 * wedge.e1234), 
            /* e235, e315, e125, e4 */
            float4(((float3(right_anti_dual.e3215) * wedge.group0.xyz) - (float3(wedge.e3215) * right_anti_dual.group1.xyz)), right_anti_dual.e45 * wedge.e1234), 
            /* e1, e2, e3, e5 */
            float4((float3(wedge.e1234) * right_anti_dual.group0.xyz), -(right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125) - (right_anti_dual.e45 * wedge.e3215))
        );
    }
}
public extension Circle {
    public Line anti_reject_orthogonally_from(AntiLine other) {
        AntiScalar wedge = AntiScalar(
            /* e12345 */
            -(other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435) - (other.e15 * this.e423) - (other.e25 * this.e431) - (other.e35 * this.e412)
        );
        Line right_anti_dual = Line(
            /* e415, e425, e435 */
            other.group0.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group1.xyz * float3(-1.0)
        );
        return Line(
            /* e415, e425, e435 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e235, e315, e125 */
            float3(wedge.e12345) * right_anti_dual.group1.xyz
        );
    }
}
public extension Circle {
    public VersorEven anti_reject_orthogonally_from(AntiMotor other) {
        CircleRotor wedge = CircleRotor(
            /* e423, e431, e412 */
            float3(other.scalar) * this.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.scalar) * this.group1, 
            /* e235, e315, e125, e12345 */
            float4((float3(other.scalar) * this.group2.xyz), -(other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435) - (other.e15 * this.e423) - (other.e25 * this.e431) - (other.e35 * this.e412))
        );
        Motor right_anti_dual = Motor(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(right_anti_dual.e12345) * float4(wedge.group0.xyz, wedge.e12345), 
            /* e415, e425, e435, e321 */
            float4(((float3(wedge.e12345) * right_anti_dual.group0.xyz) + (float3(right_anti_dual.e12345) * wedge.group1.xyz)), wedge.e321 * right_anti_dual.e12345), 
            /* e235, e315, e125, e5 */
            float4(wedge.e12345 * right_anti_dual.e235, wedge.e12345 * right_anti_dual.e315, wedge.e12345 * right_anti_dual.e125, -(wedge.e415 * right_anti_dual.e235) - (wedge.e425 * right_anti_dual.e315) - (wedge.e435 * right_anti_dual.e125) - (wedge.e235 * right_anti_dual.e415) - (wedge.e315 * right_anti_dual.e425) - (wedge.e125 * right_anti_dual.e435)) + (wedge.group2 * float4(right_anti_dual.group0.www, right_anti_dual.e5)), 
            /* e1, e2, e3, e4 */
            float4((wedge.e412 * right_anti_dual.e315) + (wedge.e321 * right_anti_dual.e415), (wedge.e423 * right_anti_dual.e125) + (wedge.e321 * right_anti_dual.e425), (wedge.e431 * right_anti_dual.e235) + (wedge.e321 * right_anti_dual.e435), -(wedge.e431 * right_anti_dual.e425) - (wedge.e412 * right_anti_dual.e435)) - float4((wedge.group0.xyz.yzx * right_anti_dual.group1.zxy), wedge.e423 * right_anti_dual.e415)
        );
    }
}
public extension Circle {
    public Circle anti_reject_orthogonally_from(AntiPlane other) {
        Sphere wedge = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.e3 * this.e425 * -1.0, other.e1 * this.e435 * -1.0, other.e2 * this.e415 * -1.0, (other.e3 * this.e125) + (other.e5 * this.e321)) + (other.group0.wwwx * float4(this.group0.xyz, this.e235)) + float4((other.group0.yzx * this.group1.zxy), other.e2 * this.e315), 
            /* e1234 */
            -(other.e1 * this.e423) - (other.e2 * this.e431) - (other.e3 * this.e412)
        );
        Plane right_anti_dual = Plane(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return Circle(
            /* e423, e431, e412 */
            float3(wedge.e1234) * right_anti_dual.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(((right_anti_dual.group0.yzx * wedge.group0.zxy) - (right_anti_dual.group0.zxy * wedge.group0.yzx)), right_anti_dual.e3215 * wedge.e1234), 
            /* e235, e315, e125 */
            (float3(right_anti_dual.e3215) * wedge.group0.xyz) - (float3(wedge.e3215) * right_anti_dual.group0.xyz)
        );
    }
}
public extension Circle {
    public Circle anti_reject_orthogonally_from(Dipole other) {
        AntiScalar wedge = AntiScalar(
            /* e12345 */
            -(this.e423 * other.e15) - (this.e431 * other.e25) - (this.e412 * other.e35) - (this.e415 * other.e23) - (this.e425 * other.e31) - (this.e435 * other.e12) - (this.e321 * other.e45) - (this.e235 * other.e41) - (this.e315 * other.e42) - (this.e125 * other.e43)
        );
        Circle right_anti_dual = Circle(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125 */
            other.group2.xyz * float3(-1.0)
        );
        return Circle(
            /* e423, e431, e412 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(wedge.e12345) * right_anti_dual.group1, 
            /* e235, e315, e125 */
            float3(wedge.e12345) * right_anti_dual.group2.xyz
        );
    }
}
public extension Circle {
    public AntiDipoleInversion anti_reject_orthogonally_from(DipoleInversion other) {
        AntiScalar wedge = AntiScalar(
            /* e12345 */
            -(this.e423 * other.e15) - (this.e431 * other.e25) - (this.e412 * other.e35) - (this.e415 * other.e23) - (this.e425 * other.e31) - (this.e435 * other.e12) - (this.e321 * other.e45) - (this.e235 * other.e41) - (this.e315 * other.e42) - (this.e125 * other.e43)
        );
        AntiDipoleInversion right_anti_dual = AntiDipoleInversion(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(wedge.e12345) * right_anti_dual.group1, 
            /* e235, e315, e125, e4 */
            float4(wedge.e12345) * right_anti_dual.group2, 
            /* e1, e2, e3, e5 */
            float4(wedge.e12345) * right_anti_dual.group3
        );
    }
}
public extension Circle {
    public AntiFlatPoint anti_reject_orthogonally_from(DualNum other) {
        AntiDualNum right_anti_dual = AntiDualNum(
            /* e3215, scalar */
            other.group0.xy * float2(-1.0)
        );
        return AntiFlatPoint(
            /* e235, e315, e125, e321 */
            float4(right_anti_dual.group0.xy.xx, right_anti_dual.e3215, 0.0) * float4(float3(1.0), 0.0) * float4(float4(this.e423 * other.e5, this.e431 * other.e5, this.e412 * other.e5, this.e321 * other.e5).xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
    }
}
public extension Circle {
    public AntiFlatPoint anti_reject_orthogonally_from(FlatPoint other) {
        return AntiFlatPoint(
            /* e235, e315, e125, e321 */
            float4(-(this.e423 * other.e15) - (this.e431 * other.e25) - (this.e412 * other.e35) - (this.e321 * other.e45)) * float4(other.e15 * -1.0, other.e25 * -1.0, other.e35 * -1.0, other.e45)
        );
    }
}
public extension Circle {
    public AntiFlector anti_reject_orthogonally_from(Flector other) {
        AntiScalar wedge = AntiScalar(
            /* e12345 */
            -(this.e423 * other.e15) - (this.e431 * other.e25) - (this.e412 * other.e35) - (this.e321 * other.e45)
        );
        AntiFlector right_anti_dual = AntiFlector(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiFlector(
            /* e235, e315, e125, e321 */
            float4(wedge.e12345) * right_anti_dual.group0, 
            /* e1, e2, e3, e5 */
            float4(wedge.e12345) * right_anti_dual.group1
        );
    }
}
public extension Circle {
    public AntiFlector anti_reject_orthogonally_from(Motor other) {
        Plane wedge = Plane(
            /* e4235, e4315, e4125, e3215 */
            float4(other.e5) * float4(this.group0.xyz, this.e321)
        );
        AntiMotor right_anti_dual = AntiMotor(
            /* e23, e31, e12, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiFlector(
            /* e235, e315, e125, e321 */
            float4(float3(1.0), 0.0) * float4(right_anti_dual.group1.www, 0.0) * float4(wedge.group0.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e1, e2, e3, e5 */
            float4(right_anti_dual.e12 * wedge.e4315, right_anti_dual.e23 * wedge.e4125, right_anti_dual.e31 * wedge.e4235, -(right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125)) - (wedge.group0.zxyx * float4(right_anti_dual.group0.yzx, right_anti_dual.e15))
        );
    }
}
public extension Circle {
    public MultiVector anti_reject_orthogonally_from(MultiVector other) {
        MultiVector wedge = MultiVector(
            /* scalar, e12345 */
            float2(0.0, -(this.e423 * other.e15) - (this.e431 * other.e25) - (this.e412 * other.e35) - (this.e415 * other.e23) - (this.e425 * other.e31) - (this.e435 * other.e12) - (this.e321 * other.e45) - (this.e235 * other.e41) - (this.e315 * other.e42) - (this.e125 * other.e43)), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5 */
            0.0, 
            /* e15, e25, e35, e45 */
            float4(0.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(other.scalar) * this.group1, 
            /* e423, e431, e412 */
            float3(other.scalar) * this.group0.xyz, 
            /* e235, e315, e125 */
            float3(other.scalar) * this.group2.xyz, 
            /* e4235, e4315, e4125, e3215 */
            float4(-(this.e425 * other.e3) - (this.e235 * other.e4), -(this.e435 * other.e1) - (this.e315 * other.e4), -(this.e415 * other.e2) - (this.e125 * other.e4), (this.e321 * other.e5) + (this.e125 * other.e3)) + (other.group1.yzxy * float4(this.group1.zxy, this.e315)) + float4((float3(other.e5) * this.group0.xyz), this.e235 * other.e1), 
            /* e1234 */
            -(this.e423 * other.e1) - (this.e431 * other.e2) - (this.e412 * other.e3) - (this.e321 * other.e4)
        );
        MultiVector right_anti_dual = MultiVector(
            /* scalar, e12345 */
            other.group0.xy.yx * float2(-1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215, 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43 */
            other.group7.xyz, 
            /* e23, e31, e12 */
            other.group6.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412 */
            other.group4.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group3.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2((right_anti_dual.scalar * wedge.e12345) + (right_anti_dual.e12345 * wedge.scalar) + (right_anti_dual.e1 * wedge.e4235) + (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) + (right_anti_dual.e4 * wedge.e3215) + (right_anti_dual.e5 * wedge.e1234) + (right_anti_dual.e4235 * wedge.e1) + (right_anti_dual.e4315 * wedge.e2) + (right_anti_dual.e4125 * wedge.e3) + (right_anti_dual.e3215 * wedge.e4) + (right_anti_dual.e1234 * wedge.e5) - (right_anti_dual.e15 * wedge.e423) - (right_anti_dual.e25 * wedge.e431) - (right_anti_dual.e35 * wedge.e412) - (right_anti_dual.e45 * wedge.e321) - (right_anti_dual.e41 * wedge.e235) - (right_anti_dual.e42 * wedge.e315) - (right_anti_dual.e43 * wedge.e125) - (right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e321 * wedge.e45) - (right_anti_dual.e423 * wedge.e15) - (right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43), right_anti_dual.e12345 * wedge.e12345), 
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e15 * wedge.e1234) + (right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e4125 * wedge.e31), (right_anti_dual.e25 * wedge.e1234) + (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e4235 * wedge.e12), (right_anti_dual.e35 * wedge.e1234) + (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e4315 * wedge.e23), -(right_anti_dual.e415 * wedge.e423) - (right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412) - (right_anti_dual.e1234 * wedge.e45)) + (float4(right_anti_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_anti_dual.group1) + (wedge.group9.yzxx * float4(right_anti_dual.group5.xyz.zxy, right_anti_dual.e41)) + float4((wedge.group4.xyz * right_anti_dual.group9.www), right_anti_dual.e45 * wedge.e1234) + float4((right_anti_dual.group7.xyz.zxy * wedge.group8.xyz.yzx), right_anti_dual.e42 * wedge.e4315) + float4((right_anti_dual.group8.xyz.yzx * wedge.group7.xyz.zxy), right_anti_dual.e43 * wedge.e4125) - (right_anti_dual.group9.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((float3(right_anti_dual.e1234) * wedge.group3.xyz), right_anti_dual.e4125 * wedge.e43) - float4((right_anti_dual.group4.xyz * wedge.group9.www), right_anti_dual.e423 * wedge.e415) - float4((right_anti_dual.group5.xyz.yzx * wedge.group9.zxy), right_anti_dual.e431 * wedge.e425) - float4((right_anti_dual.group7.xyz.yzx * wedge.group8.xyz.zxy), right_anti_dual.e412 * wedge.e435) - float4((right_anti_dual.group8.xyz.zxy * wedge.group7.xyz.yzx), right_anti_dual.e4235 * wedge.e41), 
            /* e5 */
            (right_anti_dual.e12345 * wedge.e5) + (right_anti_dual.e5 * wedge.e12345) + (right_anti_dual.e4235 * wedge.e15) + (right_anti_dual.e4315 * wedge.e25) + (right_anti_dual.e4125 * wedge.e35) + (right_anti_dual.e3215 * wedge.e45) - (right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125) - (right_anti_dual.e45 * wedge.e3215) - (right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435), 
            /* e15, e25, e35, e45 */
            float4((right_anti_dual.e415 * wedge.e3215) + (right_anti_dual.e315 * wedge.e4125) + (right_anti_dual.e4125 * wedge.e315) + (right_anti_dual.e3215 * wedge.e415), (right_anti_dual.e425 * wedge.e3215) + (right_anti_dual.e125 * wedge.e4235) + (right_anti_dual.e4235 * wedge.e125) + (right_anti_dual.e3215 * wedge.e425), (right_anti_dual.e435 * wedge.e3215) + (right_anti_dual.e235 * wedge.e4315) + (right_anti_dual.e4315 * wedge.e235) + (right_anti_dual.e3215 * wedge.e435), -(right_anti_dual.e435 * wedge.e4125) - (right_anti_dual.e4235 * wedge.e415) - (right_anti_dual.e4315 * wedge.e425) - (right_anti_dual.e4125 * wedge.e435)) + (float4(right_anti_dual.e12345) * wedge.group3) + (float4(wedge.e12345) * right_anti_dual.group3) - (wedge.group9.yzxx * float4(right_anti_dual.group8.xyz.zxy, right_anti_dual.e415)) - float4((wedge.group8.xyz.zxy * right_anti_dual.group9.yzx), right_anti_dual.e425 * wedge.e4315), 
            /* e41, e42, e43 */
            (float3(right_anti_dual.e12345) * wedge.group4.xyz) + (float3(right_anti_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_anti_dual.group4.xyz) + (float3(wedge.e1234) * right_anti_dual.group6.xyz) + (right_anti_dual.group7.xyz.zxy * wedge.group9.yzx) + (wedge.group7.xyz.zxy * right_anti_dual.group9.yzx) - (right_anti_dual.group7.xyz.yzx * wedge.group9.zxy) - (wedge.group7.xyz.yzx * right_anti_dual.group9.zxy), 
            /* e23, e31, e12 */
            (float3(right_anti_dual.e12345) * wedge.group5.xyz) + (float3(right_anti_dual.e3215) * wedge.group7.xyz) + (float3(right_anti_dual.e1234) * wedge.group8.xyz) + (float3(wedge.e12345) * right_anti_dual.group5.xyz) + (float3(wedge.e3215) * right_anti_dual.group7.xyz) + (float3(wedge.e1234) * right_anti_dual.group8.xyz) - (float3(right_anti_dual.e321) * wedge.group9.xyz) - (float3(wedge.e321) * right_anti_dual.group9.xyz), 
            /* e415, e425, e435, e321 */
            (float4(right_anti_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_anti_dual.group6) + (right_anti_dual.group9.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - float4((right_anti_dual.group9.zxy * wedge.group9.yzx), right_anti_dual.e1234 * wedge.e3215), 
            /* e423, e431, e412 */
            (float3(right_anti_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_anti_dual.group7.xyz) + (float3(wedge.e1234) * right_anti_dual.group9.xyz) - (float3(right_anti_dual.e1234) * wedge.group9.xyz), 
            /* e235, e315, e125 */
            (float3(right_anti_dual.e12345) * wedge.group8.xyz) + (float3(right_anti_dual.e3215) * wedge.group9.xyz) + (float3(wedge.e12345) * right_anti_dual.group8.xyz) - (float3(wedge.e3215) * right_anti_dual.group9.xyz), 
            /* e4235, e4315, e4125, e3215 */
            (float4(right_anti_dual.e12345) * wedge.group9) + (float4(wedge.e12345) * right_anti_dual.group9), 
            /* e1234 */
            (right_anti_dual.e12345 * wedge.e1234) + (right_anti_dual.e1234 * wedge.e12345)
        );
    }
}
public extension Circle {
    public Circle anti_reject_orthogonally_from(RoundPoint other) {
        Sphere wedge = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(-(this.e425 * other.e3) - (this.e235 * other.e4), -(this.e435 * other.e1) - (this.e315 * other.e4), -(this.e415 * other.e2) - (this.e125 * other.e4), (this.e321 * other.e5) + (this.e125 * other.e3)) + (other.group0.yzxy * float4(this.group1.zxy, this.e315)) + float4((float3(other.e5) * this.group0.xyz), this.e235 * other.e1), 
            /* e1234 */
            -(this.e423 * other.e1) - (this.e431 * other.e2) - (this.e412 * other.e3) - (this.e321 * other.e4)
        );
        Sphere right_anti_dual = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        return Circle(
            /* e423, e431, e412 */
            (float3(wedge.e1234) * right_anti_dual.group0.xyz) - (float3(right_anti_dual.e1234) * wedge.group0.xyz), 
            /* e415, e425, e435, e321 */
            (right_anti_dual.group0.yzxw * float4(wedge.group0.zxy, wedge.e1234)) - float4((right_anti_dual.group0.zxy * wedge.group0.yzx), right_anti_dual.e1234 * wedge.e3215), 
            /* e235, e315, e125 */
            (float3(right_anti_dual.e3215) * wedge.group0.xyz) - (float3(wedge.e3215) * right_anti_dual.group0.xyz)
        );
    }
}
public extension Circle {
    public Circle anti_reject_orthogonally_from(Scalar other) {
        Circle wedge = Circle(
            /* e423, e431, e412 */
            float3(other.scalar) * this.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.scalar) * this.group1, 
            /* e235, e315, e125 */
            float3(other.scalar) * this.group2.xyz
        );
        AntiScalar right_anti_dual = AntiScalar(
            /* e12345 */
            other.scalar
        );
        return Circle(
            /* e423, e431, e412 */
            float3(right_anti_dual.e12345) * wedge.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(right_anti_dual.e12345) * wedge.group1, 
            /* e235, e315, e125 */
            float3(right_anti_dual.e12345) * wedge.group2.xyz
        );
    }
}
public extension Circle {
    public AntiDipoleInversion anti_reject_orthogonally_from(VersorEven other) {
        Sphere wedge = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(-(this.e425 * other.e3) - (this.e235 * other.e4), -(this.e435 * other.e1) - (this.e315 * other.e4), -(this.e415 * other.e2) - (this.e125 * other.e4), (this.e321 * other.e5) + (this.e125 * other.e3)) + (other.group3.yzxy * float4(this.group1.zxy, this.e315)) + float4((this.group0.xyz * other.group2.www), this.e235 * other.e1), 
            /* e1234 */
            -(this.e423 * other.e1) - (this.e431 * other.e2) - (this.e412 * other.e3) - (this.e321 * other.e4)
        );
        VersorOdd right_anti_dual = VersorOdd(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            (float3(wedge.e1234) * right_anti_dual.group3.xyz) - (float3(right_anti_dual.e1234) * wedge.group0.xyz), 
            /* e415, e425, e435, e321 */
            float4((wedge.group0.zxy * right_anti_dual.group3.yzx), wedge.e1234 * right_anti_dual.e3215) - (wedge.group0.yzxw * float4(right_anti_dual.group3.zxy, right_anti_dual.e1234)), 
            /* e235, e315, e125, e4 */
            float4(wedge.e3215 * right_anti_dual.e4235 * -1.0, wedge.e3215 * right_anti_dual.e4315 * -1.0, wedge.e3215 * right_anti_dual.e4125 * -1.0, (wedge.e4315 * right_anti_dual.e42) + (wedge.e4125 * right_anti_dual.e43) + (wedge.e1234 * right_anti_dual.e45)) + (wedge.group0.xyzx * float4(right_anti_dual.group3.www, right_anti_dual.e41)), 
            /* e1, e2, e3, e5 */
            float4((wedge.e4315 * right_anti_dual.e12) + (wedge.e1234 * right_anti_dual.e15), (wedge.e4125 * right_anti_dual.e23) + (wedge.e1234 * right_anti_dual.e25), (wedge.e4235 * right_anti_dual.e31) + (wedge.e1234 * right_anti_dual.e35), -(wedge.e4125 * right_anti_dual.e35) - (wedge.e3215 * right_anti_dual.e45)) - (wedge.group0.zxyx * float4(right_anti_dual.group1.yzx, right_anti_dual.e15)) - (wedge.group0.wwwy * float4(right_anti_dual.group0.xyz, right_anti_dual.e25))
        );
    }
}
public extension Circle {
    public VersorEven anti_reject_orthogonally_from(VersorOdd other) {
        CircleRotor wedge = CircleRotor(
            /* e423, e431, e412 */
            float3(other.scalar) * this.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.scalar) * this.group1, 
            /* e235, e315, e125, e12345 */
            float4((float3(other.scalar) * this.group2.xyz), -(this.e423 * other.e15) - (this.e431 * other.e25) - (this.e412 * other.e35) - (this.e415 * other.e23) - (this.e425 * other.e31) - (this.e435 * other.e12) - (this.e321 * other.e45) - (this.e235 * other.e41) - (this.e315 * other.e42) - (this.e125 * other.e43))
        );
        VersorEven right_anti_dual = VersorEven(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(((float3(wedge.e12345) * right_anti_dual.group0.xyz) + (float3(right_anti_dual.e12345) * wedge.group0.xyz)), wedge.e12345 * right_anti_dual.e12345), 
            /* e415, e425, e435, e321 */
            (float4(wedge.e12345) * right_anti_dual.group1) + (float4(right_anti_dual.e12345) * wedge.group1), 
            /* e235, e315, e125, e5 */
            float4(wedge.e12345 * right_anti_dual.e235, wedge.e12345 * right_anti_dual.e315, wedge.e12345 * right_anti_dual.e125, -(wedge.e415 * right_anti_dual.e235) - (wedge.e425 * right_anti_dual.e315) - (wedge.e435 * right_anti_dual.e125) - (wedge.e235 * right_anti_dual.e415) - (wedge.e315 * right_anti_dual.e425) - (wedge.e125 * right_anti_dual.e435)) + (wedge.group2 * float4(right_anti_dual.group0.www, right_anti_dual.e5)), 
            /* e1, e2, e3, e4 */
            float4((wedge.e415 * right_anti_dual.e321) + (wedge.e321 * right_anti_dual.e415) + (wedge.e315 * right_anti_dual.e412) + (wedge.e12345 * right_anti_dual.e1), (wedge.e425 * right_anti_dual.e321) + (wedge.e321 * right_anti_dual.e425) + (wedge.e125 * right_anti_dual.e423) + (wedge.e12345 * right_anti_dual.e2), (wedge.e435 * right_anti_dual.e321) + (wedge.e321 * right_anti_dual.e435) + (wedge.e235 * right_anti_dual.e431) + (wedge.e12345 * right_anti_dual.e3), -(wedge.e412 * right_anti_dual.e435) - (wedge.e415 * right_anti_dual.e423) - (wedge.e425 * right_anti_dual.e431) - (wedge.e435 * right_anti_dual.e412)) + float4((wedge.group0.xyz.zxy * right_anti_dual.group2.yzx), wedge.e12345 * right_anti_dual.e4) - float4((wedge.group0.xyz.yzx * right_anti_dual.group2.zxy), wedge.e423 * right_anti_dual.e415) - float4((wedge.group2.zxy * right_anti_dual.group0.yzx), wedge.e431 * right_anti_dual.e425)
        );
    }
}
public extension CircleRotor {
    // Fancy infix trick (first half)
    public AntiRejectOrthogonallyFromInfixPartial<CircleRotor> operator /(AntiRejectOrthogonallyFromInfix rhs) {
        return AntiRejectOrthogonallyFromInfixPartial<CircleRotor>(this);
    }
}
public extension AntiRejectOrthogonallyFromInfixPartial<CircleRotor> {
    // Fancy infix trick (second half)
    public VersorEven operator /(AntiCircleRotor rhs) {
        return this.a.anti_reject_orthogonally_from(rhs);
    }
}
public extension CircleRotor {
    public VersorEven anti_reject_orthogonally_from(AntiCircleRotor other) {
        CircleRotor wedge = CircleRotor(
            /* e423, e431, e412 */
            float3(other.scalar) * this.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.scalar) * this.group1, 
            /* e235, e315, e125, e12345 */
            float4((other.group2.www * this.group2.xyz), (other.scalar * this.e12345) - (other.e41 * this.e235) - (other.e42 * this.e315) - (other.e43 * this.e125) - (other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435) - (other.e45 * this.e321) - (other.e15 * this.e423) - (other.e25 * this.e431) - (other.e35 * this.e412))
        );
        CircleRotor right_anti_dual = CircleRotor(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(((float3(right_anti_dual.e12345) * wedge.group0.xyz) + (float3(wedge.e12345) * right_anti_dual.group0.xyz)), right_anti_dual.e12345 * wedge.e12345), 
            /* e415, e425, e435, e321 */
            (float4(right_anti_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_anti_dual.group1), 
            /* e235, e315, e125, e5 */
            float4((right_anti_dual.e235 * wedge.e12345) + (right_anti_dual.e12345 * wedge.e235), (right_anti_dual.e315 * wedge.e12345) + (right_anti_dual.e12345 * wedge.e315), (right_anti_dual.e125 * wedge.e12345) + (right_anti_dual.e12345 * wedge.e125), -(right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435)), 
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e412 * wedge.e315) + (right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e315 * wedge.e412), (right_anti_dual.e423 * wedge.e125) + (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e125 * wedge.e423), (right_anti_dual.e431 * wedge.e235) + (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e235 * wedge.e431), -(right_anti_dual.e412 * wedge.e435) - (right_anti_dual.e415 * wedge.e423) - (right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412)) - float4((right_anti_dual.group0.xyz.yzx * wedge.group2.zxy), right_anti_dual.e423 * wedge.e415) - float4((wedge.group0.xyz.yzx * right_anti_dual.group2.zxy), right_anti_dual.e431 * wedge.e425)
        );
    }
}
public extension CircleRotor {
    public AntiDipoleInversion anti_reject_orthogonally_from(AntiDipoleInversion other) {
        Sphere wedge = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(-(other.e4 * this.e235) - (other.e3 * this.e425), -(other.e4 * this.e315) - (other.e1 * this.e435), -(other.e4 * this.e125) - (other.e2 * this.e415), (other.e3 * this.e125) + (other.e5 * this.e321)) + (other.group3.yzxy * float4(this.group1.zxy, this.e315)) + float4((this.group0.xyz * other.group3.www), other.e1 * this.e235), 
            /* e1234 */
            -(other.e4 * this.e321) - (other.e1 * this.e423) - (other.e2 * this.e431) - (other.e3 * this.e412)
        );
        DipoleInversion right_anti_dual = DipoleInversion(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            (float3(wedge.e1234) * right_anti_dual.group3.xyz) - (float3(right_anti_dual.e1234) * wedge.group0.xyz), 
            /* e415, e425, e435, e321 */
            (right_anti_dual.group3.yzxw * float4(wedge.group0.zxy, wedge.e1234)) - (wedge.group0.yzxw * float4(right_anti_dual.group3.zxy, right_anti_dual.e1234)), 
            /* e235, e315, e125, e4 */
            float4(right_anti_dual.e4235 * wedge.e3215 * -1.0, right_anti_dual.e4315 * wedge.e3215 * -1.0, right_anti_dual.e4125 * wedge.e3215 * -1.0, (right_anti_dual.e42 * wedge.e4315) + (right_anti_dual.e43 * wedge.e4125) + (right_anti_dual.e45 * wedge.e1234)) + (wedge.group0.xyzx * float4(right_anti_dual.group3.www, right_anti_dual.e41)), 
            /* e1, e2, e3, e5 */
            float4((right_anti_dual.e12 * wedge.e4315) + (right_anti_dual.e15 * wedge.e1234), (right_anti_dual.e23 * wedge.e4125) + (right_anti_dual.e25 * wedge.e1234), (right_anti_dual.e31 * wedge.e4235) + (right_anti_dual.e35 * wedge.e1234), -(right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125)) - (float4(wedge.e3215) * float4(right_anti_dual.group0.xyz, right_anti_dual.e45)) - (wedge.group0.zxyx * float4(right_anti_dual.group1.yzx, right_anti_dual.e15))
        );
    }
}
public extension CircleRotor {
    public VersorEven anti_reject_orthogonally_from(AntiDualNum other) {
        CircleRotor wedge = CircleRotor(
            /* e423, e431, e412 */
            float3(other.scalar) * this.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.scalar) * this.group1, 
            /* e235, e315, e125, e12345 */
            float4(other.scalar) * this.group2
        );
        DualNum right_anti_dual = DualNum(
            /* e5, e12345 */
            other.group0.xy
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(right_anti_dual.e12345) * float4(wedge.group0.xyz, wedge.e12345), 
            /* e415, e425, e435, e321 */
            float4(right_anti_dual.e12345) * wedge.group1, 
            /* e235, e315, e125, e5 */
            wedge.group2 * float4(right_anti_dual.group0.xy.yy, right_anti_dual.e12345, right_anti_dual.e5), 
            /* e1, e2, e3, e4 */
            float4(0.0)
        );
    }
}
public extension CircleRotor {
    public AntiDipoleInversion anti_reject_orthogonally_from(AntiFlector other) {
        Sphere wedge = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.e3 * this.e425 * -1.0, other.e1 * this.e435 * -1.0, other.e2 * this.e415 * -1.0, (other.e3 * this.e125) + (other.e5 * this.e321)) + (other.group1.yzxy * float4(this.group1.zxy, this.e315)) + float4((this.group0.xyz * other.group1.www), other.e1 * this.e235), 
            /* e1234 */
            -(other.e1 * this.e423) - (other.e2 * this.e431) - (other.e3 * this.e412)
        );
        Flector right_anti_dual = Flector(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(wedge.e1234) * right_anti_dual.group1.xyz, 
            /* e415, e425, e435, e321 */
            float4(((right_anti_dual.group1.yzx * wedge.group0.zxy) - (right_anti_dual.group1.zxy * wedge.group0.yzx)), right_anti_dual.e3215 * wedge.e1234), 
            /* e235, e315, e125, e4 */
            float4(((float3(right_anti_dual.e3215) * wedge.group0.xyz) - (float3(wedge.e3215) * right_anti_dual.group1.xyz)), right_anti_dual.e45 * wedge.e1234), 
            /* e1, e2, e3, e5 */
            float4((float3(wedge.e1234) * right_anti_dual.group0.xyz), -(right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125) - (right_anti_dual.e45 * wedge.e3215))
        );
    }
}
public extension CircleRotor {
    public Line anti_reject_orthogonally_from(AntiLine other) {
        AntiScalar wedge = AntiScalar(
            /* e12345 */
            -(other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435) - (other.e15 * this.e423) - (other.e25 * this.e431) - (other.e35 * this.e412)
        );
        Line right_anti_dual = Line(
            /* e415, e425, e435 */
            other.group0.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group1.xyz * float3(-1.0)
        );
        return Line(
            /* e415, e425, e435 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e235, e315, e125 */
            float3(wedge.e12345) * right_anti_dual.group1.xyz
        );
    }
}
public extension CircleRotor {
    public VersorEven anti_reject_orthogonally_from(AntiMotor other) {
        CircleRotor wedge = CircleRotor(
            /* e423, e431, e412 */
            float3(other.scalar) * this.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.scalar) * this.group1, 
            /* e235, e315, e125, e12345 */
            float4((other.group0.www * this.group2.xyz), (other.scalar * this.e12345) - (other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435) - (other.e15 * this.e423) - (other.e25 * this.e431) - (other.e35 * this.e412))
        );
        Motor right_anti_dual = Motor(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(right_anti_dual.e12345) * float4(wedge.group0.xyz, wedge.e12345), 
            /* e415, e425, e435, e321 */
            float4(((float3(wedge.e12345) * right_anti_dual.group0.xyz) + (float3(right_anti_dual.e12345) * wedge.group1.xyz)), wedge.e321 * right_anti_dual.e12345), 
            /* e235, e315, e125, e5 */
            float4(wedge.e12345 * right_anti_dual.e235, wedge.e12345 * right_anti_dual.e315, wedge.e12345 * right_anti_dual.e125, -(wedge.e415 * right_anti_dual.e235) - (wedge.e425 * right_anti_dual.e315) - (wedge.e435 * right_anti_dual.e125) - (wedge.e235 * right_anti_dual.e415) - (wedge.e315 * right_anti_dual.e425) - (wedge.e125 * right_anti_dual.e435)) + (wedge.group2 * float4(right_anti_dual.group0.www, right_anti_dual.e5)), 
            /* e1, e2, e3, e4 */
            float4((wedge.e412 * right_anti_dual.e315) + (wedge.e321 * right_anti_dual.e415), (wedge.e423 * right_anti_dual.e125) + (wedge.e321 * right_anti_dual.e425), (wedge.e431 * right_anti_dual.e235) + (wedge.e321 * right_anti_dual.e435), -(wedge.e431 * right_anti_dual.e425) - (wedge.e412 * right_anti_dual.e435)) - float4((wedge.group0.xyz.yzx * right_anti_dual.group1.zxy), wedge.e423 * right_anti_dual.e415)
        );
    }
}
public extension CircleRotor {
    public Circle anti_reject_orthogonally_from(AntiPlane other) {
        Sphere wedge = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.e3 * this.e425 * -1.0, other.e1 * this.e435 * -1.0, other.e2 * this.e415 * -1.0, (other.e3 * this.e125) + (other.e5 * this.e321)) + (other.group0.yzxy * float4(this.group1.zxy, this.e315)) + float4((this.group0.xyz * other.group0.www), other.e1 * this.e235), 
            /* e1234 */
            -(other.e1 * this.e423) - (other.e2 * this.e431) - (other.e3 * this.e412)
        );
        Plane right_anti_dual = Plane(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return Circle(
            /* e423, e431, e412 */
            float3(wedge.e1234) * right_anti_dual.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(((right_anti_dual.group0.yzx * wedge.group0.zxy) - (right_anti_dual.group0.zxy * wedge.group0.yzx)), right_anti_dual.e3215 * wedge.e1234), 
            /* e235, e315, e125 */
            (float3(right_anti_dual.e3215) * wedge.group0.xyz) - (float3(wedge.e3215) * right_anti_dual.group0.xyz)
        );
    }
}
public extension CircleRotor {
    public Circle anti_reject_orthogonally_from(Dipole other) {
        AntiScalar wedge = AntiScalar(
            /* e12345 */
            -(this.e423 * other.e15) - (this.e431 * other.e25) - (this.e412 * other.e35) - (this.e415 * other.e23) - (this.e425 * other.e31) - (this.e435 * other.e12) - (this.e321 * other.e45) - (this.e235 * other.e41) - (this.e315 * other.e42) - (this.e125 * other.e43)
        );
        Circle right_anti_dual = Circle(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125 */
            other.group2.xyz * float3(-1.0)
        );
        return Circle(
            /* e423, e431, e412 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(wedge.e12345) * right_anti_dual.group1, 
            /* e235, e315, e125 */
            float3(wedge.e12345) * right_anti_dual.group2.xyz
        );
    }
}
public extension CircleRotor {
    public AntiDipoleInversion anti_reject_orthogonally_from(DipoleInversion other) {
        AntiScalar wedge = AntiScalar(
            /* e12345 */
            -(this.e423 * other.e15) - (this.e431 * other.e25) - (this.e412 * other.e35) - (this.e415 * other.e23) - (this.e425 * other.e31) - (this.e435 * other.e12) - (this.e321 * other.e45) - (this.e235 * other.e41) - (this.e315 * other.e42) - (this.e125 * other.e43)
        );
        AntiDipoleInversion right_anti_dual = AntiDipoleInversion(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(wedge.e12345) * right_anti_dual.group1, 
            /* e235, e315, e125, e4 */
            float4(wedge.e12345) * right_anti_dual.group2, 
            /* e1, e2, e3, e5 */
            float4(wedge.e12345) * right_anti_dual.group3
        );
    }
}
public extension CircleRotor {
    public AntiFlatPoint anti_reject_orthogonally_from(DualNum other) {
        AntiDualNum right_anti_dual = AntiDualNum(
            /* e3215, scalar */
            other.group0.xy * float2(-1.0)
        );
        return AntiFlatPoint(
            /* e235, e315, e125, e321 */
            float4(right_anti_dual.group0.xy.xx, right_anti_dual.e3215, 0.0) * float4(float3(1.0), 0.0) * float4(float4(this.e423 * other.e5, this.e431 * other.e5, this.e412 * other.e5, this.e321 * other.e5).xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
    }
}
public extension CircleRotor {
    public AntiFlatPoint anti_reject_orthogonally_from(FlatPoint other) {
        return AntiFlatPoint(
            /* e235, e315, e125, e321 */
            float4(-(this.e423 * other.e15) - (this.e431 * other.e25) - (this.e412 * other.e35) - (this.e321 * other.e45)) * float4(other.e15 * -1.0, other.e25 * -1.0, other.e35 * -1.0, other.e45)
        );
    }
}
public extension CircleRotor {
    public AntiFlector anti_reject_orthogonally_from(Flector other) {
        AntiScalar wedge = AntiScalar(
            /* e12345 */
            -(this.e423 * other.e15) - (this.e431 * other.e25) - (this.e412 * other.e35) - (this.e321 * other.e45)
        );
        AntiFlector right_anti_dual = AntiFlector(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiFlector(
            /* e235, e315, e125, e321 */
            float4(wedge.e12345) * right_anti_dual.group0, 
            /* e1, e2, e3, e5 */
            float4(wedge.e12345) * right_anti_dual.group1
        );
    }
}
public extension CircleRotor {
    public AntiFlector anti_reject_orthogonally_from(Motor other) {
        Plane wedge = Plane(
            /* e4235, e4315, e4125, e3215 */
            float4(other.e5) * float4(this.group0.xyz, this.e321)
        );
        AntiMotor right_anti_dual = AntiMotor(
            /* e23, e31, e12, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiFlector(
            /* e235, e315, e125, e321 */
            float4(float3(1.0), 0.0) * float4(right_anti_dual.group1.www, 0.0) * float4(wedge.group0.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e1, e2, e3, e5 */
            float4(right_anti_dual.e12 * wedge.e4315, right_anti_dual.e23 * wedge.e4125, right_anti_dual.e31 * wedge.e4235, -(right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125)) - (wedge.group0.zxyx * float4(right_anti_dual.group0.yzx, right_anti_dual.e15))
        );
    }
}
public extension CircleRotor {
    public MultiVector anti_reject_orthogonally_from(MultiVector other) {
        MultiVector wedge = MultiVector(
            /* scalar, e12345 */
            float2(0.0, (this.e12345 * other.scalar) - (this.e423 * other.e15) - (this.e431 * other.e25) - (this.e412 * other.e35) - (this.e415 * other.e23) - (this.e425 * other.e31) - (this.e435 * other.e12) - (this.e321 * other.e45) - (this.e235 * other.e41) - (this.e315 * other.e42) - (this.e125 * other.e43)), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5 */
            0.0, 
            /* e15, e25, e35, e45 */
            float4(0.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(other.scalar) * this.group1, 
            /* e423, e431, e412 */
            float3(other.scalar) * this.group0.xyz, 
            /* e235, e315, e125 */
            float3(other.scalar) * this.group2.xyz, 
            /* e4235, e4315, e4125, e3215 */
            float4(-(this.e425 * other.e3) - (this.e235 * other.e4), -(this.e435 * other.e1) - (this.e315 * other.e4), -(this.e415 * other.e2) - (this.e125 * other.e4), (this.e315 * other.e2) + (this.e125 * other.e3)) + (float4(other.e5) * float4(this.group0.xyz, this.e321)) + (other.group1.yzxx * float4(this.group1.zxy, this.e235)), 
            /* e1234 */
            -(this.e423 * other.e1) - (this.e431 * other.e2) - (this.e412 * other.e3) - (this.e321 * other.e4)
        );
        MultiVector right_anti_dual = MultiVector(
            /* scalar, e12345 */
            other.group0.xy.yx * float2(-1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215, 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43 */
            other.group7.xyz, 
            /* e23, e31, e12 */
            other.group6.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412 */
            other.group4.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group3.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2((right_anti_dual.scalar * wedge.e12345) + (right_anti_dual.e12345 * wedge.scalar) + (right_anti_dual.e1 * wedge.e4235) + (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) + (right_anti_dual.e4 * wedge.e3215) + (right_anti_dual.e5 * wedge.e1234) + (right_anti_dual.e4235 * wedge.e1) + (right_anti_dual.e4315 * wedge.e2) + (right_anti_dual.e4125 * wedge.e3) + (right_anti_dual.e3215 * wedge.e4) + (right_anti_dual.e1234 * wedge.e5) - (right_anti_dual.e15 * wedge.e423) - (right_anti_dual.e25 * wedge.e431) - (right_anti_dual.e35 * wedge.e412) - (right_anti_dual.e45 * wedge.e321) - (right_anti_dual.e41 * wedge.e235) - (right_anti_dual.e42 * wedge.e315) - (right_anti_dual.e43 * wedge.e125) - (right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e321 * wedge.e45) - (right_anti_dual.e423 * wedge.e15) - (right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43), right_anti_dual.e12345 * wedge.e12345), 
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e15 * wedge.e1234) + (right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e4125 * wedge.e31), (right_anti_dual.e25 * wedge.e1234) + (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e4235 * wedge.e12), (right_anti_dual.e35 * wedge.e1234) + (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e4315 * wedge.e23), -(right_anti_dual.e415 * wedge.e423) - (right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412) - (right_anti_dual.e1234 * wedge.e45)) + (float4(right_anti_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_anti_dual.group1) + (wedge.group9.yzxx * float4(right_anti_dual.group5.xyz.zxy, right_anti_dual.e41)) + float4((wedge.group4.xyz * right_anti_dual.group9.www), right_anti_dual.e45 * wedge.e1234) + float4((right_anti_dual.group7.xyz.zxy * wedge.group8.xyz.yzx), right_anti_dual.e42 * wedge.e4315) + float4((right_anti_dual.group8.xyz.yzx * wedge.group7.xyz.zxy), right_anti_dual.e43 * wedge.e4125) - (right_anti_dual.group9.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((float3(right_anti_dual.e1234) * wedge.group3.xyz), right_anti_dual.e4125 * wedge.e43) - float4((right_anti_dual.group4.xyz * wedge.group9.www), right_anti_dual.e423 * wedge.e415) - float4((right_anti_dual.group5.xyz.yzx * wedge.group9.zxy), right_anti_dual.e431 * wedge.e425) - float4((right_anti_dual.group7.xyz.yzx * wedge.group8.xyz.zxy), right_anti_dual.e412 * wedge.e435) - float4((right_anti_dual.group8.xyz.zxy * wedge.group7.xyz.yzx), right_anti_dual.e4235 * wedge.e41), 
            /* e5 */
            (right_anti_dual.e12345 * wedge.e5) + (right_anti_dual.e5 * wedge.e12345) + (right_anti_dual.e4235 * wedge.e15) + (right_anti_dual.e4315 * wedge.e25) + (right_anti_dual.e4125 * wedge.e35) + (right_anti_dual.e3215 * wedge.e45) - (right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125) - (right_anti_dual.e45 * wedge.e3215) - (right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435), 
            /* e15, e25, e35, e45 */
            float4((right_anti_dual.e415 * wedge.e3215) + (right_anti_dual.e315 * wedge.e4125) + (right_anti_dual.e4125 * wedge.e315) + (right_anti_dual.e3215 * wedge.e415), (right_anti_dual.e425 * wedge.e3215) + (right_anti_dual.e125 * wedge.e4235) + (right_anti_dual.e4235 * wedge.e125) + (right_anti_dual.e3215 * wedge.e425), (right_anti_dual.e435 * wedge.e3215) + (right_anti_dual.e235 * wedge.e4315) + (right_anti_dual.e4315 * wedge.e235) + (right_anti_dual.e3215 * wedge.e435), -(right_anti_dual.e435 * wedge.e4125) - (right_anti_dual.e4235 * wedge.e415) - (right_anti_dual.e4315 * wedge.e425) - (right_anti_dual.e4125 * wedge.e435)) + (float4(right_anti_dual.e12345) * wedge.group3) + (float4(wedge.e12345) * right_anti_dual.group3) - (wedge.group9.yzxx * float4(right_anti_dual.group8.xyz.zxy, right_anti_dual.e415)) - float4((wedge.group8.xyz.zxy * right_anti_dual.group9.yzx), right_anti_dual.e425 * wedge.e4315), 
            /* e41, e42, e43 */
            (float3(right_anti_dual.e12345) * wedge.group4.xyz) + (float3(right_anti_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_anti_dual.group4.xyz) + (float3(wedge.e1234) * right_anti_dual.group6.xyz) + (right_anti_dual.group7.xyz.zxy * wedge.group9.yzx) + (wedge.group7.xyz.zxy * right_anti_dual.group9.yzx) - (right_anti_dual.group7.xyz.yzx * wedge.group9.zxy) - (wedge.group7.xyz.yzx * right_anti_dual.group9.zxy), 
            /* e23, e31, e12 */
            (float3(right_anti_dual.e12345) * wedge.group5.xyz) + (float3(right_anti_dual.e3215) * wedge.group7.xyz) + (float3(right_anti_dual.e1234) * wedge.group8.xyz) + (float3(wedge.e12345) * right_anti_dual.group5.xyz) + (float3(wedge.e3215) * right_anti_dual.group7.xyz) + (float3(wedge.e1234) * right_anti_dual.group8.xyz) - (float3(right_anti_dual.e321) * wedge.group9.xyz) - (float3(wedge.e321) * right_anti_dual.group9.xyz), 
            /* e415, e425, e435, e321 */
            (float4(right_anti_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_anti_dual.group6) + (right_anti_dual.group9.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - float4((right_anti_dual.group9.zxy * wedge.group9.yzx), right_anti_dual.e1234 * wedge.e3215), 
            /* e423, e431, e412 */
            (float3(right_anti_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_anti_dual.group7.xyz) + (float3(wedge.e1234) * right_anti_dual.group9.xyz) - (float3(right_anti_dual.e1234) * wedge.group9.xyz), 
            /* e235, e315, e125 */
            (float3(right_anti_dual.e12345) * wedge.group8.xyz) + (float3(right_anti_dual.e3215) * wedge.group9.xyz) + (float3(wedge.e12345) * right_anti_dual.group8.xyz) - (float3(wedge.e3215) * right_anti_dual.group9.xyz), 
            /* e4235, e4315, e4125, e3215 */
            (float4(right_anti_dual.e12345) * wedge.group9) + (float4(wedge.e12345) * right_anti_dual.group9), 
            /* e1234 */
            (right_anti_dual.e12345 * wedge.e1234) + (right_anti_dual.e1234 * wedge.e12345)
        );
    }
}
public extension CircleRotor {
    public Circle anti_reject_orthogonally_from(RoundPoint other) {
        Sphere wedge = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(-(this.e425 * other.e3) - (this.e235 * other.e4), -(this.e435 * other.e1) - (this.e315 * other.e4), -(this.e415 * other.e2) - (this.e125 * other.e4), (this.e315 * other.e2) + (this.e125 * other.e3)) + (float4(other.e5) * float4(this.group0.xyz, this.e321)) + (other.group0.yzxx * float4(this.group1.zxy, this.e235)), 
            /* e1234 */
            -(this.e423 * other.e1) - (this.e431 * other.e2) - (this.e412 * other.e3) - (this.e321 * other.e4)
        );
        Sphere right_anti_dual = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        return Circle(
            /* e423, e431, e412 */
            (float3(wedge.e1234) * right_anti_dual.group0.xyz) - (float3(right_anti_dual.e1234) * wedge.group0.xyz), 
            /* e415, e425, e435, e321 */
            (right_anti_dual.group0.yzxw * float4(wedge.group0.zxy, wedge.e1234)) - float4((right_anti_dual.group0.zxy * wedge.group0.yzx), right_anti_dual.e1234 * wedge.e3215), 
            /* e235, e315, e125 */
            (float3(right_anti_dual.e3215) * wedge.group0.xyz) - (float3(wedge.e3215) * right_anti_dual.group0.xyz)
        );
    }
}
public extension CircleRotor {
    public CircleRotor anti_reject_orthogonally_from(Scalar other) {
        CircleRotor wedge = CircleRotor(
            /* e423, e431, e412 */
            float3(other.scalar) * this.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.scalar) * this.group1, 
            /* e235, e315, e125, e12345 */
            float4(other.scalar) * this.group2
        );
        AntiScalar right_anti_dual = AntiScalar(
            /* e12345 */
            other.scalar
        );
        return CircleRotor(
            /* e423, e431, e412 */
            float3(right_anti_dual.e12345) * wedge.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(right_anti_dual.e12345) * wedge.group1, 
            /* e235, e315, e125, e12345 */
            float4(right_anti_dual.e12345) * wedge.group2
        );
    }
}
public extension CircleRotor {
    public AntiDipoleInversion anti_reject_orthogonally_from(VersorEven other) {
        Sphere wedge = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(-(this.e425 * other.e3) - (this.e235 * other.e4), -(this.e435 * other.e1) - (this.e315 * other.e4), -(this.e415 * other.e2) - (this.e125 * other.e4), (this.e315 * other.e2) + (this.e125 * other.e3)) + (float4(other.e5) * float4(this.group0.xyz, this.e321)) + (other.group3.yzxx * float4(this.group1.zxy, this.e235)), 
            /* e1234 */
            -(this.e423 * other.e1) - (this.e431 * other.e2) - (this.e412 * other.e3) - (this.e321 * other.e4)
        );
        VersorOdd right_anti_dual = VersorOdd(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            (float3(wedge.e1234) * right_anti_dual.group3.xyz) - (float3(right_anti_dual.e1234) * wedge.group0.xyz), 
            /* e415, e425, e435, e321 */
            float4((wedge.group0.zxy * right_anti_dual.group3.yzx), wedge.e1234 * right_anti_dual.e3215) - (wedge.group0.yzxw * float4(right_anti_dual.group3.zxy, right_anti_dual.e1234)), 
            /* e235, e315, e125, e4 */
            float4(wedge.e3215 * right_anti_dual.e4235 * -1.0, wedge.e3215 * right_anti_dual.e4315 * -1.0, wedge.e3215 * right_anti_dual.e4125 * -1.0, (wedge.e4315 * right_anti_dual.e42) + (wedge.e4125 * right_anti_dual.e43) + (wedge.e1234 * right_anti_dual.e45)) + (wedge.group0.xyzx * float4(right_anti_dual.group3.www, right_anti_dual.e41)), 
            /* e1, e2, e3, e5 */
            float4((wedge.e4315 * right_anti_dual.e12) + (wedge.e1234 * right_anti_dual.e15), (wedge.e4125 * right_anti_dual.e23) + (wedge.e1234 * right_anti_dual.e25), (wedge.e4235 * right_anti_dual.e31) + (wedge.e1234 * right_anti_dual.e35), -(wedge.e4125 * right_anti_dual.e35) - (wedge.e3215 * right_anti_dual.e45)) - (wedge.group0.zxyx * float4(right_anti_dual.group1.yzx, right_anti_dual.e15)) - (wedge.group0.wwwy * float4(right_anti_dual.group0.xyz, right_anti_dual.e25))
        );
    }
}
public extension CircleRotor {
    public VersorEven anti_reject_orthogonally_from(VersorOdd other) {
        CircleRotor wedge = CircleRotor(
            /* e423, e431, e412 */
            float3(other.scalar) * this.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.scalar) * this.group1, 
            /* e235, e315, e125, e12345 */
            float4((float3(other.scalar) * this.group2.xyz), (this.e12345 * other.scalar) - (this.e423 * other.e15) - (this.e431 * other.e25) - (this.e412 * other.e35) - (this.e415 * other.e23) - (this.e425 * other.e31) - (this.e435 * other.e12) - (this.e321 * other.e45) - (this.e235 * other.e41) - (this.e315 * other.e42) - (this.e125 * other.e43))
        );
        VersorEven right_anti_dual = VersorEven(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(((float3(wedge.e12345) * right_anti_dual.group0.xyz) + (float3(right_anti_dual.e12345) * wedge.group0.xyz)), wedge.e12345 * right_anti_dual.e12345), 
            /* e415, e425, e435, e321 */
            (float4(wedge.e12345) * right_anti_dual.group1) + (float4(right_anti_dual.e12345) * wedge.group1), 
            /* e235, e315, e125, e5 */
            float4(wedge.e12345 * right_anti_dual.e235, wedge.e12345 * right_anti_dual.e315, wedge.e12345 * right_anti_dual.e125, -(wedge.e415 * right_anti_dual.e235) - (wedge.e425 * right_anti_dual.e315) - (wedge.e435 * right_anti_dual.e125) - (wedge.e235 * right_anti_dual.e415) - (wedge.e315 * right_anti_dual.e425) - (wedge.e125 * right_anti_dual.e435)) + (wedge.group2 * float4(right_anti_dual.group0.www, right_anti_dual.e5)), 
            /* e1, e2, e3, e4 */
            float4((wedge.e415 * right_anti_dual.e321) + (wedge.e321 * right_anti_dual.e415) + (wedge.e315 * right_anti_dual.e412) + (wedge.e12345 * right_anti_dual.e1), (wedge.e425 * right_anti_dual.e321) + (wedge.e321 * right_anti_dual.e425) + (wedge.e125 * right_anti_dual.e423) + (wedge.e12345 * right_anti_dual.e2), (wedge.e435 * right_anti_dual.e321) + (wedge.e321 * right_anti_dual.e435) + (wedge.e235 * right_anti_dual.e431) + (wedge.e12345 * right_anti_dual.e3), -(wedge.e412 * right_anti_dual.e435) - (wedge.e415 * right_anti_dual.e423) - (wedge.e425 * right_anti_dual.e431) - (wedge.e435 * right_anti_dual.e412)) + float4((wedge.group0.xyz.zxy * right_anti_dual.group2.yzx), wedge.e12345 * right_anti_dual.e4) - float4((wedge.group0.xyz.yzx * right_anti_dual.group2.zxy), wedge.e423 * right_anti_dual.e415) - float4((wedge.group2.zxy * right_anti_dual.group0.yzx), wedge.e431 * right_anti_dual.e425)
        );
    }
}
public extension Dipole {
    // Fancy infix trick (first half)
    public AntiRejectOrthogonallyFromInfixPartial<Dipole> operator /(AntiRejectOrthogonallyFromInfix rhs) {
        return AntiRejectOrthogonallyFromInfixPartial<Dipole>(this);
    }
}
public extension AntiRejectOrthogonallyFromInfixPartial<Dipole> {
    // Fancy infix trick (second half)
    public VersorOdd operator /(AntiCircleRotor rhs) {
        return this.a.anti_reject_orthogonally_from(rhs);
    }
}
public extension Dipole {
    public VersorOdd anti_reject_orthogonally_from(AntiCircleRotor other) {
        DipoleInversion wedge = DipoleInversion(
            /* e41, e42, e43 */
            float3(other.scalar) * this.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(other.scalar) * this.group1, 
            /* e15, e25, e35, e1234 */
            float4((float3(other.scalar) * this.group2.xyz), -(other.e41 * this.e23) - (other.e42 * this.e31) - (other.e43 * this.e12) - (other.e23 * this.e41) - (other.e31 * this.e42) - (other.e12 * this.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e42 * this.e35) + (other.e23 * this.e45) + (other.e45 * this.e23) + (other.e35 * this.e42), (other.e43 * this.e15) + (other.e31 * this.e45) + (other.e45 * this.e31) + (other.e15 * this.e43), (other.e41 * this.e25) + (other.e12 * this.e45) + (other.e45 * this.e12) + (other.e25 * this.e41), -(other.e12 * this.e35) - (other.e15 * this.e23) - (other.e25 * this.e31) - (other.e35 * this.e12)) - float4((other.group0.xyz.zxy * this.group2.xyz.yzx), other.e23 * this.e15) - float4((this.group0.xyz.zxy * other.group2.yzx), other.e31 * this.e25)
        );
        CircleRotor right_anti_dual = CircleRotor(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4((right_anti_dual.e412 * wedge.e4315) + (right_anti_dual.e415 * wedge.e1234) + (right_anti_dual.e12345 * wedge.e41), (right_anti_dual.e423 * wedge.e4125) + (right_anti_dual.e425 * wedge.e1234) + (right_anti_dual.e12345 * wedge.e42), (right_anti_dual.e431 * wedge.e4235) + (right_anti_dual.e435 * wedge.e1234) + (right_anti_dual.e12345 * wedge.e43), -(right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e321 * wedge.e45) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43)) - float4((right_anti_dual.group0.xyz.yzx * wedge.group3.zxy), right_anti_dual.e423 * wedge.e15), 
            /* e23, e31, e12, e45 */
            float4((right_anti_dual.e235 * wedge.e1234) + (right_anti_dual.e12345 * wedge.e23), (right_anti_dual.e315 * wedge.e1234) + (right_anti_dual.e12345 * wedge.e31), (right_anti_dual.e125 * wedge.e1234) + (right_anti_dual.e12345 * wedge.e12), -(right_anti_dual.e425 * wedge.e4315) - (right_anti_dual.e435 * wedge.e4125)) + float4((right_anti_dual.group0.xyz * wedge.group3.www), right_anti_dual.e12345 * wedge.e45) - (right_anti_dual.group1.wwwx * wedge.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_anti_dual.e12345) * wedge.group2.xyz) + (float3(wedge.e3215) * right_anti_dual.group1.xyz) + (right_anti_dual.group2.yzx * wedge.group3.zxy) - (right_anti_dual.group2.zxy * wedge.group3.yzx)), right_anti_dual.e12345 * wedge.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_anti_dual.e12345) * wedge.group3
        );
    }
}
public extension Dipole {
    public VersorOdd anti_reject_orthogonally_from(AntiDipoleInversion other) {
        CircleRotor wedge = CircleRotor(
            /* e423, e431, e412 */
            (float3(other.e4) * this.group1.xyz) + (this.group0.xyz.yzx * other.group3.zxy) - (this.group0.xyz.zxy * other.group3.yzx), 
            /* e415, e425, e435, e321 */
            float4((other.e4 * this.e15) + (other.e5 * this.e41), (other.e4 * this.e25) + (other.e5 * this.e42), (other.e4 * this.e35) + (other.e5 * this.e43), -(other.e2 * this.e31) - (other.e3 * this.e12)) - (other.group3.xyzx * this.group1.wwwx), 
            /* e235, e315, e125, e12345 */
            float4((other.e2 * this.e35) + (other.e5 * this.e23), (other.e3 * this.e15) + (other.e5 * this.e31), (other.e1 * this.e25) + (other.e5 * this.e12), -(other.e431 * this.e25) - (other.e412 * this.e35) - (other.e415 * this.e23) - (other.e425 * this.e31) - (other.e435 * this.e12) - (other.e321 * this.e45) - (other.e235 * this.e41) - (other.e315 * this.e42) - (other.e125 * this.e43)) - float4((this.group2.xyz.yzx * other.group3.zxy), other.e423 * this.e15)
        );
        DipoleInversion right_anti_dual = DipoleInversion(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4((wedge.e412 * right_anti_dual.e4315) + (wedge.e415 * right_anti_dual.e1234) + (wedge.e12345 * right_anti_dual.e41), (wedge.e423 * right_anti_dual.e4125) + (wedge.e425 * right_anti_dual.e1234) + (wedge.e12345 * right_anti_dual.e42), (wedge.e431 * right_anti_dual.e4235) + (wedge.e435 * right_anti_dual.e1234) + (wedge.e12345 * right_anti_dual.e43), -(wedge.e431 * right_anti_dual.e25) - (wedge.e412 * right_anti_dual.e35) - (wedge.e415 * right_anti_dual.e23) - (wedge.e425 * right_anti_dual.e31) - (wedge.e435 * right_anti_dual.e12) - (wedge.e321 * right_anti_dual.e45) - (wedge.e235 * right_anti_dual.e41) - (wedge.e315 * right_anti_dual.e42) - (wedge.e125 * right_anti_dual.e43)) - float4((wedge.group0.xyz.yzx * right_anti_dual.group3.zxy), wedge.e423 * right_anti_dual.e15), 
            /* e23, e31, e12, e45 */
            float4((wedge.e235 * right_anti_dual.e1234) + (wedge.e12345 * right_anti_dual.e23), (wedge.e315 * right_anti_dual.e1234) + (wedge.e12345 * right_anti_dual.e31), (wedge.e125 * right_anti_dual.e1234) + (wedge.e12345 * right_anti_dual.e12), -(wedge.e425 * right_anti_dual.e4315) - (wedge.e435 * right_anti_dual.e4125)) + float4((wedge.group0.xyz * right_anti_dual.group3.www), wedge.e12345 * right_anti_dual.e45) - (wedge.group1.wwwx * right_anti_dual.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(wedge.e12345) * right_anti_dual.group2.xyz) + (float3(right_anti_dual.e3215) * wedge.group1.xyz) + (wedge.group2.yzx * right_anti_dual.group3.zxy) - (wedge.group2.zxy * right_anti_dual.group3.yzx)), wedge.e12345 * right_anti_dual.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_anti_dual.group3
        );
    }
}
public extension Dipole {
    public Dipole anti_reject_orthogonally_from(AntiDualNum other) {
        Dipole wedge = Dipole(
            /* e41, e42, e43 */
            float3(other.scalar) * this.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(other.scalar) * this.group1, 
            /* e15, e25, e35 */
            float3(other.scalar) * this.group2.xyz
        );
        DualNum right_anti_dual = DualNum(
            /* e5, e12345 */
            other.group0.xy
        );
        return Dipole(
            /* e41, e42, e43 */
            float3(right_anti_dual.e12345) * wedge.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(right_anti_dual.e12345) * wedge.group1, 
            /* e15, e25, e35 */
            float3(right_anti_dual.e12345) * wedge.group2.xyz
        );
    }
}
public extension Dipole {
    public FlatPoint anti_reject_orthogonally_from(AntiFlatPoint other) {
        return FlatPoint(
            /* e15, e25, e35, e45 */
            float4(-(other.e235 * this.e41) - (other.e315 * this.e42) - (other.e125 * this.e43) - (other.e321 * this.e45)) * float4(other.group0.xyz, other.e321 * -1.0)
        );
    }
}
public extension Dipole {
    public VersorOdd anti_reject_orthogonally_from(AntiFlector other) {
        CircleRotor wedge = CircleRotor(
            /* e423, e431, e412 */
            (this.group0.xyz.yzx * other.group1.zxy) - (this.group0.xyz.zxy * other.group1.yzx), 
            /* e415, e425, e435, e321 */
            float4(other.e5 * this.e41, other.e5 * this.e42, other.e5 * this.e43, -(other.e2 * this.e31) - (other.e3 * this.e12)) - (other.group1.xyzx * this.group1.wwwx), 
            /* e235, e315, e125, e12345 */
            float4((other.e2 * this.e35) + (other.e5 * this.e23), (other.e3 * this.e15) + (other.e5 * this.e31), (other.e1 * this.e25) + (other.e5 * this.e12), -(other.e315 * this.e42) - (other.e125 * this.e43) - (other.e321 * this.e45)) - float4((this.group2.xyz.yzx * other.group1.zxy), other.e235 * this.e41)
        );
        Flector right_anti_dual = Flector(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(wedge.e412 * right_anti_dual.e4315, wedge.e423 * right_anti_dual.e4125, wedge.e431 * right_anti_dual.e4235, -(wedge.e431 * right_anti_dual.e25) - (wedge.e412 * right_anti_dual.e35) - (wedge.e321 * right_anti_dual.e45)) - float4((wedge.group0.xyz.yzx * right_anti_dual.group1.zxy), wedge.e423 * right_anti_dual.e15), 
            /* e23, e31, e12, e45 */
            float4(float3(0.0), -(wedge.e425 * right_anti_dual.e4315) - (wedge.e435 * right_anti_dual.e4125)) + float4((wedge.group0.xyz * right_anti_dual.group1.www), wedge.e12345 * right_anti_dual.e45) - (wedge.group1.wwwx * right_anti_dual.group1.xyzx), 
            /* e15, e25, e35, e1234 */
            float4((float3(wedge.e12345) * right_anti_dual.group0.xyz), 0.0) + float4((float3(right_anti_dual.e3215) * wedge.group1.xyz), 0.0) + float4((wedge.group2.yzx * right_anti_dual.group1.zxy), 0.0) - float4((wedge.group2.zxy * right_anti_dual.group1.yzx), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_anti_dual.group1
        );
    }
}
public extension Dipole {
    public Dipole anti_reject_orthogonally_from(AntiLine other) {
        Sphere wedge = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4((other.e23 * this.e45) + (other.e35 * this.e42), (other.e31 * this.e45) + (other.e15 * this.e43), (other.e12 * this.e45) + (other.e25 * this.e41), -(other.e31 * this.e25) - (other.e12 * this.e35) - (other.e15 * this.e23) - (other.e25 * this.e31) - (other.e35 * this.e12)) - float4((other.group1.xyz.yzx * this.group0.xyz.zxy), other.e23 * this.e15), 
            /* e1234 */
            -(other.e23 * this.e41) - (other.e31 * this.e42) - (other.e12 * this.e43)
        );
        Line right_anti_dual = Line(
            /* e415, e425, e435 */
            other.group0.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group1.xyz * float3(-1.0)
        );
        return Dipole(
            /* e41, e42, e43 */
            float3(wedge.e1234) * right_anti_dual.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4((float3(wedge.e1234) * right_anti_dual.group1.xyz), -(right_anti_dual.e415 * wedge.e4235) - (right_anti_dual.e425 * wedge.e4315) - (right_anti_dual.e435 * wedge.e4125)), 
            /* e15, e25, e35 */
            (float3(wedge.e3215) * right_anti_dual.group0.xyz) + (right_anti_dual.group1.xyz.yzx * wedge.group0.zxy) - (right_anti_dual.group1.xyz.zxy * wedge.group0.yzx)
        );
    }
}
public extension Dipole {
    public VersorOdd anti_reject_orthogonally_from(AntiMotor other) {
        DipoleInversion wedge = DipoleInversion(
            /* e41, e42, e43 */
            float3(other.scalar) * this.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(other.scalar) * this.group1, 
            /* e15, e25, e35, e1234 */
            float4((float3(other.scalar) * this.group2.xyz), -(other.e23 * this.e41) - (other.e31 * this.e42) - (other.e12 * this.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e23 * this.e45) + (other.e35 * this.e42), (other.e31 * this.e45) + (other.e15 * this.e43), (other.e12 * this.e45) + (other.e25 * this.e41), -(other.e31 * this.e25) - (other.e12 * this.e35) - (other.e15 * this.e23) - (other.e25 * this.e31) - (other.e35 * this.e12)) - float4((this.group0.xyz.zxy * other.group1.yzx), other.e23 * this.e15)
        );
        Motor right_anti_dual = Motor(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(wedge.e1234 * right_anti_dual.e415, wedge.e1234 * right_anti_dual.e425, wedge.e1234 * right_anti_dual.e435, -(wedge.e41 * right_anti_dual.e235) - (wedge.e42 * right_anti_dual.e315) - (wedge.e43 * right_anti_dual.e125) - (wedge.e23 * right_anti_dual.e415) - (wedge.e31 * right_anti_dual.e425) - (wedge.e12 * right_anti_dual.e435)) + float4((wedge.group0.xyz * right_anti_dual.group0.www), wedge.e1234 * right_anti_dual.e5), 
            /* e23, e31, e12, e45 */
            float4(wedge.e1234 * right_anti_dual.e235, wedge.e1234 * right_anti_dual.e315, wedge.e1234 * right_anti_dual.e125, -(wedge.e4235 * right_anti_dual.e415) - (wedge.e4315 * right_anti_dual.e425) - (wedge.e4125 * right_anti_dual.e435)) + (float4(right_anti_dual.e12345) * wedge.group1), 
            /* e15, e25, e35, e1234 */
            float4(((float3(wedge.e3215) * right_anti_dual.group0.xyz) + (float3(right_anti_dual.e12345) * wedge.group2.xyz) + (wedge.group3.zxy * right_anti_dual.group1.yzx) - (wedge.group3.yzx * right_anti_dual.group1.zxy)), wedge.e1234 * right_anti_dual.e12345), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_anti_dual.e12345) * wedge.group3
        );
    }
}
public extension Dipole {
    public Dipole anti_reject_orthogonally_from(AntiPlane other) {
        Circle wedge = Circle(
            /* e423, e431, e412 */
            (this.group0.xyz.yzx * other.group0.zxy) - (this.group0.xyz.zxy * other.group0.yzx), 
            /* e415, e425, e435, e321 */
            float4(other.e5 * this.e41, other.e5 * this.e42, other.e5 * this.e43, -(other.e2 * this.e31) - (other.e3 * this.e12)) - (other.group0.xyzx * this.group1.wwwx), 
            /* e235, e315, e125 */
            (float3(other.e5) * this.group1.xyz) + (this.group2.xyz.zxy * other.group0.yzx) - (this.group2.xyz.yzx * other.group0.zxy)
        );
        Plane right_anti_dual = Plane(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return Dipole(
            /* e41, e42, e43 */
            (wedge.group0.xyz.zxy * right_anti_dual.group0.yzx) - (wedge.group0.xyz.yzx * right_anti_dual.group0.zxy), 
            /* e23, e31, e12, e45 */
            float4(wedge.e423 * right_anti_dual.e3215, wedge.e431 * right_anti_dual.e3215, wedge.e412 * right_anti_dual.e3215, -(wedge.e425 * right_anti_dual.e4315) - (wedge.e435 * right_anti_dual.e4125)) - (wedge.group1.wwwx * right_anti_dual.group0.xyzx), 
            /* e15, e25, e35 */
            (float3(right_anti_dual.e3215) * wedge.group1.xyz) + (wedge.group2.xyz.yzx * right_anti_dual.group0.zxy) - (wedge.group2.xyz.zxy * right_anti_dual.group0.yzx)
        );
    }
}
public extension Dipole {
    public Dipole anti_reject_orthogonally_from(Circle other) {
        AntiScalar wedge = AntiScalar(
            /* e12345 */
            -(other.e423 * this.e15) - (other.e431 * this.e25) - (other.e412 * this.e35) - (other.e415 * this.e23) - (other.e425 * this.e31) - (other.e435 * this.e12) - (other.e321 * this.e45) - (other.e235 * this.e41) - (other.e315 * this.e42) - (other.e125 * this.e43)
        );
        Dipole right_anti_dual = Dipole(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35 */
            other.group2.xyz
        );
        return Dipole(
            /* e41, e42, e43 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(wedge.e12345) * right_anti_dual.group1, 
            /* e15, e25, e35 */
            float3(wedge.e12345) * right_anti_dual.group2.xyz
        );
    }
}
public extension Dipole {
    public AntiCircleRotor anti_reject_orthogonally_from(CircleRotor other) {
        AntiScalar wedge = AntiScalar(
            /* e12345 */
            -(other.e423 * this.e15) - (other.e431 * this.e25) - (other.e412 * this.e35) - (other.e415 * this.e23) - (other.e425 * this.e31) - (other.e435 * this.e12) - (other.e321 * this.e45) - (other.e235 * this.e41) - (other.e315 * this.e42) - (other.e125 * this.e43)
        );
        AntiCircleRotor right_anti_dual = AntiCircleRotor(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiCircleRotor(
            /* e41, e42, e43 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(wedge.e12345) * right_anti_dual.group1, 
            /* e15, e25, e35, scalar */
            float4(wedge.e12345) * right_anti_dual.group2
        );
    }
}
public extension Dipole {
    public Dipole anti_reject_orthogonally_from(Dipole other) {
        Sphere wedge = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4((other.e42 * this.e35) + (other.e23 * this.e45) + (other.e45 * this.e23) + (other.e35 * this.e42), (other.e43 * this.e15) + (other.e31 * this.e45) + (other.e45 * this.e31) + (other.e15 * this.e43), (other.e41 * this.e25) + (other.e12 * this.e45) + (other.e45 * this.e12) + (other.e25 * this.e41), -(other.e23 * this.e15) - (other.e31 * this.e25) - (other.e12 * this.e35) - (other.e35 * this.e12)) - float4((other.group0.xyz.zxy * this.group2.xyz.yzx), other.e15 * this.e23) - float4((other.group2.xyz.yzx * this.group0.xyz.zxy), other.e25 * this.e31), 
            /* e1234 */
            -(other.e41 * this.e23) - (other.e42 * this.e31) - (other.e43 * this.e12) - (other.e23 * this.e41) - (other.e31 * this.e42) - (other.e12 * this.e43)
        );
        Circle right_anti_dual = Circle(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125 */
            other.group2.xyz * float3(-1.0)
        );
        return Dipole(
            /* e41, e42, e43 */
            (float3(wedge.e1234) * right_anti_dual.group1.xyz) + (right_anti_dual.group0.xyz.zxy * wedge.group0.yzx) - (right_anti_dual.group0.xyz.yzx * wedge.group0.zxy), 
            /* e23, e31, e12, e45 */
            float4((right_anti_dual.e423 * wedge.e3215) + (right_anti_dual.e235 * wedge.e1234), (right_anti_dual.e431 * wedge.e3215) + (right_anti_dual.e315 * wedge.e1234), (right_anti_dual.e412 * wedge.e3215) + (right_anti_dual.e125 * wedge.e1234), -(right_anti_dual.e425 * wedge.e4315) - (right_anti_dual.e435 * wedge.e4125)) - (right_anti_dual.group1.wwwx * wedge.group0.xyzx), 
            /* e15, e25, e35 */
            (float3(wedge.e3215) * right_anti_dual.group1.xyz) + (right_anti_dual.group2.xyz.yzx * wedge.group0.zxy) - (right_anti_dual.group2.xyz.zxy * wedge.group0.yzx)
        );
    }
}
public extension Dipole {
    public AntiCircleRotor anti_reject_orthogonally_from(DipoleInversion other) {
        Sphere wedge = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4((this.e42 * other.e35) + (this.e23 * other.e45) + (this.e45 * other.e23) + (this.e35 * other.e42), (this.e43 * other.e15) + (this.e31 * other.e45) + (this.e45 * other.e31) + (this.e15 * other.e43), (this.e41 * other.e25) + (this.e12 * other.e45) + (this.e45 * other.e12) + (this.e25 * other.e41), -(this.e23 * other.e15) - (this.e31 * other.e25) - (this.e12 * other.e35) - (this.e35 * other.e12)) - float4((this.group0.xyz.zxy * other.group2.yzx), this.e15 * other.e23) - float4((this.group2.xyz.yzx * other.group0.xyz.zxy), this.e25 * other.e31), 
            /* e1234 */
            -(this.e41 * other.e23) - (this.e42 * other.e31) - (this.e43 * other.e12) - (this.e23 * other.e41) - (this.e31 * other.e42) - (this.e12 * other.e43)
        );
        AntiDipoleInversion right_anti_dual = AntiDipoleInversion(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiCircleRotor(
            /* e41, e42, e43 */
            (float3(wedge.e1234) * right_anti_dual.group1.xyz) + (right_anti_dual.group0.xyz.zxy * wedge.group0.yzx) - (right_anti_dual.group0.xyz.yzx * wedge.group0.zxy), 
            /* e23, e31, e12, e45 */
            float4((right_anti_dual.e423 * wedge.e3215) + (right_anti_dual.e235 * wedge.e1234), (right_anti_dual.e431 * wedge.e3215) + (right_anti_dual.e315 * wedge.e1234), (right_anti_dual.e412 * wedge.e3215) + (right_anti_dual.e125 * wedge.e1234), -(right_anti_dual.e425 * wedge.e4315) - (right_anti_dual.e435 * wedge.e4125)) - (right_anti_dual.group1.wwwx * wedge.group0.xyzx), 
            /* e15, e25, e35, scalar */
            float4(right_anti_dual.e125 * wedge.e4315 * -1.0, right_anti_dual.e235 * wedge.e4125 * -1.0, right_anti_dual.e315 * wedge.e4235 * -1.0, (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) + (right_anti_dual.e5 * wedge.e1234)) + (float4(wedge.e3215) * float4(right_anti_dual.group1.xyz, right_anti_dual.e4)) + (wedge.group0.zxyx * float4(right_anti_dual.group2.yzx, right_anti_dual.e1))
        );
    }
}
public extension Dipole {
    public FlatPoint anti_reject_orthogonally_from(DualNum other) {
        AntiDualNum right_anti_dual = AntiDualNum(
            /* e3215, scalar */
            other.group0.xy * float2(-1.0)
        );
        return FlatPoint(
            /* e15, e25, e35, e45 */
            float4(right_anti_dual.group0.xy.xx, right_anti_dual.e3215, 0.0) * float4(float3(1.0), 0.0) * float4(float3(this.e41 * other.e5, this.e42 * other.e5, this.e43 * other.e5), 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
    }
}
public extension Dipole {
    public AntiLine anti_reject_orthogonally_from(FlatPoint other) {
        Plane wedge = Plane(
            /* e4235, e4315, e4125, e3215 */
            float4((this.e42 * other.e35) + (this.e23 * other.e45), (this.e43 * other.e15) + (this.e31 * other.e45), (this.e41 * other.e25) + (this.e12 * other.e45), -(this.e31 * other.e25) - (this.e12 * other.e35)) - (other.group0.yzxx * float4(this.group0.xyz.zxy, this.e23))
        );
        AntiFlatPoint right_anti_dual = AntiFlatPoint(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiLine(
            /* e23, e31, e12 */
            float3(right_anti_dual.e321) * wedge.group0.xyz * float3(-1.0), 
            /* e15, e25, e35 */
            (right_anti_dual.group0.yzx * wedge.group0.zxy) - (right_anti_dual.group0.zxy * wedge.group0.yzx)
        );
    }
}
public extension Dipole {
    public AntiMotor anti_reject_orthogonally_from(Flector other) {
        Plane wedge = Plane(
            /* e4235, e4315, e4125, e3215 */
            float4((this.e42 * other.e35) + (this.e23 * other.e45), (this.e43 * other.e15) + (this.e31 * other.e45), (this.e41 * other.e25) + (this.e12 * other.e45), -(this.e31 * other.e25) - (this.e12 * other.e35)) - (other.group0.yzxx * float4(this.group0.xyz.zxy, this.e23))
        );
        AntiFlector right_anti_dual = AntiFlector(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4((right_anti_dual.group0.www * wedge.group0.xyz * float3(-1.0)), (right_anti_dual.e1 * wedge.e4235) + (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125)), 
            /* e15, e25, e35, e3215 */
            float4(((right_anti_dual.group0.yzx * wedge.group0.zxy) - (right_anti_dual.group0.zxy * wedge.group0.yzx)), 0.0)
        );
    }
}
public extension Dipole {
    public AntiLine anti_reject_orthogonally_from(Line other) {
        AntiScalar wedge = AntiScalar(
            /* e12345 */
            -(this.e41 * other.e235) - (this.e42 * other.e315) - (this.e43 * other.e125) - (this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435)
        );
        AntiLine right_anti_dual = AntiLine(
            /* e23, e31, e12 */
            other.group0.xyz, 
            /* e15, e25, e35 */
            other.group1.xyz
        );
        return AntiLine(
            /* e23, e31, e12 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e15, e25, e35 */
            float3(wedge.e12345) * right_anti_dual.group1.xyz
        );
    }
}
public extension Dipole {
    public AntiMotor anti_reject_orthogonally_from(Motor other) {
        Motor wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4((float3(other.e5) * this.group0.xyz), -(this.e41 * other.e235) - (this.e42 * other.e315) - (this.e43 * other.e125) - (this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435)), 
            /* e235, e315, e125, e5 */
            float4(float3(1.0), 0.0) * float4(other.group1.www, 0.0) * float4(this.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        AntiMotor right_anti_dual = AntiMotor(
            /* e23, e31, e12, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4((float3(wedge.e12345) * right_anti_dual.group0.xyz), (right_anti_dual.scalar * wedge.e12345) - (right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435)), 
            /* e15, e25, e35, e3215 */
            float4(((float3(right_anti_dual.e3215) * wedge.group0.xyz) + (float3(wedge.e12345) * right_anti_dual.group1.xyz)), right_anti_dual.e3215 * wedge.e12345)
        );
    }
}
public extension Dipole {
    public MultiVector anti_reject_orthogonally_from(MultiVector other) {
        MultiVector wedge = MultiVector(
            /* scalar, e12345 */
            float2(0.0, -(this.e41 * other.e235) - (this.e42 * other.e315) - (this.e43 * other.e125) - (this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435) - (this.e45 * other.e321) - (this.e15 * other.e423) - (this.e25 * other.e431) - (this.e35 * other.e412)), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5 */
            0.0, 
            /* e15, e25, e35, e45 */
            float4(other.scalar) * float4(this.group2.xyz, this.e45), 
            /* e41, e42, e43 */
            float3(other.scalar) * this.group0.xyz, 
            /* e23, e31, e12 */
            float3(other.scalar) * this.group1.xyz, 
            /* e415, e425, e435, e321 */
            float4((this.e41 * other.e5) + (this.e15 * other.e4), (this.e42 * other.e5) + (this.e25 * other.e4), (this.e43 * other.e5) + (this.e35 * other.e4), -(this.e31 * other.e2) - (this.e12 * other.e3)) - (this.group1.wwwx * other.group1.xyzx), 
            /* e423, e431, e412 */
            (float3(other.e4) * this.group1.xyz) + (this.group0.xyz.yzx * other.group1.zxy) - (this.group0.xyz.zxy * other.group1.yzx), 
            /* e235, e315, e125 */
            (float3(other.e5) * this.group1.xyz) + (this.group2.xyz.zxy * other.group1.yzx) - (this.group2.xyz.yzx * other.group1.zxy), 
            /* e4235, e4315, e4125, e3215 */
            float4((this.e42 * other.e35) + (this.e23 * other.e45) + (this.e45 * other.e23) + (this.e35 * other.e42), (this.e43 * other.e15) + (this.e31 * other.e45) + (this.e45 * other.e31) + (this.e15 * other.e43), (this.e41 * other.e25) + (this.e12 * other.e45) + (this.e45 * other.e12) + (this.e25 * other.e41), -(this.e23 * other.e15) - (this.e31 * other.e25) - (this.e12 * other.e35) - (this.e35 * other.e12)) - float4((this.group0.xyz.zxy * other.group3.yzx), this.e15 * other.e23) - float4((this.group2.xyz.yzx * other.group4.xyz.zxy), this.e25 * other.e31), 
            /* e1234 */
            -(this.e41 * other.e23) - (this.e42 * other.e31) - (this.e43 * other.e12) - (this.e23 * other.e41) - (this.e31 * other.e42) - (this.e12 * other.e43)
        );
        MultiVector right_anti_dual = MultiVector(
            /* scalar, e12345 */
            other.group0.xy.yx * float2(-1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215, 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43 */
            other.group7.xyz, 
            /* e23, e31, e12 */
            other.group6.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412 */
            other.group4.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group3.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2((right_anti_dual.scalar * wedge.e12345) + (right_anti_dual.e12345 * wedge.scalar) + (right_anti_dual.e1 * wedge.e4235) + (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) + (right_anti_dual.e4 * wedge.e3215) + (right_anti_dual.e5 * wedge.e1234) + (right_anti_dual.e4235 * wedge.e1) + (right_anti_dual.e4315 * wedge.e2) + (right_anti_dual.e4125 * wedge.e3) + (right_anti_dual.e3215 * wedge.e4) + (right_anti_dual.e1234 * wedge.e5) - (right_anti_dual.e15 * wedge.e423) - (right_anti_dual.e25 * wedge.e431) - (right_anti_dual.e35 * wedge.e412) - (right_anti_dual.e45 * wedge.e321) - (right_anti_dual.e41 * wedge.e235) - (right_anti_dual.e42 * wedge.e315) - (right_anti_dual.e43 * wedge.e125) - (right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e321 * wedge.e45) - (right_anti_dual.e423 * wedge.e15) - (right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43), right_anti_dual.e12345 * wedge.e12345), 
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e15 * wedge.e1234) + (right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e4125 * wedge.e31), (right_anti_dual.e25 * wedge.e1234) + (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e4235 * wedge.e12), (right_anti_dual.e35 * wedge.e1234) + (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e4315 * wedge.e23), -(right_anti_dual.e415 * wedge.e423) - (right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412) - (right_anti_dual.e1234 * wedge.e45)) + (float4(right_anti_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_anti_dual.group1) + (wedge.group9.yzxx * float4(right_anti_dual.group5.xyz.zxy, right_anti_dual.e41)) + float4((wedge.group4.xyz * right_anti_dual.group9.www), right_anti_dual.e45 * wedge.e1234) + float4((right_anti_dual.group7.xyz.zxy * wedge.group8.xyz.yzx), right_anti_dual.e42 * wedge.e4315) + float4((right_anti_dual.group8.xyz.yzx * wedge.group7.xyz.zxy), right_anti_dual.e43 * wedge.e4125) - (right_anti_dual.group9.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((float3(right_anti_dual.e1234) * wedge.group3.xyz), right_anti_dual.e4125 * wedge.e43) - float4((right_anti_dual.group4.xyz * wedge.group9.www), right_anti_dual.e423 * wedge.e415) - float4((right_anti_dual.group5.xyz.yzx * wedge.group9.zxy), right_anti_dual.e431 * wedge.e425) - float4((right_anti_dual.group7.xyz.yzx * wedge.group8.xyz.zxy), right_anti_dual.e412 * wedge.e435) - float4((right_anti_dual.group8.xyz.zxy * wedge.group7.xyz.yzx), right_anti_dual.e4235 * wedge.e41), 
            /* e5 */
            (right_anti_dual.e12345 * wedge.e5) + (right_anti_dual.e5 * wedge.e12345) + (right_anti_dual.e4235 * wedge.e15) + (right_anti_dual.e4315 * wedge.e25) + (right_anti_dual.e4125 * wedge.e35) + (right_anti_dual.e3215 * wedge.e45) - (right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125) - (right_anti_dual.e45 * wedge.e3215) - (right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435), 
            /* e15, e25, e35, e45 */
            float4((right_anti_dual.e415 * wedge.e3215) + (right_anti_dual.e315 * wedge.e4125) + (right_anti_dual.e4125 * wedge.e315) + (right_anti_dual.e3215 * wedge.e415), (right_anti_dual.e425 * wedge.e3215) + (right_anti_dual.e125 * wedge.e4235) + (right_anti_dual.e4235 * wedge.e125) + (right_anti_dual.e3215 * wedge.e425), (right_anti_dual.e435 * wedge.e3215) + (right_anti_dual.e235 * wedge.e4315) + (right_anti_dual.e4315 * wedge.e235) + (right_anti_dual.e3215 * wedge.e435), -(right_anti_dual.e435 * wedge.e4125) - (right_anti_dual.e4235 * wedge.e415) - (right_anti_dual.e4315 * wedge.e425) - (right_anti_dual.e4125 * wedge.e435)) + (float4(right_anti_dual.e12345) * wedge.group3) + (float4(wedge.e12345) * right_anti_dual.group3) - (wedge.group9.yzxx * float4(right_anti_dual.group8.xyz.zxy, right_anti_dual.e415)) - float4((wedge.group8.xyz.zxy * right_anti_dual.group9.yzx), right_anti_dual.e425 * wedge.e4315), 
            /* e41, e42, e43 */
            (float3(right_anti_dual.e12345) * wedge.group4.xyz) + (float3(right_anti_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_anti_dual.group4.xyz) + (float3(wedge.e1234) * right_anti_dual.group6.xyz) + (right_anti_dual.group7.xyz.zxy * wedge.group9.yzx) + (wedge.group7.xyz.zxy * right_anti_dual.group9.yzx) - (right_anti_dual.group7.xyz.yzx * wedge.group9.zxy) - (wedge.group7.xyz.yzx * right_anti_dual.group9.zxy), 
            /* e23, e31, e12 */
            (float3(right_anti_dual.e12345) * wedge.group5.xyz) + (float3(right_anti_dual.e3215) * wedge.group7.xyz) + (float3(right_anti_dual.e1234) * wedge.group8.xyz) + (float3(wedge.e12345) * right_anti_dual.group5.xyz) + (float3(wedge.e3215) * right_anti_dual.group7.xyz) + (float3(wedge.e1234) * right_anti_dual.group8.xyz) - (float3(right_anti_dual.e321) * wedge.group9.xyz) - (float3(wedge.e321) * right_anti_dual.group9.xyz), 
            /* e415, e425, e435, e321 */
            (float4(right_anti_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_anti_dual.group6) + (right_anti_dual.group9.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - float4((right_anti_dual.group9.zxy * wedge.group9.yzx), right_anti_dual.e1234 * wedge.e3215), 
            /* e423, e431, e412 */
            (float3(right_anti_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_anti_dual.group7.xyz) + (float3(wedge.e1234) * right_anti_dual.group9.xyz) - (float3(right_anti_dual.e1234) * wedge.group9.xyz), 
            /* e235, e315, e125 */
            (float3(right_anti_dual.e12345) * wedge.group8.xyz) + (float3(right_anti_dual.e3215) * wedge.group9.xyz) + (float3(wedge.e12345) * right_anti_dual.group8.xyz) - (float3(wedge.e3215) * right_anti_dual.group9.xyz), 
            /* e4235, e4315, e4125, e3215 */
            (float4(right_anti_dual.e12345) * wedge.group9) + (float4(wedge.e12345) * right_anti_dual.group9), 
            /* e1234 */
            (right_anti_dual.e12345 * wedge.e1234) + (right_anti_dual.e1234 * wedge.e12345)
        );
    }
}
public extension Dipole {
    public Dipole anti_reject_orthogonally_from(RoundPoint other) {
        Circle wedge = Circle(
            /* e423, e431, e412 */
            (float3(other.e4) * this.group1.xyz) + (this.group0.xyz.yzx * other.group0.zxy) - (this.group0.xyz.zxy * other.group0.yzx), 
            /* e415, e425, e435, e321 */
            float4((this.e41 * other.e5) + (this.e15 * other.e4), (this.e42 * other.e5) + (this.e25 * other.e4), (this.e43 * other.e5) + (this.e35 * other.e4), -(this.e31 * other.e2) - (this.e12 * other.e3)) - (this.group1.wwwx * other.group0.xyzx), 
            /* e235, e315, e125 */
            (float3(other.e5) * this.group1.xyz) + (this.group2.xyz.zxy * other.group0.yzx) - (this.group2.xyz.yzx * other.group0.zxy)
        );
        Sphere right_anti_dual = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        return Dipole(
            /* e41, e42, e43 */
            (float3(right_anti_dual.e1234) * wedge.group1.xyz) + (wedge.group0.xyz.zxy * right_anti_dual.group0.yzx) - (wedge.group0.xyz.yzx * right_anti_dual.group0.zxy), 
            /* e23, e31, e12, e45 */
            float4((wedge.e423 * right_anti_dual.e3215) + (wedge.e235 * right_anti_dual.e1234), (wedge.e431 * right_anti_dual.e3215) + (wedge.e315 * right_anti_dual.e1234), (wedge.e412 * right_anti_dual.e3215) + (wedge.e125 * right_anti_dual.e1234), -(wedge.e425 * right_anti_dual.e4315) - (wedge.e435 * right_anti_dual.e4125)) - (wedge.group1.wwwx * right_anti_dual.group0.xyzx), 
            /* e15, e25, e35 */
            (float3(right_anti_dual.e3215) * wedge.group1.xyz) + (wedge.group2.xyz.yzx * right_anti_dual.group0.zxy) - (wedge.group2.xyz.zxy * right_anti_dual.group0.yzx)
        );
    }
}
public extension Dipole {
    public Dipole anti_reject_orthogonally_from(Scalar other) {
        Dipole wedge = Dipole(
            /* e41, e42, e43 */
            float3(other.scalar) * this.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(other.scalar) * this.group1, 
            /* e15, e25, e35 */
            float3(other.scalar) * this.group2.xyz
        );
        AntiScalar right_anti_dual = AntiScalar(
            /* e12345 */
            other.scalar
        );
        return Dipole(
            /* e41, e42, e43 */
            float3(right_anti_dual.e12345) * wedge.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(right_anti_dual.e12345) * wedge.group1, 
            /* e15, e25, e35 */
            float3(right_anti_dual.e12345) * wedge.group2.xyz
        );
    }
}
public extension Dipole {
    public VersorOdd anti_reject_orthogonally_from(VersorEven other) {
        CircleRotor wedge = CircleRotor(
            /* e423, e431, e412 */
            (float3(other.e4) * this.group1.xyz) + (this.group0.xyz.yzx * other.group3.zxy) - (this.group0.xyz.zxy * other.group3.yzx), 
            /* e415, e425, e435, e321 */
            float4((this.e41 * other.e5) + (this.e15 * other.e4), (this.e42 * other.e5) + (this.e25 * other.e4), (this.e43 * other.e5) + (this.e35 * other.e4), -(this.e31 * other.e2) - (this.e12 * other.e3)) - (this.group1.wwwx * other.group3.xyzx), 
            /* e235, e315, e125, e12345 */
            float4((this.e23 * other.e5) + (this.e35 * other.e2), (this.e31 * other.e5) + (this.e15 * other.e3), (this.e12 * other.e5) + (this.e25 * other.e1), -(this.e42 * other.e315) - (this.e43 * other.e125) - (this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435) - (this.e45 * other.e321) - (this.e15 * other.e423) - (this.e25 * other.e431) - (this.e35 * other.e412)) - float4((this.group2.xyz.yzx * other.group3.zxy), this.e41 * other.e235)
        );
        VersorOdd right_anti_dual = VersorOdd(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4((wedge.e415 * right_anti_dual.e1234) + (wedge.e12345 * right_anti_dual.e41), (wedge.e425 * right_anti_dual.e1234) + (wedge.e12345 * right_anti_dual.e42), (wedge.e435 * right_anti_dual.e1234) + (wedge.e12345 * right_anti_dual.e43), -(wedge.e431 * right_anti_dual.e25) - (wedge.e412 * right_anti_dual.e35) - (wedge.e415 * right_anti_dual.e23) - (wedge.e425 * right_anti_dual.e31) - (wedge.e435 * right_anti_dual.e12) - (wedge.e321 * right_anti_dual.e45) - (wedge.e235 * right_anti_dual.e41) - (wedge.e315 * right_anti_dual.e42) - (wedge.e125 * right_anti_dual.e43)) + float4((wedge.group0.xyz.zxy * right_anti_dual.group3.yzx), wedge.e12345 * right_anti_dual.scalar) - float4((wedge.group0.xyz.yzx * right_anti_dual.group3.zxy), wedge.e423 * right_anti_dual.e15), 
            /* e23, e31, e12, e45 */
            float4((wedge.e235 * right_anti_dual.e1234) + (wedge.e12345 * right_anti_dual.e23), (wedge.e315 * right_anti_dual.e1234) + (wedge.e12345 * right_anti_dual.e31), (wedge.e125 * right_anti_dual.e1234) + (wedge.e12345 * right_anti_dual.e12), -(wedge.e425 * right_anti_dual.e4315) - (wedge.e435 * right_anti_dual.e4125)) + float4((wedge.group0.xyz * right_anti_dual.group3.www), wedge.e12345 * right_anti_dual.e45) - (wedge.group1.wwwx * right_anti_dual.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(wedge.e12345) * right_anti_dual.group2.xyz) + (float3(right_anti_dual.e3215) * wedge.group1.xyz) + (wedge.group2.yzx * right_anti_dual.group3.zxy) - (wedge.group2.zxy * right_anti_dual.group3.yzx)), wedge.e12345 * right_anti_dual.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_anti_dual.group3
        );
    }
}
public extension Dipole {
    public VersorOdd anti_reject_orthogonally_from(VersorOdd other) {
        DipoleInversion wedge = DipoleInversion(
            /* e41, e42, e43 */
            float3(other.scalar) * this.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(other.scalar) * this.group1, 
            /* e15, e25, e35, e1234 */
            float4((float3(other.scalar) * this.group2.xyz), -(this.e41 * other.e23) - (this.e42 * other.e31) - (this.e43 * other.e12) - (this.e23 * other.e41) - (this.e31 * other.e42) - (this.e12 * other.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((this.e42 * other.e35) + (this.e23 * other.e45) + (this.e45 * other.e23) + (this.e35 * other.e42), (this.e43 * other.e15) + (this.e31 * other.e45) + (this.e45 * other.e31) + (this.e15 * other.e43), (this.e41 * other.e25) + (this.e12 * other.e45) + (this.e45 * other.e12) + (this.e25 * other.e41), -(this.e23 * other.e15) - (this.e31 * other.e25) - (this.e12 * other.e35) - (this.e35 * other.e12)) - float4((this.group0.xyz.zxy * other.group2.yzx), this.e15 * other.e23) - float4((this.group2.xyz.yzx * other.group0.zxy), this.e25 * other.e31)
        );
        VersorEven right_anti_dual = VersorEven(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            (wedge.group3.yzxy * float4(right_anti_dual.group0.zxy, right_anti_dual.e2)) + float4(float3(0.0), (wedge.e4125 * right_anti_dual.e3) + (wedge.e3215 * right_anti_dual.e4) - (wedge.e42 * right_anti_dual.e315) - (wedge.e43 * right_anti_dual.e125) - (wedge.e23 * right_anti_dual.e415) - (wedge.e31 * right_anti_dual.e425) - (wedge.e12 * right_anti_dual.e435) - (wedge.e45 * right_anti_dual.e321) - (wedge.e15 * right_anti_dual.e423) - (wedge.e25 * right_anti_dual.e431) - (wedge.e35 * right_anti_dual.e412)) + float4((wedge.group0.xyz * right_anti_dual.group0.www), wedge.e1234 * right_anti_dual.e5) + float4((wedge.group2.www * right_anti_dual.group1.xyz), wedge.e4235 * right_anti_dual.e1) - float4((wedge.group3.zxy * right_anti_dual.group0.yzx), wedge.e41 * right_anti_dual.e235), 
            /* e23, e31, e12, e45 */
            float4((wedge.e1234 * right_anti_dual.e235) + (wedge.e3215 * right_anti_dual.e423), (wedge.e1234 * right_anti_dual.e315) + (wedge.e3215 * right_anti_dual.e431), (wedge.e1234 * right_anti_dual.e125) + (wedge.e3215 * right_anti_dual.e412), -(wedge.e4315 * right_anti_dual.e425) - (wedge.e4125 * right_anti_dual.e435)) + (float4(right_anti_dual.e12345) * wedge.group1) - (wedge.group3.xyzx * right_anti_dual.group1.wwwx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(wedge.e3215) * right_anti_dual.group1.xyz) + (float3(right_anti_dual.e12345) * wedge.group2.xyz) + (wedge.group3.zxy * right_anti_dual.group2.yzx) - (wedge.group3.yzx * right_anti_dual.group2.zxy)), wedge.e1234 * right_anti_dual.e12345), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_anti_dual.e12345) * wedge.group3
        );
    }
}
public extension DipoleInversion {
    // Fancy infix trick (first half)
    public AntiRejectOrthogonallyFromInfixPartial<DipoleInversion> operator /(AntiRejectOrthogonallyFromInfix rhs) {
        return AntiRejectOrthogonallyFromInfixPartial<DipoleInversion>(this);
    }
}
public extension AntiRejectOrthogonallyFromInfixPartial<DipoleInversion> {
    // Fancy infix trick (second half)
    public VersorOdd operator /(AntiCircleRotor rhs) {
        return this.a.anti_reject_orthogonally_from(rhs);
    }
}
public extension DipoleInversion {
    public VersorOdd anti_reject_orthogonally_from(AntiCircleRotor other) {
        DipoleInversion wedge = DipoleInversion(
            /* e41, e42, e43 */
            float3(other.scalar) * this.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(other.scalar) * this.group1, 
            /* e15, e25, e35, e1234 */
            float4((other.group2.www * this.group2.xyz), (other.scalar * this.e1234) - (other.e41 * this.e23) - (other.e42 * this.e31) - (other.e43 * this.e12) - (other.e23 * this.e41) - (other.e31 * this.e42) - (other.e12 * this.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e23 * this.e45) + (other.e45 * this.e23) + (other.e35 * this.e42) + (other.scalar * this.e4235), (other.e31 * this.e45) + (other.e45 * this.e31) + (other.e15 * this.e43) + (other.scalar * this.e4315), (other.e12 * this.e45) + (other.e45 * this.e12) + (other.e25 * this.e41) + (other.scalar * this.e4125), -(other.e12 * this.e35) - (other.e15 * this.e23) - (other.e25 * this.e31) - (other.e35 * this.e12)) + float4((other.group0.xyz.yzx * this.group2.zxy), other.scalar * this.e3215) - (this.group2.yzxx * float4(other.group0.xyz.zxy, other.e23)) - float4((this.group0.xyz.zxy * other.group2.yzx), other.e31 * this.e25)
        );
        CircleRotor right_anti_dual = CircleRotor(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4((right_anti_dual.e412 * wedge.e4315) + (right_anti_dual.e415 * wedge.e1234) + (right_anti_dual.e12345 * wedge.e41), (right_anti_dual.e423 * wedge.e4125) + (right_anti_dual.e425 * wedge.e1234) + (right_anti_dual.e12345 * wedge.e42), (right_anti_dual.e431 * wedge.e4235) + (right_anti_dual.e435 * wedge.e1234) + (right_anti_dual.e12345 * wedge.e43), -(right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e321 * wedge.e45) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43)) - float4((right_anti_dual.group0.xyz.yzx * wedge.group3.zxy), right_anti_dual.e423 * wedge.e15), 
            /* e23, e31, e12, e45 */
            float4((right_anti_dual.e235 * wedge.e1234) + (right_anti_dual.e12345 * wedge.e23), (right_anti_dual.e315 * wedge.e1234) + (right_anti_dual.e12345 * wedge.e31), (right_anti_dual.e125 * wedge.e1234) + (right_anti_dual.e12345 * wedge.e12), -(right_anti_dual.e425 * wedge.e4315) - (right_anti_dual.e435 * wedge.e4125)) + float4((right_anti_dual.group0.xyz * wedge.group3.www), right_anti_dual.e12345 * wedge.e45) - (right_anti_dual.group1.wwwx * wedge.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_anti_dual.e12345) * wedge.group2.xyz) + (float3(wedge.e3215) * right_anti_dual.group1.xyz) + (right_anti_dual.group2.yzx * wedge.group3.zxy) - (right_anti_dual.group2.zxy * wedge.group3.yzx)), right_anti_dual.e12345 * wedge.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_anti_dual.e12345) * wedge.group3
        );
    }
}
public extension DipoleInversion {
    public VersorOdd anti_reject_orthogonally_from(AntiDipoleInversion other) {
        CircleRotor wedge = CircleRotor(
            /* e423, e431, e412 */
            (float3(other.e4) * this.group1.xyz) + (this.group0.xyz.yzx * other.group3.zxy) - (this.group0.xyz.zxy * other.group3.yzx), 
            /* e415, e425, e435, e321 */
            float4((other.e4 * this.e15) + (other.e5 * this.e41), (other.e4 * this.e25) + (other.e5 * this.e42), (other.e4 * this.e35) + (other.e5 * this.e43), -(other.e2 * this.e31) - (other.e3 * this.e12)) - (other.group3.xyzx * this.group1.wwwx), 
            /* e235, e315, e125, e12345 */
            (other.group3.wwwx * float4(this.group1.xyz, this.e4235)) + float4(float3(0.0), (other.e2 * this.e4315) + (other.e3 * this.e4125) + (other.e5 * this.e1234) - (other.e431 * this.e25) - (other.e412 * this.e35) - (other.e415 * this.e23) - (other.e425 * this.e31) - (other.e435 * this.e12) - (other.e321 * this.e45) - (other.e235 * this.e41) - (other.e315 * this.e42) - (other.e125 * this.e43)) + float4((other.group3.yzx * this.group2.zxy), other.e4 * this.e3215) - (this.group2.yzxx * float4(other.group3.zxy, other.e423))
        );
        DipoleInversion right_anti_dual = DipoleInversion(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4((wedge.e412 * right_anti_dual.e4315) + (wedge.e415 * right_anti_dual.e1234) + (wedge.e12345 * right_anti_dual.e41), (wedge.e423 * right_anti_dual.e4125) + (wedge.e425 * right_anti_dual.e1234) + (wedge.e12345 * right_anti_dual.e42), (wedge.e431 * right_anti_dual.e4235) + (wedge.e435 * right_anti_dual.e1234) + (wedge.e12345 * right_anti_dual.e43), -(wedge.e431 * right_anti_dual.e25) - (wedge.e412 * right_anti_dual.e35) - (wedge.e415 * right_anti_dual.e23) - (wedge.e425 * right_anti_dual.e31) - (wedge.e435 * right_anti_dual.e12) - (wedge.e321 * right_anti_dual.e45) - (wedge.e235 * right_anti_dual.e41) - (wedge.e315 * right_anti_dual.e42) - (wedge.e125 * right_anti_dual.e43)) - float4((wedge.group0.xyz.yzx * right_anti_dual.group3.zxy), wedge.e423 * right_anti_dual.e15), 
            /* e23, e31, e12, e45 */
            float4((wedge.e235 * right_anti_dual.e1234) + (wedge.e12345 * right_anti_dual.e23), (wedge.e315 * right_anti_dual.e1234) + (wedge.e12345 * right_anti_dual.e31), (wedge.e125 * right_anti_dual.e1234) + (wedge.e12345 * right_anti_dual.e12), -(wedge.e425 * right_anti_dual.e4315) - (wedge.e435 * right_anti_dual.e4125)) + float4((wedge.group0.xyz * right_anti_dual.group3.www), wedge.e12345 * right_anti_dual.e45) - (wedge.group1.wwwx * right_anti_dual.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(wedge.e12345) * right_anti_dual.group2.xyz) + (float3(right_anti_dual.e3215) * wedge.group1.xyz) + (wedge.group2.yzx * right_anti_dual.group3.zxy) - (wedge.group2.zxy * right_anti_dual.group3.yzx)), wedge.e12345 * right_anti_dual.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_anti_dual.group3
        );
    }
}
public extension DipoleInversion {
    public VersorOdd anti_reject_orthogonally_from(AntiDualNum other) {
        DipoleInversion wedge = DipoleInversion(
            /* e41, e42, e43 */
            float3(other.scalar) * this.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(other.scalar) * this.group1, 
            /* e15, e25, e35, e1234 */
            float4(other.scalar) * this.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar) * this.group3
        );
        DualNum right_anti_dual = DualNum(
            /* e5, e12345 */
            other.group0.xy
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(right_anti_dual.group0.xy.yy, right_anti_dual.e12345, right_anti_dual.e5) * float4(wedge.group0.xyz, wedge.e1234), 
            /* e23, e31, e12, e45 */
            float4(right_anti_dual.e12345) * wedge.group1, 
            /* e15, e25, e35, e1234 */
            float4(right_anti_dual.e12345) * wedge.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(right_anti_dual.e12345) * wedge.group3
        );
    }
}
public extension DipoleInversion {
    public FlatPoint anti_reject_orthogonally_from(AntiFlatPoint other) {
        return FlatPoint(
            /* e15, e25, e35, e45 */
            float4(-(other.e235 * this.e41) - (other.e315 * this.e42) - (other.e125 * this.e43) - (other.e321 * this.e45)) * float4(other.group0.xyz, other.e321 * -1.0)
        );
    }
}
public extension DipoleInversion {
    public VersorOdd anti_reject_orthogonally_from(AntiFlector other) {
        CircleRotor wedge = CircleRotor(
            /* e423, e431, e412 */
            (this.group0.xyz.yzx * other.group1.zxy) - (this.group0.xyz.zxy * other.group1.yzx), 
            /* e415, e425, e435, e321 */
            float4(other.e5 * this.e41, other.e5 * this.e42, other.e5 * this.e43, -(other.e2 * this.e31) - (other.e3 * this.e12)) - (other.group1.xyzx * this.group1.wwwx), 
            /* e235, e315, e125, e12345 */
            (other.group1.yzxx * float4(this.group2.zxy, this.e4235)) + (other.group1.wwwy * float4(this.group1.xyz, this.e4315)) + float4(float3(0.0), (other.e3 * this.e4125) + (other.e5 * this.e1234) - (other.e315 * this.e42) - (other.e125 * this.e43) - (other.e321 * this.e45)) - float4((other.group1.zxy * this.group2.yzx), other.e235 * this.e41)
        );
        Flector right_anti_dual = Flector(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(wedge.e412 * right_anti_dual.e4315, wedge.e423 * right_anti_dual.e4125, wedge.e431 * right_anti_dual.e4235, -(wedge.e431 * right_anti_dual.e25) - (wedge.e412 * right_anti_dual.e35) - (wedge.e321 * right_anti_dual.e45)) - float4((wedge.group0.xyz.yzx * right_anti_dual.group1.zxy), wedge.e423 * right_anti_dual.e15), 
            /* e23, e31, e12, e45 */
            float4(float3(0.0), -(wedge.e425 * right_anti_dual.e4315) - (wedge.e435 * right_anti_dual.e4125)) + float4((wedge.group0.xyz * right_anti_dual.group1.www), wedge.e12345 * right_anti_dual.e45) - (wedge.group1.wwwx * right_anti_dual.group1.xyzx), 
            /* e15, e25, e35, e1234 */
            float4((float3(wedge.e12345) * right_anti_dual.group0.xyz), 0.0) + float4((float3(right_anti_dual.e3215) * wedge.group1.xyz), 0.0) + float4((wedge.group2.yzx * right_anti_dual.group1.zxy), 0.0) - float4((wedge.group2.zxy * right_anti_dual.group1.yzx), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_anti_dual.group1
        );
    }
}
public extension DipoleInversion {
    public Dipole anti_reject_orthogonally_from(AntiLine other) {
        Sphere wedge = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4((other.e23 * this.e45) + (other.e35 * this.e42), (other.e31 * this.e45) + (other.e15 * this.e43), (other.e12 * this.e45) + (other.e25 * this.e41), -(other.e31 * this.e25) - (other.e12 * this.e35) - (other.e15 * this.e23) - (other.e25 * this.e31) - (other.e35 * this.e12)) - float4((other.group1.xyz.yzx * this.group0.xyz.zxy), other.e23 * this.e15), 
            /* e1234 */
            -(other.e23 * this.e41) - (other.e31 * this.e42) - (other.e12 * this.e43)
        );
        Line right_anti_dual = Line(
            /* e415, e425, e435 */
            other.group0.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group1.xyz * float3(-1.0)
        );
        return Dipole(
            /* e41, e42, e43 */
            float3(wedge.e1234) * right_anti_dual.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4((float3(wedge.e1234) * right_anti_dual.group1.xyz), -(right_anti_dual.e415 * wedge.e4235) - (right_anti_dual.e425 * wedge.e4315) - (right_anti_dual.e435 * wedge.e4125)), 
            /* e15, e25, e35 */
            (float3(wedge.e3215) * right_anti_dual.group0.xyz) + (right_anti_dual.group1.xyz.yzx * wedge.group0.zxy) - (right_anti_dual.group1.xyz.zxy * wedge.group0.yzx)
        );
    }
}
public extension DipoleInversion {
    public VersorOdd anti_reject_orthogonally_from(AntiMotor other) {
        DipoleInversion wedge = DipoleInversion(
            /* e41, e42, e43 */
            float3(other.scalar) * this.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(other.scalar) * this.group1, 
            /* e15, e25, e35, e1234 */
            float4((other.group0.www * this.group2.xyz), (other.scalar * this.e1234) - (other.e23 * this.e41) - (other.e31 * this.e42) - (other.e12 * this.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e23 * this.e45) + (other.scalar * this.e4235), (other.e31 * this.e45) + (other.scalar * this.e4315), (other.e12 * this.e45) + (other.scalar * this.e4125), -(other.e31 * this.e25) - (other.e12 * this.e35) - (other.e15 * this.e23) - (other.e25 * this.e31) - (other.e35 * this.e12)) + float4((this.group0.xyz.yzx * other.group1.zxy), other.scalar * this.e3215) - float4((this.group0.xyz.zxy * other.group1.yzx), other.e23 * this.e15)
        );
        Motor right_anti_dual = Motor(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(wedge.e1234 * right_anti_dual.e415, wedge.e1234 * right_anti_dual.e425, wedge.e1234 * right_anti_dual.e435, -(wedge.e41 * right_anti_dual.e235) - (wedge.e42 * right_anti_dual.e315) - (wedge.e43 * right_anti_dual.e125) - (wedge.e23 * right_anti_dual.e415) - (wedge.e31 * right_anti_dual.e425) - (wedge.e12 * right_anti_dual.e435)) + float4((wedge.group0.xyz * right_anti_dual.group0.www), wedge.e1234 * right_anti_dual.e5), 
            /* e23, e31, e12, e45 */
            float4(wedge.e1234 * right_anti_dual.e235, wedge.e1234 * right_anti_dual.e315, wedge.e1234 * right_anti_dual.e125, -(wedge.e4235 * right_anti_dual.e415) - (wedge.e4315 * right_anti_dual.e425) - (wedge.e4125 * right_anti_dual.e435)) + (float4(right_anti_dual.e12345) * wedge.group1), 
            /* e15, e25, e35, e1234 */
            float4(((float3(wedge.e3215) * right_anti_dual.group0.xyz) + (float3(right_anti_dual.e12345) * wedge.group2.xyz) + (wedge.group3.zxy * right_anti_dual.group1.yzx) - (wedge.group3.yzx * right_anti_dual.group1.zxy)), wedge.e1234 * right_anti_dual.e12345), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_anti_dual.e12345) * wedge.group3
        );
    }
}
public extension DipoleInversion {
    public DipoleInversion anti_reject_orthogonally_from(AntiPlane other) {
        CircleRotor wedge = CircleRotor(
            /* e423, e431, e412 */
            (this.group0.xyz.yzx * other.group0.zxy) - (this.group0.xyz.zxy * other.group0.yzx), 
            /* e415, e425, e435, e321 */
            float4(other.e5 * this.e41, other.e5 * this.e42, other.e5 * this.e43, -(other.e2 * this.e31) - (other.e3 * this.e12)) - (other.group0.xyzx * this.group1.wwwx), 
            /* e235, e315, e125, e12345 */
            float4(other.e3 * this.e25 * -1.0, other.e1 * this.e35 * -1.0, other.e2 * this.e15 * -1.0, (other.e3 * this.e4125) + (other.e5 * this.e1234)) + (other.group0.yzxx * float4(this.group2.zxy, this.e4235)) + (other.group0.wwwy * float4(this.group1.xyz, this.e4315))
        );
        Plane right_anti_dual = Plane(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            (wedge.group0.xyz.zxy * right_anti_dual.group0.yzx) - (wedge.group0.xyz.yzx * right_anti_dual.group0.zxy), 
            /* e23, e31, e12, e45 */
            float4(wedge.e423 * right_anti_dual.e3215, wedge.e431 * right_anti_dual.e3215, wedge.e412 * right_anti_dual.e3215, -(wedge.e425 * right_anti_dual.e4315) - (wedge.e435 * right_anti_dual.e4125)) - (wedge.group1.wwwx * right_anti_dual.group0.xyzx), 
            /* e15, e25, e35, e1234 */
            float4((float3(right_anti_dual.e3215) * wedge.group1.xyz), 0.0) + float4((wedge.group2.yzx * right_anti_dual.group0.zxy), 0.0) - float4((wedge.group2.zxy * right_anti_dual.group0.yzx), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_anti_dual.group0
        );
    }
}
public extension DipoleInversion {
    public Dipole anti_reject_orthogonally_from(Circle other) {
        AntiScalar wedge = AntiScalar(
            /* e12345 */
            -(other.e423 * this.e15) - (other.e431 * this.e25) - (other.e412 * this.e35) - (other.e415 * this.e23) - (other.e425 * this.e31) - (other.e435 * this.e12) - (other.e321 * this.e45) - (other.e235 * this.e41) - (other.e315 * this.e42) - (other.e125 * this.e43)
        );
        Dipole right_anti_dual = Dipole(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35 */
            other.group2.xyz
        );
        return Dipole(
            /* e41, e42, e43 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(wedge.e12345) * right_anti_dual.group1, 
            /* e15, e25, e35 */
            float3(wedge.e12345) * right_anti_dual.group2.xyz
        );
    }
}
public extension DipoleInversion {
    public AntiCircleRotor anti_reject_orthogonally_from(CircleRotor other) {
        AntiScalar wedge = AntiScalar(
            /* e12345 */
            -(other.e423 * this.e15) - (other.e431 * this.e25) - (other.e412 * this.e35) - (other.e415 * this.e23) - (other.e425 * this.e31) - (other.e435 * this.e12) - (other.e321 * this.e45) - (other.e235 * this.e41) - (other.e315 * this.e42) - (other.e125 * this.e43)
        );
        AntiCircleRotor right_anti_dual = AntiCircleRotor(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiCircleRotor(
            /* e41, e42, e43 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(wedge.e12345) * right_anti_dual.group1, 
            /* e15, e25, e35, scalar */
            float4(wedge.e12345) * right_anti_dual.group2
        );
    }
}
public extension DipoleInversion {
    public Dipole anti_reject_orthogonally_from(Dipole other) {
        Sphere wedge = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4((other.e42 * this.e35) + (other.e23 * this.e45) + (other.e45 * this.e23) + (other.e35 * this.e42), (other.e43 * this.e15) + (other.e31 * this.e45) + (other.e45 * this.e31) + (other.e15 * this.e43), (other.e41 * this.e25) + (other.e12 * this.e45) + (other.e45 * this.e12) + (other.e25 * this.e41), -(other.e23 * this.e15) - (other.e31 * this.e25) - (other.e12 * this.e35) - (other.e35 * this.e12)) - float4((other.group0.xyz.zxy * this.group2.yzx), other.e15 * this.e23) - float4((other.group2.xyz.yzx * this.group0.xyz.zxy), other.e25 * this.e31), 
            /* e1234 */
            -(other.e41 * this.e23) - (other.e42 * this.e31) - (other.e43 * this.e12) - (other.e23 * this.e41) - (other.e31 * this.e42) - (other.e12 * this.e43)
        );
        Circle right_anti_dual = Circle(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125 */
            other.group2.xyz * float3(-1.0)
        );
        return Dipole(
            /* e41, e42, e43 */
            (float3(wedge.e1234) * right_anti_dual.group1.xyz) + (right_anti_dual.group0.xyz.zxy * wedge.group0.yzx) - (right_anti_dual.group0.xyz.yzx * wedge.group0.zxy), 
            /* e23, e31, e12, e45 */
            float4((right_anti_dual.e423 * wedge.e3215) + (right_anti_dual.e235 * wedge.e1234), (right_anti_dual.e431 * wedge.e3215) + (right_anti_dual.e315 * wedge.e1234), (right_anti_dual.e412 * wedge.e3215) + (right_anti_dual.e125 * wedge.e1234), -(right_anti_dual.e425 * wedge.e4315) - (right_anti_dual.e435 * wedge.e4125)) - (right_anti_dual.group1.wwwx * wedge.group0.xyzx), 
            /* e15, e25, e35 */
            (float3(wedge.e3215) * right_anti_dual.group1.xyz) + (right_anti_dual.group2.xyz.yzx * wedge.group0.zxy) - (right_anti_dual.group2.xyz.zxy * wedge.group0.yzx)
        );
    }
}
public extension DipoleInversion {
    public AntiCircleRotor anti_reject_orthogonally_from(DipoleInversion other) {
        Sphere wedge = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4((other.e42 * this.e35) + (other.e23 * this.e45) + (other.e45 * this.e23) + (other.e35 * this.e42), (other.e43 * this.e15) + (other.e31 * this.e45) + (other.e45 * this.e31) + (other.e15 * this.e43), (other.e41 * this.e25) + (other.e12 * this.e45) + (other.e45 * this.e12) + (other.e25 * this.e41), -(other.e12 * this.e35) - (other.e15 * this.e23) - (other.e25 * this.e31) - (other.e35 * this.e12)) - (this.group2.yzxx * float4(other.group0.xyz.zxy, other.e23)) - float4((this.group0.xyz.zxy * other.group2.yzx), other.e31 * this.e25), 
            /* e1234 */
            -(other.e41 * this.e23) - (other.e42 * this.e31) - (other.e43 * this.e12) - (other.e23 * this.e41) - (other.e31 * this.e42) - (other.e12 * this.e43)
        );
        AntiDipoleInversion right_anti_dual = AntiDipoleInversion(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiCircleRotor(
            /* e41, e42, e43 */
            (float3(wedge.e1234) * right_anti_dual.group1.xyz) + (right_anti_dual.group0.xyz.zxy * wedge.group0.yzx) - (right_anti_dual.group0.xyz.yzx * wedge.group0.zxy), 
            /* e23, e31, e12, e45 */
            float4((right_anti_dual.e423 * wedge.e3215) + (right_anti_dual.e235 * wedge.e1234), (right_anti_dual.e431 * wedge.e3215) + (right_anti_dual.e315 * wedge.e1234), (right_anti_dual.e412 * wedge.e3215) + (right_anti_dual.e125 * wedge.e1234), -(right_anti_dual.e425 * wedge.e4315) - (right_anti_dual.e435 * wedge.e4125)) - (right_anti_dual.group1.wwwx * wedge.group0.xyzx), 
            /* e15, e25, e35, scalar */
            float4(right_anti_dual.e125 * wedge.e4315 * -1.0, right_anti_dual.e235 * wedge.e4125 * -1.0, right_anti_dual.e315 * wedge.e4235 * -1.0, (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) + (right_anti_dual.e5 * wedge.e1234)) + (float4(wedge.e3215) * float4(right_anti_dual.group1.xyz, right_anti_dual.e4)) + (wedge.group0.zxyx * float4(right_anti_dual.group2.yzx, right_anti_dual.e1))
        );
    }
}
public extension DipoleInversion {
    public AntiMotor anti_reject_orthogonally_from(DualNum other) {
        Motor wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4(other.e5) * float4(this.group0.xyz, this.e1234), 
            /* e235, e315, e125, e5 */
            float4(other.group0.xy.xx, other.e5, 0.0) * float4(float3(1.0), 0.0) * float4(this.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        AntiDualNum right_anti_dual = AntiDualNum(
            /* e3215, scalar */
            other.group0.xy * float2(-1.0)
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4(float3(0.0), right_anti_dual.scalar * wedge.e12345), 
            /* e15, e25, e35, e3215 */
            float4(right_anti_dual.e3215) * wedge.group0
        );
    }
}
public extension DipoleInversion {
    public AntiLine anti_reject_orthogonally_from(FlatPoint other) {
        Plane wedge = Plane(
            /* e4235, e4315, e4125, e3215 */
            float4((this.e42 * other.e35) + (this.e23 * other.e45), (this.e43 * other.e15) + (this.e31 * other.e45), (this.e41 * other.e25) + (this.e12 * other.e45), -(this.e31 * other.e25) - (this.e12 * other.e35)) - (other.group0.yzxx * float4(this.group0.xyz.zxy, this.e23))
        );
        AntiFlatPoint right_anti_dual = AntiFlatPoint(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiLine(
            /* e23, e31, e12 */
            float3(right_anti_dual.e321) * wedge.group0.xyz * float3(-1.0), 
            /* e15, e25, e35 */
            (right_anti_dual.group0.yzx * wedge.group0.zxy) - (right_anti_dual.group0.zxy * wedge.group0.yzx)
        );
    }
}
public extension DipoleInversion {
    public AntiMotor anti_reject_orthogonally_from(Flector other) {
        Plane wedge = Plane(
            /* e4235, e4315, e4125, e3215 */
            float4((this.e42 * other.e35) + (this.e23 * other.e45), (this.e43 * other.e15) + (this.e31 * other.e45), (this.e41 * other.e25) + (this.e12 * other.e45), -(this.e31 * other.e25) - (this.e12 * other.e35)) - (other.group0.yzxx * float4(this.group0.xyz.zxy, this.e23))
        );
        AntiFlector right_anti_dual = AntiFlector(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4((right_anti_dual.group0.www * wedge.group0.xyz * float3(-1.0)), (right_anti_dual.e1 * wedge.e4235) + (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125)), 
            /* e15, e25, e35, e3215 */
            float4(((right_anti_dual.group0.yzx * wedge.group0.zxy) - (right_anti_dual.group0.zxy * wedge.group0.yzx)), 0.0)
        );
    }
}
public extension DipoleInversion {
    public AntiLine anti_reject_orthogonally_from(Line other) {
        AntiScalar wedge = AntiScalar(
            /* e12345 */
            -(this.e41 * other.e235) - (this.e42 * other.e315) - (this.e43 * other.e125) - (this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435)
        );
        AntiLine right_anti_dual = AntiLine(
            /* e23, e31, e12 */
            other.group0.xyz, 
            /* e15, e25, e35 */
            other.group1.xyz
        );
        return AntiLine(
            /* e23, e31, e12 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e15, e25, e35 */
            float3(wedge.e12345) * right_anti_dual.group1.xyz
        );
    }
}
public extension DipoleInversion {
    public AntiMotor anti_reject_orthogonally_from(Motor other) {
        Motor wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4((float3(other.e5) * this.group0.xyz), (this.e1234 * other.e5) - (this.e41 * other.e235) - (this.e42 * other.e315) - (this.e43 * other.e125) - (this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435)), 
            /* e235, e315, e125, e5 */
            float4(float3(1.0), 0.0) * float4(other.group1.www, 0.0) * float4(this.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        AntiMotor right_anti_dual = AntiMotor(
            /* e23, e31, e12, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4((float3(wedge.e12345) * right_anti_dual.group0.xyz), (right_anti_dual.scalar * wedge.e12345) - (right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435)), 
            /* e15, e25, e35, e3215 */
            float4(((float3(right_anti_dual.e3215) * wedge.group0.xyz) + (float3(wedge.e12345) * right_anti_dual.group1.xyz)), right_anti_dual.e3215 * wedge.e12345)
        );
    }
}
public extension DipoleInversion {
    public MultiVector anti_reject_orthogonally_from(MultiVector other) {
        MultiVector wedge = MultiVector(
            /* scalar, e12345 */
            float2(0.0, (this.e1234 * other.e5) + (this.e4235 * other.e1) + (this.e4315 * other.e2) + (this.e4125 * other.e3) + (this.e3215 * other.e4) - (this.e41 * other.e235) - (this.e42 * other.e315) - (this.e43 * other.e125) - (this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435) - (this.e45 * other.e321) - (this.e15 * other.e423) - (this.e25 * other.e431) - (this.e35 * other.e412)), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5 */
            0.0, 
            /* e15, e25, e35, e45 */
            float4(other.scalar) * float4(this.group2.xyz, this.e45), 
            /* e41, e42, e43 */
            float3(other.scalar) * this.group0.xyz, 
            /* e23, e31, e12 */
            float3(other.scalar) * this.group1.xyz, 
            /* e415, e425, e435, e321 */
            float4((this.e41 * other.e5) + (this.e15 * other.e4), (this.e42 * other.e5) + (this.e25 * other.e4), (this.e43 * other.e5) + (this.e35 * other.e4), -(this.e31 * other.e2) - (this.e12 * other.e3)) - (this.group1.wwwx * other.group1.xyzx), 
            /* e423, e431, e412 */
            (float3(other.e4) * this.group1.xyz) + (this.group0.xyz.yzx * other.group1.zxy) - (this.group0.xyz.zxy * other.group1.yzx), 
            /* e235, e315, e125 */
            (float3(other.e5) * this.group1.xyz) + (this.group2.zxy * other.group1.yzx) - (this.group2.yzx * other.group1.zxy), 
            /* e4235, e4315, e4125, e3215 */
            float4((this.e42 * other.e35) + (this.e23 * other.e45) + (this.e45 * other.e23) + (this.e35 * other.e42), (this.e43 * other.e15) + (this.e31 * other.e45) + (this.e45 * other.e31) + (this.e15 * other.e43), (this.e41 * other.e25) + (this.e12 * other.e45) + (this.e45 * other.e12) + (this.e25 * other.e41), -(this.e23 * other.e15) - (this.e31 * other.e25) - (this.e12 * other.e35) - (this.e35 * other.e12)) + (float4(other.scalar) * this.group3) - (this.group2.yzxy * float4(other.group4.xyz.zxy, other.e31)) - float4((this.group0.xyz.zxy * other.group3.yzx), this.e15 * other.e23), 
            /* e1234 */
            (this.e1234 * other.scalar) - (this.e41 * other.e23) - (this.e42 * other.e31) - (this.e43 * other.e12) - (this.e23 * other.e41) - (this.e31 * other.e42) - (this.e12 * other.e43)
        );
        MultiVector right_anti_dual = MultiVector(
            /* scalar, e12345 */
            other.group0.xy.yx * float2(-1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215, 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43 */
            other.group7.xyz, 
            /* e23, e31, e12 */
            other.group6.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412 */
            other.group4.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group3.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2((right_anti_dual.scalar * wedge.e12345) + (right_anti_dual.e12345 * wedge.scalar) + (right_anti_dual.e1 * wedge.e4235) + (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) + (right_anti_dual.e4 * wedge.e3215) + (right_anti_dual.e5 * wedge.e1234) + (right_anti_dual.e4235 * wedge.e1) + (right_anti_dual.e4315 * wedge.e2) + (right_anti_dual.e4125 * wedge.e3) + (right_anti_dual.e3215 * wedge.e4) + (right_anti_dual.e1234 * wedge.e5) - (right_anti_dual.e15 * wedge.e423) - (right_anti_dual.e25 * wedge.e431) - (right_anti_dual.e35 * wedge.e412) - (right_anti_dual.e45 * wedge.e321) - (right_anti_dual.e41 * wedge.e235) - (right_anti_dual.e42 * wedge.e315) - (right_anti_dual.e43 * wedge.e125) - (right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e321 * wedge.e45) - (right_anti_dual.e423 * wedge.e15) - (right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43), right_anti_dual.e12345 * wedge.e12345), 
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e15 * wedge.e1234) + (right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e4125 * wedge.e31), (right_anti_dual.e25 * wedge.e1234) + (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e4235 * wedge.e12), (right_anti_dual.e35 * wedge.e1234) + (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e4315 * wedge.e23), -(right_anti_dual.e415 * wedge.e423) - (right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412) - (right_anti_dual.e1234 * wedge.e45)) + (float4(right_anti_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_anti_dual.group1) + (wedge.group9.yzxx * float4(right_anti_dual.group5.xyz.zxy, right_anti_dual.e41)) + float4((wedge.group4.xyz * right_anti_dual.group9.www), right_anti_dual.e45 * wedge.e1234) + float4((right_anti_dual.group7.xyz.zxy * wedge.group8.xyz.yzx), right_anti_dual.e42 * wedge.e4315) + float4((right_anti_dual.group8.xyz.yzx * wedge.group7.xyz.zxy), right_anti_dual.e43 * wedge.e4125) - (right_anti_dual.group9.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((float3(right_anti_dual.e1234) * wedge.group3.xyz), right_anti_dual.e4125 * wedge.e43) - float4((right_anti_dual.group4.xyz * wedge.group9.www), right_anti_dual.e423 * wedge.e415) - float4((right_anti_dual.group5.xyz.yzx * wedge.group9.zxy), right_anti_dual.e431 * wedge.e425) - float4((right_anti_dual.group7.xyz.yzx * wedge.group8.xyz.zxy), right_anti_dual.e412 * wedge.e435) - float4((right_anti_dual.group8.xyz.zxy * wedge.group7.xyz.yzx), right_anti_dual.e4235 * wedge.e41), 
            /* e5 */
            (right_anti_dual.e12345 * wedge.e5) + (right_anti_dual.e5 * wedge.e12345) + (right_anti_dual.e4235 * wedge.e15) + (right_anti_dual.e4315 * wedge.e25) + (right_anti_dual.e4125 * wedge.e35) + (right_anti_dual.e3215 * wedge.e45) - (right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125) - (right_anti_dual.e45 * wedge.e3215) - (right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435), 
            /* e15, e25, e35, e45 */
            float4((right_anti_dual.e415 * wedge.e3215) + (right_anti_dual.e315 * wedge.e4125) + (right_anti_dual.e4125 * wedge.e315) + (right_anti_dual.e3215 * wedge.e415), (right_anti_dual.e425 * wedge.e3215) + (right_anti_dual.e125 * wedge.e4235) + (right_anti_dual.e4235 * wedge.e125) + (right_anti_dual.e3215 * wedge.e425), (right_anti_dual.e435 * wedge.e3215) + (right_anti_dual.e235 * wedge.e4315) + (right_anti_dual.e4315 * wedge.e235) + (right_anti_dual.e3215 * wedge.e435), -(right_anti_dual.e435 * wedge.e4125) - (right_anti_dual.e4235 * wedge.e415) - (right_anti_dual.e4315 * wedge.e425) - (right_anti_dual.e4125 * wedge.e435)) + (float4(right_anti_dual.e12345) * wedge.group3) + (float4(wedge.e12345) * right_anti_dual.group3) - (wedge.group9.yzxx * float4(right_anti_dual.group8.xyz.zxy, right_anti_dual.e415)) - float4((wedge.group8.xyz.zxy * right_anti_dual.group9.yzx), right_anti_dual.e425 * wedge.e4315), 
            /* e41, e42, e43 */
            (float3(right_anti_dual.e12345) * wedge.group4.xyz) + (float3(right_anti_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_anti_dual.group4.xyz) + (float3(wedge.e1234) * right_anti_dual.group6.xyz) + (right_anti_dual.group7.xyz.zxy * wedge.group9.yzx) + (wedge.group7.xyz.zxy * right_anti_dual.group9.yzx) - (right_anti_dual.group7.xyz.yzx * wedge.group9.zxy) - (wedge.group7.xyz.yzx * right_anti_dual.group9.zxy), 
            /* e23, e31, e12 */
            (float3(right_anti_dual.e12345) * wedge.group5.xyz) + (float3(right_anti_dual.e3215) * wedge.group7.xyz) + (float3(right_anti_dual.e1234) * wedge.group8.xyz) + (float3(wedge.e12345) * right_anti_dual.group5.xyz) + (float3(wedge.e3215) * right_anti_dual.group7.xyz) + (float3(wedge.e1234) * right_anti_dual.group8.xyz) - (float3(right_anti_dual.e321) * wedge.group9.xyz) - (float3(wedge.e321) * right_anti_dual.group9.xyz), 
            /* e415, e425, e435, e321 */
            (float4(right_anti_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_anti_dual.group6) + (right_anti_dual.group9.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - float4((right_anti_dual.group9.zxy * wedge.group9.yzx), right_anti_dual.e1234 * wedge.e3215), 
            /* e423, e431, e412 */
            (float3(right_anti_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_anti_dual.group7.xyz) + (float3(wedge.e1234) * right_anti_dual.group9.xyz) - (float3(right_anti_dual.e1234) * wedge.group9.xyz), 
            /* e235, e315, e125 */
            (float3(right_anti_dual.e12345) * wedge.group8.xyz) + (float3(right_anti_dual.e3215) * wedge.group9.xyz) + (float3(wedge.e12345) * right_anti_dual.group8.xyz) - (float3(wedge.e3215) * right_anti_dual.group9.xyz), 
            /* e4235, e4315, e4125, e3215 */
            (float4(right_anti_dual.e12345) * wedge.group9) + (float4(wedge.e12345) * right_anti_dual.group9), 
            /* e1234 */
            (right_anti_dual.e12345 * wedge.e1234) + (right_anti_dual.e1234 * wedge.e12345)
        );
    }
}
public extension DipoleInversion {
    public DipoleInversion anti_reject_orthogonally_from(RoundPoint other) {
        CircleRotor wedge = CircleRotor(
            /* e423, e431, e412 */
            (float3(other.e4) * this.group1.xyz) + (this.group0.xyz.yzx * other.group0.zxy) - (this.group0.xyz.zxy * other.group0.yzx), 
            /* e415, e425, e435, e321 */
            float4((this.e41 * other.e5) + (this.e15 * other.e4), (this.e42 * other.e5) + (this.e25 * other.e4), (this.e43 * other.e5) + (this.e35 * other.e4), -(this.e31 * other.e2) - (this.e12 * other.e3)) - (this.group1.wwwx * other.group0.xyzx), 
            /* e235, e315, e125, e12345 */
            float4(this.e25 * other.e3 * -1.0, this.e35 * other.e1 * -1.0, this.e15 * other.e2 * -1.0, (this.e4315 * other.e2) + (this.e4125 * other.e3) + (this.e3215 * other.e4)) + (float4(other.e5) * float4(this.group1.xyz, this.e1234)) + (other.group0.yzxx * float4(this.group2.zxy, this.e4235))
        );
        Sphere right_anti_dual = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            (float3(right_anti_dual.e1234) * wedge.group1.xyz) + (wedge.group0.xyz.zxy * right_anti_dual.group0.yzx) - (wedge.group0.xyz.yzx * right_anti_dual.group0.zxy), 
            /* e23, e31, e12, e45 */
            float4((wedge.e423 * right_anti_dual.e3215) + (wedge.e235 * right_anti_dual.e1234), (wedge.e431 * right_anti_dual.e3215) + (wedge.e315 * right_anti_dual.e1234), (wedge.e412 * right_anti_dual.e3215) + (wedge.e125 * right_anti_dual.e1234), -(wedge.e425 * right_anti_dual.e4315) - (wedge.e435 * right_anti_dual.e4125)) - (wedge.group1.wwwx * right_anti_dual.group0.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_anti_dual.e3215) * wedge.group1.xyz) + (wedge.group2.yzx * right_anti_dual.group0.zxy) - (wedge.group2.zxy * right_anti_dual.group0.yzx)), wedge.e12345 * right_anti_dual.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_anti_dual.group0
        );
    }
}
public extension DipoleInversion {
    public DipoleInversion anti_reject_orthogonally_from(Scalar other) {
        DipoleInversion wedge = DipoleInversion(
            /* e41, e42, e43 */
            float3(other.scalar) * this.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(other.scalar) * this.group1, 
            /* e15, e25, e35, e1234 */
            float4(other.scalar) * this.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar) * this.group3
        );
        AntiScalar right_anti_dual = AntiScalar(
            /* e12345 */
            other.scalar
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            float3(right_anti_dual.e12345) * wedge.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(right_anti_dual.e12345) * wedge.group1, 
            /* e15, e25, e35, e1234 */
            float4(right_anti_dual.e12345) * wedge.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(right_anti_dual.e12345) * wedge.group3
        );
    }
}
public extension DipoleInversion {
    public VersorOdd anti_reject_orthogonally_from(VersorEven other) {
        CircleRotor wedge = CircleRotor(
            /* e423, e431, e412 */
            (float3(other.e4) * this.group1.xyz) + (this.group0.xyz.yzx * other.group3.zxy) - (this.group0.xyz.zxy * other.group3.yzx), 
            /* e415, e425, e435, e321 */
            float4((this.e41 * other.e5) + (this.e15 * other.e4), (this.e42 * other.e5) + (this.e25 * other.e4), (this.e43 * other.e5) + (this.e35 * other.e4), -(this.e31 * other.e2) - (this.e12 * other.e3)) - (this.group1.wwwx * other.group3.xyzx), 
            /* e235, e315, e125, e12345 */
            (float4(other.e5) * float4(this.group1.xyz, this.e1234)) + (other.group3.yzxx * float4(this.group2.zxy, this.e4235)) + float4(float3(0.0), (this.e4315 * other.e2) + (this.e4125 * other.e3) + (this.e3215 * other.e4) - (this.e42 * other.e315) - (this.e43 * other.e125) - (this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435) - (this.e45 * other.e321) - (this.e15 * other.e423) - (this.e25 * other.e431) - (this.e35 * other.e412)) - float4((this.group2.yzx * other.group3.zxy), this.e41 * other.e235)
        );
        VersorOdd right_anti_dual = VersorOdd(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4((wedge.e415 * right_anti_dual.e1234) + (wedge.e12345 * right_anti_dual.e41), (wedge.e425 * right_anti_dual.e1234) + (wedge.e12345 * right_anti_dual.e42), (wedge.e435 * right_anti_dual.e1234) + (wedge.e12345 * right_anti_dual.e43), -(wedge.e431 * right_anti_dual.e25) - (wedge.e412 * right_anti_dual.e35) - (wedge.e415 * right_anti_dual.e23) - (wedge.e425 * right_anti_dual.e31) - (wedge.e435 * right_anti_dual.e12) - (wedge.e321 * right_anti_dual.e45) - (wedge.e235 * right_anti_dual.e41) - (wedge.e315 * right_anti_dual.e42) - (wedge.e125 * right_anti_dual.e43)) + float4((wedge.group0.xyz.zxy * right_anti_dual.group3.yzx), wedge.e12345 * right_anti_dual.scalar) - float4((wedge.group0.xyz.yzx * right_anti_dual.group3.zxy), wedge.e423 * right_anti_dual.e15), 
            /* e23, e31, e12, e45 */
            float4((wedge.e235 * right_anti_dual.e1234) + (wedge.e12345 * right_anti_dual.e23), (wedge.e315 * right_anti_dual.e1234) + (wedge.e12345 * right_anti_dual.e31), (wedge.e125 * right_anti_dual.e1234) + (wedge.e12345 * right_anti_dual.e12), -(wedge.e425 * right_anti_dual.e4315) - (wedge.e435 * right_anti_dual.e4125)) + float4((wedge.group0.xyz * right_anti_dual.group3.www), wedge.e12345 * right_anti_dual.e45) - (wedge.group1.wwwx * right_anti_dual.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(wedge.e12345) * right_anti_dual.group2.xyz) + (float3(right_anti_dual.e3215) * wedge.group1.xyz) + (wedge.group2.yzx * right_anti_dual.group3.zxy) - (wedge.group2.zxy * right_anti_dual.group3.yzx)), wedge.e12345 * right_anti_dual.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_anti_dual.group3
        );
    }
}
public extension DipoleInversion {
    public VersorOdd anti_reject_orthogonally_from(VersorOdd other) {
        DipoleInversion wedge = DipoleInversion(
            /* e41, e42, e43 */
            float3(other.scalar) * this.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(other.scalar) * this.group1, 
            /* e15, e25, e35, e1234 */
            float4((float3(other.scalar) * this.group2.xyz), (this.e1234 * other.scalar) - (this.e41 * other.e23) - (this.e42 * other.e31) - (this.e43 * other.e12) - (this.e23 * other.e41) - (this.e31 * other.e42) - (this.e12 * other.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((this.e23 * other.e45) + (this.e45 * other.e23) + (this.e35 * other.e42) + (this.e4235 * other.scalar), (this.e31 * other.e45) + (this.e45 * other.e31) + (this.e15 * other.e43) + (this.e4315 * other.scalar), (this.e12 * other.e45) + (this.e45 * other.e12) + (this.e25 * other.e41) + (this.e4125 * other.scalar), -(this.e12 * other.e35) - (this.e15 * other.e23) - (this.e25 * other.e31) - (this.e35 * other.e12)) + float4((this.group0.xyz.yzx * other.group2.zxy), this.e3215 * other.scalar) - (other.group2.yzxx * float4(this.group0.xyz.zxy, this.e23)) - float4((this.group2.yzx * other.group0.zxy), this.e31 * other.e25)
        );
        VersorEven right_anti_dual = VersorEven(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            (wedge.group3.yzxy * float4(right_anti_dual.group0.zxy, right_anti_dual.e2)) + float4(float3(0.0), (wedge.e4125 * right_anti_dual.e3) + (wedge.e3215 * right_anti_dual.e4) - (wedge.e42 * right_anti_dual.e315) - (wedge.e43 * right_anti_dual.e125) - (wedge.e23 * right_anti_dual.e415) - (wedge.e31 * right_anti_dual.e425) - (wedge.e12 * right_anti_dual.e435) - (wedge.e45 * right_anti_dual.e321) - (wedge.e15 * right_anti_dual.e423) - (wedge.e25 * right_anti_dual.e431) - (wedge.e35 * right_anti_dual.e412)) + float4((wedge.group0.xyz * right_anti_dual.group0.www), wedge.e1234 * right_anti_dual.e5) + float4((wedge.group2.www * right_anti_dual.group1.xyz), wedge.e4235 * right_anti_dual.e1) - float4((wedge.group3.zxy * right_anti_dual.group0.yzx), wedge.e41 * right_anti_dual.e235), 
            /* e23, e31, e12, e45 */
            float4((wedge.e1234 * right_anti_dual.e235) + (wedge.e3215 * right_anti_dual.e423), (wedge.e1234 * right_anti_dual.e315) + (wedge.e3215 * right_anti_dual.e431), (wedge.e1234 * right_anti_dual.e125) + (wedge.e3215 * right_anti_dual.e412), -(wedge.e4315 * right_anti_dual.e425) - (wedge.e4125 * right_anti_dual.e435)) + (float4(right_anti_dual.e12345) * wedge.group1) - (wedge.group3.xyzx * right_anti_dual.group1.wwwx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(wedge.e3215) * right_anti_dual.group1.xyz) + (float3(right_anti_dual.e12345) * wedge.group2.xyz) + (wedge.group3.zxy * right_anti_dual.group2.yzx) - (wedge.group3.yzx * right_anti_dual.group2.zxy)), wedge.e1234 * right_anti_dual.e12345), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_anti_dual.e12345) * wedge.group3
        );
    }
}
public extension DualNum {
    // Fancy infix trick (first half)
    public AntiRejectOrthogonallyFromInfixPartial<DualNum> operator /(AntiRejectOrthogonallyFromInfix rhs) {
        return AntiRejectOrthogonallyFromInfixPartial<DualNum>(this);
    }
}
public extension AntiRejectOrthogonallyFromInfixPartial<DualNum> {
    // Fancy infix trick (second half)
    public VersorEven operator /(AntiCircleRotor rhs) {
        return this.a.anti_reject_orthogonally_from(rhs);
    }
}
public extension DualNum {
    public VersorEven anti_reject_orthogonally_from(AntiCircleRotor other) {
        Motor wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4(this.group0.xy.xx, this.e5, this.e12345) * float4(other.group0.xyz, other.scalar), 
            /* e235, e315, e125, e5 */
            float4(this.e5) * float4(other.group1.xyz, other.scalar)
        );
        CircleRotor right_anti_dual = CircleRotor(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(wedge.e12345) * float4(right_anti_dual.group0.xyz, right_anti_dual.e12345), 
            /* e415, e425, e435, e321 */
            float4(((float3(right_anti_dual.e12345) * wedge.group0.xyz) + (float3(wedge.e12345) * right_anti_dual.group1.xyz)), right_anti_dual.e321 * wedge.e12345), 
            /* e235, e315, e125, e5 */
            float4(right_anti_dual.e12345 * wedge.e235, right_anti_dual.e12345 * wedge.e315, right_anti_dual.e12345 * wedge.e125, -(right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435)) + (right_anti_dual.group2 * float4(wedge.group0.www, wedge.e5)), 
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e412 * wedge.e315) + (right_anti_dual.e321 * wedge.e415), (right_anti_dual.e423 * wedge.e125) + (right_anti_dual.e321 * wedge.e425), (right_anti_dual.e431 * wedge.e235) + (right_anti_dual.e321 * wedge.e435), -(right_anti_dual.e431 * wedge.e425) - (right_anti_dual.e412 * wedge.e435)) - float4((right_anti_dual.group0.xyz.yzx * wedge.group1.zxy), right_anti_dual.e423 * wedge.e415)
        );
    }
}
public extension DualNum {
    public AntiDipoleInversion anti_reject_orthogonally_from(AntiDipoleInversion other) {
        Flector wedge = Flector(
            /* e15, e25, e35, e45 */
            float4(this.e5) * float4(other.group3.xyz, other.e4) * float4(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e5) * float4(other.group0.xyz, other.e321) * float4(-1.0)
        );
        DipoleInversion right_anti_dual = DipoleInversion(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(right_anti_dual.e1234) * wedge.group1.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            float4(((right_anti_dual.group3.yzx * wedge.group1.zxy) - (right_anti_dual.group3.zxy * wedge.group1.yzx)), right_anti_dual.e1234 * wedge.e3215 * -1.0), 
            /* e235, e315, e125, e4 */
            (wedge.group1.xyzx * float4(right_anti_dual.group3.www, right_anti_dual.e41)) + float4(float3(0.0), (right_anti_dual.e42 * wedge.e4315) + (right_anti_dual.e43 * wedge.e4125)) - float4((wedge.group1.www * right_anti_dual.group3.xyz), right_anti_dual.e1234 * wedge.e45), 
            /* e1, e2, e3, e5 */
            float4(float3(0.0), (right_anti_dual.e4315 * wedge.e25) + (right_anti_dual.e4125 * wedge.e35) + (right_anti_dual.e3215 * wedge.e45) - (right_anti_dual.e35 * wedge.e4125)) + float4((right_anti_dual.group1.zxy * wedge.group1.yzx), right_anti_dual.e4235 * wedge.e15) - (float4(wedge.e3215) * float4(right_anti_dual.group0.xyz, right_anti_dual.e45)) - (right_anti_dual.group2.wwwy * float4(wedge.group0.xyz, wedge.e4315)) - (wedge.group1.zxyx * float4(right_anti_dual.group1.yzx, right_anti_dual.e15))
        );
    }
}
public extension DualNum {
    public DualNum anti_reject_orthogonally_from(AntiDualNum other) {
        DualNum wedge = DualNum(
            /* e5, e12345 */
            float2(other.scalar) * this.group0.xy
        );
        DualNum right_anti_dual = DualNum(
            /* e5, e12345 */
            other.group0.xy
        );
        return DualNum(
            /* e5, e12345 */
            float2((right_anti_dual.e5 * wedge.e12345) + (right_anti_dual.e12345 * wedge.e5), right_anti_dual.e12345 * wedge.e12345)
        );
    }
}
public extension DualNum {
    public DualNum anti_reject_orthogonally_from(AntiFlatPoint other) {
        return DualNum(
            /* e5, e12345 */
            float2(float4(other.group0.xyz, other.e321 * -1.0)[3] * other.e321 * this.e5 * -1.0, 1.0) * float2(-1.0, 0.0)
        );
    }
}
public extension DualNum {
    public Motor anti_reject_orthogonally_from(AntiFlector other) {
        Flector wedge = Flector(
            /* e15, e25, e35, e45 */
            float4(this.group0.xy.xx, this.e5, 0.0) * float4(float3(1.0), 0.0) * float4(other.group1.xyz, 0.0) * float4(-1.0, -1.0, -1.0, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(float3(0.0), other.e321 * this.e5 * -1.0)
        );
        Flector right_anti_dual = Flector(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4(((right_anti_dual.group1.yzx * wedge.group1.zxy) - (right_anti_dual.group1.zxy * wedge.group1.yzx)), 0.0), 
            /* e235, e315, e125, e5 */
            (right_anti_dual.group1.wwwx * float4(wedge.group1.xyz, wedge.e15)) + float4(float3(0.0), (right_anti_dual.e4315 * wedge.e25) + (right_anti_dual.e4125 * wedge.e35) + (right_anti_dual.e3215 * wedge.e45) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125) - (right_anti_dual.e45 * wedge.e3215)) - (wedge.group1.wwwx * float4(right_anti_dual.group1.xyz, right_anti_dual.e15))
        );
    }
}
public extension DualNum {
    public DualNum anti_reject_orthogonally_from(AntiLine other) {
        AntiFlatPoint wedge = AntiFlatPoint(
            /* e235, e315, e125, e321 */
            float4(this.group0.xy.xx, this.e5, 0.0) * float4(float3(1.0), 0.0) * float4(other.group0.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        Line right_anti_dual = Line(
            /* e415, e425, e435 */
            other.group0.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group1.xyz * float3(-1.0)
        );
        return DualNum(
            /* e5, e12345 */
            float2(-(wedge.e235 * right_anti_dual.e415) - (wedge.e315 * right_anti_dual.e425) - (wedge.e125 * right_anti_dual.e435), 0.0)
        );
    }
}
public extension DualNum {
    public Motor anti_reject_orthogonally_from(AntiMotor other) {
        Motor wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4(float3(0.0), other.scalar * this.e12345), 
            /* e235, e315, e125, e5 */
            float4(this.e5) * other.group0
        );
        Motor right_anti_dual = Motor(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4(((float3(right_anti_dual.e12345) * wedge.group0.xyz) + (float3(wedge.e12345) * right_anti_dual.group0.xyz)), right_anti_dual.e12345 * wedge.e12345), 
            /* e235, e315, e125, e5 */
            (float4(right_anti_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_anti_dual.group1) + float4(float3(0.0), -(right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435))
        );
    }
}
public extension DualNum {
    public DualNum anti_reject_orthogonally_from(AntiPlane other) {
        FlatPoint wedge = FlatPoint(
            /* e15, e25, e35, e45 */
            float4(this.group0.xy.xx, this.e5, 0.0) * float4(float3(1.0), 0.0) * float4(other.group0.xyz, 0.0) * float4(-1.0, -1.0, -1.0, 0.0)
        );
        Plane right_anti_dual = Plane(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return DualNum(
            /* e5, e12345 */
            float2((wedge.e15 * right_anti_dual.e4235) + (wedge.e25 * right_anti_dual.e4315) + (wedge.e35 * right_anti_dual.e4125) + (wedge.e45 * right_anti_dual.e3215), 0.0)
        );
    }
}
public extension DualNum {
    public RoundPoint anti_reject_orthogonally_from(Circle other) {
        Plane wedge = Plane(
            /* e4235, e4315, e4125, e3215 */
            float4(this.e5) * float4(other.group0.xyz, other.e321) * float4(-1.0)
        );
        Dipole right_anti_dual = Dipole(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35 */
            other.group2.xyz
        );
        return RoundPoint(
            /* e1, e2, e3, e4 */
            float4(-(right_anti_dual.e41 * wedge.e3215) - (right_anti_dual.e31 * wedge.e4125), -(right_anti_dual.e42 * wedge.e3215) - (right_anti_dual.e12 * wedge.e4235), -(right_anti_dual.e43 * wedge.e3215) - (right_anti_dual.e23 * wedge.e4315), (right_anti_dual.e42 * wedge.e4315) + (right_anti_dual.e43 * wedge.e4125)) + (wedge.group0.yzxx * float4(right_anti_dual.group1.zxy, right_anti_dual.e41)), 
            /* e5 */
            -(right_anti_dual.e45 * wedge.e3215) - (right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125)
        );
    }
}
public extension DualNum {
    public RoundPoint anti_reject_orthogonally_from(CircleRotor other) {
        Plane wedge = Plane(
            /* e4235, e4315, e4125, e3215 */
            float4(this.e5) * float4(other.group0.xyz, other.e321) * float4(-1.0)
        );
        AntiCircleRotor right_anti_dual = AntiCircleRotor(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return RoundPoint(
            /* e1, e2, e3, e4 */
            float4(-(right_anti_dual.e41 * wedge.e3215) - (right_anti_dual.e31 * wedge.e4125), -(right_anti_dual.e42 * wedge.e3215) - (right_anti_dual.e12 * wedge.e4235), -(right_anti_dual.e43 * wedge.e3215) - (right_anti_dual.e23 * wedge.e4315), (right_anti_dual.e42 * wedge.e4315) + (right_anti_dual.e43 * wedge.e4125)) + (wedge.group0.yzxx * float4(right_anti_dual.group1.zxy, right_anti_dual.e41)), 
            /* e5 */
            -(right_anti_dual.e45 * wedge.e3215) - (right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125)
        );
    }
}
public extension DualNum {
    public RoundPoint anti_reject_orthogonally_from(Dipole other) {
        Line wedge = Line(
            /* e415, e425, e435 */
            float3(this.e5) * other.group0.xyz, 
            /* e235, e315, e125 */
            float3(this.e5) * other.group1.xyz
        );
        Circle right_anti_dual = Circle(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125 */
            other.group2.xyz * float3(-1.0)
        );
        return RoundPoint(
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e412 * wedge.e315) + (right_anti_dual.e321 * wedge.e415), (right_anti_dual.e423 * wedge.e125) + (right_anti_dual.e321 * wedge.e425), (right_anti_dual.e431 * wedge.e235) + (right_anti_dual.e321 * wedge.e435), -(right_anti_dual.e431 * wedge.e425) - (right_anti_dual.e412 * wedge.e435)) - float4((right_anti_dual.group0.xyz.yzx * wedge.group1.xyz.zxy), right_anti_dual.e423 * wedge.e415), 
            /* e5 */
            -(right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435)
        );
    }
}
public extension DualNum {
    public AntiDipoleInversion anti_reject_orthogonally_from(DipoleInversion other) {
        Motor wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4(this.e5) * float4(other.group0.xyz, other.e1234), 
            /* e235, e315, e125, e5 */
            float4(this.group0.xy.xx, this.e5, 0.0) * float4(float3(1.0), 0.0) * float4(other.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        AntiDipoleInversion right_anti_dual = AntiDipoleInversion(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(wedge.e12345) * right_anti_dual.group1, 
            /* e235, e315, e125, e4 */
            float4((float3(wedge.e12345) * right_anti_dual.group2.xyz), (right_anti_dual.e4 * wedge.e12345) - (right_anti_dual.e423 * wedge.e415) - (right_anti_dual.e431 * wedge.e425) - (right_anti_dual.e412 * wedge.e435)), 
            /* e1, e2, e3, e5 */
            float4((right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e1 * wedge.e12345), (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e2 * wedge.e12345), (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e3 * wedge.e12345), -(right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435)) + float4((right_anti_dual.group0.xyz.zxy * wedge.group1.yzx), right_anti_dual.e5 * wedge.e12345) - (wedge.group1.zxyx * float4(right_anti_dual.group0.xyz.yzx, right_anti_dual.e415))
        );
    }
}
public extension DualNum {
    public MultiVector anti_reject_orthogonally_from(MultiVector other) {
        MultiVector wedge = MultiVector(
            /* scalar, e12345 */
            float2(0.0, (this.e5 * other.e1234) + (this.e12345 * other.scalar)), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5 */
            this.e5 * other.scalar, 
            /* e15, e25, e35, e45 */
            float4(this.e5) * other.group1 * float4(-1.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(this.group0.xy.xx, this.e5, 0.0) * float4(float3(1.0), 0.0) * float4(other.group4.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            float3(this.e5) * other.group5.xyz, 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e5) * float4(other.group7.xyz, other.e321) * float4(-1.0), 
            /* e1234 */
            0.0
        );
        MultiVector right_anti_dual = MultiVector(
            /* scalar, e12345 */
            other.group0.xy.yx * float2(-1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215, 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43 */
            other.group7.xyz, 
            /* e23, e31, e12 */
            other.group6.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412 */
            other.group4.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group3.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2((right_anti_dual.scalar * wedge.e12345) + (right_anti_dual.e12345 * wedge.scalar) + (right_anti_dual.e1 * wedge.e4235) + (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) + (right_anti_dual.e4 * wedge.e3215) + (right_anti_dual.e5 * wedge.e1234) + (right_anti_dual.e4235 * wedge.e1) + (right_anti_dual.e4315 * wedge.e2) + (right_anti_dual.e4125 * wedge.e3) + (right_anti_dual.e3215 * wedge.e4) + (right_anti_dual.e1234 * wedge.e5) - (right_anti_dual.e15 * wedge.e423) - (right_anti_dual.e25 * wedge.e431) - (right_anti_dual.e35 * wedge.e412) - (right_anti_dual.e45 * wedge.e321) - (right_anti_dual.e41 * wedge.e235) - (right_anti_dual.e42 * wedge.e315) - (right_anti_dual.e43 * wedge.e125) - (right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e321 * wedge.e45) - (right_anti_dual.e423 * wedge.e15) - (right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43), right_anti_dual.e12345 * wedge.e12345), 
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e15 * wedge.e1234) + (right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e4125 * wedge.e31), (right_anti_dual.e25 * wedge.e1234) + (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e4235 * wedge.e12), (right_anti_dual.e35 * wedge.e1234) + (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e4315 * wedge.e23), -(right_anti_dual.e415 * wedge.e423) - (right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412) - (right_anti_dual.e1234 * wedge.e45)) + (float4(right_anti_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_anti_dual.group1) + (wedge.group9.yzxx * float4(right_anti_dual.group5.xyz.zxy, right_anti_dual.e41)) + float4((wedge.group4.xyz * right_anti_dual.group9.www), right_anti_dual.e45 * wedge.e1234) + float4((right_anti_dual.group7.xyz.zxy * wedge.group8.xyz.yzx), right_anti_dual.e42 * wedge.e4315) + float4((right_anti_dual.group8.xyz.yzx * wedge.group7.xyz.zxy), right_anti_dual.e43 * wedge.e4125) - (right_anti_dual.group9.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((float3(right_anti_dual.e1234) * wedge.group3.xyz), right_anti_dual.e4125 * wedge.e43) - float4((right_anti_dual.group4.xyz * wedge.group9.www), right_anti_dual.e423 * wedge.e415) - float4((right_anti_dual.group5.xyz.yzx * wedge.group9.zxy), right_anti_dual.e431 * wedge.e425) - float4((right_anti_dual.group7.xyz.yzx * wedge.group8.xyz.zxy), right_anti_dual.e412 * wedge.e435) - float4((right_anti_dual.group8.xyz.zxy * wedge.group7.xyz.yzx), right_anti_dual.e4235 * wedge.e41), 
            /* e5 */
            (right_anti_dual.e12345 * wedge.e5) + (right_anti_dual.e5 * wedge.e12345) + (right_anti_dual.e4235 * wedge.e15) + (right_anti_dual.e4315 * wedge.e25) + (right_anti_dual.e4125 * wedge.e35) + (right_anti_dual.e3215 * wedge.e45) - (right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125) - (right_anti_dual.e45 * wedge.e3215) - (right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435), 
            /* e15, e25, e35, e45 */
            float4((right_anti_dual.e415 * wedge.e3215) + (right_anti_dual.e315 * wedge.e4125) + (right_anti_dual.e4125 * wedge.e315) + (right_anti_dual.e3215 * wedge.e415), (right_anti_dual.e425 * wedge.e3215) + (right_anti_dual.e125 * wedge.e4235) + (right_anti_dual.e4235 * wedge.e125) + (right_anti_dual.e3215 * wedge.e425), (right_anti_dual.e435 * wedge.e3215) + (right_anti_dual.e235 * wedge.e4315) + (right_anti_dual.e4315 * wedge.e235) + (right_anti_dual.e3215 * wedge.e435), -(right_anti_dual.e435 * wedge.e4125) - (right_anti_dual.e4235 * wedge.e415) - (right_anti_dual.e4315 * wedge.e425) - (right_anti_dual.e4125 * wedge.e435)) + (float4(right_anti_dual.e12345) * wedge.group3) + (float4(wedge.e12345) * right_anti_dual.group3) - (wedge.group9.yzxx * float4(right_anti_dual.group8.xyz.zxy, right_anti_dual.e415)) - float4((wedge.group8.xyz.zxy * right_anti_dual.group9.yzx), right_anti_dual.e425 * wedge.e4315), 
            /* e41, e42, e43 */
            (float3(right_anti_dual.e12345) * wedge.group4.xyz) + (float3(right_anti_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_anti_dual.group4.xyz) + (float3(wedge.e1234) * right_anti_dual.group6.xyz) + (right_anti_dual.group7.xyz.zxy * wedge.group9.yzx) + (wedge.group7.xyz.zxy * right_anti_dual.group9.yzx) - (right_anti_dual.group7.xyz.yzx * wedge.group9.zxy) - (wedge.group7.xyz.yzx * right_anti_dual.group9.zxy), 
            /* e23, e31, e12 */
            (float3(right_anti_dual.e12345) * wedge.group5.xyz) + (float3(right_anti_dual.e3215) * wedge.group7.xyz) + (float3(right_anti_dual.e1234) * wedge.group8.xyz) + (float3(wedge.e12345) * right_anti_dual.group5.xyz) + (float3(wedge.e3215) * right_anti_dual.group7.xyz) + (float3(wedge.e1234) * right_anti_dual.group8.xyz) - (float3(right_anti_dual.e321) * wedge.group9.xyz) - (float3(wedge.e321) * right_anti_dual.group9.xyz), 
            /* e415, e425, e435, e321 */
            (float4(right_anti_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_anti_dual.group6) + (right_anti_dual.group9.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - float4((right_anti_dual.group9.zxy * wedge.group9.yzx), right_anti_dual.e1234 * wedge.e3215), 
            /* e423, e431, e412 */
            (float3(right_anti_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_anti_dual.group7.xyz) + (float3(wedge.e1234) * right_anti_dual.group9.xyz) - (float3(right_anti_dual.e1234) * wedge.group9.xyz), 
            /* e235, e315, e125 */
            (float3(right_anti_dual.e12345) * wedge.group8.xyz) + (float3(right_anti_dual.e3215) * wedge.group9.xyz) + (float3(wedge.e12345) * right_anti_dual.group8.xyz) - (float3(wedge.e3215) * right_anti_dual.group9.xyz), 
            /* e4235, e4315, e4125, e3215 */
            (float4(right_anti_dual.e12345) * wedge.group9) + (float4(wedge.e12345) * right_anti_dual.group9), 
            /* e1234 */
            (right_anti_dual.e12345 * wedge.e1234) + (right_anti_dual.e1234 * wedge.e12345)
        );
    }
}
public extension DualNum {
    public RoundPoint anti_reject_orthogonally_from(RoundPoint other) {
        FlatPoint wedge = FlatPoint(
            /* e15, e25, e35, e45 */
            float4(this.e5) * other.group0 * float4(-1.0)
        );
        Sphere right_anti_dual = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        return RoundPoint(
            /* e1, e2, e3, e4 */
            float4(right_anti_dual.e1234) * wedge.group0 * float4(-1.0), 
            /* e5 */
            (wedge.e15 * right_anti_dual.e4235) + (wedge.e25 * right_anti_dual.e4315) + (wedge.e35 * right_anti_dual.e4125) + (wedge.e45 * right_anti_dual.e3215)
        );
    }
}
public extension DualNum {
    public DualNum anti_reject_orthogonally_from(Scalar other) {
        return DualNum(
            /* e5, e12345 */
            float2(other.scalar) * float2(this.e5 * other.scalar, this.e12345 * other.scalar)
        );
    }
}
public extension DualNum {
    public RoundPoint anti_reject_orthogonally_from(Sphere other) {
        AntiScalar wedge = AntiScalar(
            /* e12345 */
            this.e5 * other.e1234
        );
        RoundPoint right_anti_dual = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(other.group0.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215
        );
        return RoundPoint(
            /* e1, e2, e3, e4 */
            float4(wedge.e12345) * right_anti_dual.group0, 
            /* e5 */
            wedge.e12345 * right_anti_dual.e5
        );
    }
}
public extension DualNum {
    public AntiDipoleInversion anti_reject_orthogonally_from(VersorEven other) {
        Flector wedge = Flector(
            /* e15, e25, e35, e45 */
            float4(this.e5) * other.group3 * float4(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e5) * float4(other.group0.xyz, other.e321) * float4(-1.0)
        );
        VersorOdd right_anti_dual = VersorOdd(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(right_anti_dual.e1234) * wedge.group1.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            float4(((wedge.group1.zxy * right_anti_dual.group3.yzx) - (wedge.group1.yzx * right_anti_dual.group3.zxy)), wedge.e3215 * right_anti_dual.e1234 * -1.0), 
            /* e235, e315, e125, e4 */
            (wedge.group1.xyzx * float4(right_anti_dual.group3.www, right_anti_dual.e41)) + float4(float3(0.0), (wedge.e4315 * right_anti_dual.e42) + (wedge.e4125 * right_anti_dual.e43)) - float4((wedge.group1.www * right_anti_dual.group3.xyz), wedge.e45 * right_anti_dual.e1234), 
            /* e1, e2, e3, e5 */
            float4(float3(0.0), (wedge.e25 * right_anti_dual.e4315) + (wedge.e35 * right_anti_dual.e4125) + (wedge.e45 * right_anti_dual.e3215) - (wedge.e3215 * right_anti_dual.e45)) + float4((wedge.group1.yzx * right_anti_dual.group1.zxy), wedge.e15 * right_anti_dual.e4235) - (wedge.group1.zxyy * float4(right_anti_dual.group1.yzx, right_anti_dual.e25)) - (wedge.group1.wwwz * float4(right_anti_dual.group0.xyz, right_anti_dual.e35)) - (right_anti_dual.group2.wwwx * float4(wedge.group0.xyz, wedge.e4235))
        );
    }
}
public extension DualNum {
    public VersorEven anti_reject_orthogonally_from(VersorOdd other) {
        Motor wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4(this.group0.xy.xx, this.e5, (this.e5 * other.e1234) + (this.e12345 * other.scalar)) * float4(other.group0.xyz, 1.0), 
            /* e235, e315, e125, e5 */
            float4(this.e5) * float4(other.group1.xyz, other.scalar)
        );
        VersorEven right_anti_dual = VersorEven(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(wedge.e12345) * right_anti_dual.group0, 
            /* e415, e425, e435, e321 */
            float4(((float3(wedge.e12345) * right_anti_dual.group1.xyz) + (float3(right_anti_dual.e12345) * wedge.group0.xyz)), wedge.e12345 * right_anti_dual.e321), 
            /* e235, e315, e125, e5 */
            (float4(wedge.e12345) * right_anti_dual.group2) + (float4(right_anti_dual.e12345) * wedge.group1) + float4(float3(0.0), -(wedge.e415 * right_anti_dual.e235) - (wedge.e425 * right_anti_dual.e315) - (wedge.e435 * right_anti_dual.e125) - (wedge.e235 * right_anti_dual.e415) - (wedge.e315 * right_anti_dual.e425) - (wedge.e125 * right_anti_dual.e435)), 
            /* e1, e2, e3, e4 */
            float4((wedge.e12345 * right_anti_dual.e1) + (wedge.e315 * right_anti_dual.e412), (wedge.e12345 * right_anti_dual.e2) + (wedge.e125 * right_anti_dual.e423), (wedge.e12345 * right_anti_dual.e3) + (wedge.e235 * right_anti_dual.e431), -(wedge.e425 * right_anti_dual.e431) - (wedge.e435 * right_anti_dual.e412)) + (wedge.group0 * float4(right_anti_dual.group1.www, right_anti_dual.e4)) - (right_anti_dual.group0.yzxx * float4(wedge.group1.zxy, wedge.e415))
        );
    }
}
public extension FlatPoint {
    // Fancy infix trick (first half)
    public AntiRejectOrthogonallyFromInfixPartial<FlatPoint> operator /(AntiRejectOrthogonallyFromInfix rhs) {
        return AntiRejectOrthogonallyFromInfixPartial<FlatPoint>(this);
    }
}
public extension AntiRejectOrthogonallyFromInfixPartial<FlatPoint> {
    // Fancy infix trick (second half)
    public VersorOdd operator /(AntiCircleRotor rhs) {
        return this.a.anti_reject_orthogonally_from(rhs);
    }
}
public extension FlatPoint {
    public VersorOdd anti_reject_orthogonally_from(AntiCircleRotor other) {
        Flector wedge = Flector(
            /* e15, e25, e35, e45 */
            float4(other.scalar) * this.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e42 * this.e35) + (other.e23 * this.e45), (other.e43 * this.e15) + (other.e31 * this.e45), (other.e41 * this.e25) + (other.e12 * this.e45), -(other.e31 * this.e25) - (other.e12 * this.e35)) - (this.group0.yzxx * float4(other.group0.xyz.zxy, other.e23))
        );
        CircleRotor right_anti_dual = CircleRotor(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(right_anti_dual.e412 * wedge.e4315, right_anti_dual.e423 * wedge.e4125, right_anti_dual.e431 * wedge.e4235, -(right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e321 * wedge.e45)) - float4((right_anti_dual.group0.xyz.yzx * wedge.group1.zxy), right_anti_dual.e423 * wedge.e15), 
            /* e23, e31, e12, e45 */
            float4(float3(0.0), -(right_anti_dual.e425 * wedge.e4315) - (right_anti_dual.e435 * wedge.e4125)) + float4((right_anti_dual.group0.xyz * wedge.group1.www), right_anti_dual.e12345 * wedge.e45) - (right_anti_dual.group1.wwwx * wedge.group1.xyzx), 
            /* e15, e25, e35, e1234 */
            float4((float3(right_anti_dual.e12345) * wedge.group0.xyz), 0.0) + float4((float3(wedge.e3215) * right_anti_dual.group1.xyz), 0.0) + float4((right_anti_dual.group2.yzx * wedge.group1.zxy), 0.0) - float4((right_anti_dual.group2.zxy * wedge.group1.yzx), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_anti_dual.e12345) * wedge.group1
        );
    }
}
public extension FlatPoint {
    public VersorOdd anti_reject_orthogonally_from(AntiDipoleInversion other) {
        Motor wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4(other.e4 * this.e15, other.e4 * this.e25, other.e4 * this.e35, -(other.e431 * this.e25) - (other.e412 * this.e35) - (other.e321 * this.e45)) - (this.group0.wwwx * float4(other.group3.xyz, other.e423)), 
            /* e235, e315, e125, e5 */
            float4(((other.group3.yzx * this.group0.zxy) - (other.group3.zxy * this.group0.yzx)), 0.0)
        );
        DipoleInversion right_anti_dual = DipoleInversion(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(right_anti_dual.e1234 * wedge.e415, right_anti_dual.e1234 * wedge.e425, right_anti_dual.e1234 * wedge.e435, -(right_anti_dual.e41 * wedge.e235) - (right_anti_dual.e42 * wedge.e315) - (right_anti_dual.e43 * wedge.e125) - (right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435)) + float4((right_anti_dual.group0.xyz * wedge.group0.www), right_anti_dual.e1234 * wedge.e5), 
            /* e23, e31, e12, e45 */
            float4(right_anti_dual.e1234 * wedge.e235, right_anti_dual.e1234 * wedge.e315, right_anti_dual.e1234 * wedge.e125, -(right_anti_dual.e4235 * wedge.e415) - (right_anti_dual.e4315 * wedge.e425) - (right_anti_dual.e4125 * wedge.e435)) + (float4(wedge.e12345) * right_anti_dual.group1), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_anti_dual.e3215) * wedge.group0.xyz) + (float3(wedge.e12345) * right_anti_dual.group2.xyz) + (right_anti_dual.group3.zxy * wedge.group1.yzx) - (right_anti_dual.group3.yzx * wedge.group1.zxy)), right_anti_dual.e1234 * wedge.e12345), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_anti_dual.group3
        );
    }
}
public extension FlatPoint {
    public FlatPoint anti_reject_orthogonally_from(AntiDualNum other) {
        return FlatPoint(
            /* e15, e25, e35, e45 */
            float4(other.scalar) * float4(other.scalar * this.e15, other.scalar * this.e25, other.scalar * this.e35, other.scalar * this.e45)
        );
    }
}
public extension FlatPoint {
    public FlatPoint anti_reject_orthogonally_from(AntiFlatPoint other) {
        return FlatPoint(
            /* e15, e25, e35, e45 */
            float4(other.e321 * this.e45 * -1.0) * float4(other.group0.xyz, other.e321 * -1.0)
        );
    }
}
public extension FlatPoint {
    public Flector anti_reject_orthogonally_from(AntiFlector other) {
        Motor wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4(this.e45) * float4(other.group1.xyz, other.e321) * float4(-1.0), 
            /* e235, e315, e125, e5 */
            float4(((other.group1.yzx * this.group0.zxy) - (other.group1.zxy * this.group0.yzx)), 0.0)
        );
        Flector right_anti_dual = Flector(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return Flector(
            /* e15, e25, e35, e45 */
            float4((right_anti_dual.e4125 * wedge.e315) + (right_anti_dual.e3215 * wedge.e415), (right_anti_dual.e4235 * wedge.e125) + (right_anti_dual.e3215 * wedge.e425), (right_anti_dual.e4315 * wedge.e235) + (right_anti_dual.e3215 * wedge.e435), -(right_anti_dual.e4315 * wedge.e425) - (right_anti_dual.e4125 * wedge.e435)) + (float4(wedge.e12345) * right_anti_dual.group0) - (right_anti_dual.group1.yzxx * float4(wedge.group1.zxy, wedge.e415)), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_anti_dual.group1
        );
    }
}
public extension FlatPoint {
    public FlatPoint anti_reject_orthogonally_from(AntiLine other) {
        Plane wedge = Plane(
            /* e4235, e4315, e4125, e3215 */
            float4((float3(this.e45) * other.group0.xyz), -(other.e23 * this.e15) - (other.e31 * this.e25) - (other.e12 * this.e35))
        );
        Line right_anti_dual = Line(
            /* e415, e425, e435 */
            other.group0.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group1.xyz * float3(-1.0)
        );
        return FlatPoint(
            /* e15, e25, e35, e45 */
            float4((right_anti_dual.e415 * wedge.e3215) + (right_anti_dual.e315 * wedge.e4125), (right_anti_dual.e425 * wedge.e3215) + (right_anti_dual.e125 * wedge.e4235), (right_anti_dual.e435 * wedge.e3215) + (right_anti_dual.e235 * wedge.e4315), -(right_anti_dual.e425 * wedge.e4315) - (right_anti_dual.e435 * wedge.e4125)) - (wedge.group0.yzxx * float4(right_anti_dual.group1.xyz.zxy, right_anti_dual.e415))
        );
    }
}
public extension FlatPoint {
    public Flector anti_reject_orthogonally_from(AntiMotor other) {
        Flector wedge = Flector(
            /* e15, e25, e35, e45 */
            float4(other.scalar) * this.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4((float3(this.e45) * other.group0.xyz), -(other.e23 * this.e15) - (other.e31 * this.e25) - (other.e12 * this.e35))
        );
        Motor right_anti_dual = Motor(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return Flector(
            /* e15, e25, e35, e45 */
            float4((wedge.e4125 * right_anti_dual.e315) + (wedge.e3215 * right_anti_dual.e415), (wedge.e4235 * right_anti_dual.e125) + (wedge.e3215 * right_anti_dual.e425), (wedge.e4315 * right_anti_dual.e235) + (wedge.e3215 * right_anti_dual.e435), -(wedge.e4315 * right_anti_dual.e425) - (wedge.e4125 * right_anti_dual.e435)) + (float4(right_anti_dual.e12345) * wedge.group0) - (wedge.group1.yzxx * float4(right_anti_dual.group1.zxy, right_anti_dual.e415)), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_anti_dual.e12345) * wedge.group1
        );
    }
}
public extension FlatPoint {
    public FlatPoint anti_reject_orthogonally_from(AntiPlane other) {
        Line wedge = Line(
            /* e415, e425, e435 */
            float3(this.e45) * other.group0.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            (other.group0.yzx * this.group0.zxy) - (other.group0.zxy * this.group0.yzx)
        );
        Plane right_anti_dual = Plane(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return FlatPoint(
            /* e15, e25, e35, e45 */
            float4((wedge.e415 * right_anti_dual.e3215) + (wedge.e315 * right_anti_dual.e4125), (wedge.e425 * right_anti_dual.e3215) + (wedge.e125 * right_anti_dual.e4235), (wedge.e435 * right_anti_dual.e3215) + (wedge.e235 * right_anti_dual.e4315), -(wedge.e425 * right_anti_dual.e4315) - (wedge.e435 * right_anti_dual.e4125)) - (right_anti_dual.group0.yzxx * float4(wedge.group1.xyz.zxy, wedge.e415))
        );
    }
}
public extension FlatPoint {
    public Dipole anti_reject_orthogonally_from(Circle other) {
        AntiScalar wedge = AntiScalar(
            /* e12345 */
            -(other.e423 * this.e15) - (other.e431 * this.e25) - (other.e412 * this.e35) - (other.e321 * this.e45)
        );
        Dipole right_anti_dual = Dipole(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35 */
            other.group2.xyz
        );
        return Dipole(
            /* e41, e42, e43 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(wedge.e12345) * right_anti_dual.group1, 
            /* e15, e25, e35 */
            float3(wedge.e12345) * right_anti_dual.group2.xyz
        );
    }
}
public extension FlatPoint {
    public AntiCircleRotor anti_reject_orthogonally_from(CircleRotor other) {
        AntiScalar wedge = AntiScalar(
            /* e12345 */
            -(other.e423 * this.e15) - (other.e431 * this.e25) - (other.e412 * this.e35) - (other.e321 * this.e45)
        );
        AntiCircleRotor right_anti_dual = AntiCircleRotor(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiCircleRotor(
            /* e41, e42, e43 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(wedge.e12345) * right_anti_dual.group1, 
            /* e15, e25, e35, scalar */
            float4(wedge.e12345) * right_anti_dual.group2
        );
    }
}
public extension FlatPoint {
    public Dipole anti_reject_orthogonally_from(Dipole other) {
        Plane wedge = Plane(
            /* e4235, e4315, e4125, e3215 */
            float4((other.e42 * this.e35) + (other.e23 * this.e45), (other.e43 * this.e15) + (other.e31 * this.e45), (other.e41 * this.e25) + (other.e12 * this.e45), -(other.e31 * this.e25) - (other.e12 * this.e35)) - (this.group0.yzxx * float4(other.group0.xyz.zxy, other.e23))
        );
        Circle right_anti_dual = Circle(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125 */
            other.group2.xyz * float3(-1.0)
        );
        return Dipole(
            /* e41, e42, e43 */
            (right_anti_dual.group0.xyz.zxy * wedge.group0.yzx) - (right_anti_dual.group0.xyz.yzx * wedge.group0.zxy), 
            /* e23, e31, e12, e45 */
            float4(right_anti_dual.e423 * wedge.e3215, right_anti_dual.e431 * wedge.e3215, right_anti_dual.e412 * wedge.e3215, -(right_anti_dual.e425 * wedge.e4315) - (right_anti_dual.e435 * wedge.e4125)) - (right_anti_dual.group1.wwwx * wedge.group0.xyzx), 
            /* e15, e25, e35 */
            (float3(wedge.e3215) * right_anti_dual.group1.xyz) + (right_anti_dual.group2.xyz.yzx * wedge.group0.zxy) - (right_anti_dual.group2.xyz.zxy * wedge.group0.yzx)
        );
    }
}
public extension FlatPoint {
    public AntiCircleRotor anti_reject_orthogonally_from(DipoleInversion other) {
        Plane wedge = Plane(
            /* e4235, e4315, e4125, e3215 */
            float4((other.e42 * this.e35) + (other.e23 * this.e45), (other.e43 * this.e15) + (other.e31 * this.e45), (other.e41 * this.e25) + (other.e12 * this.e45), -(other.e31 * this.e25) - (other.e12 * this.e35)) - (this.group0.yzxx * float4(other.group0.xyz.zxy, other.e23))
        );
        AntiDipoleInversion right_anti_dual = AntiDipoleInversion(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiCircleRotor(
            /* e41, e42, e43 */
            (right_anti_dual.group0.xyz.zxy * wedge.group0.yzx) - (right_anti_dual.group0.xyz.yzx * wedge.group0.zxy), 
            /* e23, e31, e12, e45 */
            float4(right_anti_dual.e423 * wedge.e3215, right_anti_dual.e431 * wedge.e3215, right_anti_dual.e412 * wedge.e3215, -(right_anti_dual.e425 * wedge.e4315) - (right_anti_dual.e435 * wedge.e4125)) - (right_anti_dual.group1.wwwx * wedge.group0.xyzx), 
            /* e15, e25, e35, scalar */
            float4(right_anti_dual.e125 * wedge.e4315 * -1.0, right_anti_dual.e235 * wedge.e4125 * -1.0, right_anti_dual.e315 * wedge.e4235 * -1.0, (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125)) + (float4(wedge.e3215) * float4(right_anti_dual.group1.xyz, right_anti_dual.e4)) + (wedge.group0.zxyx * float4(right_anti_dual.group2.yzx, right_anti_dual.e1))
        );
    }
}
public extension FlatPoint {
    public MultiVector anti_reject_orthogonally_from(MultiVector other) {
        MultiVector wedge = MultiVector(
            /* scalar, e12345 */
            float2(0.0, -(this.e15 * other.e423) - (this.e25 * other.e431) - (this.e35 * other.e412) - (this.e45 * other.e321)), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5 */
            0.0, 
            /* e15, e25, e35, e45 */
            float4(other.scalar) * this.group0, 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(((float3(other.e4) * this.group0.xyz) - (float3(this.e45) * other.group1.xyz)), 0.0), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            (this.group0.zxy * other.group1.yzx) - (this.group0.yzx * other.group1.zxy), 
            /* e4235, e4315, e4125, e3215 */
            float4((this.e35 * other.e42) + (this.e45 * other.e23), (this.e15 * other.e43) + (this.e45 * other.e31), (this.e25 * other.e41) + (this.e45 * other.e12), -(this.e25 * other.e31) - (this.e35 * other.e12)) - (this.group0.yzxx * float4(other.group4.xyz.zxy, other.e23)), 
            /* e1234 */
            0.0
        );
        MultiVector right_anti_dual = MultiVector(
            /* scalar, e12345 */
            other.group0.xy.yx * float2(-1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215, 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43 */
            other.group7.xyz, 
            /* e23, e31, e12 */
            other.group6.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412 */
            other.group4.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group3.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2((right_anti_dual.scalar * wedge.e12345) + (right_anti_dual.e12345 * wedge.scalar) + (right_anti_dual.e1 * wedge.e4235) + (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) + (right_anti_dual.e4 * wedge.e3215) + (right_anti_dual.e5 * wedge.e1234) + (right_anti_dual.e4235 * wedge.e1) + (right_anti_dual.e4315 * wedge.e2) + (right_anti_dual.e4125 * wedge.e3) + (right_anti_dual.e3215 * wedge.e4) + (right_anti_dual.e1234 * wedge.e5) - (right_anti_dual.e15 * wedge.e423) - (right_anti_dual.e25 * wedge.e431) - (right_anti_dual.e35 * wedge.e412) - (right_anti_dual.e45 * wedge.e321) - (right_anti_dual.e41 * wedge.e235) - (right_anti_dual.e42 * wedge.e315) - (right_anti_dual.e43 * wedge.e125) - (right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e321 * wedge.e45) - (right_anti_dual.e423 * wedge.e15) - (right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43), right_anti_dual.e12345 * wedge.e12345), 
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e15 * wedge.e1234) + (right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e4125 * wedge.e31), (right_anti_dual.e25 * wedge.e1234) + (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e4235 * wedge.e12), (right_anti_dual.e35 * wedge.e1234) + (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e4315 * wedge.e23), -(right_anti_dual.e415 * wedge.e423) - (right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412) - (right_anti_dual.e1234 * wedge.e45)) + (float4(right_anti_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_anti_dual.group1) + (wedge.group9.yzxx * float4(right_anti_dual.group5.xyz.zxy, right_anti_dual.e41)) + float4((wedge.group4.xyz * right_anti_dual.group9.www), right_anti_dual.e45 * wedge.e1234) + float4((right_anti_dual.group7.xyz.zxy * wedge.group8.xyz.yzx), right_anti_dual.e42 * wedge.e4315) + float4((right_anti_dual.group8.xyz.yzx * wedge.group7.xyz.zxy), right_anti_dual.e43 * wedge.e4125) - (right_anti_dual.group9.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((float3(right_anti_dual.e1234) * wedge.group3.xyz), right_anti_dual.e4125 * wedge.e43) - float4((right_anti_dual.group4.xyz * wedge.group9.www), right_anti_dual.e423 * wedge.e415) - float4((right_anti_dual.group5.xyz.yzx * wedge.group9.zxy), right_anti_dual.e431 * wedge.e425) - float4((right_anti_dual.group7.xyz.yzx * wedge.group8.xyz.zxy), right_anti_dual.e412 * wedge.e435) - float4((right_anti_dual.group8.xyz.zxy * wedge.group7.xyz.yzx), right_anti_dual.e4235 * wedge.e41), 
            /* e5 */
            (right_anti_dual.e12345 * wedge.e5) + (right_anti_dual.e5 * wedge.e12345) + (right_anti_dual.e4235 * wedge.e15) + (right_anti_dual.e4315 * wedge.e25) + (right_anti_dual.e4125 * wedge.e35) + (right_anti_dual.e3215 * wedge.e45) - (right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125) - (right_anti_dual.e45 * wedge.e3215) - (right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435), 
            /* e15, e25, e35, e45 */
            float4((right_anti_dual.e415 * wedge.e3215) + (right_anti_dual.e315 * wedge.e4125) + (right_anti_dual.e4125 * wedge.e315) + (right_anti_dual.e3215 * wedge.e415), (right_anti_dual.e425 * wedge.e3215) + (right_anti_dual.e125 * wedge.e4235) + (right_anti_dual.e4235 * wedge.e125) + (right_anti_dual.e3215 * wedge.e425), (right_anti_dual.e435 * wedge.e3215) + (right_anti_dual.e235 * wedge.e4315) + (right_anti_dual.e4315 * wedge.e235) + (right_anti_dual.e3215 * wedge.e435), -(right_anti_dual.e435 * wedge.e4125) - (right_anti_dual.e4235 * wedge.e415) - (right_anti_dual.e4315 * wedge.e425) - (right_anti_dual.e4125 * wedge.e435)) + (float4(right_anti_dual.e12345) * wedge.group3) + (float4(wedge.e12345) * right_anti_dual.group3) - (wedge.group9.yzxx * float4(right_anti_dual.group8.xyz.zxy, right_anti_dual.e415)) - float4((wedge.group8.xyz.zxy * right_anti_dual.group9.yzx), right_anti_dual.e425 * wedge.e4315), 
            /* e41, e42, e43 */
            (float3(right_anti_dual.e12345) * wedge.group4.xyz) + (float3(right_anti_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_anti_dual.group4.xyz) + (float3(wedge.e1234) * right_anti_dual.group6.xyz) + (right_anti_dual.group7.xyz.zxy * wedge.group9.yzx) + (wedge.group7.xyz.zxy * right_anti_dual.group9.yzx) - (right_anti_dual.group7.xyz.yzx * wedge.group9.zxy) - (wedge.group7.xyz.yzx * right_anti_dual.group9.zxy), 
            /* e23, e31, e12 */
            (float3(right_anti_dual.e12345) * wedge.group5.xyz) + (float3(right_anti_dual.e3215) * wedge.group7.xyz) + (float3(right_anti_dual.e1234) * wedge.group8.xyz) + (float3(wedge.e12345) * right_anti_dual.group5.xyz) + (float3(wedge.e3215) * right_anti_dual.group7.xyz) + (float3(wedge.e1234) * right_anti_dual.group8.xyz) - (float3(right_anti_dual.e321) * wedge.group9.xyz) - (float3(wedge.e321) * right_anti_dual.group9.xyz), 
            /* e415, e425, e435, e321 */
            (float4(right_anti_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_anti_dual.group6) + (right_anti_dual.group9.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - float4((right_anti_dual.group9.zxy * wedge.group9.yzx), right_anti_dual.e1234 * wedge.e3215), 
            /* e423, e431, e412 */
            (float3(right_anti_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_anti_dual.group7.xyz) + (float3(wedge.e1234) * right_anti_dual.group9.xyz) - (float3(right_anti_dual.e1234) * wedge.group9.xyz), 
            /* e235, e315, e125 */
            (float3(right_anti_dual.e12345) * wedge.group8.xyz) + (float3(right_anti_dual.e3215) * wedge.group9.xyz) + (float3(wedge.e12345) * right_anti_dual.group8.xyz) - (float3(wedge.e3215) * right_anti_dual.group9.xyz), 
            /* e4235, e4315, e4125, e3215 */
            (float4(right_anti_dual.e12345) * wedge.group9) + (float4(wedge.e12345) * right_anti_dual.group9), 
            /* e1234 */
            (right_anti_dual.e12345 * wedge.e1234) + (right_anti_dual.e1234 * wedge.e12345)
        );
    }
}
public extension FlatPoint {
    public Dipole anti_reject_orthogonally_from(RoundPoint other) {
        Line wedge = Line(
            /* e415, e425, e435 */
            (float3(other.e4) * this.group0.xyz) - (float3(this.e45) * other.group0.xyz), 
            /* e235, e315, e125 */
            (this.group0.zxy * other.group0.yzx) - (this.group0.yzx * other.group0.zxy)
        );
        Sphere right_anti_dual = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        return Dipole(
            /* e41, e42, e43 */
            float3(right_anti_dual.e1234) * wedge.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4((float3(right_anti_dual.e1234) * wedge.group1.xyz), -(wedge.e415 * right_anti_dual.e4235) - (wedge.e425 * right_anti_dual.e4315) - (wedge.e435 * right_anti_dual.e4125)), 
            /* e15, e25, e35 */
            (float3(right_anti_dual.e3215) * wedge.group0.xyz) + (wedge.group1.xyz.yzx * right_anti_dual.group0.zxy) - (wedge.group1.xyz.zxy * right_anti_dual.group0.yzx)
        );
    }
}
public extension FlatPoint {
    public FlatPoint anti_reject_orthogonally_from(Scalar other) {
        return FlatPoint(
            /* e15, e25, e35, e45 */
            float4(other.scalar) * float4(this.e15 * other.scalar, this.e25 * other.scalar, this.e35 * other.scalar, this.e45 * other.scalar)
        );
    }
}
public extension FlatPoint {
    public VersorOdd anti_reject_orthogonally_from(VersorEven other) {
        Motor wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4(this.e15 * other.e4, this.e25 * other.e4, this.e35 * other.e4, -(this.e25 * other.e431) - (this.e35 * other.e412) - (this.e45 * other.e321)) - (this.group0.wwwx * float4(other.group3.xyz, other.e423)), 
            /* e235, e315, e125, e5 */
            float4(((this.group0.zxy * other.group3.yzx) - (this.group0.yzx * other.group3.zxy)), 0.0)
        );
        VersorOdd right_anti_dual = VersorOdd(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            (wedge.group0 * float4(right_anti_dual.group2.www, right_anti_dual.scalar)) + float4(float3(0.0), -(wedge.e415 * right_anti_dual.e23) - (wedge.e425 * right_anti_dual.e31) - (wedge.e435 * right_anti_dual.e12) - (wedge.e235 * right_anti_dual.e41) - (wedge.e315 * right_anti_dual.e42) - (wedge.e125 * right_anti_dual.e43)) + float4((wedge.group0.www * right_anti_dual.group0.xyz), wedge.e5 * right_anti_dual.e1234), 
            /* e23, e31, e12, e45 */
            float4(wedge.e235 * right_anti_dual.e1234, wedge.e315 * right_anti_dual.e1234, wedge.e125 * right_anti_dual.e1234, -(wedge.e415 * right_anti_dual.e4235) - (wedge.e425 * right_anti_dual.e4315) - (wedge.e435 * right_anti_dual.e4125)) + (float4(wedge.e12345) * right_anti_dual.group1), 
            /* e15, e25, e35, e1234 */
            float4(((float3(wedge.e12345) * right_anti_dual.group2.xyz) + (float3(right_anti_dual.e3215) * wedge.group0.xyz) + (wedge.group1.yzx * right_anti_dual.group3.zxy) - (wedge.group1.zxy * right_anti_dual.group3.yzx)), wedge.e12345 * right_anti_dual.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_anti_dual.group3
        );
    }
}
public extension FlatPoint {
    public VersorOdd anti_reject_orthogonally_from(VersorOdd other) {
        Flector wedge = Flector(
            /* e15, e25, e35, e45 */
            float4(other.scalar) * this.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4((this.e35 * other.e42) + (this.e45 * other.e23), (this.e15 * other.e43) + (this.e45 * other.e31), (this.e25 * other.e41) + (this.e45 * other.e12), -(this.e25 * other.e31) - (this.e35 * other.e12)) - (this.group0.yzxx * float4(other.group0.zxy, other.e23))
        );
        VersorEven right_anti_dual = VersorEven(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            (wedge.group1.yzxx * float4(right_anti_dual.group0.zxy, right_anti_dual.e1)) + float4(float3(0.0), (wedge.e4315 * right_anti_dual.e2) + (wedge.e4125 * right_anti_dual.e3) + (wedge.e3215 * right_anti_dual.e4) - (wedge.e25 * right_anti_dual.e431) - (wedge.e35 * right_anti_dual.e412) - (wedge.e45 * right_anti_dual.e321)) - (right_anti_dual.group0.yzxx * float4(wedge.group1.zxy, wedge.e15)), 
            /* e23, e31, e12, e45 */
            (right_anti_dual.group0 * float4(wedge.group1.www, wedge.e45)) + float4(float3(0.0), -(wedge.e4315 * right_anti_dual.e425) - (wedge.e4125 * right_anti_dual.e435)) - (wedge.group1.xyzx * right_anti_dual.group1.wwwx), 
            /* e15, e25, e35, e1234 */
            float4((float3(wedge.e3215) * right_anti_dual.group1.xyz), 0.0) + float4((float3(right_anti_dual.e12345) * wedge.group0.xyz), 0.0) + float4((wedge.group1.zxy * right_anti_dual.group2.yzx), 0.0) - float4((wedge.group1.yzx * right_anti_dual.group2.zxy), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_anti_dual.e12345) * wedge.group1
        );
    }
}
public extension Flector {
    // Fancy infix trick (first half)
    public AntiRejectOrthogonallyFromInfixPartial<Flector> operator /(AntiRejectOrthogonallyFromInfix rhs) {
        return AntiRejectOrthogonallyFromInfixPartial<Flector>(this);
    }
}
public extension AntiRejectOrthogonallyFromInfixPartial<Flector> {
    // Fancy infix trick (second half)
    public VersorOdd operator /(AntiCircleRotor rhs) {
        return this.a.anti_reject_orthogonally_from(rhs);
    }
}
public extension Flector {
    public VersorOdd anti_reject_orthogonally_from(AntiCircleRotor other) {
        Flector wedge = Flector(
            /* e15, e25, e35, e45 */
            float4(other.scalar) * this.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e23 * this.e45) + (other.scalar * this.e4235), (other.e31 * this.e45) + (other.scalar * this.e4315), (other.e12 * this.e45) + (other.scalar * this.e4125), -(other.e31 * this.e25) - (other.e12 * this.e35)) + float4((other.group0.xyz.yzx * this.group0.zxy), other.scalar * this.e3215) - (this.group0.yzxx * float4(other.group0.xyz.zxy, other.e23))
        );
        CircleRotor right_anti_dual = CircleRotor(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(right_anti_dual.e412 * wedge.e4315, right_anti_dual.e423 * wedge.e4125, right_anti_dual.e431 * wedge.e4235, -(right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e321 * wedge.e45)) - float4((right_anti_dual.group0.xyz.yzx * wedge.group1.zxy), right_anti_dual.e423 * wedge.e15), 
            /* e23, e31, e12, e45 */
            float4(float3(0.0), -(right_anti_dual.e425 * wedge.e4315) - (right_anti_dual.e435 * wedge.e4125)) + float4((right_anti_dual.group0.xyz * wedge.group1.www), right_anti_dual.e12345 * wedge.e45) - (right_anti_dual.group1.wwwx * wedge.group1.xyzx), 
            /* e15, e25, e35, e1234 */
            float4((float3(right_anti_dual.e12345) * wedge.group0.xyz), 0.0) + float4((float3(wedge.e3215) * right_anti_dual.group1.xyz), 0.0) + float4((right_anti_dual.group2.yzx * wedge.group1.zxy), 0.0) - float4((right_anti_dual.group2.zxy * wedge.group1.yzx), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_anti_dual.e12345) * wedge.group1
        );
    }
}
public extension Flector {
    public VersorOdd anti_reject_orthogonally_from(AntiDipoleInversion other) {
        Motor wedge = Motor(
            /* e415, e425, e435, e12345 */
            (float4(other.e4) * float4(this.group0.xyz, this.e3215)) + float4(float3(0.0), (other.e1 * this.e4235) + (other.e2 * this.e4315) + (other.e3 * this.e4125) - (other.e431 * this.e25) - (other.e412 * this.e35) - (other.e321 * this.e45)) - (this.group0.wwwx * float4(other.group3.xyz, other.e423)), 
            /* e235, e315, e125, e5 */
            float4(((other.group3.yzx * this.group0.zxy) - (other.group3.zxy * this.group0.yzx)), 0.0)
        );
        DipoleInversion right_anti_dual = DipoleInversion(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(right_anti_dual.e1234 * wedge.e415, right_anti_dual.e1234 * wedge.e425, right_anti_dual.e1234 * wedge.e435, -(right_anti_dual.e41 * wedge.e235) - (right_anti_dual.e42 * wedge.e315) - (right_anti_dual.e43 * wedge.e125) - (right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435)) + float4((right_anti_dual.group0.xyz * wedge.group0.www), right_anti_dual.e1234 * wedge.e5), 
            /* e23, e31, e12, e45 */
            float4(right_anti_dual.e1234 * wedge.e235, right_anti_dual.e1234 * wedge.e315, right_anti_dual.e1234 * wedge.e125, -(right_anti_dual.e4235 * wedge.e415) - (right_anti_dual.e4315 * wedge.e425) - (right_anti_dual.e4125 * wedge.e435)) + (float4(wedge.e12345) * right_anti_dual.group1), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_anti_dual.e3215) * wedge.group0.xyz) + (float3(wedge.e12345) * right_anti_dual.group2.xyz) + (right_anti_dual.group3.zxy * wedge.group1.yzx) - (right_anti_dual.group3.yzx * wedge.group1.zxy)), right_anti_dual.e1234 * wedge.e12345), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_anti_dual.group3
        );
    }
}
public extension Flector {
    public Flector anti_reject_orthogonally_from(AntiDualNum other) {
        Flector wedge = Flector(
            /* e15, e25, e35, e45 */
            float4(other.scalar) * this.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar) * this.group1
        );
        DualNum right_anti_dual = DualNum(
            /* e5, e12345 */
            other.group0.xy
        );
        return Flector(
            /* e15, e25, e35, e45 */
            float4(right_anti_dual.e12345) * wedge.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4(right_anti_dual.e12345) * wedge.group1
        );
    }
}
public extension Flector {
    public FlatPoint anti_reject_orthogonally_from(AntiFlatPoint other) {
        return FlatPoint(
            /* e15, e25, e35, e45 */
            float4(other.e321 * this.e45 * -1.0) * float4(other.group0.xyz, other.e321 * -1.0)
        );
    }
}
public extension Flector {
    public Flector anti_reject_orthogonally_from(AntiFlector other) {
        Motor wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4((float3(this.e45) * other.group1.xyz * float3(-1.0)), (other.e1 * this.e4235) + (other.e2 * this.e4315) + (other.e3 * this.e4125) - (other.e321 * this.e45)), 
            /* e235, e315, e125, e5 */
            float4(((other.group1.yzx * this.group0.zxy) - (other.group1.zxy * this.group0.yzx)), 0.0)
        );
        Flector right_anti_dual = Flector(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return Flector(
            /* e15, e25, e35, e45 */
            float4((right_anti_dual.e4125 * wedge.e315) + (right_anti_dual.e3215 * wedge.e415), (right_anti_dual.e4235 * wedge.e125) + (right_anti_dual.e3215 * wedge.e425), (right_anti_dual.e4315 * wedge.e235) + (right_anti_dual.e3215 * wedge.e435), -(right_anti_dual.e4315 * wedge.e425) - (right_anti_dual.e4125 * wedge.e435)) + (float4(wedge.e12345) * right_anti_dual.group0) - (right_anti_dual.group1.yzxx * float4(wedge.group1.zxy, wedge.e415)), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_anti_dual.group1
        );
    }
}
public extension Flector {
    public FlatPoint anti_reject_orthogonally_from(AntiLine other) {
        Plane wedge = Plane(
            /* e4235, e4315, e4125, e3215 */
            float4((float3(this.e45) * other.group0.xyz), -(other.e23 * this.e15) - (other.e31 * this.e25) - (other.e12 * this.e35))
        );
        Line right_anti_dual = Line(
            /* e415, e425, e435 */
            other.group0.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group1.xyz * float3(-1.0)
        );
        return FlatPoint(
            /* e15, e25, e35, e45 */
            float4((right_anti_dual.e415 * wedge.e3215) + (right_anti_dual.e315 * wedge.e4125), (right_anti_dual.e425 * wedge.e3215) + (right_anti_dual.e125 * wedge.e4235), (right_anti_dual.e435 * wedge.e3215) + (right_anti_dual.e235 * wedge.e4315), -(right_anti_dual.e425 * wedge.e4315) - (right_anti_dual.e435 * wedge.e4125)) - (wedge.group0.yzxx * float4(right_anti_dual.group1.xyz.zxy, right_anti_dual.e415))
        );
    }
}
public extension Flector {
    public Flector anti_reject_orthogonally_from(AntiMotor other) {
        Flector wedge = Flector(
            /* e15, e25, e35, e45 */
            float4(other.scalar) * this.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar * this.e4235, other.scalar * this.e4315, other.scalar * this.e4125, -(other.e23 * this.e15) - (other.e31 * this.e25) - (other.e12 * this.e35)) + (other.group0 * float4(this.group0.www, this.e3215))
        );
        Motor right_anti_dual = Motor(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return Flector(
            /* e15, e25, e35, e45 */
            float4((wedge.e4125 * right_anti_dual.e315) + (wedge.e3215 * right_anti_dual.e415), (wedge.e4235 * right_anti_dual.e125) + (wedge.e3215 * right_anti_dual.e425), (wedge.e4315 * right_anti_dual.e235) + (wedge.e3215 * right_anti_dual.e435), -(wedge.e4315 * right_anti_dual.e425) - (wedge.e4125 * right_anti_dual.e435)) + (float4(right_anti_dual.e12345) * wedge.group0) - (wedge.group1.yzxx * float4(right_anti_dual.group1.zxy, right_anti_dual.e415)), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_anti_dual.e12345) * wedge.group1
        );
    }
}
public extension Flector {
    public Flector anti_reject_orthogonally_from(AntiPlane other) {
        Motor wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4((float3(this.e45) * other.group0.xyz * float3(-1.0)), (other.e1 * this.e4235) + (other.e2 * this.e4315) + (other.e3 * this.e4125)), 
            /* e235, e315, e125, e5 */
            float4(((other.group0.yzx * this.group0.zxy) - (other.group0.zxy * this.group0.yzx)), 0.0)
        );
        Plane right_anti_dual = Plane(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return Flector(
            /* e15, e25, e35, e45 */
            float4((wedge.e415 * right_anti_dual.e3215) + (wedge.e315 * right_anti_dual.e4125), (wedge.e425 * right_anti_dual.e3215) + (wedge.e125 * right_anti_dual.e4235), (wedge.e435 * right_anti_dual.e3215) + (wedge.e235 * right_anti_dual.e4315), -(wedge.e425 * right_anti_dual.e4315) - (wedge.e435 * right_anti_dual.e4125)) - (right_anti_dual.group0.yzxx * float4(wedge.group1.zxy, wedge.e415)), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_anti_dual.group0
        );
    }
}
public extension Flector {
    public Dipole anti_reject_orthogonally_from(Circle other) {
        AntiScalar wedge = AntiScalar(
            /* e12345 */
            -(other.e423 * this.e15) - (other.e431 * this.e25) - (other.e412 * this.e35) - (other.e321 * this.e45)
        );
        Dipole right_anti_dual = Dipole(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35 */
            other.group2.xyz
        );
        return Dipole(
            /* e41, e42, e43 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(wedge.e12345) * right_anti_dual.group1, 
            /* e15, e25, e35 */
            float3(wedge.e12345) * right_anti_dual.group2.xyz
        );
    }
}
public extension Flector {
    public AntiCircleRotor anti_reject_orthogonally_from(CircleRotor other) {
        AntiScalar wedge = AntiScalar(
            /* e12345 */
            -(other.e423 * this.e15) - (other.e431 * this.e25) - (other.e412 * this.e35) - (other.e321 * this.e45)
        );
        AntiCircleRotor right_anti_dual = AntiCircleRotor(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiCircleRotor(
            /* e41, e42, e43 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(wedge.e12345) * right_anti_dual.group1, 
            /* e15, e25, e35, scalar */
            float4(wedge.e12345) * right_anti_dual.group2
        );
    }
}
public extension Flector {
    public Dipole anti_reject_orthogonally_from(Dipole other) {
        Plane wedge = Plane(
            /* e4235, e4315, e4125, e3215 */
            float4((other.e42 * this.e35) + (other.e23 * this.e45), (other.e43 * this.e15) + (other.e31 * this.e45), (other.e41 * this.e25) + (other.e12 * this.e45), -(other.e31 * this.e25) - (other.e12 * this.e35)) - (this.group0.yzxx * float4(other.group0.xyz.zxy, other.e23))
        );
        Circle right_anti_dual = Circle(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125 */
            other.group2.xyz * float3(-1.0)
        );
        return Dipole(
            /* e41, e42, e43 */
            (right_anti_dual.group0.xyz.zxy * wedge.group0.yzx) - (right_anti_dual.group0.xyz.yzx * wedge.group0.zxy), 
            /* e23, e31, e12, e45 */
            float4(right_anti_dual.e423 * wedge.e3215, right_anti_dual.e431 * wedge.e3215, right_anti_dual.e412 * wedge.e3215, -(right_anti_dual.e425 * wedge.e4315) - (right_anti_dual.e435 * wedge.e4125)) - (right_anti_dual.group1.wwwx * wedge.group0.xyzx), 
            /* e15, e25, e35 */
            (float3(wedge.e3215) * right_anti_dual.group1.xyz) + (right_anti_dual.group2.xyz.yzx * wedge.group0.zxy) - (right_anti_dual.group2.xyz.zxy * wedge.group0.yzx)
        );
    }
}
public extension Flector {
    public AntiCircleRotor anti_reject_orthogonally_from(DipoleInversion other) {
        Plane wedge = Plane(
            /* e4235, e4315, e4125, e3215 */
            float4((other.e42 * this.e35) + (other.e23 * this.e45), (other.e43 * this.e15) + (other.e31 * this.e45), (other.e41 * this.e25) + (other.e12 * this.e45), -(other.e31 * this.e25) - (other.e12 * this.e35)) - (this.group0.yzxx * float4(other.group0.xyz.zxy, other.e23))
        );
        AntiDipoleInversion right_anti_dual = AntiDipoleInversion(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiCircleRotor(
            /* e41, e42, e43 */
            (right_anti_dual.group0.xyz.zxy * wedge.group0.yzx) - (right_anti_dual.group0.xyz.yzx * wedge.group0.zxy), 
            /* e23, e31, e12, e45 */
            float4(right_anti_dual.e423 * wedge.e3215, right_anti_dual.e431 * wedge.e3215, right_anti_dual.e412 * wedge.e3215, -(right_anti_dual.e425 * wedge.e4315) - (right_anti_dual.e435 * wedge.e4125)) - (right_anti_dual.group1.wwwx * wedge.group0.xyzx), 
            /* e15, e25, e35, scalar */
            float4(right_anti_dual.e125 * wedge.e4315 * -1.0, right_anti_dual.e235 * wedge.e4125 * -1.0, right_anti_dual.e315 * wedge.e4235 * -1.0, (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125)) + (float4(wedge.e3215) * float4(right_anti_dual.group1.xyz, right_anti_dual.e4)) + (wedge.group0.zxyx * float4(right_anti_dual.group2.yzx, right_anti_dual.e1))
        );
    }
}
public extension Flector {
    public MultiVector anti_reject_orthogonally_from(MultiVector other) {
        MultiVector wedge = MultiVector(
            /* scalar, e12345 */
            float2(0.0, (this.e4235 * other.e1) + (this.e4315 * other.e2) + (this.e4125 * other.e3) + (this.e3215 * other.e4) - (this.e15 * other.e423) - (this.e25 * other.e431) - (this.e35 * other.e412) - (this.e45 * other.e321)), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5 */
            0.0, 
            /* e15, e25, e35, e45 */
            float4(other.scalar) * this.group0, 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(((float3(other.e4) * this.group0.xyz) - (float3(this.e45) * other.group1.xyz)), 0.0), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            (this.group0.zxy * other.group1.yzx) - (this.group0.yzx * other.group1.zxy), 
            /* e4235, e4315, e4125, e3215 */
            float4((this.e35 * other.e42) + (this.e45 * other.e23), (this.e15 * other.e43) + (this.e45 * other.e31), (this.e25 * other.e41) + (this.e45 * other.e12), -(this.e25 * other.e31) - (this.e35 * other.e12)) + (float4(other.scalar) * this.group1) - (this.group0.yzxx * float4(other.group4.xyz.zxy, other.e23)), 
            /* e1234 */
            0.0
        );
        MultiVector right_anti_dual = MultiVector(
            /* scalar, e12345 */
            other.group0.xy.yx * float2(-1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215, 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43 */
            other.group7.xyz, 
            /* e23, e31, e12 */
            other.group6.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412 */
            other.group4.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group3.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2((right_anti_dual.scalar * wedge.e12345) + (right_anti_dual.e12345 * wedge.scalar) + (right_anti_dual.e1 * wedge.e4235) + (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) + (right_anti_dual.e4 * wedge.e3215) + (right_anti_dual.e5 * wedge.e1234) + (right_anti_dual.e4235 * wedge.e1) + (right_anti_dual.e4315 * wedge.e2) + (right_anti_dual.e4125 * wedge.e3) + (right_anti_dual.e3215 * wedge.e4) + (right_anti_dual.e1234 * wedge.e5) - (right_anti_dual.e15 * wedge.e423) - (right_anti_dual.e25 * wedge.e431) - (right_anti_dual.e35 * wedge.e412) - (right_anti_dual.e45 * wedge.e321) - (right_anti_dual.e41 * wedge.e235) - (right_anti_dual.e42 * wedge.e315) - (right_anti_dual.e43 * wedge.e125) - (right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e321 * wedge.e45) - (right_anti_dual.e423 * wedge.e15) - (right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43), right_anti_dual.e12345 * wedge.e12345), 
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e15 * wedge.e1234) + (right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e4125 * wedge.e31), (right_anti_dual.e25 * wedge.e1234) + (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e4235 * wedge.e12), (right_anti_dual.e35 * wedge.e1234) + (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e4315 * wedge.e23), -(right_anti_dual.e415 * wedge.e423) - (right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412) - (right_anti_dual.e1234 * wedge.e45)) + (float4(right_anti_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_anti_dual.group1) + (wedge.group9.yzxx * float4(right_anti_dual.group5.xyz.zxy, right_anti_dual.e41)) + float4((wedge.group4.xyz * right_anti_dual.group9.www), right_anti_dual.e45 * wedge.e1234) + float4((right_anti_dual.group7.xyz.zxy * wedge.group8.xyz.yzx), right_anti_dual.e42 * wedge.e4315) + float4((right_anti_dual.group8.xyz.yzx * wedge.group7.xyz.zxy), right_anti_dual.e43 * wedge.e4125) - (right_anti_dual.group9.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((float3(right_anti_dual.e1234) * wedge.group3.xyz), right_anti_dual.e4125 * wedge.e43) - float4((right_anti_dual.group4.xyz * wedge.group9.www), right_anti_dual.e423 * wedge.e415) - float4((right_anti_dual.group5.xyz.yzx * wedge.group9.zxy), right_anti_dual.e431 * wedge.e425) - float4((right_anti_dual.group7.xyz.yzx * wedge.group8.xyz.zxy), right_anti_dual.e412 * wedge.e435) - float4((right_anti_dual.group8.xyz.zxy * wedge.group7.xyz.yzx), right_anti_dual.e4235 * wedge.e41), 
            /* e5 */
            (right_anti_dual.e12345 * wedge.e5) + (right_anti_dual.e5 * wedge.e12345) + (right_anti_dual.e4235 * wedge.e15) + (right_anti_dual.e4315 * wedge.e25) + (right_anti_dual.e4125 * wedge.e35) + (right_anti_dual.e3215 * wedge.e45) - (right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125) - (right_anti_dual.e45 * wedge.e3215) - (right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435), 
            /* e15, e25, e35, e45 */
            float4((right_anti_dual.e415 * wedge.e3215) + (right_anti_dual.e315 * wedge.e4125) + (right_anti_dual.e4125 * wedge.e315) + (right_anti_dual.e3215 * wedge.e415), (right_anti_dual.e425 * wedge.e3215) + (right_anti_dual.e125 * wedge.e4235) + (right_anti_dual.e4235 * wedge.e125) + (right_anti_dual.e3215 * wedge.e425), (right_anti_dual.e435 * wedge.e3215) + (right_anti_dual.e235 * wedge.e4315) + (right_anti_dual.e4315 * wedge.e235) + (right_anti_dual.e3215 * wedge.e435), -(right_anti_dual.e435 * wedge.e4125) - (right_anti_dual.e4235 * wedge.e415) - (right_anti_dual.e4315 * wedge.e425) - (right_anti_dual.e4125 * wedge.e435)) + (float4(right_anti_dual.e12345) * wedge.group3) + (float4(wedge.e12345) * right_anti_dual.group3) - (wedge.group9.yzxx * float4(right_anti_dual.group8.xyz.zxy, right_anti_dual.e415)) - float4((wedge.group8.xyz.zxy * right_anti_dual.group9.yzx), right_anti_dual.e425 * wedge.e4315), 
            /* e41, e42, e43 */
            (float3(right_anti_dual.e12345) * wedge.group4.xyz) + (float3(right_anti_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_anti_dual.group4.xyz) + (float3(wedge.e1234) * right_anti_dual.group6.xyz) + (right_anti_dual.group7.xyz.zxy * wedge.group9.yzx) + (wedge.group7.xyz.zxy * right_anti_dual.group9.yzx) - (right_anti_dual.group7.xyz.yzx * wedge.group9.zxy) - (wedge.group7.xyz.yzx * right_anti_dual.group9.zxy), 
            /* e23, e31, e12 */
            (float3(right_anti_dual.e12345) * wedge.group5.xyz) + (float3(right_anti_dual.e3215) * wedge.group7.xyz) + (float3(right_anti_dual.e1234) * wedge.group8.xyz) + (float3(wedge.e12345) * right_anti_dual.group5.xyz) + (float3(wedge.e3215) * right_anti_dual.group7.xyz) + (float3(wedge.e1234) * right_anti_dual.group8.xyz) - (float3(right_anti_dual.e321) * wedge.group9.xyz) - (float3(wedge.e321) * right_anti_dual.group9.xyz), 
            /* e415, e425, e435, e321 */
            (float4(right_anti_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_anti_dual.group6) + (right_anti_dual.group9.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - float4((right_anti_dual.group9.zxy * wedge.group9.yzx), right_anti_dual.e1234 * wedge.e3215), 
            /* e423, e431, e412 */
            (float3(right_anti_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_anti_dual.group7.xyz) + (float3(wedge.e1234) * right_anti_dual.group9.xyz) - (float3(right_anti_dual.e1234) * wedge.group9.xyz), 
            /* e235, e315, e125 */
            (float3(right_anti_dual.e12345) * wedge.group8.xyz) + (float3(right_anti_dual.e3215) * wedge.group9.xyz) + (float3(wedge.e12345) * right_anti_dual.group8.xyz) - (float3(wedge.e3215) * right_anti_dual.group9.xyz), 
            /* e4235, e4315, e4125, e3215 */
            (float4(right_anti_dual.e12345) * wedge.group9) + (float4(wedge.e12345) * right_anti_dual.group9), 
            /* e1234 */
            (right_anti_dual.e12345 * wedge.e1234) + (right_anti_dual.e1234 * wedge.e12345)
        );
    }
}
public extension Flector {
    public DipoleInversion anti_reject_orthogonally_from(RoundPoint other) {
        Motor wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4(this.e45 * other.e1 * -1.0, this.e45 * other.e2 * -1.0, this.e45 * other.e3 * -1.0, (this.e4315 * other.e2) + (this.e4125 * other.e3) + (this.e3215 * other.e4)) + (other.group0.wwwx * float4(this.group0.xyz, this.e4235)), 
            /* e235, e315, e125, e5 */
            float4(((this.group0.zxy * other.group0.yzx) - (this.group0.yzx * other.group0.zxy)), 0.0)
        );
        Sphere right_anti_dual = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            float3(right_anti_dual.e1234) * wedge.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4((float3(right_anti_dual.e1234) * wedge.group1.xyz), -(wedge.e415 * right_anti_dual.e4235) - (wedge.e425 * right_anti_dual.e4315) - (wedge.e435 * right_anti_dual.e4125)), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_anti_dual.e3215) * wedge.group0.xyz) + (wedge.group1.yzx * right_anti_dual.group0.zxy) - (wedge.group1.zxy * right_anti_dual.group0.yzx)), wedge.e12345 * right_anti_dual.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_anti_dual.group0
        );
    }
}
public extension Flector {
    public Flector anti_reject_orthogonally_from(Scalar other) {
        Flector wedge = Flector(
            /* e15, e25, e35, e45 */
            float4(other.scalar) * this.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar) * this.group1
        );
        AntiScalar right_anti_dual = AntiScalar(
            /* e12345 */
            other.scalar
        );
        return Flector(
            /* e15, e25, e35, e45 */
            float4(right_anti_dual.e12345) * wedge.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4(right_anti_dual.e12345) * wedge.group1
        );
    }
}
public extension Flector {
    public VersorOdd anti_reject_orthogonally_from(VersorEven other) {
        Motor wedge = Motor(
            /* e415, e425, e435, e12345 */
            (other.group3.wwwx * float4(this.group0.xyz, this.e4235)) + float4(float3(0.0), (this.e4315 * other.e2) + (this.e4125 * other.e3) + (this.e3215 * other.e4) - (this.e25 * other.e431) - (this.e35 * other.e412) - (this.e45 * other.e321)) - (this.group0.wwwx * float4(other.group3.xyz, other.e423)), 
            /* e235, e315, e125, e5 */
            float4(((this.group0.zxy * other.group3.yzx) - (this.group0.yzx * other.group3.zxy)), 0.0)
        );
        VersorOdd right_anti_dual = VersorOdd(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            (wedge.group0 * float4(right_anti_dual.group2.www, right_anti_dual.scalar)) + float4(float3(0.0), -(wedge.e415 * right_anti_dual.e23) - (wedge.e425 * right_anti_dual.e31) - (wedge.e435 * right_anti_dual.e12) - (wedge.e235 * right_anti_dual.e41) - (wedge.e315 * right_anti_dual.e42) - (wedge.e125 * right_anti_dual.e43)) + float4((wedge.group0.www * right_anti_dual.group0.xyz), wedge.e5 * right_anti_dual.e1234), 
            /* e23, e31, e12, e45 */
            float4(wedge.e235 * right_anti_dual.e1234, wedge.e315 * right_anti_dual.e1234, wedge.e125 * right_anti_dual.e1234, -(wedge.e415 * right_anti_dual.e4235) - (wedge.e425 * right_anti_dual.e4315) - (wedge.e435 * right_anti_dual.e4125)) + (float4(wedge.e12345) * right_anti_dual.group1), 
            /* e15, e25, e35, e1234 */
            float4(((float3(wedge.e12345) * right_anti_dual.group2.xyz) + (float3(right_anti_dual.e3215) * wedge.group0.xyz) + (wedge.group1.yzx * right_anti_dual.group3.zxy) - (wedge.group1.zxy * right_anti_dual.group3.yzx)), wedge.e12345 * right_anti_dual.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_anti_dual.group3
        );
    }
}
public extension Flector {
    public VersorOdd anti_reject_orthogonally_from(VersorOdd other) {
        Flector wedge = Flector(
            /* e15, e25, e35, e45 */
            float4(other.scalar) * this.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4((this.e45 * other.e23) + (this.e4235 * other.scalar), (this.e45 * other.e31) + (this.e4315 * other.scalar), (this.e45 * other.e12) + (this.e4125 * other.scalar), -(this.e25 * other.e31) - (this.e35 * other.e12)) + (other.group0.yzxw * float4(this.group0.zxy, this.e3215)) - (this.group0.yzxx * float4(other.group0.zxy, other.e23))
        );
        VersorEven right_anti_dual = VersorEven(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            (wedge.group1.yzxx * float4(right_anti_dual.group0.zxy, right_anti_dual.e1)) + float4(float3(0.0), (wedge.e4315 * right_anti_dual.e2) + (wedge.e4125 * right_anti_dual.e3) + (wedge.e3215 * right_anti_dual.e4) - (wedge.e25 * right_anti_dual.e431) - (wedge.e35 * right_anti_dual.e412) - (wedge.e45 * right_anti_dual.e321)) - (right_anti_dual.group0.yzxx * float4(wedge.group1.zxy, wedge.e15)), 
            /* e23, e31, e12, e45 */
            (right_anti_dual.group0 * float4(wedge.group1.www, wedge.e45)) + float4(float3(0.0), -(wedge.e4315 * right_anti_dual.e425) - (wedge.e4125 * right_anti_dual.e435)) - (wedge.group1.xyzx * right_anti_dual.group1.wwwx), 
            /* e15, e25, e35, e1234 */
            float4((float3(wedge.e3215) * right_anti_dual.group1.xyz), 0.0) + float4((float3(right_anti_dual.e12345) * wedge.group0.xyz), 0.0) + float4((wedge.group1.zxy * right_anti_dual.group2.yzx), 0.0) - float4((wedge.group1.yzx * right_anti_dual.group2.zxy), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_anti_dual.e12345) * wedge.group1
        );
    }
}
public extension Line {
    // Fancy infix trick (first half)
    public AntiRejectOrthogonallyFromInfixPartial<Line> operator /(AntiRejectOrthogonallyFromInfix rhs) {
        return AntiRejectOrthogonallyFromInfixPartial<Line>(this);
    }
}
public extension AntiRejectOrthogonallyFromInfixPartial<Line> {
    // Fancy infix trick (second half)
    public VersorEven operator /(AntiCircleRotor rhs) {
        return this.a.anti_reject_orthogonally_from(rhs);
    }
}
public extension Line {
    public VersorEven anti_reject_orthogonally_from(AntiCircleRotor other) {
        Motor wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4((float3(other.scalar) * this.group0.xyz), -(other.e41 * this.e235) - (other.e42 * this.e315) - (other.e43 * this.e125) - (other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435)), 
            /* e235, e315, e125, e5 */
            float4(float3(1.0), 0.0) * float4(this.group1.xyz, 0.0) * float4(other.group2.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        CircleRotor right_anti_dual = CircleRotor(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(wedge.e12345) * float4(right_anti_dual.group0.xyz, right_anti_dual.e12345), 
            /* e415, e425, e435, e321 */
            float4(((float3(right_anti_dual.e12345) * wedge.group0.xyz) + (float3(wedge.e12345) * right_anti_dual.group1.xyz)), right_anti_dual.e321 * wedge.e12345), 
            /* e235, e315, e125, e5 */
            float4(right_anti_dual.e12345 * wedge.e235, right_anti_dual.e12345 * wedge.e315, right_anti_dual.e12345 * wedge.e125, -(right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435)) + (right_anti_dual.group2 * float4(wedge.group0.www, wedge.e5)), 
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e412 * wedge.e315) + (right_anti_dual.e321 * wedge.e415), (right_anti_dual.e423 * wedge.e125) + (right_anti_dual.e321 * wedge.e425), (right_anti_dual.e431 * wedge.e235) + (right_anti_dual.e321 * wedge.e435), -(right_anti_dual.e431 * wedge.e425) - (right_anti_dual.e412 * wedge.e435)) - float4((right_anti_dual.group0.xyz.yzx * wedge.group1.zxy), right_anti_dual.e423 * wedge.e415)
        );
    }
}
public extension Line {
    public AntiDipoleInversion anti_reject_orthogonally_from(AntiDipoleInversion other) {
        Plane wedge = Plane(
            /* e4235, e4315, e4125, e3215 */
            float4(-(other.e4 * this.e235) - (other.e3 * this.e425), -(other.e4 * this.e315) - (other.e1 * this.e435), -(other.e4 * this.e125) - (other.e2 * this.e415), (other.e2 * this.e315) + (other.e3 * this.e125)) + (other.group3.yzxx * float4(this.group0.xyz.zxy, this.e235))
        );
        DipoleInversion right_anti_dual = DipoleInversion(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(right_anti_dual.e1234) * wedge.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            float4(((right_anti_dual.group3.yzx * wedge.group0.zxy) - (right_anti_dual.group3.zxy * wedge.group0.yzx)), right_anti_dual.e1234 * wedge.e3215 * -1.0), 
            /* e235, e315, e125, e4 */
            float4(right_anti_dual.e4235 * wedge.e3215 * -1.0, right_anti_dual.e4315 * wedge.e3215 * -1.0, right_anti_dual.e4125 * wedge.e3215 * -1.0, (right_anti_dual.e42 * wedge.e4315) + (right_anti_dual.e43 * wedge.e4125)) + (wedge.group0.xyzx * float4(right_anti_dual.group3.www, right_anti_dual.e41)), 
            /* e1, e2, e3, e5 */
            float4(right_anti_dual.e12 * wedge.e4315, right_anti_dual.e23 * wedge.e4125, right_anti_dual.e31 * wedge.e4235, -(right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125)) - (float4(wedge.e3215) * float4(right_anti_dual.group0.xyz, right_anti_dual.e45)) - (wedge.group0.zxyx * float4(right_anti_dual.group1.yzx, right_anti_dual.e15))
        );
    }
}
public extension Line {
    public Line anti_reject_orthogonally_from(AntiDualNum other) {
        Line wedge = Line(
            /* e415, e425, e435 */
            float3(other.scalar) * this.group0.xyz, 
            /* e235, e315, e125 */
            float3(other.scalar) * this.group1.xyz
        );
        DualNum right_anti_dual = DualNum(
            /* e5, e12345 */
            other.group0.xy
        );
        return Line(
            /* e415, e425, e435 */
            float3(right_anti_dual.e12345) * wedge.group0.xyz, 
            /* e235, e315, e125 */
            float3(right_anti_dual.e12345) * wedge.group1.xyz
        );
    }
}
public extension Line {
    public Motor anti_reject_orthogonally_from(AntiFlector other) {
        Plane wedge = Plane(
            /* e4235, e4315, e4125, e3215 */
            float4(other.e3 * this.e425 * -1.0, other.e1 * this.e435 * -1.0, other.e2 * this.e415 * -1.0, (other.e2 * this.e315) + (other.e3 * this.e125)) + (other.group1.yzxx * float4(this.group0.xyz.zxy, this.e235))
        );
        Flector right_anti_dual = Flector(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4(((right_anti_dual.group1.yzx * wedge.group0.zxy) - (right_anti_dual.group1.zxy * wedge.group0.yzx)), 0.0), 
            /* e235, e315, e125, e5 */
            float4(right_anti_dual.e3215 * wedge.e4235, right_anti_dual.e3215 * wedge.e4315, right_anti_dual.e3215 * wedge.e4125, -(right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125) - (right_anti_dual.e45 * wedge.e3215)) - (wedge.group0.wwwx * float4(right_anti_dual.group1.xyz, right_anti_dual.e15))
        );
    }
}
public extension Line {
    public Line anti_reject_orthogonally_from(AntiLine other) {
        AntiScalar wedge = AntiScalar(
            /* e12345 */
            -(other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435)
        );
        Line right_anti_dual = Line(
            /* e415, e425, e435 */
            other.group0.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group1.xyz * float3(-1.0)
        );
        return Line(
            /* e415, e425, e435 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e235, e315, e125 */
            float3(wedge.e12345) * right_anti_dual.group1.xyz
        );
    }
}
public extension Line {
    public Motor anti_reject_orthogonally_from(AntiMotor other) {
        Motor wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4((float3(other.scalar) * this.group0.xyz), -(other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435)), 
            /* e235, e315, e125, e5 */
            float4(float3(1.0), 0.0) * float4(this.group1.xyz, 0.0) * float4(other.group0.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        Motor right_anti_dual = Motor(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4(((float3(right_anti_dual.e12345) * wedge.group0.xyz) + (float3(wedge.e12345) * right_anti_dual.group0.xyz)), right_anti_dual.e12345 * wedge.e12345), 
            /* e235, e315, e125, e5 */
            (float4(right_anti_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_anti_dual.group1) + float4(float3(0.0), -(right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435))
        );
    }
}
public extension Line {
    public Line anti_reject_orthogonally_from(AntiPlane other) {
        Plane wedge = Plane(
            /* e4235, e4315, e4125, e3215 */
            float4(other.e3 * this.e425 * -1.0, other.e1 * this.e435 * -1.0, other.e2 * this.e415 * -1.0, (other.e2 * this.e315) + (other.e3 * this.e125)) + (other.group0.yzxx * float4(this.group0.xyz.zxy, this.e235))
        );
        Plane right_anti_dual = Plane(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return Line(
            /* e415, e425, e435 */
            (right_anti_dual.group0.yzx * wedge.group0.zxy) - (right_anti_dual.group0.zxy * wedge.group0.yzx), 
            /* e235, e315, e125 */
            (float3(right_anti_dual.e3215) * wedge.group0.xyz) - (float3(wedge.e3215) * right_anti_dual.group0.xyz)
        );
    }
}
public extension Line {
    public Circle anti_reject_orthogonally_from(Dipole other) {
        AntiScalar wedge = AntiScalar(
            /* e12345 */
            -(other.e41 * this.e235) - (other.e42 * this.e315) - (other.e43 * this.e125) - (other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435)
        );
        Circle right_anti_dual = Circle(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125 */
            other.group2.xyz * float3(-1.0)
        );
        return Circle(
            /* e423, e431, e412 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(wedge.e12345) * right_anti_dual.group1, 
            /* e235, e315, e125 */
            float3(wedge.e12345) * right_anti_dual.group2.xyz
        );
    }
}
public extension Line {
    public AntiDipoleInversion anti_reject_orthogonally_from(DipoleInversion other) {
        AntiScalar wedge = AntiScalar(
            /* e12345 */
            -(other.e41 * this.e235) - (other.e42 * this.e315) - (other.e43 * this.e125) - (other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435)
        );
        AntiDipoleInversion right_anti_dual = AntiDipoleInversion(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(wedge.e12345) * right_anti_dual.group1, 
            /* e235, e315, e125, e4 */
            float4(wedge.e12345) * right_anti_dual.group2, 
            /* e1, e2, e3, e5 */
            float4(wedge.e12345) * right_anti_dual.group3
        );
    }
}
public extension Line {
    public MultiVector anti_reject_orthogonally_from(MultiVector other) {
        MultiVector wedge = MultiVector(
            /* scalar, e12345 */
            float2(0.0, -(this.e415 * other.e23) - (this.e425 * other.e31) - (this.e435 * other.e12) - (this.e235 * other.e41) - (this.e315 * other.e42) - (this.e125 * other.e43)), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5 */
            0.0, 
            /* e15, e25, e35, e45 */
            float4(0.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(other.group0.xy.xx, other.scalar, 0.0) * float4(float3(1.0), 0.0) * float4(this.group0.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            float3(other.scalar) * this.group1.xyz, 
            /* e4235, e4315, e4125, e3215 */
            float4(-(this.e425 * other.e3) - (this.e235 * other.e4), -(this.e435 * other.e1) - (this.e315 * other.e4), -(this.e415 * other.e2) - (this.e125 * other.e4), (this.e315 * other.e2) + (this.e125 * other.e3)) + (other.group1.yzxx * float4(this.group0.xyz.zxy, this.e235)), 
            /* e1234 */
            0.0
        );
        MultiVector right_anti_dual = MultiVector(
            /* scalar, e12345 */
            other.group0.xy.yx * float2(-1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215, 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43 */
            other.group7.xyz, 
            /* e23, e31, e12 */
            other.group6.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412 */
            other.group4.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group3.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2((right_anti_dual.scalar * wedge.e12345) + (right_anti_dual.e12345 * wedge.scalar) + (right_anti_dual.e1 * wedge.e4235) + (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) + (right_anti_dual.e4 * wedge.e3215) + (right_anti_dual.e5 * wedge.e1234) + (right_anti_dual.e4235 * wedge.e1) + (right_anti_dual.e4315 * wedge.e2) + (right_anti_dual.e4125 * wedge.e3) + (right_anti_dual.e3215 * wedge.e4) + (right_anti_dual.e1234 * wedge.e5) - (right_anti_dual.e15 * wedge.e423) - (right_anti_dual.e25 * wedge.e431) - (right_anti_dual.e35 * wedge.e412) - (right_anti_dual.e45 * wedge.e321) - (right_anti_dual.e41 * wedge.e235) - (right_anti_dual.e42 * wedge.e315) - (right_anti_dual.e43 * wedge.e125) - (right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e321 * wedge.e45) - (right_anti_dual.e423 * wedge.e15) - (right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43), right_anti_dual.e12345 * wedge.e12345), 
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e15 * wedge.e1234) + (right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e4125 * wedge.e31), (right_anti_dual.e25 * wedge.e1234) + (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e4235 * wedge.e12), (right_anti_dual.e35 * wedge.e1234) + (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e4315 * wedge.e23), -(right_anti_dual.e415 * wedge.e423) - (right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412) - (right_anti_dual.e1234 * wedge.e45)) + (float4(right_anti_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_anti_dual.group1) + (wedge.group9.yzxx * float4(right_anti_dual.group5.xyz.zxy, right_anti_dual.e41)) + float4((wedge.group4.xyz * right_anti_dual.group9.www), right_anti_dual.e45 * wedge.e1234) + float4((right_anti_dual.group7.xyz.zxy * wedge.group8.xyz.yzx), right_anti_dual.e42 * wedge.e4315) + float4((right_anti_dual.group8.xyz.yzx * wedge.group7.xyz.zxy), right_anti_dual.e43 * wedge.e4125) - (right_anti_dual.group9.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((float3(right_anti_dual.e1234) * wedge.group3.xyz), right_anti_dual.e4125 * wedge.e43) - float4((right_anti_dual.group4.xyz * wedge.group9.www), right_anti_dual.e423 * wedge.e415) - float4((right_anti_dual.group5.xyz.yzx * wedge.group9.zxy), right_anti_dual.e431 * wedge.e425) - float4((right_anti_dual.group7.xyz.yzx * wedge.group8.xyz.zxy), right_anti_dual.e412 * wedge.e435) - float4((right_anti_dual.group8.xyz.zxy * wedge.group7.xyz.yzx), right_anti_dual.e4235 * wedge.e41), 
            /* e5 */
            (right_anti_dual.e12345 * wedge.e5) + (right_anti_dual.e5 * wedge.e12345) + (right_anti_dual.e4235 * wedge.e15) + (right_anti_dual.e4315 * wedge.e25) + (right_anti_dual.e4125 * wedge.e35) + (right_anti_dual.e3215 * wedge.e45) - (right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125) - (right_anti_dual.e45 * wedge.e3215) - (right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435), 
            /* e15, e25, e35, e45 */
            float4((right_anti_dual.e415 * wedge.e3215) + (right_anti_dual.e315 * wedge.e4125) + (right_anti_dual.e4125 * wedge.e315) + (right_anti_dual.e3215 * wedge.e415), (right_anti_dual.e425 * wedge.e3215) + (right_anti_dual.e125 * wedge.e4235) + (right_anti_dual.e4235 * wedge.e125) + (right_anti_dual.e3215 * wedge.e425), (right_anti_dual.e435 * wedge.e3215) + (right_anti_dual.e235 * wedge.e4315) + (right_anti_dual.e4315 * wedge.e235) + (right_anti_dual.e3215 * wedge.e435), -(right_anti_dual.e435 * wedge.e4125) - (right_anti_dual.e4235 * wedge.e415) - (right_anti_dual.e4315 * wedge.e425) - (right_anti_dual.e4125 * wedge.e435)) + (float4(right_anti_dual.e12345) * wedge.group3) + (float4(wedge.e12345) * right_anti_dual.group3) - (wedge.group9.yzxx * float4(right_anti_dual.group8.xyz.zxy, right_anti_dual.e415)) - float4((wedge.group8.xyz.zxy * right_anti_dual.group9.yzx), right_anti_dual.e425 * wedge.e4315), 
            /* e41, e42, e43 */
            (float3(right_anti_dual.e12345) * wedge.group4.xyz) + (float3(right_anti_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_anti_dual.group4.xyz) + (float3(wedge.e1234) * right_anti_dual.group6.xyz) + (right_anti_dual.group7.xyz.zxy * wedge.group9.yzx) + (wedge.group7.xyz.zxy * right_anti_dual.group9.yzx) - (right_anti_dual.group7.xyz.yzx * wedge.group9.zxy) - (wedge.group7.xyz.yzx * right_anti_dual.group9.zxy), 
            /* e23, e31, e12 */
            (float3(right_anti_dual.e12345) * wedge.group5.xyz) + (float3(right_anti_dual.e3215) * wedge.group7.xyz) + (float3(right_anti_dual.e1234) * wedge.group8.xyz) + (float3(wedge.e12345) * right_anti_dual.group5.xyz) + (float3(wedge.e3215) * right_anti_dual.group7.xyz) + (float3(wedge.e1234) * right_anti_dual.group8.xyz) - (float3(right_anti_dual.e321) * wedge.group9.xyz) - (float3(wedge.e321) * right_anti_dual.group9.xyz), 
            /* e415, e425, e435, e321 */
            (float4(right_anti_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_anti_dual.group6) + (right_anti_dual.group9.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - float4((right_anti_dual.group9.zxy * wedge.group9.yzx), right_anti_dual.e1234 * wedge.e3215), 
            /* e423, e431, e412 */
            (float3(right_anti_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_anti_dual.group7.xyz) + (float3(wedge.e1234) * right_anti_dual.group9.xyz) - (float3(right_anti_dual.e1234) * wedge.group9.xyz), 
            /* e235, e315, e125 */
            (float3(right_anti_dual.e12345) * wedge.group8.xyz) + (float3(right_anti_dual.e3215) * wedge.group9.xyz) + (float3(wedge.e12345) * right_anti_dual.group8.xyz) - (float3(wedge.e3215) * right_anti_dual.group9.xyz), 
            /* e4235, e4315, e4125, e3215 */
            (float4(right_anti_dual.e12345) * wedge.group9) + (float4(wedge.e12345) * right_anti_dual.group9), 
            /* e1234 */
            (right_anti_dual.e12345 * wedge.e1234) + (right_anti_dual.e1234 * wedge.e12345)
        );
    }
}
public extension Line {
    public Circle anti_reject_orthogonally_from(RoundPoint other) {
        Plane wedge = Plane(
            /* e4235, e4315, e4125, e3215 */
            float4(-(this.e425 * other.e3) - (this.e235 * other.e4), -(this.e435 * other.e1) - (this.e315 * other.e4), -(this.e415 * other.e2) - (this.e125 * other.e4), (this.e315 * other.e2) + (this.e125 * other.e3)) + (other.group0.yzxx * float4(this.group0.xyz.zxy, this.e235))
        );
        Sphere right_anti_dual = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        return Circle(
            /* e423, e431, e412 */
            float3(right_anti_dual.e1234) * wedge.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            float4(((wedge.group0.zxy * right_anti_dual.group0.yzx) - (wedge.group0.yzx * right_anti_dual.group0.zxy)), wedge.e3215 * right_anti_dual.e1234 * -1.0), 
            /* e235, e315, e125 */
            (float3(right_anti_dual.e3215) * wedge.group0.xyz) - (float3(wedge.e3215) * right_anti_dual.group0.xyz)
        );
    }
}
public extension Line {
    public Line anti_reject_orthogonally_from(Scalar other) {
        Line wedge = Line(
            /* e415, e425, e435 */
            float3(other.scalar) * this.group0.xyz, 
            /* e235, e315, e125 */
            float3(other.scalar) * this.group1.xyz
        );
        AntiScalar right_anti_dual = AntiScalar(
            /* e12345 */
            other.scalar
        );
        return Line(
            /* e415, e425, e435 */
            float3(right_anti_dual.e12345) * wedge.group0.xyz, 
            /* e235, e315, e125 */
            float3(right_anti_dual.e12345) * wedge.group1.xyz
        );
    }
}
public extension Line {
    public AntiDipoleInversion anti_reject_orthogonally_from(VersorEven other) {
        Plane wedge = Plane(
            /* e4235, e4315, e4125, e3215 */
            float4(-(this.e425 * other.e3) - (this.e235 * other.e4), -(this.e435 * other.e1) - (this.e315 * other.e4), -(this.e415 * other.e2) - (this.e125 * other.e4), (this.e315 * other.e2) + (this.e125 * other.e3)) + (other.group3.yzxx * float4(this.group0.xyz.zxy, this.e235))
        );
        VersorOdd right_anti_dual = VersorOdd(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(right_anti_dual.e1234) * wedge.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            float4(((wedge.group0.zxy * right_anti_dual.group3.yzx) - (wedge.group0.yzx * right_anti_dual.group3.zxy)), wedge.e3215 * right_anti_dual.e1234 * -1.0), 
            /* e235, e315, e125, e4 */
            float4(wedge.e3215 * right_anti_dual.e4235 * -1.0, wedge.e3215 * right_anti_dual.e4315 * -1.0, wedge.e3215 * right_anti_dual.e4125 * -1.0, (wedge.e4315 * right_anti_dual.e42) + (wedge.e4125 * right_anti_dual.e43)) + (wedge.group0.xyzx * float4(right_anti_dual.group3.www, right_anti_dual.e41)), 
            /* e1, e2, e3, e5 */
            float4(wedge.e4315 * right_anti_dual.e12, wedge.e4125 * right_anti_dual.e23, wedge.e4235 * right_anti_dual.e31, -(wedge.e4125 * right_anti_dual.e35) - (wedge.e3215 * right_anti_dual.e45)) - (wedge.group0.zxyx * float4(right_anti_dual.group1.yzx, right_anti_dual.e15)) - (wedge.group0.wwwy * float4(right_anti_dual.group0.xyz, right_anti_dual.e25))
        );
    }
}
public extension Line {
    public VersorEven anti_reject_orthogonally_from(VersorOdd other) {
        Motor wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4((float3(other.scalar) * this.group0.xyz), -(this.e415 * other.e23) - (this.e425 * other.e31) - (this.e435 * other.e12) - (this.e235 * other.e41) - (this.e315 * other.e42) - (this.e125 * other.e43)), 
            /* e235, e315, e125, e5 */
            float4(float3(1.0), 0.0) * float4(this.group1.xyz, 0.0) * float4(other.group0.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        VersorEven right_anti_dual = VersorEven(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(wedge.e12345) * right_anti_dual.group0, 
            /* e415, e425, e435, e321 */
            float4(((float3(wedge.e12345) * right_anti_dual.group1.xyz) + (float3(right_anti_dual.e12345) * wedge.group0.xyz)), wedge.e12345 * right_anti_dual.e321), 
            /* e235, e315, e125, e5 */
            (float4(wedge.e12345) * right_anti_dual.group2) + (float4(right_anti_dual.e12345) * wedge.group1) + float4(float3(0.0), -(wedge.e415 * right_anti_dual.e235) - (wedge.e425 * right_anti_dual.e315) - (wedge.e435 * right_anti_dual.e125) - (wedge.e235 * right_anti_dual.e415) - (wedge.e315 * right_anti_dual.e425) - (wedge.e125 * right_anti_dual.e435)), 
            /* e1, e2, e3, e4 */
            float4((wedge.e12345 * right_anti_dual.e1) + (wedge.e315 * right_anti_dual.e412), (wedge.e12345 * right_anti_dual.e2) + (wedge.e125 * right_anti_dual.e423), (wedge.e12345 * right_anti_dual.e3) + (wedge.e235 * right_anti_dual.e431), -(wedge.e425 * right_anti_dual.e431) - (wedge.e435 * right_anti_dual.e412)) + (wedge.group0 * float4(right_anti_dual.group1.www, right_anti_dual.e4)) - (right_anti_dual.group0.yzxx * float4(wedge.group1.zxy, wedge.e415))
        );
    }
}
public extension Motor {
    // Fancy infix trick (first half)
    public AntiRejectOrthogonallyFromInfixPartial<Motor> operator /(AntiRejectOrthogonallyFromInfix rhs) {
        return AntiRejectOrthogonallyFromInfixPartial<Motor>(this);
    }
}
public extension AntiRejectOrthogonallyFromInfixPartial<Motor> {
    // Fancy infix trick (second half)
    public VersorEven operator /(AntiCircleRotor rhs) {
        return this.a.anti_reject_orthogonally_from(rhs);
    }
}
public extension Motor {
    public VersorEven anti_reject_orthogonally_from(AntiCircleRotor other) {
        Motor wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4(other.scalar * this.e415, other.scalar * this.e425, other.scalar * this.e435, -(other.e41 * this.e235) - (other.e42 * this.e315) - (other.e43 * this.e125) - (other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435)) + float4((other.group0.xyz * this.group1.www), other.scalar * this.e12345), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.scalar) * this.group1.xyz) + (float3(this.e5) * other.group1.xyz)), other.scalar * this.e5)
        );
        CircleRotor right_anti_dual = CircleRotor(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(wedge.e12345) * float4(right_anti_dual.group0.xyz, right_anti_dual.e12345), 
            /* e415, e425, e435, e321 */
            float4(((float3(right_anti_dual.e12345) * wedge.group0.xyz) + (float3(wedge.e12345) * right_anti_dual.group1.xyz)), right_anti_dual.e321 * wedge.e12345), 
            /* e235, e315, e125, e5 */
            float4(right_anti_dual.e12345 * wedge.e235, right_anti_dual.e12345 * wedge.e315, right_anti_dual.e12345 * wedge.e125, -(right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435)) + (right_anti_dual.group2 * float4(wedge.group0.www, wedge.e5)), 
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e412 * wedge.e315) + (right_anti_dual.e321 * wedge.e415), (right_anti_dual.e423 * wedge.e125) + (right_anti_dual.e321 * wedge.e425), (right_anti_dual.e431 * wedge.e235) + (right_anti_dual.e321 * wedge.e435), -(right_anti_dual.e431 * wedge.e425) - (right_anti_dual.e412 * wedge.e435)) - float4((right_anti_dual.group0.xyz.yzx * wedge.group1.zxy), right_anti_dual.e423 * wedge.e415)
        );
    }
}
public extension Motor {
    public AntiDipoleInversion anti_reject_orthogonally_from(AntiDipoleInversion other) {
        Flector wedge = Flector(
            /* e15, e25, e35, e45 */
            float4(this.e5) * float4(other.group3.xyz, other.e4) * float4(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(-(other.e4 * this.e235) - (other.e3 * this.e425), -(other.e4 * this.e315) - (other.e1 * this.e435), -(other.e4 * this.e125) - (other.e2 * this.e415), (other.e2 * this.e315) + (other.e3 * this.e125)) + (other.group3.yzxx * float4(this.group0.zxy, this.e235)) - (float4(this.e5) * float4(other.group0.xyz, other.e321))
        );
        DipoleInversion right_anti_dual = DipoleInversion(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(right_anti_dual.e1234) * wedge.group1.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            float4(((right_anti_dual.group3.yzx * wedge.group1.zxy) - (right_anti_dual.group3.zxy * wedge.group1.yzx)), right_anti_dual.e1234 * wedge.e3215 * -1.0), 
            /* e235, e315, e125, e4 */
            (wedge.group1.xyzx * float4(right_anti_dual.group3.www, right_anti_dual.e41)) + float4(float3(0.0), (right_anti_dual.e42 * wedge.e4315) + (right_anti_dual.e43 * wedge.e4125)) - float4((wedge.group1.www * right_anti_dual.group3.xyz), right_anti_dual.e1234 * wedge.e45), 
            /* e1, e2, e3, e5 */
            float4(float3(0.0), (right_anti_dual.e4315 * wedge.e25) + (right_anti_dual.e4125 * wedge.e35) + (right_anti_dual.e3215 * wedge.e45) - (right_anti_dual.e35 * wedge.e4125)) + float4((right_anti_dual.group1.zxy * wedge.group1.yzx), right_anti_dual.e4235 * wedge.e15) - (float4(wedge.e3215) * float4(right_anti_dual.group0.xyz, right_anti_dual.e45)) - (right_anti_dual.group2.wwwy * float4(wedge.group0.xyz, wedge.e4315)) - (wedge.group1.zxyx * float4(right_anti_dual.group1.yzx, right_anti_dual.e15))
        );
    }
}
public extension Motor {
    public Motor anti_reject_orthogonally_from(AntiDualNum other) {
        Motor wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4(other.scalar) * this.group0, 
            /* e235, e315, e125, e5 */
            float4(other.scalar) * this.group1
        );
        DualNum right_anti_dual = DualNum(
            /* e5, e12345 */
            other.group0.xy
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4(right_anti_dual.e12345) * wedge.group0, 
            /* e235, e315, e125, e5 */
            float4(right_anti_dual.group0.xy.yy, right_anti_dual.e12345, (right_anti_dual.e5 * wedge.e12345) + (right_anti_dual.e12345 * wedge.e5)) * float4(wedge.group1.xyz, 1.0)
        );
    }
}
public extension Motor {
    public DualNum anti_reject_orthogonally_from(AntiFlatPoint other) {
        return DualNum(
            /* e5, e12345 */
            float2(float4(other.group0.xyz, other.e321 * -1.0)[3] * other.e321 * this.e5 * -1.0, 1.0) * float2(-1.0, 0.0)
        );
    }
}
public extension Motor {
    public Motor anti_reject_orthogonally_from(AntiFlector other) {
        Flector wedge = Flector(
            /* e15, e25, e35, e45 */
            float4(float3(1.0), 0.0) * float4(this.group1.www, 0.0) * float4(other.group1.xyz, 0.0) * float4(-1.0, -1.0, -1.0, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            (other.group1.yzxx * float4(this.group0.zxy, this.e235)) + float4(float3(0.0), (other.e2 * this.e315) + (other.e3 * this.e125)) - float4((other.group1.zxy * this.group0.yzx), other.e321 * this.e5)
        );
        Flector right_anti_dual = Flector(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4(((right_anti_dual.group1.yzx * wedge.group1.zxy) - (right_anti_dual.group1.zxy * wedge.group1.yzx)), 0.0), 
            /* e235, e315, e125, e5 */
            (right_anti_dual.group1.wwwx * float4(wedge.group1.xyz, wedge.e15)) + float4(float3(0.0), (right_anti_dual.e4315 * wedge.e25) + (right_anti_dual.e4125 * wedge.e35) + (right_anti_dual.e3215 * wedge.e45) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125) - (right_anti_dual.e45 * wedge.e3215)) - (wedge.group1.wwwx * float4(right_anti_dual.group1.xyz, right_anti_dual.e15))
        );
    }
}
public extension Motor {
    public Motor anti_reject_orthogonally_from(AntiLine other) {
        Motor wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4(float3(0.0), -(other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435)), 
            /* e235, e315, e125, e5 */
            float4(float3(1.0), 0.0) * float4(other.group0.xyz, 0.0) * float4(this.group1.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        Line right_anti_dual = Line(
            /* e415, e425, e435 */
            other.group0.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group1.xyz * float3(-1.0)
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4(float3(1.0), 0.0) * float4(right_anti_dual.group0.xyz, 0.0) * float4(wedge.group0.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e235, e315, e125, e5 */
            float4((float3(wedge.e12345) * right_anti_dual.group1.xyz), -(right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435))
        );
    }
}
public extension Motor {
    public Motor anti_reject_orthogonally_from(AntiMotor other) {
        Motor wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4((other.group0.www * this.group0.xyz), (other.scalar * this.e12345) - (other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435)), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.scalar) * this.group1.xyz) + (float3(this.e5) * other.group0.xyz)), other.scalar * this.e5)
        );
        Motor right_anti_dual = Motor(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4(((float3(right_anti_dual.e12345) * wedge.group0.xyz) + (float3(wedge.e12345) * right_anti_dual.group0.xyz)), right_anti_dual.e12345 * wedge.e12345), 
            /* e235, e315, e125, e5 */
            (float4(right_anti_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_anti_dual.group1) + float4(float3(0.0), -(right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435))
        );
    }
}
public extension Motor {
    public Motor anti_reject_orthogonally_from(AntiPlane other) {
        Flector wedge = Flector(
            /* e15, e25, e35, e45 */
            float4(float3(1.0), 0.0) * float4(this.group1.www, 0.0) * float4(other.group0.xyz, 0.0) * float4(-1.0, -1.0, -1.0, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.e3 * this.e425 * -1.0, other.e1 * this.e435 * -1.0, other.e2 * this.e415 * -1.0, (other.e2 * this.e315) + (other.e3 * this.e125)) + (other.group0.yzxx * float4(this.group0.zxy, this.e235))
        );
        Plane right_anti_dual = Plane(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4(((wedge.group1.zxy * right_anti_dual.group0.yzx) - (wedge.group1.yzx * right_anti_dual.group0.zxy)), 0.0), 
            /* e235, e315, e125, e5 */
            float4(wedge.e3215 * right_anti_dual.e4235 * -1.0, wedge.e3215 * right_anti_dual.e4315 * -1.0, wedge.e3215 * right_anti_dual.e4125 * -1.0, (wedge.e25 * right_anti_dual.e4315) + (wedge.e35 * right_anti_dual.e4125) + (wedge.e45 * right_anti_dual.e3215)) + (right_anti_dual.group0.wwwx * float4(wedge.group1.xyz, wedge.e15))
        );
    }
}
public extension Motor {
    public RoundPoint anti_reject_orthogonally_from(Circle other) {
        Plane wedge = Plane(
            /* e4235, e4315, e4125, e3215 */
            float4(this.e5) * float4(other.group0.xyz, other.e321) * float4(-1.0)
        );
        Dipole right_anti_dual = Dipole(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35 */
            other.group2.xyz
        );
        return RoundPoint(
            /* e1, e2, e3, e4 */
            float4(-(right_anti_dual.e41 * wedge.e3215) - (right_anti_dual.e31 * wedge.e4125), -(right_anti_dual.e42 * wedge.e3215) - (right_anti_dual.e12 * wedge.e4235), -(right_anti_dual.e43 * wedge.e3215) - (right_anti_dual.e23 * wedge.e4315), (right_anti_dual.e42 * wedge.e4315) + (right_anti_dual.e43 * wedge.e4125)) + (wedge.group0.yzxx * float4(right_anti_dual.group1.zxy, right_anti_dual.e41)), 
            /* e5 */
            -(right_anti_dual.e45 * wedge.e3215) - (right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125)
        );
    }
}
public extension Motor {
    public RoundPoint anti_reject_orthogonally_from(CircleRotor other) {
        Plane wedge = Plane(
            /* e4235, e4315, e4125, e3215 */
            float4(this.e5) * float4(other.group0.xyz, other.e321) * float4(-1.0)
        );
        AntiCircleRotor right_anti_dual = AntiCircleRotor(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return RoundPoint(
            /* e1, e2, e3, e4 */
            float4(-(right_anti_dual.e41 * wedge.e3215) - (right_anti_dual.e31 * wedge.e4125), -(right_anti_dual.e42 * wedge.e3215) - (right_anti_dual.e12 * wedge.e4235), -(right_anti_dual.e43 * wedge.e3215) - (right_anti_dual.e23 * wedge.e4315), (right_anti_dual.e42 * wedge.e4315) + (right_anti_dual.e43 * wedge.e4125)) + (wedge.group0.yzxx * float4(right_anti_dual.group1.zxy, right_anti_dual.e41)), 
            /* e5 */
            -(right_anti_dual.e45 * wedge.e3215) - (right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125)
        );
    }
}
public extension Motor {
    public AntiDipoleInversion anti_reject_orthogonally_from(Dipole other) {
        Motor wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4((float3(this.e5) * other.group0.xyz), -(other.e41 * this.e235) - (other.e42 * this.e315) - (other.e43 * this.e125) - (other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435)), 
            /* e235, e315, e125, e5 */
            float4(float3(1.0), 0.0) * float4(this.group1.www, 0.0) * float4(other.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        Circle right_anti_dual = Circle(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125 */
            other.group2.xyz * float3(-1.0)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(wedge.e12345) * right_anti_dual.group1, 
            /* e235, e315, e125, e4 */
            float4((float3(wedge.e12345) * right_anti_dual.group2.xyz), -(right_anti_dual.e423 * wedge.e415) - (right_anti_dual.e431 * wedge.e425) - (right_anti_dual.e412 * wedge.e435)), 
            /* e1, e2, e3, e5 */
            float4((right_anti_dual.e412 * wedge.e315) + (right_anti_dual.e321 * wedge.e415), (right_anti_dual.e423 * wedge.e125) + (right_anti_dual.e321 * wedge.e425), (right_anti_dual.e431 * wedge.e235) + (right_anti_dual.e321 * wedge.e435), -(right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435)) - float4((right_anti_dual.group0.xyz.yzx * wedge.group1.zxy), right_anti_dual.e235 * wedge.e415)
        );
    }
}
public extension Motor {
    public AntiDipoleInversion anti_reject_orthogonally_from(DipoleInversion other) {
        Motor wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4((float3(this.e5) * other.group0.xyz), (other.e1234 * this.e5) - (other.e41 * this.e235) - (other.e42 * this.e315) - (other.e43 * this.e125) - (other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435)), 
            /* e235, e315, e125, e5 */
            float4(float3(1.0), 0.0) * float4(this.group1.www, 0.0) * float4(other.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        AntiDipoleInversion right_anti_dual = AntiDipoleInversion(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(wedge.e12345) * right_anti_dual.group1, 
            /* e235, e315, e125, e4 */
            float4((float3(wedge.e12345) * right_anti_dual.group2.xyz), (right_anti_dual.e4 * wedge.e12345) - (right_anti_dual.e423 * wedge.e415) - (right_anti_dual.e431 * wedge.e425) - (right_anti_dual.e412 * wedge.e435)), 
            /* e1, e2, e3, e5 */
            float4((right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e1 * wedge.e12345), (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e2 * wedge.e12345), (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e3 * wedge.e12345), -(right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435)) + float4((right_anti_dual.group0.xyz.zxy * wedge.group1.yzx), right_anti_dual.e5 * wedge.e12345) - (wedge.group1.zxyx * float4(right_anti_dual.group0.xyz.yzx, right_anti_dual.e415))
        );
    }
}
public extension Motor {
    public MultiVector anti_reject_orthogonally_from(MultiVector other) {
        MultiVector wedge = MultiVector(
            /* scalar, e12345 */
            float2(0.0, (this.e12345 * other.scalar) + (this.e5 * other.e1234) - (this.e415 * other.e23) - (this.e425 * other.e31) - (this.e435 * other.e12) - (this.e235 * other.e41) - (this.e315 * other.e42) - (this.e125 * other.e43)), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5 */
            this.e5 * other.scalar, 
            /* e15, e25, e35, e45 */
            float4(this.e5) * other.group1 * float4(-1.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(((float3(this.e5) * other.group4.xyz) + (float3(other.scalar) * this.group0.xyz)), 0.0), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            (float3(this.e5) * other.group5.xyz) + (float3(other.scalar) * this.group1.xyz), 
            /* e4235, e4315, e4125, e3215 */
            float4(-(this.e425 * other.e3) - (this.e235 * other.e4), -(this.e435 * other.e1) - (this.e315 * other.e4), -(this.e415 * other.e2) - (this.e125 * other.e4), (this.e315 * other.e2) + (this.e125 * other.e3)) + (other.group1.yzxx * float4(this.group0.zxy, this.e235)) - float4((other.group7.xyz * this.group1.www), this.e5 * other.e321), 
            /* e1234 */
            0.0
        );
        MultiVector right_anti_dual = MultiVector(
            /* scalar, e12345 */
            other.group0.xy.yx * float2(-1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215, 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43 */
            other.group7.xyz, 
            /* e23, e31, e12 */
            other.group6.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412 */
            other.group4.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group3.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2((right_anti_dual.scalar * wedge.e12345) + (right_anti_dual.e12345 * wedge.scalar) + (right_anti_dual.e1 * wedge.e4235) + (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) + (right_anti_dual.e4 * wedge.e3215) + (right_anti_dual.e5 * wedge.e1234) + (right_anti_dual.e4235 * wedge.e1) + (right_anti_dual.e4315 * wedge.e2) + (right_anti_dual.e4125 * wedge.e3) + (right_anti_dual.e3215 * wedge.e4) + (right_anti_dual.e1234 * wedge.e5) - (right_anti_dual.e15 * wedge.e423) - (right_anti_dual.e25 * wedge.e431) - (right_anti_dual.e35 * wedge.e412) - (right_anti_dual.e45 * wedge.e321) - (right_anti_dual.e41 * wedge.e235) - (right_anti_dual.e42 * wedge.e315) - (right_anti_dual.e43 * wedge.e125) - (right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e321 * wedge.e45) - (right_anti_dual.e423 * wedge.e15) - (right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43), right_anti_dual.e12345 * wedge.e12345), 
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e15 * wedge.e1234) + (right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e4125 * wedge.e31), (right_anti_dual.e25 * wedge.e1234) + (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e4235 * wedge.e12), (right_anti_dual.e35 * wedge.e1234) + (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e4315 * wedge.e23), -(right_anti_dual.e415 * wedge.e423) - (right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412) - (right_anti_dual.e1234 * wedge.e45)) + (float4(right_anti_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_anti_dual.group1) + (wedge.group9.yzxx * float4(right_anti_dual.group5.xyz.zxy, right_anti_dual.e41)) + float4((wedge.group4.xyz * right_anti_dual.group9.www), right_anti_dual.e45 * wedge.e1234) + float4((right_anti_dual.group7.xyz.zxy * wedge.group8.xyz.yzx), right_anti_dual.e42 * wedge.e4315) + float4((right_anti_dual.group8.xyz.yzx * wedge.group7.xyz.zxy), right_anti_dual.e43 * wedge.e4125) - (right_anti_dual.group9.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((float3(right_anti_dual.e1234) * wedge.group3.xyz), right_anti_dual.e4125 * wedge.e43) - float4((right_anti_dual.group4.xyz * wedge.group9.www), right_anti_dual.e423 * wedge.e415) - float4((right_anti_dual.group5.xyz.yzx * wedge.group9.zxy), right_anti_dual.e431 * wedge.e425) - float4((right_anti_dual.group7.xyz.yzx * wedge.group8.xyz.zxy), right_anti_dual.e412 * wedge.e435) - float4((right_anti_dual.group8.xyz.zxy * wedge.group7.xyz.yzx), right_anti_dual.e4235 * wedge.e41), 
            /* e5 */
            (right_anti_dual.e12345 * wedge.e5) + (right_anti_dual.e5 * wedge.e12345) + (right_anti_dual.e4235 * wedge.e15) + (right_anti_dual.e4315 * wedge.e25) + (right_anti_dual.e4125 * wedge.e35) + (right_anti_dual.e3215 * wedge.e45) - (right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125) - (right_anti_dual.e45 * wedge.e3215) - (right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435), 
            /* e15, e25, e35, e45 */
            float4((right_anti_dual.e415 * wedge.e3215) + (right_anti_dual.e315 * wedge.e4125) + (right_anti_dual.e4125 * wedge.e315) + (right_anti_dual.e3215 * wedge.e415), (right_anti_dual.e425 * wedge.e3215) + (right_anti_dual.e125 * wedge.e4235) + (right_anti_dual.e4235 * wedge.e125) + (right_anti_dual.e3215 * wedge.e425), (right_anti_dual.e435 * wedge.e3215) + (right_anti_dual.e235 * wedge.e4315) + (right_anti_dual.e4315 * wedge.e235) + (right_anti_dual.e3215 * wedge.e435), -(right_anti_dual.e435 * wedge.e4125) - (right_anti_dual.e4235 * wedge.e415) - (right_anti_dual.e4315 * wedge.e425) - (right_anti_dual.e4125 * wedge.e435)) + (float4(right_anti_dual.e12345) * wedge.group3) + (float4(wedge.e12345) * right_anti_dual.group3) - (wedge.group9.yzxx * float4(right_anti_dual.group8.xyz.zxy, right_anti_dual.e415)) - float4((wedge.group8.xyz.zxy * right_anti_dual.group9.yzx), right_anti_dual.e425 * wedge.e4315), 
            /* e41, e42, e43 */
            (float3(right_anti_dual.e12345) * wedge.group4.xyz) + (float3(right_anti_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_anti_dual.group4.xyz) + (float3(wedge.e1234) * right_anti_dual.group6.xyz) + (right_anti_dual.group7.xyz.zxy * wedge.group9.yzx) + (wedge.group7.xyz.zxy * right_anti_dual.group9.yzx) - (right_anti_dual.group7.xyz.yzx * wedge.group9.zxy) - (wedge.group7.xyz.yzx * right_anti_dual.group9.zxy), 
            /* e23, e31, e12 */
            (float3(right_anti_dual.e12345) * wedge.group5.xyz) + (float3(right_anti_dual.e3215) * wedge.group7.xyz) + (float3(right_anti_dual.e1234) * wedge.group8.xyz) + (float3(wedge.e12345) * right_anti_dual.group5.xyz) + (float3(wedge.e3215) * right_anti_dual.group7.xyz) + (float3(wedge.e1234) * right_anti_dual.group8.xyz) - (float3(right_anti_dual.e321) * wedge.group9.xyz) - (float3(wedge.e321) * right_anti_dual.group9.xyz), 
            /* e415, e425, e435, e321 */
            (float4(right_anti_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_anti_dual.group6) + (right_anti_dual.group9.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - float4((right_anti_dual.group9.zxy * wedge.group9.yzx), right_anti_dual.e1234 * wedge.e3215), 
            /* e423, e431, e412 */
            (float3(right_anti_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_anti_dual.group7.xyz) + (float3(wedge.e1234) * right_anti_dual.group9.xyz) - (float3(right_anti_dual.e1234) * wedge.group9.xyz), 
            /* e235, e315, e125 */
            (float3(right_anti_dual.e12345) * wedge.group8.xyz) + (float3(right_anti_dual.e3215) * wedge.group9.xyz) + (float3(wedge.e12345) * right_anti_dual.group8.xyz) - (float3(wedge.e3215) * right_anti_dual.group9.xyz), 
            /* e4235, e4315, e4125, e3215 */
            (float4(right_anti_dual.e12345) * wedge.group9) + (float4(wedge.e12345) * right_anti_dual.group9), 
            /* e1234 */
            (right_anti_dual.e12345 * wedge.e1234) + (right_anti_dual.e1234 * wedge.e12345)
        );
    }
}
public extension Motor {
    public AntiDipoleInversion anti_reject_orthogonally_from(RoundPoint other) {
        Flector wedge = Flector(
            /* e15, e25, e35, e45 */
            float4(this.e5) * other.group0 * float4(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(-(this.e425 * other.e3) - (this.e235 * other.e4), -(this.e435 * other.e1) - (this.e315 * other.e4), -(this.e415 * other.e2) - (this.e125 * other.e4), (this.e315 * other.e2) + (this.e125 * other.e3)) + (other.group0.yzxx * float4(this.group0.zxy, this.e235))
        );
        Sphere right_anti_dual = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(right_anti_dual.e1234) * wedge.group1.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            float4(((wedge.group1.zxy * right_anti_dual.group0.yzx) - (wedge.group1.yzx * right_anti_dual.group0.zxy)), wedge.e3215 * right_anti_dual.e1234 * -1.0), 
            /* e235, e315, e125, e4 */
            float4(((float3(right_anti_dual.e3215) * wedge.group1.xyz) - (float3(wedge.e3215) * right_anti_dual.group0.xyz)), wedge.e45 * right_anti_dual.e1234 * -1.0), 
            /* e1, e2, e3, e5 */
            float4((float3(right_anti_dual.e1234) * wedge.group0.xyz * float3(-1.0)), (wedge.e15 * right_anti_dual.e4235) + (wedge.e25 * right_anti_dual.e4315) + (wedge.e35 * right_anti_dual.e4125) + (wedge.e45 * right_anti_dual.e3215))
        );
    }
}
public extension Motor {
    public Motor anti_reject_orthogonally_from(Scalar other) {
        Motor wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4(other.scalar) * this.group0, 
            /* e235, e315, e125, e5 */
            float4(other.scalar) * this.group1
        );
        AntiScalar right_anti_dual = AntiScalar(
            /* e12345 */
            other.scalar
        );
        return Motor(
            /* e415, e425, e435, e12345 */
            float4(right_anti_dual.e12345) * wedge.group0, 
            /* e235, e315, e125, e5 */
            float4(right_anti_dual.e12345) * wedge.group1
        );
    }
}
public extension Motor {
    public RoundPoint anti_reject_orthogonally_from(Sphere other) {
        AntiScalar wedge = AntiScalar(
            /* e12345 */
            this.e5 * other.e1234
        );
        RoundPoint right_anti_dual = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(other.group0.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215
        );
        return RoundPoint(
            /* e1, e2, e3, e4 */
            float4(wedge.e12345) * right_anti_dual.group0, 
            /* e5 */
            wedge.e12345 * right_anti_dual.e5
        );
    }
}
public extension Motor {
    public AntiDipoleInversion anti_reject_orthogonally_from(VersorEven other) {
        Flector wedge = Flector(
            /* e15, e25, e35, e45 */
            float4(this.e5) * other.group3 * float4(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(-(this.e235 * other.e4) - (this.e5 * other.e423), -(this.e315 * other.e4) - (this.e5 * other.e431), -(this.e125 * other.e4) - (this.e5 * other.e412), (this.e315 * other.e2) + (this.e125 * other.e3)) + (other.group3.yzxx * float4(this.group0.zxy, this.e235)) - float4((this.group0.yzx * other.group3.zxy), this.e5 * other.e321)
        );
        VersorOdd right_anti_dual = VersorOdd(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(right_anti_dual.e1234) * wedge.group1.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            float4(((wedge.group1.zxy * right_anti_dual.group3.yzx) - (wedge.group1.yzx * right_anti_dual.group3.zxy)), wedge.e3215 * right_anti_dual.e1234 * -1.0), 
            /* e235, e315, e125, e4 */
            (wedge.group1.xyzx * float4(right_anti_dual.group3.www, right_anti_dual.e41)) + float4(float3(0.0), (wedge.e4315 * right_anti_dual.e42) + (wedge.e4125 * right_anti_dual.e43)) - float4((wedge.group1.www * right_anti_dual.group3.xyz), wedge.e45 * right_anti_dual.e1234), 
            /* e1, e2, e3, e5 */
            float4(float3(0.0), (wedge.e25 * right_anti_dual.e4315) + (wedge.e35 * right_anti_dual.e4125) + (wedge.e45 * right_anti_dual.e3215) - (wedge.e3215 * right_anti_dual.e45)) + float4((wedge.group1.yzx * right_anti_dual.group1.zxy), wedge.e15 * right_anti_dual.e4235) - (wedge.group1.zxyy * float4(right_anti_dual.group1.yzx, right_anti_dual.e25)) - (wedge.group1.wwwz * float4(right_anti_dual.group0.xyz, right_anti_dual.e35)) - (right_anti_dual.group2.wwwx * float4(wedge.group0.xyz, wedge.e4235))
        );
    }
}
public extension Motor {
    public VersorEven anti_reject_orthogonally_from(VersorOdd other) {
        Motor wedge = Motor(
            /* e415, e425, e435, e12345 */
            (float4(this.e5) * float4(other.group0.xyz, other.e1234)) + (float4(other.scalar) * this.group0) + float4(float3(0.0), -(this.e415 * other.e23) - (this.e425 * other.e31) - (this.e435 * other.e12) - (this.e235 * other.e41) - (this.e315 * other.e42) - (this.e125 * other.e43)), 
            /* e235, e315, e125, e5 */
            float4(((float3(this.e5) * other.group1.xyz) + (float3(other.scalar) * this.group1.xyz)), this.e5 * other.scalar)
        );
        VersorEven right_anti_dual = VersorEven(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(wedge.e12345) * right_anti_dual.group0, 
            /* e415, e425, e435, e321 */
            float4(((float3(wedge.e12345) * right_anti_dual.group1.xyz) + (float3(right_anti_dual.e12345) * wedge.group0.xyz)), wedge.e12345 * right_anti_dual.e321), 
            /* e235, e315, e125, e5 */
            (float4(wedge.e12345) * right_anti_dual.group2) + (float4(right_anti_dual.e12345) * wedge.group1) + float4(float3(0.0), -(wedge.e415 * right_anti_dual.e235) - (wedge.e425 * right_anti_dual.e315) - (wedge.e435 * right_anti_dual.e125) - (wedge.e235 * right_anti_dual.e415) - (wedge.e315 * right_anti_dual.e425) - (wedge.e125 * right_anti_dual.e435)), 
            /* e1, e2, e3, e4 */
            float4((wedge.e12345 * right_anti_dual.e1) + (wedge.e315 * right_anti_dual.e412), (wedge.e12345 * right_anti_dual.e2) + (wedge.e125 * right_anti_dual.e423), (wedge.e12345 * right_anti_dual.e3) + (wedge.e235 * right_anti_dual.e431), -(wedge.e425 * right_anti_dual.e431) - (wedge.e435 * right_anti_dual.e412)) + (wedge.group0 * float4(right_anti_dual.group1.www, right_anti_dual.e4)) - (right_anti_dual.group0.yzxx * float4(wedge.group1.zxy, wedge.e415))
        );
    }
}
public extension MultiVector {
    // Fancy infix trick (first half)
    public AntiRejectOrthogonallyFromInfixPartial<MultiVector> operator /(AntiRejectOrthogonallyFromInfix rhs) {
        return AntiRejectOrthogonallyFromInfixPartial<MultiVector>(this);
    }
}
public extension AntiRejectOrthogonallyFromInfixPartial<MultiVector> {
    // Fancy infix trick (second half)
    public MultiVector operator /(AntiCircleRotor rhs) {
        return this.a.anti_reject_orthogonally_from(rhs);
    }
}
public extension MultiVector {
    public MultiVector anti_reject_orthogonally_from(AntiCircleRotor other) {
        MultiVector wedge = MultiVector(
            /* scalar, e12345 */
            float2(other.scalar * this.scalar, (other.scalar * this.e12345) - (other.e41 * this.e235) - (other.e42 * this.e315) - (other.e43 * this.e125) - (other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435) - (other.e45 * this.e321) - (other.e15 * this.e423) - (other.e25 * this.e431) - (other.e35 * this.e412)), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * this.group1, 
            /* e5 */
            other.scalar * this.e5, 
            /* e15, e25, e35, e45 */
            (float4(other.scalar) * this.group3) + (float4(this.scalar) * float4(other.group2.xyz, other.e45)), 
            /* e41, e42, e43 */
            (float3(other.scalar) * this.group4.xyz) + (float3(this.scalar) * other.group0.xyz), 
            /* e23, e31, e12 */
            (float3(other.scalar) * this.group5.xyz) + (float3(this.scalar) * other.group1.xyz), 
            /* e415, e425, e435, e321 */
            float4((other.e15 * this.e4) + (other.scalar * this.e415), (other.e25 * this.e4) + (other.scalar * this.e425), (other.e35 * this.e4) + (other.scalar * this.e435), -(other.e31 * this.e2) - (other.e12 * this.e3)) + float4((float3(this.e5) * other.group0.xyz), other.scalar * this.e321) - (other.group1.wwwx * this.group1.xyzx), 
            /* e423, e431, e412 */
            (float3(other.scalar) * this.group7.xyz) + (float3(this.e4) * other.group1.xyz) + (other.group0.xyz.yzx * this.group1.zxy) - (other.group0.xyz.zxy * this.group1.yzx), 
            /* e235, e315, e125 */
            (float3(other.scalar) * this.group8.xyz) + (float3(this.e5) * other.group1.xyz) + (other.group2.zxy * this.group1.yzx) - (other.group2.yzx * this.group1.zxy), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e23 * this.e45) + (other.e45 * this.e23) + (other.e35 * this.e42) + (other.scalar * this.e4235), (other.e31 * this.e45) + (other.e45 * this.e31) + (other.e15 * this.e43) + (other.scalar * this.e4315), (other.e12 * this.e45) + (other.e45 * this.e12) + (other.e25 * this.e41) + (other.scalar * this.e4125), -(other.e23 * this.e15) - (other.e31 * this.e25) - (other.e12 * this.e35) - (other.e35 * this.e12)) + float4((other.group0.xyz.yzx * this.group3.zxy), other.scalar * this.e3215) - (other.group2.yzxy * float4(this.group4.xyz.zxy, this.e31)) - float4((other.group0.xyz.zxy * this.group3.yzx), other.e15 * this.e23), 
            /* e1234 */
            (other.scalar * this.e1234) - (other.e41 * this.e23) - (other.e42 * this.e31) - (other.e43 * this.e12) - (other.e23 * this.e41) - (other.e31 * this.e42) - (other.e12 * this.e43)
        );
        CircleRotor right_anti_dual = CircleRotor(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return MultiVector(
            /* scalar, e12345 */
            float2((right_anti_dual.e12345 * wedge.scalar) - (right_anti_dual.e423 * wedge.e15) - (right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e321 * wedge.e45) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43), right_anti_dual.e12345 * wedge.e12345), 
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e315 * wedge.e412) + (right_anti_dual.e12345 * wedge.e1), (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e125 * wedge.e423) + (right_anti_dual.e12345 * wedge.e2), (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e235 * wedge.e431) + (right_anti_dual.e12345 * wedge.e3), -(right_anti_dual.e412 * wedge.e435) - (right_anti_dual.e415 * wedge.e423) - (right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412)) + float4((right_anti_dual.group0.xyz.zxy * wedge.group8.xyz.yzx), right_anti_dual.e12345 * wedge.e4) - float4((right_anti_dual.group0.xyz.yzx * wedge.group8.xyz.zxy), right_anti_dual.e423 * wedge.e415) - float4((wedge.group7.xyz.yzx * right_anti_dual.group2.zxy), right_anti_dual.e431 * wedge.e425), 
            /* e5 */
            (right_anti_dual.e12345 * wedge.e5) - (right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435), 
            /* e15, e25, e35, e45 */
            float4((right_anti_dual.e315 * wedge.e4125) + (right_anti_dual.e12345 * wedge.e15), (right_anti_dual.e125 * wedge.e4235) + (right_anti_dual.e12345 * wedge.e25), (right_anti_dual.e235 * wedge.e4315) + (right_anti_dual.e12345 * wedge.e35), -(right_anti_dual.e425 * wedge.e4315) - (right_anti_dual.e435 * wedge.e4125)) + float4((wedge.group9.www * right_anti_dual.group1.xyz), right_anti_dual.e12345 * wedge.e45) - (wedge.group9.yzxx * float4(right_anti_dual.group2.zxy, right_anti_dual.e415)), 
            /* e41, e42, e43 */
            (float3(right_anti_dual.e12345) * wedge.group4.xyz) + (float3(wedge.e1234) * right_anti_dual.group1.xyz) + (right_anti_dual.group0.xyz.zxy * wedge.group9.yzx) - (right_anti_dual.group0.xyz.yzx * wedge.group9.zxy), 
            /* e23, e31, e12 */
            (float3(right_anti_dual.e12345) * wedge.group5.xyz) + (float3(wedge.e3215) * right_anti_dual.group0.xyz) + (float3(wedge.e1234) * right_anti_dual.group2.xyz) - (float3(right_anti_dual.e321) * wedge.group9.xyz), 
            /* e415, e425, e435, e321 */
            (float4(right_anti_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_anti_dual.group1), 
            /* e423, e431, e412 */
            (float3(right_anti_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_anti_dual.group0.xyz), 
            /* e235, e315, e125 */
            (float3(right_anti_dual.e12345) * wedge.group8.xyz) + (float3(wedge.e12345) * right_anti_dual.group2.xyz), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_anti_dual.e12345) * wedge.group9, 
            /* e1234 */
            right_anti_dual.e12345 * wedge.e1234
        );
    }
}
public extension MultiVector {
    public MultiVector anti_reject_orthogonally_from(AntiDipoleInversion other) {
        MultiVector wedge = MultiVector(
            /* scalar, e12345 */
            float2(0.0, (other.e4 * this.e3215) + (other.e1 * this.e4235) + (other.e2 * this.e4315) + (other.e3 * this.e4125) + (other.e5 * this.e1234) - (other.e423 * this.e15) - (other.e431 * this.e25) - (other.e412 * this.e35) - (other.e415 * this.e23) - (other.e425 * this.e31) - (other.e435 * this.e12) - (other.e321 * this.e45) - (other.e235 * this.e41) - (other.e315 * this.e42) - (other.e125 * this.e43)), 
            /* e1, e2, e3, e4 */
            float4(this.scalar) * float4(other.group3.xyz, other.e4), 
            /* e5 */
            other.e5 * this.scalar, 
            /* e15, e25, e35, e45 */
            (float4(other.e5) * this.group1) - (float4(this.e5) * float4(other.group3.xyz, other.e4)), 
            /* e41, e42, e43 */
            (float3(this.e4) * other.group3.xyz) - (float3(other.e4) * this.group1.xyz), 
            /* e23, e31, e12 */
            (other.group3.zxy * this.group1.yzx) - (other.group3.yzx * this.group1.zxy), 
            /* e415, e425, e435, e321 */
            float4((other.e4 * this.e15) + (other.e5 * this.e41), (other.e4 * this.e25) + (other.e5 * this.e42), (other.e4 * this.e35) + (other.e5 * this.e43), -(other.e2 * this.e31) - (other.e3 * this.e12)) + (float4(this.scalar) * other.group1) - float4((this.group3.www * other.group3.xyz), other.e1 * this.e23), 
            /* e423, e431, e412 */
            (float3(other.e4) * this.group5.xyz) + (float3(this.scalar) * other.group0.xyz) + (this.group4.xyz.yzx * other.group3.zxy) - (this.group4.xyz.zxy * other.group3.yzx), 
            /* e235, e315, e125 */
            (float3(other.e5) * this.group5.xyz) + (float3(this.scalar) * other.group2.xyz) + (other.group3.yzx * this.group3.zxy) - (other.group3.zxy * this.group3.yzx), 
            /* e4235, e4315, e4125, e3215 */
            (other.group3.yzxw * this.group6.zxyw) + (other.group3.wwwx * float4(this.group7.xyz, this.e235)) + float4((other.group1.yzx * this.group1.zxy), other.e2 * this.e315) + float4((this.group1.www * other.group2.xyz), other.e3 * this.e125) - (float4(this.e5) * float4(other.group0.xyz, other.e321)) - (this.group1.yzxy * float4(other.group1.zxy, other.e315)) - float4((this.group8.xyz * other.group2.www), other.e235 * this.e1) - float4((other.group3.zxy * this.group6.yzx), other.e125 * this.e3), 
            /* e1234 */
            (other.e423 * this.e1) + (other.e431 * this.e2) + (other.e412 * this.e3) + (other.e321 * this.e4) - (other.e4 * this.e321) - (other.e1 * this.e423) - (other.e2 * this.e431) - (other.e3 * this.e412)
        );
        DipoleInversion right_anti_dual = DipoleInversion(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return MultiVector(
            /* scalar, e12345 */
            float2((right_anti_dual.e1234 * wedge.e5) + (right_anti_dual.e4235 * wedge.e1) + (right_anti_dual.e4315 * wedge.e2) + (right_anti_dual.e4125 * wedge.e3) + (right_anti_dual.e3215 * wedge.e4) - (right_anti_dual.e41 * wedge.e235) - (right_anti_dual.e42 * wedge.e315) - (right_anti_dual.e43 * wedge.e125) - (right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435) - (right_anti_dual.e45 * wedge.e321) - (right_anti_dual.e15 * wedge.e423) - (right_anti_dual.e25 * wedge.e431) - (right_anti_dual.e35 * wedge.e412), 0.0), 
            /* e1, e2, e3, e4 */
            (float4(wedge.e1234) * float4(right_anti_dual.group2.xyz, right_anti_dual.e45)) + (wedge.group9.yzxz * float4(right_anti_dual.group1.zxy, right_anti_dual.e43)) + float4((wedge.group4.xyz * right_anti_dual.group3.www), right_anti_dual.e41 * wedge.e4235) + float4((wedge.group5.xyz.yzx * right_anti_dual.group3.zxy), right_anti_dual.e42 * wedge.e4315) - (float4(right_anti_dual.e1234) * wedge.group3) - (right_anti_dual.group3.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((right_anti_dual.group0.xyz * wedge.group9.www), right_anti_dual.e4235 * wedge.e41) - float4((right_anti_dual.group1.yzx * wedge.group9.zxy), right_anti_dual.e4125 * wedge.e43), 
            /* e5 */
            (right_anti_dual.e4235 * wedge.e15) + (right_anti_dual.e4315 * wedge.e25) + (right_anti_dual.e4125 * wedge.e35) + (right_anti_dual.e3215 * wedge.e45) - (right_anti_dual.e45 * wedge.e3215) - (right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125), 
            /* e15, e25, e35, e45 */
            float4((right_anti_dual.e4125 * wedge.e315) + (right_anti_dual.e3215 * wedge.e415), (right_anti_dual.e4235 * wedge.e125) + (right_anti_dual.e3215 * wedge.e425), (right_anti_dual.e4315 * wedge.e235) + (right_anti_dual.e3215 * wedge.e435), -(right_anti_dual.e4315 * wedge.e425) - (right_anti_dual.e4125 * wedge.e435)) + (float4(wedge.e12345) * float4(right_anti_dual.group2.xyz, right_anti_dual.e45)) - float4((wedge.group8.xyz.zxy * right_anti_dual.group3.yzx), right_anti_dual.e4235 * wedge.e415), 
            /* e41, e42, e43 */
            (float3(right_anti_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_anti_dual.group0.xyz) + (wedge.group7.xyz.zxy * right_anti_dual.group3.yzx) - (wedge.group7.xyz.yzx * right_anti_dual.group3.zxy), 
            /* e23, e31, e12 */
            (float3(right_anti_dual.e1234) * wedge.group8.xyz) + (float3(right_anti_dual.e3215) * wedge.group7.xyz) + (float3(wedge.e12345) * right_anti_dual.group1.xyz) - (float3(wedge.e321) * right_anti_dual.group3.xyz), 
            /* e415, e425, e435, e321 */
            (right_anti_dual.group3.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - (wedge.group9.yzxw * float4(right_anti_dual.group3.zxy, right_anti_dual.e1234)), 
            /* e423, e431, e412 */
            (float3(wedge.e1234) * right_anti_dual.group3.xyz) - (float3(right_anti_dual.e1234) * wedge.group9.xyz), 
            /* e235, e315, e125 */
            (float3(right_anti_dual.e3215) * wedge.group9.xyz) - (float3(wedge.e3215) * right_anti_dual.group3.xyz), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_anti_dual.group3, 
            /* e1234 */
            right_anti_dual.e1234 * wedge.e12345
        );
    }
}
public extension MultiVector {
    public MultiVector anti_reject_orthogonally_from(AntiDualNum other) {
        MultiVector wedge = MultiVector(
            /* scalar, e12345 */
            float2(other.scalar * this.scalar, (other.e3215 * this.e4) + (other.scalar * this.e12345)), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * this.group1, 
            /* e5 */
            other.scalar * this.e5, 
            /* e15, e25, e35, e45 */
            float4(other.scalar) * this.group3, 
            /* e41, e42, e43 */
            float3(other.scalar) * this.group4.xyz, 
            /* e23, e31, e12 */
            float3(other.scalar) * this.group5.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.scalar) * this.group6, 
            /* e423, e431, e412 */
            float3(other.scalar) * this.group7.xyz, 
            /* e235, e315, e125 */
            float3(other.scalar) * this.group8.xyz, 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xy.yy, other.scalar, (other.e3215 * this.scalar) + (other.scalar * this.e3215)) * float4(this.group9.xyz, 1.0), 
            /* e1234 */
            other.scalar * this.e1234
        );
        DualNum right_anti_dual = DualNum(
            /* e5, e12345 */
            other.group0.xy
        );
        return MultiVector(
            /* scalar, e12345 */
            float2((right_anti_dual.e5 * wedge.e1234) + (right_anti_dual.e12345 * wedge.scalar), right_anti_dual.e12345 * wedge.e12345), 
            /* e1, e2, e3, e4 */
            float4(right_anti_dual.e12345) * wedge.group1, 
            /* e5 */
            (right_anti_dual.e5 * wedge.e12345) + (right_anti_dual.e12345 * wedge.e5), 
            /* e15, e25, e35, e45 */
            float4(right_anti_dual.e12345) * wedge.group3, 
            /* e41, e42, e43 */
            float3(right_anti_dual.e12345) * wedge.group4.xyz, 
            /* e23, e31, e12 */
            float3(right_anti_dual.e12345) * wedge.group5.xyz, 
            /* e415, e425, e435, e321 */
            float4(right_anti_dual.e12345) * wedge.group6, 
            /* e423, e431, e412 */
            float3(right_anti_dual.e12345) * wedge.group7.xyz, 
            /* e235, e315, e125 */
            float3(right_anti_dual.e12345) * wedge.group8.xyz, 
            /* e4235, e4315, e4125, e3215 */
            float4(right_anti_dual.e12345) * wedge.group9, 
            /* e1234 */
            right_anti_dual.e12345 * wedge.e1234
        );
    }
}
public extension MultiVector {
    public MultiVector anti_reject_orthogonally_from(AntiFlatPoint other) {
        MultiVector wedge = MultiVector(
            /* scalar, e12345 */
            float2(0.0, -(other.e235 * this.e41) - (other.e315 * this.e42) - (other.e125 * this.e43) - (other.e321 * this.e45)), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5 */
            0.0, 
            /* e15, e25, e35, e45 */
            float4(0.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(float3(0.0), other.e321 * this.scalar), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            float3(this.scalar) * other.group0.xyz, 
            /* e4235, e4315, e4125, e3215 */
            float4((float3(this.e4) * other.group0.xyz), -(other.e235 * this.e1) - (other.e315 * this.e2) - (other.e125 * this.e3) - (other.e321 * this.e5)), 
            /* e1234 */
            other.e321 * this.e4
        );
        FlatPoint right_anti_dual = FlatPoint(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(-(right_anti_dual.e15 * wedge.e423) - (right_anti_dual.e25 * wedge.e431) - (right_anti_dual.e35 * wedge.e412) - (right_anti_dual.e45 * wedge.e321), 0.0), 
            /* e1, e2, e3, e4 */
            float4(wedge.e1234) * right_anti_dual.group0, 
            /* e5 */
            -(right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125) - (right_anti_dual.e45 * wedge.e3215), 
            /* e15, e25, e35, e45 */
            float4(wedge.e12345) * right_anti_dual.group0, 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(0.0), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            float3(0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(0.0), 
            /* e1234 */
            0.0
        );
    }
}
public extension MultiVector {
    public MultiVector anti_reject_orthogonally_from(AntiFlector other) {
        MultiVector wedge = MultiVector(
            /* scalar, e12345 */
            float2(0.0, (other.e1 * this.e4235) + (other.e2 * this.e4315) + (other.e3 * this.e4125) + (other.e5 * this.e1234) - (other.e235 * this.e41) - (other.e315 * this.e42) - (other.e125 * this.e43) - (other.e321 * this.e45)), 
            /* e1, e2, e3, e4 */
            float4(this.group0.xy.xx, this.scalar, 0.0) * float4(float3(1.0), 0.0) * float4(other.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e5 */
            other.e5 * this.scalar, 
            /* e15, e25, e35, e45 */
            float4(((float3(other.e5) * this.group1.xyz) - (float3(this.e5) * other.group1.xyz)), other.e5 * this.e4), 
            /* e41, e42, e43 */
            float3(this.e4) * other.group1.xyz, 
            /* e23, e31, e12 */
            (other.group1.zxy * this.group1.yzx) - (other.group1.yzx * this.group1.zxy), 
            /* e415, e425, e435, e321 */
            float4(float3(0.0), -(other.e2 * this.e31) - (other.e3 * this.e12)) + float4((this.group4.xyz * other.group1.www), other.e321 * this.scalar) - float4((this.group3.www * other.group1.xyz), other.e1 * this.e23), 
            /* e423, e431, e412 */
            (this.group4.xyz.yzx * other.group1.zxy) - (this.group4.xyz.zxy * other.group1.yzx), 
            /* e235, e315, e125 */
            (float3(other.e5) * this.group5.xyz) + (float3(this.scalar) * other.group0.xyz) + (other.group1.yzx * this.group3.zxy) - (other.group1.zxy * this.group3.yzx), 
            /* e4235, e4315, e4125, e3215 */
            (other.group1.wwwx * float4(this.group7.xyz, this.e235)) + float4(float3(0.0), (other.e5 * this.e321) - (other.e315 * this.e2) - (other.e125 * this.e3) - (other.e321 * this.e5)) + float4((other.group1.yzx * this.group6.zxy), other.e3 * this.e125) + float4((this.group1.www * other.group0.xyz), other.e2 * this.e315) - float4((other.group1.zxy * this.group6.yzx), other.e235 * this.e1), 
            /* e1234 */
            (other.e321 * this.e4) - (other.e1 * this.e423) - (other.e2 * this.e431) - (other.e3 * this.e412)
        );
        Flector right_anti_dual = Flector(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return MultiVector(
            /* scalar, e12345 */
            float2((right_anti_dual.e4235 * wedge.e1) + (right_anti_dual.e4315 * wedge.e2) + (right_anti_dual.e4125 * wedge.e3) + (right_anti_dual.e3215 * wedge.e4) - (right_anti_dual.e15 * wedge.e423) - (right_anti_dual.e25 * wedge.e431) - (right_anti_dual.e35 * wedge.e412) - (right_anti_dual.e45 * wedge.e321), 0.0), 
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e15 * wedge.e1234) + (right_anti_dual.e4125 * wedge.e31), (right_anti_dual.e25 * wedge.e1234) + (right_anti_dual.e4235 * wedge.e12), (right_anti_dual.e35 * wedge.e1234) + (right_anti_dual.e4315 * wedge.e23), -(right_anti_dual.e4315 * wedge.e42) - (right_anti_dual.e4125 * wedge.e43)) + float4((wedge.group4.xyz * right_anti_dual.group1.www), right_anti_dual.e45 * wedge.e1234) - (right_anti_dual.group1.yzxx * float4(wedge.group5.xyz.zxy, wedge.e41)), 
            /* e5 */
            (right_anti_dual.e4235 * wedge.e15) + (right_anti_dual.e4315 * wedge.e25) + (right_anti_dual.e4125 * wedge.e35) + (right_anti_dual.e3215 * wedge.e45) - (right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125) - (right_anti_dual.e45 * wedge.e3215), 
            /* e15, e25, e35, e45 */
            float4((right_anti_dual.e4125 * wedge.e315) + (right_anti_dual.e3215 * wedge.e415), (right_anti_dual.e4235 * wedge.e125) + (right_anti_dual.e3215 * wedge.e425), (right_anti_dual.e4315 * wedge.e235) + (right_anti_dual.e3215 * wedge.e435), -(right_anti_dual.e4315 * wedge.e425) - (right_anti_dual.e4125 * wedge.e435)) + (float4(wedge.e12345) * right_anti_dual.group0) - float4((wedge.group8.xyz.zxy * right_anti_dual.group1.yzx), right_anti_dual.e4235 * wedge.e415), 
            /* e41, e42, e43 */
            (wedge.group7.xyz.zxy * right_anti_dual.group1.yzx) - (wedge.group7.xyz.yzx * right_anti_dual.group1.zxy), 
            /* e23, e31, e12 */
            (float3(right_anti_dual.e3215) * wedge.group7.xyz) - (float3(wedge.e321) * right_anti_dual.group1.xyz), 
            /* e415, e425, e435, e321 */
            float4(((right_anti_dual.group1.yzx * wedge.group9.zxy) - (right_anti_dual.group1.zxy * wedge.group9.yzx)), right_anti_dual.e3215 * wedge.e1234), 
            /* e423, e431, e412 */
            float3(wedge.e1234) * right_anti_dual.group1.xyz, 
            /* e235, e315, e125 */
            (float3(right_anti_dual.e3215) * wedge.group9.xyz) - (float3(wedge.e3215) * right_anti_dual.group1.xyz), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_anti_dual.group1, 
            /* e1234 */
            0.0
        );
    }
}
public extension MultiVector {
    public MultiVector anti_reject_orthogonally_from(AntiLine other) {
        MultiVector wedge = MultiVector(
            /* scalar, e12345 */
            float2(0.0, -(other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435) - (other.e15 * this.e423) - (other.e25 * this.e431) - (other.e35 * this.e412)), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5 */
            0.0, 
            /* e15, e25, e35, e45 */
            float4(this.group0.xy.xx, this.scalar, 0.0) * float4(float3(1.0), 0.0) * float4(other.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(this.scalar) * other.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4((float3(this.e4) * other.group1.xyz), -(other.e23 * this.e1) - (other.e31 * this.e2) - (other.e12 * this.e3)), 
            /* e423, e431, e412 */
            float3(this.e4) * other.group0.xyz, 
            /* e235, e315, e125 */
            (float3(this.e5) * other.group0.xyz) + (other.group1.xyz.zxy * this.group1.yzx) - (other.group1.xyz.yzx * this.group1.zxy), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e23 * this.e45) + (other.e35 * this.e42), (other.e31 * this.e45) + (other.e15 * this.e43), (other.e12 * this.e45) + (other.e25 * this.e41), -(other.e31 * this.e25) - (other.e12 * this.e35) - (other.e15 * this.e23) - (other.e25 * this.e31) - (other.e35 * this.e12)) - float4((other.group1.xyz.yzx * this.group4.xyz.zxy), other.e23 * this.e15), 
            /* e1234 */
            -(other.e23 * this.e41) - (other.e31 * this.e42) - (other.e12 * this.e43)
        );
        Line right_anti_dual = Line(
            /* e415, e425, e435 */
            other.group0.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group1.xyz * float3(-1.0)
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(-(right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43), 0.0), 
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e315 * wedge.e412), (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e125 * wedge.e423), (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e235 * wedge.e431), -(right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412)) - float4((right_anti_dual.group1.xyz.zxy * wedge.group7.xyz.yzx), right_anti_dual.e415 * wedge.e423), 
            /* e5 */
            -(right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435), 
            /* e15, e25, e35, e45 */
            float4((right_anti_dual.e415 * wedge.e3215) + (right_anti_dual.e315 * wedge.e4125), (right_anti_dual.e425 * wedge.e3215) + (right_anti_dual.e125 * wedge.e4235), (right_anti_dual.e435 * wedge.e3215) + (right_anti_dual.e235 * wedge.e4315), -(right_anti_dual.e425 * wedge.e4315) - (right_anti_dual.e435 * wedge.e4125)) - (wedge.group9.yzxx * float4(right_anti_dual.group1.xyz.zxy, right_anti_dual.e415)), 
            /* e41, e42, e43 */
            float3(wedge.e1234) * right_anti_dual.group0.xyz, 
            /* e23, e31, e12 */
            float3(wedge.e1234) * right_anti_dual.group1.xyz, 
            /* e415, e425, e435, e321 */
            float4(wedge.group0.xy.yy, wedge.e12345, 0.0) * float4(float3(1.0), 0.0) * float4(right_anti_dual.group0.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            float3(wedge.e12345) * right_anti_dual.group1.xyz, 
            /* e4235, e4315, e4125, e3215 */
            float4(0.0), 
            /* e1234 */
            0.0
        );
    }
}
public extension MultiVector {
    public MultiVector anti_reject_orthogonally_from(AntiMotor other) {
        MultiVector wedge = MultiVector(
            /* scalar, e12345 */
            float2(other.scalar * this.scalar, (other.scalar * this.e12345) + (other.e3215 * this.e4) - (other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435) - (other.e15 * this.e423) - (other.e25 * this.e431) - (other.e35 * this.e412)), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * this.group1, 
            /* e5 */
            other.scalar * this.e5, 
            /* e15, e25, e35, e45 */
            float4(((float3(other.scalar) * this.group3.xyz) + (float3(this.scalar) * other.group1.xyz)), other.scalar * this.e45), 
            /* e41, e42, e43 */
            float3(other.scalar) * this.group4.xyz, 
            /* e23, e31, e12 */
            (float3(other.scalar) * this.group5.xyz) + (float3(this.scalar) * other.group0.xyz), 
            /* e415, e425, e435, e321 */
            float4(other.e15 * this.e4, other.e25 * this.e4, other.e35 * this.e4, -(other.e23 * this.e1) - (other.e31 * this.e2) - (other.e12 * this.e3)) + (float4(other.scalar) * this.group6), 
            /* e423, e431, e412 */
            (float3(other.scalar) * this.group7.xyz) + (float3(this.e4) * other.group0.xyz), 
            /* e235, e315, e125 */
            (float3(other.scalar) * this.group8.xyz) + (float3(this.e5) * other.group0.xyz) + (other.group1.zxy * this.group1.yzx) - (other.group1.yzx * this.group1.zxy), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar * this.e4235, other.scalar * this.e4315, other.scalar * this.e4125, -(other.e23 * this.e15) - (other.e31 * this.e25) - (other.e12 * this.e35) - (other.e25 * this.e31) - (other.e35 * this.e12)) + (other.group0 * float4(this.group3.www, this.e3215)) + (other.group1.zxyw * float4(this.group4.xyz.yzx, this.scalar)) - (other.group1.yzxx * float4(this.group4.xyz.zxy, this.e23)), 
            /* e1234 */
            (other.scalar * this.e1234) - (other.e23 * this.e41) - (other.e31 * this.e42) - (other.e12 * this.e43)
        );
        Motor right_anti_dual = Motor(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return MultiVector(
            /* scalar, e12345 */
            float2((right_anti_dual.e12345 * wedge.scalar) + (right_anti_dual.e5 * wedge.e1234) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43), right_anti_dual.e12345 * wedge.e12345), 
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e12345 * wedge.e1), (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e12345 * wedge.e2), (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e12345 * wedge.e3), -(right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412)) + float4((wedge.group7.xyz.zxy * right_anti_dual.group1.yzx), right_anti_dual.e12345 * wedge.e4) - float4((wedge.group7.xyz.yzx * right_anti_dual.group1.zxy), right_anti_dual.e415 * wedge.e423), 
            /* e5 */
            (right_anti_dual.e12345 * wedge.e5) + (right_anti_dual.e5 * wedge.e12345) - (right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435), 
            /* e15, e25, e35, e45 */
            float4((right_anti_dual.e12345 * wedge.e15) + (right_anti_dual.e315 * wedge.e4125), (right_anti_dual.e12345 * wedge.e25) + (right_anti_dual.e125 * wedge.e4235), (right_anti_dual.e12345 * wedge.e35) + (right_anti_dual.e235 * wedge.e4315), -(right_anti_dual.e425 * wedge.e4315) - (right_anti_dual.e435 * wedge.e4125)) + (right_anti_dual.group0 * float4(wedge.group9.www, wedge.e45)) - (wedge.group9.yzxx * float4(right_anti_dual.group1.zxy, right_anti_dual.e415)), 
            /* e41, e42, e43 */
            (float3(right_anti_dual.e12345) * wedge.group4.xyz) + (float3(wedge.e1234) * right_anti_dual.group0.xyz), 
            /* e23, e31, e12 */
            (float3(right_anti_dual.e12345) * wedge.group5.xyz) + (float3(wedge.e1234) * right_anti_dual.group1.xyz), 
            /* e415, e425, e435, e321 */
            float4(((float3(right_anti_dual.e12345) * wedge.group6.xyz) + (float3(wedge.e12345) * right_anti_dual.group0.xyz)), right_anti_dual.e12345 * wedge.e321), 
            /* e423, e431, e412 */
            float3(right_anti_dual.e12345) * wedge.group7.xyz, 
            /* e235, e315, e125 */
            (float3(right_anti_dual.e12345) * wedge.group8.xyz) + (float3(wedge.e12345) * right_anti_dual.group1.xyz), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_anti_dual.e12345) * wedge.group9, 
            /* e1234 */
            right_anti_dual.e12345 * wedge.e1234
        );
    }
}
public extension MultiVector {
    public MultiVector anti_reject_orthogonally_from(AntiPlane other) {
        MultiVector wedge = MultiVector(
            /* scalar, e12345 */
            float2(0.0, (other.e1 * this.e4235) + (other.e2 * this.e4315) + (other.e3 * this.e4125) + (other.e5 * this.e1234)), 
            /* e1, e2, e3, e4 */
            float4(this.group0.xy.xx, this.scalar, 0.0) * float4(float3(1.0), 0.0) * float4(other.group0.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e5 */
            other.e5 * this.scalar, 
            /* e15, e25, e35, e45 */
            float4(((float3(other.e5) * this.group1.xyz) - (float3(this.e5) * other.group0.xyz)), other.e5 * this.e4), 
            /* e41, e42, e43 */
            float3(this.e4) * other.group0.xyz, 
            /* e23, e31, e12 */
            (other.group0.zxy * this.group1.yzx) - (other.group0.yzx * this.group1.zxy), 
            /* e415, e425, e435, e321 */
            float4(other.e5 * this.e41, other.e5 * this.e42, other.e5 * this.e43, -(other.e2 * this.e31) - (other.e3 * this.e12)) - float4((this.group3.www * other.group0.xyz), other.e1 * this.e23), 
            /* e423, e431, e412 */
            (this.group4.xyz.yzx * other.group0.zxy) - (this.group4.xyz.zxy * other.group0.yzx), 
            /* e235, e315, e125 */
            (float3(other.e5) * this.group5.xyz) + (other.group0.yzx * this.group3.zxy) - (other.group0.zxy * this.group3.yzx), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.e3 * this.e425 * -1.0, other.e1 * this.e435 * -1.0, other.e2 * this.e415 * -1.0, (other.e3 * this.e125) + (other.e5 * this.e321)) + (other.group0.wwwx * float4(this.group7.xyz, this.e235)) + float4((other.group0.yzx * this.group6.zxy), other.e2 * this.e315), 
            /* e1234 */
            -(other.e1 * this.e423) - (other.e2 * this.e431) - (other.e3 * this.e412)
        );
        Plane right_anti_dual = Plane(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return MultiVector(
            /* scalar, e12345 */
            float2((wedge.e1 * right_anti_dual.e4235) + (wedge.e2 * right_anti_dual.e4315) + (wedge.e3 * right_anti_dual.e4125) + (wedge.e4 * right_anti_dual.e3215), 0.0), 
            /* e1, e2, e3, e4 */
            float4((wedge.e41 * right_anti_dual.e3215) + (wedge.e31 * right_anti_dual.e4125), (wedge.e42 * right_anti_dual.e3215) + (wedge.e12 * right_anti_dual.e4235), (wedge.e43 * right_anti_dual.e3215) + (wedge.e23 * right_anti_dual.e4315), -(wedge.e42 * right_anti_dual.e4315) - (wedge.e43 * right_anti_dual.e4125)) - (right_anti_dual.group0.yzxx * float4(wedge.group5.xyz.zxy, wedge.e41)), 
            /* e5 */
            (wedge.e15 * right_anti_dual.e4235) + (wedge.e25 * right_anti_dual.e4315) + (wedge.e35 * right_anti_dual.e4125) + (wedge.e45 * right_anti_dual.e3215), 
            /* e15, e25, e35, e45 */
            float4((wedge.e415 * right_anti_dual.e3215) + (wedge.e315 * right_anti_dual.e4125), (wedge.e425 * right_anti_dual.e3215) + (wedge.e125 * right_anti_dual.e4235), (wedge.e435 * right_anti_dual.e3215) + (wedge.e235 * right_anti_dual.e4315), -(wedge.e425 * right_anti_dual.e4315) - (wedge.e435 * right_anti_dual.e4125)) - (right_anti_dual.group0.yzxx * float4(wedge.group8.xyz.zxy, wedge.e415)), 
            /* e41, e42, e43 */
            (wedge.group7.xyz.zxy * right_anti_dual.group0.yzx) - (wedge.group7.xyz.yzx * right_anti_dual.group0.zxy), 
            /* e23, e31, e12 */
            (float3(right_anti_dual.e3215) * wedge.group7.xyz) - (float3(wedge.e321) * right_anti_dual.group0.xyz), 
            /* e415, e425, e435, e321 */
            float4(((wedge.group9.zxy * right_anti_dual.group0.yzx) - (wedge.group9.yzx * right_anti_dual.group0.zxy)), wedge.e1234 * right_anti_dual.e3215), 
            /* e423, e431, e412 */
            float3(wedge.e1234) * right_anti_dual.group0.xyz, 
            /* e235, e315, e125 */
            (float3(right_anti_dual.e3215) * wedge.group9.xyz) - (float3(wedge.e3215) * right_anti_dual.group0.xyz), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_anti_dual.group0, 
            /* e1234 */
            0.0
        );
    }
}
public extension MultiVector {
    public Scalar anti_reject_orthogonally_from(AntiScalar other) {
        return Scalar(
            /* scalar */
            pow(other.e12345, 2) * this.scalar * -1.0
        );
    }
}
public extension MultiVector {
    public MultiVector anti_reject_orthogonally_from(Circle other) {
        MultiVector wedge = MultiVector(
            /* scalar, e12345 */
            float2(0.0, -(other.e423 * this.e15) - (other.e431 * this.e25) - (other.e412 * this.e35) - (other.e415 * this.e23) - (other.e425 * this.e31) - (other.e435 * this.e12) - (other.e321 * this.e45) - (other.e235 * this.e41) - (other.e315 * this.e42) - (other.e125 * this.e43)), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5 */
            0.0, 
            /* e15, e25, e35, e45 */
            float4(0.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(this.scalar) * other.group1, 
            /* e423, e431, e412 */
            float3(this.scalar) * other.group0.xyz, 
            /* e235, e315, e125 */
            float3(this.scalar) * other.group2.xyz, 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e425 * this.e3) + (other.e235 * this.e4), (other.e435 * this.e1) + (other.e315 * this.e4), (other.e415 * this.e2) + (other.e125 * this.e4), -(other.e321 * this.e5) - (other.e125 * this.e3)) - (this.group1.yzxy * float4(other.group1.zxy, other.e315)) - float4((float3(this.e5) * other.group0.xyz), other.e235 * this.e1), 
            /* e1234 */
            (other.e423 * this.e1) + (other.e431 * this.e2) + (other.e412 * this.e3) + (other.e321 * this.e4)
        );
        Dipole right_anti_dual = Dipole(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35 */
            other.group2.xyz
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(-(right_anti_dual.e41 * wedge.e235) - (right_anti_dual.e42 * wedge.e315) - (right_anti_dual.e43 * wedge.e125) - (right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435) - (right_anti_dual.e45 * wedge.e321) - (right_anti_dual.e15 * wedge.e423) - (right_anti_dual.e25 * wedge.e431) - (right_anti_dual.e35 * wedge.e412), 0.0), 
            /* e1, e2, e3, e4 */
            float4(-(right_anti_dual.e41 * wedge.e3215) - (right_anti_dual.e31 * wedge.e4125), -(right_anti_dual.e42 * wedge.e3215) - (right_anti_dual.e12 * wedge.e4235), -(right_anti_dual.e43 * wedge.e3215) - (right_anti_dual.e23 * wedge.e4315), (right_anti_dual.e43 * wedge.e4125) + (right_anti_dual.e45 * wedge.e1234)) + (wedge.group9.yzxy * float4(right_anti_dual.group1.zxy, right_anti_dual.e42)) + float4((float3(wedge.e1234) * right_anti_dual.group2.xyz), right_anti_dual.e41 * wedge.e4235), 
            /* e5 */
            -(right_anti_dual.e45 * wedge.e3215) - (right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125), 
            /* e15, e25, e35, e45 */
            float4(wedge.e12345) * float4(right_anti_dual.group2.xyz, right_anti_dual.e45), 
            /* e41, e42, e43 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e23, e31, e12 */
            float3(wedge.e12345) * right_anti_dual.group1.xyz, 
            /* e415, e425, e435, e321 */
            float4(0.0), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            float3(0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(0.0), 
            /* e1234 */
            0.0
        );
    }
}
public extension MultiVector {
    public MultiVector anti_reject_orthogonally_from(CircleRotor other) {
        MultiVector wedge = MultiVector(
            /* scalar, e12345 */
            float2(0.0, (other.e12345 * this.scalar) - (other.e423 * this.e15) - (other.e431 * this.e25) - (other.e412 * this.e35) - (other.e415 * this.e23) - (other.e425 * this.e31) - (other.e435 * this.e12) - (other.e321 * this.e45) - (other.e235 * this.e41) - (other.e315 * this.e42) - (other.e125 * this.e43)), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5 */
            0.0, 
            /* e15, e25, e35, e45 */
            float4(0.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(this.scalar) * other.group1, 
            /* e423, e431, e412 */
            float3(this.scalar) * other.group0.xyz, 
            /* e235, e315, e125 */
            float3(this.scalar) * other.group2.xyz, 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e425 * this.e3) + (other.e235 * this.e4), (other.e435 * this.e1) + (other.e315 * this.e4), (other.e415 * this.e2) + (other.e125 * this.e4), -(other.e315 * this.e2) - (other.e125 * this.e3)) - (float4(this.e5) * float4(other.group0.xyz, other.e321)) - (this.group1.yzxx * float4(other.group1.zxy, other.e235)), 
            /* e1234 */
            (other.e423 * this.e1) + (other.e431 * this.e2) + (other.e412 * this.e3) + (other.e321 * this.e4)
        );
        AntiCircleRotor right_anti_dual = AntiCircleRotor(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return MultiVector(
            /* scalar, e12345 */
            float2((right_anti_dual.scalar * wedge.e12345) - (right_anti_dual.e41 * wedge.e235) - (right_anti_dual.e42 * wedge.e315) - (right_anti_dual.e43 * wedge.e125) - (right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435) - (right_anti_dual.e45 * wedge.e321) - (right_anti_dual.e15 * wedge.e423) - (right_anti_dual.e25 * wedge.e431) - (right_anti_dual.e35 * wedge.e412), 0.0), 
            /* e1, e2, e3, e4 */
            float4(-(right_anti_dual.e41 * wedge.e3215) - (right_anti_dual.e31 * wedge.e4125), -(right_anti_dual.e42 * wedge.e3215) - (right_anti_dual.e12 * wedge.e4235), -(right_anti_dual.e43 * wedge.e3215) - (right_anti_dual.e23 * wedge.e4315), (right_anti_dual.e43 * wedge.e4125) + (right_anti_dual.e45 * wedge.e1234)) + (wedge.group9.yzxx * float4(right_anti_dual.group1.zxy, right_anti_dual.e41)) + float4((float3(wedge.e1234) * right_anti_dual.group2.xyz), right_anti_dual.e42 * wedge.e4315), 
            /* e5 */
            -(right_anti_dual.e45 * wedge.e3215) - (right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125), 
            /* e15, e25, e35, e45 */
            float4(wedge.e12345) * float4(right_anti_dual.group2.xyz, right_anti_dual.e45), 
            /* e41, e42, e43 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e23, e31, e12 */
            float3(wedge.e12345) * right_anti_dual.group1.xyz, 
            /* e415, e425, e435, e321 */
            float4(0.0), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            float3(0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(0.0), 
            /* e1234 */
            0.0
        );
    }
}
public extension MultiVector {
    public MultiVector anti_reject_orthogonally_from(Dipole other) {
        MultiVector wedge = MultiVector(
            /* scalar, e12345 */
            float2(0.0, -(other.e41 * this.e235) - (other.e42 * this.e315) - (other.e43 * this.e125) - (other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435) - (other.e45 * this.e321) - (other.e15 * this.e423) - (other.e25 * this.e431) - (other.e35 * this.e412)), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5 */
            0.0, 
            /* e15, e25, e35, e45 */
            float4(this.scalar) * float4(other.group2.xyz, other.e45), 
            /* e41, e42, e43 */
            float3(this.scalar) * other.group0.xyz, 
            /* e23, e31, e12 */
            float3(this.scalar) * other.group1.xyz, 
            /* e415, e425, e435, e321 */
            float4((other.e41 * this.e5) + (other.e15 * this.e4), (other.e42 * this.e5) + (other.e25 * this.e4), (other.e43 * this.e5) + (other.e35 * this.e4), -(other.e31 * this.e2) - (other.e12 * this.e3)) - (other.group1.wwwx * this.group1.xyzx), 
            /* e423, e431, e412 */
            (float3(this.e4) * other.group1.xyz) + (other.group0.xyz.yzx * this.group1.zxy) - (other.group0.xyz.zxy * this.group1.yzx), 
            /* e235, e315, e125 */
            (float3(this.e5) * other.group1.xyz) + (other.group2.xyz.zxy * this.group1.yzx) - (other.group2.xyz.yzx * this.group1.zxy), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e42 * this.e35) + (other.e23 * this.e45) + (other.e45 * this.e23) + (other.e35 * this.e42), (other.e43 * this.e15) + (other.e31 * this.e45) + (other.e45 * this.e31) + (other.e15 * this.e43), (other.e41 * this.e25) + (other.e12 * this.e45) + (other.e45 * this.e12) + (other.e25 * this.e41), -(other.e23 * this.e15) - (other.e31 * this.e25) - (other.e12 * this.e35) - (other.e35 * this.e12)) - float4((other.group0.xyz.zxy * this.group3.yzx), other.e15 * this.e23) - float4((other.group2.xyz.yzx * this.group4.xyz.zxy), other.e25 * this.e31), 
            /* e1234 */
            -(other.e41 * this.e23) - (other.e42 * this.e31) - (other.e43 * this.e12) - (other.e23 * this.e41) - (other.e31 * this.e42) - (other.e12 * this.e43)
        );
        Circle right_anti_dual = Circle(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125 */
            other.group2.xyz * float3(-1.0)
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(-(right_anti_dual.e423 * wedge.e15) - (right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e321 * wedge.e45) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43), 0.0), 
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e412 * wedge.e315) + (right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e315 * wedge.e412), (right_anti_dual.e423 * wedge.e125) + (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e125 * wedge.e423), (right_anti_dual.e431 * wedge.e235) + (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e235 * wedge.e431), -(right_anti_dual.e412 * wedge.e435) - (right_anti_dual.e415 * wedge.e423) - (right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412)) - float4((right_anti_dual.group0.xyz.yzx * wedge.group8.xyz.zxy), right_anti_dual.e423 * wedge.e415) - float4((right_anti_dual.group2.xyz.zxy * wedge.group7.xyz.yzx), right_anti_dual.e431 * wedge.e425), 
            /* e5 */
            -(right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435), 
            /* e15, e25, e35, e45 */
            float4((right_anti_dual.e415 * wedge.e3215) + (right_anti_dual.e315 * wedge.e4125), (right_anti_dual.e425 * wedge.e3215) + (right_anti_dual.e125 * wedge.e4235), (right_anti_dual.e435 * wedge.e3215) + (right_anti_dual.e235 * wedge.e4315), -(right_anti_dual.e425 * wedge.e4315) - (right_anti_dual.e435 * wedge.e4125)) - (wedge.group9.yzxx * float4(right_anti_dual.group2.xyz.zxy, right_anti_dual.e415)), 
            /* e41, e42, e43 */
            (float3(wedge.e1234) * right_anti_dual.group1.xyz) + (right_anti_dual.group0.xyz.zxy * wedge.group9.yzx) - (right_anti_dual.group0.xyz.yzx * wedge.group9.zxy), 
            /* e23, e31, e12 */
            (float3(wedge.e3215) * right_anti_dual.group0.xyz) + (float3(wedge.e1234) * right_anti_dual.group2.xyz) - (float3(right_anti_dual.e321) * wedge.group9.xyz), 
            /* e415, e425, e435, e321 */
            float4(wedge.e12345) * right_anti_dual.group1, 
            /* e423, e431, e412 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e235, e315, e125 */
            float3(wedge.e12345) * right_anti_dual.group2.xyz, 
            /* e4235, e4315, e4125, e3215 */
            float4(0.0), 
            /* e1234 */
            0.0
        );
    }
}
public extension MultiVector {
    public MultiVector anti_reject_orthogonally_from(DipoleInversion other) {
        MultiVector wedge = MultiVector(
            /* scalar, e12345 */
            float2(0.0, (other.e1234 * this.e5) + (other.e4235 * this.e1) + (other.e4315 * this.e2) + (other.e4125 * this.e3) + (other.e3215 * this.e4) - (other.e41 * this.e235) - (other.e42 * this.e315) - (other.e43 * this.e125) - (other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435) - (other.e45 * this.e321) - (other.e15 * this.e423) - (other.e25 * this.e431) - (other.e35 * this.e412)), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5 */
            0.0, 
            /* e15, e25, e35, e45 */
            float4(this.scalar) * float4(other.group2.xyz, other.e45), 
            /* e41, e42, e43 */
            float3(this.scalar) * other.group0.xyz, 
            /* e23, e31, e12 */
            float3(this.scalar) * other.group1.xyz, 
            /* e415, e425, e435, e321 */
            float4((other.e41 * this.e5) + (other.e15 * this.e4), (other.e42 * this.e5) + (other.e25 * this.e4), (other.e43 * this.e5) + (other.e35 * this.e4), -(other.e31 * this.e2) - (other.e12 * this.e3)) - (other.group1.wwwx * this.group1.xyzx), 
            /* e423, e431, e412 */
            (float3(this.e4) * other.group1.xyz) + (other.group0.xyz.yzx * this.group1.zxy) - (other.group0.xyz.zxy * this.group1.yzx), 
            /* e235, e315, e125 */
            (float3(this.e5) * other.group1.xyz) + (other.group2.zxy * this.group1.yzx) - (other.group2.yzx * this.group1.zxy), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e42 * this.e35) + (other.e23 * this.e45) + (other.e45 * this.e23) + (other.e35 * this.e42), (other.e43 * this.e15) + (other.e31 * this.e45) + (other.e45 * this.e31) + (other.e15 * this.e43), (other.e41 * this.e25) + (other.e12 * this.e45) + (other.e45 * this.e12) + (other.e25 * this.e41), -(other.e23 * this.e15) - (other.e31 * this.e25) - (other.e12 * this.e35) - (other.e35 * this.e12)) + (float4(this.scalar) * other.group3) - (other.group2.yzxy * float4(this.group4.xyz.zxy, this.e31)) - float4((other.group0.xyz.zxy * this.group3.yzx), other.e15 * this.e23), 
            /* e1234 */
            (other.e1234 * this.scalar) - (other.e41 * this.e23) - (other.e42 * this.e31) - (other.e43 * this.e12) - (other.e23 * this.e41) - (other.e31 * this.e42) - (other.e12 * this.e43)
        );
        AntiDipoleInversion right_anti_dual = AntiDipoleInversion(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return MultiVector(
            /* scalar, e12345 */
            float2((right_anti_dual.e4 * wedge.e3215) + (right_anti_dual.e1 * wedge.e4235) + (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) + (right_anti_dual.e5 * wedge.e1234) - (right_anti_dual.e423 * wedge.e15) - (right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e321 * wedge.e45) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43), 0.0), 
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e412 * wedge.e315) + (right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e315 * wedge.e412), (right_anti_dual.e423 * wedge.e125) + (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e125 * wedge.e423), (right_anti_dual.e431 * wedge.e235) + (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e235 * wedge.e431), -(right_anti_dual.e412 * wedge.e435) - (right_anti_dual.e415 * wedge.e423) - (right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412)) + (float4(wedge.e12345) * float4(right_anti_dual.group3.xyz, right_anti_dual.e4)) - float4((right_anti_dual.group0.xyz.yzx * wedge.group8.xyz.zxy), right_anti_dual.e423 * wedge.e415) - float4((wedge.group7.xyz.yzx * right_anti_dual.group2.zxy), right_anti_dual.e431 * wedge.e425), 
            /* e5 */
            (right_anti_dual.e5 * wedge.e12345) - (right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435), 
            /* e15, e25, e35, e45 */
            float4((right_anti_dual.e415 * wedge.e3215) + (right_anti_dual.e315 * wedge.e4125), (right_anti_dual.e425 * wedge.e3215) + (right_anti_dual.e125 * wedge.e4235), (right_anti_dual.e435 * wedge.e3215) + (right_anti_dual.e235 * wedge.e4315), -(right_anti_dual.e425 * wedge.e4315) - (right_anti_dual.e435 * wedge.e4125)) - (wedge.group9.yzxx * float4(right_anti_dual.group2.zxy, right_anti_dual.e415)), 
            /* e41, e42, e43 */
            (float3(wedge.e1234) * right_anti_dual.group1.xyz) + (right_anti_dual.group0.xyz.zxy * wedge.group9.yzx) - (right_anti_dual.group0.xyz.yzx * wedge.group9.zxy), 
            /* e23, e31, e12 */
            (float3(wedge.e3215) * right_anti_dual.group0.xyz) + (float3(wedge.e1234) * right_anti_dual.group2.xyz) - (float3(right_anti_dual.e321) * wedge.group9.xyz), 
            /* e415, e425, e435, e321 */
            float4(wedge.e12345) * right_anti_dual.group1, 
            /* e423, e431, e412 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e235, e315, e125 */
            float3(wedge.e12345) * right_anti_dual.group2.xyz, 
            /* e4235, e4315, e4125, e3215 */
            float4(0.0), 
            /* e1234 */
            0.0
        );
    }
}
public extension MultiVector {
    public MultiVector anti_reject_orthogonally_from(DualNum other) {
        MultiVector wedge = MultiVector(
            /* scalar, e12345 */
            float2(0.0, (other.e5 * this.e1234) + (other.e12345 * this.scalar)), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5 */
            other.e5 * this.scalar, 
            /* e15, e25, e35, e45 */
            float4(other.e5) * this.group1, 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(other.group0.xy.xx, other.e5, 0.0) * float4(float3(1.0), 0.0) * float4(this.group4.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            float3(other.e5) * this.group5.xyz, 
            /* e4235, e4315, e4125, e3215 */
            float4(other.e5) * float4(this.group7.xyz, this.e321), 
            /* e1234 */
            0.0
        );
        AntiDualNum right_anti_dual = AntiDualNum(
            /* e3215, scalar */
            other.group0.xy * float2(-1.0)
        );
        return MultiVector(
            /* scalar, e12345 */
            float2((right_anti_dual.e3215 * wedge.e4) + (right_anti_dual.scalar * wedge.e12345), 0.0), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5 */
            right_anti_dual.e3215 * wedge.e45, 
            /* e15, e25, e35, e45 */
            float4(right_anti_dual.group0.xy.xx, right_anti_dual.e3215, 0.0) * float4(float3(1.0), 0.0) * float4(wedge.group6.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(0.0), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            float3(right_anti_dual.e3215) * wedge.group9.xyz, 
            /* e4235, e4315, e4125, e3215 */
            float4(float3(0.0), right_anti_dual.e3215 * wedge.e12345), 
            /* e1234 */
            0.0
        );
    }
}
public extension MultiVector {
    public MultiVector anti_reject_orthogonally_from(FlatPoint other) {
        MultiVector wedge = MultiVector(
            /* scalar, e12345 */
            float2(0.0, -(other.e15 * this.e423) - (other.e25 * this.e431) - (other.e35 * this.e412) - (other.e45 * this.e321)), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5 */
            0.0, 
            /* e15, e25, e35, e45 */
            float4(this.scalar) * other.group0, 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(((float3(this.e4) * other.group0.xyz) - (float3(other.e45) * this.group1.xyz)), 0.0), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            (other.group0.zxy * this.group1.yzx) - (other.group0.yzx * this.group1.zxy), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e35 * this.e42) + (other.e45 * this.e23), (other.e15 * this.e43) + (other.e45 * this.e31), (other.e25 * this.e41) + (other.e45 * this.e12), -(other.e25 * this.e31) - (other.e35 * this.e12)) - (other.group0.yzxx * float4(this.group4.xyz.zxy, this.e23)), 
            /* e1234 */
            0.0
        );
        AntiFlatPoint right_anti_dual = AntiFlatPoint(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(-(right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43) - (right_anti_dual.e321 * wedge.e45), 0.0), 
            /* e1, e2, e3, e4 */
            float4((float3(right_anti_dual.e321) * wedge.group6.xyz), 0.0) + float4((wedge.group7.xyz.zxy * right_anti_dual.group0.yzx), 0.0) - float4((wedge.group7.xyz.yzx * right_anti_dual.group0.zxy), 0.0), 
            /* e5 */
            -(right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435), 
            /* e15, e25, e35, e45 */
            float4(((right_anti_dual.group0.yzx * wedge.group9.zxy) - (right_anti_dual.group0.zxy * wedge.group9.yzx)), 0.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            (float3(wedge.e1234) * right_anti_dual.group0.xyz) - (float3(right_anti_dual.e321) * wedge.group9.xyz), 
            /* e415, e425, e435, e321 */
            float4(float3(0.0), right_anti_dual.e321 * wedge.e12345), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e4235, e4315, e4125, e3215 */
            float4(0.0), 
            /* e1234 */
            0.0
        );
    }
}
public extension MultiVector {
    public MultiVector anti_reject_orthogonally_from(Flector other) {
        MultiVector wedge = MultiVector(
            /* scalar, e12345 */
            float2(0.0, (other.e4235 * this.e1) + (other.e4315 * this.e2) + (other.e4125 * this.e3) + (other.e3215 * this.e4) - (other.e15 * this.e423) - (other.e25 * this.e431) - (other.e35 * this.e412) - (other.e45 * this.e321)), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5 */
            0.0, 
            /* e15, e25, e35, e45 */
            float4(this.scalar) * other.group0, 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(((float3(this.e4) * other.group0.xyz) - (float3(other.e45) * this.group1.xyz)), 0.0), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            (other.group0.zxy * this.group1.yzx) - (other.group0.yzx * this.group1.zxy), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e35 * this.e42) + (other.e45 * this.e23), (other.e15 * this.e43) + (other.e45 * this.e31), (other.e25 * this.e41) + (other.e45 * this.e12), -(other.e25 * this.e31) - (other.e35 * this.e12)) + (float4(this.scalar) * other.group1) - (other.group0.yzxx * float4(this.group4.xyz.zxy, this.e23)), 
            /* e1234 */
            0.0
        );
        AntiFlector right_anti_dual = AntiFlector(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return MultiVector(
            /* scalar, e12345 */
            float2((right_anti_dual.e1 * wedge.e4235) + (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) + (right_anti_dual.e5 * wedge.e1234) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43) - (right_anti_dual.e321 * wedge.e45), 0.0), 
            /* e1, e2, e3, e4 */
            float4((float3(right_anti_dual.e321) * wedge.group6.xyz), 0.0) + float4((float3(wedge.e12345) * right_anti_dual.group1.xyz), 0.0) + float4((wedge.group7.xyz.zxy * right_anti_dual.group0.yzx), 0.0) - float4((wedge.group7.xyz.yzx * right_anti_dual.group0.zxy), 0.0), 
            /* e5 */
            (right_anti_dual.e5 * wedge.e12345) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435), 
            /* e15, e25, e35, e45 */
            float4(((right_anti_dual.group0.yzx * wedge.group9.zxy) - (right_anti_dual.group0.zxy * wedge.group9.yzx)), 0.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            (float3(wedge.e1234) * right_anti_dual.group0.xyz) - (float3(right_anti_dual.e321) * wedge.group9.xyz), 
            /* e415, e425, e435, e321 */
            float4(float3(0.0), right_anti_dual.e321 * wedge.e12345), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e4235, e4315, e4125, e3215 */
            float4(0.0), 
            /* e1234 */
            0.0
        );
    }
}
public extension MultiVector {
    public MultiVector anti_reject_orthogonally_from(Line other) {
        MultiVector wedge = MultiVector(
            /* scalar, e12345 */
            float2(0.0, -(other.e415 * this.e23) - (other.e425 * this.e31) - (other.e435 * this.e12) - (other.e235 * this.e41) - (other.e315 * this.e42) - (other.e125 * this.e43)), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5 */
            0.0, 
            /* e15, e25, e35, e45 */
            float4(0.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(this.group0.xy.xx, this.scalar, 0.0) * float4(float3(1.0), 0.0) * float4(other.group0.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            float3(this.scalar) * other.group1.xyz, 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e425 * this.e3) + (other.e235 * this.e4), (other.e435 * this.e1) + (other.e315 * this.e4), (other.e415 * this.e2) + (other.e125 * this.e4), -(other.e315 * this.e2) - (other.e125 * this.e3)) - (this.group1.yzxx * float4(other.group0.xyz.zxy, other.e235)), 
            /* e1234 */
            0.0
        );
        AntiLine right_anti_dual = AntiLine(
            /* e23, e31, e12 */
            other.group0.xyz, 
            /* e15, e25, e35 */
            other.group1.xyz
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(-(right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435) - (right_anti_dual.e15 * wedge.e423) - (right_anti_dual.e25 * wedge.e431) - (right_anti_dual.e35 * wedge.e412), 0.0), 
            /* e1, e2, e3, e4 */
            float4((float3(wedge.e1234) * right_anti_dual.group1.xyz), 0.0) + float4((right_anti_dual.group0.xyz.zxy * wedge.group9.yzx), 0.0) - float4((right_anti_dual.group0.xyz.yzx * wedge.group9.zxy), 0.0), 
            /* e5 */
            -(right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125), 
            /* e15, e25, e35, e45 */
            float4(wedge.group0.xy.yy, wedge.e12345, 0.0) * float4(float3(1.0), 0.0) * float4(right_anti_dual.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(0.0), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            float3(0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(0.0), 
            /* e1234 */
            0.0
        );
    }
}
public extension MultiVector {
    public MultiVector anti_reject_orthogonally_from(Motor other) {
        MultiVector wedge = MultiVector(
            /* scalar, e12345 */
            float2(0.0, (other.e12345 * this.scalar) + (other.e5 * this.e1234) - (other.e415 * this.e23) - (other.e425 * this.e31) - (other.e435 * this.e12) - (other.e235 * this.e41) - (other.e315 * this.e42) - (other.e125 * this.e43)), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5 */
            other.e5 * this.scalar, 
            /* e15, e25, e35, e45 */
            float4(other.e5) * this.group1, 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(((float3(other.e5) * this.group4.xyz) + (float3(this.scalar) * other.group0.xyz)), 0.0), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            (float3(other.e5) * this.group5.xyz) + (float3(this.scalar) * other.group1.xyz), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e425 * this.e3) + (other.e235 * this.e4), (other.e435 * this.e1) + (other.e315 * this.e4), (other.e415 * this.e2) + (other.e125 * this.e4), -(other.e315 * this.e2) - (other.e125 * this.e3)) + float4((this.group7.xyz * other.group1.www), other.e5 * this.e321) - (this.group1.yzxx * float4(other.group0.zxy, other.e235)), 
            /* e1234 */
            0.0
        );
        AntiMotor right_anti_dual = AntiMotor(
            /* e23, e31, e12, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return MultiVector(
            /* scalar, e12345 */
            float2((right_anti_dual.scalar * wedge.e12345) + (right_anti_dual.e3215 * wedge.e4) - (right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435) - (right_anti_dual.e15 * wedge.e423) - (right_anti_dual.e25 * wedge.e431) - (right_anti_dual.e35 * wedge.e412), 0.0), 
            /* e1, e2, e3, e4 */
            float4((float3(right_anti_dual.e3215) * wedge.group4.xyz), 0.0) + float4((float3(wedge.e1234) * right_anti_dual.group1.xyz), 0.0) + float4((right_anti_dual.group0.zxy * wedge.group9.yzx), 0.0) - float4((right_anti_dual.group0.yzx * wedge.group9.zxy), 0.0), 
            /* e5 */
            (right_anti_dual.e3215 * wedge.e45) - (right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125), 
            /* e15, e25, e35, e45 */
            float4(((float3(right_anti_dual.e3215) * wedge.group6.xyz) + (float3(wedge.e12345) * right_anti_dual.group1.xyz)), 0.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            (float3(right_anti_dual.e3215) * wedge.group7.xyz) + (float3(wedge.e12345) * right_anti_dual.group0.xyz), 
            /* e415, e425, e435, e321 */
            float4(0.0), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            float3(right_anti_dual.e3215) * wedge.group9.xyz, 
            /* e4235, e4315, e4125, e3215 */
            float4(float3(0.0), right_anti_dual.e3215 * wedge.e12345), 
            /* e1234 */
            0.0
        );
    }
}
public extension MultiVector {
    public MultiVector anti_reject_orthogonally_from(MultiVector other) {
        MultiVector wedge = MultiVector(
            /* scalar, e12345 */
            float2(other.scalar * this.scalar, (other.scalar * this.e12345) + (other.e12345 * this.scalar) + (other.e1 * this.e4235) + (other.e2 * this.e4315) + (other.e3 * this.e4125) + (other.e4 * this.e3215) + (other.e5 * this.e1234) + (other.e4235 * this.e1) + (other.e4315 * this.e2) + (other.e4125 * this.e3) + (other.e3215 * this.e4) + (other.e1234 * this.e5) - (other.e15 * this.e423) - (other.e25 * this.e431) - (other.e35 * this.e412) - (other.e45 * this.e321) - (other.e41 * this.e235) - (other.e42 * this.e315) - (other.e43 * this.e125) - (other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435) - (other.e415 * this.e23) - (other.e425 * this.e31) - (other.e435 * this.e12) - (other.e321 * this.e45) - (other.e423 * this.e15) - (other.e431 * this.e25) - (other.e412 * this.e35) - (other.e235 * this.e41) - (other.e315 * this.e42) - (other.e125 * this.e43)), 
            /* e1, e2, e3, e4 */
            (float4(other.scalar) * this.group1) + (float4(this.scalar) * other.group1), 
            /* e5 */
            (other.scalar * this.e5) + (other.e5 * this.scalar), 
            /* e15, e25, e35, e45 */
            (float4(other.scalar) * this.group3) + (float4(other.e5) * this.group1) + (float4(this.scalar) * other.group3) - (float4(this.e5) * other.group1), 
            /* e41, e42, e43 */
            (float3(other.scalar) * this.group4.xyz) + (float3(this.scalar) * other.group4.xyz) + (float3(this.e4) * other.group1.xyz) - (float3(other.e4) * this.group1.xyz), 
            /* e23, e31, e12 */
            (float3(other.scalar) * this.group5.xyz) + (float3(this.scalar) * other.group5.xyz) + (other.group1.zxy * this.group1.yzx) - (other.group1.yzx * this.group1.zxy), 
            /* e415, e425, e435, e321 */
            float4((other.e4 * this.e15) + (other.e5 * this.e41) + (other.e15 * this.e4) + (other.e41 * this.e5), (other.e4 * this.e25) + (other.e5 * this.e42) + (other.e25 * this.e4) + (other.e42 * this.e5), (other.e4 * this.e35) + (other.e5 * this.e43) + (other.e35 * this.e4) + (other.e43 * this.e5), -(other.e1 * this.e23) - (other.e2 * this.e31) - (other.e3 * this.e12) - (other.e12 * this.e3)) + (float4(other.scalar) * this.group6) + (float4(this.scalar) * other.group6) - (this.group1.xyzy * float4(other.group3.www, other.e31)) - float4((this.group3.www * other.group1.xyz), other.e23 * this.e1), 
            /* e423, e431, e412 */
            (float3(other.scalar) * this.group7.xyz) + (float3(other.e4) * this.group5.xyz) + (float3(this.scalar) * other.group7.xyz) + (float3(this.e4) * other.group5.xyz) + (other.group4.xyz.yzx * this.group1.zxy) + (this.group4.xyz.yzx * other.group1.zxy) - (other.group4.xyz.zxy * this.group1.yzx) - (this.group4.xyz.zxy * other.group1.yzx), 
            /* e235, e315, e125 */
            (float3(other.scalar) * this.group8.xyz) + (float3(other.e5) * this.group5.xyz) + (float3(this.scalar) * other.group8.xyz) + (float3(this.e5) * other.group5.xyz) + (other.group1.yzx * this.group3.zxy) + (other.group3.zxy * this.group1.yzx) - (other.group1.zxy * this.group3.yzx) - (other.group3.yzx * this.group1.zxy), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e2 * this.e435) + (other.e5 * this.e423) + (other.e45 * this.e23) + (other.e425 * this.e3), (other.e3 * this.e415) + (other.e5 * this.e431) + (other.e45 * this.e31) + (other.e435 * this.e1), (other.e1 * this.e425) + (other.e5 * this.e412) + (other.e45 * this.e12) + (other.e415 * this.e2), -(other.e15 * this.e23) - (other.e25 * this.e31) - (other.e35 * this.e12) - (other.e321 * this.e5)) + (float4(other.scalar) * this.group9) + (float4(this.scalar) * other.group9) + float4((other.group5.xyz * this.group3.www), other.e2 * this.e315) + float4((other.group8.xyz * this.group1.www), other.e3 * this.e125) + float4((other.group4.xyz.yzx * this.group3.zxy), other.e1 * this.e235) + float4((this.group4.xyz.yzx * other.group3.zxy), other.e5 * this.e321) - (this.group1.yzxz * float4(other.group6.zxy, other.e125)) - (this.group3.yzxx * float4(other.group4.xyz.zxy, other.e23)) - float4((float3(this.e5) * other.group7.xyz), other.e31 * this.e25) - float4((this.group8.xyz * other.group1.www), other.e235 * this.e1) - float4((this.group4.xyz.zxy * other.group3.yzx), other.e12 * this.e35) - float4((other.group1.zxy * this.group6.yzx), other.e315 * this.e2), 
            /* e1234 */
            (other.scalar * this.e1234) + (other.e321 * this.e4) + (other.e423 * this.e1) + (other.e431 * this.e2) + (other.e412 * this.e3) + (other.e1234 * this.scalar) - (other.e1 * this.e423) - (other.e2 * this.e431) - (other.e3 * this.e412) - (other.e4 * this.e321) - (other.e41 * this.e23) - (other.e42 * this.e31) - (other.e43 * this.e12) - (other.e23 * this.e41) - (other.e31 * this.e42) - (other.e12 * this.e43)
        );
        MultiVector right_anti_dual = MultiVector(
            /* scalar, e12345 */
            other.group0.xy.yx * float2(-1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215, 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43 */
            other.group7.xyz, 
            /* e23, e31, e12 */
            other.group6.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412 */
            other.group4.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group3.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2((right_anti_dual.scalar * wedge.e12345) + (right_anti_dual.e12345 * wedge.scalar) + (right_anti_dual.e1 * wedge.e4235) + (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) + (right_anti_dual.e4 * wedge.e3215) + (right_anti_dual.e5 * wedge.e1234) + (right_anti_dual.e4235 * wedge.e1) + (right_anti_dual.e4315 * wedge.e2) + (right_anti_dual.e4125 * wedge.e3) + (right_anti_dual.e3215 * wedge.e4) + (right_anti_dual.e1234 * wedge.e5) - (right_anti_dual.e15 * wedge.e423) - (right_anti_dual.e25 * wedge.e431) - (right_anti_dual.e35 * wedge.e412) - (right_anti_dual.e45 * wedge.e321) - (right_anti_dual.e41 * wedge.e235) - (right_anti_dual.e42 * wedge.e315) - (right_anti_dual.e43 * wedge.e125) - (right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e321 * wedge.e45) - (right_anti_dual.e423 * wedge.e15) - (right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43), right_anti_dual.e12345 * wedge.e12345), 
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e15 * wedge.e1234) + (right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e4125 * wedge.e31), (right_anti_dual.e25 * wedge.e1234) + (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e4235 * wedge.e12), (right_anti_dual.e35 * wedge.e1234) + (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e4315 * wedge.e23), -(right_anti_dual.e415 * wedge.e423) - (right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412) - (right_anti_dual.e1234 * wedge.e45)) + (float4(right_anti_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_anti_dual.group1) + (wedge.group9.yzxx * float4(right_anti_dual.group5.xyz.zxy, right_anti_dual.e41)) + float4((wedge.group4.xyz * right_anti_dual.group9.www), right_anti_dual.e45 * wedge.e1234) + float4((right_anti_dual.group7.xyz.zxy * wedge.group8.xyz.yzx), right_anti_dual.e42 * wedge.e4315) + float4((right_anti_dual.group8.xyz.yzx * wedge.group7.xyz.zxy), right_anti_dual.e43 * wedge.e4125) - (right_anti_dual.group9.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((float3(right_anti_dual.e1234) * wedge.group3.xyz), right_anti_dual.e4125 * wedge.e43) - float4((right_anti_dual.group4.xyz * wedge.group9.www), right_anti_dual.e423 * wedge.e415) - float4((right_anti_dual.group5.xyz.yzx * wedge.group9.zxy), right_anti_dual.e431 * wedge.e425) - float4((right_anti_dual.group7.xyz.yzx * wedge.group8.xyz.zxy), right_anti_dual.e412 * wedge.e435) - float4((right_anti_dual.group8.xyz.zxy * wedge.group7.xyz.yzx), right_anti_dual.e4235 * wedge.e41), 
            /* e5 */
            (right_anti_dual.e12345 * wedge.e5) + (right_anti_dual.e5 * wedge.e12345) + (right_anti_dual.e4235 * wedge.e15) + (right_anti_dual.e4315 * wedge.e25) + (right_anti_dual.e4125 * wedge.e35) + (right_anti_dual.e3215 * wedge.e45) - (right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125) - (right_anti_dual.e45 * wedge.e3215) - (right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435), 
            /* e15, e25, e35, e45 */
            float4((right_anti_dual.e415 * wedge.e3215) + (right_anti_dual.e315 * wedge.e4125) + (right_anti_dual.e4125 * wedge.e315) + (right_anti_dual.e3215 * wedge.e415), (right_anti_dual.e425 * wedge.e3215) + (right_anti_dual.e125 * wedge.e4235) + (right_anti_dual.e4235 * wedge.e125) + (right_anti_dual.e3215 * wedge.e425), (right_anti_dual.e435 * wedge.e3215) + (right_anti_dual.e235 * wedge.e4315) + (right_anti_dual.e4315 * wedge.e235) + (right_anti_dual.e3215 * wedge.e435), -(right_anti_dual.e435 * wedge.e4125) - (right_anti_dual.e4235 * wedge.e415) - (right_anti_dual.e4315 * wedge.e425) - (right_anti_dual.e4125 * wedge.e435)) + (float4(right_anti_dual.e12345) * wedge.group3) + (float4(wedge.e12345) * right_anti_dual.group3) - (wedge.group9.yzxx * float4(right_anti_dual.group8.xyz.zxy, right_anti_dual.e415)) - float4((wedge.group8.xyz.zxy * right_anti_dual.group9.yzx), right_anti_dual.e425 * wedge.e4315), 
            /* e41, e42, e43 */
            (float3(right_anti_dual.e12345) * wedge.group4.xyz) + (float3(right_anti_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_anti_dual.group4.xyz) + (float3(wedge.e1234) * right_anti_dual.group6.xyz) + (right_anti_dual.group7.xyz.zxy * wedge.group9.yzx) + (wedge.group7.xyz.zxy * right_anti_dual.group9.yzx) - (right_anti_dual.group7.xyz.yzx * wedge.group9.zxy) - (wedge.group7.xyz.yzx * right_anti_dual.group9.zxy), 
            /* e23, e31, e12 */
            (float3(right_anti_dual.e12345) * wedge.group5.xyz) + (float3(right_anti_dual.e3215) * wedge.group7.xyz) + (float3(right_anti_dual.e1234) * wedge.group8.xyz) + (float3(wedge.e12345) * right_anti_dual.group5.xyz) + (float3(wedge.e3215) * right_anti_dual.group7.xyz) + (float3(wedge.e1234) * right_anti_dual.group8.xyz) - (float3(right_anti_dual.e321) * wedge.group9.xyz) - (float3(wedge.e321) * right_anti_dual.group9.xyz), 
            /* e415, e425, e435, e321 */
            (float4(right_anti_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_anti_dual.group6) + (right_anti_dual.group9.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - float4((right_anti_dual.group9.zxy * wedge.group9.yzx), right_anti_dual.e1234 * wedge.e3215), 
            /* e423, e431, e412 */
            (float3(right_anti_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_anti_dual.group7.xyz) + (float3(wedge.e1234) * right_anti_dual.group9.xyz) - (float3(right_anti_dual.e1234) * wedge.group9.xyz), 
            /* e235, e315, e125 */
            (float3(right_anti_dual.e12345) * wedge.group8.xyz) + (float3(right_anti_dual.e3215) * wedge.group9.xyz) + (float3(wedge.e12345) * right_anti_dual.group8.xyz) - (float3(wedge.e3215) * right_anti_dual.group9.xyz), 
            /* e4235, e4315, e4125, e3215 */
            (float4(right_anti_dual.e12345) * wedge.group9) + (float4(wedge.e12345) * right_anti_dual.group9), 
            /* e1234 */
            (right_anti_dual.e12345 * wedge.e1234) + (right_anti_dual.e1234 * wedge.e12345)
        );
    }
}
public extension MultiVector {
    public MultiVector anti_reject_orthogonally_from(Plane other) {
        MultiVector wedge = MultiVector(
            /* scalar, e12345 */
            float2(0.0, (this.e1 * other.e4235) + (this.e2 * other.e4315) + (this.e3 * other.e4125) + (this.e4 * other.e3215)), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5 */
            0.0, 
            /* e15, e25, e35, e45 */
            float4(0.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(0.0), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            float3(0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(this.scalar) * other.group0, 
            /* e1234 */
            0.0
        );
        AntiPlane right_anti_dual = AntiPlane(
            /* e1, e2, e3, e5 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return MultiVector(
            /* scalar, e12345 */
            float2((right_anti_dual.e1 * wedge.e4235) + (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) + (right_anti_dual.e5 * wedge.e1234), 0.0), 
            /* e1, e2, e3, e4 */
            float4(wedge.group0.xy.yy, wedge.e12345, 0.0) * float4(float3(1.0), 0.0) * float4(right_anti_dual.group0.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e5 */
            right_anti_dual.e5 * wedge.e12345, 
            /* e15, e25, e35, e45 */
            float4(0.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(0.0), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            float3(0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(0.0), 
            /* e1234 */
            0.0
        );
    }
}
public extension MultiVector {
    public MultiVector anti_reject_orthogonally_from(RoundPoint other) {
        MultiVector wedge = MultiVector(
            /* scalar, e12345 */
            float2(0.0, (this.e4235 * other.e1) + (this.e4315 * other.e2) + (this.e4125 * other.e3) + (this.e3215 * other.e4) + (this.e1234 * other.e5)), 
            /* e1, e2, e3, e4 */
            float4(this.scalar) * other.group0, 
            /* e5 */
            this.scalar * other.e5, 
            /* e15, e25, e35, e45 */
            (float4(other.e5) * this.group1) - (float4(this.e5) * other.group0), 
            /* e41, e42, e43 */
            (float3(this.e4) * other.group0.xyz) - (float3(other.e4) * this.group1.xyz), 
            /* e23, e31, e12 */
            (this.group1.yzx * other.group0.zxy) - (this.group1.zxy * other.group0.yzx), 
            /* e415, e425, e435, e321 */
            float4((this.e15 * other.e4) + (this.e41 * other.e5), (this.e25 * other.e4) + (this.e42 * other.e5), (this.e35 * other.e4) + (this.e43 * other.e5), -(this.e31 * other.e2) - (this.e12 * other.e3)) - (other.group0.xyzx * float4(this.group3.www, this.e23)), 
            /* e423, e431, e412 */
            (float3(other.e4) * this.group5.xyz) + (this.group4.xyz.yzx * other.group0.zxy) - (this.group4.xyz.zxy * other.group0.yzx), 
            /* e235, e315, e125 */
            (float3(other.e5) * this.group5.xyz) + (this.group3.zxy * other.group0.yzx) - (this.group3.yzx * other.group0.zxy), 
            /* e4235, e4315, e4125, e3215 */
            float4(-(this.e425 * other.e3) - (this.e235 * other.e4), -(this.e435 * other.e1) - (this.e315 * other.e4), -(this.e415 * other.e2) - (this.e125 * other.e4), (this.e321 * other.e5) + (this.e125 * other.e3)) + (other.group0.yzxy * float4(this.group6.zxy, this.e315)) + float4((float3(other.e5) * this.group7.xyz), this.e235 * other.e1), 
            /* e1234 */
            -(this.e321 * other.e4) - (this.e423 * other.e1) - (this.e431 * other.e2) - (this.e412 * other.e3)
        );
        Sphere right_anti_dual = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2((wedge.e1 * right_anti_dual.e4235) + (wedge.e2 * right_anti_dual.e4315) + (wedge.e3 * right_anti_dual.e4125) + (wedge.e4 * right_anti_dual.e3215) + (wedge.e5 * right_anti_dual.e1234), 0.0), 
            /* e1, e2, e3, e4 */
            float4((wedge.e41 * right_anti_dual.e3215) + (wedge.e31 * right_anti_dual.e4125), (wedge.e42 * right_anti_dual.e3215) + (wedge.e12 * right_anti_dual.e4235), (wedge.e43 * right_anti_dual.e3215) + (wedge.e23 * right_anti_dual.e4315), -(wedge.e45 * right_anti_dual.e1234) - (wedge.e43 * right_anti_dual.e4125)) - (right_anti_dual.group0.yzxx * float4(wedge.group5.xyz.zxy, wedge.e41)) - float4((float3(right_anti_dual.e1234) * wedge.group3.xyz), wedge.e42 * right_anti_dual.e4315), 
            /* e5 */
            (wedge.e15 * right_anti_dual.e4235) + (wedge.e25 * right_anti_dual.e4315) + (wedge.e35 * right_anti_dual.e4125) + (wedge.e45 * right_anti_dual.e3215), 
            /* e15, e25, e35, e45 */
            float4((wedge.e415 * right_anti_dual.e3215) + (wedge.e315 * right_anti_dual.e4125), (wedge.e425 * right_anti_dual.e3215) + (wedge.e125 * right_anti_dual.e4235), (wedge.e435 * right_anti_dual.e3215) + (wedge.e235 * right_anti_dual.e4315), -(wedge.e425 * right_anti_dual.e4315) - (wedge.e435 * right_anti_dual.e4125)) - (right_anti_dual.group0.yzxx * float4(wedge.group8.xyz.zxy, wedge.e415)), 
            /* e41, e42, e43 */
            (float3(right_anti_dual.e1234) * wedge.group6.xyz) + (wedge.group7.xyz.zxy * right_anti_dual.group0.yzx) - (wedge.group7.xyz.yzx * right_anti_dual.group0.zxy), 
            /* e23, e31, e12 */
            (float3(right_anti_dual.e3215) * wedge.group7.xyz) + (float3(right_anti_dual.e1234) * wedge.group8.xyz) - (float3(wedge.e321) * right_anti_dual.group0.xyz), 
            /* e415, e425, e435, e321 */
            float4((wedge.group9.zxy * right_anti_dual.group0.yzx), wedge.e1234 * right_anti_dual.e3215) - (wedge.group9.yzxw * float4(right_anti_dual.group0.zxy, right_anti_dual.e1234)), 
            /* e423, e431, e412 */
            (float3(wedge.e1234) * right_anti_dual.group0.xyz) - (float3(right_anti_dual.e1234) * wedge.group9.xyz), 
            /* e235, e315, e125 */
            (float3(right_anti_dual.e3215) * wedge.group9.xyz) - (float3(wedge.e3215) * right_anti_dual.group0.xyz), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_anti_dual.group0, 
            /* e1234 */
            wedge.e12345 * right_anti_dual.e1234
        );
    }
}
public extension MultiVector {
    public MultiVector anti_reject_orthogonally_from(Scalar other) {
        MultiVector wedge = MultiVector(
            /* scalar, e12345 */
            float2(other.scalar) * this.group0.xy, 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * this.group1, 
            /* e5 */
            this.e5 * other.scalar, 
            /* e15, e25, e35, e45 */
            float4(other.scalar) * this.group3, 
            /* e41, e42, e43 */
            float3(other.scalar) * this.group4.xyz, 
            /* e23, e31, e12 */
            float3(other.scalar) * this.group5.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.scalar) * this.group6, 
            /* e423, e431, e412 */
            float3(other.scalar) * this.group7.xyz, 
            /* e235, e315, e125 */
            float3(other.scalar) * this.group8.xyz, 
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar) * this.group9, 
            /* e1234 */
            this.e1234 * other.scalar
        );
        AntiScalar right_anti_dual = AntiScalar(
            /* e12345 */
            other.scalar
        );
        return MultiVector(
            /* scalar, e12345 */
            float2(right_anti_dual.e12345) * wedge.group0.xy, 
            /* e1, e2, e3, e4 */
            float4(right_anti_dual.e12345) * wedge.group1, 
            /* e5 */
            right_anti_dual.e12345 * wedge.e5, 
            /* e15, e25, e35, e45 */
            float4(right_anti_dual.e12345) * wedge.group3, 
            /* e41, e42, e43 */
            float3(right_anti_dual.e12345) * wedge.group4.xyz, 
            /* e23, e31, e12 */
            float3(right_anti_dual.e12345) * wedge.group5.xyz, 
            /* e415, e425, e435, e321 */
            float4(right_anti_dual.e12345) * wedge.group6, 
            /* e423, e431, e412 */
            float3(right_anti_dual.e12345) * wedge.group7.xyz, 
            /* e235, e315, e125 */
            float3(right_anti_dual.e12345) * wedge.group8.xyz, 
            /* e4235, e4315, e4125, e3215 */
            float4(right_anti_dual.e12345) * wedge.group9, 
            /* e1234 */
            right_anti_dual.e12345 * wedge.e1234
        );
    }
}
public extension MultiVector {
    public MultiVector anti_reject_orthogonally_from(Sphere other) {
        MultiVector wedge = MultiVector(
            /* scalar, e12345 */
            float2(0.0, (this.e1 * other.e4235) + (this.e2 * other.e4315) + (this.e3 * other.e4125) + (this.e4 * other.e3215) + (this.e5 * other.e1234)), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5 */
            0.0, 
            /* e15, e25, e35, e45 */
            float4(0.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(0.0), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            float3(0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(this.scalar) * other.group0, 
            /* e1234 */
            this.scalar * other.e1234
        );
        RoundPoint right_anti_dual = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(other.group0.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215
        );
        return MultiVector(
            /* scalar, e12345 */
            float2((wedge.e4235 * right_anti_dual.e1) + (wedge.e4315 * right_anti_dual.e2) + (wedge.e4125 * right_anti_dual.e3) + (wedge.e3215 * right_anti_dual.e4) + (wedge.e1234 * right_anti_dual.e5), 0.0), 
            /* e1, e2, e3, e4 */
            float4(wedge.e12345) * right_anti_dual.group0, 
            /* e5 */
            wedge.e12345 * right_anti_dual.e5, 
            /* e15, e25, e35, e45 */
            float4(0.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(0.0), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            float3(0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(0.0), 
            /* e1234 */
            0.0
        );
    }
}
public extension MultiVector {
    public MultiVector anti_reject_orthogonally_from(VersorEven other) {
        MultiVector wedge = MultiVector(
            /* scalar, e12345 */
            float2(0.0, (this.scalar * other.e12345) + (this.e4235 * other.e1) + (this.e4315 * other.e2) + (this.e4125 * other.e3) + (this.e3215 * other.e4) + (this.e1234 * other.e5) - (this.e15 * other.e423) - (this.e25 * other.e431) - (this.e35 * other.e412) - (this.e45 * other.e321) - (this.e41 * other.e235) - (this.e42 * other.e315) - (this.e43 * other.e125) - (this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435)), 
            /* e1, e2, e3, e4 */
            float4(this.scalar) * other.group3, 
            /* e5 */
            this.scalar * other.e5, 
            /* e15, e25, e35, e45 */
            (float4(other.e5) * this.group1) - (float4(this.e5) * other.group3), 
            /* e41, e42, e43 */
            (float3(this.e4) * other.group3.xyz) - (float3(other.e4) * this.group1.xyz), 
            /* e23, e31, e12 */
            (this.group1.yzx * other.group3.zxy) - (this.group1.zxy * other.group3.yzx), 
            /* e415, e425, e435, e321 */
            float4((this.e15 * other.e4) + (this.e41 * other.e5), (this.e25 * other.e4) + (this.e42 * other.e5), (this.e35 * other.e4) + (this.e43 * other.e5), -(this.e31 * other.e2) - (this.e12 * other.e3)) + (float4(this.scalar) * other.group1) - (other.group3.xyzx * float4(this.group3.www, this.e23)), 
            /* e423, e431, e412 */
            (float3(this.scalar) * other.group0.xyz) + (float3(other.e4) * this.group5.xyz) + (this.group4.xyz.yzx * other.group3.zxy) - (this.group4.xyz.zxy * other.group3.yzx), 
            /* e235, e315, e125 */
            (float3(this.scalar) * other.group2.xyz) + (float3(other.e5) * this.group5.xyz) + (this.group3.zxy * other.group3.yzx) - (this.group3.yzx * other.group3.zxy), 
            /* e4235, e4315, e4125, e3215 */
            (this.group6.zxyw * float4(other.group3.yzx, other.e5)) + float4((this.group7.xyz * other.group2.www), this.e235 * other.e1) + float4((this.group1.zxy * other.group1.yzx), this.e315 * other.e2) + float4((this.group1.www * other.group2.xyz), this.e125 * other.e3) - (float4(this.e5) * float4(other.group0.xyz, other.e321)) - (this.group1.yzxy * float4(other.group1.zxy, other.e315)) - float4((this.group8.xyz * other.group3.www), this.e1 * other.e235) - float4((this.group6.yzx * other.group3.zxy), this.e3 * other.e125), 
            /* e1234 */
            (this.e1 * other.e423) + (this.e2 * other.e431) + (this.e3 * other.e412) + (this.e4 * other.e321) - (this.e321 * other.e4) - (this.e423 * other.e1) - (this.e431 * other.e2) - (this.e412 * other.e3)
        );
        VersorOdd right_anti_dual = VersorOdd(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        return MultiVector(
            /* scalar, e12345 */
            float2((wedge.e12345 * right_anti_dual.scalar) + (wedge.e1 * right_anti_dual.e4235) + (wedge.e2 * right_anti_dual.e4315) + (wedge.e3 * right_anti_dual.e4125) + (wedge.e4 * right_anti_dual.e3215) + (wedge.e5 * right_anti_dual.e1234) - (wedge.e415 * right_anti_dual.e23) - (wedge.e425 * right_anti_dual.e31) - (wedge.e435 * right_anti_dual.e12) - (wedge.e321 * right_anti_dual.e45) - (wedge.e423 * right_anti_dual.e15) - (wedge.e431 * right_anti_dual.e25) - (wedge.e412 * right_anti_dual.e35) - (wedge.e235 * right_anti_dual.e41) - (wedge.e315 * right_anti_dual.e42) - (wedge.e125 * right_anti_dual.e43), 0.0), 
            /* e1, e2, e3, e4 */
            (float4(wedge.e1234) * float4(right_anti_dual.group2.xyz, right_anti_dual.e45)) + (wedge.group9.yzxz * float4(right_anti_dual.group1.zxy, right_anti_dual.e43)) + float4((wedge.group4.xyz * right_anti_dual.group3.www), wedge.e4235 * right_anti_dual.e41) + float4((wedge.group5.xyz.yzx * right_anti_dual.group3.zxy), wedge.e4315 * right_anti_dual.e42) - (right_anti_dual.group3.yzxx * float4(wedge.group5.xyz.zxy, wedge.e41)) - float4((wedge.group9.zxy * right_anti_dual.group1.yzx), wedge.e43 * right_anti_dual.e4125) - float4((wedge.group9.www * right_anti_dual.group0.xyz), wedge.e45 * right_anti_dual.e1234) - float4((right_anti_dual.group2.www * wedge.group3.xyz), wedge.e42 * right_anti_dual.e4315), 
            /* e5 */
            (wedge.e15 * right_anti_dual.e4235) + (wedge.e25 * right_anti_dual.e4315) + (wedge.e35 * right_anti_dual.e4125) + (wedge.e45 * right_anti_dual.e3215) - (wedge.e4235 * right_anti_dual.e15) - (wedge.e4315 * right_anti_dual.e25) - (wedge.e4125 * right_anti_dual.e35) - (wedge.e3215 * right_anti_dual.e45), 
            /* e15, e25, e35, e45 */
            float4((wedge.e415 * right_anti_dual.e3215) + (wedge.e315 * right_anti_dual.e4125), (wedge.e425 * right_anti_dual.e3215) + (wedge.e125 * right_anti_dual.e4235), (wedge.e435 * right_anti_dual.e3215) + (wedge.e235 * right_anti_dual.e4315), -(wedge.e425 * right_anti_dual.e4315) - (wedge.e435 * right_anti_dual.e4125)) + (float4(wedge.e12345) * float4(right_anti_dual.group2.xyz, right_anti_dual.e45)) - (right_anti_dual.group3.yzxx * float4(wedge.group8.xyz.zxy, wedge.e415)), 
            /* e41, e42, e43 */
            (float3(wedge.e12345) * right_anti_dual.group0.xyz) + (float3(right_anti_dual.e1234) * wedge.group6.xyz) + (wedge.group7.xyz.zxy * right_anti_dual.group3.yzx) - (wedge.group7.xyz.yzx * right_anti_dual.group3.zxy), 
            /* e23, e31, e12 */
            (float3(wedge.e12345) * right_anti_dual.group1.xyz) + (float3(right_anti_dual.e1234) * wedge.group8.xyz) + (float3(right_anti_dual.e3215) * wedge.group7.xyz) - (float3(wedge.e321) * right_anti_dual.group3.xyz), 
            /* e415, e425, e435, e321 */
            float4((wedge.group9.zxy * right_anti_dual.group3.yzx), wedge.e1234 * right_anti_dual.e3215) - (wedge.group9.yzxw * float4(right_anti_dual.group3.zxy, right_anti_dual.e1234)), 
            /* e423, e431, e412 */
            (float3(wedge.e1234) * right_anti_dual.group3.xyz) - (float3(right_anti_dual.e1234) * wedge.group9.xyz), 
            /* e235, e315, e125 */
            (float3(right_anti_dual.e3215) * wedge.group9.xyz) - (float3(wedge.e3215) * right_anti_dual.group3.xyz), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_anti_dual.group3, 
            /* e1234 */
            wedge.e12345 * right_anti_dual.e1234
        );
    }
}
public extension MultiVector {
    public MultiVector anti_reject_orthogonally_from(VersorOdd other) {
        MultiVector wedge = MultiVector(
            /* scalar, e12345 */
            float2(this.scalar * other.scalar, (this.e12345 * other.scalar) + (this.e1 * other.e4235) + (this.e2 * other.e4315) + (this.e3 * other.e4125) + (this.e4 * other.e3215) + (this.e5 * other.e1234) - (this.e415 * other.e23) - (this.e425 * other.e31) - (this.e435 * other.e12) - (this.e321 * other.e45) - (this.e423 * other.e15) - (this.e431 * other.e25) - (this.e412 * other.e35) - (this.e235 * other.e41) - (this.e315 * other.e42) - (this.e125 * other.e43)), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * this.group1, 
            /* e5 */
            this.e5 * other.scalar, 
            /* e15, e25, e35, e45 */
            (float4(this.scalar) * float4(other.group2.xyz, other.e45)) + (float4(other.scalar) * this.group3), 
            /* e41, e42, e43 */
            (float3(this.scalar) * other.group0.xyz) + (float3(other.scalar) * this.group4.xyz), 
            /* e23, e31, e12 */
            (float3(this.scalar) * other.group1.xyz) + (float3(other.scalar) * this.group5.xyz), 
            /* e415, e425, e435, e321 */
            float4((this.e5 * other.e41) + (this.e415 * other.scalar), (this.e5 * other.e42) + (this.e425 * other.scalar), (this.e5 * other.e43) + (this.e435 * other.scalar), -(this.e2 * other.e31) - (this.e3 * other.e12)) + float4((this.group1.www * other.group2.xyz), this.e321 * other.scalar) - (this.group1.xyzx * other.group1.wwwx), 
            /* e423, e431, e412 */
            (float3(this.e4) * other.group1.xyz) + (float3(other.scalar) * this.group7.xyz) + (this.group1.zxy * other.group0.yzx) - (this.group1.yzx * other.group0.zxy), 
            /* e235, e315, e125 */
            (float3(this.e5) * other.group1.xyz) + (float3(other.scalar) * this.group8.xyz) + (this.group1.yzx * other.group2.zxy) - (this.group1.zxy * other.group2.yzx), 
            /* e4235, e4315, e4125, e3215 */
            float4((this.e35 * other.e42) + (this.e45 * other.e23) + (this.e23 * other.e45) + (this.e4235 * other.scalar), (this.e15 * other.e43) + (this.e45 * other.e31) + (this.e31 * other.e45) + (this.e4315 * other.scalar), (this.e25 * other.e41) + (this.e45 * other.e12) + (this.e12 * other.e45) + (this.e4125 * other.scalar), -(this.e15 * other.e23) - (this.e25 * other.e31) - (this.e35 * other.e12) - (this.e12 * other.e35)) + (float4(this.scalar) * other.group3) + float4((this.group4.xyz.yzx * other.group2.zxy), this.e3215 * other.scalar) - (other.group2.yzxx * float4(this.group4.xyz.zxy, this.e23)) - float4((this.group3.yzx * other.group0.zxy), this.e31 * other.e25), 
            /* e1234 */
            (this.scalar * other.e1234) + (this.e1234 * other.scalar) - (this.e41 * other.e23) - (this.e42 * other.e31) - (this.e43 * other.e12) - (this.e23 * other.e41) - (this.e31 * other.e42) - (this.e12 * other.e43)
        );
        VersorEven right_anti_dual = VersorEven(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return MultiVector(
            /* scalar, e12345 */
            float2((wedge.scalar * right_anti_dual.e12345) + (wedge.e4235 * right_anti_dual.e1) + (wedge.e4315 * right_anti_dual.e2) + (wedge.e4125 * right_anti_dual.e3) + (wedge.e3215 * right_anti_dual.e4) + (wedge.e1234 * right_anti_dual.e5) - (wedge.e15 * right_anti_dual.e423) - (wedge.e25 * right_anti_dual.e431) - (wedge.e35 * right_anti_dual.e412) - (wedge.e45 * right_anti_dual.e321) - (wedge.e41 * right_anti_dual.e235) - (wedge.e42 * right_anti_dual.e315) - (wedge.e43 * right_anti_dual.e125) - (wedge.e23 * right_anti_dual.e415) - (wedge.e31 * right_anti_dual.e425) - (wedge.e12 * right_anti_dual.e435), wedge.e12345 * right_anti_dual.e12345), 
            /* e1, e2, e3, e4 */
            float4((wedge.e1 * right_anti_dual.e12345) + (wedge.e415 * right_anti_dual.e321) + (wedge.e321 * right_anti_dual.e415) + (wedge.e315 * right_anti_dual.e412), (wedge.e2 * right_anti_dual.e12345) + (wedge.e425 * right_anti_dual.e321) + (wedge.e321 * right_anti_dual.e425) + (wedge.e125 * right_anti_dual.e423), (wedge.e3 * right_anti_dual.e12345) + (wedge.e435 * right_anti_dual.e321) + (wedge.e321 * right_anti_dual.e435) + (wedge.e235 * right_anti_dual.e431), -(wedge.e415 * right_anti_dual.e423) - (wedge.e425 * right_anti_dual.e431) - (wedge.e435 * right_anti_dual.e412) - (wedge.e412 * right_anti_dual.e435)) + (float4(wedge.e12345) * right_anti_dual.group3) + float4((wedge.group7.xyz.zxy * right_anti_dual.group2.yzx), wedge.e4 * right_anti_dual.e12345) - float4((wedge.group7.xyz.yzx * right_anti_dual.group2.zxy), wedge.e423 * right_anti_dual.e415) - float4((wedge.group8.xyz.zxy * right_anti_dual.group0.yzx), wedge.e431 * right_anti_dual.e425), 
            /* e5 */
            (wedge.e12345 * right_anti_dual.e5) + (wedge.e5 * right_anti_dual.e12345) - (wedge.e415 * right_anti_dual.e235) - (wedge.e425 * right_anti_dual.e315) - (wedge.e435 * right_anti_dual.e125) - (wedge.e235 * right_anti_dual.e415) - (wedge.e315 * right_anti_dual.e425) - (wedge.e125 * right_anti_dual.e435), 
            /* e15, e25, e35, e45 */
            float4((wedge.e4125 * right_anti_dual.e315) + (wedge.e3215 * right_anti_dual.e415), (wedge.e4235 * right_anti_dual.e125) + (wedge.e3215 * right_anti_dual.e425), (wedge.e4315 * right_anti_dual.e235) + (wedge.e3215 * right_anti_dual.e435), -(wedge.e4315 * right_anti_dual.e425) - (wedge.e4125 * right_anti_dual.e435)) + (float4(right_anti_dual.e12345) * wedge.group3) - (wedge.group9.yzxx * float4(right_anti_dual.group2.zxy, right_anti_dual.e415)), 
            /* e41, e42, e43 */
            (float3(wedge.e1234) * right_anti_dual.group1.xyz) + (float3(right_anti_dual.e12345) * wedge.group4.xyz) + (wedge.group9.yzx * right_anti_dual.group0.zxy) - (wedge.group9.zxy * right_anti_dual.group0.yzx), 
            /* e23, e31, e12 */
            (float3(wedge.e3215) * right_anti_dual.group0.xyz) + (float3(wedge.e1234) * right_anti_dual.group2.xyz) + (float3(right_anti_dual.e12345) * wedge.group5.xyz) - (float3(right_anti_dual.e321) * wedge.group9.xyz), 
            /* e415, e425, e435, e321 */
            (float4(wedge.e12345) * right_anti_dual.group1) + (float4(right_anti_dual.e12345) * wedge.group6), 
            /* e423, e431, e412 */
            (float3(wedge.e12345) * right_anti_dual.group0.xyz) + (float3(right_anti_dual.e12345) * wedge.group7.xyz), 
            /* e235, e315, e125 */
            (float3(wedge.e12345) * right_anti_dual.group2.xyz) + (float3(right_anti_dual.e12345) * wedge.group8.xyz), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_anti_dual.e12345) * wedge.group9, 
            /* e1234 */
            wedge.e1234 * right_anti_dual.e12345
        );
    }
}
public extension Plane {
    // Fancy infix trick (first half)
    public AntiRejectOrthogonallyFromInfixPartial<Plane> operator /(AntiRejectOrthogonallyFromInfix rhs) {
        return AntiRejectOrthogonallyFromInfixPartial<Plane>(this);
    }
}
public extension AntiRejectOrthogonallyFromInfixPartial<Plane> {
    // Fancy infix trick (second half)
    public DipoleInversion operator /(AntiCircleRotor rhs) {
        return this.a.anti_reject_orthogonally_from(rhs);
    }
}
public extension Plane {
    public DipoleInversion anti_reject_orthogonally_from(AntiCircleRotor other) {
        Plane wedge = Plane(
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar) * this.group0
        );
        CircleRotor right_anti_dual = CircleRotor(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            (right_anti_dual.group0.xyz.zxy * wedge.group0.yzx) - (right_anti_dual.group0.xyz.yzx * wedge.group0.zxy), 
            /* e23, e31, e12, e45 */
            float4(right_anti_dual.e423 * wedge.e3215, right_anti_dual.e431 * wedge.e3215, right_anti_dual.e412 * wedge.e3215, -(right_anti_dual.e425 * wedge.e4315) - (right_anti_dual.e435 * wedge.e4125)) - (right_anti_dual.group1.wwwx * wedge.group0.xyzx), 
            /* e15, e25, e35, e1234 */
            float4((float3(wedge.e3215) * right_anti_dual.group1.xyz), 0.0) + float4((right_anti_dual.group2.yzx * wedge.group0.zxy), 0.0) - float4((right_anti_dual.group2.zxy * wedge.group0.yzx), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_anti_dual.e12345) * wedge.group0
        );
    }
}
public extension Plane {
    public DipoleInversion anti_reject_orthogonally_from(AntiDipoleInversion other) {
        AntiScalar wedge = AntiScalar(
            /* e12345 */
            (other.e4 * this.e3215) + (other.e1 * this.e4235) + (other.e2 * this.e4315) + (other.e3 * this.e4125)
        );
        DipoleInversion right_anti_dual = DipoleInversion(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(wedge.e12345) * right_anti_dual.group1, 
            /* e15, e25, e35, e1234 */
            float4(wedge.e12345) * right_anti_dual.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_anti_dual.group3
        );
    }
}
public extension Plane {
    public Plane anti_reject_orthogonally_from(AntiDualNum other) {
        return Plane(
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar) * float4(other.scalar * this.e4235, other.scalar * this.e4315, other.scalar * this.e4125, other.scalar * this.e3215)
        );
    }
}
public extension Plane {
    public Flector anti_reject_orthogonally_from(AntiFlector other) {
        AntiScalar wedge = AntiScalar(
            /* e12345 */
            (other.e1 * this.e4235) + (other.e2 * this.e4315) + (other.e3 * this.e4125)
        );
        Flector right_anti_dual = Flector(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return Flector(
            /* e15, e25, e35, e45 */
            float4(wedge.e12345) * right_anti_dual.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_anti_dual.group1
        );
    }
}
public extension Plane {
    public Flector anti_reject_orthogonally_from(AntiMotor other) {
        Plane wedge = Plane(
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar) * this.group0
        );
        Motor right_anti_dual = Motor(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return Flector(
            /* e15, e25, e35, e45 */
            float4((right_anti_dual.e415 * wedge.e3215) + (right_anti_dual.e315 * wedge.e4125), (right_anti_dual.e425 * wedge.e3215) + (right_anti_dual.e125 * wedge.e4235), (right_anti_dual.e435 * wedge.e3215) + (right_anti_dual.e235 * wedge.e4315), -(right_anti_dual.e425 * wedge.e4315) - (right_anti_dual.e435 * wedge.e4125)) - (wedge.group0.yzxx * float4(right_anti_dual.group1.zxy, right_anti_dual.e415)), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_anti_dual.e12345) * wedge.group0
        );
    }
}
public extension Plane {
    public Plane anti_reject_orthogonally_from(AntiPlane other) {
        return Plane(
            /* e4235, e4315, e4125, e3215 */
            float4((other.e1 * this.e4235) + (other.e2 * this.e4315) + (other.e3 * this.e4125)) * float4(other.group0.xyz, other.e5 * -1.0)
        );
    }
}
public extension Plane {
    public MultiVector anti_reject_orthogonally_from(MultiVector other) {
        MultiVector wedge = MultiVector(
            /* scalar, e12345 */
            float2(0.0, (other.e1 * this.e4235) + (other.e2 * this.e4315) + (other.e3 * this.e4125) + (other.e4 * this.e3215)), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5 */
            0.0, 
            /* e15, e25, e35, e45 */
            float4(0.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(0.0), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            float3(0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar) * this.group0, 
            /* e1234 */
            0.0
        );
        MultiVector right_anti_dual = MultiVector(
            /* scalar, e12345 */
            other.group0.xy.yx * float2(-1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215, 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43 */
            other.group7.xyz, 
            /* e23, e31, e12 */
            other.group6.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412 */
            other.group4.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group3.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2((right_anti_dual.scalar * wedge.e12345) + (right_anti_dual.e12345 * wedge.scalar) + (right_anti_dual.e1 * wedge.e4235) + (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) + (right_anti_dual.e4 * wedge.e3215) + (right_anti_dual.e5 * wedge.e1234) + (right_anti_dual.e4235 * wedge.e1) + (right_anti_dual.e4315 * wedge.e2) + (right_anti_dual.e4125 * wedge.e3) + (right_anti_dual.e3215 * wedge.e4) + (right_anti_dual.e1234 * wedge.e5) - (right_anti_dual.e15 * wedge.e423) - (right_anti_dual.e25 * wedge.e431) - (right_anti_dual.e35 * wedge.e412) - (right_anti_dual.e45 * wedge.e321) - (right_anti_dual.e41 * wedge.e235) - (right_anti_dual.e42 * wedge.e315) - (right_anti_dual.e43 * wedge.e125) - (right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e321 * wedge.e45) - (right_anti_dual.e423 * wedge.e15) - (right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43), right_anti_dual.e12345 * wedge.e12345), 
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e15 * wedge.e1234) + (right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e4125 * wedge.e31), (right_anti_dual.e25 * wedge.e1234) + (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e4235 * wedge.e12), (right_anti_dual.e35 * wedge.e1234) + (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e4315 * wedge.e23), -(right_anti_dual.e415 * wedge.e423) - (right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412) - (right_anti_dual.e1234 * wedge.e45)) + (float4(right_anti_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_anti_dual.group1) + (wedge.group9.yzxx * float4(right_anti_dual.group5.xyz.zxy, right_anti_dual.e41)) + float4((wedge.group4.xyz * right_anti_dual.group9.www), right_anti_dual.e45 * wedge.e1234) + float4((right_anti_dual.group7.xyz.zxy * wedge.group8.xyz.yzx), right_anti_dual.e42 * wedge.e4315) + float4((right_anti_dual.group8.xyz.yzx * wedge.group7.xyz.zxy), right_anti_dual.e43 * wedge.e4125) - (right_anti_dual.group9.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((float3(right_anti_dual.e1234) * wedge.group3.xyz), right_anti_dual.e4125 * wedge.e43) - float4((right_anti_dual.group4.xyz * wedge.group9.www), right_anti_dual.e423 * wedge.e415) - float4((right_anti_dual.group5.xyz.yzx * wedge.group9.zxy), right_anti_dual.e431 * wedge.e425) - float4((right_anti_dual.group7.xyz.yzx * wedge.group8.xyz.zxy), right_anti_dual.e412 * wedge.e435) - float4((right_anti_dual.group8.xyz.zxy * wedge.group7.xyz.yzx), right_anti_dual.e4235 * wedge.e41), 
            /* e5 */
            (right_anti_dual.e12345 * wedge.e5) + (right_anti_dual.e5 * wedge.e12345) + (right_anti_dual.e4235 * wedge.e15) + (right_anti_dual.e4315 * wedge.e25) + (right_anti_dual.e4125 * wedge.e35) + (right_anti_dual.e3215 * wedge.e45) - (right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125) - (right_anti_dual.e45 * wedge.e3215) - (right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435), 
            /* e15, e25, e35, e45 */
            float4((right_anti_dual.e415 * wedge.e3215) + (right_anti_dual.e315 * wedge.e4125) + (right_anti_dual.e4125 * wedge.e315) + (right_anti_dual.e3215 * wedge.e415), (right_anti_dual.e425 * wedge.e3215) + (right_anti_dual.e125 * wedge.e4235) + (right_anti_dual.e4235 * wedge.e125) + (right_anti_dual.e3215 * wedge.e425), (right_anti_dual.e435 * wedge.e3215) + (right_anti_dual.e235 * wedge.e4315) + (right_anti_dual.e4315 * wedge.e235) + (right_anti_dual.e3215 * wedge.e435), -(right_anti_dual.e435 * wedge.e4125) - (right_anti_dual.e4235 * wedge.e415) - (right_anti_dual.e4315 * wedge.e425) - (right_anti_dual.e4125 * wedge.e435)) + (float4(right_anti_dual.e12345) * wedge.group3) + (float4(wedge.e12345) * right_anti_dual.group3) - (wedge.group9.yzxx * float4(right_anti_dual.group8.xyz.zxy, right_anti_dual.e415)) - float4((wedge.group8.xyz.zxy * right_anti_dual.group9.yzx), right_anti_dual.e425 * wedge.e4315), 
            /* e41, e42, e43 */
            (float3(right_anti_dual.e12345) * wedge.group4.xyz) + (float3(right_anti_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_anti_dual.group4.xyz) + (float3(wedge.e1234) * right_anti_dual.group6.xyz) + (right_anti_dual.group7.xyz.zxy * wedge.group9.yzx) + (wedge.group7.xyz.zxy * right_anti_dual.group9.yzx) - (right_anti_dual.group7.xyz.yzx * wedge.group9.zxy) - (wedge.group7.xyz.yzx * right_anti_dual.group9.zxy), 
            /* e23, e31, e12 */
            (float3(right_anti_dual.e12345) * wedge.group5.xyz) + (float3(right_anti_dual.e3215) * wedge.group7.xyz) + (float3(right_anti_dual.e1234) * wedge.group8.xyz) + (float3(wedge.e12345) * right_anti_dual.group5.xyz) + (float3(wedge.e3215) * right_anti_dual.group7.xyz) + (float3(wedge.e1234) * right_anti_dual.group8.xyz) - (float3(right_anti_dual.e321) * wedge.group9.xyz) - (float3(wedge.e321) * right_anti_dual.group9.xyz), 
            /* e415, e425, e435, e321 */
            (float4(right_anti_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_anti_dual.group6) + (right_anti_dual.group9.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - float4((right_anti_dual.group9.zxy * wedge.group9.yzx), right_anti_dual.e1234 * wedge.e3215), 
            /* e423, e431, e412 */
            (float3(right_anti_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_anti_dual.group7.xyz) + (float3(wedge.e1234) * right_anti_dual.group9.xyz) - (float3(right_anti_dual.e1234) * wedge.group9.xyz), 
            /* e235, e315, e125 */
            (float3(right_anti_dual.e12345) * wedge.group8.xyz) + (float3(right_anti_dual.e3215) * wedge.group9.xyz) + (float3(wedge.e12345) * right_anti_dual.group8.xyz) - (float3(wedge.e3215) * right_anti_dual.group9.xyz), 
            /* e4235, e4315, e4125, e3215 */
            (float4(right_anti_dual.e12345) * wedge.group9) + (float4(wedge.e12345) * right_anti_dual.group9), 
            /* e1234 */
            (right_anti_dual.e12345 * wedge.e1234) + (right_anti_dual.e1234 * wedge.e12345)
        );
    }
}
public extension Plane {
    public Sphere anti_reject_orthogonally_from(RoundPoint other) {
        AntiScalar wedge = AntiScalar(
            /* e12345 */
            (this.e4235 * other.e1) + (this.e4315 * other.e2) + (this.e4125 * other.e3) + (this.e3215 * other.e4)
        );
        Sphere right_anti_dual = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        return Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_anti_dual.group0, 
            /* e1234 */
            wedge.e12345 * right_anti_dual.e1234
        );
    }
}
public extension Plane {
    public Plane anti_reject_orthogonally_from(Scalar other) {
        return Plane(
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar) * float4(this.e4235 * other.scalar, this.e4315 * other.scalar, this.e4125 * other.scalar, this.e3215 * other.scalar)
        );
    }
}
public extension Plane {
    public VersorOdd anti_reject_orthogonally_from(VersorEven other) {
        AntiScalar wedge = AntiScalar(
            /* e12345 */
            (this.e4235 * other.e1) + (this.e4315 * other.e2) + (this.e4125 * other.e3) + (this.e3215 * other.e4)
        );
        VersorOdd right_anti_dual = VersorOdd(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(wedge.e12345) * right_anti_dual.group0, 
            /* e23, e31, e12, e45 */
            float4(wedge.e12345) * right_anti_dual.group1, 
            /* e15, e25, e35, e1234 */
            float4(wedge.e12345) * right_anti_dual.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_anti_dual.group3
        );
    }
}
public extension Plane {
    public VersorOdd anti_reject_orthogonally_from(VersorOdd other) {
        Plane wedge = Plane(
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar) * this.group0
        );
        VersorEven right_anti_dual = VersorEven(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(wedge.e4125 * right_anti_dual.e431 * -1.0, wedge.e4235 * right_anti_dual.e412 * -1.0, wedge.e4315 * right_anti_dual.e423 * -1.0, (wedge.e4315 * right_anti_dual.e2) + (wedge.e4125 * right_anti_dual.e3) + (wedge.e3215 * right_anti_dual.e4)) + (wedge.group0.yzxx * float4(right_anti_dual.group0.zxy, right_anti_dual.e1)), 
            /* e23, e31, e12, e45 */
            float4(wedge.e3215 * right_anti_dual.e423, wedge.e3215 * right_anti_dual.e431, wedge.e3215 * right_anti_dual.e412, -(wedge.e4315 * right_anti_dual.e425) - (wedge.e4125 * right_anti_dual.e435)) - (wedge.group0.xyzx * right_anti_dual.group1.wwwx), 
            /* e15, e25, e35, e1234 */
            float4((float3(wedge.e3215) * right_anti_dual.group1.xyz), 0.0) + float4((wedge.group0.zxy * right_anti_dual.group2.yzx), 0.0) - float4((wedge.group0.yzx * right_anti_dual.group2.zxy), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_anti_dual.e12345) * wedge.group0
        );
    }
}
public extension RoundPoint {
    // Fancy infix trick (first half)
    public AntiRejectOrthogonallyFromInfixPartial<RoundPoint> operator /(AntiRejectOrthogonallyFromInfix rhs) {
        return AntiRejectOrthogonallyFromInfixPartial<RoundPoint>(this);
    }
}
public extension AntiRejectOrthogonallyFromInfixPartial<RoundPoint> {
    // Fancy infix trick (second half)
    public AntiDipoleInversion operator /(AntiCircleRotor rhs) {
        return this.a.anti_reject_orthogonally_from(rhs);
    }
}
public extension RoundPoint {
    public AntiDipoleInversion anti_reject_orthogonally_from(AntiCircleRotor other) {
        AntiDipoleInversion wedge = AntiDipoleInversion(
            /* e423, e431, e412 */
            (float3(this.e4) * other.group1.xyz) + (other.group0.xyz.yzx * this.group0.zxy) - (other.group0.xyz.zxy * this.group0.yzx), 
            /* e415, e425, e435, e321 */
            float4((other.e41 * this.e5) + (other.e15 * this.e4), (other.e42 * this.e5) + (other.e25 * this.e4), (other.e43 * this.e5) + (other.e35 * this.e4), -(other.e31 * this.e2) - (other.e12 * this.e3)) - (other.group1.wwwx * this.group0.xyzx), 
            /* e235, e315, e125, e4 */
            float4(((float3(this.e5) * other.group1.xyz) + (other.group2.zxy * this.group0.yzx) - (other.group2.yzx * this.group0.zxy)), other.scalar * this.e4), 
            /* e1, e2, e3, e5 */
            float4(other.scalar) * float4(this.group0.xyz, this.e5)
        );
        CircleRotor right_anti_dual = CircleRotor(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(right_anti_dual.e12345) * wedge.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(right_anti_dual.e12345) * wedge.group1, 
            /* e235, e315, e125, e4 */
            float4((float3(right_anti_dual.e12345) * wedge.group2.xyz), (wedge.e4 * right_anti_dual.e12345) - (wedge.e423 * right_anti_dual.e415) - (wedge.e431 * right_anti_dual.e425) - (wedge.e412 * right_anti_dual.e435) - (wedge.e415 * right_anti_dual.e423) - (wedge.e425 * right_anti_dual.e431) - (wedge.e435 * right_anti_dual.e412)), 
            /* e1, e2, e3, e5 */
            float4((wedge.e415 * right_anti_dual.e321) + (wedge.e321 * right_anti_dual.e415) + (wedge.e315 * right_anti_dual.e412) + (wedge.e1 * right_anti_dual.e12345), (wedge.e425 * right_anti_dual.e321) + (wedge.e321 * right_anti_dual.e425) + (wedge.e125 * right_anti_dual.e423) + (wedge.e2 * right_anti_dual.e12345), (wedge.e435 * right_anti_dual.e321) + (wedge.e321 * right_anti_dual.e435) + (wedge.e235 * right_anti_dual.e431) + (wedge.e3 * right_anti_dual.e12345), -(wedge.e435 * right_anti_dual.e125) - (wedge.e235 * right_anti_dual.e415) - (wedge.e315 * right_anti_dual.e425) - (wedge.e125 * right_anti_dual.e435)) + (right_anti_dual.group2.yzxw * float4(wedge.group0.xyz.zxy, wedge.e5)) - (right_anti_dual.group2.zxyx * float4(wedge.group0.xyz.yzx, wedge.e415)) - float4((right_anti_dual.group0.xyz.yzx * wedge.group2.zxy), wedge.e425 * right_anti_dual.e315)
        );
    }
}
public extension RoundPoint {
    public AntiDipoleInversion anti_reject_orthogonally_from(AntiDipoleInversion other) {
        DipoleInversion wedge = DipoleInversion(
            /* e41, e42, e43 */
            (float3(this.e4) * other.group3.xyz) - (float3(other.e4) * this.group0.xyz), 
            /* e23, e31, e12, e45 */
            (other.group3.zxyw * this.group0.yzxw) - float4((other.group3.yzx * this.group0.zxy), other.e4 * this.e5), 
            /* e15, e25, e35, e1234 */
            float4(other.e1 * this.e5 * -1.0, other.e2 * this.e5 * -1.0, other.e3 * this.e5 * -1.0, (other.e431 * this.e2) + (other.e412 * this.e3) + (other.e321 * this.e4)) + (this.group0.xyzx * float4(other.group3.www, other.e423)), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e425 * this.e3) + (other.e235 * this.e4), (other.e435 * this.e1) + (other.e315 * this.e4), (other.e415 * this.e2) + (other.e125 * this.e4), -(other.e315 * this.e2) - (other.e125 * this.e3)) - (float4(this.e5) * float4(other.group0.xyz, other.e321)) - (this.group0.yzxx * float4(other.group1.zxy, other.e235))
        );
        DipoleInversion right_anti_dual = DipoleInversion(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            (float3(wedge.e1234) * right_anti_dual.group3.xyz) - (float3(right_anti_dual.e1234) * wedge.group3.xyz), 
            /* e415, e425, e435, e321 */
            (right_anti_dual.group3.yzxw * float4(wedge.group3.zxy, wedge.e1234)) - (wedge.group3.yzxw * float4(right_anti_dual.group3.zxy, right_anti_dual.e1234)), 
            /* e235, e315, e125, e4 */
            (wedge.group3.xyzx * float4(right_anti_dual.group3.www, right_anti_dual.e41)) + float4(float3(0.0), (right_anti_dual.e42 * wedge.e4315) + (right_anti_dual.e43 * wedge.e4125) + (right_anti_dual.e45 * wedge.e1234) - (right_anti_dual.e1234 * wedge.e45) - (right_anti_dual.e4315 * wedge.e42) - (right_anti_dual.e4125 * wedge.e43)) - float4((wedge.group3.www * right_anti_dual.group3.xyz), right_anti_dual.e4235 * wedge.e41), 
            /* e1, e2, e3, e5 */
            (right_anti_dual.group3.zxyw * wedge.group1.yzxw) + (wedge.group2.wwwz * float4(right_anti_dual.group2.xyz, right_anti_dual.e4125)) + float4((wedge.group0.xyz * right_anti_dual.group3.www), right_anti_dual.e4235 * wedge.e15) + float4((right_anti_dual.group1.zxy * wedge.group3.yzx), right_anti_dual.e4315 * wedge.e25) - (float4(wedge.e3215) * float4(right_anti_dual.group0.xyz, right_anti_dual.e45)) - (right_anti_dual.group2.wwwy * float4(wedge.group2.xyz, wedge.e4315)) - (wedge.group3.zxyx * float4(right_anti_dual.group1.yzx, right_anti_dual.e15)) - float4((right_anti_dual.group3.yzx * wedge.group1.zxy), right_anti_dual.e35 * wedge.e4125)
        );
    }
}
public extension RoundPoint {
    public VersorEven anti_reject_orthogonally_from(AntiDualNum other) {
        VersorEven wedge = VersorEven(
            /* e423, e431, e412, e12345 */
            float4(float3(0.0), other.e3215 * this.e4), 
            /* e415, e425, e435, e321 */
            float4(0.0), 
            /* e235, e315, e125, e5 */
            float4(float3(0.0), other.scalar * this.e5), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * this.group0
        );
        DualNum right_anti_dual = DualNum(
            /* e5, e12345 */
            other.group0.xy
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(right_anti_dual.e12345) * wedge.group0, 
            /* e415, e425, e435, e321 */
            float4(0.0), 
            /* e235, e315, e125, e5 */
            float4(right_anti_dual.group0.xy.yy, right_anti_dual.e12345, (right_anti_dual.e5 * wedge.e12345) + (right_anti_dual.e12345 * wedge.e5)) * float4(wedge.group2.xyz, 1.0), 
            /* e1, e2, e3, e4 */
            float4(right_anti_dual.e12345) * wedge.group3
        );
    }
}
public extension RoundPoint {
    public RoundPoint anti_reject_orthogonally_from(AntiFlatPoint other) {
        Sphere wedge = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4((float3(this.e4) * other.group0.xyz), -(other.e235 * this.e1) - (other.e315 * this.e2) - (other.e125 * this.e3) - (other.e321 * this.e5)), 
            /* e1234 */
            other.e321 * this.e4
        );
        FlatPoint right_anti_dual = FlatPoint(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return RoundPoint(
            /* e1, e2, e3, e4 */
            float4(wedge.e1234) * right_anti_dual.group0, 
            /* e5 */
            -(right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125) - (right_anti_dual.e45 * wedge.e3215)
        );
    }
}
public extension RoundPoint {
    public AntiDipoleInversion anti_reject_orthogonally_from(AntiFlector other) {
        DipoleInversion wedge = DipoleInversion(
            /* e41, e42, e43 */
            float3(this.e4) * other.group1.xyz, 
            /* e23, e31, e12, e45 */
            float4(((other.group1.zxy * this.group0.yzx) - (other.group1.yzx * this.group0.zxy)), other.e5 * this.e4), 
            /* e15, e25, e35, e1234 */
            float4(((float3(other.e5) * this.group0.xyz) - (float3(this.e5) * other.group1.xyz)), other.e321 * this.e4), 
            /* e4235, e4315, e4125, e3215 */
            float4((float3(this.e4) * other.group0.xyz), -(other.e235 * this.e1) - (other.e315 * this.e2) - (other.e125 * this.e3) - (other.e321 * this.e5))
        );
        Flector right_anti_dual = Flector(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(wedge.e1234) * right_anti_dual.group1.xyz, 
            /* e415, e425, e435, e321 */
            float4(((wedge.group3.zxy * right_anti_dual.group1.yzx) - (wedge.group3.yzx * right_anti_dual.group1.zxy)), wedge.e1234 * right_anti_dual.e3215), 
            /* e235, e315, e125, e4 */
            float4(float3(0.0), -(wedge.e42 * right_anti_dual.e4315) - (wedge.e43 * right_anti_dual.e4125)) + float4((right_anti_dual.group1.www * wedge.group3.xyz), wedge.e1234 * right_anti_dual.e45) - (right_anti_dual.group1.xyzx * float4(wedge.group3.www, wedge.e41)), 
            /* e1, e2, e3, e5 */
            (float4(right_anti_dual.e3215) * float4(wedge.group0.xyz, wedge.e45)) + (wedge.group2.wwwy * float4(right_anti_dual.group0.xyz, right_anti_dual.e4315)) + (right_anti_dual.group1.zxyx * float4(wedge.group1.yzx, wedge.e15)) + float4(float3(0.0), (wedge.e35 * right_anti_dual.e4125) - (wedge.e4315 * right_anti_dual.e25) - (wedge.e4125 * right_anti_dual.e35) - (wedge.e3215 * right_anti_dual.e45)) - float4((wedge.group1.zxy * right_anti_dual.group1.yzx), wedge.e4235 * right_anti_dual.e15)
        );
    }
}
public extension RoundPoint {
    public RoundPoint anti_reject_orthogonally_from(AntiLine other) {
        Circle wedge = Circle(
            /* e423, e431, e412 */
            float3(this.e4) * other.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4((float3(this.e4) * other.group1.xyz), -(other.e23 * this.e1) - (other.e31 * this.e2) - (other.e12 * this.e3)), 
            /* e235, e315, e125 */
            (float3(this.e5) * other.group0.xyz) + (other.group1.xyz.zxy * this.group0.yzx) - (other.group1.xyz.yzx * this.group0.zxy)
        );
        Line right_anti_dual = Line(
            /* e415, e425, e435 */
            other.group0.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group1.xyz * float3(-1.0)
        );
        return RoundPoint(
            /* e1, e2, e3, e4 */
            float4((wedge.e412 * right_anti_dual.e315) + (wedge.e321 * right_anti_dual.e415), (wedge.e423 * right_anti_dual.e125) + (wedge.e321 * right_anti_dual.e425), (wedge.e431 * right_anti_dual.e235) + (wedge.e321 * right_anti_dual.e435), -(wedge.e431 * right_anti_dual.e425) - (wedge.e412 * right_anti_dual.e435)) - float4((wedge.group0.xyz.yzx * right_anti_dual.group1.xyz.zxy), wedge.e423 * right_anti_dual.e415), 
            /* e5 */
            -(wedge.e415 * right_anti_dual.e235) - (wedge.e425 * right_anti_dual.e315) - (wedge.e435 * right_anti_dual.e125) - (wedge.e235 * right_anti_dual.e415) - (wedge.e315 * right_anti_dual.e425) - (wedge.e125 * right_anti_dual.e435)
        );
    }
}
public extension RoundPoint {
    public VersorEven anti_reject_orthogonally_from(AntiMotor other) {
        VersorEven wedge = VersorEven(
            /* e423, e431, e412, e12345 */
            float4(this.e4) * float4(other.group0.xyz, other.e3215), 
            /* e415, e425, e435, e321 */
            float4((float3(this.e4) * other.group1.xyz), -(other.e23 * this.e1) - (other.e31 * this.e2) - (other.e12 * this.e3)), 
            /* e235, e315, e125, e5 */
            float4(((float3(this.e5) * other.group0.xyz) + (other.group1.zxy * this.group0.yzx) - (other.group1.yzx * this.group0.zxy)), other.scalar * this.e5), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * this.group0
        );
        Motor right_anti_dual = Motor(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(right_anti_dual.e12345) * wedge.group0, 
            /* e415, e425, e435, e321 */
            float4(((float3(right_anti_dual.e12345) * wedge.group1.xyz) + (float3(wedge.e12345) * right_anti_dual.group0.xyz)), right_anti_dual.e12345 * wedge.e321), 
            /* e235, e315, e125, e5 */
            (float4(right_anti_dual.e12345) * wedge.group2) + (float4(wedge.e12345) * right_anti_dual.group1) + float4(float3(0.0), -(right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435)), 
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e12345 * wedge.e1) + (right_anti_dual.e315 * wedge.e412), (right_anti_dual.e12345 * wedge.e2) + (right_anti_dual.e125 * wedge.e423), (right_anti_dual.e12345 * wedge.e3) + (right_anti_dual.e235 * wedge.e431), -(right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412)) + (right_anti_dual.group0 * float4(wedge.group1.www, wedge.e4)) - (wedge.group0.yzxx * float4(right_anti_dual.group1.zxy, right_anti_dual.e415))
        );
    }
}
public extension RoundPoint {
    public RoundPoint anti_reject_orthogonally_from(AntiPlane other) {
        Dipole wedge = Dipole(
            /* e41, e42, e43 */
            float3(this.e4) * other.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(((other.group0.zxy * this.group0.yzx) - (other.group0.yzx * this.group0.zxy)), other.e5 * this.e4), 
            /* e15, e25, e35 */
            (float3(other.e5) * this.group0.xyz) - (float3(this.e5) * other.group0.xyz)
        );
        Plane right_anti_dual = Plane(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return RoundPoint(
            /* e1, e2, e3, e4 */
            float4((wedge.e41 * right_anti_dual.e3215) + (wedge.e31 * right_anti_dual.e4125), (wedge.e42 * right_anti_dual.e3215) + (wedge.e12 * right_anti_dual.e4235), (wedge.e43 * right_anti_dual.e3215) + (wedge.e23 * right_anti_dual.e4315), -(wedge.e42 * right_anti_dual.e4315) - (wedge.e43 * right_anti_dual.e4125)) - (right_anti_dual.group0.yzxx * float4(wedge.group1.zxy, wedge.e41)), 
            /* e5 */
            (wedge.e45 * right_anti_dual.e3215) + (wedge.e15 * right_anti_dual.e4235) + (wedge.e25 * right_anti_dual.e4315) + (wedge.e35 * right_anti_dual.e4125)
        );
    }
}
public extension RoundPoint {
    public RoundPoint anti_reject_orthogonally_from(Circle other) {
        Sphere wedge = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4((other.e425 * this.e3) + (other.e235 * this.e4), (other.e435 * this.e1) + (other.e315 * this.e4), (other.e415 * this.e2) + (other.e125 * this.e4), -(other.e321 * this.e5) - (other.e125 * this.e3)) - (this.group0.yzxy * float4(other.group1.zxy, other.e315)) - float4((float3(this.e5) * other.group0.xyz), other.e235 * this.e1), 
            /* e1234 */
            (other.e423 * this.e1) + (other.e431 * this.e2) + (other.e412 * this.e3) + (other.e321 * this.e4)
        );
        Dipole right_anti_dual = Dipole(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35 */
            other.group2.xyz
        );
        return RoundPoint(
            /* e1, e2, e3, e4 */
            float4(-(right_anti_dual.e41 * wedge.e3215) - (right_anti_dual.e31 * wedge.e4125), -(right_anti_dual.e42 * wedge.e3215) - (right_anti_dual.e12 * wedge.e4235), -(right_anti_dual.e43 * wedge.e3215) - (right_anti_dual.e23 * wedge.e4315), (right_anti_dual.e43 * wedge.e4125) + (right_anti_dual.e45 * wedge.e1234)) + (wedge.group0.yzxy * float4(right_anti_dual.group1.zxy, right_anti_dual.e42)) + float4((float3(wedge.e1234) * right_anti_dual.group2.xyz), right_anti_dual.e41 * wedge.e4235), 
            /* e5 */
            -(right_anti_dual.e45 * wedge.e3215) - (right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125)
        );
    }
}
public extension RoundPoint {
    public RoundPoint anti_reject_orthogonally_from(CircleRotor other) {
        Sphere wedge = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4((other.e425 * this.e3) + (other.e235 * this.e4), (other.e435 * this.e1) + (other.e315 * this.e4), (other.e415 * this.e2) + (other.e125 * this.e4), -(other.e315 * this.e2) - (other.e125 * this.e3)) - (float4(this.e5) * float4(other.group0.xyz, other.e321)) - (this.group0.yzxx * float4(other.group1.zxy, other.e235)), 
            /* e1234 */
            (other.e423 * this.e1) + (other.e431 * this.e2) + (other.e412 * this.e3) + (other.e321 * this.e4)
        );
        AntiCircleRotor right_anti_dual = AntiCircleRotor(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return RoundPoint(
            /* e1, e2, e3, e4 */
            float4(-(right_anti_dual.e41 * wedge.e3215) - (right_anti_dual.e31 * wedge.e4125), -(right_anti_dual.e42 * wedge.e3215) - (right_anti_dual.e12 * wedge.e4235), -(right_anti_dual.e43 * wedge.e3215) - (right_anti_dual.e23 * wedge.e4315), (right_anti_dual.e43 * wedge.e4125) + (right_anti_dual.e45 * wedge.e1234)) + (wedge.group0.yzxx * float4(right_anti_dual.group1.zxy, right_anti_dual.e41)) + float4((float3(wedge.e1234) * right_anti_dual.group2.xyz), right_anti_dual.e42 * wedge.e4315), 
            /* e5 */
            -(right_anti_dual.e45 * wedge.e3215) - (right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125)
        );
    }
}
public extension RoundPoint {
    public RoundPoint anti_reject_orthogonally_from(Dipole other) {
        Circle wedge = Circle(
            /* e423, e431, e412 */
            (float3(this.e4) * other.group1.xyz) + (other.group0.xyz.yzx * this.group0.zxy) - (other.group0.xyz.zxy * this.group0.yzx), 
            /* e415, e425, e435, e321 */
            float4((other.e41 * this.e5) + (other.e15 * this.e4), (other.e42 * this.e5) + (other.e25 * this.e4), (other.e43 * this.e5) + (other.e35 * this.e4), -(other.e31 * this.e2) - (other.e12 * this.e3)) - (other.group1.wwwx * this.group0.xyzx), 
            /* e235, e315, e125 */
            (float3(this.e5) * other.group1.xyz) + (other.group2.xyz.zxy * this.group0.yzx) - (other.group2.xyz.yzx * this.group0.zxy)
        );
        Circle right_anti_dual = Circle(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125 */
            other.group2.xyz * float3(-1.0)
        );
        return RoundPoint(
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e412 * wedge.e315) + (right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e315 * wedge.e412), (right_anti_dual.e423 * wedge.e125) + (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e125 * wedge.e423), (right_anti_dual.e431 * wedge.e235) + (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e235 * wedge.e431), -(right_anti_dual.e412 * wedge.e435) - (right_anti_dual.e415 * wedge.e423) - (right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412)) - float4((right_anti_dual.group0.xyz.yzx * wedge.group2.xyz.zxy), right_anti_dual.e423 * wedge.e415) - float4((right_anti_dual.group2.xyz.zxy * wedge.group0.xyz.yzx), right_anti_dual.e431 * wedge.e425), 
            /* e5 */
            -(right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435)
        );
    }
}
public extension RoundPoint {
    public AntiDipoleInversion anti_reject_orthogonally_from(DipoleInversion other) {
        CircleRotor wedge = CircleRotor(
            /* e423, e431, e412 */
            (float3(this.e4) * other.group1.xyz) + (other.group0.xyz.yzx * this.group0.zxy) - (other.group0.xyz.zxy * this.group0.yzx), 
            /* e415, e425, e435, e321 */
            float4((other.e41 * this.e5) + (other.e15 * this.e4), (other.e42 * this.e5) + (other.e25 * this.e4), (other.e43 * this.e5) + (other.e35 * this.e4), -(other.e31 * this.e2) - (other.e12 * this.e3)) - (other.group1.wwwx * this.group0.xyzx), 
            /* e235, e315, e125, e12345 */
            float4(other.e25 * this.e3 * -1.0, other.e35 * this.e1 * -1.0, other.e15 * this.e2 * -1.0, (other.e4315 * this.e2) + (other.e4125 * this.e3) + (other.e3215 * this.e4)) + (float4(this.e5) * float4(other.group1.xyz, other.e1234)) + (this.group0.yzxx * float4(other.group2.zxy, other.e4235))
        );
        AntiDipoleInversion right_anti_dual = AntiDipoleInversion(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(wedge.e12345) * right_anti_dual.group1, 
            /* e235, e315, e125, e4 */
            float4((float3(wedge.e12345) * right_anti_dual.group2.xyz), (right_anti_dual.e4 * wedge.e12345) - (right_anti_dual.e423 * wedge.e415) - (right_anti_dual.e431 * wedge.e425) - (right_anti_dual.e412 * wedge.e435) - (right_anti_dual.e415 * wedge.e423) - (right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412)), 
            /* e1, e2, e3, e5 */
            float4((right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e315 * wedge.e412) + (right_anti_dual.e1 * wedge.e12345), (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e125 * wedge.e423) + (right_anti_dual.e2 * wedge.e12345), (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e235 * wedge.e431) + (right_anti_dual.e3 * wedge.e12345), -(right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435)) + (wedge.group2.yzxw * float4(right_anti_dual.group0.xyz.zxy, right_anti_dual.e5)) - (wedge.group2.zxyx * float4(right_anti_dual.group0.xyz.yzx, right_anti_dual.e415)) - float4((wedge.group0.xyz.yzx * right_anti_dual.group2.zxy), right_anti_dual.e425 * wedge.e315)
        );
    }
}
public extension RoundPoint {
    public DualNum anti_reject_orthogonally_from(DualNum other) {
        return DualNum(
            /* e5, e12345 */
            float2(pow(other.e5, 2) * this.e4 * -1.0, 1.0) * float2(1.0, 0.0)
        );
    }
}
public extension RoundPoint {
    public AntiPlane anti_reject_orthogonally_from(FlatPoint other) {
        Line wedge = Line(
            /* e415, e425, e435 */
            (float3(this.e4) * other.group0.xyz) - (float3(other.e45) * this.group0.xyz), 
            /* e235, e315, e125 */
            (other.group0.zxy * this.group0.yzx) - (other.group0.yzx * this.group0.zxy)
        );
        AntiFlatPoint right_anti_dual = AntiFlatPoint(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiPlane(
            /* e1, e2, e3, e5 */
            float4((float3(right_anti_dual.e321) * wedge.group0.xyz), -(right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435))
        );
    }
}
public extension RoundPoint {
    public AntiFlector anti_reject_orthogonally_from(Flector other) {
        Motor wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4(other.e45 * this.e1 * -1.0, other.e45 * this.e2 * -1.0, other.e45 * this.e3 * -1.0, (other.e4315 * this.e2) + (other.e4125 * this.e3) + (other.e3215 * this.e4)) + (this.group0.wwwx * float4(other.group0.xyz, other.e4235)), 
            /* e235, e315, e125, e5 */
            float4(((other.group0.zxy * this.group0.yzx) - (other.group0.yzx * this.group0.zxy)), 0.0)
        );
        AntiFlector right_anti_dual = AntiFlector(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiFlector(
            /* e235, e315, e125, e321 */
            float4(wedge.e12345) * right_anti_dual.group0, 
            /* e1, e2, e3, e5 */
            float4(right_anti_dual.e1 * wedge.e12345, right_anti_dual.e2 * wedge.e12345, right_anti_dual.e3 * wedge.e12345, -(right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435)) + (wedge.group0 * float4(right_anti_dual.group0.www, right_anti_dual.e5))
        );
    }
}
public extension RoundPoint {
    public AntiPlane anti_reject_orthogonally_from(Line other) {
        Plane wedge = Plane(
            /* e4235, e4315, e4125, e3215 */
            float4((other.e425 * this.e3) + (other.e235 * this.e4), (other.e435 * this.e1) + (other.e315 * this.e4), (other.e415 * this.e2) + (other.e125 * this.e4), -(other.e315 * this.e2) - (other.e125 * this.e3)) - (this.group0.yzxx * float4(other.group0.xyz.zxy, other.e235))
        );
        AntiLine right_anti_dual = AntiLine(
            /* e23, e31, e12 */
            other.group0.xyz, 
            /* e15, e25, e35 */
            other.group1.xyz
        );
        return AntiPlane(
            /* e1, e2, e3, e5 */
            float4(right_anti_dual.e12 * wedge.e4315, right_anti_dual.e23 * wedge.e4125, right_anti_dual.e31 * wedge.e4235, -(right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125)) - (wedge.group0.zxyx * float4(right_anti_dual.group0.xyz.yzx, right_anti_dual.e15))
        );
    }
}
public extension RoundPoint {
    public AntiFlector anti_reject_orthogonally_from(Motor other) {
        Flector wedge = Flector(
            /* e15, e25, e35, e45 */
            float4(other.e5) * this.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e425 * this.e3) + (other.e235 * this.e4), (other.e435 * this.e1) + (other.e315 * this.e4), (other.e415 * this.e2) + (other.e125 * this.e4), -(other.e315 * this.e2) - (other.e125 * this.e3)) - (this.group0.yzxx * float4(other.group0.zxy, other.e235))
        );
        AntiMotor right_anti_dual = AntiMotor(
            /* e23, e31, e12, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiFlector(
            /* e235, e315, e125, e321 */
            float4(float3(1.0), 0.0) * float4(right_anti_dual.group1.www, 0.0) * float4(wedge.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e1, e2, e3, e5 */
            float4(float3(0.0), -(right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125)) + float4((right_anti_dual.group0.zxy * wedge.group1.yzx), right_anti_dual.e3215 * wedge.e45) - (wedge.group1.zxyx * float4(right_anti_dual.group0.yzx, right_anti_dual.e15))
        );
    }
}
public extension RoundPoint {
    public MultiVector anti_reject_orthogonally_from(MultiVector other) {
        MultiVector wedge = MultiVector(
            /* scalar, e12345 */
            float2(0.0, (other.e4235 * this.e1) + (other.e4315 * this.e2) + (other.e4125 * this.e3) + (other.e3215 * this.e4) + (other.e1234 * this.e5)), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * this.group0, 
            /* e5 */
            other.scalar * this.e5, 
            /* e15, e25, e35, e45 */
            (float4(other.e5) * this.group0) - (float4(this.e5) * other.group1), 
            /* e41, e42, e43 */
            (float3(this.e4) * other.group1.xyz) - (float3(other.e4) * this.group0.xyz), 
            /* e23, e31, e12 */
            (other.group1.zxy * this.group0.yzx) - (other.group1.yzx * this.group0.zxy), 
            /* e415, e425, e435, e321 */
            float4((other.e15 * this.e4) + (other.e41 * this.e5), (other.e25 * this.e4) + (other.e42 * this.e5), (other.e35 * this.e4) + (other.e43 * this.e5), -(other.e31 * this.e2) - (other.e12 * this.e3)) - (this.group0.xyzx * float4(other.group3.www, other.e23)), 
            /* e423, e431, e412 */
            (float3(this.e4) * other.group5.xyz) + (other.group4.xyz.yzx * this.group0.zxy) - (other.group4.xyz.zxy * this.group0.yzx), 
            /* e235, e315, e125 */
            (float3(this.e5) * other.group5.xyz) + (other.group3.zxy * this.group0.yzx) - (other.group3.yzx * this.group0.zxy), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e425 * this.e3) + (other.e235 * this.e4), (other.e435 * this.e1) + (other.e315 * this.e4), (other.e415 * this.e2) + (other.e125 * this.e4), -(other.e321 * this.e5) - (other.e125 * this.e3)) - (this.group0.yzxy * float4(other.group6.zxy, other.e315)) - float4((float3(this.e5) * other.group7.xyz), other.e235 * this.e1), 
            /* e1234 */
            (other.e321 * this.e4) + (other.e423 * this.e1) + (other.e431 * this.e2) + (other.e412 * this.e3)
        );
        MultiVector right_anti_dual = MultiVector(
            /* scalar, e12345 */
            other.group0.xy.yx * float2(-1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215, 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43 */
            other.group7.xyz, 
            /* e23, e31, e12 */
            other.group6.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412 */
            other.group4.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group3.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2((right_anti_dual.scalar * wedge.e12345) + (right_anti_dual.e12345 * wedge.scalar) + (right_anti_dual.e1 * wedge.e4235) + (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) + (right_anti_dual.e4 * wedge.e3215) + (right_anti_dual.e5 * wedge.e1234) + (right_anti_dual.e4235 * wedge.e1) + (right_anti_dual.e4315 * wedge.e2) + (right_anti_dual.e4125 * wedge.e3) + (right_anti_dual.e3215 * wedge.e4) + (right_anti_dual.e1234 * wedge.e5) - (right_anti_dual.e15 * wedge.e423) - (right_anti_dual.e25 * wedge.e431) - (right_anti_dual.e35 * wedge.e412) - (right_anti_dual.e45 * wedge.e321) - (right_anti_dual.e41 * wedge.e235) - (right_anti_dual.e42 * wedge.e315) - (right_anti_dual.e43 * wedge.e125) - (right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e321 * wedge.e45) - (right_anti_dual.e423 * wedge.e15) - (right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43), right_anti_dual.e12345 * wedge.e12345), 
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e15 * wedge.e1234) + (right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e4125 * wedge.e31), (right_anti_dual.e25 * wedge.e1234) + (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e4235 * wedge.e12), (right_anti_dual.e35 * wedge.e1234) + (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e4315 * wedge.e23), -(right_anti_dual.e415 * wedge.e423) - (right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412) - (right_anti_dual.e1234 * wedge.e45)) + (float4(right_anti_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_anti_dual.group1) + (wedge.group9.yzxx * float4(right_anti_dual.group5.xyz.zxy, right_anti_dual.e41)) + float4((wedge.group4.xyz * right_anti_dual.group9.www), right_anti_dual.e45 * wedge.e1234) + float4((right_anti_dual.group7.xyz.zxy * wedge.group8.xyz.yzx), right_anti_dual.e42 * wedge.e4315) + float4((right_anti_dual.group8.xyz.yzx * wedge.group7.xyz.zxy), right_anti_dual.e43 * wedge.e4125) - (right_anti_dual.group9.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((float3(right_anti_dual.e1234) * wedge.group3.xyz), right_anti_dual.e4125 * wedge.e43) - float4((right_anti_dual.group4.xyz * wedge.group9.www), right_anti_dual.e423 * wedge.e415) - float4((right_anti_dual.group5.xyz.yzx * wedge.group9.zxy), right_anti_dual.e431 * wedge.e425) - float4((right_anti_dual.group7.xyz.yzx * wedge.group8.xyz.zxy), right_anti_dual.e412 * wedge.e435) - float4((right_anti_dual.group8.xyz.zxy * wedge.group7.xyz.yzx), right_anti_dual.e4235 * wedge.e41), 
            /* e5 */
            (right_anti_dual.e12345 * wedge.e5) + (right_anti_dual.e5 * wedge.e12345) + (right_anti_dual.e4235 * wedge.e15) + (right_anti_dual.e4315 * wedge.e25) + (right_anti_dual.e4125 * wedge.e35) + (right_anti_dual.e3215 * wedge.e45) - (right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125) - (right_anti_dual.e45 * wedge.e3215) - (right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435), 
            /* e15, e25, e35, e45 */
            float4((right_anti_dual.e415 * wedge.e3215) + (right_anti_dual.e315 * wedge.e4125) + (right_anti_dual.e4125 * wedge.e315) + (right_anti_dual.e3215 * wedge.e415), (right_anti_dual.e425 * wedge.e3215) + (right_anti_dual.e125 * wedge.e4235) + (right_anti_dual.e4235 * wedge.e125) + (right_anti_dual.e3215 * wedge.e425), (right_anti_dual.e435 * wedge.e3215) + (right_anti_dual.e235 * wedge.e4315) + (right_anti_dual.e4315 * wedge.e235) + (right_anti_dual.e3215 * wedge.e435), -(right_anti_dual.e435 * wedge.e4125) - (right_anti_dual.e4235 * wedge.e415) - (right_anti_dual.e4315 * wedge.e425) - (right_anti_dual.e4125 * wedge.e435)) + (float4(right_anti_dual.e12345) * wedge.group3) + (float4(wedge.e12345) * right_anti_dual.group3) - (wedge.group9.yzxx * float4(right_anti_dual.group8.xyz.zxy, right_anti_dual.e415)) - float4((wedge.group8.xyz.zxy * right_anti_dual.group9.yzx), right_anti_dual.e425 * wedge.e4315), 
            /* e41, e42, e43 */
            (float3(right_anti_dual.e12345) * wedge.group4.xyz) + (float3(right_anti_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_anti_dual.group4.xyz) + (float3(wedge.e1234) * right_anti_dual.group6.xyz) + (right_anti_dual.group7.xyz.zxy * wedge.group9.yzx) + (wedge.group7.xyz.zxy * right_anti_dual.group9.yzx) - (right_anti_dual.group7.xyz.yzx * wedge.group9.zxy) - (wedge.group7.xyz.yzx * right_anti_dual.group9.zxy), 
            /* e23, e31, e12 */
            (float3(right_anti_dual.e12345) * wedge.group5.xyz) + (float3(right_anti_dual.e3215) * wedge.group7.xyz) + (float3(right_anti_dual.e1234) * wedge.group8.xyz) + (float3(wedge.e12345) * right_anti_dual.group5.xyz) + (float3(wedge.e3215) * right_anti_dual.group7.xyz) + (float3(wedge.e1234) * right_anti_dual.group8.xyz) - (float3(right_anti_dual.e321) * wedge.group9.xyz) - (float3(wedge.e321) * right_anti_dual.group9.xyz), 
            /* e415, e425, e435, e321 */
            (float4(right_anti_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_anti_dual.group6) + (right_anti_dual.group9.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - float4((right_anti_dual.group9.zxy * wedge.group9.yzx), right_anti_dual.e1234 * wedge.e3215), 
            /* e423, e431, e412 */
            (float3(right_anti_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_anti_dual.group7.xyz) + (float3(wedge.e1234) * right_anti_dual.group9.xyz) - (float3(right_anti_dual.e1234) * wedge.group9.xyz), 
            /* e235, e315, e125 */
            (float3(right_anti_dual.e12345) * wedge.group8.xyz) + (float3(right_anti_dual.e3215) * wedge.group9.xyz) + (float3(wedge.e12345) * right_anti_dual.group8.xyz) - (float3(wedge.e3215) * right_anti_dual.group9.xyz), 
            /* e4235, e4315, e4125, e3215 */
            (float4(right_anti_dual.e12345) * wedge.group9) + (float4(wedge.e12345) * right_anti_dual.group9), 
            /* e1234 */
            (right_anti_dual.e12345 * wedge.e1234) + (right_anti_dual.e1234 * wedge.e12345)
        );
    }
}
public extension RoundPoint {
    public AntiPlane anti_reject_orthogonally_from(Plane other) {
        return AntiPlane(
            /* e1, e2, e3, e5 */
            float4((other.e4235 * this.e1) + (other.e4315 * this.e2) + (other.e4125 * this.e3) + (other.e3215 * this.e4)) * float4(other.e4235 * -1.0, other.e4315 * -1.0, other.e4125 * -1.0, other.e3215)
        );
    }
}
public extension RoundPoint {
    public RoundPoint anti_reject_orthogonally_from(RoundPoint other) {
        Dipole wedge = Dipole(
            /* e41, e42, e43 */
            (float3(this.e4) * other.group0.xyz) - (float3(other.e4) * this.group0.xyz), 
            /* e23, e31, e12, e45 */
            float4((other.group0.zxy * this.group0.yzx), other.e5 * this.e4) - (other.group0.yzxw * float4(this.group0.zxy, this.e5)), 
            /* e15, e25, e35 */
            (float3(other.e5) * this.group0.xyz) - (float3(this.e5) * other.group0.xyz)
        );
        Sphere right_anti_dual = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        return RoundPoint(
            /* e1, e2, e3, e4 */
            float4((wedge.e41 * right_anti_dual.e3215) + (wedge.e31 * right_anti_dual.e4125), (wedge.e42 * right_anti_dual.e3215) + (wedge.e12 * right_anti_dual.e4235), (wedge.e43 * right_anti_dual.e3215) + (wedge.e23 * right_anti_dual.e4315), -(wedge.e43 * right_anti_dual.e4125) - (wedge.e45 * right_anti_dual.e1234)) - (right_anti_dual.group0.yzxy * float4(wedge.group1.zxy, wedge.e42)) - float4((float3(right_anti_dual.e1234) * wedge.group2.xyz), wedge.e41 * right_anti_dual.e4235), 
            /* e5 */
            (wedge.e45 * right_anti_dual.e3215) + (wedge.e15 * right_anti_dual.e4235) + (wedge.e25 * right_anti_dual.e4315) + (wedge.e35 * right_anti_dual.e4125)
        );
    }
}
public extension RoundPoint {
    public RoundPoint anti_reject_orthogonally_from(Scalar other) {
        RoundPoint wedge = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(other.scalar) * this.group0, 
            /* e5 */
            this.e5 * other.scalar
        );
        AntiScalar right_anti_dual = AntiScalar(
            /* e12345 */
            other.scalar
        );
        return RoundPoint(
            /* e1, e2, e3, e4 */
            float4(right_anti_dual.e12345) * wedge.group0, 
            /* e5 */
            right_anti_dual.e12345 * wedge.e5
        );
    }
}
public extension RoundPoint {
    public RoundPoint anti_reject_orthogonally_from(Sphere other) {
        AntiScalar wedge = AntiScalar(
            /* e12345 */
            (this.e1 * other.e4235) + (this.e2 * other.e4315) + (this.e3 * other.e4125) + (this.e4 * other.e3215) + (this.e5 * other.e1234)
        );
        RoundPoint right_anti_dual = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(other.group0.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215
        );
        return RoundPoint(
            /* e1, e2, e3, e4 */
            float4(wedge.e12345) * right_anti_dual.group0, 
            /* e5 */
            wedge.e12345 * right_anti_dual.e5
        );
    }
}
public extension RoundPoint {
    public AntiDipoleInversion anti_reject_orthogonally_from(VersorEven other) {
        DipoleInversion wedge = DipoleInversion(
            /* e41, e42, e43 */
            (float3(this.e4) * other.group3.xyz) - (float3(other.e4) * this.group0.xyz), 
            /* e23, e31, e12, e45 */
            (this.group0.yzxw * float4(other.group3.zxy, other.e5)) - float4((this.group0.zxy * other.group3.yzx), this.e5 * other.e4), 
            /* e15, e25, e35, e1234 */
            float4(this.e5 * other.e1 * -1.0, this.e5 * other.e2 * -1.0, this.e5 * other.e3 * -1.0, (this.e2 * other.e431) + (this.e3 * other.e412) + (this.e4 * other.e321)) + (this.group0.xyzx * float4(other.group2.www, other.e423)), 
            /* e4235, e4315, e4125, e3215 */
            float4((this.e3 * other.e425) + (this.e4 * other.e235), (this.e1 * other.e435) + (this.e4 * other.e315), (this.e2 * other.e415) + (this.e4 * other.e125), -(this.e3 * other.e125) - (this.e5 * other.e321)) - (this.group0.yzxx * float4(other.group1.zxy, other.e235)) - float4((float3(this.e5) * other.group0.xyz), this.e2 * other.e315)
        );
        VersorOdd right_anti_dual = VersorOdd(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            (float3(wedge.e1234) * right_anti_dual.group3.xyz) - (float3(right_anti_dual.e1234) * wedge.group3.xyz), 
            /* e415, e425, e435, e321 */
            (right_anti_dual.group3.yzxw * float4(wedge.group3.zxy, wedge.e1234)) - (wedge.group3.yzxw * float4(right_anti_dual.group3.zxy, right_anti_dual.e1234)), 
            /* e235, e315, e125, e4 */
            float4(float3(0.0), (wedge.e4235 * right_anti_dual.e41) + (wedge.e4315 * right_anti_dual.e42) + (wedge.e4125 * right_anti_dual.e43) - (wedge.e42 * right_anti_dual.e4315) - (wedge.e43 * right_anti_dual.e4125) - (wedge.e45 * right_anti_dual.e1234)) + float4((right_anti_dual.group3.www * wedge.group3.xyz), wedge.e1234 * right_anti_dual.e45) - (right_anti_dual.group3.xyzx * float4(wedge.group3.www, wedge.e41)), 
            /* e1, e2, e3, e5 */
            (float4(right_anti_dual.e3215) * float4(wedge.group0.xyz, wedge.e45)) + (wedge.group2.wwwy * float4(right_anti_dual.group2.xyz, right_anti_dual.e4315)) + (right_anti_dual.group3.zxyx * float4(wedge.group1.yzx, wedge.e15)) + float4((wedge.group3.yzx * right_anti_dual.group1.zxy), wedge.e35 * right_anti_dual.e4125) - (float4(wedge.e3215) * float4(right_anti_dual.group0.xyz, right_anti_dual.e45)) - (wedge.group3.zxyz * float4(right_anti_dual.group1.yzx, right_anti_dual.e35)) - (right_anti_dual.group2.wwwy * float4(wedge.group2.xyz, wedge.e4315)) - float4((wedge.group1.zxy * right_anti_dual.group3.yzx), wedge.e4235 * right_anti_dual.e15)
        );
    }
}
public extension RoundPoint {
    public VersorEven anti_reject_orthogonally_from(VersorOdd other) {
        VersorEven wedge = VersorEven(
            /* e423, e431, e412, e12345 */
            float4(this.e2 * other.e43 * -1.0, this.e3 * other.e41 * -1.0, this.e1 * other.e42 * -1.0, (this.e3 * other.e4125) + (this.e4 * other.e3215) + (this.e5 * other.e1234)) + (this.group0.zxyx * float4(other.group0.yzx, other.e4235)) + (this.group0.wwwy * float4(other.group1.xyz, other.e4315)), 
            /* e415, e425, e435, e321 */
            float4((this.e4 * other.e15) + (this.e5 * other.e41), (this.e4 * other.e25) + (this.e5 * other.e42), (this.e4 * other.e35) + (this.e5 * other.e43), -(this.e2 * other.e31) - (this.e3 * other.e12)) - (this.group0.xyzx * other.group1.wwwx), 
            /* e235, e315, e125, e5 */
            float4(((float3(this.e5) * other.group1.xyz) + (this.group0.yzx * other.group2.zxy) - (this.group0.zxy * other.group2.yzx)), this.e5 * other.scalar), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * this.group0
        );
        VersorEven right_anti_dual = VersorEven(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(((float3(right_anti_dual.e12345) * wedge.group0.xyz) + (float3(wedge.e12345) * right_anti_dual.group0.xyz)), right_anti_dual.e12345 * wedge.e12345), 
            /* e415, e425, e435, e321 */
            (float4(right_anti_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_anti_dual.group1), 
            /* e235, e315, e125, e5 */
            (float4(right_anti_dual.e12345) * wedge.group2) + (float4(wedge.e12345) * right_anti_dual.group2) + float4(float3(0.0), -(right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435)), 
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e315 * wedge.e412) + (right_anti_dual.e1 * wedge.e12345), (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e125 * wedge.e423) + (right_anti_dual.e2 * wedge.e12345), (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e235 * wedge.e431) + (right_anti_dual.e3 * wedge.e12345), -(right_anti_dual.e412 * wedge.e435) - (right_anti_dual.e415 * wedge.e423) - (right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412)) + (right_anti_dual.group0.zxyw * float4(wedge.group2.yzx, wedge.e4)) + float4((right_anti_dual.group0.www * wedge.group3.xyz), right_anti_dual.e4 * wedge.e12345) - (right_anti_dual.group0.yzxx * float4(wedge.group2.zxy, wedge.e415)) - float4((right_anti_dual.group2.zxy * wedge.group0.yzx), right_anti_dual.e431 * wedge.e425)
        );
    }
}
public extension Scalar {
    // Fancy infix trick (first half)
    public AntiRejectOrthogonallyFromInfixPartial<Scalar> operator /(AntiRejectOrthogonallyFromInfix rhs) {
        return AntiRejectOrthogonallyFromInfixPartial<Scalar>(this);
    }
}
public extension AntiRejectOrthogonallyFromInfixPartial<Scalar> {
    // Fancy infix trick (second half)
    public AntiCircleRotor operator /(AntiCircleRotor rhs) {
        return this.a.anti_reject_orthogonally_from(rhs);
    }
}
public extension Scalar {
    public AntiCircleRotor anti_reject_orthogonally_from(AntiCircleRotor other) {
        AntiCircleRotor wedge = AntiCircleRotor(
            /* e41, e42, e43 */
            float3(this.scalar) * other.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(this.scalar) * other.group1, 
            /* e15, e25, e35, scalar */
            float4(this.scalar) * other.group2
        );
        CircleRotor right_anti_dual = CircleRotor(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiCircleRotor(
            /* e41, e42, e43 */
            float3(right_anti_dual.e12345) * wedge.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(right_anti_dual.e12345) * wedge.group1, 
            /* e15, e25, e35, scalar */
            float4((float3(right_anti_dual.e12345) * wedge.group2.xyz), (wedge.scalar * right_anti_dual.e12345) - (wedge.e41 * right_anti_dual.e235) - (wedge.e42 * right_anti_dual.e315) - (wedge.e43 * right_anti_dual.e125) - (wedge.e23 * right_anti_dual.e415) - (wedge.e31 * right_anti_dual.e425) - (wedge.e12 * right_anti_dual.e435) - (wedge.e45 * right_anti_dual.e321) - (wedge.e15 * right_anti_dual.e423) - (wedge.e25 * right_anti_dual.e431) - (wedge.e35 * right_anti_dual.e412))
        );
    }
}
public extension Scalar {
    public AntiCircleRotor anti_reject_orthogonally_from(AntiDipoleInversion other) {
        AntiDipoleInversion wedge = AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(this.scalar) * other.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(this.scalar) * other.group1, 
            /* e235, e315, e125, e4 */
            float4(this.scalar) * other.group2, 
            /* e1, e2, e3, e5 */
            float4(this.scalar) * other.group3
        );
        DipoleInversion right_anti_dual = DipoleInversion(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiCircleRotor(
            /* e41, e42, e43 */
            (float3(right_anti_dual.e1234) * wedge.group1.xyz) + (wedge.group0.xyz.zxy * right_anti_dual.group3.yzx) - (wedge.group0.xyz.yzx * right_anti_dual.group3.zxy), 
            /* e23, e31, e12, e45 */
            float4((wedge.e423 * right_anti_dual.e3215) + (wedge.e235 * right_anti_dual.e1234), (wedge.e431 * right_anti_dual.e3215) + (wedge.e315 * right_anti_dual.e1234), (wedge.e412 * right_anti_dual.e3215) + (wedge.e125 * right_anti_dual.e1234), -(wedge.e425 * right_anti_dual.e4315) - (wedge.e435 * right_anti_dual.e4125)) - (wedge.group1.wwwx * right_anti_dual.group3.xyzx), 
            /* e15, e25, e35, scalar */
            (float4(right_anti_dual.e3215) * float4(wedge.group1.xyz, wedge.e4)) + (right_anti_dual.group3.zxyx * float4(wedge.group2.yzx, wedge.e1)) + float4(float3(0.0), (wedge.e2 * right_anti_dual.e4315) + (wedge.e3 * right_anti_dual.e4125) + (wedge.e5 * right_anti_dual.e1234) - (wedge.e431 * right_anti_dual.e25) - (wedge.e412 * right_anti_dual.e35) - (wedge.e415 * right_anti_dual.e23) - (wedge.e425 * right_anti_dual.e31) - (wedge.e435 * right_anti_dual.e12) - (wedge.e321 * right_anti_dual.e45) - (wedge.e235 * right_anti_dual.e41) - (wedge.e315 * right_anti_dual.e42) - (wedge.e125 * right_anti_dual.e43)) - float4((wedge.group2.zxy * right_anti_dual.group3.yzx), wedge.e423 * right_anti_dual.e15)
        );
    }
}
public extension Scalar {
    public AntiDualNum anti_reject_orthogonally_from(AntiDualNum other) {
        return AntiDualNum(
            /* e3215, scalar */
            float2(other.scalar) * float2(other.e3215 * this.scalar, other.scalar * this.scalar)
        );
    }
}
public extension Scalar {
    public Scalar anti_reject_orthogonally_from(AntiFlatPoint other) {
        return Scalar(
            /* scalar */
            float4(other.group0.xyz, other.e321 * -1.0)[3] * other.e321 * this.scalar * -1.0
        );
    }
}
public extension Scalar {
    public AntiMotor anti_reject_orthogonally_from(AntiFlector other) {
        AntiFlector wedge = AntiFlector(
            /* e235, e315, e125, e321 */
            float4(this.scalar) * other.group0, 
            /* e1, e2, e3, e5 */
            float4(this.scalar) * other.group1
        );
        Flector right_anti_dual = Flector(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4((wedge.group0.www * right_anti_dual.group1.xyz * float3(-1.0)), (wedge.e1 * right_anti_dual.e4235) + (wedge.e2 * right_anti_dual.e4315) + (wedge.e3 * right_anti_dual.e4125) - (wedge.e321 * right_anti_dual.e45)), 
            /* e15, e25, e35, e3215 */
            float4(((wedge.group0.yzx * right_anti_dual.group1.zxy) - (wedge.group0.zxy * right_anti_dual.group1.yzx)), 0.0)
        );
    }
}
public extension Scalar {
    public Scalar anti_reject_orthogonally_from(AntiLine other) {
        AntiLine wedge = AntiLine(
            /* e23, e31, e12 */
            float3(this.scalar) * other.group0.xyz, 
            /* e15, e25, e35 */
            float3(this.scalar) * other.group1.xyz
        );
        Line right_anti_dual = Line(
            /* e415, e425, e435 */
            other.group0.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group1.xyz * float3(-1.0)
        );
        return Scalar(
            /* scalar */
            -(wedge.e23 * right_anti_dual.e415) - (wedge.e31 * right_anti_dual.e425) - (wedge.e12 * right_anti_dual.e435)
        );
    }
}
public extension Scalar {
    public AntiMotor anti_reject_orthogonally_from(AntiMotor other) {
        AntiMotor wedge = AntiMotor(
            /* e23, e31, e12, scalar */
            float4(this.scalar) * other.group0, 
            /* e15, e25, e35, e3215 */
            float4(this.scalar) * other.group1
        );
        Motor right_anti_dual = Motor(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4((float3(right_anti_dual.e12345) * wedge.group0.xyz), (wedge.scalar * right_anti_dual.e12345) - (wedge.e23 * right_anti_dual.e415) - (wedge.e31 * right_anti_dual.e425) - (wedge.e12 * right_anti_dual.e435)), 
            /* e15, e25, e35, e3215 */
            float4(((float3(wedge.e3215) * right_anti_dual.group0.xyz) + (float3(right_anti_dual.e12345) * wedge.group1.xyz)), wedge.e3215 * right_anti_dual.e12345)
        );
    }
}
public extension Scalar {
    public Scalar anti_reject_orthogonally_from(AntiPlane other) {
        AntiPlane wedge = AntiPlane(
            /* e1, e2, e3, e5 */
            float4(this.scalar) * other.group0
        );
        Plane right_anti_dual = Plane(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return Scalar(
            /* scalar */
            (wedge.e1 * right_anti_dual.e4235) + (wedge.e2 * right_anti_dual.e4315) + (wedge.e3 * right_anti_dual.e4125)
        );
    }
}
public extension Scalar {
    public Scalar anti_reject_orthogonally_from(AntiScalar other) {
        return Scalar(
            /* scalar */
            pow(other.e12345, 2) * this.scalar * -1.0
        );
    }
}
public extension Scalar {
    public Scalar anti_reject_orthogonally_from(Circle other) {
        Circle wedge = Circle(
            /* e423, e431, e412 */
            float3(this.scalar) * other.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(this.scalar) * other.group1, 
            /* e235, e315, e125 */
            float3(this.scalar) * other.group2.xyz
        );
        Dipole right_anti_dual = Dipole(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35 */
            other.group2.xyz
        );
        return Scalar(
            /* scalar */
            -(wedge.e423 * right_anti_dual.e15) - (wedge.e431 * right_anti_dual.e25) - (wedge.e412 * right_anti_dual.e35) - (wedge.e415 * right_anti_dual.e23) - (wedge.e425 * right_anti_dual.e31) - (wedge.e435 * right_anti_dual.e12) - (wedge.e321 * right_anti_dual.e45) - (wedge.e235 * right_anti_dual.e41) - (wedge.e315 * right_anti_dual.e42) - (wedge.e125 * right_anti_dual.e43)
        );
    }
}
public extension Scalar {
    public AntiCircleRotor anti_reject_orthogonally_from(CircleRotor other) {
        CircleRotor wedge = CircleRotor(
            /* e423, e431, e412 */
            float3(this.scalar) * other.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(this.scalar) * other.group1, 
            /* e235, e315, e125, e12345 */
            float4(this.scalar) * other.group2
        );
        AntiCircleRotor right_anti_dual = AntiCircleRotor(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiCircleRotor(
            /* e41, e42, e43 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(wedge.e12345) * right_anti_dual.group1, 
            /* e15, e25, e35, scalar */
            float4((float3(wedge.e12345) * right_anti_dual.group2.xyz), (right_anti_dual.scalar * wedge.e12345) - (right_anti_dual.e41 * wedge.e235) - (right_anti_dual.e42 * wedge.e315) - (right_anti_dual.e43 * wedge.e125) - (right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435) - (right_anti_dual.e45 * wedge.e321) - (right_anti_dual.e15 * wedge.e423) - (right_anti_dual.e25 * wedge.e431) - (right_anti_dual.e35 * wedge.e412))
        );
    }
}
public extension Scalar {
    public Scalar anti_reject_orthogonally_from(Dipole other) {
        Dipole wedge = Dipole(
            /* e41, e42, e43 */
            float3(this.scalar) * other.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(this.scalar) * other.group1, 
            /* e15, e25, e35 */
            float3(this.scalar) * other.group2.xyz
        );
        Circle right_anti_dual = Circle(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125 */
            other.group2.xyz * float3(-1.0)
        );
        return Scalar(
            /* scalar */
            -(right_anti_dual.e423 * wedge.e15) - (right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e321 * wedge.e45) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43)
        );
    }
}
public extension Scalar {
    public AntiCircleRotor anti_reject_orthogonally_from(DipoleInversion other) {
        DipoleInversion wedge = DipoleInversion(
            /* e41, e42, e43 */
            float3(this.scalar) * other.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(this.scalar) * other.group1, 
            /* e15, e25, e35, e1234 */
            float4(this.scalar) * other.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(this.scalar) * other.group3
        );
        AntiDipoleInversion right_anti_dual = AntiDipoleInversion(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiCircleRotor(
            /* e41, e42, e43 */
            (float3(wedge.e1234) * right_anti_dual.group1.xyz) + (right_anti_dual.group0.xyz.zxy * wedge.group3.yzx) - (right_anti_dual.group0.xyz.yzx * wedge.group3.zxy), 
            /* e23, e31, e12, e45 */
            float4((right_anti_dual.e423 * wedge.e3215) + (right_anti_dual.e235 * wedge.e1234), (right_anti_dual.e431 * wedge.e3215) + (right_anti_dual.e315 * wedge.e1234), (right_anti_dual.e412 * wedge.e3215) + (right_anti_dual.e125 * wedge.e1234), -(right_anti_dual.e425 * wedge.e4315) - (right_anti_dual.e435 * wedge.e4125)) - (right_anti_dual.group1.wwwx * wedge.group3.xyzx), 
            /* e15, e25, e35, scalar */
            (float4(wedge.e3215) * float4(right_anti_dual.group1.xyz, right_anti_dual.e4)) + (wedge.group3.zxyx * float4(right_anti_dual.group2.yzx, right_anti_dual.e1)) + float4(float3(0.0), (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) + (right_anti_dual.e5 * wedge.e1234) - (right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e321 * wedge.e45) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43)) - float4((right_anti_dual.group2.zxy * wedge.group3.yzx), right_anti_dual.e423 * wedge.e15)
        );
    }
}
public extension Scalar {
    public AntiDualNum anti_reject_orthogonally_from(DualNum other) {
        return AntiDualNum(
            /* e3215, scalar */
            float2(other.e12345 * this.scalar) * float2(other.e5 * -1.0, other.e12345 * -1.0)
        );
    }
}
public extension Scalar {
    public Scalar anti_reject_orthogonally_from(FlatPoint other) {
        return Scalar(
            /* scalar */
            pow(other.e45, 2) * this.scalar * -1.0
        );
    }
}
public extension Scalar {
    public AntiMotor anti_reject_orthogonally_from(Flector other) {
        Flector wedge = Flector(
            /* e15, e25, e35, e45 */
            float4(this.scalar) * other.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4(this.scalar) * other.group1
        );
        AntiFlector right_anti_dual = AntiFlector(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4((right_anti_dual.group0.www * wedge.group1.xyz * float3(-1.0)), (right_anti_dual.e1 * wedge.e4235) + (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) - (right_anti_dual.e321 * wedge.e45)), 
            /* e15, e25, e35, e3215 */
            float4(((right_anti_dual.group0.yzx * wedge.group1.zxy) - (right_anti_dual.group0.zxy * wedge.group1.yzx)), 0.0)
        );
    }
}
public extension Scalar {
    public Scalar anti_reject_orthogonally_from(Line other) {
        Line wedge = Line(
            /* e415, e425, e435 */
            float3(this.scalar) * other.group0.xyz, 
            /* e235, e315, e125 */
            float3(this.scalar) * other.group1.xyz
        );
        AntiLine right_anti_dual = AntiLine(
            /* e23, e31, e12 */
            other.group0.xyz, 
            /* e15, e25, e35 */
            other.group1.xyz
        );
        return Scalar(
            /* scalar */
            -(right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435)
        );
    }
}
public extension Scalar {
    public AntiMotor anti_reject_orthogonally_from(Motor other) {
        Motor wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4(this.scalar) * other.group0, 
            /* e235, e315, e125, e5 */
            float4(this.scalar) * other.group1
        );
        AntiMotor right_anti_dual = AntiMotor(
            /* e23, e31, e12, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4((float3(wedge.e12345) * right_anti_dual.group0.xyz), (right_anti_dual.scalar * wedge.e12345) - (right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435)), 
            /* e15, e25, e35, e3215 */
            float4(((float3(right_anti_dual.e3215) * wedge.group0.xyz) + (float3(wedge.e12345) * right_anti_dual.group1.xyz)), right_anti_dual.e3215 * wedge.e12345)
        );
    }
}
public extension Scalar {
    public MultiVector anti_reject_orthogonally_from(MultiVector other) {
        MultiVector wedge = MultiVector(
            /* scalar, e12345 */
            float2(this.scalar) * other.group0.xy, 
            /* e1, e2, e3, e4 */
            float4(this.scalar) * other.group1, 
            /* e5 */
            other.e5 * this.scalar, 
            /* e15, e25, e35, e45 */
            float4(this.scalar) * other.group3, 
            /* e41, e42, e43 */
            float3(this.scalar) * other.group4.xyz, 
            /* e23, e31, e12 */
            float3(this.scalar) * other.group5.xyz, 
            /* e415, e425, e435, e321 */
            float4(this.scalar) * other.group6, 
            /* e423, e431, e412 */
            float3(this.scalar) * other.group7.xyz, 
            /* e235, e315, e125 */
            float3(this.scalar) * other.group8.xyz, 
            /* e4235, e4315, e4125, e3215 */
            float4(this.scalar) * other.group9, 
            /* e1234 */
            other.e1234 * this.scalar
        );
        MultiVector right_anti_dual = MultiVector(
            /* scalar, e12345 */
            other.group0.xy.yx * float2(-1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215, 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43 */
            other.group7.xyz, 
            /* e23, e31, e12 */
            other.group6.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412 */
            other.group4.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group3.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2((right_anti_dual.scalar * wedge.e12345) + (right_anti_dual.e12345 * wedge.scalar) + (right_anti_dual.e1 * wedge.e4235) + (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) + (right_anti_dual.e4 * wedge.e3215) + (right_anti_dual.e5 * wedge.e1234) + (right_anti_dual.e4235 * wedge.e1) + (right_anti_dual.e4315 * wedge.e2) + (right_anti_dual.e4125 * wedge.e3) + (right_anti_dual.e3215 * wedge.e4) + (right_anti_dual.e1234 * wedge.e5) - (right_anti_dual.e15 * wedge.e423) - (right_anti_dual.e25 * wedge.e431) - (right_anti_dual.e35 * wedge.e412) - (right_anti_dual.e45 * wedge.e321) - (right_anti_dual.e41 * wedge.e235) - (right_anti_dual.e42 * wedge.e315) - (right_anti_dual.e43 * wedge.e125) - (right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e321 * wedge.e45) - (right_anti_dual.e423 * wedge.e15) - (right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43), right_anti_dual.e12345 * wedge.e12345), 
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e15 * wedge.e1234) + (right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e4125 * wedge.e31), (right_anti_dual.e25 * wedge.e1234) + (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e4235 * wedge.e12), (right_anti_dual.e35 * wedge.e1234) + (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e4315 * wedge.e23), -(right_anti_dual.e415 * wedge.e423) - (right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412) - (right_anti_dual.e1234 * wedge.e45)) + (float4(right_anti_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_anti_dual.group1) + (wedge.group9.yzxx * float4(right_anti_dual.group5.xyz.zxy, right_anti_dual.e41)) + float4((wedge.group4.xyz * right_anti_dual.group9.www), right_anti_dual.e45 * wedge.e1234) + float4((right_anti_dual.group7.xyz.zxy * wedge.group8.xyz.yzx), right_anti_dual.e42 * wedge.e4315) + float4((right_anti_dual.group8.xyz.yzx * wedge.group7.xyz.zxy), right_anti_dual.e43 * wedge.e4125) - (right_anti_dual.group9.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((float3(right_anti_dual.e1234) * wedge.group3.xyz), right_anti_dual.e4125 * wedge.e43) - float4((right_anti_dual.group4.xyz * wedge.group9.www), right_anti_dual.e423 * wedge.e415) - float4((right_anti_dual.group5.xyz.yzx * wedge.group9.zxy), right_anti_dual.e431 * wedge.e425) - float4((right_anti_dual.group7.xyz.yzx * wedge.group8.xyz.zxy), right_anti_dual.e412 * wedge.e435) - float4((right_anti_dual.group8.xyz.zxy * wedge.group7.xyz.yzx), right_anti_dual.e4235 * wedge.e41), 
            /* e5 */
            (right_anti_dual.e12345 * wedge.e5) + (right_anti_dual.e5 * wedge.e12345) + (right_anti_dual.e4235 * wedge.e15) + (right_anti_dual.e4315 * wedge.e25) + (right_anti_dual.e4125 * wedge.e35) + (right_anti_dual.e3215 * wedge.e45) - (right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125) - (right_anti_dual.e45 * wedge.e3215) - (right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435), 
            /* e15, e25, e35, e45 */
            float4((right_anti_dual.e415 * wedge.e3215) + (right_anti_dual.e315 * wedge.e4125) + (right_anti_dual.e4125 * wedge.e315) + (right_anti_dual.e3215 * wedge.e415), (right_anti_dual.e425 * wedge.e3215) + (right_anti_dual.e125 * wedge.e4235) + (right_anti_dual.e4235 * wedge.e125) + (right_anti_dual.e3215 * wedge.e425), (right_anti_dual.e435 * wedge.e3215) + (right_anti_dual.e235 * wedge.e4315) + (right_anti_dual.e4315 * wedge.e235) + (right_anti_dual.e3215 * wedge.e435), -(right_anti_dual.e435 * wedge.e4125) - (right_anti_dual.e4235 * wedge.e415) - (right_anti_dual.e4315 * wedge.e425) - (right_anti_dual.e4125 * wedge.e435)) + (float4(right_anti_dual.e12345) * wedge.group3) + (float4(wedge.e12345) * right_anti_dual.group3) - (wedge.group9.yzxx * float4(right_anti_dual.group8.xyz.zxy, right_anti_dual.e415)) - float4((wedge.group8.xyz.zxy * right_anti_dual.group9.yzx), right_anti_dual.e425 * wedge.e4315), 
            /* e41, e42, e43 */
            (float3(right_anti_dual.e12345) * wedge.group4.xyz) + (float3(right_anti_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_anti_dual.group4.xyz) + (float3(wedge.e1234) * right_anti_dual.group6.xyz) + (right_anti_dual.group7.xyz.zxy * wedge.group9.yzx) + (wedge.group7.xyz.zxy * right_anti_dual.group9.yzx) - (right_anti_dual.group7.xyz.yzx * wedge.group9.zxy) - (wedge.group7.xyz.yzx * right_anti_dual.group9.zxy), 
            /* e23, e31, e12 */
            (float3(right_anti_dual.e12345) * wedge.group5.xyz) + (float3(right_anti_dual.e3215) * wedge.group7.xyz) + (float3(right_anti_dual.e1234) * wedge.group8.xyz) + (float3(wedge.e12345) * right_anti_dual.group5.xyz) + (float3(wedge.e3215) * right_anti_dual.group7.xyz) + (float3(wedge.e1234) * right_anti_dual.group8.xyz) - (float3(right_anti_dual.e321) * wedge.group9.xyz) - (float3(wedge.e321) * right_anti_dual.group9.xyz), 
            /* e415, e425, e435, e321 */
            (float4(right_anti_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_anti_dual.group6) + (right_anti_dual.group9.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - float4((right_anti_dual.group9.zxy * wedge.group9.yzx), right_anti_dual.e1234 * wedge.e3215), 
            /* e423, e431, e412 */
            (float3(right_anti_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_anti_dual.group7.xyz) + (float3(wedge.e1234) * right_anti_dual.group9.xyz) - (float3(right_anti_dual.e1234) * wedge.group9.xyz), 
            /* e235, e315, e125 */
            (float3(right_anti_dual.e12345) * wedge.group8.xyz) + (float3(right_anti_dual.e3215) * wedge.group9.xyz) + (float3(wedge.e12345) * right_anti_dual.group8.xyz) - (float3(wedge.e3215) * right_anti_dual.group9.xyz), 
            /* e4235, e4315, e4125, e3215 */
            (float4(right_anti_dual.e12345) * wedge.group9) + (float4(wedge.e12345) * right_anti_dual.group9), 
            /* e1234 */
            (right_anti_dual.e12345 * wedge.e1234) + (right_anti_dual.e1234 * wedge.e12345)
        );
    }
}
public extension Scalar {
    public Scalar anti_reject_orthogonally_from(Plane other) {
        Plane wedge = Plane(
            /* e4235, e4315, e4125, e3215 */
            float4(this.scalar) * other.group0
        );
        AntiPlane right_anti_dual = AntiPlane(
            /* e1, e2, e3, e5 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return Scalar(
            /* scalar */
            (right_anti_dual.e1 * wedge.e4235) + (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125)
        );
    }
}
public extension Scalar {
    public Scalar anti_reject_orthogonally_from(RoundPoint other) {
        RoundPoint wedge = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(this.scalar) * other.group0, 
            /* e5 */
            other.e5 * this.scalar
        );
        Sphere right_anti_dual = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        return Scalar(
            /* scalar */
            (wedge.e1 * right_anti_dual.e4235) + (wedge.e2 * right_anti_dual.e4315) + (wedge.e3 * right_anti_dual.e4125) + (wedge.e4 * right_anti_dual.e3215) + (wedge.e5 * right_anti_dual.e1234)
        );
    }
}
public extension Scalar {
    public Scalar anti_reject_orthogonally_from(Scalar other) {
        return Scalar(
            /* scalar */
            pow(other.scalar, 2) * this.scalar
        );
    }
}
public extension Scalar {
    public Scalar anti_reject_orthogonally_from(Sphere other) {
        Sphere wedge = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(this.scalar) * other.group0, 
            /* e1234 */
            this.scalar * other.e1234
        );
        RoundPoint right_anti_dual = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(other.group0.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215
        );
        return Scalar(
            /* scalar */
            (right_anti_dual.e1 * wedge.e4235) + (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) + (right_anti_dual.e4 * wedge.e3215) + (right_anti_dual.e5 * wedge.e1234)
        );
    }
}
public extension Scalar {
    public VersorOdd anti_reject_orthogonally_from(VersorEven other) {
        VersorEven wedge = VersorEven(
            /* e423, e431, e412, e12345 */
            float4(this.scalar) * other.group0, 
            /* e415, e425, e435, e321 */
            float4(this.scalar) * other.group1, 
            /* e235, e315, e125, e5 */
            float4(this.scalar) * other.group2, 
            /* e1, e2, e3, e4 */
            float4(this.scalar) * other.group3
        );
        VersorOdd right_anti_dual = VersorOdd(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            (wedge.group0.zxyw * float4(right_anti_dual.group3.yzx, right_anti_dual.scalar)) + float4(float3(0.0), (wedge.e2 * right_anti_dual.e4315) + (wedge.e3 * right_anti_dual.e4125) + (wedge.e4 * right_anti_dual.e3215) - (wedge.e431 * right_anti_dual.e25) - (wedge.e412 * right_anti_dual.e35) - (wedge.e415 * right_anti_dual.e23) - (wedge.e425 * right_anti_dual.e31) - (wedge.e435 * right_anti_dual.e12) - (wedge.e321 * right_anti_dual.e45) - (wedge.e235 * right_anti_dual.e41) - (wedge.e315 * right_anti_dual.e42) - (wedge.e125 * right_anti_dual.e43)) + float4((wedge.group0.www * right_anti_dual.group0.xyz), wedge.e5 * right_anti_dual.e1234) + float4((right_anti_dual.group2.www * wedge.group1.xyz), wedge.e1 * right_anti_dual.e4235) - (wedge.group0.yzxx * float4(right_anti_dual.group3.zxy, right_anti_dual.e15)), 
            /* e23, e31, e12, e45 */
            float4((wedge.e12345 * right_anti_dual.e23) + (wedge.e235 * right_anti_dual.e1234), (wedge.e12345 * right_anti_dual.e31) + (wedge.e315 * right_anti_dual.e1234), (wedge.e12345 * right_anti_dual.e12) + (wedge.e125 * right_anti_dual.e1234), -(wedge.e425 * right_anti_dual.e4315) - (wedge.e435 * right_anti_dual.e4125)) + (wedge.group0 * float4(right_anti_dual.group3.www, right_anti_dual.e45)) - (wedge.group1.wwwx * right_anti_dual.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(wedge.e12345) * right_anti_dual.group2.xyz) + (float3(right_anti_dual.e3215) * wedge.group1.xyz) + (wedge.group2.yzx * right_anti_dual.group3.zxy) - (wedge.group2.zxy * right_anti_dual.group3.yzx)), wedge.e12345 * right_anti_dual.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_anti_dual.group3
        );
    }
}
public extension Scalar {
    public VersorOdd anti_reject_orthogonally_from(VersorOdd other) {
        VersorOdd wedge = VersorOdd(
            /* e41, e42, e43, scalar */
            float4(this.scalar) * other.group0, 
            /* e23, e31, e12, e45 */
            float4(this.scalar) * other.group1, 
            /* e15, e25, e35, e1234 */
            float4(this.scalar) * other.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(this.scalar) * other.group3
        );
        VersorEven right_anti_dual = VersorEven(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            (right_anti_dual.group0.zxyw * float4(wedge.group3.yzx, wedge.scalar)) + float4(float3(0.0), (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) + (right_anti_dual.e4 * wedge.e3215) - (right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e321 * wedge.e45) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43)) + float4((right_anti_dual.group0.www * wedge.group0.xyz), right_anti_dual.e5 * wedge.e1234) + float4((wedge.group2.www * right_anti_dual.group1.xyz), right_anti_dual.e1 * wedge.e4235) - (right_anti_dual.group0.yzxx * float4(wedge.group3.zxy, wedge.e15)), 
            /* e23, e31, e12, e45 */
            float4((right_anti_dual.e12345 * wedge.e23) + (right_anti_dual.e235 * wedge.e1234), (right_anti_dual.e12345 * wedge.e31) + (right_anti_dual.e315 * wedge.e1234), (right_anti_dual.e12345 * wedge.e12) + (right_anti_dual.e125 * wedge.e1234), -(right_anti_dual.e425 * wedge.e4315) - (right_anti_dual.e435 * wedge.e4125)) + (right_anti_dual.group0 * float4(wedge.group3.www, wedge.e45)) - (right_anti_dual.group1.wwwx * wedge.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_anti_dual.e12345) * wedge.group2.xyz) + (float3(wedge.e3215) * right_anti_dual.group1.xyz) + (right_anti_dual.group2.yzx * wedge.group3.zxy) - (right_anti_dual.group2.zxy * wedge.group3.yzx)), right_anti_dual.e12345 * wedge.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_anti_dual.e12345) * wedge.group3
        );
    }
}
public extension Sphere {
    // Fancy infix trick (first half)
    public AntiRejectOrthogonallyFromInfixPartial<Sphere> operator /(AntiRejectOrthogonallyFromInfix rhs) {
        return AntiRejectOrthogonallyFromInfixPartial<Sphere>(this);
    }
}
public extension AntiRejectOrthogonallyFromInfixPartial<Sphere> {
    // Fancy infix trick (second half)
    public DipoleInversion operator /(AntiCircleRotor rhs) {
        return this.a.anti_reject_orthogonally_from(rhs);
    }
}
public extension Sphere {
    public DipoleInversion anti_reject_orthogonally_from(AntiCircleRotor other) {
        Sphere wedge = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar) * this.group0, 
            /* e1234 */
            other.scalar * this.e1234
        );
        CircleRotor right_anti_dual = CircleRotor(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            (float3(wedge.e1234) * right_anti_dual.group1.xyz) + (right_anti_dual.group0.xyz.zxy * wedge.group0.yzx) - (right_anti_dual.group0.xyz.yzx * wedge.group0.zxy), 
            /* e23, e31, e12, e45 */
            float4((right_anti_dual.e423 * wedge.e3215) + (right_anti_dual.e235 * wedge.e1234), (right_anti_dual.e431 * wedge.e3215) + (right_anti_dual.e315 * wedge.e1234), (right_anti_dual.e412 * wedge.e3215) + (right_anti_dual.e125 * wedge.e1234), -(right_anti_dual.e425 * wedge.e4315) - (right_anti_dual.e435 * wedge.e4125)) - (right_anti_dual.group1.wwwx * wedge.group0.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(wedge.e3215) * right_anti_dual.group1.xyz) + (right_anti_dual.group2.yzx * wedge.group0.zxy) - (right_anti_dual.group2.zxy * wedge.group0.yzx)), right_anti_dual.e12345 * wedge.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_anti_dual.e12345) * wedge.group0
        );
    }
}
public extension Sphere {
    public DipoleInversion anti_reject_orthogonally_from(AntiDipoleInversion other) {
        AntiScalar wedge = AntiScalar(
            /* e12345 */
            (other.e4 * this.e3215) + (other.e1 * this.e4235) + (other.e2 * this.e4315) + (other.e3 * this.e4125) + (other.e5 * this.e1234)
        );
        DipoleInversion right_anti_dual = DipoleInversion(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return DipoleInversion(
            /* e41, e42, e43 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(wedge.e12345) * right_anti_dual.group1, 
            /* e15, e25, e35, e1234 */
            float4(wedge.e12345) * right_anti_dual.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_anti_dual.group3
        );
    }
}
public extension Sphere {
    public VersorOdd anti_reject_orthogonally_from(AntiDualNum other) {
        Sphere wedge = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar) * this.group0, 
            /* e1234 */
            other.scalar * this.e1234
        );
        DualNum right_anti_dual = DualNum(
            /* e5, e12345 */
            other.group0.xy
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(float3(0.0), right_anti_dual.e5 * wedge.e1234), 
            /* e23, e31, e12, e45 */
            float4(0.0), 
            /* e15, e25, e35, e1234 */
            float4(float3(0.0), right_anti_dual.e12345 * wedge.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_anti_dual.e12345) * wedge.group0
        );
    }
}
public extension Sphere {
    public Flector anti_reject_orthogonally_from(AntiFlector other) {
        AntiScalar wedge = AntiScalar(
            /* e12345 */
            (other.e1 * this.e4235) + (other.e2 * this.e4315) + (other.e3 * this.e4125) + (other.e5 * this.e1234)
        );
        Flector right_anti_dual = Flector(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return Flector(
            /* e15, e25, e35, e45 */
            float4(wedge.e12345) * right_anti_dual.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_anti_dual.group1
        );
    }
}
public extension Sphere {
    public VersorOdd anti_reject_orthogonally_from(AntiMotor other) {
        Sphere wedge = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar) * this.group0, 
            /* e1234 */
            other.scalar * this.e1234
        );
        Motor right_anti_dual = Motor(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(wedge.e1234) * float4(right_anti_dual.group0.xyz, right_anti_dual.e5), 
            /* e23, e31, e12, e45 */
            float4((float3(wedge.e1234) * right_anti_dual.group1.xyz), -(right_anti_dual.e415 * wedge.e4235) - (right_anti_dual.e425 * wedge.e4315) - (right_anti_dual.e435 * wedge.e4125)), 
            /* e15, e25, e35, e1234 */
            float4(((float3(wedge.e3215) * right_anti_dual.group0.xyz) + (right_anti_dual.group1.yzx * wedge.group0.zxy) - (right_anti_dual.group1.zxy * wedge.group0.yzx)), right_anti_dual.e12345 * wedge.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_anti_dual.e12345) * wedge.group0
        );
    }
}
public extension Sphere {
    public Plane anti_reject_orthogonally_from(AntiPlane other) {
        return Plane(
            /* e4235, e4315, e4125, e3215 */
            float4((other.e1 * this.e4235) + (other.e2 * this.e4315) + (other.e3 * this.e4125) + (other.e5 * this.e1234)) * float4(other.group0.xyz, other.e5 * -1.0)
        );
    }
}
public extension Sphere {
    public AntiDualNum anti_reject_orthogonally_from(DualNum other) {
        return AntiDualNum(
            /* e3215, scalar */
            float2(other.e5 * this.e1234) * float2(other.e5 * -1.0, other.e12345 * -1.0)
        );
    }
}
public extension Sphere {
    public AntiMotor anti_reject_orthogonally_from(Motor other) {
        AntiScalar wedge = AntiScalar(
            /* e12345 */
            other.e5 * this.e1234
        );
        AntiMotor right_anti_dual = AntiMotor(
            /* e23, e31, e12, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4(wedge.e12345) * right_anti_dual.group0, 
            /* e15, e25, e35, e3215 */
            float4(wedge.e12345) * right_anti_dual.group1
        );
    }
}
public extension Sphere {
    public MultiVector anti_reject_orthogonally_from(MultiVector other) {
        MultiVector wedge = MultiVector(
            /* scalar, e12345 */
            float2(0.0, (other.e1 * this.e4235) + (other.e2 * this.e4315) + (other.e3 * this.e4125) + (other.e4 * this.e3215) + (other.e5 * this.e1234)), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5 */
            0.0, 
            /* e15, e25, e35, e45 */
            float4(0.0), 
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(0.0), 
            /* e423, e431, e412 */
            float3(0.0), 
            /* e235, e315, e125 */
            float3(0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar) * this.group0, 
            /* e1234 */
            other.scalar * this.e1234
        );
        MultiVector right_anti_dual = MultiVector(
            /* scalar, e12345 */
            other.group0.xy.yx * float2(-1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215, 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43 */
            other.group7.xyz, 
            /* e23, e31, e12 */
            other.group6.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412 */
            other.group4.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group3.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2((right_anti_dual.scalar * wedge.e12345) + (right_anti_dual.e12345 * wedge.scalar) + (right_anti_dual.e1 * wedge.e4235) + (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) + (right_anti_dual.e4 * wedge.e3215) + (right_anti_dual.e5 * wedge.e1234) + (right_anti_dual.e4235 * wedge.e1) + (right_anti_dual.e4315 * wedge.e2) + (right_anti_dual.e4125 * wedge.e3) + (right_anti_dual.e3215 * wedge.e4) + (right_anti_dual.e1234 * wedge.e5) - (right_anti_dual.e15 * wedge.e423) - (right_anti_dual.e25 * wedge.e431) - (right_anti_dual.e35 * wedge.e412) - (right_anti_dual.e45 * wedge.e321) - (right_anti_dual.e41 * wedge.e235) - (right_anti_dual.e42 * wedge.e315) - (right_anti_dual.e43 * wedge.e125) - (right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e321 * wedge.e45) - (right_anti_dual.e423 * wedge.e15) - (right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43), right_anti_dual.e12345 * wedge.e12345), 
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e15 * wedge.e1234) + (right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e4125 * wedge.e31), (right_anti_dual.e25 * wedge.e1234) + (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e4235 * wedge.e12), (right_anti_dual.e35 * wedge.e1234) + (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e4315 * wedge.e23), -(right_anti_dual.e415 * wedge.e423) - (right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412) - (right_anti_dual.e1234 * wedge.e45)) + (float4(right_anti_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_anti_dual.group1) + (wedge.group9.yzxx * float4(right_anti_dual.group5.xyz.zxy, right_anti_dual.e41)) + float4((wedge.group4.xyz * right_anti_dual.group9.www), right_anti_dual.e45 * wedge.e1234) + float4((right_anti_dual.group7.xyz.zxy * wedge.group8.xyz.yzx), right_anti_dual.e42 * wedge.e4315) + float4((right_anti_dual.group8.xyz.yzx * wedge.group7.xyz.zxy), right_anti_dual.e43 * wedge.e4125) - (right_anti_dual.group9.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((float3(right_anti_dual.e1234) * wedge.group3.xyz), right_anti_dual.e4125 * wedge.e43) - float4((right_anti_dual.group4.xyz * wedge.group9.www), right_anti_dual.e423 * wedge.e415) - float4((right_anti_dual.group5.xyz.yzx * wedge.group9.zxy), right_anti_dual.e431 * wedge.e425) - float4((right_anti_dual.group7.xyz.yzx * wedge.group8.xyz.zxy), right_anti_dual.e412 * wedge.e435) - float4((right_anti_dual.group8.xyz.zxy * wedge.group7.xyz.yzx), right_anti_dual.e4235 * wedge.e41), 
            /* e5 */
            (right_anti_dual.e12345 * wedge.e5) + (right_anti_dual.e5 * wedge.e12345) + (right_anti_dual.e4235 * wedge.e15) + (right_anti_dual.e4315 * wedge.e25) + (right_anti_dual.e4125 * wedge.e35) + (right_anti_dual.e3215 * wedge.e45) - (right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125) - (right_anti_dual.e45 * wedge.e3215) - (right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435), 
            /* e15, e25, e35, e45 */
            float4((right_anti_dual.e415 * wedge.e3215) + (right_anti_dual.e315 * wedge.e4125) + (right_anti_dual.e4125 * wedge.e315) + (right_anti_dual.e3215 * wedge.e415), (right_anti_dual.e425 * wedge.e3215) + (right_anti_dual.e125 * wedge.e4235) + (right_anti_dual.e4235 * wedge.e125) + (right_anti_dual.e3215 * wedge.e425), (right_anti_dual.e435 * wedge.e3215) + (right_anti_dual.e235 * wedge.e4315) + (right_anti_dual.e4315 * wedge.e235) + (right_anti_dual.e3215 * wedge.e435), -(right_anti_dual.e435 * wedge.e4125) - (right_anti_dual.e4235 * wedge.e415) - (right_anti_dual.e4315 * wedge.e425) - (right_anti_dual.e4125 * wedge.e435)) + (float4(right_anti_dual.e12345) * wedge.group3) + (float4(wedge.e12345) * right_anti_dual.group3) - (wedge.group9.yzxx * float4(right_anti_dual.group8.xyz.zxy, right_anti_dual.e415)) - float4((wedge.group8.xyz.zxy * right_anti_dual.group9.yzx), right_anti_dual.e425 * wedge.e4315), 
            /* e41, e42, e43 */
            (float3(right_anti_dual.e12345) * wedge.group4.xyz) + (float3(right_anti_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_anti_dual.group4.xyz) + (float3(wedge.e1234) * right_anti_dual.group6.xyz) + (right_anti_dual.group7.xyz.zxy * wedge.group9.yzx) + (wedge.group7.xyz.zxy * right_anti_dual.group9.yzx) - (right_anti_dual.group7.xyz.yzx * wedge.group9.zxy) - (wedge.group7.xyz.yzx * right_anti_dual.group9.zxy), 
            /* e23, e31, e12 */
            (float3(right_anti_dual.e12345) * wedge.group5.xyz) + (float3(right_anti_dual.e3215) * wedge.group7.xyz) + (float3(right_anti_dual.e1234) * wedge.group8.xyz) + (float3(wedge.e12345) * right_anti_dual.group5.xyz) + (float3(wedge.e3215) * right_anti_dual.group7.xyz) + (float3(wedge.e1234) * right_anti_dual.group8.xyz) - (float3(right_anti_dual.e321) * wedge.group9.xyz) - (float3(wedge.e321) * right_anti_dual.group9.xyz), 
            /* e415, e425, e435, e321 */
            (float4(right_anti_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_anti_dual.group6) + (right_anti_dual.group9.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - float4((right_anti_dual.group9.zxy * wedge.group9.yzx), right_anti_dual.e1234 * wedge.e3215), 
            /* e423, e431, e412 */
            (float3(right_anti_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_anti_dual.group7.xyz) + (float3(wedge.e1234) * right_anti_dual.group9.xyz) - (float3(right_anti_dual.e1234) * wedge.group9.xyz), 
            /* e235, e315, e125 */
            (float3(right_anti_dual.e12345) * wedge.group8.xyz) + (float3(right_anti_dual.e3215) * wedge.group9.xyz) + (float3(wedge.e12345) * right_anti_dual.group8.xyz) - (float3(wedge.e3215) * right_anti_dual.group9.xyz), 
            /* e4235, e4315, e4125, e3215 */
            (float4(right_anti_dual.e12345) * wedge.group9) + (float4(wedge.e12345) * right_anti_dual.group9), 
            /* e1234 */
            (right_anti_dual.e12345 * wedge.e1234) + (right_anti_dual.e1234 * wedge.e12345)
        );
    }
}
public extension Sphere {
    public Sphere anti_reject_orthogonally_from(RoundPoint other) {
        AntiScalar wedge = AntiScalar(
            /* e12345 */
            (other.e1 * this.e4235) + (other.e2 * this.e4315) + (other.e3 * this.e4125) + (other.e4 * this.e3215) + (other.e5 * this.e1234)
        );
        Sphere right_anti_dual = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        return Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_anti_dual.group0, 
            /* e1234 */
            wedge.e12345 * right_anti_dual.e1234
        );
    }
}
public extension Sphere {
    public Sphere anti_reject_orthogonally_from(Scalar other) {
        Sphere wedge = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar) * this.group0, 
            /* e1234 */
            other.scalar * this.e1234
        );
        AntiScalar right_anti_dual = AntiScalar(
            /* e12345 */
            other.scalar
        );
        return Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(right_anti_dual.e12345) * wedge.group0, 
            /* e1234 */
            right_anti_dual.e12345 * wedge.e1234
        );
    }
}
public extension Sphere {
    public VersorOdd anti_reject_orthogonally_from(VersorEven other) {
        AntiScalar wedge = AntiScalar(
            /* e12345 */
            (this.e4235 * other.e1) + (this.e4315 * other.e2) + (this.e4125 * other.e3) + (this.e3215 * other.e4) + (this.e1234 * other.e5)
        );
        VersorOdd right_anti_dual = VersorOdd(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(wedge.e12345) * right_anti_dual.group0, 
            /* e23, e31, e12, e45 */
            float4(wedge.e12345) * right_anti_dual.group1, 
            /* e15, e25, e35, e1234 */
            float4(wedge.e12345) * right_anti_dual.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_anti_dual.group3
        );
    }
}
public extension Sphere {
    public VersorOdd anti_reject_orthogonally_from(VersorOdd other) {
        Sphere wedge = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar) * this.group0, 
            /* e1234 */
            this.e1234 * other.scalar
        );
        VersorEven right_anti_dual = VersorEven(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(wedge.e4125 * right_anti_dual.e431 * -1.0, wedge.e4235 * right_anti_dual.e412 * -1.0, wedge.e4315 * right_anti_dual.e423 * -1.0, (wedge.e4125 * right_anti_dual.e3) + (wedge.e3215 * right_anti_dual.e4) + (wedge.e1234 * right_anti_dual.e5)) + (wedge.group0.yzxx * float4(right_anti_dual.group0.zxy, right_anti_dual.e1)) + float4((float3(wedge.e1234) * right_anti_dual.group1.xyz), wedge.e4315 * right_anti_dual.e2), 
            /* e23, e31, e12, e45 */
            float4((wedge.e3215 * right_anti_dual.e423) + (wedge.e1234 * right_anti_dual.e235), (wedge.e3215 * right_anti_dual.e431) + (wedge.e1234 * right_anti_dual.e315), (wedge.e3215 * right_anti_dual.e412) + (wedge.e1234 * right_anti_dual.e125), -(wedge.e4315 * right_anti_dual.e425) - (wedge.e4125 * right_anti_dual.e435)) - (wedge.group0.xyzx * right_anti_dual.group1.wwwx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(wedge.e3215) * right_anti_dual.group1.xyz) + (wedge.group0.zxy * right_anti_dual.group2.yzx) - (wedge.group0.yzx * right_anti_dual.group2.zxy)), wedge.e1234 * right_anti_dual.e12345), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_anti_dual.e12345) * wedge.group0
        );
    }
}
public extension VersorEven {
    // Fancy infix trick (first half)
    public AntiRejectOrthogonallyFromInfixPartial<VersorEven> operator /(AntiRejectOrthogonallyFromInfix rhs) {
        return AntiRejectOrthogonallyFromInfixPartial<VersorEven>(this);
    }
}
public extension AntiRejectOrthogonallyFromInfixPartial<VersorEven> {
    // Fancy infix trick (second half)
    public VersorEven operator /(AntiCircleRotor rhs) {
        return this.a.anti_reject_orthogonally_from(rhs);
    }
}
public extension VersorEven {
    public VersorEven anti_reject_orthogonally_from(AntiCircleRotor other) {
        VersorEven wedge = VersorEven(
            /* e423, e431, e412, e12345 */
            float4((other.e23 * this.e4) + (other.scalar * this.e423), (other.e31 * this.e4) + (other.scalar * this.e431), (other.e12 * this.e4) + (other.scalar * this.e412), -(other.e42 * this.e315) - (other.e43 * this.e125) - (other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435) - (other.e45 * this.e321) - (other.e15 * this.e423) - (other.e25 * this.e431) - (other.e35 * this.e412)) + float4((other.group0.xyz.yzx * this.group3.zxy), other.scalar * this.e12345) - float4((other.group0.xyz.zxy * this.group3.yzx), other.e41 * this.e235), 
            /* e415, e425, e435, e321 */
            float4((other.e15 * this.e4) + (other.scalar * this.e415), (other.e25 * this.e4) + (other.scalar * this.e425), (other.e35 * this.e4) + (other.scalar * this.e435), -(other.e31 * this.e2) - (other.e12 * this.e3)) + float4((other.group0.xyz * this.group2.www), other.scalar * this.e321) - (other.group1.wwwx * this.group3.xyzx), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.scalar) * this.group2.xyz) + (float3(this.e5) * other.group1.xyz) + (other.group2.zxy * this.group3.yzx) - (other.group2.yzx * this.group3.zxy)), other.scalar * this.e5), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * this.group3
        );
        CircleRotor right_anti_dual = CircleRotor(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(((float3(right_anti_dual.e12345) * wedge.group0.xyz) + (float3(wedge.e12345) * right_anti_dual.group0.xyz)), right_anti_dual.e12345 * wedge.e12345), 
            /* e415, e425, e435, e321 */
            (float4(right_anti_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_anti_dual.group1), 
            /* e235, e315, e125, e5 */
            float4(right_anti_dual.e12345 * wedge.e235, right_anti_dual.e12345 * wedge.e315, right_anti_dual.e12345 * wedge.e125, -(right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435)) + (right_anti_dual.group2 * float4(wedge.group0.www, wedge.e5)), 
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e315 * wedge.e412) + (right_anti_dual.e12345 * wedge.e1), (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e125 * wedge.e423) + (right_anti_dual.e12345 * wedge.e2), (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e235 * wedge.e431) + (right_anti_dual.e12345 * wedge.e3), -(right_anti_dual.e412 * wedge.e435) - (right_anti_dual.e415 * wedge.e423) - (right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412)) + float4((right_anti_dual.group0.xyz.zxy * wedge.group2.yzx), right_anti_dual.e12345 * wedge.e4) - float4((right_anti_dual.group0.xyz.yzx * wedge.group2.zxy), right_anti_dual.e423 * wedge.e415) - float4((right_anti_dual.group2.zxy * wedge.group0.yzx), right_anti_dual.e431 * wedge.e425)
        );
    }
}
public extension VersorEven {
    public AntiDipoleInversion anti_reject_orthogonally_from(AntiDipoleInversion other) {
        DipoleInversion wedge = DipoleInversion(
            /* e41, e42, e43 */
            (float3(this.e4) * other.group3.xyz) - (float3(other.e4) * this.group3.xyz), 
            /* e23, e31, e12, e45 */
            (other.group3.zxyw * this.group3.yzxw) - float4((other.group3.yzx * this.group3.zxy), other.e4 * this.e5), 
            /* e15, e25, e35, e1234 */
            (this.group3.xyzx * float4(other.group3.www, other.e423)) + float4(float3(0.0), (other.e431 * this.e2) + (other.e412 * this.e3) + (other.e321 * this.e4) - (other.e1 * this.e423) - (other.e2 * this.e431) - (other.e3 * this.e412)) - float4((this.group2.www * other.group3.xyz), other.e4 * this.e321), 
            /* e4235, e4315, e4125, e3215 */
            (float4(other.e5) * float4(this.group0.xyz, this.e321)) + (other.group3.yzxz * float4(this.group1.zxy, this.e125)) + float4((other.group1.yzx * this.group3.zxy), other.e1 * this.e235) + float4((this.group3.www * other.group2.xyz), other.e2 * this.e315) - (float4(this.e5) * float4(other.group0.xyz, other.e321)) - (other.group2.wwwy * float4(this.group2.xyz, this.e2)) - (this.group3.yzxx * float4(other.group1.zxy, other.e235)) - float4((other.group3.zxy * this.group1.yzx), other.e125 * this.e3)
        );
        DipoleInversion right_anti_dual = DipoleInversion(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            (float3(wedge.e1234) * right_anti_dual.group3.xyz) - (float3(right_anti_dual.e1234) * wedge.group3.xyz), 
            /* e415, e425, e435, e321 */
            (right_anti_dual.group3.yzxw * float4(wedge.group3.zxy, wedge.e1234)) - (wedge.group3.yzxw * float4(right_anti_dual.group3.zxy, right_anti_dual.e1234)), 
            /* e235, e315, e125, e4 */
            (wedge.group3.xyzx * float4(right_anti_dual.group3.www, right_anti_dual.e41)) + float4(float3(0.0), (right_anti_dual.e42 * wedge.e4315) + (right_anti_dual.e43 * wedge.e4125) + (right_anti_dual.e45 * wedge.e1234) - (right_anti_dual.e1234 * wedge.e45) - (right_anti_dual.e4315 * wedge.e42) - (right_anti_dual.e4125 * wedge.e43)) - float4((wedge.group3.www * right_anti_dual.group3.xyz), right_anti_dual.e4235 * wedge.e41), 
            /* e1, e2, e3, e5 */
            (right_anti_dual.group3.zxyw * wedge.group1.yzxw) + (wedge.group2.wwwz * float4(right_anti_dual.group2.xyz, right_anti_dual.e4125)) + float4((wedge.group0.xyz * right_anti_dual.group3.www), right_anti_dual.e4235 * wedge.e15) + float4((right_anti_dual.group1.zxy * wedge.group3.yzx), right_anti_dual.e4315 * wedge.e25) - (float4(wedge.e3215) * float4(right_anti_dual.group0.xyz, right_anti_dual.e45)) - (right_anti_dual.group2.wwwy * float4(wedge.group2.xyz, wedge.e4315)) - (wedge.group3.zxyx * float4(right_anti_dual.group1.yzx, right_anti_dual.e15)) - float4((right_anti_dual.group3.yzx * wedge.group1.zxy), right_anti_dual.e35 * wedge.e4125)
        );
    }
}
public extension VersorEven {
    public VersorEven anti_reject_orthogonally_from(AntiDualNum other) {
        VersorEven wedge = VersorEven(
            /* e423, e431, e412, e12345 */
            float4(other.group0.xy.yy, other.scalar, (other.e3215 * this.e4) + (other.scalar * this.e12345)) * float4(this.group0.xyz, 1.0), 
            /* e415, e425, e435, e321 */
            float4(other.scalar) * this.group1, 
            /* e235, e315, e125, e5 */
            float4(other.scalar) * this.group2, 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * this.group3
        );
        DualNum right_anti_dual = DualNum(
            /* e5, e12345 */
            other.group0.xy
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(right_anti_dual.e12345) * wedge.group0, 
            /* e415, e425, e435, e321 */
            float4(right_anti_dual.e12345) * wedge.group1, 
            /* e235, e315, e125, e5 */
            float4(right_anti_dual.group0.xy.yy, right_anti_dual.e12345, (right_anti_dual.e5 * wedge.e12345) + (right_anti_dual.e12345 * wedge.e5)) * float4(wedge.group2.xyz, 1.0), 
            /* e1, e2, e3, e4 */
            float4(right_anti_dual.e12345) * wedge.group3
        );
    }
}
public extension VersorEven {
    public RoundPoint anti_reject_orthogonally_from(AntiFlatPoint other) {
        Sphere wedge = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4((float3(this.e4) * other.group0.xyz), -(other.e235 * this.e1) - (other.e315 * this.e2) - (other.e125 * this.e3) - (other.e321 * this.e5)), 
            /* e1234 */
            other.e321 * this.e4
        );
        FlatPoint right_anti_dual = FlatPoint(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return RoundPoint(
            /* e1, e2, e3, e4 */
            float4(wedge.e1234) * right_anti_dual.group0, 
            /* e5 */
            -(right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125) - (right_anti_dual.e45 * wedge.e3215)
        );
    }
}
public extension VersorEven {
    public AntiDipoleInversion anti_reject_orthogonally_from(AntiFlector other) {
        DipoleInversion wedge = DipoleInversion(
            /* e41, e42, e43 */
            float3(this.e4) * other.group1.xyz, 
            /* e23, e31, e12, e45 */
            float4(((other.group1.zxy * this.group3.yzx) - (other.group1.yzx * this.group3.zxy)), other.e5 * this.e4), 
            /* e15, e25, e35, e1234 */
            (this.group3 * float4(other.group1.www, other.e321)) + float4(float3(0.0), -(other.e2 * this.e431) - (other.e3 * this.e412)) - (other.group1.xyzx * float4(this.group2.www, this.e423)), 
            /* e4235, e4315, e4125, e3215 */
            (other.group1.yzxy * float4(this.group1.zxy, this.e315)) + (other.group1.wwwz * float4(this.group0.xyz, this.e125)) + float4(float3(0.0), (other.e5 * this.e321) - (other.e315 * this.e2) - (other.e125 * this.e3) - (other.e321 * this.e5)) + float4((this.group3.www * other.group0.xyz), other.e1 * this.e235) - float4((other.group1.zxy * this.group1.yzx), other.e235 * this.e1)
        );
        Flector right_anti_dual = Flector(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(wedge.e1234) * right_anti_dual.group1.xyz, 
            /* e415, e425, e435, e321 */
            float4(((wedge.group3.zxy * right_anti_dual.group1.yzx) - (wedge.group3.yzx * right_anti_dual.group1.zxy)), wedge.e1234 * right_anti_dual.e3215), 
            /* e235, e315, e125, e4 */
            float4(float3(0.0), -(wedge.e42 * right_anti_dual.e4315) - (wedge.e43 * right_anti_dual.e4125)) + float4((right_anti_dual.group1.www * wedge.group3.xyz), wedge.e1234 * right_anti_dual.e45) - (right_anti_dual.group1.xyzx * float4(wedge.group3.www, wedge.e41)), 
            /* e1, e2, e3, e5 */
            (float4(right_anti_dual.e3215) * float4(wedge.group0.xyz, wedge.e45)) + (wedge.group2.wwwy * float4(right_anti_dual.group0.xyz, right_anti_dual.e4315)) + (right_anti_dual.group1.zxyx * float4(wedge.group1.yzx, wedge.e15)) + float4(float3(0.0), (wedge.e35 * right_anti_dual.e4125) - (wedge.e4315 * right_anti_dual.e25) - (wedge.e4125 * right_anti_dual.e35) - (wedge.e3215 * right_anti_dual.e45)) - float4((wedge.group1.zxy * right_anti_dual.group1.yzx), wedge.e4235 * right_anti_dual.e15)
        );
    }
}
public extension VersorEven {
    public AntiDipoleInversion anti_reject_orthogonally_from(AntiLine other) {
        CircleRotor wedge = CircleRotor(
            /* e423, e431, e412 */
            float3(this.e4) * other.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4((float3(this.e4) * other.group1.xyz), -(other.e23 * this.e1) - (other.e31 * this.e2) - (other.e12 * this.e3)), 
            /* e235, e315, e125, e12345 */
            float4((other.e23 * this.e5) + (other.e35 * this.e2), (other.e31 * this.e5) + (other.e15 * this.e3), (other.e12 * this.e5) + (other.e25 * this.e1), -(other.e31 * this.e425) - (other.e12 * this.e435) - (other.e15 * this.e423) - (other.e25 * this.e431) - (other.e35 * this.e412)) - float4((other.group1.xyz.yzx * this.group3.zxy), other.e23 * this.e415)
        );
        Line right_anti_dual = Line(
            /* e415, e425, e435 */
            other.group0.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group1.xyz * float3(-1.0)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(float3(1.0), 0.0) * float4(right_anti_dual.group0.xyz, 0.0) * float4(wedge.group2.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e235, e315, e125, e4 */
            float4((float3(wedge.e12345) * right_anti_dual.group1.xyz), -(wedge.e423 * right_anti_dual.e415) - (wedge.e431 * right_anti_dual.e425) - (wedge.e412 * right_anti_dual.e435)), 
            /* e1, e2, e3, e5 */
            float4((wedge.e412 * right_anti_dual.e315) + (wedge.e321 * right_anti_dual.e415), (wedge.e423 * right_anti_dual.e125) + (wedge.e321 * right_anti_dual.e425), (wedge.e431 * right_anti_dual.e235) + (wedge.e321 * right_anti_dual.e435), -(wedge.e415 * right_anti_dual.e235) - (wedge.e425 * right_anti_dual.e315) - (wedge.e435 * right_anti_dual.e125) - (wedge.e315 * right_anti_dual.e425) - (wedge.e125 * right_anti_dual.e435)) - float4((wedge.group0.xyz.yzx * right_anti_dual.group1.xyz.zxy), wedge.e235 * right_anti_dual.e415)
        );
    }
}
public extension VersorEven {
    public VersorEven anti_reject_orthogonally_from(AntiMotor other) {
        VersorEven wedge = VersorEven(
            /* e423, e431, e412, e12345 */
            (other.group0 * float4(this.group3.www, this.e12345)) + float4(float3(0.0), -(other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435) - (other.e15 * this.e423) - (other.e25 * this.e431) - (other.e35 * this.e412)) + float4((other.group0.www * this.group0.xyz), other.e3215 * this.e4), 
            /* e415, e425, e435, e321 */
            float4(other.e15 * this.e4, other.e25 * this.e4, other.e35 * this.e4, -(other.e23 * this.e1) - (other.e31 * this.e2) - (other.e12 * this.e3)) + (float4(other.scalar) * this.group1), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.scalar) * this.group2.xyz) + (float3(this.e5) * other.group0.xyz) + (other.group1.zxy * this.group3.yzx) - (other.group1.yzx * this.group3.zxy)), other.scalar * this.e5), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * this.group3
        );
        Motor right_anti_dual = Motor(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(right_anti_dual.e12345) * wedge.group0, 
            /* e415, e425, e435, e321 */
            float4(((float3(right_anti_dual.e12345) * wedge.group1.xyz) + (float3(wedge.e12345) * right_anti_dual.group0.xyz)), right_anti_dual.e12345 * wedge.e321), 
            /* e235, e315, e125, e5 */
            (float4(right_anti_dual.e12345) * wedge.group2) + (float4(wedge.e12345) * right_anti_dual.group1) + float4(float3(0.0), -(right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435)), 
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e12345 * wedge.e1) + (right_anti_dual.e315 * wedge.e412), (right_anti_dual.e12345 * wedge.e2) + (right_anti_dual.e125 * wedge.e423), (right_anti_dual.e12345 * wedge.e3) + (right_anti_dual.e235 * wedge.e431), -(right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412)) + (right_anti_dual.group0 * float4(wedge.group1.www, wedge.e4)) - (wedge.group0.yzxx * float4(right_anti_dual.group1.zxy, right_anti_dual.e415))
        );
    }
}
public extension VersorEven {
    public AntiDipoleInversion anti_reject_orthogonally_from(AntiPlane other) {
        DipoleInversion wedge = DipoleInversion(
            /* e41, e42, e43 */
            float3(this.e4) * other.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(((other.group0.zxy * this.group3.yzx) - (other.group0.yzx * this.group3.zxy)), other.e5 * this.e4), 
            /* e15, e25, e35, e1234 */
            float4(other.e5 * this.e1, other.e5 * this.e2, other.e5 * this.e3, -(other.e2 * this.e431) - (other.e3 * this.e412)) - (other.group0.xyzx * float4(this.group2.www, this.e423)), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.e3 * this.e425 * -1.0, other.e1 * this.e435 * -1.0, other.e2 * this.e415 * -1.0, (other.e3 * this.e125) + (other.e5 * this.e321)) + (other.group0.yzxx * float4(this.group1.zxy, this.e235)) + (other.group0.wwwy * float4(this.group0.xyz, this.e315))
        );
        Plane right_anti_dual = Plane(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(wedge.e1234) * right_anti_dual.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(((wedge.group3.zxy * right_anti_dual.group0.yzx) - (wedge.group3.yzx * right_anti_dual.group0.zxy)), wedge.e1234 * right_anti_dual.e3215), 
            /* e235, e315, e125, e4 */
            float4(wedge.e4235 * right_anti_dual.e3215, wedge.e4315 * right_anti_dual.e3215, wedge.e4125 * right_anti_dual.e3215, -(wedge.e42 * right_anti_dual.e4315) - (wedge.e43 * right_anti_dual.e4125)) - (right_anti_dual.group0.xyzx * float4(wedge.group3.www, wedge.e41)), 
            /* e1, e2, e3, e5 */
            float4(wedge.e12 * right_anti_dual.e4315 * -1.0, wedge.e23 * right_anti_dual.e4125 * -1.0, wedge.e31 * right_anti_dual.e4235 * -1.0, (wedge.e25 * right_anti_dual.e4315) + (wedge.e35 * right_anti_dual.e4125)) + (float4(right_anti_dual.e3215) * float4(wedge.group0.xyz, wedge.e45)) + (right_anti_dual.group0.zxyx * float4(wedge.group1.yzx, wedge.e15))
        );
    }
}
public extension VersorEven {
    public RoundPoint anti_reject_orthogonally_from(Circle other) {
        Sphere wedge = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4((other.e425 * this.e3) + (other.e235 * this.e4), (other.e435 * this.e1) + (other.e315 * this.e4), (other.e415 * this.e2) + (other.e125 * this.e4), -(other.e321 * this.e5) - (other.e125 * this.e3)) - (this.group3.yzxy * float4(other.group1.zxy, other.e315)) - float4((other.group0.xyz * this.group2.www), other.e235 * this.e1), 
            /* e1234 */
            (other.e423 * this.e1) + (other.e431 * this.e2) + (other.e412 * this.e3) + (other.e321 * this.e4)
        );
        Dipole right_anti_dual = Dipole(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35 */
            other.group2.xyz
        );
        return RoundPoint(
            /* e1, e2, e3, e4 */
            float4(-(right_anti_dual.e41 * wedge.e3215) - (right_anti_dual.e31 * wedge.e4125), -(right_anti_dual.e42 * wedge.e3215) - (right_anti_dual.e12 * wedge.e4235), -(right_anti_dual.e43 * wedge.e3215) - (right_anti_dual.e23 * wedge.e4315), (right_anti_dual.e43 * wedge.e4125) + (right_anti_dual.e45 * wedge.e1234)) + (wedge.group0.yzxy * float4(right_anti_dual.group1.zxy, right_anti_dual.e42)) + float4((float3(wedge.e1234) * right_anti_dual.group2.xyz), right_anti_dual.e41 * wedge.e4235), 
            /* e5 */
            -(right_anti_dual.e45 * wedge.e3215) - (right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125)
        );
    }
}
public extension VersorEven {
    public RoundPoint anti_reject_orthogonally_from(CircleRotor other) {
        Sphere wedge = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4((other.e425 * this.e3) + (other.e235 * this.e4), (other.e435 * this.e1) + (other.e315 * this.e4), (other.e415 * this.e2) + (other.e125 * this.e4), -(other.e315 * this.e2) - (other.e125 * this.e3)) - (float4(this.e5) * float4(other.group0.xyz, other.e321)) - (this.group3.yzxx * float4(other.group1.zxy, other.e235)), 
            /* e1234 */
            (other.e423 * this.e1) + (other.e431 * this.e2) + (other.e412 * this.e3) + (other.e321 * this.e4)
        );
        AntiCircleRotor right_anti_dual = AntiCircleRotor(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return RoundPoint(
            /* e1, e2, e3, e4 */
            float4(-(right_anti_dual.e41 * wedge.e3215) - (right_anti_dual.e31 * wedge.e4125), -(right_anti_dual.e42 * wedge.e3215) - (right_anti_dual.e12 * wedge.e4235), -(right_anti_dual.e43 * wedge.e3215) - (right_anti_dual.e23 * wedge.e4315), (right_anti_dual.e43 * wedge.e4125) + (right_anti_dual.e45 * wedge.e1234)) + (wedge.group0.yzxx * float4(right_anti_dual.group1.zxy, right_anti_dual.e41)) + float4((float3(wedge.e1234) * right_anti_dual.group2.xyz), right_anti_dual.e42 * wedge.e4315), 
            /* e5 */
            -(right_anti_dual.e45 * wedge.e3215) - (right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125)
        );
    }
}
public extension VersorEven {
    public AntiDipoleInversion anti_reject_orthogonally_from(Dipole other) {
        CircleRotor wedge = CircleRotor(
            /* e423, e431, e412 */
            (float3(this.e4) * other.group1.xyz) + (other.group0.xyz.yzx * this.group3.zxy) - (other.group0.xyz.zxy * this.group3.yzx), 
            /* e415, e425, e435, e321 */
            float4((other.e41 * this.e5) + (other.e15 * this.e4), (other.e42 * this.e5) + (other.e25 * this.e4), (other.e43 * this.e5) + (other.e35 * this.e4), -(other.e31 * this.e2) - (other.e12 * this.e3)) - (other.group1.wwwx * this.group3.xyzx), 
            /* e235, e315, e125, e12345 */
            float4((other.e23 * this.e5) + (other.e35 * this.e2), (other.e31 * this.e5) + (other.e15 * this.e3), (other.e12 * this.e5) + (other.e25 * this.e1), -(other.e42 * this.e315) - (other.e43 * this.e125) - (other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435) - (other.e45 * this.e321) - (other.e15 * this.e423) - (other.e25 * this.e431) - (other.e35 * this.e412)) - float4((other.group2.xyz.yzx * this.group3.zxy), other.e41 * this.e235)
        );
        Circle right_anti_dual = Circle(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125 */
            other.group2.xyz * float3(-1.0)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(wedge.e12345) * right_anti_dual.group1, 
            /* e235, e315, e125, e4 */
            float4((float3(wedge.e12345) * right_anti_dual.group2.xyz), -(right_anti_dual.e423 * wedge.e415) - (right_anti_dual.e431 * wedge.e425) - (right_anti_dual.e412 * wedge.e435) - (right_anti_dual.e415 * wedge.e423) - (right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412)), 
            /* e1, e2, e3, e5 */
            float4((right_anti_dual.e412 * wedge.e315) + (right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e315 * wedge.e412), (right_anti_dual.e423 * wedge.e125) + (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e125 * wedge.e423), (right_anti_dual.e431 * wedge.e235) + (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e235 * wedge.e431), -(right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e125 * wedge.e435)) - float4((right_anti_dual.group0.xyz.yzx * wedge.group2.zxy), right_anti_dual.e235 * wedge.e415) - float4((right_anti_dual.group2.xyz.zxy * wedge.group0.xyz.yzx), right_anti_dual.e315 * wedge.e425)
        );
    }
}
public extension VersorEven {
    public AntiDipoleInversion anti_reject_orthogonally_from(DipoleInversion other) {
        CircleRotor wedge = CircleRotor(
            /* e423, e431, e412 */
            (float3(this.e4) * other.group1.xyz) + (other.group0.xyz.yzx * this.group3.zxy) - (other.group0.xyz.zxy * this.group3.yzx), 
            /* e415, e425, e435, e321 */
            float4((other.e41 * this.e5) + (other.e15 * this.e4), (other.e42 * this.e5) + (other.e25 * this.e4), (other.e43 * this.e5) + (other.e35 * this.e4), -(other.e31 * this.e2) - (other.e12 * this.e3)) - (other.group1.wwwx * this.group3.xyzx), 
            /* e235, e315, e125, e12345 */
            (float4(this.e5) * float4(other.group1.xyz, other.e1234)) + (this.group3.yzxx * float4(other.group2.zxy, other.e4235)) + float4(float3(0.0), (other.e4315 * this.e2) + (other.e4125 * this.e3) + (other.e3215 * this.e4) - (other.e42 * this.e315) - (other.e43 * this.e125) - (other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435) - (other.e45 * this.e321) - (other.e15 * this.e423) - (other.e25 * this.e431) - (other.e35 * this.e412)) - float4((other.group2.yzx * this.group3.zxy), other.e41 * this.e235)
        );
        AntiDipoleInversion right_anti_dual = AntiDipoleInversion(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(wedge.e12345) * right_anti_dual.group1, 
            /* e235, e315, e125, e4 */
            float4((float3(wedge.e12345) * right_anti_dual.group2.xyz), (right_anti_dual.e4 * wedge.e12345) - (right_anti_dual.e423 * wedge.e415) - (right_anti_dual.e431 * wedge.e425) - (right_anti_dual.e412 * wedge.e435) - (right_anti_dual.e415 * wedge.e423) - (right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412)), 
            /* e1, e2, e3, e5 */
            float4((right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e315 * wedge.e412) + (right_anti_dual.e1 * wedge.e12345), (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e125 * wedge.e423) + (right_anti_dual.e2 * wedge.e12345), (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e235 * wedge.e431) + (right_anti_dual.e3 * wedge.e12345), -(right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435)) + (wedge.group2.yzxw * float4(right_anti_dual.group0.xyz.zxy, right_anti_dual.e5)) - (wedge.group2.zxyx * float4(right_anti_dual.group0.xyz.yzx, right_anti_dual.e415)) - float4((wedge.group0.xyz.yzx * right_anti_dual.group2.zxy), right_anti_dual.e425 * wedge.e315)
        );
    }
}
public extension VersorEven {
    public AntiFlector anti_reject_orthogonally_from(DualNum other) {
        Flector wedge = Flector(
            /* e15, e25, e35, e45 */
            float4(other.e5) * this.group3, 
            /* e4235, e4315, e4125, e3215 */
            float4(other.e5) * float4(this.group0.xyz, this.e321)
        );
        AntiDualNum right_anti_dual = AntiDualNum(
            /* e3215, scalar */
            other.group0.xy * float2(-1.0)
        );
        return AntiFlector(
            /* e235, e315, e125, e321 */
            float4(right_anti_dual.group0.xy.xx, right_anti_dual.e3215, 0.0) * float4(float3(1.0), 0.0) * float4(wedge.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e1, e2, e3, e5 */
            float4(float3(0.0), right_anti_dual.e3215 * wedge.e45)
        );
    }
}
public extension VersorEven {
    public AntiFlector anti_reject_orthogonally_from(FlatPoint other) {
        Motor wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4(other.e15 * this.e4, other.e25 * this.e4, other.e35 * this.e4, -(other.e25 * this.e431) - (other.e35 * this.e412) - (other.e45 * this.e321)) - (other.group0.wwwx * float4(this.group3.xyz, this.e423)), 
            /* e235, e315, e125, e5 */
            float4(((other.group0.zxy * this.group3.yzx) - (other.group0.yzx * this.group3.zxy)), 0.0)
        );
        AntiFlatPoint right_anti_dual = AntiFlatPoint(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiFlector(
            /* e235, e315, e125, e321 */
            float4(wedge.e12345) * right_anti_dual.group0, 
            /* e1, e2, e3, e5 */
            float4((right_anti_dual.group0.www * wedge.group0.xyz), -(right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435))
        );
    }
}
public extension VersorEven {
    public AntiFlector anti_reject_orthogonally_from(Flector other) {
        Motor wedge = Motor(
            /* e415, e425, e435, e12345 */
            (this.group3.wwwx * float4(other.group0.xyz, other.e4235)) + float4(float3(0.0), (other.e4315 * this.e2) + (other.e4125 * this.e3) + (other.e3215 * this.e4) - (other.e25 * this.e431) - (other.e35 * this.e412) - (other.e45 * this.e321)) - (other.group0.wwwx * float4(this.group3.xyz, this.e423)), 
            /* e235, e315, e125, e5 */
            float4(((other.group0.zxy * this.group3.yzx) - (other.group0.yzx * this.group3.zxy)), 0.0)
        );
        AntiFlector right_anti_dual = AntiFlector(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiFlector(
            /* e235, e315, e125, e321 */
            float4(wedge.e12345) * right_anti_dual.group0, 
            /* e1, e2, e3, e5 */
            float4(right_anti_dual.e1 * wedge.e12345, right_anti_dual.e2 * wedge.e12345, right_anti_dual.e3 * wedge.e12345, -(right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435)) + (wedge.group0 * float4(right_anti_dual.group0.www, right_anti_dual.e5))
        );
    }
}
public extension VersorEven {
    public AntiPlane anti_reject_orthogonally_from(Line other) {
        Plane wedge = Plane(
            /* e4235, e4315, e4125, e3215 */
            float4((other.e425 * this.e3) + (other.e235 * this.e4), (other.e435 * this.e1) + (other.e315 * this.e4), (other.e415 * this.e2) + (other.e125 * this.e4), -(other.e315 * this.e2) - (other.e125 * this.e3)) - (this.group3.yzxx * float4(other.group0.xyz.zxy, other.e235))
        );
        AntiLine right_anti_dual = AntiLine(
            /* e23, e31, e12 */
            other.group0.xyz, 
            /* e15, e25, e35 */
            other.group1.xyz
        );
        return AntiPlane(
            /* e1, e2, e3, e5 */
            float4(right_anti_dual.e12 * wedge.e4315, right_anti_dual.e23 * wedge.e4125, right_anti_dual.e31 * wedge.e4235, -(right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125)) - (wedge.group0.zxyx * float4(right_anti_dual.group0.xyz.yzx, right_anti_dual.e15))
        );
    }
}
public extension VersorEven {
    public AntiFlector anti_reject_orthogonally_from(Motor other) {
        Flector wedge = Flector(
            /* e15, e25, e35, e45 */
            float4(other.e5) * this.group3, 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e235 * this.e4) + (other.e5 * this.e423), (other.e315 * this.e4) + (other.e5 * this.e431), (other.e125 * this.e4) + (other.e5 * this.e412), -(other.e315 * this.e2) - (other.e125 * this.e3)) + float4((other.group0.yzx * this.group3.zxy), other.e5 * this.e321) - (this.group3.yzxx * float4(other.group0.zxy, other.e235))
        );
        AntiMotor right_anti_dual = AntiMotor(
            /* e23, e31, e12, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiFlector(
            /* e235, e315, e125, e321 */
            float4(float3(1.0), 0.0) * float4(right_anti_dual.group1.www, 0.0) * float4(wedge.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e1, e2, e3, e5 */
            float4(float3(0.0), -(right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125)) + float4((right_anti_dual.group0.zxy * wedge.group1.yzx), right_anti_dual.e3215 * wedge.e45) - (wedge.group1.zxyx * float4(right_anti_dual.group0.yzx, right_anti_dual.e15))
        );
    }
}
public extension VersorEven {
    public MultiVector anti_reject_orthogonally_from(MultiVector other) {
        MultiVector wedge = MultiVector(
            /* scalar, e12345 */
            float2(0.0, (other.scalar * this.e12345) + (other.e4235 * this.e1) + (other.e4315 * this.e2) + (other.e4125 * this.e3) + (other.e3215 * this.e4) + (other.e1234 * this.e5) - (other.e15 * this.e423) - (other.e25 * this.e431) - (other.e35 * this.e412) - (other.e45 * this.e321) - (other.e41 * this.e235) - (other.e42 * this.e315) - (other.e43 * this.e125) - (other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435)), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * this.group3, 
            /* e5 */
            other.scalar * this.e5, 
            /* e15, e25, e35, e45 */
            (float4(other.e5) * this.group3) - (float4(this.e5) * other.group1), 
            /* e41, e42, e43 */
            (float3(this.e4) * other.group1.xyz) - (float3(other.e4) * this.group3.xyz), 
            /* e23, e31, e12 */
            (other.group1.zxy * this.group3.yzx) - (other.group1.yzx * this.group3.zxy), 
            /* e415, e425, e435, e321 */
            float4((other.e15 * this.e4) + (other.e41 * this.e5), (other.e25 * this.e4) + (other.e42 * this.e5), (other.e35 * this.e4) + (other.e43 * this.e5), -(other.e31 * this.e2) - (other.e12 * this.e3)) + (float4(other.scalar) * this.group1) - (this.group3.xyzx * float4(other.group3.www, other.e23)), 
            /* e423, e431, e412 */
            (float3(other.scalar) * this.group0.xyz) + (float3(this.e4) * other.group5.xyz) + (other.group4.xyz.yzx * this.group3.zxy) - (other.group4.xyz.zxy * this.group3.yzx), 
            /* e235, e315, e125 */
            (float3(other.scalar) * this.group2.xyz) + (float3(this.e5) * other.group5.xyz) + (other.group3.zxy * this.group3.yzx) - (other.group3.yzx * this.group3.zxy), 
            /* e4235, e4315, e4125, e3215 */
            (float4(other.e5) * float4(this.group0.xyz, this.e321)) + (other.group1.yzxy * float4(this.group1.zxy, this.e315)) + float4((other.group8.xyz * this.group3.www), other.e1 * this.e235) + float4((other.group6.yzx * this.group3.zxy), other.e3 * this.e125) - (other.group6.zxyw * float4(this.group3.yzx, this.e5)) - float4((other.group7.xyz * this.group2.www), other.e235 * this.e1) - float4((other.group1.zxy * this.group1.yzx), other.e315 * this.e2) - float4((other.group1.www * this.group2.xyz), other.e125 * this.e3), 
            /* e1234 */
            (other.e321 * this.e4) + (other.e423 * this.e1) + (other.e431 * this.e2) + (other.e412 * this.e3) - (other.e1 * this.e423) - (other.e2 * this.e431) - (other.e3 * this.e412) - (other.e4 * this.e321)
        );
        MultiVector right_anti_dual = MultiVector(
            /* scalar, e12345 */
            other.group0.xy.yx * float2(-1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215, 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43 */
            other.group7.xyz, 
            /* e23, e31, e12 */
            other.group6.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412 */
            other.group4.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group3.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2((right_anti_dual.scalar * wedge.e12345) + (right_anti_dual.e12345 * wedge.scalar) + (right_anti_dual.e1 * wedge.e4235) + (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) + (right_anti_dual.e4 * wedge.e3215) + (right_anti_dual.e5 * wedge.e1234) + (right_anti_dual.e4235 * wedge.e1) + (right_anti_dual.e4315 * wedge.e2) + (right_anti_dual.e4125 * wedge.e3) + (right_anti_dual.e3215 * wedge.e4) + (right_anti_dual.e1234 * wedge.e5) - (right_anti_dual.e15 * wedge.e423) - (right_anti_dual.e25 * wedge.e431) - (right_anti_dual.e35 * wedge.e412) - (right_anti_dual.e45 * wedge.e321) - (right_anti_dual.e41 * wedge.e235) - (right_anti_dual.e42 * wedge.e315) - (right_anti_dual.e43 * wedge.e125) - (right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e321 * wedge.e45) - (right_anti_dual.e423 * wedge.e15) - (right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43), right_anti_dual.e12345 * wedge.e12345), 
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e15 * wedge.e1234) + (right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e4125 * wedge.e31), (right_anti_dual.e25 * wedge.e1234) + (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e4235 * wedge.e12), (right_anti_dual.e35 * wedge.e1234) + (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e4315 * wedge.e23), -(right_anti_dual.e415 * wedge.e423) - (right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412) - (right_anti_dual.e1234 * wedge.e45)) + (float4(right_anti_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_anti_dual.group1) + (wedge.group9.yzxx * float4(right_anti_dual.group5.xyz.zxy, right_anti_dual.e41)) + float4((wedge.group4.xyz * right_anti_dual.group9.www), right_anti_dual.e45 * wedge.e1234) + float4((right_anti_dual.group7.xyz.zxy * wedge.group8.xyz.yzx), right_anti_dual.e42 * wedge.e4315) + float4((right_anti_dual.group8.xyz.yzx * wedge.group7.xyz.zxy), right_anti_dual.e43 * wedge.e4125) - (right_anti_dual.group9.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((float3(right_anti_dual.e1234) * wedge.group3.xyz), right_anti_dual.e4125 * wedge.e43) - float4((right_anti_dual.group4.xyz * wedge.group9.www), right_anti_dual.e423 * wedge.e415) - float4((right_anti_dual.group5.xyz.yzx * wedge.group9.zxy), right_anti_dual.e431 * wedge.e425) - float4((right_anti_dual.group7.xyz.yzx * wedge.group8.xyz.zxy), right_anti_dual.e412 * wedge.e435) - float4((right_anti_dual.group8.xyz.zxy * wedge.group7.xyz.yzx), right_anti_dual.e4235 * wedge.e41), 
            /* e5 */
            (right_anti_dual.e12345 * wedge.e5) + (right_anti_dual.e5 * wedge.e12345) + (right_anti_dual.e4235 * wedge.e15) + (right_anti_dual.e4315 * wedge.e25) + (right_anti_dual.e4125 * wedge.e35) + (right_anti_dual.e3215 * wedge.e45) - (right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125) - (right_anti_dual.e45 * wedge.e3215) - (right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435), 
            /* e15, e25, e35, e45 */
            float4((right_anti_dual.e415 * wedge.e3215) + (right_anti_dual.e315 * wedge.e4125) + (right_anti_dual.e4125 * wedge.e315) + (right_anti_dual.e3215 * wedge.e415), (right_anti_dual.e425 * wedge.e3215) + (right_anti_dual.e125 * wedge.e4235) + (right_anti_dual.e4235 * wedge.e125) + (right_anti_dual.e3215 * wedge.e425), (right_anti_dual.e435 * wedge.e3215) + (right_anti_dual.e235 * wedge.e4315) + (right_anti_dual.e4315 * wedge.e235) + (right_anti_dual.e3215 * wedge.e435), -(right_anti_dual.e435 * wedge.e4125) - (right_anti_dual.e4235 * wedge.e415) - (right_anti_dual.e4315 * wedge.e425) - (right_anti_dual.e4125 * wedge.e435)) + (float4(right_anti_dual.e12345) * wedge.group3) + (float4(wedge.e12345) * right_anti_dual.group3) - (wedge.group9.yzxx * float4(right_anti_dual.group8.xyz.zxy, right_anti_dual.e415)) - float4((wedge.group8.xyz.zxy * right_anti_dual.group9.yzx), right_anti_dual.e425 * wedge.e4315), 
            /* e41, e42, e43 */
            (float3(right_anti_dual.e12345) * wedge.group4.xyz) + (float3(right_anti_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_anti_dual.group4.xyz) + (float3(wedge.e1234) * right_anti_dual.group6.xyz) + (right_anti_dual.group7.xyz.zxy * wedge.group9.yzx) + (wedge.group7.xyz.zxy * right_anti_dual.group9.yzx) - (right_anti_dual.group7.xyz.yzx * wedge.group9.zxy) - (wedge.group7.xyz.yzx * right_anti_dual.group9.zxy), 
            /* e23, e31, e12 */
            (float3(right_anti_dual.e12345) * wedge.group5.xyz) + (float3(right_anti_dual.e3215) * wedge.group7.xyz) + (float3(right_anti_dual.e1234) * wedge.group8.xyz) + (float3(wedge.e12345) * right_anti_dual.group5.xyz) + (float3(wedge.e3215) * right_anti_dual.group7.xyz) + (float3(wedge.e1234) * right_anti_dual.group8.xyz) - (float3(right_anti_dual.e321) * wedge.group9.xyz) - (float3(wedge.e321) * right_anti_dual.group9.xyz), 
            /* e415, e425, e435, e321 */
            (float4(right_anti_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_anti_dual.group6) + (right_anti_dual.group9.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - float4((right_anti_dual.group9.zxy * wedge.group9.yzx), right_anti_dual.e1234 * wedge.e3215), 
            /* e423, e431, e412 */
            (float3(right_anti_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_anti_dual.group7.xyz) + (float3(wedge.e1234) * right_anti_dual.group9.xyz) - (float3(right_anti_dual.e1234) * wedge.group9.xyz), 
            /* e235, e315, e125 */
            (float3(right_anti_dual.e12345) * wedge.group8.xyz) + (float3(right_anti_dual.e3215) * wedge.group9.xyz) + (float3(wedge.e12345) * right_anti_dual.group8.xyz) - (float3(wedge.e3215) * right_anti_dual.group9.xyz), 
            /* e4235, e4315, e4125, e3215 */
            (float4(right_anti_dual.e12345) * wedge.group9) + (float4(wedge.e12345) * right_anti_dual.group9), 
            /* e1234 */
            (right_anti_dual.e12345 * wedge.e1234) + (right_anti_dual.e1234 * wedge.e12345)
        );
    }
}
public extension VersorEven {
    public AntiPlane anti_reject_orthogonally_from(Plane other) {
        return AntiPlane(
            /* e1, e2, e3, e5 */
            float4((other.e4235 * this.e1) + (other.e4315 * this.e2) + (other.e4125 * this.e3) + (other.e3215 * this.e4)) * float4(other.e4235 * -1.0, other.e4315 * -1.0, other.e4125 * -1.0, other.e3215)
        );
    }
}
public extension VersorEven {
    public AntiDipoleInversion anti_reject_orthogonally_from(RoundPoint other) {
        DipoleInversion wedge = DipoleInversion(
            /* e41, e42, e43 */
            (float3(this.e4) * other.group0.xyz) - (float3(other.e4) * this.group3.xyz), 
            /* e23, e31, e12, e45 */
            float4((other.group0.zxy * this.group3.yzx), other.e5 * this.e4) - (other.group0.yzxw * float4(this.group3.zxy, this.e5)), 
            /* e15, e25, e35, e1234 */
            float4(other.e5 * this.e1, other.e5 * this.e2, other.e5 * this.e3, -(other.e2 * this.e431) - (other.e3 * this.e412) - (other.e4 * this.e321)) - (other.group0.xyzx * float4(this.group2.www, this.e423)), 
            /* e4235, e4315, e4125, e3215 */
            float4(-(other.e3 * this.e425) - (other.e4 * this.e235), -(other.e1 * this.e435) - (other.e4 * this.e315), -(other.e2 * this.e415) - (other.e4 * this.e125), (other.e3 * this.e125) + (other.e5 * this.e321)) + (other.group0.yzxx * float4(this.group1.zxy, this.e235)) + float4((float3(other.e5) * this.group0.xyz), other.e2 * this.e315)
        );
        Sphere right_anti_dual = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            (float3(wedge.e1234) * right_anti_dual.group0.xyz) - (float3(right_anti_dual.e1234) * wedge.group3.xyz), 
            /* e415, e425, e435, e321 */
            (right_anti_dual.group0.yzxw * float4(wedge.group3.zxy, wedge.e1234)) - (wedge.group3.yzxw * float4(right_anti_dual.group0.zxy, right_anti_dual.e1234)), 
            /* e235, e315, e125, e4 */
            float4(wedge.e4235 * right_anti_dual.e3215, wedge.e4315 * right_anti_dual.e3215, wedge.e4125 * right_anti_dual.e3215, -(wedge.e42 * right_anti_dual.e4315) - (wedge.e43 * right_anti_dual.e4125) - (wedge.e45 * right_anti_dual.e1234)) - (right_anti_dual.group0.xyzx * float4(wedge.group3.www, wedge.e41)), 
            /* e1, e2, e3, e5 */
            float4(-(wedge.e12 * right_anti_dual.e4315) - (wedge.e15 * right_anti_dual.e1234), -(wedge.e23 * right_anti_dual.e4125) - (wedge.e25 * right_anti_dual.e1234), -(wedge.e31 * right_anti_dual.e4235) - (wedge.e35 * right_anti_dual.e1234), (wedge.e25 * right_anti_dual.e4315) + (wedge.e35 * right_anti_dual.e4125)) + (float4(right_anti_dual.e3215) * float4(wedge.group0.xyz, wedge.e45)) + (right_anti_dual.group0.zxyx * float4(wedge.group1.yzx, wedge.e15))
        );
    }
}
public extension VersorEven {
    public VersorEven anti_reject_orthogonally_from(Scalar other) {
        VersorEven wedge = VersorEven(
            /* e423, e431, e412, e12345 */
            float4(other.scalar) * this.group0, 
            /* e415, e425, e435, e321 */
            float4(other.scalar) * this.group1, 
            /* e235, e315, e125, e5 */
            float4(other.scalar) * this.group2, 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * this.group3
        );
        AntiScalar right_anti_dual = AntiScalar(
            /* e12345 */
            other.scalar
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(right_anti_dual.e12345) * wedge.group0, 
            /* e415, e425, e435, e321 */
            float4(right_anti_dual.e12345) * wedge.group1, 
            /* e235, e315, e125, e5 */
            float4(right_anti_dual.e12345) * wedge.group2, 
            /* e1, e2, e3, e4 */
            float4(right_anti_dual.e12345) * wedge.group3
        );
    }
}
public extension VersorEven {
    public RoundPoint anti_reject_orthogonally_from(Sphere other) {
        AntiScalar wedge = AntiScalar(
            /* e12345 */
            (other.e4235 * this.e1) + (other.e4315 * this.e2) + (other.e4125 * this.e3) + (other.e3215 * this.e4) + (other.e1234 * this.e5)
        );
        RoundPoint right_anti_dual = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(other.group0.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215
        );
        return RoundPoint(
            /* e1, e2, e3, e4 */
            float4(wedge.e12345) * right_anti_dual.group0, 
            /* e5 */
            wedge.e12345 * right_anti_dual.e5
        );
    }
}
public extension VersorEven {
    public AntiDipoleInversion anti_reject_orthogonally_from(VersorEven other) {
        DipoleInversion wedge = DipoleInversion(
            /* e41, e42, e43 */
            (float3(this.e4) * other.group3.xyz) - (float3(other.e4) * this.group3.xyz), 
            /* e23, e31, e12, e45 */
            (this.group3.yzxw * float4(other.group3.zxy, other.e5)) - (other.group3.yzxw * float4(this.group3.zxy, this.e5)), 
            /* e15, e25, e35, e1234 */
            (this.group3.xyzx * float4(other.group2.www, other.e423)) + float4(float3(0.0), (other.e431 * this.e2) + (other.e412 * this.e3) + (other.e321 * this.e4) - (other.e2 * this.e431) - (other.e3 * this.e412) - (other.e4 * this.e321)) - (other.group3.xyzx * float4(this.group2.www, this.e423)), 
            /* e4235, e4315, e4125, e3215 */
            (other.group3.yzxz * float4(this.group1.zxy, this.e125)) + float4((other.group1.yzx * this.group3.zxy), other.e5 * this.e321) + float4((other.group2.www * this.group0.xyz), other.e2 * this.e315) + float4((this.group3.www * other.group2.xyz), other.e1 * this.e235) - (float4(this.e5) * float4(other.group0.xyz, other.e321)) - (this.group3.yzxx * float4(other.group1.zxy, other.e235)) - float4((other.group3.zxy * this.group1.yzx), other.e315 * this.e2) - float4((other.group3.www * this.group2.xyz), other.e125 * this.e3)
        );
        VersorOdd right_anti_dual = VersorOdd(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion(
            /* e423, e431, e412 */
            (float3(wedge.e1234) * right_anti_dual.group3.xyz) - (float3(right_anti_dual.e1234) * wedge.group3.xyz), 
            /* e415, e425, e435, e321 */
            (right_anti_dual.group3.yzxw * float4(wedge.group3.zxy, wedge.e1234)) - (wedge.group3.yzxw * float4(right_anti_dual.group3.zxy, right_anti_dual.e1234)), 
            /* e235, e315, e125, e4 */
            float4(float3(0.0), (wedge.e4235 * right_anti_dual.e41) + (wedge.e4315 * right_anti_dual.e42) + (wedge.e4125 * right_anti_dual.e43) - (wedge.e42 * right_anti_dual.e4315) - (wedge.e43 * right_anti_dual.e4125) - (wedge.e45 * right_anti_dual.e1234)) + float4((right_anti_dual.group3.www * wedge.group3.xyz), wedge.e1234 * right_anti_dual.e45) - (right_anti_dual.group3.xyzx * float4(wedge.group3.www, wedge.e41)), 
            /* e1, e2, e3, e5 */
            (float4(right_anti_dual.e3215) * float4(wedge.group0.xyz, wedge.e45)) + (wedge.group2.wwwy * float4(right_anti_dual.group2.xyz, right_anti_dual.e4315)) + (right_anti_dual.group3.zxyx * float4(wedge.group1.yzx, wedge.e15)) + float4((wedge.group3.yzx * right_anti_dual.group1.zxy), wedge.e35 * right_anti_dual.e4125) - (float4(wedge.e3215) * float4(right_anti_dual.group0.xyz, right_anti_dual.e45)) - (wedge.group3.zxyz * float4(right_anti_dual.group1.yzx, right_anti_dual.e35)) - (right_anti_dual.group2.wwwy * float4(wedge.group2.xyz, wedge.e4315)) - float4((wedge.group1.zxy * right_anti_dual.group3.yzx), wedge.e4235 * right_anti_dual.e15)
        );
    }
}
public extension VersorEven {
    public VersorEven anti_reject_orthogonally_from(VersorOdd other) {
        VersorEven wedge = VersorEven(
            /* e423, e431, e412, e12345 */
            (float4(other.scalar) * this.group0) + (this.group3.wwwx * float4(other.group1.xyz, other.e4235)) + float4(float3(0.0), (this.e2 * other.e4315) + (this.e3 * other.e4125) + (this.e4 * other.e3215) - (this.e431 * other.e25) - (this.e412 * other.e35) - (this.e415 * other.e23) - (this.e425 * other.e31) - (this.e435 * other.e12) - (this.e321 * other.e45) - (this.e235 * other.e41) - (this.e315 * other.e42) - (this.e125 * other.e43)) + float4((this.group3.zxy * other.group0.yzx), this.e5 * other.e1234) - float4((this.group3.yzx * other.group0.zxy), this.e423 * other.e15), 
            /* e415, e425, e435, e321 */
            float4((this.e5 * other.e41) + (this.e4 * other.e15), (this.e5 * other.e42) + (this.e4 * other.e25), (this.e5 * other.e43) + (this.e4 * other.e35), -(this.e2 * other.e31) - (this.e3 * other.e12)) + (float4(other.scalar) * this.group1) - (this.group3.xyzx * other.group1.wwwx), 
            /* e235, e315, e125, e5 */
            float4(((float3(this.e5) * other.group1.xyz) + (float3(other.scalar) * this.group2.xyz) + (this.group3.yzx * other.group2.zxy) - (this.group3.zxy * other.group2.yzx)), this.e5 * other.scalar), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * this.group3
        );
        VersorEven right_anti_dual = VersorEven(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven(
            /* e423, e431, e412, e12345 */
            float4(((float3(right_anti_dual.e12345) * wedge.group0.xyz) + (float3(wedge.e12345) * right_anti_dual.group0.xyz)), right_anti_dual.e12345 * wedge.e12345), 
            /* e415, e425, e435, e321 */
            (float4(right_anti_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_anti_dual.group1), 
            /* e235, e315, e125, e5 */
            (float4(right_anti_dual.e12345) * wedge.group2) + (float4(wedge.e12345) * right_anti_dual.group2) + float4(float3(0.0), -(right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435)), 
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e315 * wedge.e412) + (right_anti_dual.e1 * wedge.e12345), (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e125 * wedge.e423) + (right_anti_dual.e2 * wedge.e12345), (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e235 * wedge.e431) + (right_anti_dual.e3 * wedge.e12345), -(right_anti_dual.e412 * wedge.e435) - (right_anti_dual.e415 * wedge.e423) - (right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412)) + (right_anti_dual.group0.zxyw * float4(wedge.group2.yzx, wedge.e4)) + float4((right_anti_dual.group0.www * wedge.group3.xyz), right_anti_dual.e4 * wedge.e12345) - (right_anti_dual.group0.yzxx * float4(wedge.group2.zxy, wedge.e415)) - float4((right_anti_dual.group2.zxy * wedge.group0.yzx), right_anti_dual.e431 * wedge.e425)
        );
    }
}
public extension VersorOdd {
    // Fancy infix trick (first half)
    public AntiRejectOrthogonallyFromInfixPartial<VersorOdd> operator /(AntiRejectOrthogonallyFromInfix rhs) {
        return AntiRejectOrthogonallyFromInfixPartial<VersorOdd>(this);
    }
}
public extension AntiRejectOrthogonallyFromInfixPartial<VersorOdd> {
    // Fancy infix trick (second half)
    public VersorOdd operator /(AntiCircleRotor rhs) {
        return this.a.anti_reject_orthogonally_from(rhs);
    }
}
public extension VersorOdd {
    public VersorOdd anti_reject_orthogonally_from(AntiCircleRotor other) {
        VersorOdd wedge = VersorOdd(
            /* e41, e42, e43, scalar */
            float4(((float3(other.scalar) * this.group0.xyz) + (float3(this.scalar) * other.group0.xyz)), other.scalar * this.scalar), 
            /* e23, e31, e12, e45 */
            (float4(other.scalar) * this.group1) + (float4(this.scalar) * other.group1), 
            /* e15, e25, e35, e1234 */
            float4(other.scalar * this.e15, other.scalar * this.e25, other.scalar * this.e35, -(other.e41 * this.e23) - (other.e42 * this.e31) - (other.e43 * this.e12) - (other.e23 * this.e41) - (other.e31 * this.e42) - (other.e12 * this.e43)) + (other.group2 * float4(this.group0.www, this.e1234)), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e23 * this.e45) + (other.e45 * this.e23) + (other.e35 * this.e42) + (other.scalar * this.e4235), (other.e31 * this.e45) + (other.e45 * this.e31) + (other.e15 * this.e43) + (other.scalar * this.e4315), (other.e12 * this.e45) + (other.e45 * this.e12) + (other.e25 * this.e41) + (other.scalar * this.e4125), -(other.e12 * this.e35) - (other.e15 * this.e23) - (other.e25 * this.e31) - (other.e35 * this.e12)) + float4((other.group0.xyz.yzx * this.group2.zxy), other.scalar * this.e3215) - (this.group2.yzxx * float4(other.group0.xyz.zxy, other.e23)) - float4((other.group2.yzx * this.group0.zxy), other.e31 * this.e25)
        );
        CircleRotor right_anti_dual = CircleRotor(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4((right_anti_dual.e415 * wedge.e1234) + (right_anti_dual.e12345 * wedge.e41), (right_anti_dual.e425 * wedge.e1234) + (right_anti_dual.e12345 * wedge.e42), (right_anti_dual.e435 * wedge.e1234) + (right_anti_dual.e12345 * wedge.e43), -(right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e321 * wedge.e45) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43)) + float4((right_anti_dual.group0.xyz.zxy * wedge.group3.yzx), right_anti_dual.e12345 * wedge.scalar) - float4((right_anti_dual.group0.xyz.yzx * wedge.group3.zxy), right_anti_dual.e423 * wedge.e15), 
            /* e23, e31, e12, e45 */
            float4((right_anti_dual.e235 * wedge.e1234) + (right_anti_dual.e12345 * wedge.e23), (right_anti_dual.e315 * wedge.e1234) + (right_anti_dual.e12345 * wedge.e31), (right_anti_dual.e125 * wedge.e1234) + (right_anti_dual.e12345 * wedge.e12), -(right_anti_dual.e425 * wedge.e4315) - (right_anti_dual.e435 * wedge.e4125)) + float4((right_anti_dual.group0.xyz * wedge.group3.www), right_anti_dual.e12345 * wedge.e45) - (right_anti_dual.group1.wwwx * wedge.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_anti_dual.e12345) * wedge.group2.xyz) + (float3(wedge.e3215) * right_anti_dual.group1.xyz) + (right_anti_dual.group2.yzx * wedge.group3.zxy) - (right_anti_dual.group2.zxy * wedge.group3.yzx)), right_anti_dual.e12345 * wedge.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_anti_dual.e12345) * wedge.group3
        );
    }
}
public extension VersorOdd {
    public VersorOdd anti_reject_orthogonally_from(AntiDipoleInversion other) {
        VersorEven wedge = VersorEven(
            /* e423, e431, e412, e12345 */
            (other.group3.zxyy * float4(this.group0.yzx, this.e4315)) + float4(float3(0.0), (other.e3 * this.e4125) + (other.e5 * this.e1234) - (other.e431 * this.e25) - (other.e412 * this.e35) - (other.e415 * this.e23) - (other.e425 * this.e31) - (other.e435 * this.e12) - (other.e321 * this.e45) - (other.e235 * this.e41) - (other.e315 * this.e42) - (other.e125 * this.e43)) + float4((other.group0.xyz * this.group0.www), other.e4 * this.e3215) + float4((other.group2.www * this.group1.xyz), other.e1 * this.e4235) - float4((other.group3.yzx * this.group0.zxy), other.e423 * this.e15), 
            /* e415, e425, e435, e321 */
            float4((other.e4 * this.e15) + (other.e5 * this.e41), (other.e4 * this.e25) + (other.e5 * this.e42), (other.e4 * this.e35) + (other.e5 * this.e43), -(other.e2 * this.e31) - (other.e3 * this.e12)) + (float4(this.scalar) * other.group1) - (other.group3.xyzx * this.group1.wwwx), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.e5) * this.group1.xyz) + (float3(this.scalar) * other.group2.xyz) + (other.group3.yzx * this.group2.zxy) - (other.group3.zxy * this.group2.yzx)), other.e5 * this.scalar), 
            /* e1, e2, e3, e4 */
            float4(this.scalar) * float4(other.group3.xyz, other.e4)
        );
        DipoleInversion right_anti_dual = DipoleInversion(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            (right_anti_dual.group3.yzxy * float4(wedge.group0.zxy, wedge.e2)) + float4(float3(0.0), (right_anti_dual.e4125 * wedge.e3) + (right_anti_dual.e3215 * wedge.e4) - (right_anti_dual.e42 * wedge.e315) - (right_anti_dual.e43 * wedge.e125) - (right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435) - (right_anti_dual.e45 * wedge.e321) - (right_anti_dual.e15 * wedge.e423) - (right_anti_dual.e25 * wedge.e431) - (right_anti_dual.e35 * wedge.e412)) + float4((right_anti_dual.group0.xyz * wedge.group0.www), right_anti_dual.e1234 * wedge.e5) + float4((right_anti_dual.group2.www * wedge.group1.xyz), right_anti_dual.e4235 * wedge.e1) - float4((right_anti_dual.group3.zxy * wedge.group0.yzx), right_anti_dual.e41 * wedge.e235), 
            /* e23, e31, e12, e45 */
            float4((right_anti_dual.e1234 * wedge.e235) + (right_anti_dual.e3215 * wedge.e423), (right_anti_dual.e1234 * wedge.e315) + (right_anti_dual.e3215 * wedge.e431), (right_anti_dual.e1234 * wedge.e125) + (right_anti_dual.e3215 * wedge.e412), -(right_anti_dual.e4315 * wedge.e425) - (right_anti_dual.e4125 * wedge.e435)) + (float4(wedge.e12345) * right_anti_dual.group1) - (right_anti_dual.group3.xyzx * wedge.group1.wwwx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_anti_dual.e3215) * wedge.group1.xyz) + (float3(wedge.e12345) * right_anti_dual.group2.xyz) + (right_anti_dual.group3.zxy * wedge.group2.yzx) - (right_anti_dual.group3.yzx * wedge.group2.zxy)), right_anti_dual.e1234 * wedge.e12345), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_anti_dual.group3
        );
    }
}
public extension VersorOdd {
    public VersorOdd anti_reject_orthogonally_from(AntiDualNum other) {
        VersorOdd wedge = VersorOdd(
            /* e41, e42, e43, scalar */
            float4(other.scalar) * this.group0, 
            /* e23, e31, e12, e45 */
            float4(other.scalar) * this.group1, 
            /* e15, e25, e35, e1234 */
            float4(other.scalar) * this.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xy.yy, other.scalar, (other.e3215 * this.scalar) + (other.scalar * this.e3215)) * float4(this.group3.xyz, 1.0)
        );
        DualNum right_anti_dual = DualNum(
            /* e5, e12345 */
            other.group0.xy
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(right_anti_dual.group0.xy.yy, right_anti_dual.e12345, (right_anti_dual.e5 * wedge.e1234) + (right_anti_dual.e12345 * wedge.scalar)) * float4(wedge.group0.xyz, 1.0), 
            /* e23, e31, e12, e45 */
            float4(right_anti_dual.e12345) * wedge.group1, 
            /* e15, e25, e35, e1234 */
            float4(right_anti_dual.e12345) * wedge.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(right_anti_dual.e12345) * wedge.group3
        );
    }
}
public extension VersorOdd {
    public AntiCircleRotor anti_reject_orthogonally_from(AntiFlatPoint other) {
        CircleRotor wedge = CircleRotor(
            /* e423, e431, e412 */
            float3(0.0), 
            /* e415, e425, e435, e321 */
            float4(float3(0.0), other.e321 * this.scalar), 
            /* e235, e315, e125, e12345 */
            float4((float3(this.scalar) * other.group0.xyz), -(other.e235 * this.e41) - (other.e315 * this.e42) - (other.e125 * this.e43) - (other.e321 * this.e45))
        );
        FlatPoint right_anti_dual = FlatPoint(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiCircleRotor(
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12, e45 */
            float4(float3(0.0), wedge.e12345 * right_anti_dual.e45), 
            /* e15, e25, e35, scalar */
            float4((wedge.group2.www * right_anti_dual.group0.xyz), -(wedge.e423 * right_anti_dual.e15) - (wedge.e431 * right_anti_dual.e25) - (wedge.e412 * right_anti_dual.e35) - (wedge.e321 * right_anti_dual.e45))
        );
    }
}
public extension VersorOdd {
    public VersorOdd anti_reject_orthogonally_from(AntiFlector other) {
        VersorEven wedge = VersorEven(
            /* e423, e431, e412, e12345 */
            (other.group1.zxyx * float4(this.group0.yzx, this.e4235)) + float4(float3(0.0), (other.e2 * this.e4315) + (other.e3 * this.e4125) + (other.e5 * this.e1234) - (other.e315 * this.e42) - (other.e125 * this.e43) - (other.e321 * this.e45)) - (this.group0.zxyx * float4(other.group1.yzx, other.e235)), 
            /* e415, e425, e435, e321 */
            (this.group0 * float4(other.group1.www, other.e321)) + float4(float3(0.0), -(other.e2 * this.e31) - (other.e3 * this.e12)) - (other.group1.xyzx * this.group1.wwwx), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.e5) * this.group1.xyz) + (float3(this.scalar) * other.group0.xyz) + (other.group1.yzx * this.group2.zxy) - (other.group1.zxy * this.group2.yzx)), other.e5 * this.scalar), 
            /* e1, e2, e3, e4 */
            float4(float3(1.0), 0.0) * float4(this.group0.www, 0.0) * float4(other.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        Flector right_anti_dual = Flector(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            (right_anti_dual.group1.yzxx * float4(wedge.group0.zxy, wedge.e1)) + float4(float3(0.0), (right_anti_dual.e4315 * wedge.e2) + (right_anti_dual.e4125 * wedge.e3) + (right_anti_dual.e3215 * wedge.e4) - (right_anti_dual.e25 * wedge.e431) - (right_anti_dual.e35 * wedge.e412) - (right_anti_dual.e45 * wedge.e321)) - (wedge.group0.yzxx * float4(right_anti_dual.group1.zxy, right_anti_dual.e15)), 
            /* e23, e31, e12, e45 */
            (wedge.group0 * float4(right_anti_dual.group1.www, right_anti_dual.e45)) + float4(float3(0.0), -(right_anti_dual.e4315 * wedge.e425) - (right_anti_dual.e4125 * wedge.e435)) - (right_anti_dual.group1.xyzx * wedge.group1.wwwx), 
            /* e15, e25, e35, e1234 */
            float4((float3(right_anti_dual.e3215) * wedge.group1.xyz), 0.0) + float4((float3(wedge.e12345) * right_anti_dual.group0.xyz), 0.0) + float4((right_anti_dual.group1.zxy * wedge.group2.yzx), 0.0) - float4((right_anti_dual.group1.yzx * wedge.group2.zxy), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_anti_dual.group1
        );
    }
}
public extension VersorOdd {
    public AntiCircleRotor anti_reject_orthogonally_from(AntiLine other) {
        DipoleInversion wedge = DipoleInversion(
            /* e41, e42, e43 */
            float3(0.0), 
            /* e23, e31, e12, e45 */
            float4(float3(1.0), 0.0) * float4(other.group0.xyz, 0.0) * float4(this.group0.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e15, e25, e35, e1234 */
            float4((float3(this.scalar) * other.group1.xyz), -(other.e23 * this.e41) - (other.e31 * this.e42) - (other.e12 * this.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e23 * this.e45) + (other.e35 * this.e42), (other.e31 * this.e45) + (other.e15 * this.e43), (other.e12 * this.e45) + (other.e25 * this.e41), -(other.e31 * this.e25) - (other.e12 * this.e35) - (other.e15 * this.e23) - (other.e25 * this.e31) - (other.e35 * this.e12)) - float4((other.group1.xyz.yzx * this.group0.zxy), other.e23 * this.e15)
        );
        Line right_anti_dual = Line(
            /* e415, e425, e435 */
            other.group0.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group1.xyz * float3(-1.0)
        );
        return AntiCircleRotor(
            /* e41, e42, e43 */
            float3(wedge.e1234) * right_anti_dual.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4((float3(wedge.e1234) * right_anti_dual.group1.xyz), -(wedge.e4235 * right_anti_dual.e415) - (wedge.e4315 * right_anti_dual.e425) - (wedge.e4125 * right_anti_dual.e435)), 
            /* e15, e25, e35, scalar */
            float4((wedge.e4125 * right_anti_dual.e315) + (wedge.e3215 * right_anti_dual.e415), (wedge.e4235 * right_anti_dual.e125) + (wedge.e3215 * right_anti_dual.e425), (wedge.e4315 * right_anti_dual.e235) + (wedge.e3215 * right_anti_dual.e435), -(wedge.e42 * right_anti_dual.e315) - (wedge.e43 * right_anti_dual.e125) - (wedge.e23 * right_anti_dual.e415) - (wedge.e31 * right_anti_dual.e425) - (wedge.e12 * right_anti_dual.e435)) - float4((right_anti_dual.group1.xyz.zxy * wedge.group3.yzx), wedge.e41 * right_anti_dual.e235)
        );
    }
}
public extension VersorOdd {
    public VersorOdd anti_reject_orthogonally_from(AntiMotor other) {
        VersorOdd wedge = VersorOdd(
            /* e41, e42, e43, scalar */
            float4(other.scalar) * this.group0, 
            /* e23, e31, e12, e45 */
            float4(((float3(other.scalar) * this.group1.xyz) + (float3(this.scalar) * other.group0.xyz)), other.scalar * this.e45), 
            /* e15, e25, e35, e1234 */
            float4(other.e15 * this.scalar, other.e25 * this.scalar, other.e35 * this.scalar, -(other.e23 * this.e41) - (other.e31 * this.e42) - (other.e12 * this.e43)) + (float4(other.scalar) * this.group2), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.e35 * this.e42, other.e15 * this.e43, other.e25 * this.e41, -(other.e31 * this.e25) - (other.e12 * this.e35) - (other.e15 * this.e23) - (other.e25 * this.e31) - (other.e35 * this.e12)) + (other.group0 * float4(this.group1.www, this.e3215)) + float4((other.group0.www * this.group3.xyz), other.e3215 * this.scalar) - float4((other.group1.yzx * this.group0.zxy), other.e23 * this.e15)
        );
        Motor right_anti_dual = Motor(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            (right_anti_dual.group0 * float4(wedge.group2.www, wedge.scalar)) + float4(float3(0.0), -(right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43)) + float4((right_anti_dual.group0.www * wedge.group0.xyz), right_anti_dual.e5 * wedge.e1234), 
            /* e23, e31, e12, e45 */
            float4(right_anti_dual.e235 * wedge.e1234, right_anti_dual.e315 * wedge.e1234, right_anti_dual.e125 * wedge.e1234, -(right_anti_dual.e415 * wedge.e4235) - (right_anti_dual.e425 * wedge.e4315) - (right_anti_dual.e435 * wedge.e4125)) + (float4(right_anti_dual.e12345) * wedge.group1), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_anti_dual.e12345) * wedge.group2.xyz) + (float3(wedge.e3215) * right_anti_dual.group0.xyz) + (right_anti_dual.group1.yzx * wedge.group3.zxy) - (right_anti_dual.group1.zxy * wedge.group3.yzx)), right_anti_dual.e12345 * wedge.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_anti_dual.e12345) * wedge.group3
        );
    }
}
public extension VersorOdd {
    public VersorOdd anti_reject_orthogonally_from(AntiPlane other) {
        VersorEven wedge = VersorEven(
            /* e423, e431, e412, e12345 */
            float4(other.e2 * this.e43 * -1.0, other.e3 * this.e41 * -1.0, other.e1 * this.e42 * -1.0, (other.e2 * this.e4315) + (other.e3 * this.e4125) + (other.e5 * this.e1234)) + (other.group0.zxyx * float4(this.group0.yzx, this.e4235)), 
            /* e415, e425, e435, e321 */
            float4(other.e5 * this.e41, other.e5 * this.e42, other.e5 * this.e43, -(other.e2 * this.e31) - (other.e3 * this.e12)) - (other.group0.xyzx * this.group1.wwwx), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.e5) * this.group1.xyz) + (other.group0.yzx * this.group2.zxy) - (other.group0.zxy * this.group2.yzx)), other.e5 * this.scalar), 
            /* e1, e2, e3, e4 */
            float4(float3(1.0), 0.0) * float4(this.group0.www, 0.0) * float4(other.group0.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        Plane right_anti_dual = Plane(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(right_anti_dual.e4125 * wedge.e431 * -1.0, right_anti_dual.e4235 * wedge.e412 * -1.0, right_anti_dual.e4315 * wedge.e423 * -1.0, (right_anti_dual.e4315 * wedge.e2) + (right_anti_dual.e4125 * wedge.e3) + (right_anti_dual.e3215 * wedge.e4)) + (right_anti_dual.group0.yzxx * float4(wedge.group0.zxy, wedge.e1)), 
            /* e23, e31, e12, e45 */
            float4(right_anti_dual.e3215 * wedge.e423, right_anti_dual.e3215 * wedge.e431, right_anti_dual.e3215 * wedge.e412, -(right_anti_dual.e4315 * wedge.e425) - (right_anti_dual.e4125 * wedge.e435)) - (right_anti_dual.group0.xyzx * wedge.group1.wwwx), 
            /* e15, e25, e35, e1234 */
            float4((float3(right_anti_dual.e3215) * wedge.group1.xyz), 0.0) + float4((right_anti_dual.group0.zxy * wedge.group2.yzx), 0.0) - float4((right_anti_dual.group0.yzx * wedge.group2.zxy), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_anti_dual.group0
        );
    }
}
public extension VersorOdd {
    public Scalar anti_reject_orthogonally_from(AntiScalar other) {
        return Scalar(
            /* scalar */
            pow(other.e12345, 2) * this.scalar * -1.0
        );
    }
}
public extension VersorOdd {
    public AntiCircleRotor anti_reject_orthogonally_from(Circle other) {
        CircleRotor wedge = CircleRotor(
            /* e423, e431, e412 */
            float3(this.scalar) * other.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(this.scalar) * other.group1, 
            /* e235, e315, e125, e12345 */
            float4((float3(this.scalar) * other.group2.xyz), -(other.e423 * this.e15) - (other.e431 * this.e25) - (other.e412 * this.e35) - (other.e415 * this.e23) - (other.e425 * this.e31) - (other.e435 * this.e12) - (other.e321 * this.e45) - (other.e235 * this.e41) - (other.e315 * this.e42) - (other.e125 * this.e43))
        );
        Dipole right_anti_dual = Dipole(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35 */
            other.group2.xyz
        );
        return AntiCircleRotor(
            /* e41, e42, e43 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(wedge.e12345) * right_anti_dual.group1, 
            /* e15, e25, e35, scalar */
            float4((float3(wedge.e12345) * right_anti_dual.group2.xyz), -(wedge.e423 * right_anti_dual.e15) - (wedge.e431 * right_anti_dual.e25) - (wedge.e412 * right_anti_dual.e35) - (wedge.e415 * right_anti_dual.e23) - (wedge.e425 * right_anti_dual.e31) - (wedge.e435 * right_anti_dual.e12) - (wedge.e321 * right_anti_dual.e45) - (wedge.e235 * right_anti_dual.e41) - (wedge.e315 * right_anti_dual.e42) - (wedge.e125 * right_anti_dual.e43))
        );
    }
}
public extension VersorOdd {
    public AntiCircleRotor anti_reject_orthogonally_from(CircleRotor other) {
        CircleRotor wedge = CircleRotor(
            /* e423, e431, e412 */
            float3(this.scalar) * other.group0.xyz, 
            /* e415, e425, e435, e321 */
            float4(this.scalar) * other.group1, 
            /* e235, e315, e125, e12345 */
            float4((float3(this.scalar) * other.group2.xyz), (other.e12345 * this.scalar) - (other.e423 * this.e15) - (other.e431 * this.e25) - (other.e412 * this.e35) - (other.e415 * this.e23) - (other.e425 * this.e31) - (other.e435 * this.e12) - (other.e321 * this.e45) - (other.e235 * this.e41) - (other.e315 * this.e42) - (other.e125 * this.e43))
        );
        AntiCircleRotor right_anti_dual = AntiCircleRotor(
            /* e41, e42, e43 */
            other.group0.xyz, 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiCircleRotor(
            /* e41, e42, e43 */
            float3(wedge.e12345) * right_anti_dual.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(wedge.e12345) * right_anti_dual.group1, 
            /* e15, e25, e35, scalar */
            float4((float3(wedge.e12345) * right_anti_dual.group2.xyz), (right_anti_dual.scalar * wedge.e12345) - (right_anti_dual.e41 * wedge.e235) - (right_anti_dual.e42 * wedge.e315) - (right_anti_dual.e43 * wedge.e125) - (right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435) - (right_anti_dual.e45 * wedge.e321) - (right_anti_dual.e15 * wedge.e423) - (right_anti_dual.e25 * wedge.e431) - (right_anti_dual.e35 * wedge.e412))
        );
    }
}
public extension VersorOdd {
    public AntiCircleRotor anti_reject_orthogonally_from(Dipole other) {
        DipoleInversion wedge = DipoleInversion(
            /* e41, e42, e43 */
            float3(this.scalar) * other.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(this.scalar) * other.group1, 
            /* e15, e25, e35, e1234 */
            float4((float3(this.scalar) * other.group2.xyz), -(other.e41 * this.e23) - (other.e42 * this.e31) - (other.e43 * this.e12) - (other.e23 * this.e41) - (other.e31 * this.e42) - (other.e12 * this.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e42 * this.e35) + (other.e23 * this.e45) + (other.e45 * this.e23) + (other.e35 * this.e42), (other.e43 * this.e15) + (other.e31 * this.e45) + (other.e45 * this.e31) + (other.e15 * this.e43), (other.e41 * this.e25) + (other.e12 * this.e45) + (other.e45 * this.e12) + (other.e25 * this.e41), -(other.e23 * this.e15) - (other.e31 * this.e25) - (other.e12 * this.e35) - (other.e35 * this.e12)) - float4((other.group0.xyz.zxy * this.group2.yzx), other.e15 * this.e23) - float4((other.group2.xyz.yzx * this.group0.zxy), other.e25 * this.e31)
        );
        Circle right_anti_dual = Circle(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125 */
            other.group2.xyz * float3(-1.0)
        );
        return AntiCircleRotor(
            /* e41, e42, e43 */
            (float3(wedge.e1234) * right_anti_dual.group1.xyz) + (right_anti_dual.group0.xyz.zxy * wedge.group3.yzx) - (right_anti_dual.group0.xyz.yzx * wedge.group3.zxy), 
            /* e23, e31, e12, e45 */
            float4((right_anti_dual.e423 * wedge.e3215) + (right_anti_dual.e235 * wedge.e1234), (right_anti_dual.e431 * wedge.e3215) + (right_anti_dual.e315 * wedge.e1234), (right_anti_dual.e412 * wedge.e3215) + (right_anti_dual.e125 * wedge.e1234), -(right_anti_dual.e425 * wedge.e4315) - (right_anti_dual.e435 * wedge.e4125)) - (right_anti_dual.group1.wwwx * wedge.group3.xyzx), 
            /* e15, e25, e35, scalar */
            float4((right_anti_dual.e415 * wedge.e3215) + (right_anti_dual.e315 * wedge.e4125), (right_anti_dual.e425 * wedge.e3215) + (right_anti_dual.e125 * wedge.e4235), (right_anti_dual.e435 * wedge.e3215) + (right_anti_dual.e235 * wedge.e4315), -(right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e321 * wedge.e45) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43)) - float4((right_anti_dual.group2.xyz.zxy * wedge.group3.yzx), right_anti_dual.e423 * wedge.e15)
        );
    }
}
public extension VersorOdd {
    public AntiCircleRotor anti_reject_orthogonally_from(DipoleInversion other) {
        DipoleInversion wedge = DipoleInversion(
            /* e41, e42, e43 */
            float3(this.scalar) * other.group0.xyz, 
            /* e23, e31, e12, e45 */
            float4(this.scalar) * other.group1, 
            /* e15, e25, e35, e1234 */
            float4((float3(this.scalar) * other.group2.xyz), (other.e1234 * this.scalar) - (other.e41 * this.e23) - (other.e42 * this.e31) - (other.e43 * this.e12) - (other.e23 * this.e41) - (other.e31 * this.e42) - (other.e12 * this.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e23 * this.e45) + (other.e45 * this.e23) + (other.e35 * this.e42) + (other.e4235 * this.scalar), (other.e31 * this.e45) + (other.e45 * this.e31) + (other.e15 * this.e43) + (other.e4315 * this.scalar), (other.e12 * this.e45) + (other.e45 * this.e12) + (other.e25 * this.e41) + (other.e4125 * this.scalar), -(other.e12 * this.e35) - (other.e15 * this.e23) - (other.e25 * this.e31) - (other.e35 * this.e12)) + float4((other.group0.xyz.yzx * this.group2.zxy), other.e3215 * this.scalar) - (this.group2.yzxx * float4(other.group0.xyz.zxy, other.e23)) - float4((other.group2.yzx * this.group0.zxy), other.e31 * this.e25)
        );
        AntiDipoleInversion right_anti_dual = AntiDipoleInversion(
            /* e423, e431, e412 */
            other.group0.xyz * float3(-1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiCircleRotor(
            /* e41, e42, e43 */
            (float3(wedge.e1234) * right_anti_dual.group1.xyz) + (right_anti_dual.group0.xyz.zxy * wedge.group3.yzx) - (right_anti_dual.group0.xyz.yzx * wedge.group3.zxy), 
            /* e23, e31, e12, e45 */
            float4((right_anti_dual.e423 * wedge.e3215) + (right_anti_dual.e235 * wedge.e1234), (right_anti_dual.e431 * wedge.e3215) + (right_anti_dual.e315 * wedge.e1234), (right_anti_dual.e412 * wedge.e3215) + (right_anti_dual.e125 * wedge.e1234), -(right_anti_dual.e425 * wedge.e4315) - (right_anti_dual.e435 * wedge.e4125)) - (right_anti_dual.group1.wwwx * wedge.group3.xyzx), 
            /* e15, e25, e35, scalar */
            (float4(wedge.e3215) * float4(right_anti_dual.group1.xyz, right_anti_dual.e4)) + (wedge.group3.zxyx * float4(right_anti_dual.group2.yzx, right_anti_dual.e1)) + float4(float3(0.0), (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) + (right_anti_dual.e5 * wedge.e1234) - (right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e321 * wedge.e45) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43)) - float4((right_anti_dual.group2.zxy * wedge.group3.yzx), right_anti_dual.e423 * wedge.e15)
        );
    }
}
public extension VersorOdd {
    public AntiMotor anti_reject_orthogonally_from(DualNum other) {
        Motor wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4(other.group0.xy.xx, other.e5, (other.e5 * this.e1234) + (other.e12345 * this.scalar)) * float4(this.group0.xyz, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.e5) * float4(this.group1.xyz, this.scalar)
        );
        AntiDualNum right_anti_dual = AntiDualNum(
            /* e3215, scalar */
            other.group0.xy * float2(-1.0)
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4(float3(0.0), right_anti_dual.scalar * wedge.e12345), 
            /* e15, e25, e35, e3215 */
            float4(right_anti_dual.e3215) * wedge.group0
        );
    }
}
public extension VersorOdd {
    public AntiMotor anti_reject_orthogonally_from(FlatPoint other) {
        Flector wedge = Flector(
            /* e15, e25, e35, e45 */
            float4(this.scalar) * other.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e35 * this.e42) + (other.e45 * this.e23), (other.e15 * this.e43) + (other.e45 * this.e31), (other.e25 * this.e41) + (other.e45 * this.e12), -(other.e25 * this.e31) - (other.e35 * this.e12)) - (other.group0.yzxx * float4(this.group0.zxy, this.e23))
        );
        AntiFlatPoint right_anti_dual = AntiFlatPoint(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4(right_anti_dual.e321) * float4(wedge.group1.xyz, wedge.e45) * float4(-1.0), 
            /* e15, e25, e35, e3215 */
            float4(((right_anti_dual.group0.yzx * wedge.group1.zxy) - (right_anti_dual.group0.zxy * wedge.group1.yzx)), 0.0)
        );
    }
}
public extension VersorOdd {
    public AntiMotor anti_reject_orthogonally_from(Flector other) {
        Flector wedge = Flector(
            /* e15, e25, e35, e45 */
            float4(this.scalar) * other.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e45 * this.e23) + (other.e4235 * this.scalar), (other.e45 * this.e31) + (other.e4315 * this.scalar), (other.e45 * this.e12) + (other.e4125 * this.scalar), -(other.e25 * this.e31) - (other.e35 * this.e12)) + (this.group0.yzxw * float4(other.group0.zxy, other.e3215)) - (other.group0.yzxx * float4(this.group0.zxy, this.e23))
        );
        AntiFlector right_anti_dual = AntiFlector(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4((right_anti_dual.group0.www * wedge.group1.xyz * float3(-1.0)), (right_anti_dual.e1 * wedge.e4235) + (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) - (right_anti_dual.e321 * wedge.e45)), 
            /* e15, e25, e35, e3215 */
            float4(((right_anti_dual.group0.yzx * wedge.group1.zxy) - (right_anti_dual.group0.zxy * wedge.group1.yzx)), 0.0)
        );
    }
}
public extension VersorOdd {
    public AntiMotor anti_reject_orthogonally_from(Line other) {
        Motor wedge = Motor(
            /* e415, e425, e435, e12345 */
            float4((float3(this.scalar) * other.group0.xyz), -(other.e415 * this.e23) - (other.e425 * this.e31) - (other.e435 * this.e12) - (other.e235 * this.e41) - (other.e315 * this.e42) - (other.e125 * this.e43)), 
            /* e235, e315, e125, e5 */
            float4(float3(1.0), 0.0) * float4(other.group1.xyz, 0.0) * float4(this.group0.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        AntiLine right_anti_dual = AntiLine(
            /* e23, e31, e12 */
            other.group0.xyz, 
            /* e15, e25, e35 */
            other.group1.xyz
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4((float3(wedge.e12345) * right_anti_dual.group0.xyz), -(right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435)), 
            /* e15, e25, e35, e3215 */
            float4(float3(1.0), 0.0) * float4(right_anti_dual.group1.xyz, 0.0) * float4(wedge.group0.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
    }
}
public extension VersorOdd {
    public AntiMotor anti_reject_orthogonally_from(Motor other) {
        Motor wedge = Motor(
            /* e415, e425, e435, e12345 */
            (float4(other.e5) * float4(this.group0.xyz, this.e1234)) + (float4(this.scalar) * other.group0) + float4(float3(0.0), -(other.e415 * this.e23) - (other.e425 * this.e31) - (other.e435 * this.e12) - (other.e235 * this.e41) - (other.e315 * this.e42) - (other.e125 * this.e43)), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.e5) * this.group1.xyz) + (float3(this.scalar) * other.group1.xyz)), other.e5 * this.scalar)
        );
        AntiMotor right_anti_dual = AntiMotor(
            /* e23, e31, e12, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiMotor(
            /* e23, e31, e12, scalar */
            float4((float3(wedge.e12345) * right_anti_dual.group0.xyz), (right_anti_dual.scalar * wedge.e12345) - (right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435)), 
            /* e15, e25, e35, e3215 */
            float4(((float3(right_anti_dual.e3215) * wedge.group0.xyz) + (float3(wedge.e12345) * right_anti_dual.group1.xyz)), right_anti_dual.e3215 * wedge.e12345)
        );
    }
}
public extension VersorOdd {
    public MultiVector anti_reject_orthogonally_from(MultiVector other) {
        MultiVector wedge = MultiVector(
            /* scalar, e12345 */
            float2(other.scalar * this.scalar, (other.e12345 * this.scalar) + (other.e1 * this.e4235) + (other.e2 * this.e4315) + (other.e3 * this.e4125) + (other.e4 * this.e3215) + (other.e5 * this.e1234) - (other.e415 * this.e23) - (other.e425 * this.e31) - (other.e435 * this.e12) - (other.e321 * this.e45) - (other.e423 * this.e15) - (other.e431 * this.e25) - (other.e412 * this.e35) - (other.e235 * this.e41) - (other.e315 * this.e42) - (other.e125 * this.e43)), 
            /* e1, e2, e3, e4 */
            float4(this.scalar) * other.group1, 
            /* e5 */
            other.e5 * this.scalar, 
            /* e15, e25, e35, e45 */
            (float4(other.scalar) * float4(this.group2.xyz, this.e45)) + (float4(this.scalar) * other.group3), 
            /* e41, e42, e43 */
            (float3(other.scalar) * this.group0.xyz) + (float3(this.scalar) * other.group4.xyz), 
            /* e23, e31, e12 */
            (float3(other.scalar) * this.group1.xyz) + (float3(this.scalar) * other.group5.xyz), 
            /* e415, e425, e435, e321 */
            float4((other.e5 * this.e41) + (other.e415 * this.scalar), (other.e5 * this.e42) + (other.e425 * this.scalar), (other.e5 * this.e43) + (other.e435 * this.scalar), -(other.e2 * this.e31) - (other.e3 * this.e12)) + float4((other.group1.www * this.group2.xyz), other.e321 * this.scalar) - (other.group1.xyzx * this.group1.wwwx), 
            /* e423, e431, e412 */
            (float3(other.e4) * this.group1.xyz) + (float3(this.scalar) * other.group7.xyz) + (other.group1.zxy * this.group0.yzx) - (other.group1.yzx * this.group0.zxy), 
            /* e235, e315, e125 */
            (float3(other.e5) * this.group1.xyz) + (float3(this.scalar) * other.group8.xyz) + (other.group1.yzx * this.group2.zxy) - (other.group1.zxy * this.group2.yzx), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e35 * this.e42) + (other.e45 * this.e23) + (other.e23 * this.e45) + (other.e4235 * this.scalar), (other.e15 * this.e43) + (other.e45 * this.e31) + (other.e31 * this.e45) + (other.e4315 * this.scalar), (other.e25 * this.e41) + (other.e45 * this.e12) + (other.e12 * this.e45) + (other.e4125 * this.scalar), -(other.e15 * this.e23) - (other.e25 * this.e31) - (other.e35 * this.e12) - (other.e12 * this.e35)) + (float4(other.scalar) * this.group3) + float4((other.group4.xyz.yzx * this.group2.zxy), other.e3215 * this.scalar) - (this.group2.yzxx * float4(other.group4.xyz.zxy, other.e23)) - float4((other.group3.yzx * this.group0.zxy), other.e31 * this.e25), 
            /* e1234 */
            (other.scalar * this.e1234) + (other.e1234 * this.scalar) - (other.e41 * this.e23) - (other.e42 * this.e31) - (other.e43 * this.e12) - (other.e23 * this.e41) - (other.e31 * this.e42) - (other.e12 * this.e43)
        );
        MultiVector right_anti_dual = MultiVector(
            /* scalar, e12345 */
            other.group0.xy.yx * float2(-1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215, 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43 */
            other.group7.xyz, 
            /* e23, e31, e12 */
            other.group6.xyz, 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412 */
            other.group4.xyz * float3(-1.0), 
            /* e235, e315, e125 */
            other.group3.xyz * float3(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        return MultiVector(
            /* scalar, e12345 */
            float2((right_anti_dual.scalar * wedge.e12345) + (right_anti_dual.e12345 * wedge.scalar) + (right_anti_dual.e1 * wedge.e4235) + (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) + (right_anti_dual.e4 * wedge.e3215) + (right_anti_dual.e5 * wedge.e1234) + (right_anti_dual.e4235 * wedge.e1) + (right_anti_dual.e4315 * wedge.e2) + (right_anti_dual.e4125 * wedge.e3) + (right_anti_dual.e3215 * wedge.e4) + (right_anti_dual.e1234 * wedge.e5) - (right_anti_dual.e15 * wedge.e423) - (right_anti_dual.e25 * wedge.e431) - (right_anti_dual.e35 * wedge.e412) - (right_anti_dual.e45 * wedge.e321) - (right_anti_dual.e41 * wedge.e235) - (right_anti_dual.e42 * wedge.e315) - (right_anti_dual.e43 * wedge.e125) - (right_anti_dual.e23 * wedge.e415) - (right_anti_dual.e31 * wedge.e425) - (right_anti_dual.e12 * wedge.e435) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e321 * wedge.e45) - (right_anti_dual.e423 * wedge.e15) - (right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43), right_anti_dual.e12345 * wedge.e12345), 
            /* e1, e2, e3, e4 */
            float4((right_anti_dual.e15 * wedge.e1234) + (right_anti_dual.e415 * wedge.e321) + (right_anti_dual.e321 * wedge.e415) + (right_anti_dual.e4125 * wedge.e31), (right_anti_dual.e25 * wedge.e1234) + (right_anti_dual.e425 * wedge.e321) + (right_anti_dual.e321 * wedge.e425) + (right_anti_dual.e4235 * wedge.e12), (right_anti_dual.e35 * wedge.e1234) + (right_anti_dual.e435 * wedge.e321) + (right_anti_dual.e321 * wedge.e435) + (right_anti_dual.e4315 * wedge.e23), -(right_anti_dual.e415 * wedge.e423) - (right_anti_dual.e425 * wedge.e431) - (right_anti_dual.e435 * wedge.e412) - (right_anti_dual.e1234 * wedge.e45)) + (float4(right_anti_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_anti_dual.group1) + (wedge.group9.yzxx * float4(right_anti_dual.group5.xyz.zxy, right_anti_dual.e41)) + float4((wedge.group4.xyz * right_anti_dual.group9.www), right_anti_dual.e45 * wedge.e1234) + float4((right_anti_dual.group7.xyz.zxy * wedge.group8.xyz.yzx), right_anti_dual.e42 * wedge.e4315) + float4((right_anti_dual.group8.xyz.yzx * wedge.group7.xyz.zxy), right_anti_dual.e43 * wedge.e4125) - (right_anti_dual.group9.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((float3(right_anti_dual.e1234) * wedge.group3.xyz), right_anti_dual.e4125 * wedge.e43) - float4((right_anti_dual.group4.xyz * wedge.group9.www), right_anti_dual.e423 * wedge.e415) - float4((right_anti_dual.group5.xyz.yzx * wedge.group9.zxy), right_anti_dual.e431 * wedge.e425) - float4((right_anti_dual.group7.xyz.yzx * wedge.group8.xyz.zxy), right_anti_dual.e412 * wedge.e435) - float4((right_anti_dual.group8.xyz.zxy * wedge.group7.xyz.yzx), right_anti_dual.e4235 * wedge.e41), 
            /* e5 */
            (right_anti_dual.e12345 * wedge.e5) + (right_anti_dual.e5 * wedge.e12345) + (right_anti_dual.e4235 * wedge.e15) + (right_anti_dual.e4315 * wedge.e25) + (right_anti_dual.e4125 * wedge.e35) + (right_anti_dual.e3215 * wedge.e45) - (right_anti_dual.e15 * wedge.e4235) - (right_anti_dual.e25 * wedge.e4315) - (right_anti_dual.e35 * wedge.e4125) - (right_anti_dual.e45 * wedge.e3215) - (right_anti_dual.e415 * wedge.e235) - (right_anti_dual.e425 * wedge.e315) - (right_anti_dual.e435 * wedge.e125) - (right_anti_dual.e235 * wedge.e415) - (right_anti_dual.e315 * wedge.e425) - (right_anti_dual.e125 * wedge.e435), 
            /* e15, e25, e35, e45 */
            float4((right_anti_dual.e415 * wedge.e3215) + (right_anti_dual.e315 * wedge.e4125) + (right_anti_dual.e4125 * wedge.e315) + (right_anti_dual.e3215 * wedge.e415), (right_anti_dual.e425 * wedge.e3215) + (right_anti_dual.e125 * wedge.e4235) + (right_anti_dual.e4235 * wedge.e125) + (right_anti_dual.e3215 * wedge.e425), (right_anti_dual.e435 * wedge.e3215) + (right_anti_dual.e235 * wedge.e4315) + (right_anti_dual.e4315 * wedge.e235) + (right_anti_dual.e3215 * wedge.e435), -(right_anti_dual.e435 * wedge.e4125) - (right_anti_dual.e4235 * wedge.e415) - (right_anti_dual.e4315 * wedge.e425) - (right_anti_dual.e4125 * wedge.e435)) + (float4(right_anti_dual.e12345) * wedge.group3) + (float4(wedge.e12345) * right_anti_dual.group3) - (wedge.group9.yzxx * float4(right_anti_dual.group8.xyz.zxy, right_anti_dual.e415)) - float4((wedge.group8.xyz.zxy * right_anti_dual.group9.yzx), right_anti_dual.e425 * wedge.e4315), 
            /* e41, e42, e43 */
            (float3(right_anti_dual.e12345) * wedge.group4.xyz) + (float3(right_anti_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_anti_dual.group4.xyz) + (float3(wedge.e1234) * right_anti_dual.group6.xyz) + (right_anti_dual.group7.xyz.zxy * wedge.group9.yzx) + (wedge.group7.xyz.zxy * right_anti_dual.group9.yzx) - (right_anti_dual.group7.xyz.yzx * wedge.group9.zxy) - (wedge.group7.xyz.yzx * right_anti_dual.group9.zxy), 
            /* e23, e31, e12 */
            (float3(right_anti_dual.e12345) * wedge.group5.xyz) + (float3(right_anti_dual.e3215) * wedge.group7.xyz) + (float3(right_anti_dual.e1234) * wedge.group8.xyz) + (float3(wedge.e12345) * right_anti_dual.group5.xyz) + (float3(wedge.e3215) * right_anti_dual.group7.xyz) + (float3(wedge.e1234) * right_anti_dual.group8.xyz) - (float3(right_anti_dual.e321) * wedge.group9.xyz) - (float3(wedge.e321) * right_anti_dual.group9.xyz), 
            /* e415, e425, e435, e321 */
            (float4(right_anti_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_anti_dual.group6) + (right_anti_dual.group9.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - float4((right_anti_dual.group9.zxy * wedge.group9.yzx), right_anti_dual.e1234 * wedge.e3215), 
            /* e423, e431, e412 */
            (float3(right_anti_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_anti_dual.group7.xyz) + (float3(wedge.e1234) * right_anti_dual.group9.xyz) - (float3(right_anti_dual.e1234) * wedge.group9.xyz), 
            /* e235, e315, e125 */
            (float3(right_anti_dual.e12345) * wedge.group8.xyz) + (float3(right_anti_dual.e3215) * wedge.group9.xyz) + (float3(wedge.e12345) * right_anti_dual.group8.xyz) - (float3(wedge.e3215) * right_anti_dual.group9.xyz), 
            /* e4235, e4315, e4125, e3215 */
            (float4(right_anti_dual.e12345) * wedge.group9) + (float4(wedge.e12345) * right_anti_dual.group9), 
            /* e1234 */
            (right_anti_dual.e12345 * wedge.e1234) + (right_anti_dual.e1234 * wedge.e12345)
        );
    }
}
public extension VersorOdd {
    public Scalar anti_reject_orthogonally_from(Plane other) {
        Plane wedge = Plane(
            /* e4235, e4315, e4125, e3215 */
            float4(this.scalar) * other.group0
        );
        AntiPlane right_anti_dual = AntiPlane(
            /* e1, e2, e3, e5 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return Scalar(
            /* scalar */
            (right_anti_dual.e1 * wedge.e4235) + (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125)
        );
    }
}
public extension VersorOdd {
    public VersorOdd anti_reject_orthogonally_from(RoundPoint other) {
        VersorEven wedge = VersorEven(
            /* e423, e431, e412, e12345 */
            float4(other.e2 * this.e43 * -1.0, other.e3 * this.e41 * -1.0, other.e1 * this.e42 * -1.0, (other.e3 * this.e4125) + (other.e4 * this.e3215) + (other.e5 * this.e1234)) + (other.group0.zxyx * float4(this.group0.yzx, this.e4235)) + (other.group0.wwwy * float4(this.group1.xyz, this.e4315)), 
            /* e415, e425, e435, e321 */
            float4((other.e4 * this.e15) + (other.e5 * this.e41), (other.e4 * this.e25) + (other.e5 * this.e42), (other.e4 * this.e35) + (other.e5 * this.e43), -(other.e2 * this.e31) - (other.e3 * this.e12)) - (other.group0.xyzx * this.group1.wwwx), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.e5) * this.group1.xyz) + (other.group0.yzx * this.group2.zxy) - (other.group0.zxy * this.group2.yzx)), other.e5 * this.scalar), 
            /* e1, e2, e3, e4 */
            float4(this.scalar) * other.group0
        );
        Sphere right_anti_dual = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234 */
            other.e4 * -1.0
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(right_anti_dual.e4125 * wedge.e431 * -1.0, right_anti_dual.e4235 * wedge.e412 * -1.0, right_anti_dual.e4315 * wedge.e423 * -1.0, (right_anti_dual.e4125 * wedge.e3) + (right_anti_dual.e3215 * wedge.e4) + (right_anti_dual.e1234 * wedge.e5)) + (right_anti_dual.group0.yzxx * float4(wedge.group0.zxy, wedge.e1)) + float4((float3(right_anti_dual.e1234) * wedge.group1.xyz), right_anti_dual.e4315 * wedge.e2), 
            /* e23, e31, e12, e45 */
            float4((right_anti_dual.e3215 * wedge.e423) + (right_anti_dual.e1234 * wedge.e235), (right_anti_dual.e3215 * wedge.e431) + (right_anti_dual.e1234 * wedge.e315), (right_anti_dual.e3215 * wedge.e412) + (right_anti_dual.e1234 * wedge.e125), -(right_anti_dual.e4315 * wedge.e425) - (right_anti_dual.e4125 * wedge.e435)) - (right_anti_dual.group0.xyzx * wedge.group1.wwwx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_anti_dual.e3215) * wedge.group1.xyz) + (right_anti_dual.group0.zxy * wedge.group2.yzx) - (right_anti_dual.group0.yzx * wedge.group2.zxy)), right_anti_dual.e1234 * wedge.e12345), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_anti_dual.group0
        );
    }
}
public extension VersorOdd {
    public VersorOdd anti_reject_orthogonally_from(Scalar other) {
        VersorOdd wedge = VersorOdd(
            /* e41, e42, e43, scalar */
            float4(other.scalar) * this.group0, 
            /* e23, e31, e12, e45 */
            float4(other.scalar) * this.group1, 
            /* e15, e25, e35, e1234 */
            float4(other.scalar) * this.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar) * this.group3
        );
        AntiScalar right_anti_dual = AntiScalar(
            /* e12345 */
            other.scalar
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            float4(right_anti_dual.e12345) * wedge.group0, 
            /* e23, e31, e12, e45 */
            float4(right_anti_dual.e12345) * wedge.group1, 
            /* e15, e25, e35, e1234 */
            float4(right_anti_dual.e12345) * wedge.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(right_anti_dual.e12345) * wedge.group3
        );
    }
}
public extension VersorOdd {
    public Scalar anti_reject_orthogonally_from(Sphere other) {
        Sphere wedge = Sphere(
            /* e4235, e4315, e4125, e3215 */
            float4(this.scalar) * other.group0, 
            /* e1234 */
            other.e1234 * this.scalar
        );
        RoundPoint right_anti_dual = RoundPoint(
            /* e1, e2, e3, e4 */
            float4(other.group0.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5 */
            other.e3215
        );
        return Scalar(
            /* scalar */
            (right_anti_dual.e1 * wedge.e4235) + (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) + (right_anti_dual.e4 * wedge.e3215) + (right_anti_dual.e5 * wedge.e1234)
        );
    }
}
public extension VersorOdd {
    public VersorOdd anti_reject_orthogonally_from(VersorEven other) {
        VersorEven wedge = VersorEven(
            /* e423, e431, e412, e12345 */
            (float4(this.scalar) * other.group0) + (other.group3.wwwx * float4(this.group1.xyz, this.e4235)) + float4(float3(0.0), (other.e2 * this.e4315) + (other.e3 * this.e4125) + (other.e4 * this.e3215) - (other.e431 * this.e25) - (other.e412 * this.e35) - (other.e415 * this.e23) - (other.e425 * this.e31) - (other.e435 * this.e12) - (other.e321 * this.e45) - (other.e235 * this.e41) - (other.e315 * this.e42) - (other.e125 * this.e43)) + float4((other.group3.zxy * this.group0.yzx), other.e5 * this.e1234) - float4((other.group3.yzx * this.group0.zxy), other.e423 * this.e15), 
            /* e415, e425, e435, e321 */
            float4((other.e5 * this.e41) + (other.e4 * this.e15), (other.e5 * this.e42) + (other.e4 * this.e25), (other.e5 * this.e43) + (other.e4 * this.e35), -(other.e2 * this.e31) - (other.e3 * this.e12)) + (float4(this.scalar) * other.group1) - (other.group3.xyzx * this.group1.wwwx), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.e5) * this.group1.xyz) + (float3(this.scalar) * other.group2.xyz) + (other.group3.yzx * this.group2.zxy) - (other.group3.zxy * this.group2.yzx)), other.e5 * this.scalar), 
            /* e1, e2, e3, e4 */
            float4(this.scalar) * other.group3
        );
        VersorOdd right_anti_dual = VersorOdd(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            (wedge.group0.zxyw * float4(right_anti_dual.group3.yzx, right_anti_dual.scalar)) + float4(float3(0.0), (wedge.e2 * right_anti_dual.e4315) + (wedge.e3 * right_anti_dual.e4125) + (wedge.e4 * right_anti_dual.e3215) - (wedge.e431 * right_anti_dual.e25) - (wedge.e412 * right_anti_dual.e35) - (wedge.e415 * right_anti_dual.e23) - (wedge.e425 * right_anti_dual.e31) - (wedge.e435 * right_anti_dual.e12) - (wedge.e321 * right_anti_dual.e45) - (wedge.e235 * right_anti_dual.e41) - (wedge.e315 * right_anti_dual.e42) - (wedge.e125 * right_anti_dual.e43)) + float4((wedge.group0.www * right_anti_dual.group0.xyz), wedge.e5 * right_anti_dual.e1234) + float4((right_anti_dual.group2.www * wedge.group1.xyz), wedge.e1 * right_anti_dual.e4235) - (wedge.group0.yzxx * float4(right_anti_dual.group3.zxy, right_anti_dual.e15)), 
            /* e23, e31, e12, e45 */
            float4((wedge.e12345 * right_anti_dual.e23) + (wedge.e235 * right_anti_dual.e1234), (wedge.e12345 * right_anti_dual.e31) + (wedge.e315 * right_anti_dual.e1234), (wedge.e12345 * right_anti_dual.e12) + (wedge.e125 * right_anti_dual.e1234), -(wedge.e425 * right_anti_dual.e4315) - (wedge.e435 * right_anti_dual.e4125)) + (wedge.group0 * float4(right_anti_dual.group3.www, right_anti_dual.e45)) - (wedge.group1.wwwx * right_anti_dual.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(wedge.e12345) * right_anti_dual.group2.xyz) + (float3(right_anti_dual.e3215) * wedge.group1.xyz) + (wedge.group2.yzx * right_anti_dual.group3.zxy) - (wedge.group2.zxy * right_anti_dual.group3.yzx)), wedge.e12345 * right_anti_dual.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_anti_dual.group3
        );
    }
}
public extension VersorOdd {
    public VersorOdd anti_reject_orthogonally_from(VersorOdd other) {
        VersorOdd wedge = VersorOdd(
            /* e41, e42, e43, scalar */
            float4(((float3(other.scalar) * this.group0.xyz) + (float3(this.scalar) * other.group0.xyz)), other.scalar * this.scalar), 
            /* e23, e31, e12, e45 */
            (float4(other.scalar) * this.group1) + (float4(this.scalar) * other.group1), 
            /* e15, e25, e35, e1234 */
            (float4(other.scalar) * this.group2) + (float4(this.scalar) * other.group2) + float4(float3(0.0), -(other.e41 * this.e23) - (other.e42 * this.e31) - (other.e43 * this.e12) - (other.e23 * this.e41) - (other.e31 * this.e42) - (other.e12 * this.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e23 * this.e45) + (other.e45 * this.e23) + (other.e35 * this.e42) + (other.e4235 * this.scalar), (other.e31 * this.e45) + (other.e45 * this.e31) + (other.e15 * this.e43) + (other.e4315 * this.scalar), (other.e12 * this.e45) + (other.e45 * this.e12) + (other.e25 * this.e41) + (other.e4125 * this.scalar), -(other.e12 * this.e35) - (other.e15 * this.e23) - (other.e25 * this.e31) - (other.e35 * this.e12)) + (other.group0.yzxw * float4(this.group2.zxy, this.e3215)) + float4((other.group0.www * this.group3.xyz), other.e3215 * this.scalar) - (this.group2.yzxx * float4(other.group0.zxy, other.e23)) - float4((other.group2.yzx * this.group0.zxy), other.e31 * this.e25)
        );
        VersorEven right_anti_dual = VersorEven(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd(
            /* e41, e42, e43, scalar */
            (right_anti_dual.group0.zxyw * float4(wedge.group3.yzx, wedge.scalar)) + float4(float3(0.0), (right_anti_dual.e2 * wedge.e4315) + (right_anti_dual.e3 * wedge.e4125) + (right_anti_dual.e4 * wedge.e3215) - (right_anti_dual.e431 * wedge.e25) - (right_anti_dual.e412 * wedge.e35) - (right_anti_dual.e415 * wedge.e23) - (right_anti_dual.e425 * wedge.e31) - (right_anti_dual.e435 * wedge.e12) - (right_anti_dual.e321 * wedge.e45) - (right_anti_dual.e235 * wedge.e41) - (right_anti_dual.e315 * wedge.e42) - (right_anti_dual.e125 * wedge.e43)) + float4((right_anti_dual.group0.www * wedge.group0.xyz), right_anti_dual.e5 * wedge.e1234) + float4((wedge.group2.www * right_anti_dual.group1.xyz), right_anti_dual.e1 * wedge.e4235) - (right_anti_dual.group0.yzxx * float4(wedge.group3.zxy, wedge.e15)), 
            /* e23, e31, e12, e45 */
            float4((right_anti_dual.e12345 * wedge.e23) + (right_anti_dual.e235 * wedge.e1234), (right_anti_dual.e12345 * wedge.e31) + (right_anti_dual.e315 * wedge.e1234), (right_anti_dual.e12345 * wedge.e12) + (right_anti_dual.e125 * wedge.e1234), -(right_anti_dual.e425 * wedge.e4315) - (right_anti_dual.e435 * wedge.e4125)) + (right_anti_dual.group0 * float4(wedge.group3.www, wedge.e45)) - (right_anti_dual.group1.wwwx * wedge.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_anti_dual.e12345) * wedge.group2.xyz) + (float3(wedge.e3215) * right_anti_dual.group1.xyz) + (right_anti_dual.group2.yzx * wedge.group3.zxy) - (right_anti_dual.group2.zxy * wedge.group3.yzx)), right_anti_dual.e12345 * wedge.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_anti_dual.e12345) * wedge.group3
        );
    }
}
