extension AntiCircleRotor {
    // Fancy infix trick
    func operator/(_rhs: AntiRejectViaHorizonFromInfix) -> AntiRejectViaHorizonFromInfixPartial<AntiCircleRotor> {
        return AntiRejectViaHorizonFromInfixPartial { a: this };
    }
}
extension AntiCircleRotor: AntiRejectViaHorizonFrom<AntiCircleRotor> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: AntiCircleRotor) -> Output {
        VersorOdd wedge = VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            float4(((float3(other.scalar) * this.group0.xyz) + (float3(this.scalar) * other.group0.xyz)), other.scalar * this.scalar), 
            /* e23, e31, e12, e45 */
            (float4(other.scalar) * this.group1) + (float4(this.scalar) * other.group1), 
            /* e15, e25, e35, e1234 */
            float4((other.e15 * this.scalar) + (other.scalar * this.e15), (other.e25 * this.scalar) + (other.scalar * this.e25), (other.e35 * this.scalar) + (other.scalar * this.e35), -(other.e41 * this.e23) - (other.e42 * this.e31) - (other.e43 * this.e12) - (other.e23 * this.e41) - (other.e31 * this.e42) - (other.e12 * this.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e42 * this.e35) + (other.e23 * this.e45) + (other.e45 * this.e23) + (other.e35 * this.e42), (other.e43 * this.e15) + (other.e31 * this.e45) + (other.e45 * this.e31) + (other.e15 * this.e43), (other.e41 * this.e25) + (other.e12 * this.e45) + (other.e45 * this.e12) + (other.e25 * this.e41), -(other.e12 * this.e35) - (other.e15 * this.e23) - (other.e25 * this.e31) - (other.e35 * this.e12)) - (this.group2.yzxx * float4(other.group0.xyz.zxy, other.e23)) - float4((this.group0.xyz.zxy * other.group2.yzx), other.e31 * this.e25)
        );
        CircleRotor right_dual = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            float4((right_dual.e415 * wedge.e1234) + (right_dual.e12345 * wedge.e41), (right_dual.e425 * wedge.e1234) + (right_dual.e12345 * wedge.e42), (right_dual.e435 * wedge.e1234) + (right_dual.e12345 * wedge.e43), -(right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e321 * wedge.e45) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43)) + float4((right_dual.group0.xyz.zxy * wedge.group3.yzx), right_dual.e12345 * wedge.scalar) - float4((right_dual.group0.xyz.yzx * wedge.group3.zxy), right_dual.e423 * wedge.e15), 
            /* e23, e31, e12, e45 */
            float4((right_dual.e235 * wedge.e1234) + (right_dual.e12345 * wedge.e23), (right_dual.e315 * wedge.e1234) + (right_dual.e12345 * wedge.e31), (right_dual.e125 * wedge.e1234) + (right_dual.e12345 * wedge.e12), -(right_dual.e425 * wedge.e4315) - (right_dual.e435 * wedge.e4125)) + float4((right_dual.group0.xyz * wedge.group3.www), right_dual.e12345 * wedge.e45) - (right_dual.group1.wwwx * wedge.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_dual.e12345) * wedge.group2.xyz) + (float3(wedge.e3215) * right_dual.group1.xyz) + (right_dual.group2.yzx * wedge.group3.zxy) - (right_dual.group2.zxy * wedge.group3.yzx)), right_dual.e12345 * wedge.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * wedge.group3
        );
    }
}
extension AntiCircleRotor: AntiRejectViaHorizonFrom<AntiDipoleInversion> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: AntiDipoleInversion) -> Output {
        VersorEven wedge = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4((this.e42 * other.e3) + (this.e23 * other.e4) + (this.scalar * other.e423), (this.e43 * other.e1) + (this.e31 * other.e4) + (this.scalar * other.e431), (this.e41 * other.e2) + (this.e12 * other.e4) + (this.scalar * other.e412), -(this.e42 * other.e315) - (this.e43 * other.e125) - (this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435) - (this.e45 * other.e321) - (this.e15 * other.e423) - (this.e25 * other.e431) - (this.e35 * other.e412)) - float4((this.group0.xyz.zxy * other.group3.yzx), this.e41 * other.e235), 
            /* e415, e425, e435, e321 */
            float4((this.e15 * other.e4) + (this.scalar * other.e415), (this.e25 * other.e4) + (this.scalar * other.e425), (this.e35 * other.e4) + (this.scalar * other.e435), -(this.e31 * other.e2) - (this.e12 * other.e3)) + float4((this.group0.xyz * other.group3.www), this.scalar * other.e321) - (this.group1.wwwx * other.group3.xyzx), 
            /* e235, e315, e125, e5 */
            float4(((float3(this.scalar) * other.group2.xyz) + (float3(other.e5) * this.group1.xyz) + (this.group2.zxy * other.group3.yzx) - (this.group2.yzx * other.group3.zxy)), this.scalar * other.e5), 
            /* e1, e2, e3, e4 */
            float4(this.scalar) * float4(other.group3.xyz, other.e4)
        );
        DipoleInversion right_dual = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            (right_dual.group3.yzxy * float4(wedge.group0.zxy, wedge.e2)) + float4(float3(0.0), (right_dual.e4125 * wedge.e3) + (right_dual.e3215 * wedge.e4) - (right_dual.e42 * wedge.e315) - (right_dual.e43 * wedge.e125) - (right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435) - (right_dual.e45 * wedge.e321) - (right_dual.e15 * wedge.e423) - (right_dual.e25 * wedge.e431) - (right_dual.e35 * wedge.e412)) + float4((right_dual.group0.xyz * wedge.group0.www), right_dual.e1234 * wedge.e5) + float4((right_dual.group2.www * wedge.group1.xyz), right_dual.e4235 * wedge.e1) - float4((right_dual.group3.zxy * wedge.group0.yzx), right_dual.e41 * wedge.e235), 
            /* e23, e31, e12, e45 */
            float4((right_dual.e1234 * wedge.e235) + (right_dual.e3215 * wedge.e423), (right_dual.e1234 * wedge.e315) + (right_dual.e3215 * wedge.e431), (right_dual.e1234 * wedge.e125) + (right_dual.e3215 * wedge.e412), -(right_dual.e4315 * wedge.e425) - (right_dual.e4125 * wedge.e435)) + (float4(wedge.e12345) * right_dual.group1) - (right_dual.group3.xyzx * wedge.group1.wwwx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_dual.e3215) * wedge.group1.xyz) + (float3(wedge.e12345) * right_dual.group2.xyz) + (right_dual.group3.zxy * wedge.group2.yzx) - (right_dual.group3.yzx * wedge.group2.zxy)), right_dual.e1234 * wedge.e12345), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_dual.group3
        );
    }
}
extension AntiCircleRotor: AntiRejectViaHorizonFrom<AntiDualNum> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: AntiDualNum) -> Output {
        VersorOdd wedge = VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            float4(other.scalar) * float4(this.group0.xyz, this.scalar), 
            /* e23, e31, e12, e45 */
            float4(other.scalar) * this.group1, 
            /* e15, e25, e35, e1234 */
            float4(other.group0.xy.yy, other.scalar, 0.0) * float4(float3(1.0), 0.0) * float4(this.group2.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(float3(0.0), this.scalar * other.e3215)
        );
        DualNum right_dual = DualNum.from_groups(
            /* e5, e12345, 0, 0 */
            float4(other.group0.xy, 0.0, 0.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            float4(right_dual.group0.xy.yy, right_dual.e12345, (right_dual.e5 * wedge.e1234) + (right_dual.e12345 * wedge.scalar)) * float4(wedge.group0.xyz, 1.0), 
            /* e23, e31, e12, e45 */
            float4(right_dual.e12345) * wedge.group1, 
            /* e15, e25, e35, e1234 */
            float4(right_dual.group0.xy.yy, right_dual.e12345, 0.0) * float4(float3(1.0), 0.0) * float4(wedge.group2.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * wedge.group3
        );
    }
}
extension AntiCircleRotor: AntiRejectViaHorizonFrom<AntiFlatPoint> {
    associatedtype Output = AntiCircleRotor;
    func anti_reject_via_horizon_from(other: AntiFlatPoint) -> Output {
        CircleRotor wedge = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(0.0), 
            /* e415, e425, e435, e321 */
            float4(float3(0.0), this.scalar * other.e321), 
            /* e235, e315, e125, e12345 */
            float4((this.group2.www * other.group0.xyz), -(this.e41 * other.e235) - (this.e42 * other.e315) - (this.e43 * other.e125) - (this.e45 * other.e321))
        );
        FlatPoint right_dual = FlatPoint.from_groups(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4(0.0), 
            /* e23, e31, e12, e45 */
            float4(float3(0.0), wedge.e12345 * right_dual.e45), 
            /* e15, e25, e35, scalar */
            float4((wedge.group2.www * right_dual.group0.xyz), -(wedge.e423 * right_dual.e15) - (wedge.e431 * right_dual.e25) - (wedge.e412 * right_dual.e35) - (wedge.e321 * right_dual.e45))
        );
    }
}
extension AntiCircleRotor: AntiRejectViaHorizonFrom<AntiFlector> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: AntiFlector) -> Output {
        VersorEven wedge = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4(this.e42 * other.e3, this.e43 * other.e1, this.e41 * other.e2, -(this.e42 * other.e315) - (this.e43 * other.e125) - (this.e45 * other.e321)) - float4((this.group0.xyz.zxy * other.group1.yzx), this.e41 * other.e235), 
            /* e415, e425, e435, e321 */
            float4(float3(0.0), -(this.e31 * other.e2) - (this.e12 * other.e3)) + float4((this.group0.xyz * other.group1.www), this.scalar * other.e321) - (this.group1.wwwx * other.group1.xyzx), 
            /* e235, e315, e125, e5 */
            float4(((float3(this.scalar) * other.group0.xyz) + (float3(other.e5) * this.group1.xyz) + (this.group2.zxy * other.group1.yzx) - (this.group2.yzx * other.group1.zxy)), this.scalar * other.e5), 
            /* e1, e2, e3, e4 */
            float4(float3(1.0), 0.0) * float4(this.group2.www, 0.0) * float4(other.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        Flector right_dual = Flector.from_groups(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            (right_dual.group1.yzxx * float4(wedge.group0.zxy, wedge.e1)) + float4(float3(0.0), (right_dual.e4315 * wedge.e2) + (right_dual.e4125 * wedge.e3) + (right_dual.e3215 * wedge.e4) - (right_dual.e25 * wedge.e431) - (right_dual.e35 * wedge.e412) - (right_dual.e45 * wedge.e321)) - (wedge.group0.yzxx * float4(right_dual.group1.zxy, right_dual.e15)), 
            /* e23, e31, e12, e45 */
            (wedge.group0 * float4(right_dual.group1.www, right_dual.e45)) + float4(float3(0.0), -(right_dual.e4315 * wedge.e425) - (right_dual.e4125 * wedge.e435)) - (right_dual.group1.xyzx * wedge.group1.wwwx), 
            /* e15, e25, e35, e1234 */
            float4((float3(right_dual.e3215) * wedge.group1.xyz), 0.0) + float4((float3(wedge.e12345) * right_dual.group0.xyz), 0.0) + float4((right_dual.group1.zxy * wedge.group2.yzx), 0.0) - float4((right_dual.group1.yzx * wedge.group2.zxy), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_dual.group1
        );
    }
}
extension AntiCircleRotor: AntiRejectViaHorizonFrom<AntiLine> {
    associatedtype Output = AntiCircleRotor;
    func anti_reject_via_horizon_from(other: AntiLine) -> Output {
        DipoleInversion wedge = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(0.0), 
            /* e23, e31, e12, e45 */
            float4(float3(1.0), 0.0) * float4(other.group0.xyz, 0.0) * float4(this.group2.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e15, e25, e35, e1234 */
            float4((float3(this.scalar) * other.group1.xyz), -(this.e41 * other.e23) - (this.e42 * other.e31) - (this.e43 * other.e12)), 
            /* e4235, e4315, e4125, e3215 */
            float4((this.e42 * other.e35) + (this.e45 * other.e23), (this.e43 * other.e15) + (this.e45 * other.e31), (this.e41 * other.e25) + (this.e45 * other.e12), -(this.e23 * other.e15) - (this.e31 * other.e25) - (this.e12 * other.e35) - (this.e25 * other.e31) - (this.e35 * other.e12)) - float4((this.group0.xyz.zxy * other.group1.xyz.yzx), this.e15 * other.e23)
        );
        Line right_dual = Line.from_groups(
            /* e415, e425, e435, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e235, e315, e125, 0 */
            float4(other.group1.xyz * float3(-1.0), 0.0)
        );
        return AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(wedge.e1234) * right_dual.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4((float3(wedge.e1234) * right_dual.group1.xyz), -(wedge.e4235 * right_dual.e415) - (wedge.e4315 * right_dual.e425) - (wedge.e4125 * right_dual.e435)), 
            /* e15, e25, e35, scalar */
            float4((wedge.e4125 * right_dual.e315) + (wedge.e3215 * right_dual.e415), (wedge.e4235 * right_dual.e125) + (wedge.e3215 * right_dual.e425), (wedge.e4315 * right_dual.e235) + (wedge.e3215 * right_dual.e435), -(wedge.e42 * right_dual.e315) - (wedge.e43 * right_dual.e125) - (wedge.e23 * right_dual.e415) - (wedge.e31 * right_dual.e425) - (wedge.e12 * right_dual.e435)) - float4((right_dual.group1.xyz.zxy * wedge.group3.yzx), wedge.e41 * right_dual.e235)
        );
    }
}
extension AntiCircleRotor: AntiRejectViaHorizonFrom<AntiMotor> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: AntiMotor) -> Output {
        VersorOdd wedge = VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            float4(other.scalar) * float4(this.group0.xyz, this.scalar), 
            /* e23, e31, e12, e45 */
            float4(((float3(this.scalar) * other.group0.xyz) + (float3(other.scalar) * this.group1.xyz)), this.e45 * other.scalar), 
            /* e15, e25, e35, e1234 */
            float4((this.e15 * other.scalar) + (this.scalar * other.e15), (this.e25 * other.scalar) + (this.scalar * other.e25), (this.e35 * other.scalar) + (this.scalar * other.e35), -(this.e41 * other.e23) - (this.e42 * other.e31) - (this.e43 * other.e12)), 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e45 * other.e23, this.e45 * other.e31, this.e45 * other.e12, -(this.e31 * other.e25) - (this.e12 * other.e35) - (this.e15 * other.e23) - (this.e25 * other.e31) - (this.e35 * other.e12)) + (other.group1.zxyw * float4(this.group0.xyz.yzx, this.scalar)) - (other.group1.yzxx * float4(this.group0.xyz.zxy, this.e23))
        );
        Motor right_dual = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            (right_dual.group0 * float4(wedge.group2.www, wedge.scalar)) + float4(float3(0.0), -(right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43)) + float4((right_dual.group0.www * wedge.group0.xyz), right_dual.e5 * wedge.e1234), 
            /* e23, e31, e12, e45 */
            float4(right_dual.e235 * wedge.e1234, right_dual.e315 * wedge.e1234, right_dual.e125 * wedge.e1234, -(right_dual.e415 * wedge.e4235) - (right_dual.e425 * wedge.e4315) - (right_dual.e435 * wedge.e4125)) + (float4(right_dual.e12345) * wedge.group1), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_dual.e12345) * wedge.group2.xyz) + (float3(wedge.e3215) * right_dual.group0.xyz) + (right_dual.group1.yzx * wedge.group3.zxy) - (right_dual.group1.zxy * wedge.group3.yzx)), right_dual.e12345 * wedge.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * wedge.group3
        );
    }
}
extension AntiCircleRotor: AntiRejectViaHorizonFrom<AntiPlane> {
    associatedtype Output = AntiCircleRotor;
    func anti_reject_via_horizon_from(other: AntiPlane) -> Output {
        AntiDipoleInversion wedge = AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4((this.group0.xyz.yzx * other.group0.zxy) - (this.group0.xyz.zxy * other.group0.yzx), 0.0), 
            /* e415, e425, e435, e321 */
            float4(this.e41 * other.e5, this.e42 * other.e5, this.e43 * other.e5, -(this.e31 * other.e2) - (this.e12 * other.e3)) - (this.group1.wwwx * other.group0.xyzx), 
            /* e235, e315, e125, e4 */
            float4((float3(other.e5) * this.group1.xyz), 0.0) + float4((this.group2.zxy * other.group0.yzx), 0.0) - float4((this.group2.yzx * other.group0.zxy), 0.0), 
            /* e1, e2, e3, e5 */
            float4(this.scalar) * other.group0
        );
        Plane right_dual = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4((wedge.group0.xyz.zxy * right_dual.group0.yzx) - (wedge.group0.xyz.yzx * right_dual.group0.zxy), 0.0), 
            /* e23, e31, e12, e45 */
            float4(wedge.e423 * right_dual.e3215, wedge.e431 * right_dual.e3215, wedge.e412 * right_dual.e3215, -(wedge.e425 * right_dual.e4315) - (wedge.e435 * right_dual.e4125)) - (wedge.group1.wwwx * right_dual.group0.xyzx), 
            /* e15, e25, e35, scalar */
            float4(wedge.e125 * right_dual.e4315 * -1.0, wedge.e235 * right_dual.e4125 * -1.0, wedge.e315 * right_dual.e4235 * -1.0, (wedge.e2 * right_dual.e4315) + (wedge.e3 * right_dual.e4125)) + (float4(right_dual.e3215) * float4(wedge.group1.xyz, wedge.e4)) + (right_dual.group0.zxyx * float4(wedge.group2.yzx, wedge.e1))
        );
    }
}
extension AntiCircleRotor: AntiRejectViaHorizonFrom<AntiScalar> {
    associatedtype Output = Scalar;
    func anti_reject_via_horizon_from(other: AntiScalar) -> Output {
        return Scalar.from_groups(
            /* scalar, 0, 0, 0 */
            float4(this.scalar * powi(other.e12345, 2) * -1.0, 0.0, 0.0, 0.0)
        );
    }
}
extension AntiCircleRotor: AntiRejectViaHorizonFrom<Circle> {
    associatedtype Output = AntiCircleRotor;
    func anti_reject_via_horizon_from(other: Circle) -> Output {
        CircleRotor wedge = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(this.scalar) * other.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(this.scalar) * other.group1, 
            /* e235, e315, e125, e12345 */
            float4((float3(this.scalar) * other.group2.xyz), -(this.e41 * other.e235) - (this.e42 * other.e315) - (this.e43 * other.e125) - (this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435) - (this.e45 * other.e321) - (this.e15 * other.e423) - (this.e25 * other.e431) - (this.e35 * other.e412))
        );
        Dipole right_dual = Dipole.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, 0 */
            float4(other.group2.xyz, 0.0)
        );
        return AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(wedge.e12345) * right_dual.group1, 
            /* e15, e25, e35, scalar */
            float4((float3(wedge.e12345) * right_dual.group2.xyz), -(wedge.e423 * right_dual.e15) - (wedge.e431 * right_dual.e25) - (wedge.e412 * right_dual.e35) - (wedge.e415 * right_dual.e23) - (wedge.e425 * right_dual.e31) - (wedge.e435 * right_dual.e12) - (wedge.e321 * right_dual.e45) - (wedge.e235 * right_dual.e41) - (wedge.e315 * right_dual.e42) - (wedge.e125 * right_dual.e43))
        );
    }
}
extension AntiCircleRotor: AntiRejectViaHorizonFrom<CircleRotor> {
    associatedtype Output = AntiCircleRotor;
    func anti_reject_via_horizon_from(other: CircleRotor) -> Output {
        CircleRotor wedge = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(this.scalar) * other.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(this.scalar) * other.group1, 
            /* e235, e315, e125, e12345 */
            float4((this.group2.www * other.group2.xyz), (this.scalar * other.e12345) - (this.e41 * other.e235) - (this.e42 * other.e315) - (this.e43 * other.e125) - (this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435) - (this.e45 * other.e321) - (this.e15 * other.e423) - (this.e25 * other.e431) - (this.e35 * other.e412))
        );
        AntiCircleRotor right_dual = AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(wedge.e12345) * right_dual.group1, 
            /* e15, e25, e35, scalar */
            float4((float3(wedge.e12345) * right_dual.group2.xyz), (right_dual.scalar * wedge.e12345) - (right_dual.e41 * wedge.e235) - (right_dual.e42 * wedge.e315) - (right_dual.e43 * wedge.e125) - (right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435) - (right_dual.e45 * wedge.e321) - (right_dual.e15 * wedge.e423) - (right_dual.e25 * wedge.e431) - (right_dual.e35 * wedge.e412))
        );
    }
}
extension AntiCircleRotor: AntiRejectViaHorizonFrom<Dipole> {
    associatedtype Output = AntiCircleRotor;
    func anti_reject_via_horizon_from(other: Dipole) -> Output {
        DipoleInversion wedge = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(this.scalar) * other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(this.scalar) * other.group1, 
            /* e15, e25, e35, e1234 */
            float4((float3(this.scalar) * other.group2.xyz), -(this.e41 * other.e23) - (this.e42 * other.e31) - (this.e43 * other.e12) - (this.e23 * other.e41) - (this.e31 * other.e42) - (this.e12 * other.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((this.e42 * other.e35) + (this.e23 * other.e45) + (this.e45 * other.e23) + (this.e35 * other.e42), (this.e43 * other.e15) + (this.e31 * other.e45) + (this.e45 * other.e31) + (this.e15 * other.e43), (this.e41 * other.e25) + (this.e12 * other.e45) + (this.e45 * other.e12) + (this.e25 * other.e41), -(this.e12 * other.e35) - (this.e15 * other.e23) - (this.e25 * other.e31) - (this.e35 * other.e12)) - float4((this.group0.xyz.zxy * other.group2.xyz.yzx), this.e23 * other.e15) - float4((other.group0.xyz.zxy * this.group2.yzx), this.e31 * other.e25)
        );
        Circle right_dual = Circle.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, 0 */
            float4(other.group2.xyz * float3(-1.0), 0.0)
        );
        return AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4((float3(wedge.e1234) * right_dual.group1.xyz) + (right_dual.group0.xyz.zxy * wedge.group3.yzx) - (right_dual.group0.xyz.yzx * wedge.group3.zxy), 0.0), 
            /* e23, e31, e12, e45 */
            float4((right_dual.e423 * wedge.e3215) + (right_dual.e235 * wedge.e1234), (right_dual.e431 * wedge.e3215) + (right_dual.e315 * wedge.e1234), (right_dual.e412 * wedge.e3215) + (right_dual.e125 * wedge.e1234), -(right_dual.e425 * wedge.e4315) - (right_dual.e435 * wedge.e4125)) - (right_dual.group1.wwwx * wedge.group3.xyzx), 
            /* e15, e25, e35, scalar */
            float4((right_dual.e415 * wedge.e3215) + (right_dual.e315 * wedge.e4125), (right_dual.e425 * wedge.e3215) + (right_dual.e125 * wedge.e4235), (right_dual.e435 * wedge.e3215) + (right_dual.e235 * wedge.e4315), -(right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e321 * wedge.e45) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43)) - float4((right_dual.group2.xyz.zxy * wedge.group3.yzx), right_dual.e423 * wedge.e15)
        );
    }
}
extension AntiCircleRotor: AntiRejectViaHorizonFrom<DipoleInversion> {
    associatedtype Output = AntiCircleRotor;
    func anti_reject_via_horizon_from(other: DipoleInversion) -> Output {
        DipoleInversion wedge = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(this.scalar) * other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(this.scalar) * other.group1, 
            /* e15, e25, e35, e1234 */
            float4((this.group2.www * other.group2.xyz), (this.scalar * other.e1234) - (this.e41 * other.e23) - (this.e42 * other.e31) - (this.e43 * other.e12) - (this.e23 * other.e41) - (this.e31 * other.e42) - (this.e12 * other.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((this.e23 * other.e45) + (this.e45 * other.e23) + (this.e35 * other.e42) + (this.scalar * other.e4235), (this.e31 * other.e45) + (this.e45 * other.e31) + (this.e15 * other.e43) + (this.scalar * other.e4315), (this.e12 * other.e45) + (this.e45 * other.e12) + (this.e25 * other.e41) + (this.scalar * other.e4125), -(this.e12 * other.e35) - (this.e15 * other.e23) - (this.e25 * other.e31) - (this.e35 * other.e12)) + float4((this.group0.xyz.yzx * other.group2.zxy), this.scalar * other.e3215) - (other.group2.yzxx * float4(this.group0.xyz.zxy, this.e23)) - float4((other.group0.xyz.zxy * this.group2.yzx), this.e31 * other.e25)
        );
        AntiDipoleInversion right_dual = AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4((float3(wedge.e1234) * right_dual.group1.xyz) + (right_dual.group0.xyz.zxy * wedge.group3.yzx) - (right_dual.group0.xyz.yzx * wedge.group3.zxy), 0.0), 
            /* e23, e31, e12, e45 */
            float4((right_dual.e423 * wedge.e3215) + (right_dual.e235 * wedge.e1234), (right_dual.e431 * wedge.e3215) + (right_dual.e315 * wedge.e1234), (right_dual.e412 * wedge.e3215) + (right_dual.e125 * wedge.e1234), -(right_dual.e425 * wedge.e4315) - (right_dual.e435 * wedge.e4125)) - (right_dual.group1.wwwx * wedge.group3.xyzx), 
            /* e15, e25, e35, scalar */
            (float4(wedge.e3215) * float4(right_dual.group1.xyz, right_dual.e4)) + (wedge.group3.zxyx * float4(right_dual.group2.yzx, right_dual.e1)) + float4(float3(0.0), (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) + (right_dual.e5 * wedge.e1234) - (right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e321 * wedge.e45) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43)) - float4((right_dual.group2.zxy * wedge.group3.yzx), right_dual.e423 * wedge.e15)
        );
    }
}
extension AntiCircleRotor: AntiRejectViaHorizonFrom<DualNum> {
    associatedtype Output = AntiMotor;
    func anti_reject_via_horizon_from(other: DualNum) -> Output {
        Motor wedge = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4(other.group0.xy.xx, other.e5, other.e12345) * float4(this.group0.xyz, this.scalar), 
            /* e235, e315, e125, e5 */
            float4(other.e5) * float4(this.group1.xyz, this.scalar)
        );
        AntiDualNum right_dual = AntiDualNum.from_groups(
            /* e3215, scalar, 0, 0 */
            float4(other.group0.xy * float2(-1.0), 0.0, 0.0)
        );
        return AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            float4(float3(0.0), right_dual.scalar * wedge.e12345), 
            /* e15, e25, e35, e3215 */
            float4(right_dual.e3215) * wedge.group0
        );
    }
}
extension AntiCircleRotor: AntiRejectViaHorizonFrom<FlatPoint> {
    associatedtype Output = AntiMotor;
    func anti_reject_via_horizon_from(other: FlatPoint) -> Output {
        Flector wedge = Flector.from_groups(
            /* e15, e25, e35, e45 */
            float4(this.scalar) * other.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4((this.e42 * other.e35) + (this.e23 * other.e45), (this.e43 * other.e15) + (this.e31 * other.e45), (this.e41 * other.e25) + (this.e12 * other.e45), -(this.e31 * other.e25) - (this.e12 * other.e35)) - (other.group0.yzxx * float4(this.group0.xyz.zxy, this.e23))
        );
        AntiFlatPoint right_dual = AntiFlatPoint.from_groups(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            float4(right_dual.e321) * float4(wedge.group1.xyz, wedge.e45) * float4(-1.0), 
            /* e15, e25, e35, e3215 */
            float4(((right_dual.group0.yzx * wedge.group1.zxy) - (right_dual.group0.zxy * wedge.group1.yzx)), 0.0)
        );
    }
}
extension AntiCircleRotor: AntiRejectViaHorizonFrom<Flector> {
    associatedtype Output = AntiMotor;
    func anti_reject_via_horizon_from(other: Flector) -> Output {
        Flector wedge = Flector.from_groups(
            /* e15, e25, e35, e45 */
            float4(this.scalar) * other.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4((this.e23 * other.e45) + (this.scalar * other.e4235), (this.e31 * other.e45) + (this.scalar * other.e4315), (this.e12 * other.e45) + (this.scalar * other.e4125), -(this.e31 * other.e25) - (this.e12 * other.e35)) + float4((this.group0.xyz.yzx * other.group0.zxy), this.scalar * other.e3215) - (other.group0.yzxx * float4(this.group0.xyz.zxy, this.e23))
        );
        AntiFlector right_dual = AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            float4((right_dual.group0.www * wedge.group1.xyz * float3(-1.0)), (right_dual.e1 * wedge.e4235) + (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) - (right_dual.e321 * wedge.e45)), 
            /* e15, e25, e35, e3215 */
            float4(((right_dual.group0.yzx * wedge.group1.zxy) - (right_dual.group0.zxy * wedge.group1.yzx)), 0.0)
        );
    }
}
extension AntiCircleRotor: AntiRejectViaHorizonFrom<Line> {
    associatedtype Output = AntiMotor;
    func anti_reject_via_horizon_from(other: Line) -> Output {
        Motor wedge = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4((float3(this.scalar) * other.group0.xyz), -(this.e41 * other.e235) - (this.e42 * other.e315) - (this.e43 * other.e125) - (this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435)), 
            /* e235, e315, e125, e5 */
            float4(float3(1.0), 0.0) * float4(other.group1.xyz, 0.0) * float4(this.group2.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        AntiLine right_dual = AntiLine.from_groups(
            /* e23, e31, e12, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e15, e25, e35, 0 */
            float4(other.group1.xyz, 0.0)
        );
        return AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            float4((float3(wedge.e12345) * right_dual.group0.xyz), -(right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435)), 
            /* e15, e25, e35, e3215 */
            float4(float3(1.0), 0.0) * float4(right_dual.group1.xyz, 0.0) * float4(wedge.group0.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
    }
}
extension AntiCircleRotor: AntiRejectViaHorizonFrom<Motor> {
    associatedtype Output = AntiMotor;
    func anti_reject_via_horizon_from(other: Motor) -> Output {
        Motor wedge = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4(this.scalar * other.e415, this.scalar * other.e425, this.scalar * other.e435, -(this.e41 * other.e235) - (this.e42 * other.e315) - (this.e43 * other.e125) - (this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435)) + float4((this.group0.xyz * other.group1.www), this.scalar * other.e12345), 
            /* e235, e315, e125, e5 */
            float4(((float3(this.scalar) * other.group1.xyz) + (float3(other.e5) * this.group1.xyz)), this.scalar * other.e5)
        );
        AntiMotor right_dual = AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            float4((float3(wedge.e12345) * right_dual.group0.xyz), (right_dual.scalar * wedge.e12345) - (right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435)), 
            /* e15, e25, e35, e3215 */
            float4(((float3(right_dual.e3215) * wedge.group0.xyz) + (float3(wedge.e12345) * right_dual.group1.xyz)), right_dual.e3215 * wedge.e12345)
        );
    }
}
extension AntiCircleRotor: AntiRejectViaHorizonFrom<MultiVector> {
    associatedtype Output = MultiVector;
    func anti_reject_via_horizon_from(other: MultiVector) -> Output {
        MultiVector wedge = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(this.scalar * other.scalar, (this.scalar * other.e12345) - (this.e41 * other.e235) - (this.e42 * other.e315) - (this.e43 * other.e125) - (this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435) - (this.e45 * other.e321) - (this.e15 * other.e423) - (this.e25 * other.e431) - (this.e35 * other.e412)), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(this.scalar) * other.group1, 
            /* e5, 0, 0, 0 */
            float4(this.scalar * other.e5, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            (float4(this.scalar) * other.group3) + (float4(other.scalar) * float4(this.group2.xyz, this.e45)), 
            /* e41, e42, e43, 0 */
            float4((float3(this.scalar) * other.group4.xyz) + (float3(other.scalar) * this.group0.xyz), 0.0), 
            /* e23, e31, e12, 0 */
            float4((float3(this.scalar) * other.group5.xyz) + (float3(other.scalar) * this.group1.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            float4((this.e15 * other.e4) + (this.scalar * other.e415), (this.e25 * other.e4) + (this.scalar * other.e425), (this.e35 * other.e4) + (this.scalar * other.e435), -(this.e31 * other.e2) - (this.e12 * other.e3)) + float4((float3(other.e5) * this.group0.xyz), this.scalar * other.e321) - (this.group1.wwwx * other.group1.xyzx), 
            /* e423, e431, e412, 0 */
            float4((float3(this.scalar) * other.group7.xyz) + (float3(other.e4) * this.group1.xyz) + (this.group0.xyz.yzx * other.group1.zxy) - (this.group0.xyz.zxy * other.group1.yzx), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(this.scalar) * other.group8.xyz) + (float3(other.e5) * this.group1.xyz) + (this.group2.zxy * other.group1.yzx) - (this.group2.yzx * other.group1.zxy), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4((this.e23 * other.e45) + (this.e45 * other.e23) + (this.e35 * other.e42) + (this.scalar * other.e4235), (this.e31 * other.e45) + (this.e45 * other.e31) + (this.e15 * other.e43) + (this.scalar * other.e4315), (this.e12 * other.e45) + (this.e45 * other.e12) + (this.e25 * other.e41) + (this.scalar * other.e4125), -(this.e23 * other.e15) - (this.e31 * other.e25) - (this.e12 * other.e35) - (this.e35 * other.e12)) + float4((this.group0.xyz.yzx * other.group3.zxy), this.scalar * other.e3215) - (this.group2.yzxy * float4(other.group4.xyz.zxy, other.e31)) - float4((this.group0.xyz.zxy * other.group3.yzx), this.e15 * other.e23), 
            /* e1234, 0, 0, 0 */
            float4((this.scalar * other.e1234) - (this.e41 * other.e23) - (this.e42 * other.e31) - (this.e43 * other.e12) - (this.e23 * other.e41) - (this.e31 * other.e42) - (this.e12 * other.e43), 0.0, 0.0, 0.0)
        );
        MultiVector right_dual = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(other.group0.xy.yx * float2(-1.0, 1.0), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5, 0, 0, 0 */
            float4(other.e3215, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43, 0 */
            float4(other.group7.xyz, 0.0), 
            /* e23, e31, e12, 0 */
            float4(other.group6.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412, 0 */
            float4(other.group4.xyz * float3(-1.0), 0.0), 
            /* e235, e315, e125, 0 */
            float4(other.group3.xyz * float3(-1.0), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        return MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2((right_dual.scalar * wedge.e12345) + (right_dual.e12345 * wedge.scalar) + (right_dual.e1 * wedge.e4235) + (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) + (right_dual.e4 * wedge.e3215) + (right_dual.e5 * wedge.e1234) + (right_dual.e4235 * wedge.e1) + (right_dual.e4315 * wedge.e2) + (right_dual.e4125 * wedge.e3) + (right_dual.e3215 * wedge.e4) + (right_dual.e1234 * wedge.e5) - (right_dual.e15 * wedge.e423) - (right_dual.e25 * wedge.e431) - (right_dual.e35 * wedge.e412) - (right_dual.e45 * wedge.e321) - (right_dual.e41 * wedge.e235) - (right_dual.e42 * wedge.e315) - (right_dual.e43 * wedge.e125) - (right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e321 * wedge.e45) - (right_dual.e423 * wedge.e15) - (right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43), right_dual.e12345 * wedge.e12345), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e15 * wedge.e1234) + (right_dual.e415 * wedge.e321) + (right_dual.e321 * wedge.e415) + (right_dual.e4125 * wedge.e31), (right_dual.e25 * wedge.e1234) + (right_dual.e425 * wedge.e321) + (right_dual.e321 * wedge.e425) + (right_dual.e4235 * wedge.e12), (right_dual.e35 * wedge.e1234) + (right_dual.e435 * wedge.e321) + (right_dual.e321 * wedge.e435) + (right_dual.e4315 * wedge.e23), -(right_dual.e415 * wedge.e423) - (right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412) - (right_dual.e1234 * wedge.e45)) + (float4(right_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_dual.group1) + (wedge.group9.yzxx * float4(right_dual.group5.xyz.zxy, right_dual.e41)) + float4((wedge.group4.xyz * right_dual.group9.www), right_dual.e45 * wedge.e1234) + float4((right_dual.group7.xyz.zxy * wedge.group8.xyz.yzx), right_dual.e42 * wedge.e4315) + float4((right_dual.group8.xyz.yzx * wedge.group7.xyz.zxy), right_dual.e43 * wedge.e4125) - (right_dual.group9.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((float3(right_dual.e1234) * wedge.group3.xyz), right_dual.e4125 * wedge.e43) - float4((right_dual.group4.xyz * wedge.group9.www), right_dual.e423 * wedge.e415) - float4((right_dual.group5.xyz.yzx * wedge.group9.zxy), right_dual.e431 * wedge.e425) - float4((right_dual.group7.xyz.yzx * wedge.group8.xyz.zxy), right_dual.e412 * wedge.e435) - float4((right_dual.group8.xyz.zxy * wedge.group7.xyz.yzx), right_dual.e4235 * wedge.e41), 
            /* e5, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e5) + (right_dual.e5 * wedge.e12345) + (right_dual.e4235 * wedge.e15) + (right_dual.e4315 * wedge.e25) + (right_dual.e4125 * wedge.e35) + (right_dual.e3215 * wedge.e45) - (right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125) - (right_dual.e45 * wedge.e3215) - (right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435), 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4((right_dual.e415 * wedge.e3215) + (right_dual.e315 * wedge.e4125) + (right_dual.e4125 * wedge.e315) + (right_dual.e3215 * wedge.e415), (right_dual.e425 * wedge.e3215) + (right_dual.e125 * wedge.e4235) + (right_dual.e4235 * wedge.e125) + (right_dual.e3215 * wedge.e425), (right_dual.e435 * wedge.e3215) + (right_dual.e235 * wedge.e4315) + (right_dual.e4315 * wedge.e235) + (right_dual.e3215 * wedge.e435), -(right_dual.e435 * wedge.e4125) - (right_dual.e4235 * wedge.e415) - (right_dual.e4315 * wedge.e425) - (right_dual.e4125 * wedge.e435)) + (float4(right_dual.e12345) * wedge.group3) + (float4(wedge.e12345) * right_dual.group3) - (wedge.group9.yzxx * float4(right_dual.group8.xyz.zxy, right_dual.e415)) - float4((wedge.group8.xyz.zxy * right_dual.group9.yzx), right_dual.e425 * wedge.e4315), 
            /* e41, e42, e43, 0 */
            float4((float3(right_dual.e12345) * wedge.group4.xyz) + (float3(right_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_dual.group4.xyz) + (float3(wedge.e1234) * right_dual.group6.xyz) + (right_dual.group7.xyz.zxy * wedge.group9.yzx) + (wedge.group7.xyz.zxy * right_dual.group9.yzx) - (right_dual.group7.xyz.yzx * wedge.group9.zxy) - (wedge.group7.xyz.yzx * right_dual.group9.zxy), 0.0), 
            /* e23, e31, e12, 0 */
            float4((float3(right_dual.e12345) * wedge.group5.xyz) + (float3(right_dual.e3215) * wedge.group7.xyz) + (float3(right_dual.e1234) * wedge.group8.xyz) + (float3(wedge.e12345) * right_dual.group5.xyz) + (float3(wedge.e3215) * right_dual.group7.xyz) + (float3(wedge.e1234) * right_dual.group8.xyz) - (float3(right_dual.e321) * wedge.group9.xyz) - (float3(wedge.e321) * right_dual.group9.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            (float4(right_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_dual.group6) + (right_dual.group9.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - float4((right_dual.group9.zxy * wedge.group9.yzx), right_dual.e1234 * wedge.e3215), 
            /* e423, e431, e412, 0 */
            float4((float3(right_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_dual.group7.xyz) + (float3(wedge.e1234) * right_dual.group9.xyz) - (float3(right_dual.e1234) * wedge.group9.xyz), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(right_dual.e12345) * wedge.group8.xyz) + (float3(right_dual.e3215) * wedge.group9.xyz) + (float3(wedge.e12345) * right_dual.group8.xyz) - (float3(wedge.e3215) * right_dual.group9.xyz), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            (float4(right_dual.e12345) * wedge.group9) + (float4(wedge.e12345) * right_dual.group9), 
            /* e1234, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e1234) + (right_dual.e1234 * wedge.e12345), 0.0, 0.0, 0.0)
        );
    }
}
extension AntiCircleRotor: AntiRejectViaHorizonFrom<Plane> {
    associatedtype Output = Scalar;
    func anti_reject_via_horizon_from(other: Plane) -> Output {
        Plane wedge = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(this.scalar) * other.group0
        );
        AntiPlane right_dual = AntiPlane.from_groups(
            /* e1, e2, e3, e5 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return Scalar.from_groups(
            /* scalar, 0, 0, 0 */
            float4((right_dual.e1 * wedge.e4235) + (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125), 0.0, 0.0, 0.0)
        );
    }
}
extension AntiCircleRotor: AntiRejectViaHorizonFrom<RoundPoint> {
    associatedtype Output = AntiCircleRotor;
    func anti_reject_via_horizon_from(other: RoundPoint) -> Output {
        AntiDipoleInversion wedge = AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4((float3(other.e4) * this.group1.xyz) + (this.group0.xyz.yzx * other.group0.zxy) - (this.group0.xyz.zxy * other.group0.yzx), 0.0), 
            /* e415, e425, e435, e321 */
            float4((this.e41 * other.e5) + (this.e15 * other.e4), (this.e42 * other.e5) + (this.e25 * other.e4), (this.e43 * other.e5) + (this.e35 * other.e4), -(this.e31 * other.e2) - (this.e12 * other.e3)) - (this.group1.wwwx * other.group0.xyzx), 
            /* e235, e315, e125, e4 */
            float4(((float3(other.e5) * this.group1.xyz) + (this.group2.zxy * other.group0.yzx) - (this.group2.yzx * other.group0.zxy)), this.scalar * other.e4), 
            /* e1, e2, e3, e5 */
            float4(this.scalar) * float4(other.group0.xyz, other.e5)
        );
        Sphere right_dual = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        return AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4((float3(right_dual.e1234) * wedge.group1.xyz) + (wedge.group0.xyz.zxy * right_dual.group0.yzx) - (wedge.group0.xyz.yzx * right_dual.group0.zxy), 0.0), 
            /* e23, e31, e12, e45 */
            float4((wedge.e423 * right_dual.e3215) + (wedge.e235 * right_dual.e1234), (wedge.e431 * right_dual.e3215) + (wedge.e315 * right_dual.e1234), (wedge.e412 * right_dual.e3215) + (wedge.e125 * right_dual.e1234), -(wedge.e425 * right_dual.e4315) - (wedge.e435 * right_dual.e4125)) - (wedge.group1.wwwx * right_dual.group0.xyzx), 
            /* e15, e25, e35, scalar */
            float4(wedge.e125 * right_dual.e4315 * -1.0, wedge.e235 * right_dual.e4125 * -1.0, wedge.e315 * right_dual.e4235 * -1.0, (wedge.e2 * right_dual.e4315) + (wedge.e3 * right_dual.e4125) + (wedge.e5 * right_dual.e1234)) + (float4(right_dual.e3215) * float4(wedge.group1.xyz, wedge.e4)) + (right_dual.group0.zxyx * float4(wedge.group2.yzx, wedge.e1))
        );
    }
}
extension AntiCircleRotor: AntiRejectViaHorizonFrom<Scalar> {
    associatedtype Output = AntiCircleRotor;
    func anti_reject_via_horizon_from(other: Scalar) -> Output {
        AntiCircleRotor wedge = AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(other.scalar) * this.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(other.scalar) * this.group1, 
            /* e15, e25, e35, scalar */
            float4(other.scalar) * this.group2
        );
        AntiScalar right_dual = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(other.scalar, 0.0, 0.0, 0.0)
        );
        return AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(right_dual.e12345) * wedge.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(right_dual.e12345) * wedge.group1, 
            /* e15, e25, e35, scalar */
            float4(right_dual.e12345) * wedge.group2
        );
    }
}
extension AntiCircleRotor: AntiRejectViaHorizonFrom<Sphere> {
    associatedtype Output = Scalar;
    func anti_reject_via_horizon_from(other: Sphere) -> Output {
        Sphere wedge = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(this.scalar) * other.group0, 
            /* e1234, 0, 0, 0 */
            float4(this.scalar * other.e1234, 0.0, 0.0, 0.0)
        );
        RoundPoint right_dual = RoundPoint.from_groups(
            /* e1, e2, e3, e4 */
            float4(other.group0.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5, 0, 0, 0 */
            float4(other.e3215, 0.0, 0.0, 0.0)
        );
        return Scalar.from_groups(
            /* scalar, 0, 0, 0 */
            float4((right_dual.e1 * wedge.e4235) + (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) + (right_dual.e4 * wedge.e3215) + (right_dual.e5 * wedge.e1234), 0.0, 0.0, 0.0)
        );
    }
}
extension AntiCircleRotor: AntiRejectViaHorizonFrom<VersorEven> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: VersorEven) -> Output {
        VersorEven wedge = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4((this.e23 * other.e4) + (this.scalar * other.e423), (this.e31 * other.e4) + (this.scalar * other.e431), (this.e12 * other.e4) + (this.scalar * other.e412), -(this.e42 * other.e315) - (this.e43 * other.e125) - (this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435) - (this.e45 * other.e321) - (this.e15 * other.e423) - (this.e25 * other.e431) - (this.e35 * other.e412)) + float4((this.group0.xyz.yzx * other.group3.zxy), this.scalar * other.e12345) - float4((this.group0.xyz.zxy * other.group3.yzx), this.e41 * other.e235), 
            /* e415, e425, e435, e321 */
            float4((this.e15 * other.e4) + (this.scalar * other.e415), (this.e25 * other.e4) + (this.scalar * other.e425), (this.e35 * other.e4) + (this.scalar * other.e435), -(this.e31 * other.e2) - (this.e12 * other.e3)) + float4((this.group0.xyz * other.group2.www), this.scalar * other.e321) - (this.group1.wwwx * other.group3.xyzx), 
            /* e235, e315, e125, e5 */
            float4(((float3(this.scalar) * other.group2.xyz) + (float3(other.e5) * this.group1.xyz) + (this.group2.zxy * other.group3.yzx) - (this.group2.yzx * other.group3.zxy)), this.scalar * other.e5), 
            /* e1, e2, e3, e4 */
            float4(this.scalar) * other.group3
        );
        VersorOdd right_dual = VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            (wedge.group0.zxyw * float4(right_dual.group3.yzx, right_dual.scalar)) + float4(float3(0.0), (wedge.e2 * right_dual.e4315) + (wedge.e3 * right_dual.e4125) + (wedge.e4 * right_dual.e3215) - (wedge.e431 * right_dual.e25) - (wedge.e412 * right_dual.e35) - (wedge.e415 * right_dual.e23) - (wedge.e425 * right_dual.e31) - (wedge.e435 * right_dual.e12) - (wedge.e321 * right_dual.e45) - (wedge.e235 * right_dual.e41) - (wedge.e315 * right_dual.e42) - (wedge.e125 * right_dual.e43)) + float4((wedge.group0.www * right_dual.group0.xyz), wedge.e5 * right_dual.e1234) + float4((right_dual.group2.www * wedge.group1.xyz), wedge.e1 * right_dual.e4235) - (wedge.group0.yzxx * float4(right_dual.group3.zxy, right_dual.e15)), 
            /* e23, e31, e12, e45 */
            float4((wedge.e12345 * right_dual.e23) + (wedge.e235 * right_dual.e1234), (wedge.e12345 * right_dual.e31) + (wedge.e315 * right_dual.e1234), (wedge.e12345 * right_dual.e12) + (wedge.e125 * right_dual.e1234), -(wedge.e425 * right_dual.e4315) - (wedge.e435 * right_dual.e4125)) + (wedge.group0 * float4(right_dual.group3.www, right_dual.e45)) - (wedge.group1.wwwx * right_dual.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(wedge.e12345) * right_dual.group2.xyz) + (float3(right_dual.e3215) * wedge.group1.xyz) + (wedge.group2.yzx * right_dual.group3.zxy) - (wedge.group2.zxy * right_dual.group3.yzx)), wedge.e12345 * right_dual.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_dual.group3
        );
    }
}
extension AntiCircleRotor: AntiRejectViaHorizonFrom<VersorOdd> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: VersorOdd) -> Output {
        VersorOdd wedge = VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            float4(((float3(this.scalar) * other.group0.xyz) + (float3(other.scalar) * this.group0.xyz)), this.scalar * other.scalar), 
            /* e23, e31, e12, e45 */
            (float4(this.scalar) * other.group1) + (float4(other.scalar) * this.group1), 
            /* e15, e25, e35, e1234 */
            float4(this.scalar * other.e15, this.scalar * other.e25, this.scalar * other.e35, -(this.e41 * other.e23) - (this.e42 * other.e31) - (this.e43 * other.e12) - (this.e23 * other.e41) - (this.e31 * other.e42) - (this.e12 * other.e43)) + (this.group2 * float4(other.group0.www, other.e1234)), 
            /* e4235, e4315, e4125, e3215 */
            float4((this.e23 * other.e45) + (this.e45 * other.e23) + (this.e35 * other.e42) + (this.scalar * other.e4235), (this.e31 * other.e45) + (this.e45 * other.e31) + (this.e15 * other.e43) + (this.scalar * other.e4315), (this.e12 * other.e45) + (this.e45 * other.e12) + (this.e25 * other.e41) + (this.scalar * other.e4125), -(this.e12 * other.e35) - (this.e15 * other.e23) - (this.e25 * other.e31) - (this.e35 * other.e12)) + float4((this.group0.xyz.yzx * other.group2.zxy), this.scalar * other.e3215) - (other.group2.yzxx * float4(this.group0.xyz.zxy, this.e23)) - float4((this.group2.yzx * other.group0.zxy), this.e31 * other.e25)
        );
        VersorEven right_dual = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            (right_dual.group0.zxyw * float4(wedge.group3.yzx, wedge.scalar)) + float4(float3(0.0), (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) + (right_dual.e4 * wedge.e3215) - (right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e321 * wedge.e45) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43)) + float4((right_dual.group0.www * wedge.group0.xyz), right_dual.e5 * wedge.e1234) + float4((wedge.group2.www * right_dual.group1.xyz), right_dual.e1 * wedge.e4235) - (right_dual.group0.yzxx * float4(wedge.group3.zxy, wedge.e15)), 
            /* e23, e31, e12, e45 */
            float4((right_dual.e12345 * wedge.e23) + (right_dual.e235 * wedge.e1234), (right_dual.e12345 * wedge.e31) + (right_dual.e315 * wedge.e1234), (right_dual.e12345 * wedge.e12) + (right_dual.e125 * wedge.e1234), -(right_dual.e425 * wedge.e4315) - (right_dual.e435 * wedge.e4125)) + (right_dual.group0 * float4(wedge.group3.www, wedge.e45)) - (right_dual.group1.wwwx * wedge.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_dual.e12345) * wedge.group2.xyz) + (float3(wedge.e3215) * right_dual.group1.xyz) + (right_dual.group2.yzx * wedge.group3.zxy) - (right_dual.group2.zxy * wedge.group3.yzx)), right_dual.e12345 * wedge.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * wedge.group3
        );
    }
}
extension AntiDipoleInversion {
    // Fancy infix trick
    func operator/(_rhs: AntiRejectViaHorizonFromInfix) -> AntiRejectViaHorizonFromInfixPartial<AntiDipoleInversion> {
        return AntiRejectViaHorizonFromInfixPartial { a: this };
    }
}
extension AntiDipoleInversion: AntiRejectViaHorizonFrom<AntiCircleRotor> {
    associatedtype Output = VersorEven;
    func anti_reject_via_horizon_from(other: AntiCircleRotor) -> Output {
        VersorEven wedge = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4((other.e42 * this.e3) + (other.e23 * this.e4) + (other.scalar * this.e423), (other.e43 * this.e1) + (other.e31 * this.e4) + (other.scalar * this.e431), (other.e41 * this.e2) + (other.e12 * this.e4) + (other.scalar * this.e412), -(other.e42 * this.e315) - (other.e43 * this.e125) - (other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435) - (other.e45 * this.e321) - (other.e15 * this.e423) - (other.e25 * this.e431) - (other.e35 * this.e412)) - float4((other.group0.xyz.zxy * this.group3.yzx), other.e41 * this.e235), 
            /* e415, e425, e435, e321 */
            float4((other.e15 * this.e4) + (other.scalar * this.e415), (other.e25 * this.e4) + (other.scalar * this.e425), (other.e35 * this.e4) + (other.scalar * this.e435), -(other.e31 * this.e2) - (other.e12 * this.e3)) + float4((other.group0.xyz * this.group3.www), other.scalar * this.e321) - (other.group1.wwwx * this.group3.xyzx), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.scalar) * this.group2.xyz) + (float3(this.e5) * other.group1.xyz) + (other.group2.zxy * this.group3.yzx) - (other.group2.yzx * this.group3.zxy)), other.scalar * this.e5), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * float4(this.group3.xyz, this.e4)
        );
        CircleRotor right_dual = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4(((float3(right_dual.e12345) * wedge.group0.xyz) + (float3(wedge.e12345) * right_dual.group0.xyz)), right_dual.e12345 * wedge.e12345), 
            /* e415, e425, e435, e321 */
            (float4(right_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_dual.group1), 
            /* e235, e315, e125, e5 */
            float4(right_dual.e12345 * wedge.e235, right_dual.e12345 * wedge.e315, right_dual.e12345 * wedge.e125, -(right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435)) + (right_dual.group2 * float4(wedge.group0.www, wedge.e5)), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e415 * wedge.e321) + (right_dual.e321 * wedge.e415) + (right_dual.e315 * wedge.e412) + (right_dual.e12345 * wedge.e1), (right_dual.e425 * wedge.e321) + (right_dual.e321 * wedge.e425) + (right_dual.e125 * wedge.e423) + (right_dual.e12345 * wedge.e2), (right_dual.e435 * wedge.e321) + (right_dual.e321 * wedge.e435) + (right_dual.e235 * wedge.e431) + (right_dual.e12345 * wedge.e3), -(right_dual.e412 * wedge.e435) - (right_dual.e415 * wedge.e423) - (right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412)) + float4((right_dual.group0.xyz.zxy * wedge.group2.yzx), right_dual.e12345 * wedge.e4) - float4((right_dual.group0.xyz.yzx * wedge.group2.zxy), right_dual.e423 * wedge.e415) - float4((right_dual.group2.zxy * wedge.group0.yzx), right_dual.e431 * wedge.e425)
        );
    }
}
extension AntiDipoleInversion: AntiRejectViaHorizonFrom<AntiDipoleInversion> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: AntiDipoleInversion) -> Output {
        DipoleInversion wedge = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4((float3(this.e4) * other.group3.xyz) - (float3(other.e4) * this.group3.xyz), 0.0), 
            /* e23, e31, e12, e45 */
            (other.group3.zxyw * float4(this.group3.yzx, this.e4)) - (this.group3.zxyw * float4(other.group3.yzx, other.e4)), 
            /* e15, e25, e35, e1234 */
            (this.group3.xyzx * float4(other.group3.www, other.e423)) + float4(float3(0.0), (other.e431 * this.e2) + (other.e412 * this.e3) + (other.e321 * this.e4) - (other.e4 * this.e321) - (other.e2 * this.e431) - (other.e3 * this.e412)) - float4((this.group3.www * other.group3.xyz), other.e1 * this.e423), 
            /* e4235, e4315, e4125, e3215 */
            (other.group3.yzxw * this.group1.zxyw) + (this.group2.wwwz * float4(other.group2.xyz, other.e3)) + float4((this.group0.xyz * other.group3.www), other.e1 * this.e235) + float4((other.group1.yzx * this.group3.zxy), other.e2 * this.e315) - (float4(this.e5) * float4(other.group0.xyz, other.e321)) - (other.group2.wwwy * float4(this.group2.xyz, this.e2)) - (this.group3.yzxx * float4(other.group1.zxy, other.e235)) - float4((other.group3.zxy * this.group1.yzx), other.e125 * this.e3)
        );
        DipoleInversion right_dual = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4((float3(wedge.e1234) * right_dual.group3.xyz) - (float3(right_dual.e1234) * wedge.group3.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            (right_dual.group3.yzxw * float4(wedge.group3.zxy, wedge.e1234)) - (wedge.group3.yzxw * float4(right_dual.group3.zxy, right_dual.e1234)), 
            /* e235, e315, e125, e4 */
            (wedge.group3.xyzx * float4(right_dual.group3.www, right_dual.e41)) + float4(float3(0.0), (right_dual.e42 * wedge.e4315) + (right_dual.e43 * wedge.e4125) + (right_dual.e45 * wedge.e1234) - (right_dual.e1234 * wedge.e45) - (right_dual.e4315 * wedge.e42) - (right_dual.e4125 * wedge.e43)) - float4((wedge.group3.www * right_dual.group3.xyz), right_dual.e4235 * wedge.e41), 
            /* e1, e2, e3, e5 */
            (right_dual.group3.zxyw * wedge.group1.yzxw) + (wedge.group2.wwwz * float4(right_dual.group2.xyz, right_dual.e4125)) + float4((wedge.group0.xyz * right_dual.group3.www), right_dual.e4235 * wedge.e15) + float4((right_dual.group1.zxy * wedge.group3.yzx), right_dual.e4315 * wedge.e25) - (float4(wedge.e3215) * float4(right_dual.group0.xyz, right_dual.e45)) - (right_dual.group2.wwwy * float4(wedge.group2.xyz, wedge.e4315)) - (wedge.group3.zxyx * float4(right_dual.group1.yzx, right_dual.e15)) - float4((right_dual.group3.yzx * wedge.group1.zxy), right_dual.e35 * wedge.e4125)
        );
    }
}
extension AntiDipoleInversion: AntiRejectViaHorizonFrom<AntiDualNum> {
    associatedtype Output = VersorEven;
    func anti_reject_via_horizon_from(other: AntiDualNum) -> Output {
        VersorEven wedge = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4(other.group0.xy.yy, other.scalar, other.e3215) * float4(this.group0.xyz, this.e4), 
            /* e415, e425, e435, e321 */
            float4(other.scalar) * this.group1, 
            /* e235, e315, e125, e5 */
            float4(other.scalar) * float4(this.group2.xyz, this.e5), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * float4(this.group3.xyz, this.e4)
        );
        DualNum right_dual = DualNum.from_groups(
            /* e5, e12345, 0, 0 */
            float4(other.group0.xy, 0.0, 0.0)
        );
        return VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4(right_dual.e12345) * wedge.group0, 
            /* e415, e425, e435, e321 */
            float4(right_dual.e12345) * wedge.group1, 
            /* e235, e315, e125, e5 */
            float4(right_dual.group0.xy.yy, right_dual.e12345, (right_dual.e5 * wedge.e12345) + (right_dual.e12345 * wedge.e5)) * float4(wedge.group2.xyz, 1.0), 
            /* e1, e2, e3, e4 */
            float4(right_dual.e12345) * wedge.group3
        );
    }
}
extension AntiDipoleInversion: AntiRejectViaHorizonFrom<AntiFlatPoint> {
    associatedtype Output = RoundPoint;
    func anti_reject_via_horizon_from(other: AntiFlatPoint) -> Output {
        Sphere wedge = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4((this.group2.www * other.group0.xyz), -(this.e1 * other.e235) - (this.e2 * other.e315) - (this.e3 * other.e125) - (this.e5 * other.e321)), 
            /* e1234, 0, 0, 0 */
            float4(this.e4 * other.e321, 0.0, 0.0, 0.0)
        );
        FlatPoint right_dual = FlatPoint.from_groups(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return RoundPoint.from_groups(
            /* e1, e2, e3, e4 */
            float4(wedge.e1234) * right_dual.group0, 
            /* e5, 0, 0, 0 */
            float4(-(right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125) - (right_dual.e45 * wedge.e3215), 0.0, 0.0, 0.0)
        );
    }
}
extension AntiDipoleInversion: AntiRejectViaHorizonFrom<AntiFlector> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: AntiFlector) -> Output {
        DipoleInversion wedge = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(this.e4) * other.group1.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(((this.group3.yzx * other.group1.zxy) - (this.group3.zxy * other.group1.yzx)), this.e4 * other.e5), 
            /* e15, e25, e35, e1234 */
            float4(float3(0.0), -(this.e431 * other.e2) - (this.e412 * other.e3)) + float4((other.group1.www * this.group3.xyz), this.e4 * other.e321) - (other.group1.xyzx * float4(this.group3.www, this.e423)), 
            /* e4235, e4315, e4125, e3215 */
            (float4(other.e5) * float4(this.group0.xyz, this.e321)) + (this.group2.wwwy * float4(other.group0.xyz, other.e2)) + (other.group1.yzxx * float4(this.group1.zxy, this.e235)) + float4(float3(0.0), (this.e125 * other.e3) - (this.e2 * other.e315) - (this.e3 * other.e125) - (this.e5 * other.e321)) - float4((this.group1.yzx * other.group1.zxy), this.e1 * other.e235)
        );
        Flector right_dual = Flector.from_groups(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(wedge.e1234) * right_dual.group1.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(((wedge.group3.zxy * right_dual.group1.yzx) - (wedge.group3.yzx * right_dual.group1.zxy)), wedge.e1234 * right_dual.e3215), 
            /* e235, e315, e125, e4 */
            float4(float3(0.0), -(wedge.e42 * right_dual.e4315) - (wedge.e43 * right_dual.e4125)) + float4((right_dual.group1.www * wedge.group3.xyz), wedge.e1234 * right_dual.e45) - (right_dual.group1.xyzx * float4(wedge.group3.www, wedge.e41)), 
            /* e1, e2, e3, e5 */
            (float4(right_dual.e3215) * float4(wedge.group0.xyz, wedge.e45)) + (wedge.group2.wwwy * float4(right_dual.group0.xyz, right_dual.e4315)) + (right_dual.group1.zxyx * float4(wedge.group1.yzx, wedge.e15)) + float4(float3(0.0), (wedge.e35 * right_dual.e4125) - (wedge.e4315 * right_dual.e25) - (wedge.e4125 * right_dual.e35) - (wedge.e3215 * right_dual.e45)) - float4((wedge.group1.zxy * right_dual.group1.yzx), wedge.e4235 * right_dual.e15)
        );
    }
}
extension AntiDipoleInversion: AntiRejectViaHorizonFrom<AntiLine> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: AntiLine) -> Output {
        CircleRotor wedge = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(this.e4) * other.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4((float3(this.e4) * other.group1.xyz), -(this.e1 * other.e23) - (this.e2 * other.e31) - (this.e3 * other.e12)), 
            /* e235, e315, e125, e12345 */
            float4((this.e2 * other.e35) + (this.e5 * other.e23), (this.e3 * other.e15) + (this.e5 * other.e31), (this.e1 * other.e25) + (this.e5 * other.e12), -(this.e431 * other.e25) - (this.e412 * other.e35) - (this.e415 * other.e23) - (this.e425 * other.e31) - (this.e435 * other.e12)) - float4((other.group1.xyz.yzx * this.group3.zxy), this.e423 * other.e15)
        );
        Line right_dual = Line.from_groups(
            /* e415, e425, e435, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e235, e315, e125, 0 */
            float4(other.group1.xyz * float3(-1.0), 0.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(0.0), 
            /* e415, e425, e435, e321 */
            float4(float3(1.0), 0.0) * float4(right_dual.group0.xyz, 0.0) * float4(wedge.group2.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e235, e315, e125, e4 */
            float4((float3(wedge.e12345) * right_dual.group1.xyz), -(wedge.e423 * right_dual.e415) - (wedge.e431 * right_dual.e425) - (wedge.e412 * right_dual.e435)), 
            /* e1, e2, e3, e5 */
            float4((wedge.e412 * right_dual.e315) + (wedge.e321 * right_dual.e415), (wedge.e423 * right_dual.e125) + (wedge.e321 * right_dual.e425), (wedge.e431 * right_dual.e235) + (wedge.e321 * right_dual.e435), -(wedge.e415 * right_dual.e235) - (wedge.e425 * right_dual.e315) - (wedge.e435 * right_dual.e125) - (wedge.e315 * right_dual.e425) - (wedge.e125 * right_dual.e435)) - float4((wedge.group0.xyz.yzx * right_dual.group1.xyz.zxy), wedge.e235 * right_dual.e415)
        );
    }
}
extension AntiDipoleInversion: AntiRejectViaHorizonFrom<AntiMotor> {
    associatedtype Output = VersorEven;
    func anti_reject_via_horizon_from(other: AntiMotor) -> Output {
        VersorEven wedge = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4(this.e4 * other.e23, this.e4 * other.e31, this.e4 * other.e12, -(this.e423 * other.e15) - (this.e431 * other.e25) - (this.e412 * other.e35) - (this.e415 * other.e23) - (this.e425 * other.e31) - (this.e435 * other.e12)) + float4((this.group0.xyz * other.group0.www), this.e4 * other.e3215), 
            /* e415, e425, e435, e321 */
            float4(this.e4 * other.e15, this.e4 * other.e25, this.e4 * other.e35, -(this.e1 * other.e23) - (this.e2 * other.e31) - (this.e3 * other.e12)) + (float4(other.scalar) * this.group1), 
            /* e235, e315, e125, e5 */
            float4(((float3(this.e5) * other.group0.xyz) + (float3(other.scalar) * this.group2.xyz) + (this.group3.yzx * other.group1.zxy) - (this.group3.zxy * other.group1.yzx)), this.e5 * other.scalar), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * float4(this.group3.xyz, this.e4)
        );
        Motor right_dual = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4(right_dual.e12345) * wedge.group0, 
            /* e415, e425, e435, e321 */
            float4(((float3(right_dual.e12345) * wedge.group1.xyz) + (float3(wedge.e12345) * right_dual.group0.xyz)), right_dual.e12345 * wedge.e321), 
            /* e235, e315, e125, e5 */
            (float4(right_dual.e12345) * wedge.group2) + (float4(wedge.e12345) * right_dual.group1) + float4(float3(0.0), -(right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435)), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e12345 * wedge.e1) + (right_dual.e315 * wedge.e412), (right_dual.e12345 * wedge.e2) + (right_dual.e125 * wedge.e423), (right_dual.e12345 * wedge.e3) + (right_dual.e235 * wedge.e431), -(right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412)) + (right_dual.group0 * float4(wedge.group1.www, wedge.e4)) - (wedge.group0.yzxx * float4(right_dual.group1.zxy, right_dual.e415))
        );
    }
}
extension AntiDipoleInversion: AntiRejectViaHorizonFrom<AntiPlane> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: AntiPlane) -> Output {
        DipoleInversion wedge = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(this.e4) * other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(((this.group3.yzx * other.group0.zxy) - (this.group3.zxy * other.group0.yzx)), this.e4 * other.e5), 
            /* e15, e25, e35, e1234 */
            float4(this.e1 * other.e5, this.e2 * other.e5, this.e3 * other.e5, -(this.e431 * other.e2) - (this.e412 * other.e3)) - (other.group0.xyzx * float4(this.group3.www, this.e423)), 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e425 * other.e3 * -1.0, this.e435 * other.e1 * -1.0, this.e415 * other.e2 * -1.0, (this.e315 * other.e2) + (this.e125 * other.e3)) + (float4(other.e5) * float4(this.group0.xyz, this.e321)) + (other.group0.yzxx * float4(this.group1.zxy, this.e235))
        );
        Plane right_dual = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(wedge.e1234) * right_dual.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(((wedge.group3.zxy * right_dual.group0.yzx) - (wedge.group3.yzx * right_dual.group0.zxy)), wedge.e1234 * right_dual.e3215), 
            /* e235, e315, e125, e4 */
            float4(wedge.e4235 * right_dual.e3215, wedge.e4315 * right_dual.e3215, wedge.e4125 * right_dual.e3215, -(wedge.e42 * right_dual.e4315) - (wedge.e43 * right_dual.e4125)) - (right_dual.group0.xyzx * float4(wedge.group3.www, wedge.e41)), 
            /* e1, e2, e3, e5 */
            float4(wedge.e12 * right_dual.e4315 * -1.0, wedge.e23 * right_dual.e4125 * -1.0, wedge.e31 * right_dual.e4235 * -1.0, (wedge.e25 * right_dual.e4315) + (wedge.e35 * right_dual.e4125)) + (float4(right_dual.e3215) * float4(wedge.group0.xyz, wedge.e45)) + (right_dual.group0.zxyx * float4(wedge.group1.yzx, wedge.e15))
        );
    }
}
extension AntiDipoleInversion: AntiRejectViaHorizonFrom<Circle> {
    associatedtype Output = RoundPoint;
    func anti_reject_via_horizon_from(other: Circle) -> Output {
        Sphere wedge = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4((this.e4 * other.e235) + (this.e3 * other.e425), (this.e4 * other.e315) + (this.e1 * other.e435), (this.e4 * other.e125) + (this.e2 * other.e415), -(this.e3 * other.e125) - (this.e5 * other.e321)) - (this.group3.wwwx * float4(other.group0.xyz, other.e235)) - float4((this.group3.yzx * other.group1.zxy), this.e2 * other.e315), 
            /* e1234, 0, 0, 0 */
            float4((this.e4 * other.e321) + (this.e1 * other.e423) + (this.e2 * other.e431) + (this.e3 * other.e412), 0.0, 0.0, 0.0)
        );
        Dipole right_dual = Dipole.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, 0 */
            float4(other.group2.xyz, 0.0)
        );
        return RoundPoint.from_groups(
            /* e1, e2, e3, e4 */
            float4(-(right_dual.e41 * wedge.e3215) - (right_dual.e31 * wedge.e4125), -(right_dual.e42 * wedge.e3215) - (right_dual.e12 * wedge.e4235), -(right_dual.e43 * wedge.e3215) - (right_dual.e23 * wedge.e4315), (right_dual.e43 * wedge.e4125) + (right_dual.e45 * wedge.e1234)) + (wedge.group0.yzxy * float4(right_dual.group1.zxy, right_dual.e42)) + float4((float3(wedge.e1234) * right_dual.group2.xyz), right_dual.e41 * wedge.e4235), 
            /* e5, 0, 0, 0 */
            float4(-(right_dual.e45 * wedge.e3215) - (right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125), 0.0, 0.0, 0.0)
        );
    }
}
extension AntiDipoleInversion: AntiRejectViaHorizonFrom<CircleRotor> {
    associatedtype Output = RoundPoint;
    func anti_reject_via_horizon_from(other: CircleRotor) -> Output {
        Sphere wedge = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4((this.e4 * other.e235) + (this.e3 * other.e425), (this.e4 * other.e315) + (this.e1 * other.e435), (this.e4 * other.e125) + (this.e2 * other.e415), -(this.e3 * other.e125) - (this.e5 * other.e321)) - (this.group3.yzxy * float4(other.group1.zxy, other.e315)) - float4((other.group0.xyz * this.group3.www), this.e1 * other.e235), 
            /* e1234, 0, 0, 0 */
            float4((this.e4 * other.e321) + (this.e1 * other.e423) + (this.e2 * other.e431) + (this.e3 * other.e412), 0.0, 0.0, 0.0)
        );
        AntiCircleRotor right_dual = AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return RoundPoint.from_groups(
            /* e1, e2, e3, e4 */
            float4(-(right_dual.e41 * wedge.e3215) - (right_dual.e31 * wedge.e4125), -(right_dual.e42 * wedge.e3215) - (right_dual.e12 * wedge.e4235), -(right_dual.e43 * wedge.e3215) - (right_dual.e23 * wedge.e4315), (right_dual.e43 * wedge.e4125) + (right_dual.e45 * wedge.e1234)) + (wedge.group0.yzxx * float4(right_dual.group1.zxy, right_dual.e41)) + float4((float3(wedge.e1234) * right_dual.group2.xyz), right_dual.e42 * wedge.e4315), 
            /* e5, 0, 0, 0 */
            float4(-(right_dual.e45 * wedge.e3215) - (right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125), 0.0, 0.0, 0.0)
        );
    }
}
extension AntiDipoleInversion: AntiRejectViaHorizonFrom<Dipole> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: Dipole) -> Output {
        CircleRotor wedge = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4((float3(this.e4) * other.group1.xyz) + (other.group0.xyz.yzx * this.group3.zxy) - (other.group0.xyz.zxy * this.group3.yzx), 0.0), 
            /* e415, e425, e435, e321 */
            float4((this.e4 * other.e15) + (this.e5 * other.e41), (this.e4 * other.e25) + (this.e5 * other.e42), (this.e4 * other.e35) + (this.e5 * other.e43), -(this.e2 * other.e31) - (this.e3 * other.e12)) - (this.group3.xyzx * other.group1.wwwx), 
            /* e235, e315, e125, e12345 */
            float4((this.e2 * other.e35) + (this.e5 * other.e23), (this.e3 * other.e15) + (this.e5 * other.e31), (this.e1 * other.e25) + (this.e5 * other.e12), -(this.e431 * other.e25) - (this.e412 * other.e35) - (this.e415 * other.e23) - (this.e425 * other.e31) - (this.e435 * other.e12) - (this.e321 * other.e45) - (this.e235 * other.e41) - (this.e315 * other.e42) - (this.e125 * other.e43)) - float4((other.group2.xyz.yzx * this.group3.zxy), this.e423 * other.e15)
        );
        Circle right_dual = Circle.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, 0 */
            float4(other.group2.xyz * float3(-1.0), 0.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(wedge.e12345) * right_dual.group1, 
            /* e235, e315, e125, e4 */
            float4((float3(wedge.e12345) * right_dual.group2.xyz), -(right_dual.e423 * wedge.e415) - (right_dual.e431 * wedge.e425) - (right_dual.e412 * wedge.e435) - (right_dual.e415 * wedge.e423) - (right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412)), 
            /* e1, e2, e3, e5 */
            float4((right_dual.e412 * wedge.e315) + (right_dual.e415 * wedge.e321) + (right_dual.e321 * wedge.e415) + (right_dual.e315 * wedge.e412), (right_dual.e423 * wedge.e125) + (right_dual.e425 * wedge.e321) + (right_dual.e321 * wedge.e425) + (right_dual.e125 * wedge.e423), (right_dual.e431 * wedge.e235) + (right_dual.e435 * wedge.e321) + (right_dual.e321 * wedge.e435) + (right_dual.e235 * wedge.e431), -(right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e125 * wedge.e435)) - float4((right_dual.group0.xyz.yzx * wedge.group2.zxy), right_dual.e235 * wedge.e415) - float4((right_dual.group2.xyz.zxy * wedge.group0.xyz.yzx), right_dual.e315 * wedge.e425)
        );
    }
}
extension AntiDipoleInversion: AntiRejectViaHorizonFrom<DipoleInversion> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: DipoleInversion) -> Output {
        CircleRotor wedge = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4((float3(this.e4) * other.group1.xyz) + (other.group0.xyz.yzx * this.group3.zxy) - (other.group0.xyz.zxy * this.group3.yzx), 0.0), 
            /* e415, e425, e435, e321 */
            float4((this.e4 * other.e15) + (this.e5 * other.e41), (this.e4 * other.e25) + (this.e5 * other.e42), (this.e4 * other.e35) + (this.e5 * other.e43), -(this.e2 * other.e31) - (this.e3 * other.e12)) - (this.group3.xyzx * other.group1.wwwx), 
            /* e235, e315, e125, e12345 */
            (this.group3.wwwx * float4(other.group1.xyz, other.e4235)) + float4(float3(0.0), (this.e2 * other.e4315) + (this.e3 * other.e4125) + (this.e5 * other.e1234) - (this.e431 * other.e25) - (this.e412 * other.e35) - (this.e415 * other.e23) - (this.e425 * other.e31) - (this.e435 * other.e12) - (this.e321 * other.e45) - (this.e235 * other.e41) - (this.e315 * other.e42) - (this.e125 * other.e43)) + float4((this.group3.yzx * other.group2.zxy), this.e4 * other.e3215) - (other.group2.yzxx * float4(this.group3.zxy, this.e423))
        );
        AntiDipoleInversion right_dual = AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(wedge.e12345) * right_dual.group1, 
            /* e235, e315, e125, e4 */
            float4((float3(wedge.e12345) * right_dual.group2.xyz), (right_dual.e4 * wedge.e12345) - (right_dual.e423 * wedge.e415) - (right_dual.e431 * wedge.e425) - (right_dual.e412 * wedge.e435) - (right_dual.e415 * wedge.e423) - (right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412)), 
            /* e1, e2, e3, e5 */
            float4((right_dual.e415 * wedge.e321) + (right_dual.e321 * wedge.e415) + (right_dual.e315 * wedge.e412) + (right_dual.e1 * wedge.e12345), (right_dual.e425 * wedge.e321) + (right_dual.e321 * wedge.e425) + (right_dual.e125 * wedge.e423) + (right_dual.e2 * wedge.e12345), (right_dual.e435 * wedge.e321) + (right_dual.e321 * wedge.e435) + (right_dual.e235 * wedge.e431) + (right_dual.e3 * wedge.e12345), -(right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435)) + (wedge.group2.yzxw * float4(right_dual.group0.xyz.zxy, right_dual.e5)) - (wedge.group2.zxyx * float4(right_dual.group0.xyz.yzx, right_dual.e415)) - float4((wedge.group0.xyz.yzx * right_dual.group2.zxy), right_dual.e425 * wedge.e315)
        );
    }
}
extension AntiDipoleInversion: AntiRejectViaHorizonFrom<DualNum> {
    associatedtype Output = AntiFlector;
    func anti_reject_via_horizon_from(other: DualNum) -> Output {
        Flector wedge = Flector.from_groups(
            /* e15, e25, e35, e45 */
            float4(other.e5) * float4(this.group3.xyz, this.e4), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.e5) * float4(this.group0.xyz, this.e321)
        );
        AntiDualNum right_dual = AntiDualNum.from_groups(
            /* e3215, scalar, 0, 0 */
            float4(other.group0.xy * float2(-1.0), 0.0, 0.0)
        );
        return AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            float4(right_dual.group0.xy.xx, right_dual.e3215, 0.0) * float4(float3(1.0), 0.0) * float4(wedge.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e1, e2, e3, e5 */
            float4(float3(0.0), right_dual.e3215 * wedge.e45)
        );
    }
}
extension AntiDipoleInversion: AntiRejectViaHorizonFrom<FlatPoint> {
    associatedtype Output = AntiFlector;
    func anti_reject_via_horizon_from(other: FlatPoint) -> Output {
        Motor wedge = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4(this.e4 * other.e15, this.e4 * other.e25, this.e4 * other.e35, -(this.e431 * other.e25) - (this.e412 * other.e35) - (this.e321 * other.e45)) - (other.group0.wwwx * float4(this.group3.xyz, this.e423)), 
            /* e235, e315, e125, e5 */
            float4(((this.group3.yzx * other.group0.zxy) - (this.group3.zxy * other.group0.yzx)), 0.0)
        );
        AntiFlatPoint right_dual = AntiFlatPoint.from_groups(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            float4(wedge.e12345) * right_dual.group0, 
            /* e1, e2, e3, e5 */
            float4((right_dual.group0.www * wedge.group0.xyz), -(right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435))
        );
    }
}
extension AntiDipoleInversion: AntiRejectViaHorizonFrom<Flector> {
    associatedtype Output = AntiFlector;
    func anti_reject_via_horizon_from(other: Flector) -> Output {
        Motor wedge = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            (float4(this.e4) * float4(other.group0.xyz, other.e3215)) + float4(float3(0.0), (this.e1 * other.e4235) + (this.e2 * other.e4315) + (this.e3 * other.e4125) - (this.e431 * other.e25) - (this.e412 * other.e35) - (this.e321 * other.e45)) - (other.group0.wwwx * float4(this.group3.xyz, this.e423)), 
            /* e235, e315, e125, e5 */
            float4(((this.group3.yzx * other.group0.zxy) - (this.group3.zxy * other.group0.yzx)), 0.0)
        );
        AntiFlector right_dual = AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            float4(wedge.e12345) * right_dual.group0, 
            /* e1, e2, e3, e5 */
            float4(right_dual.e1 * wedge.e12345, right_dual.e2 * wedge.e12345, right_dual.e3 * wedge.e12345, -(right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435)) + (wedge.group0 * float4(right_dual.group0.www, right_dual.e5))
        );
    }
}
extension AntiDipoleInversion: AntiRejectViaHorizonFrom<Line> {
    associatedtype Output = AntiPlane;
    func anti_reject_via_horizon_from(other: Line) -> Output {
        Plane wedge = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4((this.e4 * other.e235) + (this.e3 * other.e425), (this.e4 * other.e315) + (this.e1 * other.e435), (this.e4 * other.e125) + (this.e2 * other.e415), -(this.e2 * other.e315) - (this.e3 * other.e125)) - (this.group3.yzxx * float4(other.group0.xyz.zxy, other.e235))
        );
        AntiLine right_dual = AntiLine.from_groups(
            /* e23, e31, e12, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e15, e25, e35, 0 */
            float4(other.group1.xyz, 0.0)
        );
        return AntiPlane.from_groups(
            /* e1, e2, e3, e5 */
            float4(right_dual.e12 * wedge.e4315, right_dual.e23 * wedge.e4125, right_dual.e31 * wedge.e4235, -(right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125)) - (wedge.group0.zxyx * float4(right_dual.group0.xyz.yzx, right_dual.e15))
        );
    }
}
extension AntiDipoleInversion: AntiRejectViaHorizonFrom<Motor> {
    associatedtype Output = AntiFlector;
    func anti_reject_via_horizon_from(other: Motor) -> Output {
        Flector wedge = Flector.from_groups(
            /* e15, e25, e35, e45 */
            float4(other.e5) * float4(this.group3.xyz, this.e4), 
            /* e4235, e4315, e4125, e3215 */
            float4((this.e4 * other.e235) + (this.e3 * other.e425), (this.e4 * other.e315) + (this.e1 * other.e435), (this.e4 * other.e125) + (this.e2 * other.e415), -(this.e2 * other.e315) - (this.e3 * other.e125)) + (float4(other.e5) * float4(this.group0.xyz, this.e321)) - (this.group3.yzxx * float4(other.group0.zxy, other.e235))
        );
        AntiMotor right_dual = AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            float4(float3(1.0), 0.0) * float4(right_dual.group1.www, 0.0) * float4(wedge.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e1, e2, e3, e5 */
            float4(float3(0.0), -(right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125)) + float4((right_dual.group0.zxy * wedge.group1.yzx), right_dual.e3215 * wedge.e45) - (wedge.group1.zxyx * float4(right_dual.group0.yzx, right_dual.e15))
        );
    }
}
extension AntiDipoleInversion: AntiRejectViaHorizonFrom<MultiVector> {
    associatedtype Output = MultiVector;
    func anti_reject_via_horizon_from(other: MultiVector) -> Output {
        MultiVector wedge = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(0.0, (this.e4 * other.e3215) + (this.e1 * other.e4235) + (this.e2 * other.e4315) + (this.e3 * other.e4125) + (this.e5 * other.e1234) - (this.e423 * other.e15) - (this.e431 * other.e25) - (this.e412 * other.e35) - (this.e415 * other.e23) - (this.e425 * other.e31) - (this.e435 * other.e12) - (this.e321 * other.e45) - (this.e235 * other.e41) - (this.e315 * other.e42) - (this.e125 * other.e43)), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * float4(this.group3.xyz, this.e4), 
            /* e5, 0, 0, 0 */
            float4(this.e5 * other.scalar, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            (float4(other.e5) * float4(this.group3.xyz, this.e4)) - (float4(this.e5) * other.group1), 
            /* e41, e42, e43, 0 */
            float4((float3(this.e4) * other.group1.xyz) - (float3(other.e4) * this.group3.xyz), 0.0), 
            /* e23, e31, e12, 0 */
            float4((this.group3.yzx * other.group1.zxy) - (this.group3.zxy * other.group1.yzx), 0.0), 
            /* e415, e425, e435, e321 */
            float4((this.e4 * other.e15) + (this.e5 * other.e41), (this.e4 * other.e25) + (this.e5 * other.e42), (this.e4 * other.e35) + (this.e5 * other.e43), -(this.e2 * other.e31) - (this.e3 * other.e12)) + (float4(other.scalar) * this.group1) - float4((other.group3.www * this.group3.xyz), this.e1 * other.e23), 
            /* e423, e431, e412, 0 */
            float4((float3(this.e4) * other.group5.xyz) + (float3(other.scalar) * this.group0.xyz) + (other.group4.xyz.yzx * this.group3.zxy) - (other.group4.xyz.zxy * this.group3.yzx), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(this.e5) * other.group5.xyz) + (float3(other.scalar) * this.group2.xyz) + (this.group3.yzx * other.group3.zxy) - (this.group3.zxy * other.group3.yzx), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            (float4(other.e5) * float4(this.group0.xyz, this.e321)) + (other.group1.yzxy * float4(this.group1.zxy, this.e315)) + float4((other.group8.xyz * this.group2.www), this.e235 * other.e1) + float4((this.group3.zxy * other.group6.yzx), this.e125 * other.e3) - (this.group3.yzxw * other.group6.zxyw) - (this.group3.wwwx * float4(other.group7.xyz, other.e235)) - float4((this.group1.yzx * other.group1.zxy), this.e2 * other.e315) - float4((other.group1.www * this.group2.xyz), this.e3 * other.e125), 
            /* e1234, 0, 0, 0 */
            float4((this.e4 * other.e321) + (this.e1 * other.e423) + (this.e2 * other.e431) + (this.e3 * other.e412) - (this.e423 * other.e1) - (this.e431 * other.e2) - (this.e412 * other.e3) - (this.e321 * other.e4), 0.0, 0.0, 0.0)
        );
        MultiVector right_dual = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(other.group0.xy.yx * float2(-1.0, 1.0), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5, 0, 0, 0 */
            float4(other.e3215, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43, 0 */
            float4(other.group7.xyz, 0.0), 
            /* e23, e31, e12, 0 */
            float4(other.group6.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412, 0 */
            float4(other.group4.xyz * float3(-1.0), 0.0), 
            /* e235, e315, e125, 0 */
            float4(other.group3.xyz * float3(-1.0), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        return MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2((right_dual.scalar * wedge.e12345) + (right_dual.e12345 * wedge.scalar) + (right_dual.e1 * wedge.e4235) + (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) + (right_dual.e4 * wedge.e3215) + (right_dual.e5 * wedge.e1234) + (right_dual.e4235 * wedge.e1) + (right_dual.e4315 * wedge.e2) + (right_dual.e4125 * wedge.e3) + (right_dual.e3215 * wedge.e4) + (right_dual.e1234 * wedge.e5) - (right_dual.e15 * wedge.e423) - (right_dual.e25 * wedge.e431) - (right_dual.e35 * wedge.e412) - (right_dual.e45 * wedge.e321) - (right_dual.e41 * wedge.e235) - (right_dual.e42 * wedge.e315) - (right_dual.e43 * wedge.e125) - (right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e321 * wedge.e45) - (right_dual.e423 * wedge.e15) - (right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43), right_dual.e12345 * wedge.e12345), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e15 * wedge.e1234) + (right_dual.e415 * wedge.e321) + (right_dual.e321 * wedge.e415) + (right_dual.e4125 * wedge.e31), (right_dual.e25 * wedge.e1234) + (right_dual.e425 * wedge.e321) + (right_dual.e321 * wedge.e425) + (right_dual.e4235 * wedge.e12), (right_dual.e35 * wedge.e1234) + (right_dual.e435 * wedge.e321) + (right_dual.e321 * wedge.e435) + (right_dual.e4315 * wedge.e23), -(right_dual.e415 * wedge.e423) - (right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412) - (right_dual.e1234 * wedge.e45)) + (float4(right_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_dual.group1) + (wedge.group9.yzxx * float4(right_dual.group5.xyz.zxy, right_dual.e41)) + float4((wedge.group4.xyz * right_dual.group9.www), right_dual.e45 * wedge.e1234) + float4((right_dual.group7.xyz.zxy * wedge.group8.xyz.yzx), right_dual.e42 * wedge.e4315) + float4((right_dual.group8.xyz.yzx * wedge.group7.xyz.zxy), right_dual.e43 * wedge.e4125) - (right_dual.group9.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((float3(right_dual.e1234) * wedge.group3.xyz), right_dual.e4125 * wedge.e43) - float4((right_dual.group4.xyz * wedge.group9.www), right_dual.e423 * wedge.e415) - float4((right_dual.group5.xyz.yzx * wedge.group9.zxy), right_dual.e431 * wedge.e425) - float4((right_dual.group7.xyz.yzx * wedge.group8.xyz.zxy), right_dual.e412 * wedge.e435) - float4((right_dual.group8.xyz.zxy * wedge.group7.xyz.yzx), right_dual.e4235 * wedge.e41), 
            /* e5, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e5) + (right_dual.e5 * wedge.e12345) + (right_dual.e4235 * wedge.e15) + (right_dual.e4315 * wedge.e25) + (right_dual.e4125 * wedge.e35) + (right_dual.e3215 * wedge.e45) - (right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125) - (right_dual.e45 * wedge.e3215) - (right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435), 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4((right_dual.e415 * wedge.e3215) + (right_dual.e315 * wedge.e4125) + (right_dual.e4125 * wedge.e315) + (right_dual.e3215 * wedge.e415), (right_dual.e425 * wedge.e3215) + (right_dual.e125 * wedge.e4235) + (right_dual.e4235 * wedge.e125) + (right_dual.e3215 * wedge.e425), (right_dual.e435 * wedge.e3215) + (right_dual.e235 * wedge.e4315) + (right_dual.e4315 * wedge.e235) + (right_dual.e3215 * wedge.e435), -(right_dual.e435 * wedge.e4125) - (right_dual.e4235 * wedge.e415) - (right_dual.e4315 * wedge.e425) - (right_dual.e4125 * wedge.e435)) + (float4(right_dual.e12345) * wedge.group3) + (float4(wedge.e12345) * right_dual.group3) - (wedge.group9.yzxx * float4(right_dual.group8.xyz.zxy, right_dual.e415)) - float4((wedge.group8.xyz.zxy * right_dual.group9.yzx), right_dual.e425 * wedge.e4315), 
            /* e41, e42, e43, 0 */
            float4((float3(right_dual.e12345) * wedge.group4.xyz) + (float3(right_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_dual.group4.xyz) + (float3(wedge.e1234) * right_dual.group6.xyz) + (right_dual.group7.xyz.zxy * wedge.group9.yzx) + (wedge.group7.xyz.zxy * right_dual.group9.yzx) - (right_dual.group7.xyz.yzx * wedge.group9.zxy) - (wedge.group7.xyz.yzx * right_dual.group9.zxy), 0.0), 
            /* e23, e31, e12, 0 */
            float4((float3(right_dual.e12345) * wedge.group5.xyz) + (float3(right_dual.e3215) * wedge.group7.xyz) + (float3(right_dual.e1234) * wedge.group8.xyz) + (float3(wedge.e12345) * right_dual.group5.xyz) + (float3(wedge.e3215) * right_dual.group7.xyz) + (float3(wedge.e1234) * right_dual.group8.xyz) - (float3(right_dual.e321) * wedge.group9.xyz) - (float3(wedge.e321) * right_dual.group9.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            (float4(right_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_dual.group6) + (right_dual.group9.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - float4((right_dual.group9.zxy * wedge.group9.yzx), right_dual.e1234 * wedge.e3215), 
            /* e423, e431, e412, 0 */
            float4((float3(right_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_dual.group7.xyz) + (float3(wedge.e1234) * right_dual.group9.xyz) - (float3(right_dual.e1234) * wedge.group9.xyz), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(right_dual.e12345) * wedge.group8.xyz) + (float3(right_dual.e3215) * wedge.group9.xyz) + (float3(wedge.e12345) * right_dual.group8.xyz) - (float3(wedge.e3215) * right_dual.group9.xyz), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            (float4(right_dual.e12345) * wedge.group9) + (float4(wedge.e12345) * right_dual.group9), 
            /* e1234, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e1234) + (right_dual.e1234 * wedge.e12345), 0.0, 0.0, 0.0)
        );
    }
}
extension AntiDipoleInversion: AntiRejectViaHorizonFrom<Plane> {
    associatedtype Output = AntiPlane;
    func anti_reject_via_horizon_from(other: Plane) -> Output {
        return AntiPlane.from_groups(
            /* e1, e2, e3, e5 */
            float4((this.e4 * other.e3215) + (this.e1 * other.e4235) + (this.e2 * other.e4315) + (this.e3 * other.e4125)) * float4(other.e4235 * -1.0, other.e4315 * -1.0, other.e4125 * -1.0, other.e3215)
        );
    }
}
extension AntiDipoleInversion: AntiRejectViaHorizonFrom<RoundPoint> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: RoundPoint) -> Output {
        DipoleInversion wedge = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4((float3(this.e4) * other.group0.xyz) - (float3(other.e4) * this.group3.xyz), 0.0), 
            /* e23, e31, e12, e45 */
            float4((this.group3.yzx * other.group0.zxy), this.e4 * other.e5) - (this.group3.zxyw * other.group0.yzxw), 
            /* e15, e25, e35, e1234 */
            float4(this.e1 * other.e5, this.e2 * other.e5, this.e3 * other.e5, -(this.e431 * other.e2) - (this.e412 * other.e3) - (this.e321 * other.e4)) - (other.group0.xyzx * float4(this.group3.www, this.e423)), 
            /* e4235, e4315, e4125, e3215 */
            float4(-(this.e425 * other.e3) - (this.e235 * other.e4), -(this.e435 * other.e1) - (this.e315 * other.e4), -(this.e415 * other.e2) - (this.e125 * other.e4), (this.e315 * other.e2) + (this.e125 * other.e3)) + (float4(other.e5) * float4(this.group0.xyz, this.e321)) + (other.group0.yzxx * float4(this.group1.zxy, this.e235))
        );
        Sphere right_dual = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4((float3(wedge.e1234) * right_dual.group0.xyz) - (float3(right_dual.e1234) * wedge.group3.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            (right_dual.group0.yzxw * float4(wedge.group3.zxy, wedge.e1234)) - (wedge.group3.yzxw * float4(right_dual.group0.zxy, right_dual.e1234)), 
            /* e235, e315, e125, e4 */
            float4(wedge.e4235 * right_dual.e3215, wedge.e4315 * right_dual.e3215, wedge.e4125 * right_dual.e3215, -(wedge.e42 * right_dual.e4315) - (wedge.e43 * right_dual.e4125) - (wedge.e45 * right_dual.e1234)) - (right_dual.group0.xyzx * float4(wedge.group3.www, wedge.e41)), 
            /* e1, e2, e3, e5 */
            float4(-(wedge.e12 * right_dual.e4315) - (wedge.e15 * right_dual.e1234), -(wedge.e23 * right_dual.e4125) - (wedge.e25 * right_dual.e1234), -(wedge.e31 * right_dual.e4235) - (wedge.e35 * right_dual.e1234), (wedge.e25 * right_dual.e4315) + (wedge.e35 * right_dual.e4125)) + (float4(right_dual.e3215) * float4(wedge.group0.xyz, wedge.e45)) + (right_dual.group0.zxyx * float4(wedge.group1.yzx, wedge.e15))
        );
    }
}
extension AntiDipoleInversion: AntiRejectViaHorizonFrom<Scalar> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: Scalar) -> Output {
        AntiDipoleInversion wedge = AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(other.scalar) * this.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(other.scalar) * this.group1, 
            /* e235, e315, e125, e4 */
            float4(other.scalar) * this.group2, 
            /* e1, e2, e3, e5 */
            float4(other.scalar) * this.group3
        );
        AntiScalar right_dual = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(other.scalar, 0.0, 0.0, 0.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(right_dual.e12345) * wedge.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(right_dual.e12345) * wedge.group1, 
            /* e235, e315, e125, e4 */
            float4(right_dual.e12345) * wedge.group2, 
            /* e1, e2, e3, e5 */
            float4(right_dual.e12345) * wedge.group3
        );
    }
}
extension AntiDipoleInversion: AntiRejectViaHorizonFrom<Sphere> {
    associatedtype Output = RoundPoint;
    func anti_reject_via_horizon_from(other: Sphere) -> Output {
        AntiScalar wedge = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4((this.e4 * other.e3215) + (this.e1 * other.e4235) + (this.e2 * other.e4315) + (this.e3 * other.e4125) + (this.e5 * other.e1234), 0.0, 0.0, 0.0)
        );
        RoundPoint right_dual = RoundPoint.from_groups(
            /* e1, e2, e3, e4 */
            float4(other.group0.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5, 0, 0, 0 */
            float4(other.e3215, 0.0, 0.0, 0.0)
        );
        return RoundPoint.from_groups(
            /* e1, e2, e3, e4 */
            float4(wedge.e12345) * right_dual.group0, 
            /* e5, 0, 0, 0 */
            float4(wedge.e12345 * right_dual.e5, 0.0, 0.0, 0.0)
        );
    }
}
extension AntiDipoleInversion: AntiRejectViaHorizonFrom<VersorEven> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: VersorEven) -> Output {
        DipoleInversion wedge = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4((float3(this.e4) * other.group3.xyz) - (float3(other.e4) * this.group3.xyz), 0.0), 
            /* e23, e31, e12, e45 */
            float4((this.group3.yzx * other.group3.zxy), this.e4 * other.e5) - (this.group3.zxyw * other.group3.yzxw), 
            /* e15, e25, e35, e1234 */
            float4(float3(0.0), (this.e1 * other.e423) + (this.e2 * other.e431) + (this.e3 * other.e412) - (this.e431 * other.e2) - (this.e412 * other.e3) - (this.e321 * other.e4)) + float4((other.group2.www * this.group3.xyz), this.e4 * other.e321) - (other.group3.xyzx * float4(this.group3.www, this.e423)), 
            /* e4235, e4315, e4125, e3215 */
            (float4(other.e5) * float4(this.group0.xyz, this.e321)) + (this.group2.wwwy * float4(other.group2.xyz, other.e2)) + (other.group3.yzxx * float4(this.group1.zxy, this.e235)) + float4((this.group3.zxy * other.group1.yzx), this.e125 * other.e3) - (float4(this.e5) * float4(other.group0.xyz, other.e321)) - (this.group3.yzxz * float4(other.group1.zxy, other.e125)) - float4((this.group1.yzx * other.group3.zxy), this.e1 * other.e235) - float4((other.group3.www * this.group2.xyz), this.e2 * other.e315)
        );
        VersorOdd right_dual = VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4((float3(wedge.e1234) * right_dual.group3.xyz) - (float3(right_dual.e1234) * wedge.group3.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            (right_dual.group3.yzxw * float4(wedge.group3.zxy, wedge.e1234)) - (wedge.group3.yzxw * float4(right_dual.group3.zxy, right_dual.e1234)), 
            /* e235, e315, e125, e4 */
            float4(float3(0.0), (wedge.e4235 * right_dual.e41) + (wedge.e4315 * right_dual.e42) + (wedge.e4125 * right_dual.e43) - (wedge.e42 * right_dual.e4315) - (wedge.e43 * right_dual.e4125) - (wedge.e45 * right_dual.e1234)) + float4((right_dual.group3.www * wedge.group3.xyz), wedge.e1234 * right_dual.e45) - (right_dual.group3.xyzx * float4(wedge.group3.www, wedge.e41)), 
            /* e1, e2, e3, e5 */
            (float4(right_dual.e3215) * float4(wedge.group0.xyz, wedge.e45)) + (wedge.group2.wwwy * float4(right_dual.group2.xyz, right_dual.e4315)) + (right_dual.group3.zxyx * float4(wedge.group1.yzx, wedge.e15)) + float4((wedge.group3.yzx * right_dual.group1.zxy), wedge.e35 * right_dual.e4125) - (float4(wedge.e3215) * float4(right_dual.group0.xyz, right_dual.e45)) - (wedge.group3.zxyz * float4(right_dual.group1.yzx, right_dual.e35)) - (right_dual.group2.wwwy * float4(wedge.group2.xyz, wedge.e4315)) - float4((wedge.group1.zxy * right_dual.group3.yzx), wedge.e4235 * right_dual.e15)
        );
    }
}
extension AntiDipoleInversion: AntiRejectViaHorizonFrom<VersorOdd> {
    associatedtype Output = VersorEven;
    func anti_reject_via_horizon_from(other: VersorOdd) -> Output {
        VersorEven wedge = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            (this.group3.zxyy * float4(other.group0.yzx, other.e4315)) + float4(float3(0.0), (this.e3 * other.e4125) + (this.e5 * other.e1234) - (this.e431 * other.e25) - (this.e412 * other.e35) - (this.e415 * other.e23) - (this.e425 * other.e31) - (this.e435 * other.e12) - (this.e321 * other.e45) - (this.e235 * other.e41) - (this.e315 * other.e42) - (this.e125 * other.e43)) + float4((this.group0.xyz * other.group0.www), this.e4 * other.e3215) + float4((this.group2.www * other.group1.xyz), this.e1 * other.e4235) - float4((this.group3.yzx * other.group0.zxy), this.e423 * other.e15), 
            /* e415, e425, e435, e321 */
            float4((this.e4 * other.e15) + (this.e5 * other.e41), (this.e4 * other.e25) + (this.e5 * other.e42), (this.e4 * other.e35) + (this.e5 * other.e43), -(this.e2 * other.e31) - (this.e3 * other.e12)) + (float4(other.scalar) * this.group1) - (this.group3.xyzx * other.group1.wwwx), 
            /* e235, e315, e125, e5 */
            float4(((float3(this.e5) * other.group1.xyz) + (float3(other.scalar) * this.group2.xyz) + (this.group3.yzx * other.group2.zxy) - (this.group3.zxy * other.group2.yzx)), this.e5 * other.scalar), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * float4(this.group3.xyz, this.e4)
        );
        VersorEven right_dual = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4(((float3(right_dual.e12345) * wedge.group0.xyz) + (float3(wedge.e12345) * right_dual.group0.xyz)), right_dual.e12345 * wedge.e12345), 
            /* e415, e425, e435, e321 */
            (float4(right_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_dual.group1), 
            /* e235, e315, e125, e5 */
            (float4(right_dual.e12345) * wedge.group2) + (float4(wedge.e12345) * right_dual.group2) + float4(float3(0.0), -(right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435)), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e415 * wedge.e321) + (right_dual.e321 * wedge.e415) + (right_dual.e315 * wedge.e412) + (right_dual.e1 * wedge.e12345), (right_dual.e425 * wedge.e321) + (right_dual.e321 * wedge.e425) + (right_dual.e125 * wedge.e423) + (right_dual.e2 * wedge.e12345), (right_dual.e435 * wedge.e321) + (right_dual.e321 * wedge.e435) + (right_dual.e235 * wedge.e431) + (right_dual.e3 * wedge.e12345), -(right_dual.e412 * wedge.e435) - (right_dual.e415 * wedge.e423) - (right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412)) + (right_dual.group0.zxyw * float4(wedge.group2.yzx, wedge.e4)) + float4((right_dual.group0.www * wedge.group3.xyz), right_dual.e4 * wedge.e12345) - (right_dual.group0.yzxx * float4(wedge.group2.zxy, wedge.e415)) - float4((right_dual.group2.zxy * wedge.group0.yzx), right_dual.e431 * wedge.e425)
        );
    }
}
extension AntiDualNum {
    // Fancy infix trick
    func operator/(_rhs: AntiRejectViaHorizonFromInfix) -> AntiRejectViaHorizonFromInfixPartial<AntiDualNum> {
        return AntiRejectViaHorizonFromInfixPartial { a: this };
    }
}
extension AntiDualNum: AntiRejectViaHorizonFrom<AntiCircleRotor> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: AntiCircleRotor) -> Output {
        VersorOdd wedge = VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            float4(this.scalar) * float4(other.group0.xyz, other.scalar), 
            /* e23, e31, e12, e45 */
            float4(this.scalar) * other.group1, 
            /* e15, e25, e35, e1234 */
            float4(this.group0.xy.yy, this.scalar, 0.0) * float4(float3(1.0), 0.0) * float4(other.group2.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(float3(0.0), other.scalar * this.e3215)
        );
        CircleRotor right_dual = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            float4((right_dual.e415 * wedge.e1234) + (right_dual.e12345 * wedge.e41), (right_dual.e425 * wedge.e1234) + (right_dual.e12345 * wedge.e42), (right_dual.e435 * wedge.e1234) + (right_dual.e12345 * wedge.e43), -(right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e321 * wedge.e45) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43)) + float4((right_dual.group0.xyz.zxy * wedge.group3.yzx), right_dual.e12345 * wedge.scalar) - float4((right_dual.group0.xyz.yzx * wedge.group3.zxy), right_dual.e423 * wedge.e15), 
            /* e23, e31, e12, e45 */
            float4((right_dual.e235 * wedge.e1234) + (right_dual.e12345 * wedge.e23), (right_dual.e315 * wedge.e1234) + (right_dual.e12345 * wedge.e31), (right_dual.e125 * wedge.e1234) + (right_dual.e12345 * wedge.e12), -(right_dual.e425 * wedge.e4315) - (right_dual.e435 * wedge.e4125)) + float4((right_dual.group0.xyz * wedge.group3.www), right_dual.e12345 * wedge.e45) - (right_dual.group1.wwwx * wedge.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4((float3(right_dual.e12345) * wedge.group2.xyz), 0.0) + float4((float3(wedge.e3215) * right_dual.group1.xyz), 0.0) + float4((right_dual.group2.yzx * wedge.group3.zxy), 0.0) - float4((right_dual.group2.zxy * wedge.group3.yzx), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * wedge.group3
        );
    }
}
extension AntiDualNum: AntiRejectViaHorizonFrom<AntiDipoleInversion> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: AntiDipoleInversion) -> Output {
        VersorEven wedge = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4(this.group0.xy.yy, this.scalar, this.e3215) * float4(other.group0.xyz, other.e4), 
            /* e415, e425, e435, e321 */
            float4(this.scalar) * other.group1, 
            /* e235, e315, e125, e5 */
            float4(this.scalar) * float4(other.group2.xyz, other.e5), 
            /* e1, e2, e3, e4 */
            float4(this.scalar) * float4(other.group3.xyz, other.e4)
        );
        DipoleInversion right_dual = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            (right_dual.group3.yzxy * float4(wedge.group0.zxy, wedge.e2)) + float4(float3(0.0), (right_dual.e4125 * wedge.e3) + (right_dual.e3215 * wedge.e4) - (right_dual.e42 * wedge.e315) - (right_dual.e43 * wedge.e125) - (right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435) - (right_dual.e45 * wedge.e321) - (right_dual.e15 * wedge.e423) - (right_dual.e25 * wedge.e431) - (right_dual.e35 * wedge.e412)) + float4((right_dual.group0.xyz * wedge.group0.www), right_dual.e1234 * wedge.e5) + float4((right_dual.group2.www * wedge.group1.xyz), right_dual.e4235 * wedge.e1) - float4((right_dual.group3.zxy * wedge.group0.yzx), right_dual.e41 * wedge.e235), 
            /* e23, e31, e12, e45 */
            float4((right_dual.e1234 * wedge.e235) + (right_dual.e3215 * wedge.e423), (right_dual.e1234 * wedge.e315) + (right_dual.e3215 * wedge.e431), (right_dual.e1234 * wedge.e125) + (right_dual.e3215 * wedge.e412), -(right_dual.e4315 * wedge.e425) - (right_dual.e4125 * wedge.e435)) + (float4(wedge.e12345) * right_dual.group1) - (right_dual.group3.xyzx * wedge.group1.wwwx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_dual.e3215) * wedge.group1.xyz) + (float3(wedge.e12345) * right_dual.group2.xyz) + (right_dual.group3.zxy * wedge.group2.yzx) - (right_dual.group3.yzx * wedge.group2.zxy)), right_dual.e1234 * wedge.e12345), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_dual.group3
        );
    }
}
extension AntiDualNum: AntiRejectViaHorizonFrom<AntiDualNum> {
    associatedtype Output = AntiDualNum;
    func anti_reject_via_horizon_from(other: AntiDualNum) -> Output {
        return AntiDualNum.from_groups(
            /* e3215, scalar, 0, 0 */
            float4(float2(other.scalar) * float2((other.e3215 * this.scalar) + (other.scalar * this.e3215), other.scalar * this.scalar), 0.0, 0.0)
        );
    }
}
extension AntiDualNum: AntiRejectViaHorizonFrom<AntiFlatPoint> {
    associatedtype Output = Scalar;
    func anti_reject_via_horizon_from(other: AntiFlatPoint) -> Output {
        return Scalar.from_groups(
            /* scalar, 0, 0, 0 */
            float4(float4(other.group0.xyz, other.e321 * -1.0)[3] * this.scalar * other.e321 * -1.0, 0.0, 0.0, 0.0)
        );
    }
}
extension AntiDualNum: AntiRejectViaHorizonFrom<AntiFlector> {
    associatedtype Output = AntiMotor;
    func anti_reject_via_horizon_from(other: AntiFlector) -> Output {
        AntiFlector wedge = AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            float4(this.scalar) * other.group0, 
            /* e1, e2, e3, e5 */
            float4(this.scalar) * other.group1
        );
        Flector right_dual = Flector.from_groups(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            float4((wedge.group0.www * right_dual.group1.xyz * float3(-1.0)), (wedge.e1 * right_dual.e4235) + (wedge.e2 * right_dual.e4315) + (wedge.e3 * right_dual.e4125) - (wedge.e321 * right_dual.e45)), 
            /* e15, e25, e35, e3215 */
            float4(((wedge.group0.yzx * right_dual.group1.zxy) - (wedge.group0.zxy * right_dual.group1.yzx)), 0.0)
        );
    }
}
extension AntiDualNum: AntiRejectViaHorizonFrom<AntiLine> {
    associatedtype Output = Scalar;
    func anti_reject_via_horizon_from(other: AntiLine) -> Output {
        AntiLine wedge = AntiLine.from_groups(
            /* e23, e31, e12, 0 */
            float4(float3(this.scalar) * other.group0.xyz, 0.0), 
            /* e15, e25, e35, 0 */
            float4(float3(this.scalar) * other.group1.xyz, 0.0)
        );
        Line right_dual = Line.from_groups(
            /* e415, e425, e435, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e235, e315, e125, 0 */
            float4(other.group1.xyz * float3(-1.0), 0.0)
        );
        return Scalar.from_groups(
            /* scalar, 0, 0, 0 */
            float4(-(wedge.e23 * right_dual.e415) - (wedge.e31 * right_dual.e425) - (wedge.e12 * right_dual.e435), 0.0, 0.0, 0.0)
        );
    }
}
extension AntiDualNum: AntiRejectViaHorizonFrom<AntiMotor> {
    associatedtype Output = AntiMotor;
    func anti_reject_via_horizon_from(other: AntiMotor) -> Output {
        AntiMotor wedge = AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            float4(this.scalar) * other.group0, 
            /* e15, e25, e35, e3215 */
            float4(this.group0.xy.yy, this.scalar, (this.e3215 * other.scalar) + (this.scalar * other.e3215)) * float4(other.group1.xyz, 1.0)
        );
        Motor right_dual = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            float4((float3(right_dual.e12345) * wedge.group0.xyz), (wedge.scalar * right_dual.e12345) - (wedge.e23 * right_dual.e415) - (wedge.e31 * right_dual.e425) - (wedge.e12 * right_dual.e435)), 
            /* e15, e25, e35, e3215 */
            float4(((float3(wedge.e3215) * right_dual.group0.xyz) + (float3(right_dual.e12345) * wedge.group1.xyz)), wedge.e3215 * right_dual.e12345)
        );
    }
}
extension AntiDualNum: AntiRejectViaHorizonFrom<AntiPlane> {
    associatedtype Output = Scalar;
    func anti_reject_via_horizon_from(other: AntiPlane) -> Output {
        AntiPlane wedge = AntiPlane.from_groups(
            /* e1, e2, e3, e5 */
            float4(this.scalar) * other.group0
        );
        Plane right_dual = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return Scalar.from_groups(
            /* scalar, 0, 0, 0 */
            float4((wedge.e1 * right_dual.e4235) + (wedge.e2 * right_dual.e4315) + (wedge.e3 * right_dual.e4125), 0.0, 0.0, 0.0)
        );
    }
}
extension AntiDualNum: AntiRejectViaHorizonFrom<AntiScalar> {
    associatedtype Output = Scalar;
    func anti_reject_via_horizon_from(other: AntiScalar) -> Output {
        return Scalar.from_groups(
            /* scalar, 0, 0, 0 */
            float4(this.scalar * powi(other.e12345, 2) * -1.0, 0.0, 0.0, 0.0)
        );
    }
}
extension AntiDualNum: AntiRejectViaHorizonFrom<Circle> {
    associatedtype Output = Scalar;
    func anti_reject_via_horizon_from(other: Circle) -> Output {
        Circle wedge = Circle.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(this.scalar) * other.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(this.scalar) * other.group1, 
            /* e235, e315, e125, 0 */
            float4(float3(this.scalar) * other.group2.xyz, 0.0)
        );
        Dipole right_dual = Dipole.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, 0 */
            float4(other.group2.xyz, 0.0)
        );
        return Scalar.from_groups(
            /* scalar, 0, 0, 0 */
            float4(-(wedge.e423 * right_dual.e15) - (wedge.e431 * right_dual.e25) - (wedge.e412 * right_dual.e35) - (wedge.e415 * right_dual.e23) - (wedge.e425 * right_dual.e31) - (wedge.e435 * right_dual.e12) - (wedge.e321 * right_dual.e45) - (wedge.e235 * right_dual.e41) - (wedge.e315 * right_dual.e42) - (wedge.e125 * right_dual.e43), 0.0, 0.0, 0.0)
        );
    }
}
extension AntiDualNum: AntiRejectViaHorizonFrom<CircleRotor> {
    associatedtype Output = AntiCircleRotor;
    func anti_reject_via_horizon_from(other: CircleRotor) -> Output {
        CircleRotor wedge = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(this.scalar) * other.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(this.scalar) * other.group1, 
            /* e235, e315, e125, e12345 */
            float4(this.scalar) * other.group2
        );
        AntiCircleRotor right_dual = AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(wedge.e12345) * right_dual.group1, 
            /* e15, e25, e35, scalar */
            float4((float3(wedge.e12345) * right_dual.group2.xyz), (right_dual.scalar * wedge.e12345) - (right_dual.e41 * wedge.e235) - (right_dual.e42 * wedge.e315) - (right_dual.e43 * wedge.e125) - (right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435) - (right_dual.e45 * wedge.e321) - (right_dual.e15 * wedge.e423) - (right_dual.e25 * wedge.e431) - (right_dual.e35 * wedge.e412))
        );
    }
}
extension AntiDualNum: AntiRejectViaHorizonFrom<Dipole> {
    associatedtype Output = Scalar;
    func anti_reject_via_horizon_from(other: Dipole) -> Output {
        Dipole wedge = Dipole.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(this.scalar) * other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(this.scalar) * other.group1, 
            /* e15, e25, e35, 0 */
            float4(float3(this.scalar) * other.group2.xyz, 0.0)
        );
        Circle right_dual = Circle.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, 0 */
            float4(other.group2.xyz * float3(-1.0), 0.0)
        );
        return Scalar.from_groups(
            /* scalar, 0, 0, 0 */
            float4(-(right_dual.e423 * wedge.e15) - (right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e321 * wedge.e45) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43), 0.0, 0.0, 0.0)
        );
    }
}
extension AntiDualNum: AntiRejectViaHorizonFrom<DipoleInversion> {
    associatedtype Output = AntiCircleRotor;
    func anti_reject_via_horizon_from(other: DipoleInversion) -> Output {
        DipoleInversion wedge = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(this.scalar) * other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(this.scalar) * other.group1, 
            /* e15, e25, e35, e1234 */
            float4(this.scalar) * other.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(this.scalar) * other.group3
        );
        AntiDipoleInversion right_dual = AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4((float3(wedge.e1234) * right_dual.group1.xyz) + (right_dual.group0.xyz.zxy * wedge.group3.yzx) - (right_dual.group0.xyz.yzx * wedge.group3.zxy), 0.0), 
            /* e23, e31, e12, e45 */
            float4((right_dual.e423 * wedge.e3215) + (right_dual.e235 * wedge.e1234), (right_dual.e431 * wedge.e3215) + (right_dual.e315 * wedge.e1234), (right_dual.e412 * wedge.e3215) + (right_dual.e125 * wedge.e1234), -(right_dual.e425 * wedge.e4315) - (right_dual.e435 * wedge.e4125)) - (right_dual.group1.wwwx * wedge.group3.xyzx), 
            /* e15, e25, e35, scalar */
            (float4(wedge.e3215) * float4(right_dual.group1.xyz, right_dual.e4)) + (wedge.group3.zxyx * float4(right_dual.group2.yzx, right_dual.e1)) + float4(float3(0.0), (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) + (right_dual.e5 * wedge.e1234) - (right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e321 * wedge.e45) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43)) - float4((right_dual.group2.zxy * wedge.group3.yzx), right_dual.e423 * wedge.e15)
        );
    }
}
extension AntiDualNum: AntiRejectViaHorizonFrom<DualNum> {
    associatedtype Output = AntiDualNum;
    func anti_reject_via_horizon_from(other: DualNum) -> Output {
        return AntiDualNum.from_groups(
            /* e3215, scalar, 0, 0 */
            float4(float2(this.scalar * other.e12345) * float2(other.e5 * -1.0, other.e12345 * -1.0), 0.0, 0.0)
        );
    }
}
extension AntiDualNum: AntiRejectViaHorizonFrom<FlatPoint> {
    associatedtype Output = Scalar;
    func anti_reject_via_horizon_from(other: FlatPoint) -> Output {
        return Scalar.from_groups(
            /* scalar, 0, 0, 0 */
            float4(this.scalar * powi(other.e45, 2) * -1.0, 0.0, 0.0, 0.0)
        );
    }
}
extension AntiDualNum: AntiRejectViaHorizonFrom<Flector> {
    associatedtype Output = AntiMotor;
    func anti_reject_via_horizon_from(other: Flector) -> Output {
        Flector wedge = Flector.from_groups(
            /* e15, e25, e35, e45 */
            float4(this.scalar) * other.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4(this.scalar) * other.group1
        );
        AntiFlector right_dual = AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            float4((right_dual.group0.www * wedge.group1.xyz * float3(-1.0)), (right_dual.e1 * wedge.e4235) + (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) - (right_dual.e321 * wedge.e45)), 
            /* e15, e25, e35, e3215 */
            float4(((right_dual.group0.yzx * wedge.group1.zxy) - (right_dual.group0.zxy * wedge.group1.yzx)), 0.0)
        );
    }
}
extension AntiDualNum: AntiRejectViaHorizonFrom<Line> {
    associatedtype Output = Scalar;
    func anti_reject_via_horizon_from(other: Line) -> Output {
        Line wedge = Line.from_groups(
            /* e415, e425, e435, 0 */
            float4(float3(this.scalar) * other.group0.xyz, 0.0), 
            /* e235, e315, e125, 0 */
            float4(float3(this.scalar) * other.group1.xyz, 0.0)
        );
        AntiLine right_dual = AntiLine.from_groups(
            /* e23, e31, e12, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e15, e25, e35, 0 */
            float4(other.group1.xyz, 0.0)
        );
        return Scalar.from_groups(
            /* scalar, 0, 0, 0 */
            float4(-(right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435), 0.0, 0.0, 0.0)
        );
    }
}
extension AntiDualNum: AntiRejectViaHorizonFrom<Motor> {
    associatedtype Output = AntiMotor;
    func anti_reject_via_horizon_from(other: Motor) -> Output {
        Motor wedge = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4(this.scalar) * other.group0, 
            /* e235, e315, e125, e5 */
            float4(this.scalar) * other.group1
        );
        AntiMotor right_dual = AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            float4((float3(wedge.e12345) * right_dual.group0.xyz), (right_dual.scalar * wedge.e12345) - (right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435)), 
            /* e15, e25, e35, e3215 */
            float4(((float3(right_dual.e3215) * wedge.group0.xyz) + (float3(wedge.e12345) * right_dual.group1.xyz)), right_dual.e3215 * wedge.e12345)
        );
    }
}
extension AntiDualNum: AntiRejectViaHorizonFrom<MultiVector> {
    associatedtype Output = MultiVector;
    func anti_reject_via_horizon_from(other: MultiVector) -> Output {
        MultiVector wedge = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(this.scalar * other.scalar, (this.e3215 * other.e4) + (this.scalar * other.e12345)), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(this.scalar) * other.group1, 
            /* e5, 0, 0, 0 */
            float4(this.scalar * other.e5, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(this.scalar) * other.group3, 
            /* e41, e42, e43, 0 */
            float4(float3(this.scalar) * other.group4.xyz, 0.0), 
            /* e23, e31, e12, 0 */
            float4(float3(this.scalar) * other.group5.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(this.scalar) * other.group6, 
            /* e423, e431, e412, 0 */
            float4(float3(this.scalar) * other.group7.xyz, 0.0), 
            /* e235, e315, e125, 0 */
            float4(float3(this.scalar) * other.group8.xyz, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(this.group0.xy.yy, this.scalar, (this.e3215 * other.scalar) + (this.scalar * other.e3215)) * float4(other.group9.xyz, 1.0), 
            /* e1234, 0, 0, 0 */
            float4(this.scalar * other.e1234, 0.0, 0.0, 0.0)
        );
        MultiVector right_dual = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(other.group0.xy.yx * float2(-1.0, 1.0), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5, 0, 0, 0 */
            float4(other.e3215, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43, 0 */
            float4(other.group7.xyz, 0.0), 
            /* e23, e31, e12, 0 */
            float4(other.group6.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412, 0 */
            float4(other.group4.xyz * float3(-1.0), 0.0), 
            /* e235, e315, e125, 0 */
            float4(other.group3.xyz * float3(-1.0), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        return MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2((right_dual.scalar * wedge.e12345) + (right_dual.e12345 * wedge.scalar) + (right_dual.e1 * wedge.e4235) + (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) + (right_dual.e4 * wedge.e3215) + (right_dual.e5 * wedge.e1234) + (right_dual.e4235 * wedge.e1) + (right_dual.e4315 * wedge.e2) + (right_dual.e4125 * wedge.e3) + (right_dual.e3215 * wedge.e4) + (right_dual.e1234 * wedge.e5) - (right_dual.e15 * wedge.e423) - (right_dual.e25 * wedge.e431) - (right_dual.e35 * wedge.e412) - (right_dual.e45 * wedge.e321) - (right_dual.e41 * wedge.e235) - (right_dual.e42 * wedge.e315) - (right_dual.e43 * wedge.e125) - (right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e321 * wedge.e45) - (right_dual.e423 * wedge.e15) - (right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43), right_dual.e12345 * wedge.e12345), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e15 * wedge.e1234) + (right_dual.e415 * wedge.e321) + (right_dual.e321 * wedge.e415) + (right_dual.e4125 * wedge.e31), (right_dual.e25 * wedge.e1234) + (right_dual.e425 * wedge.e321) + (right_dual.e321 * wedge.e425) + (right_dual.e4235 * wedge.e12), (right_dual.e35 * wedge.e1234) + (right_dual.e435 * wedge.e321) + (right_dual.e321 * wedge.e435) + (right_dual.e4315 * wedge.e23), -(right_dual.e415 * wedge.e423) - (right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412) - (right_dual.e1234 * wedge.e45)) + (float4(right_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_dual.group1) + (wedge.group9.yzxx * float4(right_dual.group5.xyz.zxy, right_dual.e41)) + float4((wedge.group4.xyz * right_dual.group9.www), right_dual.e45 * wedge.e1234) + float4((right_dual.group7.xyz.zxy * wedge.group8.xyz.yzx), right_dual.e42 * wedge.e4315) + float4((right_dual.group8.xyz.yzx * wedge.group7.xyz.zxy), right_dual.e43 * wedge.e4125) - (right_dual.group9.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((float3(right_dual.e1234) * wedge.group3.xyz), right_dual.e4125 * wedge.e43) - float4((right_dual.group4.xyz * wedge.group9.www), right_dual.e423 * wedge.e415) - float4((right_dual.group5.xyz.yzx * wedge.group9.zxy), right_dual.e431 * wedge.e425) - float4((right_dual.group7.xyz.yzx * wedge.group8.xyz.zxy), right_dual.e412 * wedge.e435) - float4((right_dual.group8.xyz.zxy * wedge.group7.xyz.yzx), right_dual.e4235 * wedge.e41), 
            /* e5, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e5) + (right_dual.e5 * wedge.e12345) + (right_dual.e4235 * wedge.e15) + (right_dual.e4315 * wedge.e25) + (right_dual.e4125 * wedge.e35) + (right_dual.e3215 * wedge.e45) - (right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125) - (right_dual.e45 * wedge.e3215) - (right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435), 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4((right_dual.e415 * wedge.e3215) + (right_dual.e315 * wedge.e4125) + (right_dual.e4125 * wedge.e315) + (right_dual.e3215 * wedge.e415), (right_dual.e425 * wedge.e3215) + (right_dual.e125 * wedge.e4235) + (right_dual.e4235 * wedge.e125) + (right_dual.e3215 * wedge.e425), (right_dual.e435 * wedge.e3215) + (right_dual.e235 * wedge.e4315) + (right_dual.e4315 * wedge.e235) + (right_dual.e3215 * wedge.e435), -(right_dual.e435 * wedge.e4125) - (right_dual.e4235 * wedge.e415) - (right_dual.e4315 * wedge.e425) - (right_dual.e4125 * wedge.e435)) + (float4(right_dual.e12345) * wedge.group3) + (float4(wedge.e12345) * right_dual.group3) - (wedge.group9.yzxx * float4(right_dual.group8.xyz.zxy, right_dual.e415)) - float4((wedge.group8.xyz.zxy * right_dual.group9.yzx), right_dual.e425 * wedge.e4315), 
            /* e41, e42, e43, 0 */
            float4((float3(right_dual.e12345) * wedge.group4.xyz) + (float3(right_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_dual.group4.xyz) + (float3(wedge.e1234) * right_dual.group6.xyz) + (right_dual.group7.xyz.zxy * wedge.group9.yzx) + (wedge.group7.xyz.zxy * right_dual.group9.yzx) - (right_dual.group7.xyz.yzx * wedge.group9.zxy) - (wedge.group7.xyz.yzx * right_dual.group9.zxy), 0.0), 
            /* e23, e31, e12, 0 */
            float4((float3(right_dual.e12345) * wedge.group5.xyz) + (float3(right_dual.e3215) * wedge.group7.xyz) + (float3(right_dual.e1234) * wedge.group8.xyz) + (float3(wedge.e12345) * right_dual.group5.xyz) + (float3(wedge.e3215) * right_dual.group7.xyz) + (float3(wedge.e1234) * right_dual.group8.xyz) - (float3(right_dual.e321) * wedge.group9.xyz) - (float3(wedge.e321) * right_dual.group9.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            (float4(right_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_dual.group6) + (right_dual.group9.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - float4((right_dual.group9.zxy * wedge.group9.yzx), right_dual.e1234 * wedge.e3215), 
            /* e423, e431, e412, 0 */
            float4((float3(right_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_dual.group7.xyz) + (float3(wedge.e1234) * right_dual.group9.xyz) - (float3(right_dual.e1234) * wedge.group9.xyz), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(right_dual.e12345) * wedge.group8.xyz) + (float3(right_dual.e3215) * wedge.group9.xyz) + (float3(wedge.e12345) * right_dual.group8.xyz) - (float3(wedge.e3215) * right_dual.group9.xyz), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            (float4(right_dual.e12345) * wedge.group9) + (float4(wedge.e12345) * right_dual.group9), 
            /* e1234, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e1234) + (right_dual.e1234 * wedge.e12345), 0.0, 0.0, 0.0)
        );
    }
}
extension AntiDualNum: AntiRejectViaHorizonFrom<Plane> {
    associatedtype Output = Scalar;
    func anti_reject_via_horizon_from(other: Plane) -> Output {
        Plane wedge = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(this.scalar) * other.group0
        );
        AntiPlane right_dual = AntiPlane.from_groups(
            /* e1, e2, e3, e5 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return Scalar.from_groups(
            /* scalar, 0, 0, 0 */
            float4((right_dual.e1 * wedge.e4235) + (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125), 0.0, 0.0, 0.0)
        );
    }
}
extension AntiDualNum: AntiRejectViaHorizonFrom<RoundPoint> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: RoundPoint) -> Output {
        VersorEven wedge = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4(float3(0.0), this.e3215 * other.e4), 
            /* e415, e425, e435, e321 */
            float4(0.0), 
            /* e235, e315, e125, e5 */
            float4(float3(0.0), this.scalar * other.e5), 
            /* e1, e2, e3, e4 */
            float4(this.scalar) * other.group0
        );
        Sphere right_dual = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            float4(right_dual.e4125 * wedge.e431 * -1.0, right_dual.e4235 * wedge.e412 * -1.0, right_dual.e4315 * wedge.e423 * -1.0, (right_dual.e4125 * wedge.e3) + (right_dual.e3215 * wedge.e4) + (right_dual.e1234 * wedge.e5)) + (right_dual.group0.yzxx * float4(wedge.group0.zxy, wedge.e1)) + float4((float3(right_dual.e1234) * wedge.group1.xyz), right_dual.e4315 * wedge.e2), 
            /* e23, e31, e12, e45 */
            float4((float3(right_dual.e3215) * wedge.group0.xyz), 0.0) + float4((float3(right_dual.e1234) * wedge.group2.xyz), 0.0) - float4((float3(wedge.e321) * right_dual.group0.xyz), 0.0), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_dual.e3215) * wedge.group1.xyz) + (right_dual.group0.zxy * wedge.group2.yzx) - (right_dual.group0.yzx * wedge.group2.zxy)), right_dual.e1234 * wedge.e12345), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_dual.group0
        );
    }
}
extension AntiDualNum: AntiRejectViaHorizonFrom<Scalar> {
    associatedtype Output = AntiDualNum;
    func anti_reject_via_horizon_from(other: Scalar) -> Output {
        return AntiDualNum.from_groups(
            /* e3215, scalar, 0, 0 */
            float4(float2(other.scalar) * float2(this.e3215 * other.scalar, this.scalar * other.scalar), 0.0, 0.0)
        );
    }
}
extension AntiDualNum: AntiRejectViaHorizonFrom<Sphere> {
    associatedtype Output = Scalar;
    func anti_reject_via_horizon_from(other: Sphere) -> Output {
        Sphere wedge = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(this.scalar) * other.group0, 
            /* e1234, 0, 0, 0 */
            float4(this.scalar * other.e1234, 0.0, 0.0, 0.0)
        );
        RoundPoint right_dual = RoundPoint.from_groups(
            /* e1, e2, e3, e4 */
            float4(other.group0.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5, 0, 0, 0 */
            float4(other.e3215, 0.0, 0.0, 0.0)
        );
        return Scalar.from_groups(
            /* scalar, 0, 0, 0 */
            float4((right_dual.e1 * wedge.e4235) + (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) + (right_dual.e4 * wedge.e3215) + (right_dual.e5 * wedge.e1234), 0.0, 0.0, 0.0)
        );
    }
}
extension AntiDualNum: AntiRejectViaHorizonFrom<VersorEven> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: VersorEven) -> Output {
        VersorEven wedge = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4(this.group0.xy.yy, this.scalar, (this.e3215 * other.e4) + (this.scalar * other.e12345)) * float4(other.group0.xyz, 1.0), 
            /* e415, e425, e435, e321 */
            float4(this.scalar) * other.group1, 
            /* e235, e315, e125, e5 */
            float4(this.scalar) * other.group2, 
            /* e1, e2, e3, e4 */
            float4(this.scalar) * other.group3
        );
        VersorOdd right_dual = VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            (wedge.group0.zxyw * float4(right_dual.group3.yzx, right_dual.scalar)) + float4(float3(0.0), (wedge.e2 * right_dual.e4315) + (wedge.e3 * right_dual.e4125) + (wedge.e4 * right_dual.e3215) - (wedge.e431 * right_dual.e25) - (wedge.e412 * right_dual.e35) - (wedge.e415 * right_dual.e23) - (wedge.e425 * right_dual.e31) - (wedge.e435 * right_dual.e12) - (wedge.e321 * right_dual.e45) - (wedge.e235 * right_dual.e41) - (wedge.e315 * right_dual.e42) - (wedge.e125 * right_dual.e43)) + float4((wedge.group0.www * right_dual.group0.xyz), wedge.e5 * right_dual.e1234) + float4((right_dual.group2.www * wedge.group1.xyz), wedge.e1 * right_dual.e4235) - (wedge.group0.yzxx * float4(right_dual.group3.zxy, right_dual.e15)), 
            /* e23, e31, e12, e45 */
            float4((wedge.e12345 * right_dual.e23) + (wedge.e235 * right_dual.e1234), (wedge.e12345 * right_dual.e31) + (wedge.e315 * right_dual.e1234), (wedge.e12345 * right_dual.e12) + (wedge.e125 * right_dual.e1234), -(wedge.e425 * right_dual.e4315) - (wedge.e435 * right_dual.e4125)) + (wedge.group0 * float4(right_dual.group3.www, right_dual.e45)) - (wedge.group1.wwwx * right_dual.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(wedge.e12345) * right_dual.group2.xyz) + (float3(right_dual.e3215) * wedge.group1.xyz) + (wedge.group2.yzx * right_dual.group3.zxy) - (wedge.group2.zxy * right_dual.group3.yzx)), wedge.e12345 * right_dual.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_dual.group3
        );
    }
}
extension AntiDualNum: AntiRejectViaHorizonFrom<VersorOdd> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: VersorOdd) -> Output {
        VersorOdd wedge = VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            float4(this.scalar) * other.group0, 
            /* e23, e31, e12, e45 */
            float4(this.scalar) * other.group1, 
            /* e15, e25, e35, e1234 */
            float4(this.scalar) * other.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(this.group0.xy.yy, this.scalar, (this.e3215 * other.scalar) + (this.scalar * other.e3215)) * float4(other.group3.xyz, 1.0)
        );
        VersorEven right_dual = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            (right_dual.group0.zxyw * float4(wedge.group3.yzx, wedge.scalar)) + float4(float3(0.0), (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) + (right_dual.e4 * wedge.e3215) - (right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e321 * wedge.e45) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43)) + float4((right_dual.group0.www * wedge.group0.xyz), right_dual.e5 * wedge.e1234) + float4((wedge.group2.www * right_dual.group1.xyz), right_dual.e1 * wedge.e4235) - (right_dual.group0.yzxx * float4(wedge.group3.zxy, wedge.e15)), 
            /* e23, e31, e12, e45 */
            float4((right_dual.e12345 * wedge.e23) + (right_dual.e235 * wedge.e1234), (right_dual.e12345 * wedge.e31) + (right_dual.e315 * wedge.e1234), (right_dual.e12345 * wedge.e12) + (right_dual.e125 * wedge.e1234), -(right_dual.e425 * wedge.e4315) - (right_dual.e435 * wedge.e4125)) + (right_dual.group0 * float4(wedge.group3.www, wedge.e45)) - (right_dual.group1.wwwx * wedge.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_dual.e12345) * wedge.group2.xyz) + (float3(wedge.e3215) * right_dual.group1.xyz) + (right_dual.group2.yzx * wedge.group3.zxy) - (right_dual.group2.zxy * wedge.group3.yzx)), right_dual.e12345 * wedge.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * wedge.group3
        );
    }
}
extension AntiFlatPoint {
    // Fancy infix trick
    func operator/(_rhs: AntiRejectViaHorizonFromInfix) -> AntiRejectViaHorizonFromInfixPartial<AntiFlatPoint> {
        return AntiRejectViaHorizonFromInfixPartial { a: this };
    }
}
extension AntiFlatPoint: AntiRejectViaHorizonFrom<AntiCircleRotor> {
    associatedtype Output = VersorEven;
    func anti_reject_via_horizon_from(other: AntiCircleRotor) -> Output {
        CircleRotor wedge = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(0.0), 
            /* e415, e425, e435, e321 */
            float4(float3(0.0), other.scalar * this.e321), 
            /* e235, e315, e125, e12345 */
            float4((other.group2.www * this.group0.xyz), -(other.e41 * this.e235) - (other.e42 * this.e315) - (other.e43 * this.e125) - (other.e45 * this.e321))
        );
        CircleRotor right_dual = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4(((float3(right_dual.e12345) * wedge.group0.xyz) + (float3(wedge.e12345) * right_dual.group0.xyz)), right_dual.e12345 * wedge.e12345), 
            /* e415, e425, e435, e321 */
            (float4(right_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_dual.group1), 
            /* e235, e315, e125, e5 */
            float4((right_dual.e235 * wedge.e12345) + (right_dual.e12345 * wedge.e235), (right_dual.e315 * wedge.e12345) + (right_dual.e12345 * wedge.e315), (right_dual.e125 * wedge.e12345) + (right_dual.e12345 * wedge.e125), -(right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435)), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e412 * wedge.e315) + (right_dual.e415 * wedge.e321) + (right_dual.e321 * wedge.e415) + (right_dual.e315 * wedge.e412), (right_dual.e423 * wedge.e125) + (right_dual.e425 * wedge.e321) + (right_dual.e321 * wedge.e425) + (right_dual.e125 * wedge.e423), (right_dual.e431 * wedge.e235) + (right_dual.e435 * wedge.e321) + (right_dual.e321 * wedge.e435) + (right_dual.e235 * wedge.e431), -(right_dual.e412 * wedge.e435) - (right_dual.e415 * wedge.e423) - (right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412)) - float4((right_dual.group0.xyz.yzx * wedge.group2.zxy), right_dual.e423 * wedge.e415) - float4((wedge.group0.xyz.yzx * right_dual.group2.zxy), right_dual.e431 * wedge.e425)
        );
    }
}
extension AntiFlatPoint: AntiRejectViaHorizonFrom<AntiDipoleInversion> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: AntiDipoleInversion) -> Output {
        Sphere wedge = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4((other.group2.www * this.group0.xyz * float3(-1.0)), (other.e1 * this.e235) + (other.e2 * this.e315) + (other.e3 * this.e125) + (other.e5 * this.e321)), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * this.e321 * -1.0, 0.0, 0.0, 0.0)
        );
        DipoleInversion right_dual = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4((float3(wedge.e1234) * right_dual.group3.xyz) - (float3(right_dual.e1234) * wedge.group0.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            (right_dual.group3.yzxw * float4(wedge.group0.zxy, wedge.e1234)) - (wedge.group0.yzxw * float4(right_dual.group3.zxy, right_dual.e1234)), 
            /* e235, e315, e125, e4 */
            float4(right_dual.e4235 * wedge.e3215 * -1.0, right_dual.e4315 * wedge.e3215 * -1.0, right_dual.e4125 * wedge.e3215 * -1.0, (right_dual.e42 * wedge.e4315) + (right_dual.e43 * wedge.e4125) + (right_dual.e45 * wedge.e1234)) + (wedge.group0.xyzx * float4(right_dual.group3.www, right_dual.e41)), 
            /* e1, e2, e3, e5 */
            float4((right_dual.e12 * wedge.e4315) + (right_dual.e15 * wedge.e1234), (right_dual.e23 * wedge.e4125) + (right_dual.e25 * wedge.e1234), (right_dual.e31 * wedge.e4235) + (right_dual.e35 * wedge.e1234), -(right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125)) - (float4(wedge.e3215) * float4(right_dual.group0.xyz, right_dual.e45)) - (wedge.group0.zxyx * float4(right_dual.group1.yzx, right_dual.e15))
        );
    }
}
extension AntiFlatPoint: AntiRejectViaHorizonFrom<AntiDualNum> {
    associatedtype Output = AntiFlatPoint;
    func anti_reject_via_horizon_from(other: AntiDualNum) -> Output {
        return AntiFlatPoint.from_groups(
            /* e235, e315, e125, e321 */
            float4(other.scalar) * float4(other.scalar * this.e235, other.scalar * this.e315, other.scalar * this.e125, other.scalar * this.e321)
        );
    }
}
extension AntiFlatPoint: AntiRejectViaHorizonFrom<AntiFlector> {
    associatedtype Output = AntiFlector;
    func anti_reject_via_horizon_from(other: AntiFlector) -> Output {
        AntiDualNum wedge = AntiDualNum.from_groups(
            /* e3215, scalar, 0, 0 */
            float4(float2((this.e235 * other.e1) + (this.e315 * other.e2) + (this.e125 * other.e3) + (this.e321 * other.e5), 0.0), 0.0, 0.0)
        );
        Flector right_dual = Flector.from_groups(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            float4(wedge.group0.xy.xx, wedge.e3215, 0.0) * float4(float3(1.0), 0.0) * float4(right_dual.group1.xyz, 0.0) * float4(-1.0, -1.0, -1.0, 0.0), 
            /* e1, e2, e3, e5 */
            float4(float3(0.0), wedge.e3215 * right_dual.e45 * -1.0)
        );
    }
}
extension AntiFlatPoint: AntiRejectViaHorizonFrom<AntiMotor> {
    associatedtype Output = AntiFlector;
    func anti_reject_via_horizon_from(other: AntiMotor) -> Output {
        AntiFlatPoint wedge = AntiFlatPoint.from_groups(
            /* e235, e315, e125, e321 */
            float4(other.scalar) * this.group0
        );
        Motor right_dual = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            float4(right_dual.e12345) * wedge.group0, 
            /* e1, e2, e3, e5 */
            float4((wedge.group0.www * right_dual.group0.xyz), -(wedge.e235 * right_dual.e415) - (wedge.e315 * right_dual.e425) - (wedge.e125 * right_dual.e435))
        );
    }
}
extension AntiFlatPoint: AntiRejectViaHorizonFrom<AntiPlane> {
    associatedtype Output = AntiFlatPoint;
    func anti_reject_via_horizon_from(other: AntiPlane) -> Output {
        AntiDualNum wedge = AntiDualNum.from_groups(
            /* e3215, scalar, 0, 0 */
            float4(float2((this.e235 * other.e1) + (this.e315 * other.e2) + (this.e125 * other.e3) + (this.e321 * other.e5), 0.0), 0.0, 0.0)
        );
        return AntiFlatPoint.from_groups(
            /* e235, e315, e125, e321 */
            float4(wedge.group0.xy.xx, wedge.e3215, 0.0) * float4(float3(1.0), 0.0) * float4(other.group0.xyz, 0.0) * float4(-1.0, -1.0, -1.0, 0.0)
        );
    }
}
extension AntiFlatPoint: AntiRejectViaHorizonFrom<Dipole> {
    associatedtype Output = Circle;
    func anti_reject_via_horizon_from(other: Dipole) -> Output {
        AntiScalar wedge = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(-(this.e235 * other.e41) - (this.e315 * other.e42) - (this.e125 * other.e43) - (this.e321 * other.e45), 0.0, 0.0, 0.0)
        );
        Circle right_dual = Circle.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, 0 */
            float4(other.group2.xyz * float3(-1.0), 0.0)
        );
        return Circle.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(wedge.e12345) * right_dual.group1, 
            /* e235, e315, e125, 0 */
            float4(float3(wedge.e12345) * right_dual.group2.xyz, 0.0)
        );
    }
}
extension AntiFlatPoint: AntiRejectViaHorizonFrom<DipoleInversion> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: DipoleInversion) -> Output {
        AntiScalar wedge = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(-(this.e235 * other.e41) - (this.e315 * other.e42) - (this.e125 * other.e43) - (this.e321 * other.e45), 0.0, 0.0, 0.0)
        );
        AntiDipoleInversion right_dual = AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(wedge.e12345) * right_dual.group1, 
            /* e235, e315, e125, e4 */
            float4(wedge.e12345) * right_dual.group2, 
            /* e1, e2, e3, e5 */
            float4(wedge.e12345) * right_dual.group3
        );
    }
}
extension AntiFlatPoint: AntiRejectViaHorizonFrom<FlatPoint> {
    associatedtype Output = AntiFlatPoint;
    func anti_reject_via_horizon_from(other: FlatPoint) -> Output {
        return AntiFlatPoint.from_groups(
            /* e235, e315, e125, e321 */
            float4(this.e321 * other.e45 * -1.0) * float4(other.e15 * -1.0, other.e25 * -1.0, other.e35 * -1.0, other.e45)
        );
    }
}
extension AntiFlatPoint: AntiRejectViaHorizonFrom<Flector> {
    associatedtype Output = AntiFlector;
    func anti_reject_via_horizon_from(other: Flector) -> Output {
        AntiScalar wedge = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(this.e321 * other.e45 * -1.0, 0.0, 0.0, 0.0)
        );
        AntiFlector right_dual = AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            float4(wedge.e12345) * right_dual.group0, 
            /* e1, e2, e3, e5 */
            float4(wedge.e12345) * right_dual.group1
        );
    }
}
extension AntiFlatPoint: AntiRejectViaHorizonFrom<MultiVector> {
    associatedtype Output = MultiVector;
    func anti_reject_via_horizon_from(other: MultiVector) -> Output {
        MultiVector wedge = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(0.0, -(this.e235 * other.e41) - (this.e315 * other.e42) - (this.e125 * other.e43) - (this.e321 * other.e45)), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5, 0, 0, 0 */
            float4(0.0), 
            /* e15, e25, e35, e45 */
            float4(0.0), 
            /* e41, e42, e43, 0 */
            float4(0.0), 
            /* e23, e31, e12, 0 */
            float4(0.0), 
            /* e415, e425, e435, e321 */
            float4(float3(0.0), this.e321 * other.scalar), 
            /* e423, e431, e412, 0 */
            float4(0.0), 
            /* e235, e315, e125, 0 */
            float4(float3(other.scalar) * this.group0.xyz, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4((float3(other.e4) * this.group0.xyz * float3(-1.0)), (this.e235 * other.e1) + (this.e315 * other.e2) + (this.e125 * other.e3) + (this.e321 * other.e5)), 
            /* e1234, 0, 0, 0 */
            float4(this.e321 * other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        MultiVector right_dual = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(other.group0.xy.yx * float2(-1.0, 1.0), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5, 0, 0, 0 */
            float4(other.e3215, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43, 0 */
            float4(other.group7.xyz, 0.0), 
            /* e23, e31, e12, 0 */
            float4(other.group6.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412, 0 */
            float4(other.group4.xyz * float3(-1.0), 0.0), 
            /* e235, e315, e125, 0 */
            float4(other.group3.xyz * float3(-1.0), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        return MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2((right_dual.scalar * wedge.e12345) + (right_dual.e12345 * wedge.scalar) + (right_dual.e1 * wedge.e4235) + (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) + (right_dual.e4 * wedge.e3215) + (right_dual.e5 * wedge.e1234) + (right_dual.e4235 * wedge.e1) + (right_dual.e4315 * wedge.e2) + (right_dual.e4125 * wedge.e3) + (right_dual.e3215 * wedge.e4) + (right_dual.e1234 * wedge.e5) - (right_dual.e15 * wedge.e423) - (right_dual.e25 * wedge.e431) - (right_dual.e35 * wedge.e412) - (right_dual.e45 * wedge.e321) - (right_dual.e41 * wedge.e235) - (right_dual.e42 * wedge.e315) - (right_dual.e43 * wedge.e125) - (right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e321 * wedge.e45) - (right_dual.e423 * wedge.e15) - (right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43), right_dual.e12345 * wedge.e12345), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e15 * wedge.e1234) + (right_dual.e415 * wedge.e321) + (right_dual.e321 * wedge.e415) + (right_dual.e4125 * wedge.e31), (right_dual.e25 * wedge.e1234) + (right_dual.e425 * wedge.e321) + (right_dual.e321 * wedge.e425) + (right_dual.e4235 * wedge.e12), (right_dual.e35 * wedge.e1234) + (right_dual.e435 * wedge.e321) + (right_dual.e321 * wedge.e435) + (right_dual.e4315 * wedge.e23), -(right_dual.e415 * wedge.e423) - (right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412) - (right_dual.e1234 * wedge.e45)) + (float4(right_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_dual.group1) + (wedge.group9.yzxx * float4(right_dual.group5.xyz.zxy, right_dual.e41)) + float4((wedge.group4.xyz * right_dual.group9.www), right_dual.e45 * wedge.e1234) + float4((right_dual.group7.xyz.zxy * wedge.group8.xyz.yzx), right_dual.e42 * wedge.e4315) + float4((right_dual.group8.xyz.yzx * wedge.group7.xyz.zxy), right_dual.e43 * wedge.e4125) - (right_dual.group9.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((float3(right_dual.e1234) * wedge.group3.xyz), right_dual.e4125 * wedge.e43) - float4((right_dual.group4.xyz * wedge.group9.www), right_dual.e423 * wedge.e415) - float4((right_dual.group5.xyz.yzx * wedge.group9.zxy), right_dual.e431 * wedge.e425) - float4((right_dual.group7.xyz.yzx * wedge.group8.xyz.zxy), right_dual.e412 * wedge.e435) - float4((right_dual.group8.xyz.zxy * wedge.group7.xyz.yzx), right_dual.e4235 * wedge.e41), 
            /* e5, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e5) + (right_dual.e5 * wedge.e12345) + (right_dual.e4235 * wedge.e15) + (right_dual.e4315 * wedge.e25) + (right_dual.e4125 * wedge.e35) + (right_dual.e3215 * wedge.e45) - (right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125) - (right_dual.e45 * wedge.e3215) - (right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435), 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4((right_dual.e415 * wedge.e3215) + (right_dual.e315 * wedge.e4125) + (right_dual.e4125 * wedge.e315) + (right_dual.e3215 * wedge.e415), (right_dual.e425 * wedge.e3215) + (right_dual.e125 * wedge.e4235) + (right_dual.e4235 * wedge.e125) + (right_dual.e3215 * wedge.e425), (right_dual.e435 * wedge.e3215) + (right_dual.e235 * wedge.e4315) + (right_dual.e4315 * wedge.e235) + (right_dual.e3215 * wedge.e435), -(right_dual.e435 * wedge.e4125) - (right_dual.e4235 * wedge.e415) - (right_dual.e4315 * wedge.e425) - (right_dual.e4125 * wedge.e435)) + (float4(right_dual.e12345) * wedge.group3) + (float4(wedge.e12345) * right_dual.group3) - (wedge.group9.yzxx * float4(right_dual.group8.xyz.zxy, right_dual.e415)) - float4((wedge.group8.xyz.zxy * right_dual.group9.yzx), right_dual.e425 * wedge.e4315), 
            /* e41, e42, e43, 0 */
            float4((float3(right_dual.e12345) * wedge.group4.xyz) + (float3(right_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_dual.group4.xyz) + (float3(wedge.e1234) * right_dual.group6.xyz) + (right_dual.group7.xyz.zxy * wedge.group9.yzx) + (wedge.group7.xyz.zxy * right_dual.group9.yzx) - (right_dual.group7.xyz.yzx * wedge.group9.zxy) - (wedge.group7.xyz.yzx * right_dual.group9.zxy), 0.0), 
            /* e23, e31, e12, 0 */
            float4((float3(right_dual.e12345) * wedge.group5.xyz) + (float3(right_dual.e3215) * wedge.group7.xyz) + (float3(right_dual.e1234) * wedge.group8.xyz) + (float3(wedge.e12345) * right_dual.group5.xyz) + (float3(wedge.e3215) * right_dual.group7.xyz) + (float3(wedge.e1234) * right_dual.group8.xyz) - (float3(right_dual.e321) * wedge.group9.xyz) - (float3(wedge.e321) * right_dual.group9.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            (float4(right_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_dual.group6) + (right_dual.group9.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - float4((right_dual.group9.zxy * wedge.group9.yzx), right_dual.e1234 * wedge.e3215), 
            /* e423, e431, e412, 0 */
            float4((float3(right_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_dual.group7.xyz) + (float3(wedge.e1234) * right_dual.group9.xyz) - (float3(right_dual.e1234) * wedge.group9.xyz), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(right_dual.e12345) * wedge.group8.xyz) + (float3(right_dual.e3215) * wedge.group9.xyz) + (float3(wedge.e12345) * right_dual.group8.xyz) - (float3(wedge.e3215) * right_dual.group9.xyz), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            (float4(right_dual.e12345) * wedge.group9) + (float4(wedge.e12345) * right_dual.group9), 
            /* e1234, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e1234) + (right_dual.e1234 * wedge.e12345), 0.0, 0.0, 0.0)
        );
    }
}
extension AntiFlatPoint: AntiRejectViaHorizonFrom<RoundPoint> {
    associatedtype Output = Circle;
    func anti_reject_via_horizon_from(other: RoundPoint) -> Output {
        Sphere wedge = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4((float3(other.e4) * this.group0.xyz * float3(-1.0)), (this.e235 * other.e1) + (this.e315 * other.e2) + (this.e125 * other.e3) + (this.e321 * other.e5)), 
            /* e1234, 0, 0, 0 */
            float4(this.e321 * other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        Sphere right_dual = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        return Circle.from_groups(
            /* e423, e431, e412, 0 */
            float4((float3(wedge.e1234) * right_dual.group0.xyz) - (float3(right_dual.e1234) * wedge.group0.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            (right_dual.group0.yzxw * float4(wedge.group0.zxy, wedge.e1234)) - float4((right_dual.group0.zxy * wedge.group0.yzx), right_dual.e1234 * wedge.e3215), 
            /* e235, e315, e125, 0 */
            float4((float3(right_dual.e3215) * wedge.group0.xyz) - (float3(wedge.e3215) * right_dual.group0.xyz), 0.0)
        );
    }
}
extension AntiFlatPoint: AntiRejectViaHorizonFrom<Scalar> {
    associatedtype Output = AntiFlatPoint;
    func anti_reject_via_horizon_from(other: Scalar) -> Output {
        return AntiFlatPoint.from_groups(
            /* e235, e315, e125, e321 */
            float4(other.scalar) * float4(this.e235 * other.scalar, this.e315 * other.scalar, this.e125 * other.scalar, this.e321 * other.scalar)
        );
    }
}
extension AntiFlatPoint: AntiRejectViaHorizonFrom<VersorEven> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: VersorEven) -> Output {
        Sphere wedge = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4((float3(other.e4) * this.group0.xyz * float3(-1.0)), (this.e235 * other.e1) + (this.e315 * other.e2) + (this.e125 * other.e3) + (this.e321 * other.e5)), 
            /* e1234, 0, 0, 0 */
            float4(this.e321 * other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        VersorOdd right_dual = VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4((float3(wedge.e1234) * right_dual.group3.xyz) - (float3(right_dual.e1234) * wedge.group0.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            float4((wedge.group0.zxy * right_dual.group3.yzx), wedge.e1234 * right_dual.e3215) - (wedge.group0.yzxw * float4(right_dual.group3.zxy, right_dual.e1234)), 
            /* e235, e315, e125, e4 */
            float4(wedge.e3215 * right_dual.e4235 * -1.0, wedge.e3215 * right_dual.e4315 * -1.0, wedge.e3215 * right_dual.e4125 * -1.0, (wedge.e4315 * right_dual.e42) + (wedge.e4125 * right_dual.e43) + (wedge.e1234 * right_dual.e45)) + (wedge.group0.xyzx * float4(right_dual.group3.www, right_dual.e41)), 
            /* e1, e2, e3, e5 */
            float4((wedge.e4315 * right_dual.e12) + (wedge.e1234 * right_dual.e15), (wedge.e4125 * right_dual.e23) + (wedge.e1234 * right_dual.e25), (wedge.e4235 * right_dual.e31) + (wedge.e1234 * right_dual.e35), -(wedge.e4125 * right_dual.e35) - (wedge.e3215 * right_dual.e45)) - (wedge.group0.zxyx * float4(right_dual.group1.yzx, right_dual.e15)) - (wedge.group0.wwwy * float4(right_dual.group0.xyz, right_dual.e25))
        );
    }
}
extension AntiFlatPoint: AntiRejectViaHorizonFrom<VersorOdd> {
    associatedtype Output = VersorEven;
    func anti_reject_via_horizon_from(other: VersorOdd) -> Output {
        CircleRotor wedge = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(0.0), 
            /* e415, e425, e435, e321 */
            float4(float3(0.0), this.e321 * other.scalar), 
            /* e235, e315, e125, e12345 */
            float4((float3(other.scalar) * this.group0.xyz), -(this.e235 * other.e41) - (this.e315 * other.e42) - (this.e125 * other.e43) - (this.e321 * other.e45))
        );
        VersorEven right_dual = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4(((float3(wedge.e12345) * right_dual.group0.xyz) + (float3(right_dual.e12345) * wedge.group0.xyz)), wedge.e12345 * right_dual.e12345), 
            /* e415, e425, e435, e321 */
            (float4(wedge.e12345) * right_dual.group1) + (float4(right_dual.e12345) * wedge.group1), 
            /* e235, e315, e125, e5 */
            float4(wedge.e12345 * right_dual.e235, wedge.e12345 * right_dual.e315, wedge.e12345 * right_dual.e125, -(wedge.e415 * right_dual.e235) - (wedge.e425 * right_dual.e315) - (wedge.e435 * right_dual.e125) - (wedge.e235 * right_dual.e415) - (wedge.e315 * right_dual.e425) - (wedge.e125 * right_dual.e435)) + (wedge.group2 * float4(right_dual.group0.www, right_dual.e5)), 
            /* e1, e2, e3, e4 */
            float4((wedge.e415 * right_dual.e321) + (wedge.e321 * right_dual.e415) + (wedge.e315 * right_dual.e412) + (wedge.e12345 * right_dual.e1), (wedge.e425 * right_dual.e321) + (wedge.e321 * right_dual.e425) + (wedge.e125 * right_dual.e423) + (wedge.e12345 * right_dual.e2), (wedge.e435 * right_dual.e321) + (wedge.e321 * right_dual.e435) + (wedge.e235 * right_dual.e431) + (wedge.e12345 * right_dual.e3), -(wedge.e412 * right_dual.e435) - (wedge.e415 * right_dual.e423) - (wedge.e425 * right_dual.e431) - (wedge.e435 * right_dual.e412)) + float4((wedge.group0.xyz.zxy * right_dual.group2.yzx), wedge.e12345 * right_dual.e4) - float4((wedge.group0.xyz.yzx * right_dual.group2.zxy), wedge.e423 * right_dual.e415) - float4((wedge.group2.zxy * right_dual.group0.yzx), wedge.e431 * right_dual.e425)
        );
    }
}
extension AntiFlector {
    // Fancy infix trick
    func operator/(_rhs: AntiRejectViaHorizonFromInfix) -> AntiRejectViaHorizonFromInfixPartial<AntiFlector> {
        return AntiRejectViaHorizonFromInfixPartial { a: this };
    }
}
extension AntiFlector: AntiRejectViaHorizonFrom<AntiCircleRotor> {
    associatedtype Output = VersorEven;
    func anti_reject_via_horizon_from(other: AntiCircleRotor) -> Output {
        VersorEven wedge = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4(other.e42 * this.e3, other.e43 * this.e1, other.e41 * this.e2, -(other.e42 * this.e315) - (other.e43 * this.e125) - (other.e45 * this.e321)) - float4((other.group0.xyz.zxy * this.group1.yzx), other.e41 * this.e235), 
            /* e415, e425, e435, e321 */
            float4(float3(0.0), -(other.e31 * this.e2) - (other.e12 * this.e3)) + float4((other.group0.xyz * this.group1.www), other.scalar * this.e321) - (other.group1.wwwx * this.group1.xyzx), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.scalar) * this.group0.xyz) + (float3(this.e5) * other.group1.xyz) + (other.group2.zxy * this.group1.yzx) - (other.group2.yzx * this.group1.zxy)), other.scalar * this.e5), 
            /* e1, e2, e3, e4 */
            float4(float3(1.0), 0.0) * float4(other.group2.www, 0.0) * float4(this.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        CircleRotor right_dual = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4(((float3(right_dual.e12345) * wedge.group0.xyz) + (float3(wedge.e12345) * right_dual.group0.xyz)), right_dual.e12345 * wedge.e12345), 
            /* e415, e425, e435, e321 */
            (float4(right_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_dual.group1), 
            /* e235, e315, e125, e5 */
            float4(right_dual.e12345 * wedge.e235, right_dual.e12345 * wedge.e315, right_dual.e12345 * wedge.e125, -(right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435)) + (right_dual.group2 * float4(wedge.group0.www, wedge.e5)), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e415 * wedge.e321) + (right_dual.e321 * wedge.e415) + (right_dual.e315 * wedge.e412) + (right_dual.e12345 * wedge.e1), (right_dual.e425 * wedge.e321) + (right_dual.e321 * wedge.e425) + (right_dual.e125 * wedge.e423) + (right_dual.e12345 * wedge.e2), (right_dual.e435 * wedge.e321) + (right_dual.e321 * wedge.e435) + (right_dual.e235 * wedge.e431) + (right_dual.e12345 * wedge.e3), -(right_dual.e412 * wedge.e435) - (right_dual.e415 * wedge.e423) - (right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412)) + float4((right_dual.group0.xyz.zxy * wedge.group2.yzx), right_dual.e12345 * wedge.e4) - float4((right_dual.group0.xyz.yzx * wedge.group2.zxy), right_dual.e423 * wedge.e415) - float4((right_dual.group2.zxy * wedge.group0.yzx), right_dual.e431 * wedge.e425)
        );
    }
}
extension AntiFlector: AntiRejectViaHorizonFrom<AntiDipoleInversion> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: AntiDipoleInversion) -> Output {
        DipoleInversion wedge = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(other.e4) * this.group1.xyz * float3(-1.0), 0.0), 
            /* e23, e31, e12, e45 */
            float4(((other.group3.zxy * this.group1.yzx) - (other.group3.yzx * this.group1.zxy)), other.e4 * this.e5 * -1.0), 
            /* e15, e25, e35, e1234 */
            (this.group1.xyzx * float4(other.group3.www, other.e423)) + float4(float3(0.0), (other.e431 * this.e2) + (other.e412 * this.e3)) - float4((this.group1.www * other.group3.xyz), other.e4 * this.e321), 
            /* e4235, e4315, e4125, e3215 */
            float4(float3(0.0), (other.e2 * this.e315) + (other.e3 * this.e125) + (other.e5 * this.e321) - (other.e125 * this.e3)) + float4((other.group1.yzx * this.group1.zxy), other.e1 * this.e235) - (float4(this.e5) * float4(other.group0.xyz, other.e321)) - (other.group2.wwwy * float4(this.group0.xyz, this.e2)) - (this.group1.yzxx * float4(other.group1.zxy, other.e235))
        );
        DipoleInversion right_dual = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4((float3(wedge.e1234) * right_dual.group3.xyz) - (float3(right_dual.e1234) * wedge.group3.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            (right_dual.group3.yzxw * float4(wedge.group3.zxy, wedge.e1234)) - (wedge.group3.yzxw * float4(right_dual.group3.zxy, right_dual.e1234)), 
            /* e235, e315, e125, e4 */
            (wedge.group3.xyzx * float4(right_dual.group3.www, right_dual.e41)) + float4(float3(0.0), (right_dual.e42 * wedge.e4315) + (right_dual.e43 * wedge.e4125) + (right_dual.e45 * wedge.e1234) - (right_dual.e1234 * wedge.e45) - (right_dual.e4315 * wedge.e42) - (right_dual.e4125 * wedge.e43)) - float4((wedge.group3.www * right_dual.group3.xyz), right_dual.e4235 * wedge.e41), 
            /* e1, e2, e3, e5 */
            (right_dual.group3.zxyw * wedge.group1.yzxw) + (wedge.group2.wwwz * float4(right_dual.group2.xyz, right_dual.e4125)) + float4((wedge.group0.xyz * right_dual.group3.www), right_dual.e4235 * wedge.e15) + float4((right_dual.group1.zxy * wedge.group3.yzx), right_dual.e4315 * wedge.e25) - (float4(wedge.e3215) * float4(right_dual.group0.xyz, right_dual.e45)) - (right_dual.group2.wwwy * float4(wedge.group2.xyz, wedge.e4315)) - (wedge.group3.zxyx * float4(right_dual.group1.yzx, right_dual.e15)) - float4((right_dual.group3.yzx * wedge.group1.zxy), right_dual.e35 * wedge.e4125)
        );
    }
}
extension AntiFlector: AntiRejectViaHorizonFrom<AntiDualNum> {
    associatedtype Output = AntiFlector;
    func anti_reject_via_horizon_from(other: AntiDualNum) -> Output {
        AntiFlector wedge = AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            float4(other.scalar) * this.group0, 
            /* e1, e2, e3, e5 */
            float4(other.scalar) * this.group1
        );
        DualNum right_dual = DualNum.from_groups(
            /* e5, e12345, 0, 0 */
            float4(other.group0.xy, 0.0, 0.0)
        );
        return AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            float4(right_dual.e12345) * wedge.group0, 
            /* e1, e2, e3, e5 */
            float4(right_dual.e12345) * wedge.group1
        );
    }
}
extension AntiFlector: AntiRejectViaHorizonFrom<AntiFlatPoint> {
    associatedtype Output = DualNum;
    func anti_reject_via_horizon_from(other: AntiFlatPoint) -> Output {
        return DualNum.from_groups(
            /* e5, e12345, 0, 0 */
            float4(float2(-(float4(other.group0.xyz, other.e321 * -1.0)[3] * other.e235 * this.e1) - (float4(other.group0.xyz, other.e321 * -1.0)[3] * other.e315 * this.e2) - (float4(other.group0.xyz, other.e321 * -1.0)[3] * other.e125 * this.e3) - (float4(other.group0.xyz, other.e321 * -1.0)[3] * other.e321 * this.e5), 1.0) * float2(-1.0, 0.0), 0.0, 0.0)
        );
    }
}
extension AntiFlector: AntiRejectViaHorizonFrom<AntiFlector> {
    associatedtype Output = AntiFlector;
    func anti_reject_via_horizon_from(other: AntiFlector) -> Output {
        AntiMotor wedge = AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            float4(((other.group1.zxy * this.group1.yzx) - (other.group1.yzx * this.group1.zxy)), 0.0), 
            /* e15, e25, e35, e3215 */
            (other.group1.wwwx * float4(this.group1.xyz, this.e235)) + float4(float3(0.0), (other.e2 * this.e315) + (other.e3 * this.e125) + (other.e5 * this.e321) - (other.e315 * this.e2) - (other.e125 * this.e3) - (other.e321 * this.e5)) - (this.group1.wwwx * float4(other.group1.xyz, other.e235))
        );
        Flector right_dual = Flector.from_groups(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            float4(float3(1.0), 0.0) * float4(wedge.group1.www, 0.0) * float4(right_dual.group1.xyz, 0.0) * float4(-1.0, -1.0, -1.0, 0.0), 
            /* e1, e2, e3, e5 */
            (right_dual.group1.zxyx * float4(wedge.group0.yzx, wedge.e15)) + float4(float3(0.0), (wedge.e25 * right_dual.e4315) + (wedge.e35 * right_dual.e4125)) - float4((wedge.group0.zxy * right_dual.group1.yzx), wedge.e3215 * right_dual.e45)
        );
    }
}
extension AntiFlector: AntiRejectViaHorizonFrom<AntiLine> {
    associatedtype Output = AntiPlane;
    func anti_reject_via_horizon_from(other: AntiLine) -> Output {
        AntiFlatPoint wedge = AntiFlatPoint.from_groups(
            /* e235, e315, e125, e321 */
            float4((this.e2 * other.e35) + (this.e5 * other.e23), (this.e3 * other.e15) + (this.e5 * other.e31), (this.e1 * other.e25) + (this.e5 * other.e12), -(this.e2 * other.e31) - (this.e3 * other.e12)) - (this.group1.zxyx * float4(other.group1.xyz.yzx, other.e23))
        );
        Line right_dual = Line.from_groups(
            /* e415, e425, e435, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e235, e315, e125, 0 */
            float4(other.group1.xyz * float3(-1.0), 0.0)
        );
        return AntiPlane.from_groups(
            /* e1, e2, e3, e5 */
            float4((float3(wedge.e321) * right_dual.group0.xyz), -(wedge.e235 * right_dual.e415) - (wedge.e315 * right_dual.e425) - (wedge.e125 * right_dual.e435))
        );
    }
}
extension AntiFlector: AntiRejectViaHorizonFrom<AntiMotor> {
    associatedtype Output = AntiFlector;
    func anti_reject_via_horizon_from(other: AntiMotor) -> Output {
        AntiFlector wedge = AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            float4((this.e2 * other.e35) + (this.e5 * other.e23), (this.e3 * other.e15) + (this.e5 * other.e31), (this.e1 * other.e25) + (this.e5 * other.e12), -(this.e2 * other.e31) - (this.e3 * other.e12)) + (float4(other.scalar) * this.group0) - (this.group1.zxyx * float4(other.group1.yzx, other.e23)), 
            /* e1, e2, e3, e5 */
            float4(other.scalar) * this.group1
        );
        Motor right_dual = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            float4(right_dual.e12345) * wedge.group0, 
            /* e1, e2, e3, e5 */
            float4(wedge.e1 * right_dual.e12345, wedge.e2 * right_dual.e12345, wedge.e3 * right_dual.e12345, -(wedge.e235 * right_dual.e415) - (wedge.e315 * right_dual.e425) - (wedge.e125 * right_dual.e435)) + (right_dual.group0 * float4(wedge.group0.www, wedge.e5))
        );
    }
}
extension AntiFlector: AntiRejectViaHorizonFrom<AntiPlane> {
    associatedtype Output = AntiFlector;
    func anti_reject_via_horizon_from(other: AntiPlane) -> Output {
        AntiMotor wedge = AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            float4(((this.group1.yzx * other.group0.zxy) - (this.group1.zxy * other.group0.yzx)), 0.0), 
            /* e15, e25, e35, e3215 */
            float4(this.e5 * other.e1 * -1.0, this.e5 * other.e2 * -1.0, this.e5 * other.e3 * -1.0, (this.e315 * other.e2) + (this.e125 * other.e3) + (this.e321 * other.e5)) + (other.group0.wwwx * float4(this.group1.xyz, this.e235))
        );
        Plane right_dual = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            float4(float3(1.0), 0.0) * float4(wedge.group1.www, 0.0) * float4(right_dual.group0.xyz, 0.0) * float4(-1.0, -1.0, -1.0, 0.0), 
            /* e1, e2, e3, e5 */
            float4(wedge.e12 * right_dual.e4315 * -1.0, wedge.e23 * right_dual.e4125 * -1.0, wedge.e31 * right_dual.e4235 * -1.0, (wedge.e25 * right_dual.e4315) + (wedge.e35 * right_dual.e4125)) + (right_dual.group0.zxyx * float4(wedge.group0.yzx, wedge.e15))
        );
    }
}
extension AntiFlector: AntiRejectViaHorizonFrom<Circle> {
    associatedtype Output = RoundPoint;
    func anti_reject_via_horizon_from(other: Circle) -> Output {
        Sphere wedge = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(this.e3 * other.e425, this.e1 * other.e435, this.e2 * other.e415, -(this.e3 * other.e125) - (this.e5 * other.e321)) - (this.group1.wwwx * float4(other.group0.xyz, other.e235)) - float4((this.group1.yzx * other.group1.zxy), this.e2 * other.e315), 
            /* e1234, 0, 0, 0 */
            float4((this.e1 * other.e423) + (this.e2 * other.e431) + (this.e3 * other.e412), 0.0, 0.0, 0.0)
        );
        Dipole right_dual = Dipole.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, 0 */
            float4(other.group2.xyz, 0.0)
        );
        return RoundPoint.from_groups(
            /* e1, e2, e3, e4 */
            float4(-(right_dual.e41 * wedge.e3215) - (right_dual.e31 * wedge.e4125), -(right_dual.e42 * wedge.e3215) - (right_dual.e12 * wedge.e4235), -(right_dual.e43 * wedge.e3215) - (right_dual.e23 * wedge.e4315), (right_dual.e43 * wedge.e4125) + (right_dual.e45 * wedge.e1234)) + (wedge.group0.yzxy * float4(right_dual.group1.zxy, right_dual.e42)) + float4((float3(wedge.e1234) * right_dual.group2.xyz), right_dual.e41 * wedge.e4235), 
            /* e5, 0, 0, 0 */
            float4(-(right_dual.e45 * wedge.e3215) - (right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125), 0.0, 0.0, 0.0)
        );
    }
}
extension AntiFlector: AntiRejectViaHorizonFrom<CircleRotor> {
    associatedtype Output = RoundPoint;
    func anti_reject_via_horizon_from(other: CircleRotor) -> Output {
        Sphere wedge = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(this.e3 * other.e425, this.e1 * other.e435, this.e2 * other.e415, -(this.e3 * other.e125) - (this.e5 * other.e321)) - (this.group1.yzxy * float4(other.group1.zxy, other.e315)) - float4((other.group0.xyz * this.group1.www), this.e1 * other.e235), 
            /* e1234, 0, 0, 0 */
            float4((this.e1 * other.e423) + (this.e2 * other.e431) + (this.e3 * other.e412), 0.0, 0.0, 0.0)
        );
        AntiCircleRotor right_dual = AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return RoundPoint.from_groups(
            /* e1, e2, e3, e4 */
            float4(-(right_dual.e41 * wedge.e3215) - (right_dual.e31 * wedge.e4125), -(right_dual.e42 * wedge.e3215) - (right_dual.e12 * wedge.e4235), -(right_dual.e43 * wedge.e3215) - (right_dual.e23 * wedge.e4315), (right_dual.e43 * wedge.e4125) + (right_dual.e45 * wedge.e1234)) + (wedge.group0.yzxx * float4(right_dual.group1.zxy, right_dual.e41)) + float4((float3(wedge.e1234) * right_dual.group2.xyz), right_dual.e42 * wedge.e4315), 
            /* e5, 0, 0, 0 */
            float4(-(right_dual.e45 * wedge.e3215) - (right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125), 0.0, 0.0, 0.0)
        );
    }
}
extension AntiFlector: AntiRejectViaHorizonFrom<Dipole> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: Dipole) -> Output {
        CircleRotor wedge = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4((other.group0.xyz.yzx * this.group1.zxy) - (other.group0.xyz.zxy * this.group1.yzx), 0.0), 
            /* e415, e425, e435, e321 */
            float4(this.e5 * other.e41, this.e5 * other.e42, this.e5 * other.e43, -(this.e2 * other.e31) - (this.e3 * other.e12)) - (this.group1.xyzx * other.group1.wwwx), 
            /* e235, e315, e125, e12345 */
            float4((this.e2 * other.e35) + (this.e5 * other.e23), (this.e3 * other.e15) + (this.e5 * other.e31), (this.e1 * other.e25) + (this.e5 * other.e12), -(this.e315 * other.e42) - (this.e125 * other.e43) - (this.e321 * other.e45)) - float4((other.group2.xyz.yzx * this.group1.zxy), this.e235 * other.e41)
        );
        Circle right_dual = Circle.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, 0 */
            float4(other.group2.xyz * float3(-1.0), 0.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(wedge.e12345) * right_dual.group1, 
            /* e235, e315, e125, e4 */
            float4((float3(wedge.e12345) * right_dual.group2.xyz), -(right_dual.e423 * wedge.e415) - (right_dual.e431 * wedge.e425) - (right_dual.e412 * wedge.e435) - (right_dual.e415 * wedge.e423) - (right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412)), 
            /* e1, e2, e3, e5 */
            float4((right_dual.e412 * wedge.e315) + (right_dual.e415 * wedge.e321) + (right_dual.e321 * wedge.e415) + (right_dual.e315 * wedge.e412), (right_dual.e423 * wedge.e125) + (right_dual.e425 * wedge.e321) + (right_dual.e321 * wedge.e425) + (right_dual.e125 * wedge.e423), (right_dual.e431 * wedge.e235) + (right_dual.e435 * wedge.e321) + (right_dual.e321 * wedge.e435) + (right_dual.e235 * wedge.e431), -(right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e125 * wedge.e435)) - float4((right_dual.group0.xyz.yzx * wedge.group2.zxy), right_dual.e235 * wedge.e415) - float4((right_dual.group2.xyz.zxy * wedge.group0.xyz.yzx), right_dual.e315 * wedge.e425)
        );
    }
}
extension AntiFlector: AntiRejectViaHorizonFrom<DipoleInversion> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: DipoleInversion) -> Output {
        CircleRotor wedge = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4((other.group0.xyz.yzx * this.group1.zxy) - (other.group0.xyz.zxy * this.group1.yzx), 0.0), 
            /* e415, e425, e435, e321 */
            float4(this.e5 * other.e41, this.e5 * other.e42, this.e5 * other.e43, -(this.e2 * other.e31) - (this.e3 * other.e12)) - (this.group1.xyzx * other.group1.wwwx), 
            /* e235, e315, e125, e12345 */
            (this.group1.yzxx * float4(other.group2.zxy, other.e4235)) + (this.group1.wwwy * float4(other.group1.xyz, other.e4315)) + float4(float3(0.0), (this.e3 * other.e4125) + (this.e5 * other.e1234) - (this.e315 * other.e42) - (this.e125 * other.e43) - (this.e321 * other.e45)) - float4((this.group1.zxy * other.group2.yzx), this.e235 * other.e41)
        );
        AntiDipoleInversion right_dual = AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(wedge.e12345) * right_dual.group1, 
            /* e235, e315, e125, e4 */
            float4((float3(wedge.e12345) * right_dual.group2.xyz), (right_dual.e4 * wedge.e12345) - (right_dual.e423 * wedge.e415) - (right_dual.e431 * wedge.e425) - (right_dual.e412 * wedge.e435) - (right_dual.e415 * wedge.e423) - (right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412)), 
            /* e1, e2, e3, e5 */
            float4((right_dual.e415 * wedge.e321) + (right_dual.e321 * wedge.e415) + (right_dual.e315 * wedge.e412) + (right_dual.e1 * wedge.e12345), (right_dual.e425 * wedge.e321) + (right_dual.e321 * wedge.e425) + (right_dual.e125 * wedge.e423) + (right_dual.e2 * wedge.e12345), (right_dual.e435 * wedge.e321) + (right_dual.e321 * wedge.e435) + (right_dual.e235 * wedge.e431) + (right_dual.e3 * wedge.e12345), -(right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435)) + (wedge.group2.yzxw * float4(right_dual.group0.xyz.zxy, right_dual.e5)) - (wedge.group2.zxyx * float4(right_dual.group0.xyz.yzx, right_dual.e415)) - float4((wedge.group0.xyz.yzx * right_dual.group2.zxy), right_dual.e425 * wedge.e315)
        );
    }
}
extension AntiFlector: AntiRejectViaHorizonFrom<DualNum> {
    associatedtype Output = AntiFlatPoint;
    func anti_reject_via_horizon_from(other: DualNum) -> Output {
        AntiDualNum right_dual = AntiDualNum.from_groups(
            /* e3215, scalar, 0, 0 */
            float4(other.group0.xy * float2(-1.0), 0.0, 0.0)
        );
        return AntiFlatPoint.from_groups(
            /* e235, e315, e125, e321 */
            float4(right_dual.group0.xy.xx, right_dual.e3215, 0.0) * float4(float3(0.0), 0.0) * float4(float3(1.0), 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
    }
}
extension AntiFlector: AntiRejectViaHorizonFrom<FlatPoint> {
    associatedtype Output = AntiFlector;
    func anti_reject_via_horizon_from(other: FlatPoint) -> Output {
        Motor wedge = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4(other.e45) * float4(this.group1.xyz, this.e321) * float4(-1.0), 
            /* e235, e315, e125, e5 */
            float4(((this.group1.yzx * other.group0.zxy) - (this.group1.zxy * other.group0.yzx)), 0.0)
        );
        AntiFlatPoint right_dual = AntiFlatPoint.from_groups(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            float4(wedge.e12345) * right_dual.group0, 
            /* e1, e2, e3, e5 */
            float4((right_dual.group0.www * wedge.group0.xyz), -(right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435))
        );
    }
}
extension AntiFlector: AntiRejectViaHorizonFrom<Flector> {
    associatedtype Output = AntiFlector;
    func anti_reject_via_horizon_from(other: Flector) -> Output {
        Motor wedge = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4((float3(other.e45) * this.group1.xyz * float3(-1.0)), (this.e1 * other.e4235) + (this.e2 * other.e4315) + (this.e3 * other.e4125) - (this.e321 * other.e45)), 
            /* e235, e315, e125, e5 */
            float4(((this.group1.yzx * other.group0.zxy) - (this.group1.zxy * other.group0.yzx)), 0.0)
        );
        AntiFlector right_dual = AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            float4(wedge.e12345) * right_dual.group0, 
            /* e1, e2, e3, e5 */
            float4(right_dual.e1 * wedge.e12345, right_dual.e2 * wedge.e12345, right_dual.e3 * wedge.e12345, -(right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435)) + (wedge.group0 * float4(right_dual.group0.www, right_dual.e5))
        );
    }
}
extension AntiFlector: AntiRejectViaHorizonFrom<Line> {
    associatedtype Output = AntiPlane;
    func anti_reject_via_horizon_from(other: Line) -> Output {
        Plane wedge = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(this.e3 * other.e425, this.e1 * other.e435, this.e2 * other.e415, -(this.e2 * other.e315) - (this.e3 * other.e125)) - (this.group1.yzxx * float4(other.group0.xyz.zxy, other.e235))
        );
        AntiLine right_dual = AntiLine.from_groups(
            /* e23, e31, e12, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e15, e25, e35, 0 */
            float4(other.group1.xyz, 0.0)
        );
        return AntiPlane.from_groups(
            /* e1, e2, e3, e5 */
            float4(right_dual.e12 * wedge.e4315, right_dual.e23 * wedge.e4125, right_dual.e31 * wedge.e4235, -(right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125)) - (wedge.group0.zxyx * float4(right_dual.group0.xyz.yzx, right_dual.e15))
        );
    }
}
extension AntiFlector: AntiRejectViaHorizonFrom<Motor> {
    associatedtype Output = AntiFlector;
    func anti_reject_via_horizon_from(other: Motor) -> Output {
        Flector wedge = Flector.from_groups(
            /* e15, e25, e35, e45 */
            float4(float3(1.0), 0.0) * float4(other.group1.www, 0.0) * float4(this.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(float3(0.0), -(this.e2 * other.e315) - (this.e3 * other.e125)) + float4((this.group1.zxy * other.group0.yzx), this.e321 * other.e5) - (this.group1.yzxx * float4(other.group0.zxy, other.e235))
        );
        AntiMotor right_dual = AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            float4(float3(1.0), 0.0) * float4(right_dual.group1.www, 0.0) * float4(wedge.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e1, e2, e3, e5 */
            float4(float3(0.0), -(right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125)) + float4((right_dual.group0.zxy * wedge.group1.yzx), right_dual.e3215 * wedge.e45) - (wedge.group1.zxyx * float4(right_dual.group0.yzx, right_dual.e15))
        );
    }
}
extension AntiFlector: AntiRejectViaHorizonFrom<MultiVector> {
    associatedtype Output = MultiVector;
    func anti_reject_via_horizon_from(other: MultiVector) -> Output {
        MultiVector wedge = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(0.0, (this.e1 * other.e4235) + (this.e2 * other.e4315) + (this.e3 * other.e4125) + (this.e5 * other.e1234) - (this.e235 * other.e41) - (this.e315 * other.e42) - (this.e125 * other.e43) - (this.e321 * other.e45)), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(other.group0.xy.xx, other.scalar, 0.0) * float4(float3(1.0), 0.0) * float4(this.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e5, 0, 0, 0 */
            float4(this.e5 * other.scalar, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(((float3(other.e5) * this.group1.xyz) - (float3(this.e5) * other.group1.xyz)), this.e5 * other.e4 * -1.0), 
            /* e41, e42, e43, 0 */
            float4(float3(other.e4) * this.group1.xyz * float3(-1.0), 0.0), 
            /* e23, e31, e12, 0 */
            float4((this.group1.yzx * other.group1.zxy) - (this.group1.zxy * other.group1.yzx), 0.0), 
            /* e415, e425, e435, e321 */
            float4(float3(0.0), -(this.e2 * other.e31) - (this.e3 * other.e12)) + float4((other.group4.xyz * this.group1.www), this.e321 * other.scalar) - float4((other.group3.www * this.group1.xyz), this.e1 * other.e23), 
            /* e423, e431, e412, 0 */
            float4((other.group4.xyz.yzx * this.group1.zxy) - (other.group4.xyz.zxy * this.group1.yzx), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(this.e5) * other.group5.xyz) + (float3(other.scalar) * this.group0.xyz) + (this.group1.yzx * other.group3.zxy) - (this.group1.zxy * other.group3.yzx), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(float3(0.0), (this.e315 * other.e2) + (this.e125 * other.e3) + (this.e321 * other.e5) - (this.e5 * other.e321)) + float4((this.group1.zxy * other.group6.yzx), this.e235 * other.e1) - (this.group1.wwwx * float4(other.group7.xyz, other.e235)) - float4((this.group1.yzx * other.group6.zxy), this.e3 * other.e125) - float4((other.group1.www * this.group0.xyz), this.e2 * other.e315), 
            /* e1234, 0, 0, 0 */
            float4((this.e1 * other.e423) + (this.e2 * other.e431) + (this.e3 * other.e412) - (this.e321 * other.e4), 0.0, 0.0, 0.0)
        );
        MultiVector right_dual = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(other.group0.xy.yx * float2(-1.0, 1.0), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5, 0, 0, 0 */
            float4(other.e3215, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43, 0 */
            float4(other.group7.xyz, 0.0), 
            /* e23, e31, e12, 0 */
            float4(other.group6.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412, 0 */
            float4(other.group4.xyz * float3(-1.0), 0.0), 
            /* e235, e315, e125, 0 */
            float4(other.group3.xyz * float3(-1.0), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        return MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2((right_dual.scalar * wedge.e12345) + (right_dual.e12345 * wedge.scalar) + (right_dual.e1 * wedge.e4235) + (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) + (right_dual.e4 * wedge.e3215) + (right_dual.e5 * wedge.e1234) + (right_dual.e4235 * wedge.e1) + (right_dual.e4315 * wedge.e2) + (right_dual.e4125 * wedge.e3) + (right_dual.e3215 * wedge.e4) + (right_dual.e1234 * wedge.e5) - (right_dual.e15 * wedge.e423) - (right_dual.e25 * wedge.e431) - (right_dual.e35 * wedge.e412) - (right_dual.e45 * wedge.e321) - (right_dual.e41 * wedge.e235) - (right_dual.e42 * wedge.e315) - (right_dual.e43 * wedge.e125) - (right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e321 * wedge.e45) - (right_dual.e423 * wedge.e15) - (right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43), right_dual.e12345 * wedge.e12345), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e15 * wedge.e1234) + (right_dual.e415 * wedge.e321) + (right_dual.e321 * wedge.e415) + (right_dual.e4125 * wedge.e31), (right_dual.e25 * wedge.e1234) + (right_dual.e425 * wedge.e321) + (right_dual.e321 * wedge.e425) + (right_dual.e4235 * wedge.e12), (right_dual.e35 * wedge.e1234) + (right_dual.e435 * wedge.e321) + (right_dual.e321 * wedge.e435) + (right_dual.e4315 * wedge.e23), -(right_dual.e415 * wedge.e423) - (right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412) - (right_dual.e1234 * wedge.e45)) + (float4(right_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_dual.group1) + (wedge.group9.yzxx * float4(right_dual.group5.xyz.zxy, right_dual.e41)) + float4((wedge.group4.xyz * right_dual.group9.www), right_dual.e45 * wedge.e1234) + float4((right_dual.group7.xyz.zxy * wedge.group8.xyz.yzx), right_dual.e42 * wedge.e4315) + float4((right_dual.group8.xyz.yzx * wedge.group7.xyz.zxy), right_dual.e43 * wedge.e4125) - (right_dual.group9.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((float3(right_dual.e1234) * wedge.group3.xyz), right_dual.e4125 * wedge.e43) - float4((right_dual.group4.xyz * wedge.group9.www), right_dual.e423 * wedge.e415) - float4((right_dual.group5.xyz.yzx * wedge.group9.zxy), right_dual.e431 * wedge.e425) - float4((right_dual.group7.xyz.yzx * wedge.group8.xyz.zxy), right_dual.e412 * wedge.e435) - float4((right_dual.group8.xyz.zxy * wedge.group7.xyz.yzx), right_dual.e4235 * wedge.e41), 
            /* e5, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e5) + (right_dual.e5 * wedge.e12345) + (right_dual.e4235 * wedge.e15) + (right_dual.e4315 * wedge.e25) + (right_dual.e4125 * wedge.e35) + (right_dual.e3215 * wedge.e45) - (right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125) - (right_dual.e45 * wedge.e3215) - (right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435), 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4((right_dual.e415 * wedge.e3215) + (right_dual.e315 * wedge.e4125) + (right_dual.e4125 * wedge.e315) + (right_dual.e3215 * wedge.e415), (right_dual.e425 * wedge.e3215) + (right_dual.e125 * wedge.e4235) + (right_dual.e4235 * wedge.e125) + (right_dual.e3215 * wedge.e425), (right_dual.e435 * wedge.e3215) + (right_dual.e235 * wedge.e4315) + (right_dual.e4315 * wedge.e235) + (right_dual.e3215 * wedge.e435), -(right_dual.e435 * wedge.e4125) - (right_dual.e4235 * wedge.e415) - (right_dual.e4315 * wedge.e425) - (right_dual.e4125 * wedge.e435)) + (float4(right_dual.e12345) * wedge.group3) + (float4(wedge.e12345) * right_dual.group3) - (wedge.group9.yzxx * float4(right_dual.group8.xyz.zxy, right_dual.e415)) - float4((wedge.group8.xyz.zxy * right_dual.group9.yzx), right_dual.e425 * wedge.e4315), 
            /* e41, e42, e43, 0 */
            float4((float3(right_dual.e12345) * wedge.group4.xyz) + (float3(right_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_dual.group4.xyz) + (float3(wedge.e1234) * right_dual.group6.xyz) + (right_dual.group7.xyz.zxy * wedge.group9.yzx) + (wedge.group7.xyz.zxy * right_dual.group9.yzx) - (right_dual.group7.xyz.yzx * wedge.group9.zxy) - (wedge.group7.xyz.yzx * right_dual.group9.zxy), 0.0), 
            /* e23, e31, e12, 0 */
            float4((float3(right_dual.e12345) * wedge.group5.xyz) + (float3(right_dual.e3215) * wedge.group7.xyz) + (float3(right_dual.e1234) * wedge.group8.xyz) + (float3(wedge.e12345) * right_dual.group5.xyz) + (float3(wedge.e3215) * right_dual.group7.xyz) + (float3(wedge.e1234) * right_dual.group8.xyz) - (float3(right_dual.e321) * wedge.group9.xyz) - (float3(wedge.e321) * right_dual.group9.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            (float4(right_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_dual.group6) + (right_dual.group9.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - float4((right_dual.group9.zxy * wedge.group9.yzx), right_dual.e1234 * wedge.e3215), 
            /* e423, e431, e412, 0 */
            float4((float3(right_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_dual.group7.xyz) + (float3(wedge.e1234) * right_dual.group9.xyz) - (float3(right_dual.e1234) * wedge.group9.xyz), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(right_dual.e12345) * wedge.group8.xyz) + (float3(right_dual.e3215) * wedge.group9.xyz) + (float3(wedge.e12345) * right_dual.group8.xyz) - (float3(wedge.e3215) * right_dual.group9.xyz), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            (float4(right_dual.e12345) * wedge.group9) + (float4(wedge.e12345) * right_dual.group9), 
            /* e1234, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e1234) + (right_dual.e1234 * wedge.e12345), 0.0, 0.0, 0.0)
        );
    }
}
extension AntiFlector: AntiRejectViaHorizonFrom<Plane> {
    associatedtype Output = AntiPlane;
    func anti_reject_via_horizon_from(other: Plane) -> Output {
        return AntiPlane.from_groups(
            /* e1, e2, e3, e5 */
            float4((this.e1 * other.e4235) + (this.e2 * other.e4315) + (this.e3 * other.e4125)) * float4(other.e4235 * -1.0, other.e4315 * -1.0, other.e4125 * -1.0, other.e3215)
        );
    }
}
extension AntiFlector: AntiRejectViaHorizonFrom<RoundPoint> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: RoundPoint) -> Output {
        DipoleInversion wedge = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(other.e4) * this.group1.xyz * float3(-1.0), 0.0), 
            /* e23, e31, e12, e45 */
            float4(((this.group1.yzx * other.group0.zxy) - (this.group1.zxy * other.group0.yzx)), this.e5 * other.e4 * -1.0), 
            /* e15, e25, e35, e1234 */
            float4(((float3(other.e5) * this.group1.xyz) - (float3(this.e5) * other.group0.xyz)), this.e321 * other.e4 * -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4((float3(other.e4) * this.group0.xyz * float3(-1.0)), (this.e235 * other.e1) + (this.e315 * other.e2) + (this.e125 * other.e3) + (this.e321 * other.e5))
        );
        Sphere right_dual = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4((float3(wedge.e1234) * right_dual.group0.xyz) - (float3(right_dual.e1234) * wedge.group3.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            (right_dual.group0.yzxw * float4(wedge.group3.zxy, wedge.e1234)) - (wedge.group3.yzxw * float4(right_dual.group0.zxy, right_dual.e1234)), 
            /* e235, e315, e125, e4 */
            float4(wedge.e4235 * right_dual.e3215, wedge.e4315 * right_dual.e3215, wedge.e4125 * right_dual.e3215, -(wedge.e42 * right_dual.e4315) - (wedge.e43 * right_dual.e4125) - (wedge.e45 * right_dual.e1234)) - (right_dual.group0.xyzx * float4(wedge.group3.www, wedge.e41)), 
            /* e1, e2, e3, e5 */
            float4(-(wedge.e12 * right_dual.e4315) - (wedge.e15 * right_dual.e1234), -(wedge.e23 * right_dual.e4125) - (wedge.e25 * right_dual.e1234), -(wedge.e31 * right_dual.e4235) - (wedge.e35 * right_dual.e1234), (wedge.e25 * right_dual.e4315) + (wedge.e35 * right_dual.e4125)) + (float4(right_dual.e3215) * float4(wedge.group0.xyz, wedge.e45)) + (right_dual.group0.zxyx * float4(wedge.group1.yzx, wedge.e15))
        );
    }
}
extension AntiFlector: AntiRejectViaHorizonFrom<Scalar> {
    associatedtype Output = AntiFlector;
    func anti_reject_via_horizon_from(other: Scalar) -> Output {
        AntiFlector wedge = AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            float4(other.scalar) * this.group0, 
            /* e1, e2, e3, e5 */
            float4(other.scalar) * this.group1
        );
        AntiScalar right_dual = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(other.scalar, 0.0, 0.0, 0.0)
        );
        return AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            float4(right_dual.e12345) * wedge.group0, 
            /* e1, e2, e3, e5 */
            float4(right_dual.e12345) * wedge.group1
        );
    }
}
extension AntiFlector: AntiRejectViaHorizonFrom<Sphere> {
    associatedtype Output = RoundPoint;
    func anti_reject_via_horizon_from(other: Sphere) -> Output {
        AntiScalar wedge = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4((this.e1 * other.e4235) + (this.e2 * other.e4315) + (this.e3 * other.e4125) + (this.e5 * other.e1234), 0.0, 0.0, 0.0)
        );
        RoundPoint right_dual = RoundPoint.from_groups(
            /* e1, e2, e3, e4 */
            float4(other.group0.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5, 0, 0, 0 */
            float4(other.e3215, 0.0, 0.0, 0.0)
        );
        return RoundPoint.from_groups(
            /* e1, e2, e3, e4 */
            float4(wedge.e12345) * right_dual.group0, 
            /* e5, 0, 0, 0 */
            float4(wedge.e12345 * right_dual.e5, 0.0, 0.0, 0.0)
        );
    }
}
extension AntiFlector: AntiRejectViaHorizonFrom<VersorEven> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: VersorEven) -> Output {
        DipoleInversion wedge = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(other.e4) * this.group1.xyz * float3(-1.0), 0.0), 
            /* e23, e31, e12, e45 */
            float4(((this.group1.yzx * other.group3.zxy) - (this.group1.zxy * other.group3.yzx)), this.e5 * other.e4 * -1.0), 
            /* e15, e25, e35, e1234 */
            (this.group1.xyzx * float4(other.group2.www, other.e423)) + float4(float3(0.0), (this.e2 * other.e431) + (this.e3 * other.e412)) - (other.group3 * float4(this.group1.www, this.e321)), 
            /* e4235, e4315, e4125, e3215 */
            float4(float3(0.0), (this.e315 * other.e2) + (this.e125 * other.e3) + (this.e321 * other.e5) - (this.e5 * other.e321)) + float4((this.group1.zxy * other.group1.yzx), this.e235 * other.e1) - (this.group1.yzxy * float4(other.group1.zxy, other.e315)) - (this.group1.wwwz * float4(other.group0.xyz, other.e125)) - float4((other.group3.www * this.group0.xyz), this.e1 * other.e235)
        );
        VersorOdd right_dual = VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4((float3(wedge.e1234) * right_dual.group3.xyz) - (float3(right_dual.e1234) * wedge.group3.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            (right_dual.group3.yzxw * float4(wedge.group3.zxy, wedge.e1234)) - (wedge.group3.yzxw * float4(right_dual.group3.zxy, right_dual.e1234)), 
            /* e235, e315, e125, e4 */
            float4(float3(0.0), (wedge.e4235 * right_dual.e41) + (wedge.e4315 * right_dual.e42) + (wedge.e4125 * right_dual.e43) - (wedge.e42 * right_dual.e4315) - (wedge.e43 * right_dual.e4125) - (wedge.e45 * right_dual.e1234)) + float4((right_dual.group3.www * wedge.group3.xyz), wedge.e1234 * right_dual.e45) - (right_dual.group3.xyzx * float4(wedge.group3.www, wedge.e41)), 
            /* e1, e2, e3, e5 */
            (float4(right_dual.e3215) * float4(wedge.group0.xyz, wedge.e45)) + (wedge.group2.wwwy * float4(right_dual.group2.xyz, right_dual.e4315)) + (right_dual.group3.zxyx * float4(wedge.group1.yzx, wedge.e15)) + float4((wedge.group3.yzx * right_dual.group1.zxy), wedge.e35 * right_dual.e4125) - (float4(wedge.e3215) * float4(right_dual.group0.xyz, right_dual.e45)) - (wedge.group3.zxyz * float4(right_dual.group1.yzx, right_dual.e35)) - (right_dual.group2.wwwy * float4(wedge.group2.xyz, wedge.e4315)) - float4((wedge.group1.zxy * right_dual.group3.yzx), wedge.e4235 * right_dual.e15)
        );
    }
}
extension AntiFlector: AntiRejectViaHorizonFrom<VersorOdd> {
    associatedtype Output = VersorEven;
    func anti_reject_via_horizon_from(other: VersorOdd) -> Output {
        VersorEven wedge = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            (this.group1.zxyx * float4(other.group0.yzx, other.e4235)) + float4(float3(0.0), (this.e2 * other.e4315) + (this.e3 * other.e4125) + (this.e5 * other.e1234) - (this.e315 * other.e42) - (this.e125 * other.e43) - (this.e321 * other.e45)) - (other.group0.zxyx * float4(this.group1.yzx, this.e235)), 
            /* e415, e425, e435, e321 */
            (other.group0 * float4(this.group1.www, this.e321)) + float4(float3(0.0), -(this.e2 * other.e31) - (this.e3 * other.e12)) - (this.group1.xyzx * other.group1.wwwx), 
            /* e235, e315, e125, e5 */
            float4(((float3(this.e5) * other.group1.xyz) + (float3(other.scalar) * this.group0.xyz) + (this.group1.yzx * other.group2.zxy) - (this.group1.zxy * other.group2.yzx)), this.e5 * other.scalar), 
            /* e1, e2, e3, e4 */
            float4(float3(1.0), 0.0) * float4(other.group0.www, 0.0) * float4(this.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        VersorEven right_dual = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4(((float3(right_dual.e12345) * wedge.group0.xyz) + (float3(wedge.e12345) * right_dual.group0.xyz)), right_dual.e12345 * wedge.e12345), 
            /* e415, e425, e435, e321 */
            (float4(right_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_dual.group1), 
            /* e235, e315, e125, e5 */
            (float4(right_dual.e12345) * wedge.group2) + (float4(wedge.e12345) * right_dual.group2) + float4(float3(0.0), -(right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435)), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e415 * wedge.e321) + (right_dual.e321 * wedge.e415) + (right_dual.e315 * wedge.e412) + (right_dual.e1 * wedge.e12345), (right_dual.e425 * wedge.e321) + (right_dual.e321 * wedge.e425) + (right_dual.e125 * wedge.e423) + (right_dual.e2 * wedge.e12345), (right_dual.e435 * wedge.e321) + (right_dual.e321 * wedge.e435) + (right_dual.e235 * wedge.e431) + (right_dual.e3 * wedge.e12345), -(right_dual.e412 * wedge.e435) - (right_dual.e415 * wedge.e423) - (right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412)) + (right_dual.group0.zxyw * float4(wedge.group2.yzx, wedge.e4)) + float4((right_dual.group0.www * wedge.group3.xyz), right_dual.e4 * wedge.e12345) - (right_dual.group0.yzxx * float4(wedge.group2.zxy, wedge.e415)) - float4((right_dual.group2.zxy * wedge.group0.yzx), right_dual.e431 * wedge.e425)
        );
    }
}
extension AntiLine {
    // Fancy infix trick
    func operator/(_rhs: AntiRejectViaHorizonFromInfix) -> AntiRejectViaHorizonFromInfixPartial<AntiLine> {
        return AntiRejectViaHorizonFromInfixPartial { a: this };
    }
}
extension AntiLine: AntiRejectViaHorizonFrom<AntiCircleRotor> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: AntiCircleRotor) -> Output {
        DipoleInversion wedge = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(0.0), 
            /* e23, e31, e12, e45 */
            float4(float3(1.0), 0.0) * float4(this.group0.xyz, 0.0) * float4(other.group2.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e15, e25, e35, e1234 */
            float4((float3(other.scalar) * this.group1.xyz), -(other.e41 * this.e23) - (other.e42 * this.e31) - (other.e43 * this.e12)), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e42 * this.e35) + (other.e45 * this.e23), (other.e43 * this.e15) + (other.e45 * this.e31), (other.e41 * this.e25) + (other.e45 * this.e12), -(other.e23 * this.e15) - (other.e31 * this.e25) - (other.e12 * this.e35) - (other.e25 * this.e31) - (other.e35 * this.e12)) - float4((other.group0.xyz.zxy * this.group1.xyz.yzx), other.e15 * this.e23)
        );
        CircleRotor right_dual = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            float4((right_dual.e412 * wedge.e4315) + (right_dual.e415 * wedge.e1234) + (right_dual.e12345 * wedge.e41), (right_dual.e423 * wedge.e4125) + (right_dual.e425 * wedge.e1234) + (right_dual.e12345 * wedge.e42), (right_dual.e431 * wedge.e4235) + (right_dual.e435 * wedge.e1234) + (right_dual.e12345 * wedge.e43), -(right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e321 * wedge.e45) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43)) - float4((right_dual.group0.xyz.yzx * wedge.group3.zxy), right_dual.e423 * wedge.e15), 
            /* e23, e31, e12, e45 */
            float4((right_dual.e235 * wedge.e1234) + (right_dual.e12345 * wedge.e23), (right_dual.e315 * wedge.e1234) + (right_dual.e12345 * wedge.e31), (right_dual.e125 * wedge.e1234) + (right_dual.e12345 * wedge.e12), -(right_dual.e425 * wedge.e4315) - (right_dual.e435 * wedge.e4125)) + float4((right_dual.group0.xyz * wedge.group3.www), right_dual.e12345 * wedge.e45) - (right_dual.group1.wwwx * wedge.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_dual.e12345) * wedge.group2.xyz) + (float3(wedge.e3215) * right_dual.group1.xyz) + (right_dual.group2.yzx * wedge.group3.zxy) - (right_dual.group2.zxy * wedge.group3.yzx)), right_dual.e12345 * wedge.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * wedge.group3
        );
    }
}
extension AntiLine: AntiRejectViaHorizonFrom<AntiDipoleInversion> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: AntiDipoleInversion) -> Output {
        CircleRotor wedge = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(other.e4) * this.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4((float3(other.e4) * this.group1.xyz), -(other.e1 * this.e23) - (other.e2 * this.e31) - (other.e3 * this.e12)), 
            /* e235, e315, e125, e12345 */
            float4((other.e2 * this.e35) + (other.e5 * this.e23), (other.e3 * this.e15) + (other.e5 * this.e31), (other.e1 * this.e25) + (other.e5 * this.e12), -(other.e431 * this.e25) - (other.e412 * this.e35) - (other.e415 * this.e23) - (other.e425 * this.e31) - (other.e435 * this.e12)) - float4((this.group1.xyz.yzx * other.group3.zxy), other.e423 * this.e15)
        );
        DipoleInversion right_dual = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            float4((wedge.e412 * right_dual.e4315) + (wedge.e415 * right_dual.e1234) + (wedge.e12345 * right_dual.e41), (wedge.e423 * right_dual.e4125) + (wedge.e425 * right_dual.e1234) + (wedge.e12345 * right_dual.e42), (wedge.e431 * right_dual.e4235) + (wedge.e435 * right_dual.e1234) + (wedge.e12345 * right_dual.e43), -(wedge.e431 * right_dual.e25) - (wedge.e412 * right_dual.e35) - (wedge.e415 * right_dual.e23) - (wedge.e425 * right_dual.e31) - (wedge.e435 * right_dual.e12) - (wedge.e321 * right_dual.e45) - (wedge.e235 * right_dual.e41) - (wedge.e315 * right_dual.e42) - (wedge.e125 * right_dual.e43)) - float4((wedge.group0.xyz.yzx * right_dual.group3.zxy), wedge.e423 * right_dual.e15), 
            /* e23, e31, e12, e45 */
            float4((wedge.e235 * right_dual.e1234) + (wedge.e12345 * right_dual.e23), (wedge.e315 * right_dual.e1234) + (wedge.e12345 * right_dual.e31), (wedge.e125 * right_dual.e1234) + (wedge.e12345 * right_dual.e12), -(wedge.e425 * right_dual.e4315) - (wedge.e435 * right_dual.e4125)) + float4((wedge.group0.xyz * right_dual.group3.www), wedge.e12345 * right_dual.e45) - (wedge.group1.wwwx * right_dual.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(wedge.e12345) * right_dual.group2.xyz) + (float3(right_dual.e3215) * wedge.group1.xyz) + (wedge.group2.yzx * right_dual.group3.zxy) - (wedge.group2.zxy * right_dual.group3.yzx)), wedge.e12345 * right_dual.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_dual.group3
        );
    }
}
extension AntiLine: AntiRejectViaHorizonFrom<AntiDualNum> {
    associatedtype Output = AntiLine;
    func anti_reject_via_horizon_from(other: AntiDualNum) -> Output {
        AntiLine wedge = AntiLine.from_groups(
            /* e23, e31, e12, 0 */
            float4(float3(other.scalar) * this.group0.xyz, 0.0), 
            /* e15, e25, e35, 0 */
            float4(float3(other.scalar) * this.group1.xyz, 0.0)
        );
        DualNum right_dual = DualNum.from_groups(
            /* e5, e12345, 0, 0 */
            float4(other.group0.xy, 0.0, 0.0)
        );
        return AntiLine.from_groups(
            /* e23, e31, e12, 0 */
            float4(float3(right_dual.e12345) * wedge.group0.xyz, 0.0), 
            /* e15, e25, e35, 0 */
            float4(float3(right_dual.e12345) * wedge.group1.xyz, 0.0)
        );
    }
}
extension AntiLine: AntiRejectViaHorizonFrom<AntiFlector> {
    associatedtype Output = AntiMotor;
    func anti_reject_via_horizon_from(other: AntiFlector) -> Output {
        AntiFlatPoint wedge = AntiFlatPoint.from_groups(
            /* e235, e315, e125, e321 */
            float4((other.e2 * this.e35) + (other.e5 * this.e23), (other.e3 * this.e15) + (other.e5 * this.e31), (other.e1 * this.e25) + (other.e5 * this.e12), -(other.e2 * this.e31) - (other.e3 * this.e12)) - (other.group1.zxyx * float4(this.group1.xyz.yzx, this.e23))
        );
        Flector right_dual = Flector.from_groups(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            float4(wedge.e321) * float4(right_dual.group1.xyz, right_dual.e45) * float4(-1.0), 
            /* e15, e25, e35, e3215 */
            float4(((wedge.group0.yzx * right_dual.group1.zxy) - (wedge.group0.zxy * right_dual.group1.yzx)), 0.0)
        );
    }
}
extension AntiLine: AntiRejectViaHorizonFrom<AntiLine> {
    associatedtype Output = FlatPoint;
    func anti_reject_via_horizon_from(other: AntiLine) -> Output {
        AntiDualNum wedge = AntiDualNum.from_groups(
            /* e3215, scalar, 0, 0 */
            float4(float2(-(other.e23 * this.e15) - (other.e31 * this.e25) - (other.e12 * this.e35) - (other.e15 * this.e23) - (other.e25 * this.e31) - (other.e35 * this.e12), 0.0), 0.0, 0.0)
        );
        return FlatPoint.from_groups(
            /* e15, e25, e35, e45 */
            float4(wedge.group0.xy.xx, wedge.e3215, 0.0) * float4(float3(1.0), 0.0) * float4(float3(other.e23 * -1.0, other.e31 * -1.0, other.e12 * -1.0), 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
    }
}
extension AntiLine: AntiRejectViaHorizonFrom<AntiMotor> {
    associatedtype Output = AntiMotor;
    func anti_reject_via_horizon_from(other: AntiMotor) -> Output {
        AntiMotor wedge = AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            float4(float3(1.0), 0.0) * float4(this.group0.xyz, 0.0) * float4(other.group0.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e15, e25, e35, e3215 */
            float4((float3(other.scalar) * this.group1.xyz), -(this.e23 * other.e15) - (this.e31 * other.e25) - (this.e12 * other.e35) - (this.e15 * other.e23) - (this.e25 * other.e31) - (this.e35 * other.e12))
        );
        Motor right_dual = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            float4((float3(right_dual.e12345) * wedge.group0.xyz), (wedge.scalar * right_dual.e12345) - (wedge.e23 * right_dual.e415) - (wedge.e31 * right_dual.e425) - (wedge.e12 * right_dual.e435)), 
            /* e15, e25, e35, e3215 */
            float4(((float3(wedge.e3215) * right_dual.group0.xyz) + (float3(right_dual.e12345) * wedge.group1.xyz)), wedge.e3215 * right_dual.e12345)
        );
    }
}
extension AntiLine: AntiRejectViaHorizonFrom<AntiPlane> {
    associatedtype Output = AntiLine;
    func anti_reject_via_horizon_from(other: AntiPlane) -> Output {
        AntiFlatPoint wedge = AntiFlatPoint.from_groups(
            /* e235, e315, e125, e321 */
            float4((this.e23 * other.e5) + (this.e35 * other.e2), (this.e31 * other.e5) + (this.e15 * other.e3), (this.e12 * other.e5) + (this.e25 * other.e1), -(this.e31 * other.e2) - (this.e12 * other.e3)) - (other.group0.zxyx * float4(this.group1.xyz.yzx, this.e23))
        );
        Plane right_dual = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiLine.from_groups(
            /* e23, e31, e12, 0 */
            float4(float3(wedge.e321) * right_dual.group0.xyz * float3(-1.0), 0.0), 
            /* e15, e25, e35, 0 */
            float4((wedge.group0.yzx * right_dual.group0.zxy) - (wedge.group0.zxy * right_dual.group0.yzx), 0.0)
        );
    }
}
extension AntiLine: AntiRejectViaHorizonFrom<Circle> {
    associatedtype Output = Dipole;
    func anti_reject_via_horizon_from(other: Circle) -> Output {
        AntiScalar wedge = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(-(this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435) - (this.e15 * other.e423) - (this.e25 * other.e431) - (this.e35 * other.e412), 0.0, 0.0, 0.0)
        );
        Dipole right_dual = Dipole.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, 0 */
            float4(other.group2.xyz, 0.0)
        );
        return Dipole.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(wedge.e12345) * right_dual.group1, 
            /* e15, e25, e35, 0 */
            float4(float3(wedge.e12345) * right_dual.group2.xyz, 0.0)
        );
    }
}
extension AntiLine: AntiRejectViaHorizonFrom<CircleRotor> {
    associatedtype Output = AntiCircleRotor;
    func anti_reject_via_horizon_from(other: CircleRotor) -> Output {
        AntiScalar wedge = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(-(this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435) - (this.e15 * other.e423) - (this.e25 * other.e431) - (this.e35 * other.e412), 0.0, 0.0, 0.0)
        );
        AntiCircleRotor right_dual = AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(wedge.e12345) * right_dual.group1, 
            /* e15, e25, e35, scalar */
            float4(wedge.e12345) * right_dual.group2
        );
    }
}
extension AntiLine: AntiRejectViaHorizonFrom<Dipole> {
    associatedtype Output = Dipole;
    func anti_reject_via_horizon_from(other: Dipole) -> Output {
        Sphere wedge = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4((this.e23 * other.e45) + (this.e35 * other.e42), (this.e31 * other.e45) + (this.e15 * other.e43), (this.e12 * other.e45) + (this.e25 * other.e41), -(this.e31 * other.e25) - (this.e12 * other.e35) - (this.e15 * other.e23) - (this.e25 * other.e31) - (this.e35 * other.e12)) - float4((this.group1.xyz.yzx * other.group0.xyz.zxy), this.e23 * other.e15), 
            /* e1234, 0, 0, 0 */
            float4(-(this.e23 * other.e41) - (this.e31 * other.e42) - (this.e12 * other.e43), 0.0, 0.0, 0.0)
        );
        Circle right_dual = Circle.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, 0 */
            float4(other.group2.xyz * float3(-1.0), 0.0)
        );
        return Dipole.from_groups(
            /* e41, e42, e43, 0 */
            float4((float3(wedge.e1234) * right_dual.group1.xyz) + (right_dual.group0.xyz.zxy * wedge.group0.yzx) - (right_dual.group0.xyz.yzx * wedge.group0.zxy), 0.0), 
            /* e23, e31, e12, e45 */
            float4((right_dual.e423 * wedge.e3215) + (right_dual.e235 * wedge.e1234), (right_dual.e431 * wedge.e3215) + (right_dual.e315 * wedge.e1234), (right_dual.e412 * wedge.e3215) + (right_dual.e125 * wedge.e1234), -(right_dual.e425 * wedge.e4315) - (right_dual.e435 * wedge.e4125)) - (right_dual.group1.wwwx * wedge.group0.xyzx), 
            /* e15, e25, e35, 0 */
            float4((float3(wedge.e3215) * right_dual.group1.xyz) + (right_dual.group2.xyz.yzx * wedge.group0.zxy) - (right_dual.group2.xyz.zxy * wedge.group0.yzx), 0.0)
        );
    }
}
extension AntiLine: AntiRejectViaHorizonFrom<DipoleInversion> {
    associatedtype Output = AntiCircleRotor;
    func anti_reject_via_horizon_from(other: DipoleInversion) -> Output {
        Sphere wedge = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4((this.e23 * other.e45) + (this.e35 * other.e42), (this.e31 * other.e45) + (this.e15 * other.e43), (this.e12 * other.e45) + (this.e25 * other.e41), -(this.e31 * other.e25) - (this.e12 * other.e35) - (this.e15 * other.e23) - (this.e25 * other.e31) - (this.e35 * other.e12)) - float4((this.group1.xyz.yzx * other.group0.xyz.zxy), this.e23 * other.e15), 
            /* e1234, 0, 0, 0 */
            float4(-(this.e23 * other.e41) - (this.e31 * other.e42) - (this.e12 * other.e43), 0.0, 0.0, 0.0)
        );
        AntiDipoleInversion right_dual = AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4((float3(wedge.e1234) * right_dual.group1.xyz) + (right_dual.group0.xyz.zxy * wedge.group0.yzx) - (right_dual.group0.xyz.yzx * wedge.group0.zxy), 0.0), 
            /* e23, e31, e12, e45 */
            float4((right_dual.e423 * wedge.e3215) + (right_dual.e235 * wedge.e1234), (right_dual.e431 * wedge.e3215) + (right_dual.e315 * wedge.e1234), (right_dual.e412 * wedge.e3215) + (right_dual.e125 * wedge.e1234), -(right_dual.e425 * wedge.e4315) - (right_dual.e435 * wedge.e4125)) - (right_dual.group1.wwwx * wedge.group0.xyzx), 
            /* e15, e25, e35, scalar */
            float4(right_dual.e125 * wedge.e4315 * -1.0, right_dual.e235 * wedge.e4125 * -1.0, right_dual.e315 * wedge.e4235 * -1.0, (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) + (right_dual.e5 * wedge.e1234)) + (float4(wedge.e3215) * float4(right_dual.group1.xyz, right_dual.e4)) + (wedge.group0.zxyx * float4(right_dual.group2.yzx, right_dual.e1))
        );
    }
}
extension AntiLine: AntiRejectViaHorizonFrom<FlatPoint> {
    associatedtype Output = AntiLine;
    func anti_reject_via_horizon_from(other: FlatPoint) -> Output {
        Plane wedge = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4((float3(other.e45) * this.group0.xyz), -(this.e23 * other.e15) - (this.e31 * other.e25) - (this.e12 * other.e35))
        );
        AntiFlatPoint right_dual = AntiFlatPoint.from_groups(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiLine.from_groups(
            /* e23, e31, e12, 0 */
            float4(float3(right_dual.e321) * wedge.group0.xyz * float3(-1.0), 0.0), 
            /* e15, e25, e35, 0 */
            float4((right_dual.group0.yzx * wedge.group0.zxy) - (right_dual.group0.zxy * wedge.group0.yzx), 0.0)
        );
    }
}
extension AntiLine: AntiRejectViaHorizonFrom<Flector> {
    associatedtype Output = AntiMotor;
    func anti_reject_via_horizon_from(other: Flector) -> Output {
        Plane wedge = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4((float3(other.e45) * this.group0.xyz), -(this.e23 * other.e15) - (this.e31 * other.e25) - (this.e12 * other.e35))
        );
        AntiFlector right_dual = AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            float4((right_dual.group0.www * wedge.group0.xyz * float3(-1.0)), (right_dual.e1 * wedge.e4235) + (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125)), 
            /* e15, e25, e35, e3215 */
            float4(((right_dual.group0.yzx * wedge.group0.zxy) - (right_dual.group0.zxy * wedge.group0.yzx)), 0.0)
        );
    }
}
extension AntiLine: AntiRejectViaHorizonFrom<Line> {
    associatedtype Output = AntiLine;
    func anti_reject_via_horizon_from(other: Line) -> Output {
        AntiScalar wedge = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(-(this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435), 0.0, 0.0, 0.0)
        );
        AntiLine right_dual = AntiLine.from_groups(
            /* e23, e31, e12, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e15, e25, e35, 0 */
            float4(other.group1.xyz, 0.0)
        );
        return AntiLine.from_groups(
            /* e23, e31, e12, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e15, e25, e35, 0 */
            float4(float3(wedge.e12345) * right_dual.group1.xyz, 0.0)
        );
    }
}
extension AntiLine: AntiRejectViaHorizonFrom<Motor> {
    associatedtype Output = AntiMotor;
    func anti_reject_via_horizon_from(other: Motor) -> Output {
        Motor wedge = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4(float3(0.0), -(this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435)), 
            /* e235, e315, e125, e5 */
            float4(float3(1.0), 0.0) * float4(this.group0.xyz, 0.0) * float4(other.group1.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        AntiMotor right_dual = AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            float4((float3(wedge.e12345) * right_dual.group0.xyz), (right_dual.scalar * wedge.e12345) - (right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435)), 
            /* e15, e25, e35, e3215 */
            float4(((float3(right_dual.e3215) * wedge.group0.xyz) + (float3(wedge.e12345) * right_dual.group1.xyz)), right_dual.e3215 * wedge.e12345)
        );
    }
}
extension AntiLine: AntiRejectViaHorizonFrom<MultiVector> {
    associatedtype Output = MultiVector;
    func anti_reject_via_horizon_from(other: MultiVector) -> Output {
        MultiVector wedge = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(0.0, -(this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435) - (this.e15 * other.e423) - (this.e25 * other.e431) - (this.e35 * other.e412)), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5, 0, 0, 0 */
            float4(0.0), 
            /* e15, e25, e35, e45 */
            float4(other.group0.xy.xx, other.scalar, 0.0) * float4(float3(1.0), 0.0) * float4(this.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e41, e42, e43, 0 */
            float4(0.0), 
            /* e23, e31, e12, 0 */
            float4(float3(other.scalar) * this.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4((float3(other.e4) * this.group1.xyz), -(this.e23 * other.e1) - (this.e31 * other.e2) - (this.e12 * other.e3)), 
            /* e423, e431, e412, 0 */
            float4(float3(other.e4) * this.group0.xyz, 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(other.e5) * this.group0.xyz) + (this.group1.xyz.zxy * other.group1.yzx) - (this.group1.xyz.yzx * other.group1.zxy), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4((this.e23 * other.e45) + (this.e35 * other.e42), (this.e31 * other.e45) + (this.e15 * other.e43), (this.e12 * other.e45) + (this.e25 * other.e41), -(this.e31 * other.e25) - (this.e12 * other.e35) - (this.e15 * other.e23) - (this.e25 * other.e31) - (this.e35 * other.e12)) - float4((this.group1.xyz.yzx * other.group4.xyz.zxy), this.e23 * other.e15), 
            /* e1234, 0, 0, 0 */
            float4(-(this.e23 * other.e41) - (this.e31 * other.e42) - (this.e12 * other.e43), 0.0, 0.0, 0.0)
        );
        MultiVector right_dual = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(other.group0.xy.yx * float2(-1.0, 1.0), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5, 0, 0, 0 */
            float4(other.e3215, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43, 0 */
            float4(other.group7.xyz, 0.0), 
            /* e23, e31, e12, 0 */
            float4(other.group6.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412, 0 */
            float4(other.group4.xyz * float3(-1.0), 0.0), 
            /* e235, e315, e125, 0 */
            float4(other.group3.xyz * float3(-1.0), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        return MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2((right_dual.scalar * wedge.e12345) + (right_dual.e12345 * wedge.scalar) + (right_dual.e1 * wedge.e4235) + (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) + (right_dual.e4 * wedge.e3215) + (right_dual.e5 * wedge.e1234) + (right_dual.e4235 * wedge.e1) + (right_dual.e4315 * wedge.e2) + (right_dual.e4125 * wedge.e3) + (right_dual.e3215 * wedge.e4) + (right_dual.e1234 * wedge.e5) - (right_dual.e15 * wedge.e423) - (right_dual.e25 * wedge.e431) - (right_dual.e35 * wedge.e412) - (right_dual.e45 * wedge.e321) - (right_dual.e41 * wedge.e235) - (right_dual.e42 * wedge.e315) - (right_dual.e43 * wedge.e125) - (right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e321 * wedge.e45) - (right_dual.e423 * wedge.e15) - (right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43), right_dual.e12345 * wedge.e12345), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e15 * wedge.e1234) + (right_dual.e415 * wedge.e321) + (right_dual.e321 * wedge.e415) + (right_dual.e4125 * wedge.e31), (right_dual.e25 * wedge.e1234) + (right_dual.e425 * wedge.e321) + (right_dual.e321 * wedge.e425) + (right_dual.e4235 * wedge.e12), (right_dual.e35 * wedge.e1234) + (right_dual.e435 * wedge.e321) + (right_dual.e321 * wedge.e435) + (right_dual.e4315 * wedge.e23), -(right_dual.e415 * wedge.e423) - (right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412) - (right_dual.e1234 * wedge.e45)) + (float4(right_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_dual.group1) + (wedge.group9.yzxx * float4(right_dual.group5.xyz.zxy, right_dual.e41)) + float4((wedge.group4.xyz * right_dual.group9.www), right_dual.e45 * wedge.e1234) + float4((right_dual.group7.xyz.zxy * wedge.group8.xyz.yzx), right_dual.e42 * wedge.e4315) + float4((right_dual.group8.xyz.yzx * wedge.group7.xyz.zxy), right_dual.e43 * wedge.e4125) - (right_dual.group9.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((float3(right_dual.e1234) * wedge.group3.xyz), right_dual.e4125 * wedge.e43) - float4((right_dual.group4.xyz * wedge.group9.www), right_dual.e423 * wedge.e415) - float4((right_dual.group5.xyz.yzx * wedge.group9.zxy), right_dual.e431 * wedge.e425) - float4((right_dual.group7.xyz.yzx * wedge.group8.xyz.zxy), right_dual.e412 * wedge.e435) - float4((right_dual.group8.xyz.zxy * wedge.group7.xyz.yzx), right_dual.e4235 * wedge.e41), 
            /* e5, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e5) + (right_dual.e5 * wedge.e12345) + (right_dual.e4235 * wedge.e15) + (right_dual.e4315 * wedge.e25) + (right_dual.e4125 * wedge.e35) + (right_dual.e3215 * wedge.e45) - (right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125) - (right_dual.e45 * wedge.e3215) - (right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435), 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4((right_dual.e415 * wedge.e3215) + (right_dual.e315 * wedge.e4125) + (right_dual.e4125 * wedge.e315) + (right_dual.e3215 * wedge.e415), (right_dual.e425 * wedge.e3215) + (right_dual.e125 * wedge.e4235) + (right_dual.e4235 * wedge.e125) + (right_dual.e3215 * wedge.e425), (right_dual.e435 * wedge.e3215) + (right_dual.e235 * wedge.e4315) + (right_dual.e4315 * wedge.e235) + (right_dual.e3215 * wedge.e435), -(right_dual.e435 * wedge.e4125) - (right_dual.e4235 * wedge.e415) - (right_dual.e4315 * wedge.e425) - (right_dual.e4125 * wedge.e435)) + (float4(right_dual.e12345) * wedge.group3) + (float4(wedge.e12345) * right_dual.group3) - (wedge.group9.yzxx * float4(right_dual.group8.xyz.zxy, right_dual.e415)) - float4((wedge.group8.xyz.zxy * right_dual.group9.yzx), right_dual.e425 * wedge.e4315), 
            /* e41, e42, e43, 0 */
            float4((float3(right_dual.e12345) * wedge.group4.xyz) + (float3(right_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_dual.group4.xyz) + (float3(wedge.e1234) * right_dual.group6.xyz) + (right_dual.group7.xyz.zxy * wedge.group9.yzx) + (wedge.group7.xyz.zxy * right_dual.group9.yzx) - (right_dual.group7.xyz.yzx * wedge.group9.zxy) - (wedge.group7.xyz.yzx * right_dual.group9.zxy), 0.0), 
            /* e23, e31, e12, 0 */
            float4((float3(right_dual.e12345) * wedge.group5.xyz) + (float3(right_dual.e3215) * wedge.group7.xyz) + (float3(right_dual.e1234) * wedge.group8.xyz) + (float3(wedge.e12345) * right_dual.group5.xyz) + (float3(wedge.e3215) * right_dual.group7.xyz) + (float3(wedge.e1234) * right_dual.group8.xyz) - (float3(right_dual.e321) * wedge.group9.xyz) - (float3(wedge.e321) * right_dual.group9.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            (float4(right_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_dual.group6) + (right_dual.group9.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - float4((right_dual.group9.zxy * wedge.group9.yzx), right_dual.e1234 * wedge.e3215), 
            /* e423, e431, e412, 0 */
            float4((float3(right_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_dual.group7.xyz) + (float3(wedge.e1234) * right_dual.group9.xyz) - (float3(right_dual.e1234) * wedge.group9.xyz), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(right_dual.e12345) * wedge.group8.xyz) + (float3(right_dual.e3215) * wedge.group9.xyz) + (float3(wedge.e12345) * right_dual.group8.xyz) - (float3(wedge.e3215) * right_dual.group9.xyz), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            (float4(right_dual.e12345) * wedge.group9) + (float4(wedge.e12345) * right_dual.group9), 
            /* e1234, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e1234) + (right_dual.e1234 * wedge.e12345), 0.0, 0.0, 0.0)
        );
    }
}
extension AntiLine: AntiRejectViaHorizonFrom<RoundPoint> {
    associatedtype Output = Dipole;
    func anti_reject_via_horizon_from(other: RoundPoint) -> Output {
        Circle wedge = Circle.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(other.e4) * this.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4((float3(other.e4) * this.group1.xyz), -(this.e23 * other.e1) - (this.e31 * other.e2) - (this.e12 * other.e3)), 
            /* e235, e315, e125, 0 */
            float4((float3(other.e5) * this.group0.xyz) + (this.group1.xyz.zxy * other.group0.yzx) - (this.group1.xyz.yzx * other.group0.zxy), 0.0)
        );
        Sphere right_dual = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        return Dipole.from_groups(
            /* e41, e42, e43, 0 */
            float4((float3(right_dual.e1234) * wedge.group1.xyz) + (wedge.group0.xyz.zxy * right_dual.group0.yzx) - (wedge.group0.xyz.yzx * right_dual.group0.zxy), 0.0), 
            /* e23, e31, e12, e45 */
            float4((wedge.e423 * right_dual.e3215) + (wedge.e235 * right_dual.e1234), (wedge.e431 * right_dual.e3215) + (wedge.e315 * right_dual.e1234), (wedge.e412 * right_dual.e3215) + (wedge.e125 * right_dual.e1234), -(wedge.e425 * right_dual.e4315) - (wedge.e435 * right_dual.e4125)) - (wedge.group1.wwwx * right_dual.group0.xyzx), 
            /* e15, e25, e35, 0 */
            float4((float3(right_dual.e3215) * wedge.group1.xyz) + (wedge.group2.xyz.yzx * right_dual.group0.zxy) - (wedge.group2.xyz.zxy * right_dual.group0.yzx), 0.0)
        );
    }
}
extension AntiLine: AntiRejectViaHorizonFrom<Scalar> {
    associatedtype Output = AntiLine;
    func anti_reject_via_horizon_from(other: Scalar) -> Output {
        AntiLine wedge = AntiLine.from_groups(
            /* e23, e31, e12, 0 */
            float4(float3(other.scalar) * this.group0.xyz, 0.0), 
            /* e15, e25, e35, 0 */
            float4(float3(other.scalar) * this.group1.xyz, 0.0)
        );
        AntiScalar right_dual = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(other.scalar, 0.0, 0.0, 0.0)
        );
        return AntiLine.from_groups(
            /* e23, e31, e12, 0 */
            float4(float3(right_dual.e12345) * wedge.group0.xyz, 0.0), 
            /* e15, e25, e35, 0 */
            float4(float3(right_dual.e12345) * wedge.group1.xyz, 0.0)
        );
    }
}
extension AntiLine: AntiRejectViaHorizonFrom<VersorEven> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: VersorEven) -> Output {
        CircleRotor wedge = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(other.e4) * this.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4((float3(other.e4) * this.group1.xyz), -(this.e23 * other.e1) - (this.e31 * other.e2) - (this.e12 * other.e3)), 
            /* e235, e315, e125, e12345 */
            float4((this.e23 * other.e5) + (this.e35 * other.e2), (this.e31 * other.e5) + (this.e15 * other.e3), (this.e12 * other.e5) + (this.e25 * other.e1), -(this.e31 * other.e425) - (this.e12 * other.e435) - (this.e15 * other.e423) - (this.e25 * other.e431) - (this.e35 * other.e412)) - float4((this.group1.xyz.yzx * other.group3.zxy), this.e23 * other.e415)
        );
        VersorOdd right_dual = VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            float4((wedge.e415 * right_dual.e1234) + (wedge.e12345 * right_dual.e41), (wedge.e425 * right_dual.e1234) + (wedge.e12345 * right_dual.e42), (wedge.e435 * right_dual.e1234) + (wedge.e12345 * right_dual.e43), -(wedge.e431 * right_dual.e25) - (wedge.e412 * right_dual.e35) - (wedge.e415 * right_dual.e23) - (wedge.e425 * right_dual.e31) - (wedge.e435 * right_dual.e12) - (wedge.e321 * right_dual.e45) - (wedge.e235 * right_dual.e41) - (wedge.e315 * right_dual.e42) - (wedge.e125 * right_dual.e43)) + float4((wedge.group0.xyz.zxy * right_dual.group3.yzx), wedge.e12345 * right_dual.scalar) - float4((wedge.group0.xyz.yzx * right_dual.group3.zxy), wedge.e423 * right_dual.e15), 
            /* e23, e31, e12, e45 */
            float4((wedge.e235 * right_dual.e1234) + (wedge.e12345 * right_dual.e23), (wedge.e315 * right_dual.e1234) + (wedge.e12345 * right_dual.e31), (wedge.e125 * right_dual.e1234) + (wedge.e12345 * right_dual.e12), -(wedge.e425 * right_dual.e4315) - (wedge.e435 * right_dual.e4125)) + float4((wedge.group0.xyz * right_dual.group3.www), wedge.e12345 * right_dual.e45) - (wedge.group1.wwwx * right_dual.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(wedge.e12345) * right_dual.group2.xyz) + (float3(right_dual.e3215) * wedge.group1.xyz) + (wedge.group2.yzx * right_dual.group3.zxy) - (wedge.group2.zxy * right_dual.group3.yzx)), wedge.e12345 * right_dual.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_dual.group3
        );
    }
}
extension AntiLine: AntiRejectViaHorizonFrom<VersorOdd> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: VersorOdd) -> Output {
        DipoleInversion wedge = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(0.0), 
            /* e23, e31, e12, e45 */
            float4(float3(1.0), 0.0) * float4(this.group0.xyz, 0.0) * float4(other.group0.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e15, e25, e35, e1234 */
            float4((float3(other.scalar) * this.group1.xyz), -(this.e23 * other.e41) - (this.e31 * other.e42) - (this.e12 * other.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((this.e23 * other.e45) + (this.e35 * other.e42), (this.e31 * other.e45) + (this.e15 * other.e43), (this.e12 * other.e45) + (this.e25 * other.e41), -(this.e31 * other.e25) - (this.e12 * other.e35) - (this.e15 * other.e23) - (this.e25 * other.e31) - (this.e35 * other.e12)) - float4((this.group1.xyz.yzx * other.group0.zxy), this.e23 * other.e15)
        );
        VersorEven right_dual = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            (wedge.group3.yzxy * float4(right_dual.group0.zxy, right_dual.e2)) + float4(float3(0.0), (wedge.e4125 * right_dual.e3) + (wedge.e3215 * right_dual.e4) - (wedge.e42 * right_dual.e315) - (wedge.e43 * right_dual.e125) - (wedge.e23 * right_dual.e415) - (wedge.e31 * right_dual.e425) - (wedge.e12 * right_dual.e435) - (wedge.e45 * right_dual.e321) - (wedge.e15 * right_dual.e423) - (wedge.e25 * right_dual.e431) - (wedge.e35 * right_dual.e412)) + float4((wedge.group0.xyz * right_dual.group0.www), wedge.e1234 * right_dual.e5) + float4((wedge.group2.www * right_dual.group1.xyz), wedge.e4235 * right_dual.e1) - float4((wedge.group3.zxy * right_dual.group0.yzx), wedge.e41 * right_dual.e235), 
            /* e23, e31, e12, e45 */
            float4((wedge.e1234 * right_dual.e235) + (wedge.e3215 * right_dual.e423), (wedge.e1234 * right_dual.e315) + (wedge.e3215 * right_dual.e431), (wedge.e1234 * right_dual.e125) + (wedge.e3215 * right_dual.e412), -(wedge.e4315 * right_dual.e425) - (wedge.e4125 * right_dual.e435)) + (float4(right_dual.e12345) * wedge.group1) - (wedge.group3.xyzx * right_dual.group1.wwwx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(wedge.e3215) * right_dual.group1.xyz) + (float3(right_dual.e12345) * wedge.group2.xyz) + (wedge.group3.zxy * right_dual.group2.yzx) - (wedge.group3.yzx * right_dual.group2.zxy)), wedge.e1234 * right_dual.e12345), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * wedge.group3
        );
    }
}
extension AntiMotor {
    // Fancy infix trick
    func operator/(_rhs: AntiRejectViaHorizonFromInfix) -> AntiRejectViaHorizonFromInfixPartial<AntiMotor> {
        return AntiRejectViaHorizonFromInfixPartial { a: this };
    }
}
extension AntiMotor: AntiRejectViaHorizonFrom<AntiCircleRotor> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: AntiCircleRotor) -> Output {
        VersorOdd wedge = VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            float4(this.scalar) * float4(other.group0.xyz, other.scalar), 
            /* e23, e31, e12, e45 */
            float4(((float3(other.scalar) * this.group0.xyz) + (float3(this.scalar) * other.group1.xyz)), other.e45 * this.scalar), 
            /* e15, e25, e35, e1234 */
            float4((other.e15 * this.scalar) + (other.scalar * this.e15), (other.e25 * this.scalar) + (other.scalar * this.e25), (other.e35 * this.scalar) + (other.scalar * this.e35), -(other.e41 * this.e23) - (other.e42 * this.e31) - (other.e43 * this.e12)), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.e45 * this.e23, other.e45 * this.e31, other.e45 * this.e12, -(other.e31 * this.e25) - (other.e12 * this.e35) - (other.e15 * this.e23) - (other.e25 * this.e31) - (other.e35 * this.e12)) + (this.group1.zxyw * float4(other.group0.xyz.yzx, other.scalar)) - (this.group1.yzxx * float4(other.group0.xyz.zxy, other.e23))
        );
        CircleRotor right_dual = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            float4((right_dual.e415 * wedge.e1234) + (right_dual.e12345 * wedge.e41), (right_dual.e425 * wedge.e1234) + (right_dual.e12345 * wedge.e42), (right_dual.e435 * wedge.e1234) + (right_dual.e12345 * wedge.e43), -(right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e321 * wedge.e45) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43)) + float4((right_dual.group0.xyz.zxy * wedge.group3.yzx), right_dual.e12345 * wedge.scalar) - float4((right_dual.group0.xyz.yzx * wedge.group3.zxy), right_dual.e423 * wedge.e15), 
            /* e23, e31, e12, e45 */
            float4((right_dual.e235 * wedge.e1234) + (right_dual.e12345 * wedge.e23), (right_dual.e315 * wedge.e1234) + (right_dual.e12345 * wedge.e31), (right_dual.e125 * wedge.e1234) + (right_dual.e12345 * wedge.e12), -(right_dual.e425 * wedge.e4315) - (right_dual.e435 * wedge.e4125)) + float4((right_dual.group0.xyz * wedge.group3.www), right_dual.e12345 * wedge.e45) - (right_dual.group1.wwwx * wedge.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_dual.e12345) * wedge.group2.xyz) + (float3(wedge.e3215) * right_dual.group1.xyz) + (right_dual.group2.yzx * wedge.group3.zxy) - (right_dual.group2.zxy * wedge.group3.yzx)), right_dual.e12345 * wedge.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * wedge.group3
        );
    }
}
extension AntiMotor: AntiRejectViaHorizonFrom<AntiDipoleInversion> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: AntiDipoleInversion) -> Output {
        VersorEven wedge = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4(other.e4 * this.e23, other.e4 * this.e31, other.e4 * this.e12, -(other.e423 * this.e15) - (other.e431 * this.e25) - (other.e412 * this.e35) - (other.e415 * this.e23) - (other.e425 * this.e31) - (other.e435 * this.e12)) + float4((other.group0.xyz * this.group0.www), other.e4 * this.e3215), 
            /* e415, e425, e435, e321 */
            float4(other.e4 * this.e15, other.e4 * this.e25, other.e4 * this.e35, -(other.e1 * this.e23) - (other.e2 * this.e31) - (other.e3 * this.e12)) + (float4(this.scalar) * other.group1), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.e5) * this.group0.xyz) + (float3(this.scalar) * other.group2.xyz) + (other.group3.yzx * this.group1.zxy) - (other.group3.zxy * this.group1.yzx)), other.e5 * this.scalar), 
            /* e1, e2, e3, e4 */
            float4(this.scalar) * float4(other.group3.xyz, other.e4)
        );
        DipoleInversion right_dual = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            (right_dual.group3.yzxy * float4(wedge.group0.zxy, wedge.e2)) + float4(float3(0.0), (right_dual.e4125 * wedge.e3) + (right_dual.e3215 * wedge.e4) - (right_dual.e42 * wedge.e315) - (right_dual.e43 * wedge.e125) - (right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435) - (right_dual.e45 * wedge.e321) - (right_dual.e15 * wedge.e423) - (right_dual.e25 * wedge.e431) - (right_dual.e35 * wedge.e412)) + float4((right_dual.group0.xyz * wedge.group0.www), right_dual.e1234 * wedge.e5) + float4((right_dual.group2.www * wedge.group1.xyz), right_dual.e4235 * wedge.e1) - float4((right_dual.group3.zxy * wedge.group0.yzx), right_dual.e41 * wedge.e235), 
            /* e23, e31, e12, e45 */
            float4((right_dual.e1234 * wedge.e235) + (right_dual.e3215 * wedge.e423), (right_dual.e1234 * wedge.e315) + (right_dual.e3215 * wedge.e431), (right_dual.e1234 * wedge.e125) + (right_dual.e3215 * wedge.e412), -(right_dual.e4315 * wedge.e425) - (right_dual.e4125 * wedge.e435)) + (float4(wedge.e12345) * right_dual.group1) - (right_dual.group3.xyzx * wedge.group1.wwwx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_dual.e3215) * wedge.group1.xyz) + (float3(wedge.e12345) * right_dual.group2.xyz) + (right_dual.group3.zxy * wedge.group2.yzx) - (right_dual.group3.yzx * wedge.group2.zxy)), right_dual.e1234 * wedge.e12345), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_dual.group3
        );
    }
}
extension AntiMotor: AntiRejectViaHorizonFrom<AntiDualNum> {
    associatedtype Output = AntiMotor;
    func anti_reject_via_horizon_from(other: AntiDualNum) -> Output {
        AntiMotor wedge = AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            float4(other.scalar) * this.group0, 
            /* e15, e25, e35, e3215 */
            float4(other.group0.xy.yy, other.scalar, (other.e3215 * this.scalar) + (other.scalar * this.e3215)) * float4(this.group1.xyz, 1.0)
        );
        DualNum right_dual = DualNum.from_groups(
            /* e5, e12345, 0, 0 */
            float4(other.group0.xy, 0.0, 0.0)
        );
        return AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            float4(right_dual.e12345) * wedge.group0, 
            /* e15, e25, e35, e3215 */
            float4(right_dual.e12345) * wedge.group1
        );
    }
}
extension AntiMotor: AntiRejectViaHorizonFrom<AntiFlatPoint> {
    associatedtype Output = Scalar;
    func anti_reject_via_horizon_from(other: AntiFlatPoint) -> Output {
        return Scalar.from_groups(
            /* scalar, 0, 0, 0 */
            float4(float4(other.group0.xyz, other.e321 * -1.0)[3] * other.e321 * this.scalar * -1.0, 0.0, 0.0, 0.0)
        );
    }
}
extension AntiMotor: AntiRejectViaHorizonFrom<AntiFlector> {
    associatedtype Output = AntiMotor;
    func anti_reject_via_horizon_from(other: AntiFlector) -> Output {
        AntiFlector wedge = AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            float4((other.e2 * this.e35) + (other.e5 * this.e23), (other.e3 * this.e15) + (other.e5 * this.e31), (other.e1 * this.e25) + (other.e5 * this.e12), -(other.e2 * this.e31) - (other.e3 * this.e12)) + (float4(this.scalar) * other.group0) - (other.group1.zxyx * float4(this.group1.yzx, this.e23)), 
            /* e1, e2, e3, e5 */
            float4(this.scalar) * other.group1
        );
        Flector right_dual = Flector.from_groups(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            float4((wedge.group0.www * right_dual.group1.xyz * float3(-1.0)), (wedge.e1 * right_dual.e4235) + (wedge.e2 * right_dual.e4315) + (wedge.e3 * right_dual.e4125) - (wedge.e321 * right_dual.e45)), 
            /* e15, e25, e35, e3215 */
            float4(((wedge.group0.yzx * right_dual.group1.zxy) - (wedge.group0.zxy * right_dual.group1.yzx)), 0.0)
        );
    }
}
extension AntiMotor: AntiRejectViaHorizonFrom<AntiLine> {
    associatedtype Output = AntiMotor;
    func anti_reject_via_horizon_from(other: AntiLine) -> Output {
        AntiMotor wedge = AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            float4(float3(1.0), 0.0) * float4(other.group0.xyz, 0.0) * float4(this.group0.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e15, e25, e35, e3215 */
            float4((float3(this.scalar) * other.group1.xyz), -(other.e23 * this.e15) - (other.e31 * this.e25) - (other.e12 * this.e35) - (other.e15 * this.e23) - (other.e25 * this.e31) - (other.e35 * this.e12))
        );
        Line right_dual = Line.from_groups(
            /* e415, e425, e435, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e235, e315, e125, 0 */
            float4(other.group1.xyz * float3(-1.0), 0.0)
        );
        return AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            float4(float3(0.0), -(wedge.e23 * right_dual.e415) - (wedge.e31 * right_dual.e425) - (wedge.e12 * right_dual.e435)), 
            /* e15, e25, e35, e3215 */
            float4(float3(1.0), 0.0) * float4(right_dual.group0.xyz, 0.0) * float4(wedge.group1.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
    }
}
extension AntiMotor: AntiRejectViaHorizonFrom<AntiMotor> {
    associatedtype Output = AntiMotor;
    func anti_reject_via_horizon_from(other: AntiMotor) -> Output {
        AntiMotor wedge = AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            float4(((float3(other.scalar) * this.group0.xyz) + (float3(this.scalar) * other.group0.xyz)), other.scalar * this.scalar), 
            /* e15, e25, e35, e3215 */
            (float4(other.scalar) * this.group1) + (float4(this.scalar) * other.group1) + float4(float3(0.0), -(other.e23 * this.e15) - (other.e31 * this.e25) - (other.e12 * this.e35) - (other.e15 * this.e23) - (other.e25 * this.e31) - (other.e35 * this.e12))
        );
        Motor right_dual = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            float4((float3(right_dual.e12345) * wedge.group0.xyz), (wedge.scalar * right_dual.e12345) - (wedge.e23 * right_dual.e415) - (wedge.e31 * right_dual.e425) - (wedge.e12 * right_dual.e435)), 
            /* e15, e25, e35, e3215 */
            float4(((float3(wedge.e3215) * right_dual.group0.xyz) + (float3(right_dual.e12345) * wedge.group1.xyz)), wedge.e3215 * right_dual.e12345)
        );
    }
}
extension AntiMotor: AntiRejectViaHorizonFrom<AntiPlane> {
    associatedtype Output = AntiMotor;
    func anti_reject_via_horizon_from(other: AntiPlane) -> Output {
        AntiFlector wedge = AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            float4((this.e23 * other.e5) + (this.e35 * other.e2), (this.e31 * other.e5) + (this.e15 * other.e3), (this.e12 * other.e5) + (this.e25 * other.e1), -(this.e31 * other.e2) - (this.e12 * other.e3)) - (other.group0.zxyx * float4(this.group1.yzx, this.e23)), 
            /* e1, e2, e3, e5 */
            float4(this.scalar) * other.group0
        );
        Plane right_dual = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            float4((wedge.group0.www * right_dual.group0.xyz * float3(-1.0)), (wedge.e1 * right_dual.e4235) + (wedge.e2 * right_dual.e4315) + (wedge.e3 * right_dual.e4125)), 
            /* e15, e25, e35, e3215 */
            float4(((wedge.group0.yzx * right_dual.group0.zxy) - (wedge.group0.zxy * right_dual.group0.yzx)), 0.0)
        );
    }
}
extension AntiMotor: AntiRejectViaHorizonFrom<AntiScalar> {
    associatedtype Output = Scalar;
    func anti_reject_via_horizon_from(other: AntiScalar) -> Output {
        return Scalar.from_groups(
            /* scalar, 0, 0, 0 */
            float4(this.scalar * powi(other.e12345, 2) * -1.0, 0.0, 0.0, 0.0)
        );
    }
}
extension AntiMotor: AntiRejectViaHorizonFrom<Circle> {
    associatedtype Output = AntiCircleRotor;
    func anti_reject_via_horizon_from(other: Circle) -> Output {
        CircleRotor wedge = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(this.scalar) * other.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(this.scalar) * other.group1, 
            /* e235, e315, e125, e12345 */
            float4((float3(this.scalar) * other.group2.xyz), -(this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435) - (this.e15 * other.e423) - (this.e25 * other.e431) - (this.e35 * other.e412))
        );
        Dipole right_dual = Dipole.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, 0 */
            float4(other.group2.xyz, 0.0)
        );
        return AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(wedge.e12345) * right_dual.group1, 
            /* e15, e25, e35, scalar */
            float4((float3(wedge.e12345) * right_dual.group2.xyz), -(wedge.e423 * right_dual.e15) - (wedge.e431 * right_dual.e25) - (wedge.e412 * right_dual.e35) - (wedge.e415 * right_dual.e23) - (wedge.e425 * right_dual.e31) - (wedge.e435 * right_dual.e12) - (wedge.e321 * right_dual.e45) - (wedge.e235 * right_dual.e41) - (wedge.e315 * right_dual.e42) - (wedge.e125 * right_dual.e43))
        );
    }
}
extension AntiMotor: AntiRejectViaHorizonFrom<CircleRotor> {
    associatedtype Output = AntiCircleRotor;
    func anti_reject_via_horizon_from(other: CircleRotor) -> Output {
        CircleRotor wedge = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(this.scalar) * other.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(this.scalar) * other.group1, 
            /* e235, e315, e125, e12345 */
            float4((this.group0.www * other.group2.xyz), (this.scalar * other.e12345) - (this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435) - (this.e15 * other.e423) - (this.e25 * other.e431) - (this.e35 * other.e412))
        );
        AntiCircleRotor right_dual = AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(wedge.e12345) * right_dual.group1, 
            /* e15, e25, e35, scalar */
            float4((float3(wedge.e12345) * right_dual.group2.xyz), (right_dual.scalar * wedge.e12345) - (right_dual.e41 * wedge.e235) - (right_dual.e42 * wedge.e315) - (right_dual.e43 * wedge.e125) - (right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435) - (right_dual.e45 * wedge.e321) - (right_dual.e15 * wedge.e423) - (right_dual.e25 * wedge.e431) - (right_dual.e35 * wedge.e412))
        );
    }
}
extension AntiMotor: AntiRejectViaHorizonFrom<Dipole> {
    associatedtype Output = AntiCircleRotor;
    func anti_reject_via_horizon_from(other: Dipole) -> Output {
        DipoleInversion wedge = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(this.scalar) * other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(this.scalar) * other.group1, 
            /* e15, e25, e35, e1234 */
            float4((float3(this.scalar) * other.group2.xyz), -(this.e23 * other.e41) - (this.e31 * other.e42) - (this.e12 * other.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((this.e23 * other.e45) + (this.e35 * other.e42), (this.e31 * other.e45) + (this.e15 * other.e43), (this.e12 * other.e45) + (this.e25 * other.e41), -(this.e31 * other.e25) - (this.e12 * other.e35) - (this.e15 * other.e23) - (this.e25 * other.e31) - (this.e35 * other.e12)) - float4((other.group0.xyz.zxy * this.group1.yzx), this.e23 * other.e15)
        );
        Circle right_dual = Circle.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, 0 */
            float4(other.group2.xyz * float3(-1.0), 0.0)
        );
        return AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4((float3(wedge.e1234) * right_dual.group1.xyz) + (right_dual.group0.xyz.zxy * wedge.group3.yzx) - (right_dual.group0.xyz.yzx * wedge.group3.zxy), 0.0), 
            /* e23, e31, e12, e45 */
            float4((right_dual.e423 * wedge.e3215) + (right_dual.e235 * wedge.e1234), (right_dual.e431 * wedge.e3215) + (right_dual.e315 * wedge.e1234), (right_dual.e412 * wedge.e3215) + (right_dual.e125 * wedge.e1234), -(right_dual.e425 * wedge.e4315) - (right_dual.e435 * wedge.e4125)) - (right_dual.group1.wwwx * wedge.group3.xyzx), 
            /* e15, e25, e35, scalar */
            float4((right_dual.e415 * wedge.e3215) + (right_dual.e315 * wedge.e4125), (right_dual.e425 * wedge.e3215) + (right_dual.e125 * wedge.e4235), (right_dual.e435 * wedge.e3215) + (right_dual.e235 * wedge.e4315), -(right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e321 * wedge.e45) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43)) - float4((right_dual.group2.xyz.zxy * wedge.group3.yzx), right_dual.e423 * wedge.e15)
        );
    }
}
extension AntiMotor: AntiRejectViaHorizonFrom<DipoleInversion> {
    associatedtype Output = AntiCircleRotor;
    func anti_reject_via_horizon_from(other: DipoleInversion) -> Output {
        DipoleInversion wedge = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(this.scalar) * other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(this.scalar) * other.group1, 
            /* e15, e25, e35, e1234 */
            float4((this.group0.www * other.group2.xyz), (this.scalar * other.e1234) - (this.e23 * other.e41) - (this.e31 * other.e42) - (this.e12 * other.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((this.e23 * other.e45) + (this.scalar * other.e4235), (this.e31 * other.e45) + (this.scalar * other.e4315), (this.e12 * other.e45) + (this.scalar * other.e4125), -(this.e31 * other.e25) - (this.e12 * other.e35) - (this.e15 * other.e23) - (this.e25 * other.e31) - (this.e35 * other.e12)) + float4((other.group0.xyz.yzx * this.group1.zxy), this.scalar * other.e3215) - float4((other.group0.xyz.zxy * this.group1.yzx), this.e23 * other.e15)
        );
        AntiDipoleInversion right_dual = AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4((float3(wedge.e1234) * right_dual.group1.xyz) + (right_dual.group0.xyz.zxy * wedge.group3.yzx) - (right_dual.group0.xyz.yzx * wedge.group3.zxy), 0.0), 
            /* e23, e31, e12, e45 */
            float4((right_dual.e423 * wedge.e3215) + (right_dual.e235 * wedge.e1234), (right_dual.e431 * wedge.e3215) + (right_dual.e315 * wedge.e1234), (right_dual.e412 * wedge.e3215) + (right_dual.e125 * wedge.e1234), -(right_dual.e425 * wedge.e4315) - (right_dual.e435 * wedge.e4125)) - (right_dual.group1.wwwx * wedge.group3.xyzx), 
            /* e15, e25, e35, scalar */
            (float4(wedge.e3215) * float4(right_dual.group1.xyz, right_dual.e4)) + (wedge.group3.zxyx * float4(right_dual.group2.yzx, right_dual.e1)) + float4(float3(0.0), (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) + (right_dual.e5 * wedge.e1234) - (right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e321 * wedge.e45) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43)) - float4((right_dual.group2.zxy * wedge.group3.yzx), right_dual.e423 * wedge.e15)
        );
    }
}
extension AntiMotor: AntiRejectViaHorizonFrom<DualNum> {
    associatedtype Output = AntiMotor;
    func anti_reject_via_horizon_from(other: DualNum) -> Output {
        Motor wedge = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4(float3(0.0), this.scalar * other.e12345), 
            /* e235, e315, e125, e5 */
            float4(other.e5) * this.group0
        );
        AntiDualNum right_dual = AntiDualNum.from_groups(
            /* e3215, scalar, 0, 0 */
            float4(other.group0.xy * float2(-1.0), 0.0, 0.0)
        );
        return AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            float4(float3(0.0), right_dual.scalar * wedge.e12345), 
            /* e15, e25, e35, e3215 */
            float4(right_dual.e3215) * wedge.group0
        );
    }
}
extension AntiMotor: AntiRejectViaHorizonFrom<FlatPoint> {
    associatedtype Output = AntiMotor;
    func anti_reject_via_horizon_from(other: FlatPoint) -> Output {
        Flector wedge = Flector.from_groups(
            /* e15, e25, e35, e45 */
            float4(this.scalar) * other.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4((float3(other.e45) * this.group0.xyz), -(this.e23 * other.e15) - (this.e31 * other.e25) - (this.e12 * other.e35))
        );
        AntiFlatPoint right_dual = AntiFlatPoint.from_groups(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            float4(right_dual.e321) * float4(wedge.group1.xyz, wedge.e45) * float4(-1.0), 
            /* e15, e25, e35, e3215 */
            float4(((right_dual.group0.yzx * wedge.group1.zxy) - (right_dual.group0.zxy * wedge.group1.yzx)), 0.0)
        );
    }
}
extension AntiMotor: AntiRejectViaHorizonFrom<Flector> {
    associatedtype Output = AntiMotor;
    func anti_reject_via_horizon_from(other: Flector) -> Output {
        Flector wedge = Flector.from_groups(
            /* e15, e25, e35, e45 */
            float4(this.scalar) * other.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4(this.scalar * other.e4235, this.scalar * other.e4315, this.scalar * other.e4125, -(this.e23 * other.e15) - (this.e31 * other.e25) - (this.e12 * other.e35)) + (this.group0 * float4(other.group0.www, other.e3215))
        );
        AntiFlector right_dual = AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            float4((right_dual.group0.www * wedge.group1.xyz * float3(-1.0)), (right_dual.e1 * wedge.e4235) + (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) - (right_dual.e321 * wedge.e45)), 
            /* e15, e25, e35, e3215 */
            float4(((right_dual.group0.yzx * wedge.group1.zxy) - (right_dual.group0.zxy * wedge.group1.yzx)), 0.0)
        );
    }
}
extension AntiMotor: AntiRejectViaHorizonFrom<Line> {
    associatedtype Output = AntiMotor;
    func anti_reject_via_horizon_from(other: Line) -> Output {
        Motor wedge = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4((float3(this.scalar) * other.group0.xyz), -(this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435)), 
            /* e235, e315, e125, e5 */
            float4(float3(1.0), 0.0) * float4(other.group1.xyz, 0.0) * float4(this.group0.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        AntiLine right_dual = AntiLine.from_groups(
            /* e23, e31, e12, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e15, e25, e35, 0 */
            float4(other.group1.xyz, 0.0)
        );
        return AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            float4((float3(wedge.e12345) * right_dual.group0.xyz), -(right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435)), 
            /* e15, e25, e35, e3215 */
            float4(float3(1.0), 0.0) * float4(right_dual.group1.xyz, 0.0) * float4(wedge.group0.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
    }
}
extension AntiMotor: AntiRejectViaHorizonFrom<Motor> {
    associatedtype Output = AntiMotor;
    func anti_reject_via_horizon_from(other: Motor) -> Output {
        Motor wedge = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4((this.group0.www * other.group0.xyz), (this.scalar * other.e12345) - (this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435)), 
            /* e235, e315, e125, e5 */
            float4(((float3(this.scalar) * other.group1.xyz) + (float3(other.e5) * this.group0.xyz)), this.scalar * other.e5)
        );
        AntiMotor right_dual = AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            float4((float3(wedge.e12345) * right_dual.group0.xyz), (right_dual.scalar * wedge.e12345) - (right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435)), 
            /* e15, e25, e35, e3215 */
            float4(((float3(right_dual.e3215) * wedge.group0.xyz) + (float3(wedge.e12345) * right_dual.group1.xyz)), right_dual.e3215 * wedge.e12345)
        );
    }
}
extension AntiMotor: AntiRejectViaHorizonFrom<MultiVector> {
    associatedtype Output = MultiVector;
    func anti_reject_via_horizon_from(other: MultiVector) -> Output {
        MultiVector wedge = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(this.scalar * other.scalar, (this.scalar * other.e12345) + (this.e3215 * other.e4) - (this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435) - (this.e15 * other.e423) - (this.e25 * other.e431) - (this.e35 * other.e412)), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(this.scalar) * other.group1, 
            /* e5, 0, 0, 0 */
            float4(this.scalar * other.e5, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(((float3(this.scalar) * other.group3.xyz) + (float3(other.scalar) * this.group1.xyz)), this.scalar * other.e45), 
            /* e41, e42, e43, 0 */
            float4(float3(this.scalar) * other.group4.xyz, 0.0), 
            /* e23, e31, e12, 0 */
            float4((float3(this.scalar) * other.group5.xyz) + (float3(other.scalar) * this.group0.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            float4(this.e15 * other.e4, this.e25 * other.e4, this.e35 * other.e4, -(this.e23 * other.e1) - (this.e31 * other.e2) - (this.e12 * other.e3)) + (float4(this.scalar) * other.group6), 
            /* e423, e431, e412, 0 */
            float4((float3(this.scalar) * other.group7.xyz) + (float3(other.e4) * this.group0.xyz), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(this.scalar) * other.group8.xyz) + (float3(other.e5) * this.group0.xyz) + (this.group1.zxy * other.group1.yzx) - (this.group1.yzx * other.group1.zxy), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(this.scalar * other.e4235, this.scalar * other.e4315, this.scalar * other.e4125, -(this.e23 * other.e15) - (this.e31 * other.e25) - (this.e12 * other.e35) - (this.e25 * other.e31) - (this.e35 * other.e12)) + (this.group0 * float4(other.group3.www, other.e3215)) + (this.group1.zxyw * float4(other.group4.xyz.yzx, other.scalar)) - (this.group1.yzxx * float4(other.group4.xyz.zxy, other.e23)), 
            /* e1234, 0, 0, 0 */
            float4((this.scalar * other.e1234) - (this.e23 * other.e41) - (this.e31 * other.e42) - (this.e12 * other.e43), 0.0, 0.0, 0.0)
        );
        MultiVector right_dual = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(other.group0.xy.yx * float2(-1.0, 1.0), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5, 0, 0, 0 */
            float4(other.e3215, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43, 0 */
            float4(other.group7.xyz, 0.0), 
            /* e23, e31, e12, 0 */
            float4(other.group6.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412, 0 */
            float4(other.group4.xyz * float3(-1.0), 0.0), 
            /* e235, e315, e125, 0 */
            float4(other.group3.xyz * float3(-1.0), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        return MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2((right_dual.scalar * wedge.e12345) + (right_dual.e12345 * wedge.scalar) + (right_dual.e1 * wedge.e4235) + (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) + (right_dual.e4 * wedge.e3215) + (right_dual.e5 * wedge.e1234) + (right_dual.e4235 * wedge.e1) + (right_dual.e4315 * wedge.e2) + (right_dual.e4125 * wedge.e3) + (right_dual.e3215 * wedge.e4) + (right_dual.e1234 * wedge.e5) - (right_dual.e15 * wedge.e423) - (right_dual.e25 * wedge.e431) - (right_dual.e35 * wedge.e412) - (right_dual.e45 * wedge.e321) - (right_dual.e41 * wedge.e235) - (right_dual.e42 * wedge.e315) - (right_dual.e43 * wedge.e125) - (right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e321 * wedge.e45) - (right_dual.e423 * wedge.e15) - (right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43), right_dual.e12345 * wedge.e12345), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e15 * wedge.e1234) + (right_dual.e415 * wedge.e321) + (right_dual.e321 * wedge.e415) + (right_dual.e4125 * wedge.e31), (right_dual.e25 * wedge.e1234) + (right_dual.e425 * wedge.e321) + (right_dual.e321 * wedge.e425) + (right_dual.e4235 * wedge.e12), (right_dual.e35 * wedge.e1234) + (right_dual.e435 * wedge.e321) + (right_dual.e321 * wedge.e435) + (right_dual.e4315 * wedge.e23), -(right_dual.e415 * wedge.e423) - (right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412) - (right_dual.e1234 * wedge.e45)) + (float4(right_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_dual.group1) + (wedge.group9.yzxx * float4(right_dual.group5.xyz.zxy, right_dual.e41)) + float4((wedge.group4.xyz * right_dual.group9.www), right_dual.e45 * wedge.e1234) + float4((right_dual.group7.xyz.zxy * wedge.group8.xyz.yzx), right_dual.e42 * wedge.e4315) + float4((right_dual.group8.xyz.yzx * wedge.group7.xyz.zxy), right_dual.e43 * wedge.e4125) - (right_dual.group9.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((float3(right_dual.e1234) * wedge.group3.xyz), right_dual.e4125 * wedge.e43) - float4((right_dual.group4.xyz * wedge.group9.www), right_dual.e423 * wedge.e415) - float4((right_dual.group5.xyz.yzx * wedge.group9.zxy), right_dual.e431 * wedge.e425) - float4((right_dual.group7.xyz.yzx * wedge.group8.xyz.zxy), right_dual.e412 * wedge.e435) - float4((right_dual.group8.xyz.zxy * wedge.group7.xyz.yzx), right_dual.e4235 * wedge.e41), 
            /* e5, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e5) + (right_dual.e5 * wedge.e12345) + (right_dual.e4235 * wedge.e15) + (right_dual.e4315 * wedge.e25) + (right_dual.e4125 * wedge.e35) + (right_dual.e3215 * wedge.e45) - (right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125) - (right_dual.e45 * wedge.e3215) - (right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435), 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4((right_dual.e415 * wedge.e3215) + (right_dual.e315 * wedge.e4125) + (right_dual.e4125 * wedge.e315) + (right_dual.e3215 * wedge.e415), (right_dual.e425 * wedge.e3215) + (right_dual.e125 * wedge.e4235) + (right_dual.e4235 * wedge.e125) + (right_dual.e3215 * wedge.e425), (right_dual.e435 * wedge.e3215) + (right_dual.e235 * wedge.e4315) + (right_dual.e4315 * wedge.e235) + (right_dual.e3215 * wedge.e435), -(right_dual.e435 * wedge.e4125) - (right_dual.e4235 * wedge.e415) - (right_dual.e4315 * wedge.e425) - (right_dual.e4125 * wedge.e435)) + (float4(right_dual.e12345) * wedge.group3) + (float4(wedge.e12345) * right_dual.group3) - (wedge.group9.yzxx * float4(right_dual.group8.xyz.zxy, right_dual.e415)) - float4((wedge.group8.xyz.zxy * right_dual.group9.yzx), right_dual.e425 * wedge.e4315), 
            /* e41, e42, e43, 0 */
            float4((float3(right_dual.e12345) * wedge.group4.xyz) + (float3(right_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_dual.group4.xyz) + (float3(wedge.e1234) * right_dual.group6.xyz) + (right_dual.group7.xyz.zxy * wedge.group9.yzx) + (wedge.group7.xyz.zxy * right_dual.group9.yzx) - (right_dual.group7.xyz.yzx * wedge.group9.zxy) - (wedge.group7.xyz.yzx * right_dual.group9.zxy), 0.0), 
            /* e23, e31, e12, 0 */
            float4((float3(right_dual.e12345) * wedge.group5.xyz) + (float3(right_dual.e3215) * wedge.group7.xyz) + (float3(right_dual.e1234) * wedge.group8.xyz) + (float3(wedge.e12345) * right_dual.group5.xyz) + (float3(wedge.e3215) * right_dual.group7.xyz) + (float3(wedge.e1234) * right_dual.group8.xyz) - (float3(right_dual.e321) * wedge.group9.xyz) - (float3(wedge.e321) * right_dual.group9.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            (float4(right_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_dual.group6) + (right_dual.group9.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - float4((right_dual.group9.zxy * wedge.group9.yzx), right_dual.e1234 * wedge.e3215), 
            /* e423, e431, e412, 0 */
            float4((float3(right_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_dual.group7.xyz) + (float3(wedge.e1234) * right_dual.group9.xyz) - (float3(right_dual.e1234) * wedge.group9.xyz), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(right_dual.e12345) * wedge.group8.xyz) + (float3(right_dual.e3215) * wedge.group9.xyz) + (float3(wedge.e12345) * right_dual.group8.xyz) - (float3(wedge.e3215) * right_dual.group9.xyz), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            (float4(right_dual.e12345) * wedge.group9) + (float4(wedge.e12345) * right_dual.group9), 
            /* e1234, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e1234) + (right_dual.e1234 * wedge.e12345), 0.0, 0.0, 0.0)
        );
    }
}
extension AntiMotor: AntiRejectViaHorizonFrom<Plane> {
    associatedtype Output = Scalar;
    func anti_reject_via_horizon_from(other: Plane) -> Output {
        Plane wedge = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(this.scalar) * other.group0
        );
        AntiPlane right_dual = AntiPlane.from_groups(
            /* e1, e2, e3, e5 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return Scalar.from_groups(
            /* scalar, 0, 0, 0 */
            float4((right_dual.e1 * wedge.e4235) + (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125), 0.0, 0.0, 0.0)
        );
    }
}
extension AntiMotor: AntiRejectViaHorizonFrom<RoundPoint> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: RoundPoint) -> Output {
        VersorEven wedge = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4(other.e4) * float4(this.group0.xyz, this.e3215), 
            /* e415, e425, e435, e321 */
            float4((float3(other.e4) * this.group1.xyz), -(this.e23 * other.e1) - (this.e31 * other.e2) - (this.e12 * other.e3)), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.e5) * this.group0.xyz) + (this.group1.zxy * other.group0.yzx) - (this.group1.yzx * other.group0.zxy)), this.scalar * other.e5), 
            /* e1, e2, e3, e4 */
            float4(this.scalar) * other.group0
        );
        Sphere right_dual = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            float4(right_dual.e4125 * wedge.e431 * -1.0, right_dual.e4235 * wedge.e412 * -1.0, right_dual.e4315 * wedge.e423 * -1.0, (right_dual.e4125 * wedge.e3) + (right_dual.e3215 * wedge.e4) + (right_dual.e1234 * wedge.e5)) + (right_dual.group0.yzxx * float4(wedge.group0.zxy, wedge.e1)) + float4((float3(right_dual.e1234) * wedge.group1.xyz), right_dual.e4315 * wedge.e2), 
            /* e23, e31, e12, e45 */
            float4((right_dual.e3215 * wedge.e423) + (right_dual.e1234 * wedge.e235), (right_dual.e3215 * wedge.e431) + (right_dual.e1234 * wedge.e315), (right_dual.e3215 * wedge.e412) + (right_dual.e1234 * wedge.e125), -(right_dual.e4315 * wedge.e425) - (right_dual.e4125 * wedge.e435)) - (right_dual.group0.xyzx * wedge.group1.wwwx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_dual.e3215) * wedge.group1.xyz) + (right_dual.group0.zxy * wedge.group2.yzx) - (right_dual.group0.yzx * wedge.group2.zxy)), right_dual.e1234 * wedge.e12345), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_dual.group0
        );
    }
}
extension AntiMotor: AntiRejectViaHorizonFrom<Scalar> {
    associatedtype Output = AntiMotor;
    func anti_reject_via_horizon_from(other: Scalar) -> Output {
        AntiMotor wedge = AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            float4(other.scalar) * this.group0, 
            /* e15, e25, e35, e3215 */
            float4(other.scalar) * this.group1
        );
        AntiScalar right_dual = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(other.scalar, 0.0, 0.0, 0.0)
        );
        return AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            float4(right_dual.e12345) * wedge.group0, 
            /* e15, e25, e35, e3215 */
            float4(right_dual.e12345) * wedge.group1
        );
    }
}
extension AntiMotor: AntiRejectViaHorizonFrom<Sphere> {
    associatedtype Output = Scalar;
    func anti_reject_via_horizon_from(other: Sphere) -> Output {
        Sphere wedge = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(this.scalar) * other.group0, 
            /* e1234, 0, 0, 0 */
            float4(this.scalar * other.e1234, 0.0, 0.0, 0.0)
        );
        RoundPoint right_dual = RoundPoint.from_groups(
            /* e1, e2, e3, e4 */
            float4(other.group0.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5, 0, 0, 0 */
            float4(other.e3215, 0.0, 0.0, 0.0)
        );
        return Scalar.from_groups(
            /* scalar, 0, 0, 0 */
            float4((right_dual.e1 * wedge.e4235) + (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) + (right_dual.e4 * wedge.e3215) + (right_dual.e5 * wedge.e1234), 0.0, 0.0, 0.0)
        );
    }
}
extension AntiMotor: AntiRejectViaHorizonFrom<VersorEven> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: VersorEven) -> Output {
        VersorEven wedge = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            (this.group0 * float4(other.group3.www, other.e12345)) + float4(float3(0.0), -(this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435) - (this.e15 * other.e423) - (this.e25 * other.e431) - (this.e35 * other.e412)) + float4((this.group0.www * other.group0.xyz), this.e3215 * other.e4), 
            /* e415, e425, e435, e321 */
            float4(this.e15 * other.e4, this.e25 * other.e4, this.e35 * other.e4, -(this.e23 * other.e1) - (this.e31 * other.e2) - (this.e12 * other.e3)) + (float4(this.scalar) * other.group1), 
            /* e235, e315, e125, e5 */
            float4(((float3(this.scalar) * other.group2.xyz) + (float3(other.e5) * this.group0.xyz) + (this.group1.zxy * other.group3.yzx) - (this.group1.yzx * other.group3.zxy)), this.scalar * other.e5), 
            /* e1, e2, e3, e4 */
            float4(this.scalar) * other.group3
        );
        VersorOdd right_dual = VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            (wedge.group0.zxyw * float4(right_dual.group3.yzx, right_dual.scalar)) + float4(float3(0.0), (wedge.e2 * right_dual.e4315) + (wedge.e3 * right_dual.e4125) + (wedge.e4 * right_dual.e3215) - (wedge.e431 * right_dual.e25) - (wedge.e412 * right_dual.e35) - (wedge.e415 * right_dual.e23) - (wedge.e425 * right_dual.e31) - (wedge.e435 * right_dual.e12) - (wedge.e321 * right_dual.e45) - (wedge.e235 * right_dual.e41) - (wedge.e315 * right_dual.e42) - (wedge.e125 * right_dual.e43)) + float4((wedge.group0.www * right_dual.group0.xyz), wedge.e5 * right_dual.e1234) + float4((right_dual.group2.www * wedge.group1.xyz), wedge.e1 * right_dual.e4235) - (wedge.group0.yzxx * float4(right_dual.group3.zxy, right_dual.e15)), 
            /* e23, e31, e12, e45 */
            float4((wedge.e12345 * right_dual.e23) + (wedge.e235 * right_dual.e1234), (wedge.e12345 * right_dual.e31) + (wedge.e315 * right_dual.e1234), (wedge.e12345 * right_dual.e12) + (wedge.e125 * right_dual.e1234), -(wedge.e425 * right_dual.e4315) - (wedge.e435 * right_dual.e4125)) + (wedge.group0 * float4(right_dual.group3.www, right_dual.e45)) - (wedge.group1.wwwx * right_dual.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(wedge.e12345) * right_dual.group2.xyz) + (float3(right_dual.e3215) * wedge.group1.xyz) + (wedge.group2.yzx * right_dual.group3.zxy) - (wedge.group2.zxy * right_dual.group3.yzx)), wedge.e12345 * right_dual.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_dual.group3
        );
    }
}
extension AntiMotor: AntiRejectViaHorizonFrom<VersorOdd> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: VersorOdd) -> Output {
        VersorOdd wedge = VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            float4(this.scalar) * other.group0, 
            /* e23, e31, e12, e45 */
            float4(((float3(this.scalar) * other.group1.xyz) + (float3(other.scalar) * this.group0.xyz)), this.scalar * other.e45), 
            /* e15, e25, e35, e1234 */
            float4(this.e15 * other.scalar, this.e25 * other.scalar, this.e35 * other.scalar, -(this.e23 * other.e41) - (this.e31 * other.e42) - (this.e12 * other.e43)) + (float4(this.scalar) * other.group2), 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e35 * other.e42, this.e15 * other.e43, this.e25 * other.e41, -(this.e31 * other.e25) - (this.e12 * other.e35) - (this.e15 * other.e23) - (this.e25 * other.e31) - (this.e35 * other.e12)) + (this.group0 * float4(other.group1.www, other.e3215)) + float4((this.group0.www * other.group3.xyz), this.e3215 * other.scalar) - float4((this.group1.yzx * other.group0.zxy), this.e23 * other.e15)
        );
        VersorEven right_dual = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            (right_dual.group0.zxyw * float4(wedge.group3.yzx, wedge.scalar)) + float4(float3(0.0), (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) + (right_dual.e4 * wedge.e3215) - (right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e321 * wedge.e45) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43)) + float4((right_dual.group0.www * wedge.group0.xyz), right_dual.e5 * wedge.e1234) + float4((wedge.group2.www * right_dual.group1.xyz), right_dual.e1 * wedge.e4235) - (right_dual.group0.yzxx * float4(wedge.group3.zxy, wedge.e15)), 
            /* e23, e31, e12, e45 */
            float4((right_dual.e12345 * wedge.e23) + (right_dual.e235 * wedge.e1234), (right_dual.e12345 * wedge.e31) + (right_dual.e315 * wedge.e1234), (right_dual.e12345 * wedge.e12) + (right_dual.e125 * wedge.e1234), -(right_dual.e425 * wedge.e4315) - (right_dual.e435 * wedge.e4125)) + (right_dual.group0 * float4(wedge.group3.www, wedge.e45)) - (right_dual.group1.wwwx * wedge.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_dual.e12345) * wedge.group2.xyz) + (float3(wedge.e3215) * right_dual.group1.xyz) + (right_dual.group2.yzx * wedge.group3.zxy) - (right_dual.group2.zxy * wedge.group3.yzx)), right_dual.e12345 * wedge.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * wedge.group3
        );
    }
}
extension AntiPlane {
    // Fancy infix trick
    func operator/(_rhs: AntiRejectViaHorizonFromInfix) -> AntiRejectViaHorizonFromInfixPartial<AntiPlane> {
        return AntiRejectViaHorizonFromInfixPartial { a: this };
    }
}
extension AntiPlane: AntiRejectViaHorizonFrom<AntiCircleRotor> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: AntiCircleRotor) -> Output {
        AntiDipoleInversion wedge = AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4((other.group0.xyz.yzx * this.group0.zxy) - (other.group0.xyz.zxy * this.group0.yzx), 0.0), 
            /* e415, e425, e435, e321 */
            float4(other.e41 * this.e5, other.e42 * this.e5, other.e43 * this.e5, -(other.e31 * this.e2) - (other.e12 * this.e3)) - (other.group1.wwwx * this.group0.xyzx), 
            /* e235, e315, e125, e4 */
            float4((float3(this.e5) * other.group1.xyz), 0.0) + float4((other.group2.zxy * this.group0.yzx), 0.0) - float4((other.group2.yzx * this.group0.zxy), 0.0), 
            /* e1, e2, e3, e5 */
            float4(other.scalar) * this.group0
        );
        CircleRotor right_dual = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(right_dual.e12345) * wedge.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(right_dual.e12345) * wedge.group1, 
            /* e235, e315, e125, e4 */
            float4((float3(right_dual.e12345) * wedge.group2.xyz), (wedge.e4 * right_dual.e12345) - (wedge.e423 * right_dual.e415) - (wedge.e431 * right_dual.e425) - (wedge.e412 * right_dual.e435) - (wedge.e415 * right_dual.e423) - (wedge.e425 * right_dual.e431) - (wedge.e435 * right_dual.e412)), 
            /* e1, e2, e3, e5 */
            float4((wedge.e415 * right_dual.e321) + (wedge.e321 * right_dual.e415) + (wedge.e315 * right_dual.e412) + (wedge.e1 * right_dual.e12345), (wedge.e425 * right_dual.e321) + (wedge.e321 * right_dual.e425) + (wedge.e125 * right_dual.e423) + (wedge.e2 * right_dual.e12345), (wedge.e435 * right_dual.e321) + (wedge.e321 * right_dual.e435) + (wedge.e235 * right_dual.e431) + (wedge.e3 * right_dual.e12345), -(wedge.e435 * right_dual.e125) - (wedge.e235 * right_dual.e415) - (wedge.e315 * right_dual.e425) - (wedge.e125 * right_dual.e435)) + (right_dual.group2.yzxw * float4(wedge.group0.xyz.zxy, wedge.e5)) - (right_dual.group2.zxyx * float4(wedge.group0.xyz.yzx, wedge.e415)) - float4((right_dual.group0.xyz.yzx * wedge.group2.zxy), wedge.e425 * right_dual.e315)
        );
    }
}
extension AntiPlane: AntiRejectViaHorizonFrom<AntiDipoleInversion> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: AntiDipoleInversion) -> Output {
        DipoleInversion wedge = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(other.e4) * this.group0.xyz * float3(-1.0), 0.0), 
            /* e23, e31, e12, e45 */
            float4(((other.group3.zxy * this.group0.yzx) - (other.group3.yzx * this.group0.zxy)), other.e4 * this.e5 * -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.e1 * this.e5 * -1.0, other.e2 * this.e5 * -1.0, other.e3 * this.e5 * -1.0, (other.e431 * this.e2) + (other.e412 * this.e3)) + (this.group0.xyzx * float4(other.group3.www, other.e423)), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.e425 * this.e3, other.e435 * this.e1, other.e415 * this.e2, -(other.e315 * this.e2) - (other.e125 * this.e3)) - (float4(this.e5) * float4(other.group0.xyz, other.e321)) - (this.group0.yzxx * float4(other.group1.zxy, other.e235))
        );
        DipoleInversion right_dual = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4((float3(wedge.e1234) * right_dual.group3.xyz) - (float3(right_dual.e1234) * wedge.group3.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            (right_dual.group3.yzxw * float4(wedge.group3.zxy, wedge.e1234)) - (wedge.group3.yzxw * float4(right_dual.group3.zxy, right_dual.e1234)), 
            /* e235, e315, e125, e4 */
            (wedge.group3.xyzx * float4(right_dual.group3.www, right_dual.e41)) + float4(float3(0.0), (right_dual.e42 * wedge.e4315) + (right_dual.e43 * wedge.e4125) + (right_dual.e45 * wedge.e1234) - (right_dual.e1234 * wedge.e45) - (right_dual.e4315 * wedge.e42) - (right_dual.e4125 * wedge.e43)) - float4((wedge.group3.www * right_dual.group3.xyz), right_dual.e4235 * wedge.e41), 
            /* e1, e2, e3, e5 */
            (right_dual.group3.zxyw * wedge.group1.yzxw) + (wedge.group2.wwwz * float4(right_dual.group2.xyz, right_dual.e4125)) + float4((wedge.group0.xyz * right_dual.group3.www), right_dual.e4235 * wedge.e15) + float4((right_dual.group1.zxy * wedge.group3.yzx), right_dual.e4315 * wedge.e25) - (float4(wedge.e3215) * float4(right_dual.group0.xyz, right_dual.e45)) - (right_dual.group2.wwwy * float4(wedge.group2.xyz, wedge.e4315)) - (wedge.group3.zxyx * float4(right_dual.group1.yzx, right_dual.e15)) - float4((right_dual.group3.yzx * wedge.group1.zxy), right_dual.e35 * wedge.e4125)
        );
    }
}
extension AntiPlane: AntiRejectViaHorizonFrom<AntiDualNum> {
    associatedtype Output = AntiPlane;
    func anti_reject_via_horizon_from(other: AntiDualNum) -> Output {
        return AntiPlane.from_groups(
            /* e1, e2, e3, e5 */
            float4(other.scalar) * float4(other.scalar * this.e1, other.scalar * this.e2, other.scalar * this.e3, other.scalar * this.e5)
        );
    }
}
extension AntiPlane: AntiRejectViaHorizonFrom<AntiFlatPoint> {
    associatedtype Output = DualNum;
    func anti_reject_via_horizon_from(other: AntiFlatPoint) -> Output {
        return DualNum.from_groups(
            /* e5, e12345, 0, 0 */
            float4(float2(-(float4(other.group0.xyz, other.e321 * -1.0)[3] * other.e235 * this.e1) - (float4(other.group0.xyz, other.e321 * -1.0)[3] * other.e315 * this.e2) - (float4(other.group0.xyz, other.e321 * -1.0)[3] * other.e125 * this.e3) - (float4(other.group0.xyz, other.e321 * -1.0)[3] * other.e321 * this.e5), 1.0) * float2(-1.0, 0.0), 0.0, 0.0)
        );
    }
}
extension AntiPlane: AntiRejectViaHorizonFrom<AntiFlector> {
    associatedtype Output = AntiFlector;
    func anti_reject_via_horizon_from(other: AntiFlector) -> Output {
        AntiMotor wedge = AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            float4(((other.group1.zxy * this.group0.yzx) - (other.group1.yzx * this.group0.zxy)), 0.0), 
            /* e15, e25, e35, e3215 */
            float4(other.e5 * this.e1, other.e5 * this.e2, other.e5 * this.e3, -(other.e315 * this.e2) - (other.e125 * this.e3) - (other.e321 * this.e5)) - (this.group0.wwwx * float4(other.group1.xyz, other.e235))
        );
        Flector right_dual = Flector.from_groups(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            float4(float3(1.0), 0.0) * float4(wedge.group1.www, 0.0) * float4(right_dual.group1.xyz, 0.0) * float4(-1.0, -1.0, -1.0, 0.0), 
            /* e1, e2, e3, e5 */
            (right_dual.group1.zxyx * float4(wedge.group0.yzx, wedge.e15)) + float4(float3(0.0), (wedge.e25 * right_dual.e4315) + (wedge.e35 * right_dual.e4125)) - float4((wedge.group0.zxy * right_dual.group1.yzx), wedge.e3215 * right_dual.e45)
        );
    }
}
extension AntiPlane: AntiRejectViaHorizonFrom<AntiLine> {
    associatedtype Output = AntiPlane;
    func anti_reject_via_horizon_from(other: AntiLine) -> Output {
        AntiFlatPoint wedge = AntiFlatPoint.from_groups(
            /* e235, e315, e125, e321 */
            float4((other.e23 * this.e5) + (other.e35 * this.e2), (other.e31 * this.e5) + (other.e15 * this.e3), (other.e12 * this.e5) + (other.e25 * this.e1), -(other.e31 * this.e2) - (other.e12 * this.e3)) - (this.group0.zxyx * float4(other.group1.xyz.yzx, other.e23))
        );
        Line right_dual = Line.from_groups(
            /* e415, e425, e435, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e235, e315, e125, 0 */
            float4(other.group1.xyz * float3(-1.0), 0.0)
        );
        return AntiPlane.from_groups(
            /* e1, e2, e3, e5 */
            float4((float3(wedge.e321) * right_dual.group0.xyz), -(wedge.e235 * right_dual.e415) - (wedge.e315 * right_dual.e425) - (wedge.e125 * right_dual.e435))
        );
    }
}
extension AntiPlane: AntiRejectViaHorizonFrom<AntiMotor> {
    associatedtype Output = AntiFlector;
    func anti_reject_via_horizon_from(other: AntiMotor) -> Output {
        AntiFlector wedge = AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            float4((other.e23 * this.e5) + (other.e35 * this.e2), (other.e31 * this.e5) + (other.e15 * this.e3), (other.e12 * this.e5) + (other.e25 * this.e1), -(other.e31 * this.e2) - (other.e12 * this.e3)) - (this.group0.zxyx * float4(other.group1.yzx, other.e23)), 
            /* e1, e2, e3, e5 */
            float4(other.scalar) * this.group0
        );
        Motor right_dual = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            float4(right_dual.e12345) * wedge.group0, 
            /* e1, e2, e3, e5 */
            float4(wedge.e1 * right_dual.e12345, wedge.e2 * right_dual.e12345, wedge.e3 * right_dual.e12345, -(wedge.e235 * right_dual.e415) - (wedge.e315 * right_dual.e425) - (wedge.e125 * right_dual.e435)) + (right_dual.group0 * float4(wedge.group0.www, wedge.e5))
        );
    }
}
extension AntiPlane: AntiRejectViaHorizonFrom<AntiPlane> {
    associatedtype Output = AntiPlane;
    func anti_reject_via_horizon_from(other: AntiPlane) -> Output {
        AntiLine wedge = AntiLine.from_groups(
            /* e23, e31, e12, 0 */
            float4((other.group0.zxy * this.group0.yzx) - (other.group0.yzx * this.group0.zxy), 0.0), 
            /* e15, e25, e35, 0 */
            float4((float3(other.e5) * this.group0.xyz) - (float3(this.e5) * other.group0.xyz), 0.0)
        );
        Plane right_dual = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiPlane.from_groups(
            /* e1, e2, e3, e5 */
            float4(wedge.e12 * right_dual.e4315 * -1.0, wedge.e23 * right_dual.e4125 * -1.0, wedge.e31 * right_dual.e4235 * -1.0, (wedge.e25 * right_dual.e4315) + (wedge.e35 * right_dual.e4125)) + (right_dual.group0.zxyx * float4(wedge.group0.xyz.yzx, wedge.e15))
        );
    }
}
extension AntiPlane: AntiRejectViaHorizonFrom<Circle> {
    associatedtype Output = RoundPoint;
    func anti_reject_via_horizon_from(other: Circle) -> Output {
        Sphere wedge = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(this.e3 * other.e425, this.e1 * other.e435, this.e2 * other.e415, -(this.e3 * other.e125) - (this.e5 * other.e321)) - (this.group0.wwwx * float4(other.group0.xyz, other.e235)) - float4((this.group0.yzx * other.group1.zxy), this.e2 * other.e315), 
            /* e1234, 0, 0, 0 */
            float4((this.e1 * other.e423) + (this.e2 * other.e431) + (this.e3 * other.e412), 0.0, 0.0, 0.0)
        );
        Dipole right_dual = Dipole.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, 0 */
            float4(other.group2.xyz, 0.0)
        );
        return RoundPoint.from_groups(
            /* e1, e2, e3, e4 */
            float4(-(right_dual.e41 * wedge.e3215) - (right_dual.e31 * wedge.e4125), -(right_dual.e42 * wedge.e3215) - (right_dual.e12 * wedge.e4235), -(right_dual.e43 * wedge.e3215) - (right_dual.e23 * wedge.e4315), (right_dual.e43 * wedge.e4125) + (right_dual.e45 * wedge.e1234)) + (wedge.group0.yzxy * float4(right_dual.group1.zxy, right_dual.e42)) + float4((float3(wedge.e1234) * right_dual.group2.xyz), right_dual.e41 * wedge.e4235), 
            /* e5, 0, 0, 0 */
            float4(-(right_dual.e45 * wedge.e3215) - (right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125), 0.0, 0.0, 0.0)
        );
    }
}
extension AntiPlane: AntiRejectViaHorizonFrom<CircleRotor> {
    associatedtype Output = RoundPoint;
    func anti_reject_via_horizon_from(other: CircleRotor) -> Output {
        Sphere wedge = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(this.e3 * other.e425, this.e1 * other.e435, this.e2 * other.e415, -(this.e3 * other.e125) - (this.e5 * other.e321)) - (this.group0.yzxy * float4(other.group1.zxy, other.e315)) - float4((other.group0.xyz * this.group0.www), this.e1 * other.e235), 
            /* e1234, 0, 0, 0 */
            float4((this.e1 * other.e423) + (this.e2 * other.e431) + (this.e3 * other.e412), 0.0, 0.0, 0.0)
        );
        AntiCircleRotor right_dual = AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return RoundPoint.from_groups(
            /* e1, e2, e3, e4 */
            float4(-(right_dual.e41 * wedge.e3215) - (right_dual.e31 * wedge.e4125), -(right_dual.e42 * wedge.e3215) - (right_dual.e12 * wedge.e4235), -(right_dual.e43 * wedge.e3215) - (right_dual.e23 * wedge.e4315), (right_dual.e43 * wedge.e4125) + (right_dual.e45 * wedge.e1234)) + (wedge.group0.yzxx * float4(right_dual.group1.zxy, right_dual.e41)) + float4((float3(wedge.e1234) * right_dual.group2.xyz), right_dual.e42 * wedge.e4315), 
            /* e5, 0, 0, 0 */
            float4(-(right_dual.e45 * wedge.e3215) - (right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125), 0.0, 0.0, 0.0)
        );
    }
}
extension AntiPlane: AntiRejectViaHorizonFrom<Dipole> {
    associatedtype Output = RoundPoint;
    func anti_reject_via_horizon_from(other: Dipole) -> Output {
        Circle wedge = Circle.from_groups(
            /* e423, e431, e412, 0 */
            float4((other.group0.xyz.yzx * this.group0.zxy) - (other.group0.xyz.zxy * this.group0.yzx), 0.0), 
            /* e415, e425, e435, e321 */
            float4(this.e5 * other.e41, this.e5 * other.e42, this.e5 * other.e43, -(this.e2 * other.e31) - (this.e3 * other.e12)) - (this.group0.xyzx * other.group1.wwwx), 
            /* e235, e315, e125, 0 */
            float4((float3(this.e5) * other.group1.xyz) + (other.group2.xyz.zxy * this.group0.yzx) - (other.group2.xyz.yzx * this.group0.zxy), 0.0)
        );
        Circle right_dual = Circle.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, 0 */
            float4(other.group2.xyz * float3(-1.0), 0.0)
        );
        return RoundPoint.from_groups(
            /* e1, e2, e3, e4 */
            float4((right_dual.e412 * wedge.e315) + (right_dual.e415 * wedge.e321) + (right_dual.e321 * wedge.e415) + (right_dual.e315 * wedge.e412), (right_dual.e423 * wedge.e125) + (right_dual.e425 * wedge.e321) + (right_dual.e321 * wedge.e425) + (right_dual.e125 * wedge.e423), (right_dual.e431 * wedge.e235) + (right_dual.e435 * wedge.e321) + (right_dual.e321 * wedge.e435) + (right_dual.e235 * wedge.e431), -(right_dual.e412 * wedge.e435) - (right_dual.e415 * wedge.e423) - (right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412)) - float4((right_dual.group0.xyz.yzx * wedge.group2.xyz.zxy), right_dual.e423 * wedge.e415) - float4((right_dual.group2.xyz.zxy * wedge.group0.xyz.yzx), right_dual.e431 * wedge.e425), 
            /* e5, 0, 0, 0 */
            float4(-(right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435), 0.0, 0.0, 0.0)
        );
    }
}
extension AntiPlane: AntiRejectViaHorizonFrom<DipoleInversion> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: DipoleInversion) -> Output {
        CircleRotor wedge = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4((other.group0.xyz.yzx * this.group0.zxy) - (other.group0.xyz.zxy * this.group0.yzx), 0.0), 
            /* e415, e425, e435, e321 */
            float4(this.e5 * other.e41, this.e5 * other.e42, this.e5 * other.e43, -(this.e2 * other.e31) - (this.e3 * other.e12)) - (this.group0.xyzx * other.group1.wwwx), 
            /* e235, e315, e125, e12345 */
            float4(this.e3 * other.e25 * -1.0, this.e1 * other.e35 * -1.0, this.e2 * other.e15 * -1.0, (this.e3 * other.e4125) + (this.e5 * other.e1234)) + (this.group0.yzxx * float4(other.group2.zxy, other.e4235)) + (this.group0.wwwy * float4(other.group1.xyz, other.e4315))
        );
        AntiDipoleInversion right_dual = AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(wedge.e12345) * right_dual.group1, 
            /* e235, e315, e125, e4 */
            float4((float3(wedge.e12345) * right_dual.group2.xyz), (right_dual.e4 * wedge.e12345) - (right_dual.e423 * wedge.e415) - (right_dual.e431 * wedge.e425) - (right_dual.e412 * wedge.e435) - (right_dual.e415 * wedge.e423) - (right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412)), 
            /* e1, e2, e3, e5 */
            float4((right_dual.e415 * wedge.e321) + (right_dual.e321 * wedge.e415) + (right_dual.e315 * wedge.e412) + (right_dual.e1 * wedge.e12345), (right_dual.e425 * wedge.e321) + (right_dual.e321 * wedge.e425) + (right_dual.e125 * wedge.e423) + (right_dual.e2 * wedge.e12345), (right_dual.e435 * wedge.e321) + (right_dual.e321 * wedge.e435) + (right_dual.e235 * wedge.e431) + (right_dual.e3 * wedge.e12345), -(right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435)) + (wedge.group2.yzxw * float4(right_dual.group0.xyz.zxy, right_dual.e5)) - (wedge.group2.zxyx * float4(right_dual.group0.xyz.yzx, right_dual.e415)) - float4((wedge.group0.xyz.yzx * right_dual.group2.zxy), right_dual.e425 * wedge.e315)
        );
    }
}
extension AntiPlane: AntiRejectViaHorizonFrom<FlatPoint> {
    associatedtype Output = AntiPlane;
    func anti_reject_via_horizon_from(other: FlatPoint) -> Output {
        Line wedge = Line.from_groups(
            /* e415, e425, e435, 0 */
            float4(float3(other.e45) * this.group0.xyz * float3(-1.0), 0.0), 
            /* e235, e315, e125, 0 */
            float4((this.group0.yzx * other.group0.zxy) - (this.group0.zxy * other.group0.yzx), 0.0)
        );
        AntiFlatPoint right_dual = AntiFlatPoint.from_groups(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiPlane.from_groups(
            /* e1, e2, e3, e5 */
            float4((float3(right_dual.e321) * wedge.group0.xyz), -(right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435))
        );
    }
}
extension AntiPlane: AntiRejectViaHorizonFrom<Flector> {
    associatedtype Output = AntiFlector;
    func anti_reject_via_horizon_from(other: Flector) -> Output {
        Motor wedge = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4((float3(other.e45) * this.group0.xyz * float3(-1.0)), (this.e1 * other.e4235) + (this.e2 * other.e4315) + (this.e3 * other.e4125)), 
            /* e235, e315, e125, e5 */
            float4(((this.group0.yzx * other.group0.zxy) - (this.group0.zxy * other.group0.yzx)), 0.0)
        );
        AntiFlector right_dual = AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            float4(wedge.e12345) * right_dual.group0, 
            /* e1, e2, e3, e5 */
            float4(right_dual.e1 * wedge.e12345, right_dual.e2 * wedge.e12345, right_dual.e3 * wedge.e12345, -(right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435)) + (wedge.group0 * float4(right_dual.group0.www, right_dual.e5))
        );
    }
}
extension AntiPlane: AntiRejectViaHorizonFrom<Line> {
    associatedtype Output = AntiPlane;
    func anti_reject_via_horizon_from(other: Line) -> Output {
        Plane wedge = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(this.e3 * other.e425, this.e1 * other.e435, this.e2 * other.e415, -(this.e2 * other.e315) - (this.e3 * other.e125)) - (this.group0.yzxx * float4(other.group0.xyz.zxy, other.e235))
        );
        AntiLine right_dual = AntiLine.from_groups(
            /* e23, e31, e12, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e15, e25, e35, 0 */
            float4(other.group1.xyz, 0.0)
        );
        return AntiPlane.from_groups(
            /* e1, e2, e3, e5 */
            float4(right_dual.e12 * wedge.e4315, right_dual.e23 * wedge.e4125, right_dual.e31 * wedge.e4235, -(right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125)) - (wedge.group0.zxyx * float4(right_dual.group0.xyz.yzx, right_dual.e15))
        );
    }
}
extension AntiPlane: AntiRejectViaHorizonFrom<Motor> {
    associatedtype Output = AntiFlector;
    func anti_reject_via_horizon_from(other: Motor) -> Output {
        Flector wedge = Flector.from_groups(
            /* e15, e25, e35, e45 */
            float4(float3(1.0), 0.0) * float4(other.group1.www, 0.0) * float4(this.group0.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e3 * other.e425, this.e1 * other.e435, this.e2 * other.e415, -(this.e2 * other.e315) - (this.e3 * other.e125)) - (this.group0.yzxx * float4(other.group0.zxy, other.e235))
        );
        AntiMotor right_dual = AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            float4(float3(1.0), 0.0) * float4(right_dual.group1.www, 0.0) * float4(wedge.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e1, e2, e3, e5 */
            float4(float3(0.0), -(right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125)) + float4((right_dual.group0.zxy * wedge.group1.yzx), right_dual.e3215 * wedge.e45) - (wedge.group1.zxyx * float4(right_dual.group0.yzx, right_dual.e15))
        );
    }
}
extension AntiPlane: AntiRejectViaHorizonFrom<MultiVector> {
    associatedtype Output = MultiVector;
    func anti_reject_via_horizon_from(other: MultiVector) -> Output {
        MultiVector wedge = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(0.0, (this.e1 * other.e4235) + (this.e2 * other.e4315) + (this.e3 * other.e4125) + (this.e5 * other.e1234)), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(other.group0.xy.xx, other.scalar, 0.0) * float4(float3(1.0), 0.0) * float4(this.group0.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e5, 0, 0, 0 */
            float4(this.e5 * other.scalar, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(((float3(other.e5) * this.group0.xyz) - (float3(this.e5) * other.group1.xyz)), this.e5 * other.e4 * -1.0), 
            /* e41, e42, e43, 0 */
            float4(float3(other.e4) * this.group0.xyz * float3(-1.0), 0.0), 
            /* e23, e31, e12, 0 */
            float4((this.group0.yzx * other.group1.zxy) - (this.group0.zxy * other.group1.yzx), 0.0), 
            /* e415, e425, e435, e321 */
            float4(this.e5 * other.e41, this.e5 * other.e42, this.e5 * other.e43, -(this.e2 * other.e31) - (this.e3 * other.e12)) - float4((other.group3.www * this.group0.xyz), this.e1 * other.e23), 
            /* e423, e431, e412, 0 */
            float4((other.group4.xyz.yzx * this.group0.zxy) - (other.group4.xyz.zxy * this.group0.yzx), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(this.e5) * other.group5.xyz) + (this.group0.yzx * other.group3.zxy) - (this.group0.zxy * other.group3.yzx), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e3 * other.e425, this.e1 * other.e435, this.e2 * other.e415, -(this.e3 * other.e125) - (this.e5 * other.e321)) - (this.group0.wwwx * float4(other.group7.xyz, other.e235)) - float4((this.group0.yzx * other.group6.zxy), this.e2 * other.e315), 
            /* e1234, 0, 0, 0 */
            float4((this.e1 * other.e423) + (this.e2 * other.e431) + (this.e3 * other.e412), 0.0, 0.0, 0.0)
        );
        MultiVector right_dual = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(other.group0.xy.yx * float2(-1.0, 1.0), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5, 0, 0, 0 */
            float4(other.e3215, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43, 0 */
            float4(other.group7.xyz, 0.0), 
            /* e23, e31, e12, 0 */
            float4(other.group6.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412, 0 */
            float4(other.group4.xyz * float3(-1.0), 0.0), 
            /* e235, e315, e125, 0 */
            float4(other.group3.xyz * float3(-1.0), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        return MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2((right_dual.scalar * wedge.e12345) + (right_dual.e12345 * wedge.scalar) + (right_dual.e1 * wedge.e4235) + (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) + (right_dual.e4 * wedge.e3215) + (right_dual.e5 * wedge.e1234) + (right_dual.e4235 * wedge.e1) + (right_dual.e4315 * wedge.e2) + (right_dual.e4125 * wedge.e3) + (right_dual.e3215 * wedge.e4) + (right_dual.e1234 * wedge.e5) - (right_dual.e15 * wedge.e423) - (right_dual.e25 * wedge.e431) - (right_dual.e35 * wedge.e412) - (right_dual.e45 * wedge.e321) - (right_dual.e41 * wedge.e235) - (right_dual.e42 * wedge.e315) - (right_dual.e43 * wedge.e125) - (right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e321 * wedge.e45) - (right_dual.e423 * wedge.e15) - (right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43), right_dual.e12345 * wedge.e12345), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e15 * wedge.e1234) + (right_dual.e415 * wedge.e321) + (right_dual.e321 * wedge.e415) + (right_dual.e4125 * wedge.e31), (right_dual.e25 * wedge.e1234) + (right_dual.e425 * wedge.e321) + (right_dual.e321 * wedge.e425) + (right_dual.e4235 * wedge.e12), (right_dual.e35 * wedge.e1234) + (right_dual.e435 * wedge.e321) + (right_dual.e321 * wedge.e435) + (right_dual.e4315 * wedge.e23), -(right_dual.e415 * wedge.e423) - (right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412) - (right_dual.e1234 * wedge.e45)) + (float4(right_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_dual.group1) + (wedge.group9.yzxx * float4(right_dual.group5.xyz.zxy, right_dual.e41)) + float4((wedge.group4.xyz * right_dual.group9.www), right_dual.e45 * wedge.e1234) + float4((right_dual.group7.xyz.zxy * wedge.group8.xyz.yzx), right_dual.e42 * wedge.e4315) + float4((right_dual.group8.xyz.yzx * wedge.group7.xyz.zxy), right_dual.e43 * wedge.e4125) - (right_dual.group9.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((float3(right_dual.e1234) * wedge.group3.xyz), right_dual.e4125 * wedge.e43) - float4((right_dual.group4.xyz * wedge.group9.www), right_dual.e423 * wedge.e415) - float4((right_dual.group5.xyz.yzx * wedge.group9.zxy), right_dual.e431 * wedge.e425) - float4((right_dual.group7.xyz.yzx * wedge.group8.xyz.zxy), right_dual.e412 * wedge.e435) - float4((right_dual.group8.xyz.zxy * wedge.group7.xyz.yzx), right_dual.e4235 * wedge.e41), 
            /* e5, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e5) + (right_dual.e5 * wedge.e12345) + (right_dual.e4235 * wedge.e15) + (right_dual.e4315 * wedge.e25) + (right_dual.e4125 * wedge.e35) + (right_dual.e3215 * wedge.e45) - (right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125) - (right_dual.e45 * wedge.e3215) - (right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435), 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4((right_dual.e415 * wedge.e3215) + (right_dual.e315 * wedge.e4125) + (right_dual.e4125 * wedge.e315) + (right_dual.e3215 * wedge.e415), (right_dual.e425 * wedge.e3215) + (right_dual.e125 * wedge.e4235) + (right_dual.e4235 * wedge.e125) + (right_dual.e3215 * wedge.e425), (right_dual.e435 * wedge.e3215) + (right_dual.e235 * wedge.e4315) + (right_dual.e4315 * wedge.e235) + (right_dual.e3215 * wedge.e435), -(right_dual.e435 * wedge.e4125) - (right_dual.e4235 * wedge.e415) - (right_dual.e4315 * wedge.e425) - (right_dual.e4125 * wedge.e435)) + (float4(right_dual.e12345) * wedge.group3) + (float4(wedge.e12345) * right_dual.group3) - (wedge.group9.yzxx * float4(right_dual.group8.xyz.zxy, right_dual.e415)) - float4((wedge.group8.xyz.zxy * right_dual.group9.yzx), right_dual.e425 * wedge.e4315), 
            /* e41, e42, e43, 0 */
            float4((float3(right_dual.e12345) * wedge.group4.xyz) + (float3(right_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_dual.group4.xyz) + (float3(wedge.e1234) * right_dual.group6.xyz) + (right_dual.group7.xyz.zxy * wedge.group9.yzx) + (wedge.group7.xyz.zxy * right_dual.group9.yzx) - (right_dual.group7.xyz.yzx * wedge.group9.zxy) - (wedge.group7.xyz.yzx * right_dual.group9.zxy), 0.0), 
            /* e23, e31, e12, 0 */
            float4((float3(right_dual.e12345) * wedge.group5.xyz) + (float3(right_dual.e3215) * wedge.group7.xyz) + (float3(right_dual.e1234) * wedge.group8.xyz) + (float3(wedge.e12345) * right_dual.group5.xyz) + (float3(wedge.e3215) * right_dual.group7.xyz) + (float3(wedge.e1234) * right_dual.group8.xyz) - (float3(right_dual.e321) * wedge.group9.xyz) - (float3(wedge.e321) * right_dual.group9.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            (float4(right_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_dual.group6) + (right_dual.group9.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - float4((right_dual.group9.zxy * wedge.group9.yzx), right_dual.e1234 * wedge.e3215), 
            /* e423, e431, e412, 0 */
            float4((float3(right_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_dual.group7.xyz) + (float3(wedge.e1234) * right_dual.group9.xyz) - (float3(right_dual.e1234) * wedge.group9.xyz), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(right_dual.e12345) * wedge.group8.xyz) + (float3(right_dual.e3215) * wedge.group9.xyz) + (float3(wedge.e12345) * right_dual.group8.xyz) - (float3(wedge.e3215) * right_dual.group9.xyz), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            (float4(right_dual.e12345) * wedge.group9) + (float4(wedge.e12345) * right_dual.group9), 
            /* e1234, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e1234) + (right_dual.e1234 * wedge.e12345), 0.0, 0.0, 0.0)
        );
    }
}
extension AntiPlane: AntiRejectViaHorizonFrom<Plane> {
    associatedtype Output = AntiPlane;
    func anti_reject_via_horizon_from(other: Plane) -> Output {
        return AntiPlane.from_groups(
            /* e1, e2, e3, e5 */
            float4((this.e1 * other.e4235) + (this.e2 * other.e4315) + (this.e3 * other.e4125)) * float4(other.e4235 * -1.0, other.e4315 * -1.0, other.e4125 * -1.0, other.e3215)
        );
    }
}
extension AntiPlane: AntiRejectViaHorizonFrom<RoundPoint> {
    associatedtype Output = RoundPoint;
    func anti_reject_via_horizon_from(other: RoundPoint) -> Output {
        Dipole wedge = Dipole.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(other.e4) * this.group0.xyz * float3(-1.0), 0.0), 
            /* e23, e31, e12, e45 */
            float4(((this.group0.yzx * other.group0.zxy) - (this.group0.zxy * other.group0.yzx)), this.e5 * other.e4 * -1.0), 
            /* e15, e25, e35, 0 */
            float4((float3(other.e5) * this.group0.xyz) - (float3(this.e5) * other.group0.xyz), 0.0)
        );
        Sphere right_dual = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        return RoundPoint.from_groups(
            /* e1, e2, e3, e4 */
            float4((wedge.e41 * right_dual.e3215) + (wedge.e31 * right_dual.e4125), (wedge.e42 * right_dual.e3215) + (wedge.e12 * right_dual.e4235), (wedge.e43 * right_dual.e3215) + (wedge.e23 * right_dual.e4315), -(wedge.e43 * right_dual.e4125) - (wedge.e45 * right_dual.e1234)) - (right_dual.group0.yzxy * float4(wedge.group1.zxy, wedge.e42)) - float4((float3(right_dual.e1234) * wedge.group2.xyz), wedge.e41 * right_dual.e4235), 
            /* e5, 0, 0, 0 */
            float4((wedge.e45 * right_dual.e3215) + (wedge.e15 * right_dual.e4235) + (wedge.e25 * right_dual.e4315) + (wedge.e35 * right_dual.e4125), 0.0, 0.0, 0.0)
        );
    }
}
extension AntiPlane: AntiRejectViaHorizonFrom<Scalar> {
    associatedtype Output = AntiPlane;
    func anti_reject_via_horizon_from(other: Scalar) -> Output {
        return AntiPlane.from_groups(
            /* e1, e2, e3, e5 */
            float4(other.scalar) * float4(this.e1 * other.scalar, this.e2 * other.scalar, this.e3 * other.scalar, this.e5 * other.scalar)
        );
    }
}
extension AntiPlane: AntiRejectViaHorizonFrom<Sphere> {
    associatedtype Output = RoundPoint;
    func anti_reject_via_horizon_from(other: Sphere) -> Output {
        AntiScalar wedge = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4((this.e1 * other.e4235) + (this.e2 * other.e4315) + (this.e3 * other.e4125) + (this.e5 * other.e1234), 0.0, 0.0, 0.0)
        );
        RoundPoint right_dual = RoundPoint.from_groups(
            /* e1, e2, e3, e4 */
            float4(other.group0.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5, 0, 0, 0 */
            float4(other.e3215, 0.0, 0.0, 0.0)
        );
        return RoundPoint.from_groups(
            /* e1, e2, e3, e4 */
            float4(wedge.e12345) * right_dual.group0, 
            /* e5, 0, 0, 0 */
            float4(wedge.e12345 * right_dual.e5, 0.0, 0.0, 0.0)
        );
    }
}
extension AntiPlane: AntiRejectViaHorizonFrom<VersorEven> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: VersorEven) -> Output {
        DipoleInversion wedge = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(other.e4) * this.group0.xyz * float3(-1.0), 0.0), 
            /* e23, e31, e12, e45 */
            float4(((this.group0.yzx * other.group3.zxy) - (this.group0.zxy * other.group3.yzx)), this.e5 * other.e4 * -1.0), 
            /* e15, e25, e35, e1234 */
            float4(this.e5 * other.e1 * -1.0, this.e5 * other.e2 * -1.0, this.e5 * other.e3 * -1.0, (this.e2 * other.e431) + (this.e3 * other.e412)) + (this.group0.xyzx * float4(other.group2.www, other.e423)), 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e3 * other.e425, this.e1 * other.e435, this.e2 * other.e415, -(this.e3 * other.e125) - (this.e5 * other.e321)) - (this.group0.yzxx * float4(other.group1.zxy, other.e235)) - (this.group0.wwwy * float4(other.group0.xyz, other.e315))
        );
        VersorOdd right_dual = VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4((float3(wedge.e1234) * right_dual.group3.xyz) - (float3(right_dual.e1234) * wedge.group3.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            (right_dual.group3.yzxw * float4(wedge.group3.zxy, wedge.e1234)) - (wedge.group3.yzxw * float4(right_dual.group3.zxy, right_dual.e1234)), 
            /* e235, e315, e125, e4 */
            float4(float3(0.0), (wedge.e4235 * right_dual.e41) + (wedge.e4315 * right_dual.e42) + (wedge.e4125 * right_dual.e43) - (wedge.e42 * right_dual.e4315) - (wedge.e43 * right_dual.e4125) - (wedge.e45 * right_dual.e1234)) + float4((right_dual.group3.www * wedge.group3.xyz), wedge.e1234 * right_dual.e45) - (right_dual.group3.xyzx * float4(wedge.group3.www, wedge.e41)), 
            /* e1, e2, e3, e5 */
            (float4(right_dual.e3215) * float4(wedge.group0.xyz, wedge.e45)) + (wedge.group2.wwwy * float4(right_dual.group2.xyz, right_dual.e4315)) + (right_dual.group3.zxyx * float4(wedge.group1.yzx, wedge.e15)) + float4((wedge.group3.yzx * right_dual.group1.zxy), wedge.e35 * right_dual.e4125) - (float4(wedge.e3215) * float4(right_dual.group0.xyz, right_dual.e45)) - (wedge.group3.zxyz * float4(right_dual.group1.yzx, right_dual.e35)) - (right_dual.group2.wwwy * float4(wedge.group2.xyz, wedge.e4315)) - float4((wedge.group1.zxy * right_dual.group3.yzx), wedge.e4235 * right_dual.e15)
        );
    }
}
extension AntiPlane: AntiRejectViaHorizonFrom<VersorOdd> {
    associatedtype Output = VersorEven;
    func anti_reject_via_horizon_from(other: VersorOdd) -> Output {
        VersorEven wedge = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4(this.e2 * other.e43 * -1.0, this.e3 * other.e41 * -1.0, this.e1 * other.e42 * -1.0, (this.e2 * other.e4315) + (this.e3 * other.e4125) + (this.e5 * other.e1234)) + (this.group0.zxyx * float4(other.group0.yzx, other.e4235)), 
            /* e415, e425, e435, e321 */
            float4(this.e5 * other.e41, this.e5 * other.e42, this.e5 * other.e43, -(this.e2 * other.e31) - (this.e3 * other.e12)) - (this.group0.xyzx * other.group1.wwwx), 
            /* e235, e315, e125, e5 */
            float4(((float3(this.e5) * other.group1.xyz) + (this.group0.yzx * other.group2.zxy) - (this.group0.zxy * other.group2.yzx)), this.e5 * other.scalar), 
            /* e1, e2, e3, e4 */
            float4(float3(1.0), 0.0) * float4(other.group0.www, 0.0) * float4(this.group0.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        VersorEven right_dual = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4(((float3(right_dual.e12345) * wedge.group0.xyz) + (float3(wedge.e12345) * right_dual.group0.xyz)), right_dual.e12345 * wedge.e12345), 
            /* e415, e425, e435, e321 */
            (float4(right_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_dual.group1), 
            /* e235, e315, e125, e5 */
            (float4(right_dual.e12345) * wedge.group2) + (float4(wedge.e12345) * right_dual.group2) + float4(float3(0.0), -(right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435)), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e415 * wedge.e321) + (right_dual.e321 * wedge.e415) + (right_dual.e315 * wedge.e412) + (right_dual.e1 * wedge.e12345), (right_dual.e425 * wedge.e321) + (right_dual.e321 * wedge.e425) + (right_dual.e125 * wedge.e423) + (right_dual.e2 * wedge.e12345), (right_dual.e435 * wedge.e321) + (right_dual.e321 * wedge.e435) + (right_dual.e235 * wedge.e431) + (right_dual.e3 * wedge.e12345), -(right_dual.e412 * wedge.e435) - (right_dual.e415 * wedge.e423) - (right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412)) + (right_dual.group0.zxyw * float4(wedge.group2.yzx, wedge.e4)) + float4((right_dual.group0.www * wedge.group3.xyz), right_dual.e4 * wedge.e12345) - (right_dual.group0.yzxx * float4(wedge.group2.zxy, wedge.e415)) - float4((right_dual.group2.zxy * wedge.group0.yzx), right_dual.e431 * wedge.e425)
        );
    }
}
extension AntiScalar {
    // Fancy infix trick
    func operator/(_rhs: AntiRejectViaHorizonFromInfix) -> AntiRejectViaHorizonFromInfixPartial<AntiScalar> {
        return AntiRejectViaHorizonFromInfixPartial { a: this };
    }
}
extension AntiScalar: AntiRejectViaHorizonFrom<AntiCircleRotor> {
    associatedtype Output = CircleRotor;
    func anti_reject_via_horizon_from(other: AntiCircleRotor) -> Output {
        AntiScalar wedge = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(other.scalar * this.e12345, 0.0, 0.0, 0.0)
        );
        CircleRotor right_dual = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(wedge.e12345) * right_dual.group1, 
            /* e235, e315, e125, e12345 */
            float4(wedge.e12345) * right_dual.group2
        );
    }
}
extension AntiScalar: AntiRejectViaHorizonFrom<AntiDualNum> {
    associatedtype Output = DualNum;
    func anti_reject_via_horizon_from(other: AntiDualNum) -> Output {
        return DualNum.from_groups(
            /* e5, e12345, 0, 0 */
            float4(float2(other.scalar * this.e12345) * other.group0.xy, 0.0, 0.0)
        );
    }
}
extension AntiScalar: AntiRejectViaHorizonFrom<AntiMotor> {
    associatedtype Output = Motor;
    func anti_reject_via_horizon_from(other: AntiMotor) -> Output {
        AntiScalar wedge = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(other.scalar * this.e12345, 0.0, 0.0, 0.0)
        );
        Motor right_dual = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4(wedge.e12345) * right_dual.group0, 
            /* e235, e315, e125, e5 */
            float4(wedge.e12345) * right_dual.group1
        );
    }
}
extension AntiScalar: AntiRejectViaHorizonFrom<MultiVector> {
    associatedtype Output = MultiVector;
    func anti_reject_via_horizon_from(other: MultiVector) -> Output {
        AntiScalar wedge = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(this.e12345 * other.scalar, 0.0, 0.0, 0.0)
        );
        MultiVector right_dual = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(other.group0.xy.yx * float2(-1.0, 1.0), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5, 0, 0, 0 */
            float4(other.e3215, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43, 0 */
            float4(other.group7.xyz, 0.0), 
            /* e23, e31, e12, 0 */
            float4(other.group6.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412, 0 */
            float4(other.group4.xyz * float3(-1.0), 0.0), 
            /* e235, e315, e125, 0 */
            float4(other.group3.xyz * float3(-1.0), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        return MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(wedge.e12345) * right_dual.group0.xy, 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(wedge.e12345) * right_dual.group1, 
            /* e5, 0, 0, 0 */
            float4(wedge.e12345 * right_dual.e5, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(wedge.e12345) * right_dual.group3, 
            /* e41, e42, e43, 0 */
            float4(float3(wedge.e12345) * right_dual.group4.xyz, 0.0), 
            /* e23, e31, e12, 0 */
            float4(float3(wedge.e12345) * right_dual.group5.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(wedge.e12345) * right_dual.group6, 
            /* e423, e431, e412, 0 */
            float4(float3(wedge.e12345) * right_dual.group7.xyz, 0.0), 
            /* e235, e315, e125, 0 */
            float4(float3(wedge.e12345) * right_dual.group8.xyz, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_dual.group9, 
            /* e1234, 0, 0, 0 */
            float4(wedge.e12345 * right_dual.e1234, 0.0, 0.0, 0.0)
        );
    }
}
extension AntiScalar: AntiRejectViaHorizonFrom<Scalar> {
    associatedtype Output = AntiScalar;
    func anti_reject_via_horizon_from(other: Scalar) -> Output {
        return AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(this.e12345 * powi(other.scalar, 2), 0.0, 0.0, 0.0)
        );
    }
}
extension AntiScalar: AntiRejectViaHorizonFrom<VersorOdd> {
    associatedtype Output = VersorEven;
    func anti_reject_via_horizon_from(other: VersorOdd) -> Output {
        AntiScalar wedge = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(this.e12345 * other.scalar, 0.0, 0.0, 0.0)
        );
        VersorEven right_dual = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4(wedge.e12345) * right_dual.group0, 
            /* e415, e425, e435, e321 */
            float4(wedge.e12345) * right_dual.group1, 
            /* e235, e315, e125, e5 */
            float4(wedge.e12345) * right_dual.group2, 
            /* e1, e2, e3, e4 */
            float4(wedge.e12345) * right_dual.group3
        );
    }
}
extension Circle {
    // Fancy infix trick
    func operator/(_rhs: AntiRejectViaHorizonFromInfix) -> AntiRejectViaHorizonFromInfixPartial<Circle> {
        return AntiRejectViaHorizonFromInfixPartial { a: this };
    }
}
extension Circle: AntiRejectViaHorizonFrom<AntiCircleRotor> {
    associatedtype Output = VersorEven;
    func anti_reject_via_horizon_from(other: AntiCircleRotor) -> Output {
        CircleRotor wedge = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(other.scalar) * this.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(other.scalar) * this.group1, 
            /* e235, e315, e125, e12345 */
            float4((float3(other.scalar) * this.group2.xyz), -(other.e41 * this.e235) - (other.e42 * this.e315) - (other.e43 * this.e125) - (other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435) - (other.e45 * this.e321) - (other.e15 * this.e423) - (other.e25 * this.e431) - (other.e35 * this.e412))
        );
        CircleRotor right_dual = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4(((float3(right_dual.e12345) * wedge.group0.xyz) + (float3(wedge.e12345) * right_dual.group0.xyz)), right_dual.e12345 * wedge.e12345), 
            /* e415, e425, e435, e321 */
            (float4(right_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_dual.group1), 
            /* e235, e315, e125, e5 */
            float4((right_dual.e235 * wedge.e12345) + (right_dual.e12345 * wedge.e235), (right_dual.e315 * wedge.e12345) + (right_dual.e12345 * wedge.e315), (right_dual.e125 * wedge.e12345) + (right_dual.e12345 * wedge.e125), -(right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435)), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e412 * wedge.e315) + (right_dual.e415 * wedge.e321) + (right_dual.e321 * wedge.e415) + (right_dual.e315 * wedge.e412), (right_dual.e423 * wedge.e125) + (right_dual.e425 * wedge.e321) + (right_dual.e321 * wedge.e425) + (right_dual.e125 * wedge.e423), (right_dual.e431 * wedge.e235) + (right_dual.e435 * wedge.e321) + (right_dual.e321 * wedge.e435) + (right_dual.e235 * wedge.e431), -(right_dual.e412 * wedge.e435) - (right_dual.e415 * wedge.e423) - (right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412)) - float4((right_dual.group0.xyz.yzx * wedge.group2.zxy), right_dual.e423 * wedge.e415) - float4((wedge.group0.xyz.yzx * right_dual.group2.zxy), right_dual.e431 * wedge.e425)
        );
    }
}
extension Circle: AntiRejectViaHorizonFrom<AntiDipoleInversion> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: AntiDipoleInversion) -> Output {
        Sphere wedge = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(-(other.e4 * this.e235) - (other.e3 * this.e425), -(other.e4 * this.e315) - (other.e1 * this.e435), -(other.e4 * this.e125) - (other.e2 * this.e415), (other.e3 * this.e125) + (other.e5 * this.e321)) + (other.group3.wwwx * float4(this.group0.xyz, this.e235)) + float4((other.group3.yzx * this.group1.zxy), other.e2 * this.e315), 
            /* e1234, 0, 0, 0 */
            float4(-(other.e4 * this.e321) - (other.e1 * this.e423) - (other.e2 * this.e431) - (other.e3 * this.e412), 0.0, 0.0, 0.0)
        );
        DipoleInversion right_dual = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4((float3(wedge.e1234) * right_dual.group3.xyz) - (float3(right_dual.e1234) * wedge.group0.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            (right_dual.group3.yzxw * float4(wedge.group0.zxy, wedge.e1234)) - (wedge.group0.yzxw * float4(right_dual.group3.zxy, right_dual.e1234)), 
            /* e235, e315, e125, e4 */
            float4(right_dual.e4235 * wedge.e3215 * -1.0, right_dual.e4315 * wedge.e3215 * -1.0, right_dual.e4125 * wedge.e3215 * -1.0, (right_dual.e42 * wedge.e4315) + (right_dual.e43 * wedge.e4125) + (right_dual.e45 * wedge.e1234)) + (wedge.group0.xyzx * float4(right_dual.group3.www, right_dual.e41)), 
            /* e1, e2, e3, e5 */
            float4((right_dual.e12 * wedge.e4315) + (right_dual.e15 * wedge.e1234), (right_dual.e23 * wedge.e4125) + (right_dual.e25 * wedge.e1234), (right_dual.e31 * wedge.e4235) + (right_dual.e35 * wedge.e1234), -(right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125)) - (float4(wedge.e3215) * float4(right_dual.group0.xyz, right_dual.e45)) - (wedge.group0.zxyx * float4(right_dual.group1.yzx, right_dual.e15))
        );
    }
}
extension Circle: AntiRejectViaHorizonFrom<AntiDualNum> {
    associatedtype Output = Circle;
    func anti_reject_via_horizon_from(other: AntiDualNum) -> Output {
        Circle wedge = Circle.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(other.scalar) * this.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(other.scalar) * this.group1, 
            /* e235, e315, e125, 0 */
            float4(float3(other.scalar) * this.group2.xyz, 0.0)
        );
        DualNum right_dual = DualNum.from_groups(
            /* e5, e12345, 0, 0 */
            float4(other.group0.xy, 0.0, 0.0)
        );
        return Circle.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(right_dual.e12345) * wedge.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(right_dual.e12345) * wedge.group1, 
            /* e235, e315, e125, 0 */
            float4(float3(right_dual.e12345) * wedge.group2.xyz, 0.0)
        );
    }
}
extension Circle: AntiRejectViaHorizonFrom<AntiFlector> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: AntiFlector) -> Output {
        Sphere wedge = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(other.e3 * this.e425 * -1.0, other.e1 * this.e435 * -1.0, other.e2 * this.e415 * -1.0, (other.e3 * this.e125) + (other.e5 * this.e321)) + (other.group1.wwwx * float4(this.group0.xyz, this.e235)) + float4((other.group1.yzx * this.group1.zxy), other.e2 * this.e315), 
            /* e1234, 0, 0, 0 */
            float4(-(other.e1 * this.e423) - (other.e2 * this.e431) - (other.e3 * this.e412), 0.0, 0.0, 0.0)
        );
        Flector right_dual = Flector.from_groups(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(wedge.e1234) * right_dual.group1.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(((right_dual.group1.yzx * wedge.group0.zxy) - (right_dual.group1.zxy * wedge.group0.yzx)), right_dual.e3215 * wedge.e1234), 
            /* e235, e315, e125, e4 */
            float4(((float3(right_dual.e3215) * wedge.group0.xyz) - (float3(wedge.e3215) * right_dual.group1.xyz)), right_dual.e45 * wedge.e1234), 
            /* e1, e2, e3, e5 */
            float4((float3(wedge.e1234) * right_dual.group0.xyz), -(right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125) - (right_dual.e45 * wedge.e3215))
        );
    }
}
extension Circle: AntiRejectViaHorizonFrom<AntiLine> {
    associatedtype Output = Line;
    func anti_reject_via_horizon_from(other: AntiLine) -> Output {
        AntiScalar wedge = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(-(other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435) - (other.e15 * this.e423) - (other.e25 * this.e431) - (other.e35 * this.e412), 0.0, 0.0, 0.0)
        );
        Line right_dual = Line.from_groups(
            /* e415, e425, e435, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e235, e315, e125, 0 */
            float4(other.group1.xyz * float3(-1.0), 0.0)
        );
        return Line.from_groups(
            /* e415, e425, e435, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e235, e315, e125, 0 */
            float4(float3(wedge.e12345) * right_dual.group1.xyz, 0.0)
        );
    }
}
extension Circle: AntiRejectViaHorizonFrom<AntiMotor> {
    associatedtype Output = VersorEven;
    func anti_reject_via_horizon_from(other: AntiMotor) -> Output {
        CircleRotor wedge = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(other.scalar) * this.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(other.scalar) * this.group1, 
            /* e235, e315, e125, e12345 */
            float4((float3(other.scalar) * this.group2.xyz), -(other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435) - (other.e15 * this.e423) - (other.e25 * this.e431) - (other.e35 * this.e412))
        );
        Motor right_dual = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4(right_dual.e12345) * float4(wedge.group0.xyz, wedge.e12345), 
            /* e415, e425, e435, e321 */
            float4(((float3(wedge.e12345) * right_dual.group0.xyz) + (float3(right_dual.e12345) * wedge.group1.xyz)), wedge.e321 * right_dual.e12345), 
            /* e235, e315, e125, e5 */
            float4(wedge.e12345 * right_dual.e235, wedge.e12345 * right_dual.e315, wedge.e12345 * right_dual.e125, -(wedge.e415 * right_dual.e235) - (wedge.e425 * right_dual.e315) - (wedge.e435 * right_dual.e125) - (wedge.e235 * right_dual.e415) - (wedge.e315 * right_dual.e425) - (wedge.e125 * right_dual.e435)) + (wedge.group2 * float4(right_dual.group0.www, right_dual.e5)), 
            /* e1, e2, e3, e4 */
            float4((wedge.e412 * right_dual.e315) + (wedge.e321 * right_dual.e415), (wedge.e423 * right_dual.e125) + (wedge.e321 * right_dual.e425), (wedge.e431 * right_dual.e235) + (wedge.e321 * right_dual.e435), -(wedge.e431 * right_dual.e425) - (wedge.e412 * right_dual.e435)) - float4((wedge.group0.xyz.yzx * right_dual.group1.zxy), wedge.e423 * right_dual.e415)
        );
    }
}
extension Circle: AntiRejectViaHorizonFrom<AntiPlane> {
    associatedtype Output = Circle;
    func anti_reject_via_horizon_from(other: AntiPlane) -> Output {
        Sphere wedge = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(other.e3 * this.e425 * -1.0, other.e1 * this.e435 * -1.0, other.e2 * this.e415 * -1.0, (other.e3 * this.e125) + (other.e5 * this.e321)) + (other.group0.wwwx * float4(this.group0.xyz, this.e235)) + float4((other.group0.yzx * this.group1.zxy), other.e2 * this.e315), 
            /* e1234, 0, 0, 0 */
            float4(-(other.e1 * this.e423) - (other.e2 * this.e431) - (other.e3 * this.e412), 0.0, 0.0, 0.0)
        );
        Plane right_dual = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return Circle.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(wedge.e1234) * right_dual.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(((right_dual.group0.yzx * wedge.group0.zxy) - (right_dual.group0.zxy * wedge.group0.yzx)), right_dual.e3215 * wedge.e1234), 
            /* e235, e315, e125, 0 */
            float4((float3(right_dual.e3215) * wedge.group0.xyz) - (float3(wedge.e3215) * right_dual.group0.xyz), 0.0)
        );
    }
}
extension Circle: AntiRejectViaHorizonFrom<Dipole> {
    associatedtype Output = Circle;
    func anti_reject_via_horizon_from(other: Dipole) -> Output {
        AntiScalar wedge = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(-(this.e423 * other.e15) - (this.e431 * other.e25) - (this.e412 * other.e35) - (this.e415 * other.e23) - (this.e425 * other.e31) - (this.e435 * other.e12) - (this.e321 * other.e45) - (this.e235 * other.e41) - (this.e315 * other.e42) - (this.e125 * other.e43), 0.0, 0.0, 0.0)
        );
        Circle right_dual = Circle.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, 0 */
            float4(other.group2.xyz * float3(-1.0), 0.0)
        );
        return Circle.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(wedge.e12345) * right_dual.group1, 
            /* e235, e315, e125, 0 */
            float4(float3(wedge.e12345) * right_dual.group2.xyz, 0.0)
        );
    }
}
extension Circle: AntiRejectViaHorizonFrom<DipoleInversion> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: DipoleInversion) -> Output {
        AntiScalar wedge = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(-(this.e423 * other.e15) - (this.e431 * other.e25) - (this.e412 * other.e35) - (this.e415 * other.e23) - (this.e425 * other.e31) - (this.e435 * other.e12) - (this.e321 * other.e45) - (this.e235 * other.e41) - (this.e315 * other.e42) - (this.e125 * other.e43), 0.0, 0.0, 0.0)
        );
        AntiDipoleInversion right_dual = AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(wedge.e12345) * right_dual.group1, 
            /* e235, e315, e125, e4 */
            float4(wedge.e12345) * right_dual.group2, 
            /* e1, e2, e3, e5 */
            float4(wedge.e12345) * right_dual.group3
        );
    }
}
extension Circle: AntiRejectViaHorizonFrom<DualNum> {
    associatedtype Output = AntiFlatPoint;
    func anti_reject_via_horizon_from(other: DualNum) -> Output {
        AntiDualNum right_dual = AntiDualNum.from_groups(
            /* e3215, scalar, 0, 0 */
            float4(other.group0.xy * float2(-1.0), 0.0, 0.0)
        );
        return AntiFlatPoint.from_groups(
            /* e235, e315, e125, e321 */
            float4(right_dual.group0.xy.xx, right_dual.e3215, 0.0) * float4(float3(1.0), 0.0) * float4(float4(this.e423 * other.e5, this.e431 * other.e5, this.e412 * other.e5, this.e321 * other.e5).xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
    }
}
extension Circle: AntiRejectViaHorizonFrom<FlatPoint> {
    associatedtype Output = AntiFlatPoint;
    func anti_reject_via_horizon_from(other: FlatPoint) -> Output {
        return AntiFlatPoint.from_groups(
            /* e235, e315, e125, e321 */
            float4(-(this.e423 * other.e15) - (this.e431 * other.e25) - (this.e412 * other.e35) - (this.e321 * other.e45)) * float4(other.e15 * -1.0, other.e25 * -1.0, other.e35 * -1.0, other.e45)
        );
    }
}
extension Circle: AntiRejectViaHorizonFrom<Flector> {
    associatedtype Output = AntiFlector;
    func anti_reject_via_horizon_from(other: Flector) -> Output {
        AntiScalar wedge = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(-(this.e423 * other.e15) - (this.e431 * other.e25) - (this.e412 * other.e35) - (this.e321 * other.e45), 0.0, 0.0, 0.0)
        );
        AntiFlector right_dual = AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            float4(wedge.e12345) * right_dual.group0, 
            /* e1, e2, e3, e5 */
            float4(wedge.e12345) * right_dual.group1
        );
    }
}
extension Circle: AntiRejectViaHorizonFrom<Motor> {
    associatedtype Output = AntiFlector;
    func anti_reject_via_horizon_from(other: Motor) -> Output {
        Plane wedge = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(other.e5) * float4(this.group0.xyz, this.e321)
        );
        AntiMotor right_dual = AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            float4(float3(1.0), 0.0) * float4(right_dual.group1.www, 0.0) * float4(wedge.group0.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e1, e2, e3, e5 */
            float4(right_dual.e12 * wedge.e4315, right_dual.e23 * wedge.e4125, right_dual.e31 * wedge.e4235, -(right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125)) - (wedge.group0.zxyx * float4(right_dual.group0.yzx, right_dual.e15))
        );
    }
}
extension Circle: AntiRejectViaHorizonFrom<MultiVector> {
    associatedtype Output = MultiVector;
    func anti_reject_via_horizon_from(other: MultiVector) -> Output {
        MultiVector wedge = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(0.0, -(this.e423 * other.e15) - (this.e431 * other.e25) - (this.e412 * other.e35) - (this.e415 * other.e23) - (this.e425 * other.e31) - (this.e435 * other.e12) - (this.e321 * other.e45) - (this.e235 * other.e41) - (this.e315 * other.e42) - (this.e125 * other.e43)), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5, 0, 0, 0 */
            float4(0.0), 
            /* e15, e25, e35, e45 */
            float4(0.0), 
            /* e41, e42, e43, 0 */
            float4(0.0), 
            /* e23, e31, e12, 0 */
            float4(0.0), 
            /* e415, e425, e435, e321 */
            float4(other.scalar) * this.group1, 
            /* e423, e431, e412, 0 */
            float4(float3(other.scalar) * this.group0.xyz, 0.0), 
            /* e235, e315, e125, 0 */
            float4(float3(other.scalar) * this.group2.xyz, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(-(this.e425 * other.e3) - (this.e235 * other.e4), -(this.e435 * other.e1) - (this.e315 * other.e4), -(this.e415 * other.e2) - (this.e125 * other.e4), (this.e321 * other.e5) + (this.e125 * other.e3)) + (other.group1.yzxy * float4(this.group1.zxy, this.e315)) + float4((float3(other.e5) * this.group0.xyz), this.e235 * other.e1), 
            /* e1234, 0, 0, 0 */
            float4(-(this.e423 * other.e1) - (this.e431 * other.e2) - (this.e412 * other.e3) - (this.e321 * other.e4), 0.0, 0.0, 0.0)
        );
        MultiVector right_dual = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(other.group0.xy.yx * float2(-1.0, 1.0), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5, 0, 0, 0 */
            float4(other.e3215, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43, 0 */
            float4(other.group7.xyz, 0.0), 
            /* e23, e31, e12, 0 */
            float4(other.group6.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412, 0 */
            float4(other.group4.xyz * float3(-1.0), 0.0), 
            /* e235, e315, e125, 0 */
            float4(other.group3.xyz * float3(-1.0), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        return MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2((right_dual.scalar * wedge.e12345) + (right_dual.e12345 * wedge.scalar) + (right_dual.e1 * wedge.e4235) + (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) + (right_dual.e4 * wedge.e3215) + (right_dual.e5 * wedge.e1234) + (right_dual.e4235 * wedge.e1) + (right_dual.e4315 * wedge.e2) + (right_dual.e4125 * wedge.e3) + (right_dual.e3215 * wedge.e4) + (right_dual.e1234 * wedge.e5) - (right_dual.e15 * wedge.e423) - (right_dual.e25 * wedge.e431) - (right_dual.e35 * wedge.e412) - (right_dual.e45 * wedge.e321) - (right_dual.e41 * wedge.e235) - (right_dual.e42 * wedge.e315) - (right_dual.e43 * wedge.e125) - (right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e321 * wedge.e45) - (right_dual.e423 * wedge.e15) - (right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43), right_dual.e12345 * wedge.e12345), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e15 * wedge.e1234) + (right_dual.e415 * wedge.e321) + (right_dual.e321 * wedge.e415) + (right_dual.e4125 * wedge.e31), (right_dual.e25 * wedge.e1234) + (right_dual.e425 * wedge.e321) + (right_dual.e321 * wedge.e425) + (right_dual.e4235 * wedge.e12), (right_dual.e35 * wedge.e1234) + (right_dual.e435 * wedge.e321) + (right_dual.e321 * wedge.e435) + (right_dual.e4315 * wedge.e23), -(right_dual.e415 * wedge.e423) - (right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412) - (right_dual.e1234 * wedge.e45)) + (float4(right_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_dual.group1) + (wedge.group9.yzxx * float4(right_dual.group5.xyz.zxy, right_dual.e41)) + float4((wedge.group4.xyz * right_dual.group9.www), right_dual.e45 * wedge.e1234) + float4((right_dual.group7.xyz.zxy * wedge.group8.xyz.yzx), right_dual.e42 * wedge.e4315) + float4((right_dual.group8.xyz.yzx * wedge.group7.xyz.zxy), right_dual.e43 * wedge.e4125) - (right_dual.group9.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((float3(right_dual.e1234) * wedge.group3.xyz), right_dual.e4125 * wedge.e43) - float4((right_dual.group4.xyz * wedge.group9.www), right_dual.e423 * wedge.e415) - float4((right_dual.group5.xyz.yzx * wedge.group9.zxy), right_dual.e431 * wedge.e425) - float4((right_dual.group7.xyz.yzx * wedge.group8.xyz.zxy), right_dual.e412 * wedge.e435) - float4((right_dual.group8.xyz.zxy * wedge.group7.xyz.yzx), right_dual.e4235 * wedge.e41), 
            /* e5, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e5) + (right_dual.e5 * wedge.e12345) + (right_dual.e4235 * wedge.e15) + (right_dual.e4315 * wedge.e25) + (right_dual.e4125 * wedge.e35) + (right_dual.e3215 * wedge.e45) - (right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125) - (right_dual.e45 * wedge.e3215) - (right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435), 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4((right_dual.e415 * wedge.e3215) + (right_dual.e315 * wedge.e4125) + (right_dual.e4125 * wedge.e315) + (right_dual.e3215 * wedge.e415), (right_dual.e425 * wedge.e3215) + (right_dual.e125 * wedge.e4235) + (right_dual.e4235 * wedge.e125) + (right_dual.e3215 * wedge.e425), (right_dual.e435 * wedge.e3215) + (right_dual.e235 * wedge.e4315) + (right_dual.e4315 * wedge.e235) + (right_dual.e3215 * wedge.e435), -(right_dual.e435 * wedge.e4125) - (right_dual.e4235 * wedge.e415) - (right_dual.e4315 * wedge.e425) - (right_dual.e4125 * wedge.e435)) + (float4(right_dual.e12345) * wedge.group3) + (float4(wedge.e12345) * right_dual.group3) - (wedge.group9.yzxx * float4(right_dual.group8.xyz.zxy, right_dual.e415)) - float4((wedge.group8.xyz.zxy * right_dual.group9.yzx), right_dual.e425 * wedge.e4315), 
            /* e41, e42, e43, 0 */
            float4((float3(right_dual.e12345) * wedge.group4.xyz) + (float3(right_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_dual.group4.xyz) + (float3(wedge.e1234) * right_dual.group6.xyz) + (right_dual.group7.xyz.zxy * wedge.group9.yzx) + (wedge.group7.xyz.zxy * right_dual.group9.yzx) - (right_dual.group7.xyz.yzx * wedge.group9.zxy) - (wedge.group7.xyz.yzx * right_dual.group9.zxy), 0.0), 
            /* e23, e31, e12, 0 */
            float4((float3(right_dual.e12345) * wedge.group5.xyz) + (float3(right_dual.e3215) * wedge.group7.xyz) + (float3(right_dual.e1234) * wedge.group8.xyz) + (float3(wedge.e12345) * right_dual.group5.xyz) + (float3(wedge.e3215) * right_dual.group7.xyz) + (float3(wedge.e1234) * right_dual.group8.xyz) - (float3(right_dual.e321) * wedge.group9.xyz) - (float3(wedge.e321) * right_dual.group9.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            (float4(right_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_dual.group6) + (right_dual.group9.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - float4((right_dual.group9.zxy * wedge.group9.yzx), right_dual.e1234 * wedge.e3215), 
            /* e423, e431, e412, 0 */
            float4((float3(right_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_dual.group7.xyz) + (float3(wedge.e1234) * right_dual.group9.xyz) - (float3(right_dual.e1234) * wedge.group9.xyz), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(right_dual.e12345) * wedge.group8.xyz) + (float3(right_dual.e3215) * wedge.group9.xyz) + (float3(wedge.e12345) * right_dual.group8.xyz) - (float3(wedge.e3215) * right_dual.group9.xyz), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            (float4(right_dual.e12345) * wedge.group9) + (float4(wedge.e12345) * right_dual.group9), 
            /* e1234, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e1234) + (right_dual.e1234 * wedge.e12345), 0.0, 0.0, 0.0)
        );
    }
}
extension Circle: AntiRejectViaHorizonFrom<RoundPoint> {
    associatedtype Output = Circle;
    func anti_reject_via_horizon_from(other: RoundPoint) -> Output {
        Sphere wedge = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(-(this.e425 * other.e3) - (this.e235 * other.e4), -(this.e435 * other.e1) - (this.e315 * other.e4), -(this.e415 * other.e2) - (this.e125 * other.e4), (this.e321 * other.e5) + (this.e125 * other.e3)) + (other.group0.yzxy * float4(this.group1.zxy, this.e315)) + float4((float3(other.e5) * this.group0.xyz), this.e235 * other.e1), 
            /* e1234, 0, 0, 0 */
            float4(-(this.e423 * other.e1) - (this.e431 * other.e2) - (this.e412 * other.e3) - (this.e321 * other.e4), 0.0, 0.0, 0.0)
        );
        Sphere right_dual = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        return Circle.from_groups(
            /* e423, e431, e412, 0 */
            float4((float3(wedge.e1234) * right_dual.group0.xyz) - (float3(right_dual.e1234) * wedge.group0.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            (right_dual.group0.yzxw * float4(wedge.group0.zxy, wedge.e1234)) - float4((right_dual.group0.zxy * wedge.group0.yzx), right_dual.e1234 * wedge.e3215), 
            /* e235, e315, e125, 0 */
            float4((float3(right_dual.e3215) * wedge.group0.xyz) - (float3(wedge.e3215) * right_dual.group0.xyz), 0.0)
        );
    }
}
extension Circle: AntiRejectViaHorizonFrom<Scalar> {
    associatedtype Output = Circle;
    func anti_reject_via_horizon_from(other: Scalar) -> Output {
        Circle wedge = Circle.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(other.scalar) * this.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(other.scalar) * this.group1, 
            /* e235, e315, e125, 0 */
            float4(float3(other.scalar) * this.group2.xyz, 0.0)
        );
        AntiScalar right_dual = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(other.scalar, 0.0, 0.0, 0.0)
        );
        return Circle.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(right_dual.e12345) * wedge.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(right_dual.e12345) * wedge.group1, 
            /* e235, e315, e125, 0 */
            float4(float3(right_dual.e12345) * wedge.group2.xyz, 0.0)
        );
    }
}
extension Circle: AntiRejectViaHorizonFrom<VersorEven> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: VersorEven) -> Output {
        Sphere wedge = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(-(this.e425 * other.e3) - (this.e235 * other.e4), -(this.e435 * other.e1) - (this.e315 * other.e4), -(this.e415 * other.e2) - (this.e125 * other.e4), (this.e321 * other.e5) + (this.e125 * other.e3)) + (other.group3.yzxy * float4(this.group1.zxy, this.e315)) + float4((this.group0.xyz * other.group2.www), this.e235 * other.e1), 
            /* e1234, 0, 0, 0 */
            float4(-(this.e423 * other.e1) - (this.e431 * other.e2) - (this.e412 * other.e3) - (this.e321 * other.e4), 0.0, 0.0, 0.0)
        );
        VersorOdd right_dual = VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4((float3(wedge.e1234) * right_dual.group3.xyz) - (float3(right_dual.e1234) * wedge.group0.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            float4((wedge.group0.zxy * right_dual.group3.yzx), wedge.e1234 * right_dual.e3215) - (wedge.group0.yzxw * float4(right_dual.group3.zxy, right_dual.e1234)), 
            /* e235, e315, e125, e4 */
            float4(wedge.e3215 * right_dual.e4235 * -1.0, wedge.e3215 * right_dual.e4315 * -1.0, wedge.e3215 * right_dual.e4125 * -1.0, (wedge.e4315 * right_dual.e42) + (wedge.e4125 * right_dual.e43) + (wedge.e1234 * right_dual.e45)) + (wedge.group0.xyzx * float4(right_dual.group3.www, right_dual.e41)), 
            /* e1, e2, e3, e5 */
            float4((wedge.e4315 * right_dual.e12) + (wedge.e1234 * right_dual.e15), (wedge.e4125 * right_dual.e23) + (wedge.e1234 * right_dual.e25), (wedge.e4235 * right_dual.e31) + (wedge.e1234 * right_dual.e35), -(wedge.e4125 * right_dual.e35) - (wedge.e3215 * right_dual.e45)) - (wedge.group0.zxyx * float4(right_dual.group1.yzx, right_dual.e15)) - (wedge.group0.wwwy * float4(right_dual.group0.xyz, right_dual.e25))
        );
    }
}
extension Circle: AntiRejectViaHorizonFrom<VersorOdd> {
    associatedtype Output = VersorEven;
    func anti_reject_via_horizon_from(other: VersorOdd) -> Output {
        CircleRotor wedge = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(other.scalar) * this.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(other.scalar) * this.group1, 
            /* e235, e315, e125, e12345 */
            float4((float3(other.scalar) * this.group2.xyz), -(this.e423 * other.e15) - (this.e431 * other.e25) - (this.e412 * other.e35) - (this.e415 * other.e23) - (this.e425 * other.e31) - (this.e435 * other.e12) - (this.e321 * other.e45) - (this.e235 * other.e41) - (this.e315 * other.e42) - (this.e125 * other.e43))
        );
        VersorEven right_dual = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4(((float3(wedge.e12345) * right_dual.group0.xyz) + (float3(right_dual.e12345) * wedge.group0.xyz)), wedge.e12345 * right_dual.e12345), 
            /* e415, e425, e435, e321 */
            (float4(wedge.e12345) * right_dual.group1) + (float4(right_dual.e12345) * wedge.group1), 
            /* e235, e315, e125, e5 */
            float4(wedge.e12345 * right_dual.e235, wedge.e12345 * right_dual.e315, wedge.e12345 * right_dual.e125, -(wedge.e415 * right_dual.e235) - (wedge.e425 * right_dual.e315) - (wedge.e435 * right_dual.e125) - (wedge.e235 * right_dual.e415) - (wedge.e315 * right_dual.e425) - (wedge.e125 * right_dual.e435)) + (wedge.group2 * float4(right_dual.group0.www, right_dual.e5)), 
            /* e1, e2, e3, e4 */
            float4((wedge.e415 * right_dual.e321) + (wedge.e321 * right_dual.e415) + (wedge.e315 * right_dual.e412) + (wedge.e12345 * right_dual.e1), (wedge.e425 * right_dual.e321) + (wedge.e321 * right_dual.e425) + (wedge.e125 * right_dual.e423) + (wedge.e12345 * right_dual.e2), (wedge.e435 * right_dual.e321) + (wedge.e321 * right_dual.e435) + (wedge.e235 * right_dual.e431) + (wedge.e12345 * right_dual.e3), -(wedge.e412 * right_dual.e435) - (wedge.e415 * right_dual.e423) - (wedge.e425 * right_dual.e431) - (wedge.e435 * right_dual.e412)) + float4((wedge.group0.xyz.zxy * right_dual.group2.yzx), wedge.e12345 * right_dual.e4) - float4((wedge.group0.xyz.yzx * right_dual.group2.zxy), wedge.e423 * right_dual.e415) - float4((wedge.group2.zxy * right_dual.group0.yzx), wedge.e431 * right_dual.e425)
        );
    }
}
extension CircleRotor {
    // Fancy infix trick
    func operator/(_rhs: AntiRejectViaHorizonFromInfix) -> AntiRejectViaHorizonFromInfixPartial<CircleRotor> {
        return AntiRejectViaHorizonFromInfixPartial { a: this };
    }
}
extension CircleRotor: AntiRejectViaHorizonFrom<AntiCircleRotor> {
    associatedtype Output = VersorEven;
    func anti_reject_via_horizon_from(other: AntiCircleRotor) -> Output {
        CircleRotor wedge = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(other.scalar) * this.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(other.scalar) * this.group1, 
            /* e235, e315, e125, e12345 */
            float4((other.group2.www * this.group2.xyz), (other.scalar * this.e12345) - (other.e41 * this.e235) - (other.e42 * this.e315) - (other.e43 * this.e125) - (other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435) - (other.e45 * this.e321) - (other.e15 * this.e423) - (other.e25 * this.e431) - (other.e35 * this.e412))
        );
        CircleRotor right_dual = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4(((float3(right_dual.e12345) * wedge.group0.xyz) + (float3(wedge.e12345) * right_dual.group0.xyz)), right_dual.e12345 * wedge.e12345), 
            /* e415, e425, e435, e321 */
            (float4(right_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_dual.group1), 
            /* e235, e315, e125, e5 */
            float4((right_dual.e235 * wedge.e12345) + (right_dual.e12345 * wedge.e235), (right_dual.e315 * wedge.e12345) + (right_dual.e12345 * wedge.e315), (right_dual.e125 * wedge.e12345) + (right_dual.e12345 * wedge.e125), -(right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435)), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e412 * wedge.e315) + (right_dual.e415 * wedge.e321) + (right_dual.e321 * wedge.e415) + (right_dual.e315 * wedge.e412), (right_dual.e423 * wedge.e125) + (right_dual.e425 * wedge.e321) + (right_dual.e321 * wedge.e425) + (right_dual.e125 * wedge.e423), (right_dual.e431 * wedge.e235) + (right_dual.e435 * wedge.e321) + (right_dual.e321 * wedge.e435) + (right_dual.e235 * wedge.e431), -(right_dual.e412 * wedge.e435) - (right_dual.e415 * wedge.e423) - (right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412)) - float4((right_dual.group0.xyz.yzx * wedge.group2.zxy), right_dual.e423 * wedge.e415) - float4((wedge.group0.xyz.yzx * right_dual.group2.zxy), right_dual.e431 * wedge.e425)
        );
    }
}
extension CircleRotor: AntiRejectViaHorizonFrom<AntiDipoleInversion> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: AntiDipoleInversion) -> Output {
        Sphere wedge = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(-(other.e4 * this.e235) - (other.e3 * this.e425), -(other.e4 * this.e315) - (other.e1 * this.e435), -(other.e4 * this.e125) - (other.e2 * this.e415), (other.e3 * this.e125) + (other.e5 * this.e321)) + (other.group3.yzxy * float4(this.group1.zxy, this.e315)) + float4((this.group0.xyz * other.group3.www), other.e1 * this.e235), 
            /* e1234, 0, 0, 0 */
            float4(-(other.e4 * this.e321) - (other.e1 * this.e423) - (other.e2 * this.e431) - (other.e3 * this.e412), 0.0, 0.0, 0.0)
        );
        DipoleInversion right_dual = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4((float3(wedge.e1234) * right_dual.group3.xyz) - (float3(right_dual.e1234) * wedge.group0.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            (right_dual.group3.yzxw * float4(wedge.group0.zxy, wedge.e1234)) - (wedge.group0.yzxw * float4(right_dual.group3.zxy, right_dual.e1234)), 
            /* e235, e315, e125, e4 */
            float4(right_dual.e4235 * wedge.e3215 * -1.0, right_dual.e4315 * wedge.e3215 * -1.0, right_dual.e4125 * wedge.e3215 * -1.0, (right_dual.e42 * wedge.e4315) + (right_dual.e43 * wedge.e4125) + (right_dual.e45 * wedge.e1234)) + (wedge.group0.xyzx * float4(right_dual.group3.www, right_dual.e41)), 
            /* e1, e2, e3, e5 */
            float4((right_dual.e12 * wedge.e4315) + (right_dual.e15 * wedge.e1234), (right_dual.e23 * wedge.e4125) + (right_dual.e25 * wedge.e1234), (right_dual.e31 * wedge.e4235) + (right_dual.e35 * wedge.e1234), -(right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125)) - (float4(wedge.e3215) * float4(right_dual.group0.xyz, right_dual.e45)) - (wedge.group0.zxyx * float4(right_dual.group1.yzx, right_dual.e15))
        );
    }
}
extension CircleRotor: AntiRejectViaHorizonFrom<AntiDualNum> {
    associatedtype Output = VersorEven;
    func anti_reject_via_horizon_from(other: AntiDualNum) -> Output {
        CircleRotor wedge = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(other.scalar) * this.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(other.scalar) * this.group1, 
            /* e235, e315, e125, e12345 */
            float4(other.scalar) * this.group2
        );
        DualNum right_dual = DualNum.from_groups(
            /* e5, e12345, 0, 0 */
            float4(other.group0.xy, 0.0, 0.0)
        );
        return VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4(right_dual.e12345) * float4(wedge.group0.xyz, wedge.e12345), 
            /* e415, e425, e435, e321 */
            float4(right_dual.e12345) * wedge.group1, 
            /* e235, e315, e125, e5 */
            wedge.group2 * float4(right_dual.group0.xy.yy, right_dual.e12345, right_dual.e5), 
            /* e1, e2, e3, e4 */
            float4(0.0)
        );
    }
}
extension CircleRotor: AntiRejectViaHorizonFrom<AntiFlector> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: AntiFlector) -> Output {
        Sphere wedge = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(other.e3 * this.e425 * -1.0, other.e1 * this.e435 * -1.0, other.e2 * this.e415 * -1.0, (other.e3 * this.e125) + (other.e5 * this.e321)) + (other.group1.yzxy * float4(this.group1.zxy, this.e315)) + float4((this.group0.xyz * other.group1.www), other.e1 * this.e235), 
            /* e1234, 0, 0, 0 */
            float4(-(other.e1 * this.e423) - (other.e2 * this.e431) - (other.e3 * this.e412), 0.0, 0.0, 0.0)
        );
        Flector right_dual = Flector.from_groups(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(wedge.e1234) * right_dual.group1.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(((right_dual.group1.yzx * wedge.group0.zxy) - (right_dual.group1.zxy * wedge.group0.yzx)), right_dual.e3215 * wedge.e1234), 
            /* e235, e315, e125, e4 */
            float4(((float3(right_dual.e3215) * wedge.group0.xyz) - (float3(wedge.e3215) * right_dual.group1.xyz)), right_dual.e45 * wedge.e1234), 
            /* e1, e2, e3, e5 */
            float4((float3(wedge.e1234) * right_dual.group0.xyz), -(right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125) - (right_dual.e45 * wedge.e3215))
        );
    }
}
extension CircleRotor: AntiRejectViaHorizonFrom<AntiLine> {
    associatedtype Output = Line;
    func anti_reject_via_horizon_from(other: AntiLine) -> Output {
        AntiScalar wedge = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(-(other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435) - (other.e15 * this.e423) - (other.e25 * this.e431) - (other.e35 * this.e412), 0.0, 0.0, 0.0)
        );
        Line right_dual = Line.from_groups(
            /* e415, e425, e435, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e235, e315, e125, 0 */
            float4(other.group1.xyz * float3(-1.0), 0.0)
        );
        return Line.from_groups(
            /* e415, e425, e435, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e235, e315, e125, 0 */
            float4(float3(wedge.e12345) * right_dual.group1.xyz, 0.0)
        );
    }
}
extension CircleRotor: AntiRejectViaHorizonFrom<AntiMotor> {
    associatedtype Output = VersorEven;
    func anti_reject_via_horizon_from(other: AntiMotor) -> Output {
        CircleRotor wedge = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(other.scalar) * this.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(other.scalar) * this.group1, 
            /* e235, e315, e125, e12345 */
            float4((other.group0.www * this.group2.xyz), (other.scalar * this.e12345) - (other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435) - (other.e15 * this.e423) - (other.e25 * this.e431) - (other.e35 * this.e412))
        );
        Motor right_dual = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4(right_dual.e12345) * float4(wedge.group0.xyz, wedge.e12345), 
            /* e415, e425, e435, e321 */
            float4(((float3(wedge.e12345) * right_dual.group0.xyz) + (float3(right_dual.e12345) * wedge.group1.xyz)), wedge.e321 * right_dual.e12345), 
            /* e235, e315, e125, e5 */
            float4(wedge.e12345 * right_dual.e235, wedge.e12345 * right_dual.e315, wedge.e12345 * right_dual.e125, -(wedge.e415 * right_dual.e235) - (wedge.e425 * right_dual.e315) - (wedge.e435 * right_dual.e125) - (wedge.e235 * right_dual.e415) - (wedge.e315 * right_dual.e425) - (wedge.e125 * right_dual.e435)) + (wedge.group2 * float4(right_dual.group0.www, right_dual.e5)), 
            /* e1, e2, e3, e4 */
            float4((wedge.e412 * right_dual.e315) + (wedge.e321 * right_dual.e415), (wedge.e423 * right_dual.e125) + (wedge.e321 * right_dual.e425), (wedge.e431 * right_dual.e235) + (wedge.e321 * right_dual.e435), -(wedge.e431 * right_dual.e425) - (wedge.e412 * right_dual.e435)) - float4((wedge.group0.xyz.yzx * right_dual.group1.zxy), wedge.e423 * right_dual.e415)
        );
    }
}
extension CircleRotor: AntiRejectViaHorizonFrom<AntiPlane> {
    associatedtype Output = Circle;
    func anti_reject_via_horizon_from(other: AntiPlane) -> Output {
        Sphere wedge = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(other.e3 * this.e425 * -1.0, other.e1 * this.e435 * -1.0, other.e2 * this.e415 * -1.0, (other.e3 * this.e125) + (other.e5 * this.e321)) + (other.group0.yzxy * float4(this.group1.zxy, this.e315)) + float4((this.group0.xyz * other.group0.www), other.e1 * this.e235), 
            /* e1234, 0, 0, 0 */
            float4(-(other.e1 * this.e423) - (other.e2 * this.e431) - (other.e3 * this.e412), 0.0, 0.0, 0.0)
        );
        Plane right_dual = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return Circle.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(wedge.e1234) * right_dual.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(((right_dual.group0.yzx * wedge.group0.zxy) - (right_dual.group0.zxy * wedge.group0.yzx)), right_dual.e3215 * wedge.e1234), 
            /* e235, e315, e125, 0 */
            float4((float3(right_dual.e3215) * wedge.group0.xyz) - (float3(wedge.e3215) * right_dual.group0.xyz), 0.0)
        );
    }
}
extension CircleRotor: AntiRejectViaHorizonFrom<Dipole> {
    associatedtype Output = Circle;
    func anti_reject_via_horizon_from(other: Dipole) -> Output {
        AntiScalar wedge = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(-(this.e423 * other.e15) - (this.e431 * other.e25) - (this.e412 * other.e35) - (this.e415 * other.e23) - (this.e425 * other.e31) - (this.e435 * other.e12) - (this.e321 * other.e45) - (this.e235 * other.e41) - (this.e315 * other.e42) - (this.e125 * other.e43), 0.0, 0.0, 0.0)
        );
        Circle right_dual = Circle.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, 0 */
            float4(other.group2.xyz * float3(-1.0), 0.0)
        );
        return Circle.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(wedge.e12345) * right_dual.group1, 
            /* e235, e315, e125, 0 */
            float4(float3(wedge.e12345) * right_dual.group2.xyz, 0.0)
        );
    }
}
extension CircleRotor: AntiRejectViaHorizonFrom<DipoleInversion> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: DipoleInversion) -> Output {
        AntiScalar wedge = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(-(this.e423 * other.e15) - (this.e431 * other.e25) - (this.e412 * other.e35) - (this.e415 * other.e23) - (this.e425 * other.e31) - (this.e435 * other.e12) - (this.e321 * other.e45) - (this.e235 * other.e41) - (this.e315 * other.e42) - (this.e125 * other.e43), 0.0, 0.0, 0.0)
        );
        AntiDipoleInversion right_dual = AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(wedge.e12345) * right_dual.group1, 
            /* e235, e315, e125, e4 */
            float4(wedge.e12345) * right_dual.group2, 
            /* e1, e2, e3, e5 */
            float4(wedge.e12345) * right_dual.group3
        );
    }
}
extension CircleRotor: AntiRejectViaHorizonFrom<DualNum> {
    associatedtype Output = AntiFlatPoint;
    func anti_reject_via_horizon_from(other: DualNum) -> Output {
        AntiDualNum right_dual = AntiDualNum.from_groups(
            /* e3215, scalar, 0, 0 */
            float4(other.group0.xy * float2(-1.0), 0.0, 0.0)
        );
        return AntiFlatPoint.from_groups(
            /* e235, e315, e125, e321 */
            float4(right_dual.group0.xy.xx, right_dual.e3215, 0.0) * float4(float3(1.0), 0.0) * float4(float4(this.e423 * other.e5, this.e431 * other.e5, this.e412 * other.e5, this.e321 * other.e5).xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
    }
}
extension CircleRotor: AntiRejectViaHorizonFrom<FlatPoint> {
    associatedtype Output = AntiFlatPoint;
    func anti_reject_via_horizon_from(other: FlatPoint) -> Output {
        return AntiFlatPoint.from_groups(
            /* e235, e315, e125, e321 */
            float4(-(this.e423 * other.e15) - (this.e431 * other.e25) - (this.e412 * other.e35) - (this.e321 * other.e45)) * float4(other.e15 * -1.0, other.e25 * -1.0, other.e35 * -1.0, other.e45)
        );
    }
}
extension CircleRotor: AntiRejectViaHorizonFrom<Flector> {
    associatedtype Output = AntiFlector;
    func anti_reject_via_horizon_from(other: Flector) -> Output {
        AntiScalar wedge = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(-(this.e423 * other.e15) - (this.e431 * other.e25) - (this.e412 * other.e35) - (this.e321 * other.e45), 0.0, 0.0, 0.0)
        );
        AntiFlector right_dual = AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            float4(wedge.e12345) * right_dual.group0, 
            /* e1, e2, e3, e5 */
            float4(wedge.e12345) * right_dual.group1
        );
    }
}
extension CircleRotor: AntiRejectViaHorizonFrom<Motor> {
    associatedtype Output = AntiFlector;
    func anti_reject_via_horizon_from(other: Motor) -> Output {
        Plane wedge = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(other.e5) * float4(this.group0.xyz, this.e321)
        );
        AntiMotor right_dual = AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            float4(float3(1.0), 0.0) * float4(right_dual.group1.www, 0.0) * float4(wedge.group0.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e1, e2, e3, e5 */
            float4(right_dual.e12 * wedge.e4315, right_dual.e23 * wedge.e4125, right_dual.e31 * wedge.e4235, -(right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125)) - (wedge.group0.zxyx * float4(right_dual.group0.yzx, right_dual.e15))
        );
    }
}
extension CircleRotor: AntiRejectViaHorizonFrom<MultiVector> {
    associatedtype Output = MultiVector;
    func anti_reject_via_horizon_from(other: MultiVector) -> Output {
        MultiVector wedge = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(0.0, (this.e12345 * other.scalar) - (this.e423 * other.e15) - (this.e431 * other.e25) - (this.e412 * other.e35) - (this.e415 * other.e23) - (this.e425 * other.e31) - (this.e435 * other.e12) - (this.e321 * other.e45) - (this.e235 * other.e41) - (this.e315 * other.e42) - (this.e125 * other.e43)), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5, 0, 0, 0 */
            float4(0.0), 
            /* e15, e25, e35, e45 */
            float4(0.0), 
            /* e41, e42, e43, 0 */
            float4(0.0), 
            /* e23, e31, e12, 0 */
            float4(0.0), 
            /* e415, e425, e435, e321 */
            float4(other.scalar) * this.group1, 
            /* e423, e431, e412, 0 */
            float4(float3(other.scalar) * this.group0.xyz, 0.0), 
            /* e235, e315, e125, 0 */
            float4(float3(other.scalar) * this.group2.xyz, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(-(this.e425 * other.e3) - (this.e235 * other.e4), -(this.e435 * other.e1) - (this.e315 * other.e4), -(this.e415 * other.e2) - (this.e125 * other.e4), (this.e315 * other.e2) + (this.e125 * other.e3)) + (float4(other.e5) * float4(this.group0.xyz, this.e321)) + (other.group1.yzxx * float4(this.group1.zxy, this.e235)), 
            /* e1234, 0, 0, 0 */
            float4(-(this.e423 * other.e1) - (this.e431 * other.e2) - (this.e412 * other.e3) - (this.e321 * other.e4), 0.0, 0.0, 0.0)
        );
        MultiVector right_dual = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(other.group0.xy.yx * float2(-1.0, 1.0), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5, 0, 0, 0 */
            float4(other.e3215, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43, 0 */
            float4(other.group7.xyz, 0.0), 
            /* e23, e31, e12, 0 */
            float4(other.group6.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412, 0 */
            float4(other.group4.xyz * float3(-1.0), 0.0), 
            /* e235, e315, e125, 0 */
            float4(other.group3.xyz * float3(-1.0), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        return MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2((right_dual.scalar * wedge.e12345) + (right_dual.e12345 * wedge.scalar) + (right_dual.e1 * wedge.e4235) + (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) + (right_dual.e4 * wedge.e3215) + (right_dual.e5 * wedge.e1234) + (right_dual.e4235 * wedge.e1) + (right_dual.e4315 * wedge.e2) + (right_dual.e4125 * wedge.e3) + (right_dual.e3215 * wedge.e4) + (right_dual.e1234 * wedge.e5) - (right_dual.e15 * wedge.e423) - (right_dual.e25 * wedge.e431) - (right_dual.e35 * wedge.e412) - (right_dual.e45 * wedge.e321) - (right_dual.e41 * wedge.e235) - (right_dual.e42 * wedge.e315) - (right_dual.e43 * wedge.e125) - (right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e321 * wedge.e45) - (right_dual.e423 * wedge.e15) - (right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43), right_dual.e12345 * wedge.e12345), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e15 * wedge.e1234) + (right_dual.e415 * wedge.e321) + (right_dual.e321 * wedge.e415) + (right_dual.e4125 * wedge.e31), (right_dual.e25 * wedge.e1234) + (right_dual.e425 * wedge.e321) + (right_dual.e321 * wedge.e425) + (right_dual.e4235 * wedge.e12), (right_dual.e35 * wedge.e1234) + (right_dual.e435 * wedge.e321) + (right_dual.e321 * wedge.e435) + (right_dual.e4315 * wedge.e23), -(right_dual.e415 * wedge.e423) - (right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412) - (right_dual.e1234 * wedge.e45)) + (float4(right_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_dual.group1) + (wedge.group9.yzxx * float4(right_dual.group5.xyz.zxy, right_dual.e41)) + float4((wedge.group4.xyz * right_dual.group9.www), right_dual.e45 * wedge.e1234) + float4((right_dual.group7.xyz.zxy * wedge.group8.xyz.yzx), right_dual.e42 * wedge.e4315) + float4((right_dual.group8.xyz.yzx * wedge.group7.xyz.zxy), right_dual.e43 * wedge.e4125) - (right_dual.group9.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((float3(right_dual.e1234) * wedge.group3.xyz), right_dual.e4125 * wedge.e43) - float4((right_dual.group4.xyz * wedge.group9.www), right_dual.e423 * wedge.e415) - float4((right_dual.group5.xyz.yzx * wedge.group9.zxy), right_dual.e431 * wedge.e425) - float4((right_dual.group7.xyz.yzx * wedge.group8.xyz.zxy), right_dual.e412 * wedge.e435) - float4((right_dual.group8.xyz.zxy * wedge.group7.xyz.yzx), right_dual.e4235 * wedge.e41), 
            /* e5, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e5) + (right_dual.e5 * wedge.e12345) + (right_dual.e4235 * wedge.e15) + (right_dual.e4315 * wedge.e25) + (right_dual.e4125 * wedge.e35) + (right_dual.e3215 * wedge.e45) - (right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125) - (right_dual.e45 * wedge.e3215) - (right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435), 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4((right_dual.e415 * wedge.e3215) + (right_dual.e315 * wedge.e4125) + (right_dual.e4125 * wedge.e315) + (right_dual.e3215 * wedge.e415), (right_dual.e425 * wedge.e3215) + (right_dual.e125 * wedge.e4235) + (right_dual.e4235 * wedge.e125) + (right_dual.e3215 * wedge.e425), (right_dual.e435 * wedge.e3215) + (right_dual.e235 * wedge.e4315) + (right_dual.e4315 * wedge.e235) + (right_dual.e3215 * wedge.e435), -(right_dual.e435 * wedge.e4125) - (right_dual.e4235 * wedge.e415) - (right_dual.e4315 * wedge.e425) - (right_dual.e4125 * wedge.e435)) + (float4(right_dual.e12345) * wedge.group3) + (float4(wedge.e12345) * right_dual.group3) - (wedge.group9.yzxx * float4(right_dual.group8.xyz.zxy, right_dual.e415)) - float4((wedge.group8.xyz.zxy * right_dual.group9.yzx), right_dual.e425 * wedge.e4315), 
            /* e41, e42, e43, 0 */
            float4((float3(right_dual.e12345) * wedge.group4.xyz) + (float3(right_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_dual.group4.xyz) + (float3(wedge.e1234) * right_dual.group6.xyz) + (right_dual.group7.xyz.zxy * wedge.group9.yzx) + (wedge.group7.xyz.zxy * right_dual.group9.yzx) - (right_dual.group7.xyz.yzx * wedge.group9.zxy) - (wedge.group7.xyz.yzx * right_dual.group9.zxy), 0.0), 
            /* e23, e31, e12, 0 */
            float4((float3(right_dual.e12345) * wedge.group5.xyz) + (float3(right_dual.e3215) * wedge.group7.xyz) + (float3(right_dual.e1234) * wedge.group8.xyz) + (float3(wedge.e12345) * right_dual.group5.xyz) + (float3(wedge.e3215) * right_dual.group7.xyz) + (float3(wedge.e1234) * right_dual.group8.xyz) - (float3(right_dual.e321) * wedge.group9.xyz) - (float3(wedge.e321) * right_dual.group9.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            (float4(right_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_dual.group6) + (right_dual.group9.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - float4((right_dual.group9.zxy * wedge.group9.yzx), right_dual.e1234 * wedge.e3215), 
            /* e423, e431, e412, 0 */
            float4((float3(right_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_dual.group7.xyz) + (float3(wedge.e1234) * right_dual.group9.xyz) - (float3(right_dual.e1234) * wedge.group9.xyz), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(right_dual.e12345) * wedge.group8.xyz) + (float3(right_dual.e3215) * wedge.group9.xyz) + (float3(wedge.e12345) * right_dual.group8.xyz) - (float3(wedge.e3215) * right_dual.group9.xyz), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            (float4(right_dual.e12345) * wedge.group9) + (float4(wedge.e12345) * right_dual.group9), 
            /* e1234, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e1234) + (right_dual.e1234 * wedge.e12345), 0.0, 0.0, 0.0)
        );
    }
}
extension CircleRotor: AntiRejectViaHorizonFrom<RoundPoint> {
    associatedtype Output = Circle;
    func anti_reject_via_horizon_from(other: RoundPoint) -> Output {
        Sphere wedge = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(-(this.e425 * other.e3) - (this.e235 * other.e4), -(this.e435 * other.e1) - (this.e315 * other.e4), -(this.e415 * other.e2) - (this.e125 * other.e4), (this.e315 * other.e2) + (this.e125 * other.e3)) + (float4(other.e5) * float4(this.group0.xyz, this.e321)) + (other.group0.yzxx * float4(this.group1.zxy, this.e235)), 
            /* e1234, 0, 0, 0 */
            float4(-(this.e423 * other.e1) - (this.e431 * other.e2) - (this.e412 * other.e3) - (this.e321 * other.e4), 0.0, 0.0, 0.0)
        );
        Sphere right_dual = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        return Circle.from_groups(
            /* e423, e431, e412, 0 */
            float4((float3(wedge.e1234) * right_dual.group0.xyz) - (float3(right_dual.e1234) * wedge.group0.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            (right_dual.group0.yzxw * float4(wedge.group0.zxy, wedge.e1234)) - float4((right_dual.group0.zxy * wedge.group0.yzx), right_dual.e1234 * wedge.e3215), 
            /* e235, e315, e125, 0 */
            float4((float3(right_dual.e3215) * wedge.group0.xyz) - (float3(wedge.e3215) * right_dual.group0.xyz), 0.0)
        );
    }
}
extension CircleRotor: AntiRejectViaHorizonFrom<Scalar> {
    associatedtype Output = CircleRotor;
    func anti_reject_via_horizon_from(other: Scalar) -> Output {
        CircleRotor wedge = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(other.scalar) * this.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(other.scalar) * this.group1, 
            /* e235, e315, e125, e12345 */
            float4(other.scalar) * this.group2
        );
        AntiScalar right_dual = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(other.scalar, 0.0, 0.0, 0.0)
        );
        return CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(right_dual.e12345) * wedge.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(right_dual.e12345) * wedge.group1, 
            /* e235, e315, e125, e12345 */
            float4(right_dual.e12345) * wedge.group2
        );
    }
}
extension CircleRotor: AntiRejectViaHorizonFrom<VersorEven> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: VersorEven) -> Output {
        Sphere wedge = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(-(this.e425 * other.e3) - (this.e235 * other.e4), -(this.e435 * other.e1) - (this.e315 * other.e4), -(this.e415 * other.e2) - (this.e125 * other.e4), (this.e315 * other.e2) + (this.e125 * other.e3)) + (float4(other.e5) * float4(this.group0.xyz, this.e321)) + (other.group3.yzxx * float4(this.group1.zxy, this.e235)), 
            /* e1234, 0, 0, 0 */
            float4(-(this.e423 * other.e1) - (this.e431 * other.e2) - (this.e412 * other.e3) - (this.e321 * other.e4), 0.0, 0.0, 0.0)
        );
        VersorOdd right_dual = VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4((float3(wedge.e1234) * right_dual.group3.xyz) - (float3(right_dual.e1234) * wedge.group0.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            float4((wedge.group0.zxy * right_dual.group3.yzx), wedge.e1234 * right_dual.e3215) - (wedge.group0.yzxw * float4(right_dual.group3.zxy, right_dual.e1234)), 
            /* e235, e315, e125, e4 */
            float4(wedge.e3215 * right_dual.e4235 * -1.0, wedge.e3215 * right_dual.e4315 * -1.0, wedge.e3215 * right_dual.e4125 * -1.0, (wedge.e4315 * right_dual.e42) + (wedge.e4125 * right_dual.e43) + (wedge.e1234 * right_dual.e45)) + (wedge.group0.xyzx * float4(right_dual.group3.www, right_dual.e41)), 
            /* e1, e2, e3, e5 */
            float4((wedge.e4315 * right_dual.e12) + (wedge.e1234 * right_dual.e15), (wedge.e4125 * right_dual.e23) + (wedge.e1234 * right_dual.e25), (wedge.e4235 * right_dual.e31) + (wedge.e1234 * right_dual.e35), -(wedge.e4125 * right_dual.e35) - (wedge.e3215 * right_dual.e45)) - (wedge.group0.zxyx * float4(right_dual.group1.yzx, right_dual.e15)) - (wedge.group0.wwwy * float4(right_dual.group0.xyz, right_dual.e25))
        );
    }
}
extension CircleRotor: AntiRejectViaHorizonFrom<VersorOdd> {
    associatedtype Output = VersorEven;
    func anti_reject_via_horizon_from(other: VersorOdd) -> Output {
        CircleRotor wedge = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(other.scalar) * this.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(other.scalar) * this.group1, 
            /* e235, e315, e125, e12345 */
            float4((float3(other.scalar) * this.group2.xyz), (this.e12345 * other.scalar) - (this.e423 * other.e15) - (this.e431 * other.e25) - (this.e412 * other.e35) - (this.e415 * other.e23) - (this.e425 * other.e31) - (this.e435 * other.e12) - (this.e321 * other.e45) - (this.e235 * other.e41) - (this.e315 * other.e42) - (this.e125 * other.e43))
        );
        VersorEven right_dual = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4(((float3(wedge.e12345) * right_dual.group0.xyz) + (float3(right_dual.e12345) * wedge.group0.xyz)), wedge.e12345 * right_dual.e12345), 
            /* e415, e425, e435, e321 */
            (float4(wedge.e12345) * right_dual.group1) + (float4(right_dual.e12345) * wedge.group1), 
            /* e235, e315, e125, e5 */
            float4(wedge.e12345 * right_dual.e235, wedge.e12345 * right_dual.e315, wedge.e12345 * right_dual.e125, -(wedge.e415 * right_dual.e235) - (wedge.e425 * right_dual.e315) - (wedge.e435 * right_dual.e125) - (wedge.e235 * right_dual.e415) - (wedge.e315 * right_dual.e425) - (wedge.e125 * right_dual.e435)) + (wedge.group2 * float4(right_dual.group0.www, right_dual.e5)), 
            /* e1, e2, e3, e4 */
            float4((wedge.e415 * right_dual.e321) + (wedge.e321 * right_dual.e415) + (wedge.e315 * right_dual.e412) + (wedge.e12345 * right_dual.e1), (wedge.e425 * right_dual.e321) + (wedge.e321 * right_dual.e425) + (wedge.e125 * right_dual.e423) + (wedge.e12345 * right_dual.e2), (wedge.e435 * right_dual.e321) + (wedge.e321 * right_dual.e435) + (wedge.e235 * right_dual.e431) + (wedge.e12345 * right_dual.e3), -(wedge.e412 * right_dual.e435) - (wedge.e415 * right_dual.e423) - (wedge.e425 * right_dual.e431) - (wedge.e435 * right_dual.e412)) + float4((wedge.group0.xyz.zxy * right_dual.group2.yzx), wedge.e12345 * right_dual.e4) - float4((wedge.group0.xyz.yzx * right_dual.group2.zxy), wedge.e423 * right_dual.e415) - float4((wedge.group2.zxy * right_dual.group0.yzx), wedge.e431 * right_dual.e425)
        );
    }
}
extension Dipole {
    // Fancy infix trick
    func operator/(_rhs: AntiRejectViaHorizonFromInfix) -> AntiRejectViaHorizonFromInfixPartial<Dipole> {
        return AntiRejectViaHorizonFromInfixPartial { a: this };
    }
}
extension Dipole: AntiRejectViaHorizonFrom<AntiCircleRotor> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: AntiCircleRotor) -> Output {
        DipoleInversion wedge = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(other.scalar) * this.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(other.scalar) * this.group1, 
            /* e15, e25, e35, e1234 */
            float4((float3(other.scalar) * this.group2.xyz), -(other.e41 * this.e23) - (other.e42 * this.e31) - (other.e43 * this.e12) - (other.e23 * this.e41) - (other.e31 * this.e42) - (other.e12 * this.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e42 * this.e35) + (other.e23 * this.e45) + (other.e45 * this.e23) + (other.e35 * this.e42), (other.e43 * this.e15) + (other.e31 * this.e45) + (other.e45 * this.e31) + (other.e15 * this.e43), (other.e41 * this.e25) + (other.e12 * this.e45) + (other.e45 * this.e12) + (other.e25 * this.e41), -(other.e12 * this.e35) - (other.e15 * this.e23) - (other.e25 * this.e31) - (other.e35 * this.e12)) - float4((other.group0.xyz.zxy * this.group2.xyz.yzx), other.e23 * this.e15) - float4((this.group0.xyz.zxy * other.group2.yzx), other.e31 * this.e25)
        );
        CircleRotor right_dual = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            float4((right_dual.e412 * wedge.e4315) + (right_dual.e415 * wedge.e1234) + (right_dual.e12345 * wedge.e41), (right_dual.e423 * wedge.e4125) + (right_dual.e425 * wedge.e1234) + (right_dual.e12345 * wedge.e42), (right_dual.e431 * wedge.e4235) + (right_dual.e435 * wedge.e1234) + (right_dual.e12345 * wedge.e43), -(right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e321 * wedge.e45) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43)) - float4((right_dual.group0.xyz.yzx * wedge.group3.zxy), right_dual.e423 * wedge.e15), 
            /* e23, e31, e12, e45 */
            float4((right_dual.e235 * wedge.e1234) + (right_dual.e12345 * wedge.e23), (right_dual.e315 * wedge.e1234) + (right_dual.e12345 * wedge.e31), (right_dual.e125 * wedge.e1234) + (right_dual.e12345 * wedge.e12), -(right_dual.e425 * wedge.e4315) - (right_dual.e435 * wedge.e4125)) + float4((right_dual.group0.xyz * wedge.group3.www), right_dual.e12345 * wedge.e45) - (right_dual.group1.wwwx * wedge.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_dual.e12345) * wedge.group2.xyz) + (float3(wedge.e3215) * right_dual.group1.xyz) + (right_dual.group2.yzx * wedge.group3.zxy) - (right_dual.group2.zxy * wedge.group3.yzx)), right_dual.e12345 * wedge.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * wedge.group3
        );
    }
}
extension Dipole: AntiRejectViaHorizonFrom<AntiDipoleInversion> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: AntiDipoleInversion) -> Output {
        CircleRotor wedge = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4((float3(other.e4) * this.group1.xyz) + (this.group0.xyz.yzx * other.group3.zxy) - (this.group0.xyz.zxy * other.group3.yzx), 0.0), 
            /* e415, e425, e435, e321 */
            float4((other.e4 * this.e15) + (other.e5 * this.e41), (other.e4 * this.e25) + (other.e5 * this.e42), (other.e4 * this.e35) + (other.e5 * this.e43), -(other.e2 * this.e31) - (other.e3 * this.e12)) - (other.group3.xyzx * this.group1.wwwx), 
            /* e235, e315, e125, e12345 */
            float4((other.e2 * this.e35) + (other.e5 * this.e23), (other.e3 * this.e15) + (other.e5 * this.e31), (other.e1 * this.e25) + (other.e5 * this.e12), -(other.e431 * this.e25) - (other.e412 * this.e35) - (other.e415 * this.e23) - (other.e425 * this.e31) - (other.e435 * this.e12) - (other.e321 * this.e45) - (other.e235 * this.e41) - (other.e315 * this.e42) - (other.e125 * this.e43)) - float4((this.group2.xyz.yzx * other.group3.zxy), other.e423 * this.e15)
        );
        DipoleInversion right_dual = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            float4((wedge.e412 * right_dual.e4315) + (wedge.e415 * right_dual.e1234) + (wedge.e12345 * right_dual.e41), (wedge.e423 * right_dual.e4125) + (wedge.e425 * right_dual.e1234) + (wedge.e12345 * right_dual.e42), (wedge.e431 * right_dual.e4235) + (wedge.e435 * right_dual.e1234) + (wedge.e12345 * right_dual.e43), -(wedge.e431 * right_dual.e25) - (wedge.e412 * right_dual.e35) - (wedge.e415 * right_dual.e23) - (wedge.e425 * right_dual.e31) - (wedge.e435 * right_dual.e12) - (wedge.e321 * right_dual.e45) - (wedge.e235 * right_dual.e41) - (wedge.e315 * right_dual.e42) - (wedge.e125 * right_dual.e43)) - float4((wedge.group0.xyz.yzx * right_dual.group3.zxy), wedge.e423 * right_dual.e15), 
            /* e23, e31, e12, e45 */
            float4((wedge.e235 * right_dual.e1234) + (wedge.e12345 * right_dual.e23), (wedge.e315 * right_dual.e1234) + (wedge.e12345 * right_dual.e31), (wedge.e125 * right_dual.e1234) + (wedge.e12345 * right_dual.e12), -(wedge.e425 * right_dual.e4315) - (wedge.e435 * right_dual.e4125)) + float4((wedge.group0.xyz * right_dual.group3.www), wedge.e12345 * right_dual.e45) - (wedge.group1.wwwx * right_dual.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(wedge.e12345) * right_dual.group2.xyz) + (float3(right_dual.e3215) * wedge.group1.xyz) + (wedge.group2.yzx * right_dual.group3.zxy) - (wedge.group2.zxy * right_dual.group3.yzx)), wedge.e12345 * right_dual.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_dual.group3
        );
    }
}
extension Dipole: AntiRejectViaHorizonFrom<AntiDualNum> {
    associatedtype Output = Dipole;
    func anti_reject_via_horizon_from(other: AntiDualNum) -> Output {
        Dipole wedge = Dipole.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(other.scalar) * this.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(other.scalar) * this.group1, 
            /* e15, e25, e35, 0 */
            float4(float3(other.scalar) * this.group2.xyz, 0.0)
        );
        DualNum right_dual = DualNum.from_groups(
            /* e5, e12345, 0, 0 */
            float4(other.group0.xy, 0.0, 0.0)
        );
        return Dipole.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(right_dual.e12345) * wedge.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(right_dual.e12345) * wedge.group1, 
            /* e15, e25, e35, 0 */
            float4(float3(right_dual.e12345) * wedge.group2.xyz, 0.0)
        );
    }
}
extension Dipole: AntiRejectViaHorizonFrom<AntiFlatPoint> {
    associatedtype Output = FlatPoint;
    func anti_reject_via_horizon_from(other: AntiFlatPoint) -> Output {
        return FlatPoint.from_groups(
            /* e15, e25, e35, e45 */
            float4(-(other.e235 * this.e41) - (other.e315 * this.e42) - (other.e125 * this.e43) - (other.e321 * this.e45)) * float4(other.group0.xyz, other.e321 * -1.0)
        );
    }
}
extension Dipole: AntiRejectViaHorizonFrom<AntiFlector> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: AntiFlector) -> Output {
        CircleRotor wedge = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4((this.group0.xyz.yzx * other.group1.zxy) - (this.group0.xyz.zxy * other.group1.yzx), 0.0), 
            /* e415, e425, e435, e321 */
            float4(other.e5 * this.e41, other.e5 * this.e42, other.e5 * this.e43, -(other.e2 * this.e31) - (other.e3 * this.e12)) - (other.group1.xyzx * this.group1.wwwx), 
            /* e235, e315, e125, e12345 */
            float4((other.e2 * this.e35) + (other.e5 * this.e23), (other.e3 * this.e15) + (other.e5 * this.e31), (other.e1 * this.e25) + (other.e5 * this.e12), -(other.e315 * this.e42) - (other.e125 * this.e43) - (other.e321 * this.e45)) - float4((this.group2.xyz.yzx * other.group1.zxy), other.e235 * this.e41)
        );
        Flector right_dual = Flector.from_groups(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            float4(wedge.e412 * right_dual.e4315, wedge.e423 * right_dual.e4125, wedge.e431 * right_dual.e4235, -(wedge.e431 * right_dual.e25) - (wedge.e412 * right_dual.e35) - (wedge.e321 * right_dual.e45)) - float4((wedge.group0.xyz.yzx * right_dual.group1.zxy), wedge.e423 * right_dual.e15), 
            /* e23, e31, e12, e45 */
            float4(float3(0.0), -(wedge.e425 * right_dual.e4315) - (wedge.e435 * right_dual.e4125)) + float4((wedge.group0.xyz * right_dual.group1.www), wedge.e12345 * right_dual.e45) - (wedge.group1.wwwx * right_dual.group1.xyzx), 
            /* e15, e25, e35, e1234 */
            float4((float3(wedge.e12345) * right_dual.group0.xyz), 0.0) + float4((float3(right_dual.e3215) * wedge.group1.xyz), 0.0) + float4((wedge.group2.yzx * right_dual.group1.zxy), 0.0) - float4((wedge.group2.zxy * right_dual.group1.yzx), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_dual.group1
        );
    }
}
extension Dipole: AntiRejectViaHorizonFrom<AntiLine> {
    associatedtype Output = Dipole;
    func anti_reject_via_horizon_from(other: AntiLine) -> Output {
        Sphere wedge = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4((other.e23 * this.e45) + (other.e35 * this.e42), (other.e31 * this.e45) + (other.e15 * this.e43), (other.e12 * this.e45) + (other.e25 * this.e41), -(other.e31 * this.e25) - (other.e12 * this.e35) - (other.e15 * this.e23) - (other.e25 * this.e31) - (other.e35 * this.e12)) - float4((other.group1.xyz.yzx * this.group0.xyz.zxy), other.e23 * this.e15), 
            /* e1234, 0, 0, 0 */
            float4(-(other.e23 * this.e41) - (other.e31 * this.e42) - (other.e12 * this.e43), 0.0, 0.0, 0.0)
        );
        Line right_dual = Line.from_groups(
            /* e415, e425, e435, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e235, e315, e125, 0 */
            float4(other.group1.xyz * float3(-1.0), 0.0)
        );
        return Dipole.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(wedge.e1234) * right_dual.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4((float3(wedge.e1234) * right_dual.group1.xyz), -(right_dual.e415 * wedge.e4235) - (right_dual.e425 * wedge.e4315) - (right_dual.e435 * wedge.e4125)), 
            /* e15, e25, e35, 0 */
            float4((float3(wedge.e3215) * right_dual.group0.xyz) + (right_dual.group1.xyz.yzx * wedge.group0.zxy) - (right_dual.group1.xyz.zxy * wedge.group0.yzx), 0.0)
        );
    }
}
extension Dipole: AntiRejectViaHorizonFrom<AntiMotor> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: AntiMotor) -> Output {
        DipoleInversion wedge = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(other.scalar) * this.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(other.scalar) * this.group1, 
            /* e15, e25, e35, e1234 */
            float4((float3(other.scalar) * this.group2.xyz), -(other.e23 * this.e41) - (other.e31 * this.e42) - (other.e12 * this.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e23 * this.e45) + (other.e35 * this.e42), (other.e31 * this.e45) + (other.e15 * this.e43), (other.e12 * this.e45) + (other.e25 * this.e41), -(other.e31 * this.e25) - (other.e12 * this.e35) - (other.e15 * this.e23) - (other.e25 * this.e31) - (other.e35 * this.e12)) - float4((this.group0.xyz.zxy * other.group1.yzx), other.e23 * this.e15)
        );
        Motor right_dual = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            float4(wedge.e1234 * right_dual.e415, wedge.e1234 * right_dual.e425, wedge.e1234 * right_dual.e435, -(wedge.e41 * right_dual.e235) - (wedge.e42 * right_dual.e315) - (wedge.e43 * right_dual.e125) - (wedge.e23 * right_dual.e415) - (wedge.e31 * right_dual.e425) - (wedge.e12 * right_dual.e435)) + float4((wedge.group0.xyz * right_dual.group0.www), wedge.e1234 * right_dual.e5), 
            /* e23, e31, e12, e45 */
            float4(wedge.e1234 * right_dual.e235, wedge.e1234 * right_dual.e315, wedge.e1234 * right_dual.e125, -(wedge.e4235 * right_dual.e415) - (wedge.e4315 * right_dual.e425) - (wedge.e4125 * right_dual.e435)) + (float4(right_dual.e12345) * wedge.group1), 
            /* e15, e25, e35, e1234 */
            float4(((float3(wedge.e3215) * right_dual.group0.xyz) + (float3(right_dual.e12345) * wedge.group2.xyz) + (wedge.group3.zxy * right_dual.group1.yzx) - (wedge.group3.yzx * right_dual.group1.zxy)), wedge.e1234 * right_dual.e12345), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * wedge.group3
        );
    }
}
extension Dipole: AntiRejectViaHorizonFrom<AntiPlane> {
    associatedtype Output = Dipole;
    func anti_reject_via_horizon_from(other: AntiPlane) -> Output {
        Circle wedge = Circle.from_groups(
            /* e423, e431, e412, 0 */
            float4((this.group0.xyz.yzx * other.group0.zxy) - (this.group0.xyz.zxy * other.group0.yzx), 0.0), 
            /* e415, e425, e435, e321 */
            float4(other.e5 * this.e41, other.e5 * this.e42, other.e5 * this.e43, -(other.e2 * this.e31) - (other.e3 * this.e12)) - (other.group0.xyzx * this.group1.wwwx), 
            /* e235, e315, e125, 0 */
            float4((float3(other.e5) * this.group1.xyz) + (this.group2.xyz.zxy * other.group0.yzx) - (this.group2.xyz.yzx * other.group0.zxy), 0.0)
        );
        Plane right_dual = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return Dipole.from_groups(
            /* e41, e42, e43, 0 */
            float4((wedge.group0.xyz.zxy * right_dual.group0.yzx) - (wedge.group0.xyz.yzx * right_dual.group0.zxy), 0.0), 
            /* e23, e31, e12, e45 */
            float4(wedge.e423 * right_dual.e3215, wedge.e431 * right_dual.e3215, wedge.e412 * right_dual.e3215, -(wedge.e425 * right_dual.e4315) - (wedge.e435 * right_dual.e4125)) - (wedge.group1.wwwx * right_dual.group0.xyzx), 
            /* e15, e25, e35, 0 */
            float4((float3(right_dual.e3215) * wedge.group1.xyz) + (wedge.group2.xyz.yzx * right_dual.group0.zxy) - (wedge.group2.xyz.zxy * right_dual.group0.yzx), 0.0)
        );
    }
}
extension Dipole: AntiRejectViaHorizonFrom<Circle> {
    associatedtype Output = Dipole;
    func anti_reject_via_horizon_from(other: Circle) -> Output {
        AntiScalar wedge = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(-(other.e423 * this.e15) - (other.e431 * this.e25) - (other.e412 * this.e35) - (other.e415 * this.e23) - (other.e425 * this.e31) - (other.e435 * this.e12) - (other.e321 * this.e45) - (other.e235 * this.e41) - (other.e315 * this.e42) - (other.e125 * this.e43), 0.0, 0.0, 0.0)
        );
        Dipole right_dual = Dipole.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, 0 */
            float4(other.group2.xyz, 0.0)
        );
        return Dipole.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(wedge.e12345) * right_dual.group1, 
            /* e15, e25, e35, 0 */
            float4(float3(wedge.e12345) * right_dual.group2.xyz, 0.0)
        );
    }
}
extension Dipole: AntiRejectViaHorizonFrom<CircleRotor> {
    associatedtype Output = AntiCircleRotor;
    func anti_reject_via_horizon_from(other: CircleRotor) -> Output {
        AntiScalar wedge = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(-(other.e423 * this.e15) - (other.e431 * this.e25) - (other.e412 * this.e35) - (other.e415 * this.e23) - (other.e425 * this.e31) - (other.e435 * this.e12) - (other.e321 * this.e45) - (other.e235 * this.e41) - (other.e315 * this.e42) - (other.e125 * this.e43), 0.0, 0.0, 0.0)
        );
        AntiCircleRotor right_dual = AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(wedge.e12345) * right_dual.group1, 
            /* e15, e25, e35, scalar */
            float4(wedge.e12345) * right_dual.group2
        );
    }
}
extension Dipole: AntiRejectViaHorizonFrom<Dipole> {
    associatedtype Output = Dipole;
    func anti_reject_via_horizon_from(other: Dipole) -> Output {
        Sphere wedge = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4((other.e42 * this.e35) + (other.e23 * this.e45) + (other.e45 * this.e23) + (other.e35 * this.e42), (other.e43 * this.e15) + (other.e31 * this.e45) + (other.e45 * this.e31) + (other.e15 * this.e43), (other.e41 * this.e25) + (other.e12 * this.e45) + (other.e45 * this.e12) + (other.e25 * this.e41), -(other.e23 * this.e15) - (other.e31 * this.e25) - (other.e12 * this.e35) - (other.e35 * this.e12)) - float4((other.group0.xyz.zxy * this.group2.xyz.yzx), other.e15 * this.e23) - float4((other.group2.xyz.yzx * this.group0.xyz.zxy), other.e25 * this.e31), 
            /* e1234, 0, 0, 0 */
            float4(-(other.e41 * this.e23) - (other.e42 * this.e31) - (other.e43 * this.e12) - (other.e23 * this.e41) - (other.e31 * this.e42) - (other.e12 * this.e43), 0.0, 0.0, 0.0)
        );
        Circle right_dual = Circle.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, 0 */
            float4(other.group2.xyz * float3(-1.0), 0.0)
        );
        return Dipole.from_groups(
            /* e41, e42, e43, 0 */
            float4((float3(wedge.e1234) * right_dual.group1.xyz) + (right_dual.group0.xyz.zxy * wedge.group0.yzx) - (right_dual.group0.xyz.yzx * wedge.group0.zxy), 0.0), 
            /* e23, e31, e12, e45 */
            float4((right_dual.e423 * wedge.e3215) + (right_dual.e235 * wedge.e1234), (right_dual.e431 * wedge.e3215) + (right_dual.e315 * wedge.e1234), (right_dual.e412 * wedge.e3215) + (right_dual.e125 * wedge.e1234), -(right_dual.e425 * wedge.e4315) - (right_dual.e435 * wedge.e4125)) - (right_dual.group1.wwwx * wedge.group0.xyzx), 
            /* e15, e25, e35, 0 */
            float4((float3(wedge.e3215) * right_dual.group1.xyz) + (right_dual.group2.xyz.yzx * wedge.group0.zxy) - (right_dual.group2.xyz.zxy * wedge.group0.yzx), 0.0)
        );
    }
}
extension Dipole: AntiRejectViaHorizonFrom<DipoleInversion> {
    associatedtype Output = AntiCircleRotor;
    func anti_reject_via_horizon_from(other: DipoleInversion) -> Output {
        Sphere wedge = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4((this.e42 * other.e35) + (this.e23 * other.e45) + (this.e45 * other.e23) + (this.e35 * other.e42), (this.e43 * other.e15) + (this.e31 * other.e45) + (this.e45 * other.e31) + (this.e15 * other.e43), (this.e41 * other.e25) + (this.e12 * other.e45) + (this.e45 * other.e12) + (this.e25 * other.e41), -(this.e23 * other.e15) - (this.e31 * other.e25) - (this.e12 * other.e35) - (this.e35 * other.e12)) - float4((this.group0.xyz.zxy * other.group2.yzx), this.e15 * other.e23) - float4((this.group2.xyz.yzx * other.group0.xyz.zxy), this.e25 * other.e31), 
            /* e1234, 0, 0, 0 */
            float4(-(this.e41 * other.e23) - (this.e42 * other.e31) - (this.e43 * other.e12) - (this.e23 * other.e41) - (this.e31 * other.e42) - (this.e12 * other.e43), 0.0, 0.0, 0.0)
        );
        AntiDipoleInversion right_dual = AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4((float3(wedge.e1234) * right_dual.group1.xyz) + (right_dual.group0.xyz.zxy * wedge.group0.yzx) - (right_dual.group0.xyz.yzx * wedge.group0.zxy), 0.0), 
            /* e23, e31, e12, e45 */
            float4((right_dual.e423 * wedge.e3215) + (right_dual.e235 * wedge.e1234), (right_dual.e431 * wedge.e3215) + (right_dual.e315 * wedge.e1234), (right_dual.e412 * wedge.e3215) + (right_dual.e125 * wedge.e1234), -(right_dual.e425 * wedge.e4315) - (right_dual.e435 * wedge.e4125)) - (right_dual.group1.wwwx * wedge.group0.xyzx), 
            /* e15, e25, e35, scalar */
            float4(right_dual.e125 * wedge.e4315 * -1.0, right_dual.e235 * wedge.e4125 * -1.0, right_dual.e315 * wedge.e4235 * -1.0, (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) + (right_dual.e5 * wedge.e1234)) + (float4(wedge.e3215) * float4(right_dual.group1.xyz, right_dual.e4)) + (wedge.group0.zxyx * float4(right_dual.group2.yzx, right_dual.e1))
        );
    }
}
extension Dipole: AntiRejectViaHorizonFrom<DualNum> {
    associatedtype Output = FlatPoint;
    func anti_reject_via_horizon_from(other: DualNum) -> Output {
        AntiDualNum right_dual = AntiDualNum.from_groups(
            /* e3215, scalar, 0, 0 */
            float4(other.group0.xy * float2(-1.0), 0.0, 0.0)
        );
        return FlatPoint.from_groups(
            /* e15, e25, e35, e45 */
            float4(right_dual.group0.xy.xx, right_dual.e3215, 0.0) * float4(float3(1.0), 0.0) * float4(float3(this.e41 * other.e5, this.e42 * other.e5, this.e43 * other.e5), 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
    }
}
extension Dipole: AntiRejectViaHorizonFrom<FlatPoint> {
    associatedtype Output = AntiLine;
    func anti_reject_via_horizon_from(other: FlatPoint) -> Output {
        Plane wedge = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4((this.e42 * other.e35) + (this.e23 * other.e45), (this.e43 * other.e15) + (this.e31 * other.e45), (this.e41 * other.e25) + (this.e12 * other.e45), -(this.e31 * other.e25) - (this.e12 * other.e35)) - (other.group0.yzxx * float4(this.group0.xyz.zxy, this.e23))
        );
        AntiFlatPoint right_dual = AntiFlatPoint.from_groups(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiLine.from_groups(
            /* e23, e31, e12, 0 */
            float4(float3(right_dual.e321) * wedge.group0.xyz * float3(-1.0), 0.0), 
            /* e15, e25, e35, 0 */
            float4((right_dual.group0.yzx * wedge.group0.zxy) - (right_dual.group0.zxy * wedge.group0.yzx), 0.0)
        );
    }
}
extension Dipole: AntiRejectViaHorizonFrom<Flector> {
    associatedtype Output = AntiMotor;
    func anti_reject_via_horizon_from(other: Flector) -> Output {
        Plane wedge = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4((this.e42 * other.e35) + (this.e23 * other.e45), (this.e43 * other.e15) + (this.e31 * other.e45), (this.e41 * other.e25) + (this.e12 * other.e45), -(this.e31 * other.e25) - (this.e12 * other.e35)) - (other.group0.yzxx * float4(this.group0.xyz.zxy, this.e23))
        );
        AntiFlector right_dual = AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            float4((right_dual.group0.www * wedge.group0.xyz * float3(-1.0)), (right_dual.e1 * wedge.e4235) + (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125)), 
            /* e15, e25, e35, e3215 */
            float4(((right_dual.group0.yzx * wedge.group0.zxy) - (right_dual.group0.zxy * wedge.group0.yzx)), 0.0)
        );
    }
}
extension Dipole: AntiRejectViaHorizonFrom<Line> {
    associatedtype Output = AntiLine;
    func anti_reject_via_horizon_from(other: Line) -> Output {
        AntiScalar wedge = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(-(this.e41 * other.e235) - (this.e42 * other.e315) - (this.e43 * other.e125) - (this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435), 0.0, 0.0, 0.0)
        );
        AntiLine right_dual = AntiLine.from_groups(
            /* e23, e31, e12, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e15, e25, e35, 0 */
            float4(other.group1.xyz, 0.0)
        );
        return AntiLine.from_groups(
            /* e23, e31, e12, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e15, e25, e35, 0 */
            float4(float3(wedge.e12345) * right_dual.group1.xyz, 0.0)
        );
    }
}
extension Dipole: AntiRejectViaHorizonFrom<Motor> {
    associatedtype Output = AntiMotor;
    func anti_reject_via_horizon_from(other: Motor) -> Output {
        Motor wedge = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4((float3(other.e5) * this.group0.xyz), -(this.e41 * other.e235) - (this.e42 * other.e315) - (this.e43 * other.e125) - (this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435)), 
            /* e235, e315, e125, e5 */
            float4(float3(1.0), 0.0) * float4(other.group1.www, 0.0) * float4(this.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        AntiMotor right_dual = AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            float4((float3(wedge.e12345) * right_dual.group0.xyz), (right_dual.scalar * wedge.e12345) - (right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435)), 
            /* e15, e25, e35, e3215 */
            float4(((float3(right_dual.e3215) * wedge.group0.xyz) + (float3(wedge.e12345) * right_dual.group1.xyz)), right_dual.e3215 * wedge.e12345)
        );
    }
}
extension Dipole: AntiRejectViaHorizonFrom<MultiVector> {
    associatedtype Output = MultiVector;
    func anti_reject_via_horizon_from(other: MultiVector) -> Output {
        MultiVector wedge = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(0.0, -(this.e41 * other.e235) - (this.e42 * other.e315) - (this.e43 * other.e125) - (this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435) - (this.e45 * other.e321) - (this.e15 * other.e423) - (this.e25 * other.e431) - (this.e35 * other.e412)), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5, 0, 0, 0 */
            float4(0.0), 
            /* e15, e25, e35, e45 */
            float4(other.scalar) * float4(this.group2.xyz, this.e45), 
            /* e41, e42, e43, 0 */
            float4(float3(other.scalar) * this.group0.xyz, 0.0), 
            /* e23, e31, e12, 0 */
            float4(float3(other.scalar) * this.group1.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4((this.e41 * other.e5) + (this.e15 * other.e4), (this.e42 * other.e5) + (this.e25 * other.e4), (this.e43 * other.e5) + (this.e35 * other.e4), -(this.e31 * other.e2) - (this.e12 * other.e3)) - (this.group1.wwwx * other.group1.xyzx), 
            /* e423, e431, e412, 0 */
            float4((float3(other.e4) * this.group1.xyz) + (this.group0.xyz.yzx * other.group1.zxy) - (this.group0.xyz.zxy * other.group1.yzx), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(other.e5) * this.group1.xyz) + (this.group2.xyz.zxy * other.group1.yzx) - (this.group2.xyz.yzx * other.group1.zxy), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4((this.e42 * other.e35) + (this.e23 * other.e45) + (this.e45 * other.e23) + (this.e35 * other.e42), (this.e43 * other.e15) + (this.e31 * other.e45) + (this.e45 * other.e31) + (this.e15 * other.e43), (this.e41 * other.e25) + (this.e12 * other.e45) + (this.e45 * other.e12) + (this.e25 * other.e41), -(this.e23 * other.e15) - (this.e31 * other.e25) - (this.e12 * other.e35) - (this.e35 * other.e12)) - float4((this.group0.xyz.zxy * other.group3.yzx), this.e15 * other.e23) - float4((this.group2.xyz.yzx * other.group4.xyz.zxy), this.e25 * other.e31), 
            /* e1234, 0, 0, 0 */
            float4(-(this.e41 * other.e23) - (this.e42 * other.e31) - (this.e43 * other.e12) - (this.e23 * other.e41) - (this.e31 * other.e42) - (this.e12 * other.e43), 0.0, 0.0, 0.0)
        );
        MultiVector right_dual = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(other.group0.xy.yx * float2(-1.0, 1.0), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5, 0, 0, 0 */
            float4(other.e3215, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43, 0 */
            float4(other.group7.xyz, 0.0), 
            /* e23, e31, e12, 0 */
            float4(other.group6.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412, 0 */
            float4(other.group4.xyz * float3(-1.0), 0.0), 
            /* e235, e315, e125, 0 */
            float4(other.group3.xyz * float3(-1.0), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        return MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2((right_dual.scalar * wedge.e12345) + (right_dual.e12345 * wedge.scalar) + (right_dual.e1 * wedge.e4235) + (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) + (right_dual.e4 * wedge.e3215) + (right_dual.e5 * wedge.e1234) + (right_dual.e4235 * wedge.e1) + (right_dual.e4315 * wedge.e2) + (right_dual.e4125 * wedge.e3) + (right_dual.e3215 * wedge.e4) + (right_dual.e1234 * wedge.e5) - (right_dual.e15 * wedge.e423) - (right_dual.e25 * wedge.e431) - (right_dual.e35 * wedge.e412) - (right_dual.e45 * wedge.e321) - (right_dual.e41 * wedge.e235) - (right_dual.e42 * wedge.e315) - (right_dual.e43 * wedge.e125) - (right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e321 * wedge.e45) - (right_dual.e423 * wedge.e15) - (right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43), right_dual.e12345 * wedge.e12345), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e15 * wedge.e1234) + (right_dual.e415 * wedge.e321) + (right_dual.e321 * wedge.e415) + (right_dual.e4125 * wedge.e31), (right_dual.e25 * wedge.e1234) + (right_dual.e425 * wedge.e321) + (right_dual.e321 * wedge.e425) + (right_dual.e4235 * wedge.e12), (right_dual.e35 * wedge.e1234) + (right_dual.e435 * wedge.e321) + (right_dual.e321 * wedge.e435) + (right_dual.e4315 * wedge.e23), -(right_dual.e415 * wedge.e423) - (right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412) - (right_dual.e1234 * wedge.e45)) + (float4(right_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_dual.group1) + (wedge.group9.yzxx * float4(right_dual.group5.xyz.zxy, right_dual.e41)) + float4((wedge.group4.xyz * right_dual.group9.www), right_dual.e45 * wedge.e1234) + float4((right_dual.group7.xyz.zxy * wedge.group8.xyz.yzx), right_dual.e42 * wedge.e4315) + float4((right_dual.group8.xyz.yzx * wedge.group7.xyz.zxy), right_dual.e43 * wedge.e4125) - (right_dual.group9.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((float3(right_dual.e1234) * wedge.group3.xyz), right_dual.e4125 * wedge.e43) - float4((right_dual.group4.xyz * wedge.group9.www), right_dual.e423 * wedge.e415) - float4((right_dual.group5.xyz.yzx * wedge.group9.zxy), right_dual.e431 * wedge.e425) - float4((right_dual.group7.xyz.yzx * wedge.group8.xyz.zxy), right_dual.e412 * wedge.e435) - float4((right_dual.group8.xyz.zxy * wedge.group7.xyz.yzx), right_dual.e4235 * wedge.e41), 
            /* e5, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e5) + (right_dual.e5 * wedge.e12345) + (right_dual.e4235 * wedge.e15) + (right_dual.e4315 * wedge.e25) + (right_dual.e4125 * wedge.e35) + (right_dual.e3215 * wedge.e45) - (right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125) - (right_dual.e45 * wedge.e3215) - (right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435), 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4((right_dual.e415 * wedge.e3215) + (right_dual.e315 * wedge.e4125) + (right_dual.e4125 * wedge.e315) + (right_dual.e3215 * wedge.e415), (right_dual.e425 * wedge.e3215) + (right_dual.e125 * wedge.e4235) + (right_dual.e4235 * wedge.e125) + (right_dual.e3215 * wedge.e425), (right_dual.e435 * wedge.e3215) + (right_dual.e235 * wedge.e4315) + (right_dual.e4315 * wedge.e235) + (right_dual.e3215 * wedge.e435), -(right_dual.e435 * wedge.e4125) - (right_dual.e4235 * wedge.e415) - (right_dual.e4315 * wedge.e425) - (right_dual.e4125 * wedge.e435)) + (float4(right_dual.e12345) * wedge.group3) + (float4(wedge.e12345) * right_dual.group3) - (wedge.group9.yzxx * float4(right_dual.group8.xyz.zxy, right_dual.e415)) - float4((wedge.group8.xyz.zxy * right_dual.group9.yzx), right_dual.e425 * wedge.e4315), 
            /* e41, e42, e43, 0 */
            float4((float3(right_dual.e12345) * wedge.group4.xyz) + (float3(right_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_dual.group4.xyz) + (float3(wedge.e1234) * right_dual.group6.xyz) + (right_dual.group7.xyz.zxy * wedge.group9.yzx) + (wedge.group7.xyz.zxy * right_dual.group9.yzx) - (right_dual.group7.xyz.yzx * wedge.group9.zxy) - (wedge.group7.xyz.yzx * right_dual.group9.zxy), 0.0), 
            /* e23, e31, e12, 0 */
            float4((float3(right_dual.e12345) * wedge.group5.xyz) + (float3(right_dual.e3215) * wedge.group7.xyz) + (float3(right_dual.e1234) * wedge.group8.xyz) + (float3(wedge.e12345) * right_dual.group5.xyz) + (float3(wedge.e3215) * right_dual.group7.xyz) + (float3(wedge.e1234) * right_dual.group8.xyz) - (float3(right_dual.e321) * wedge.group9.xyz) - (float3(wedge.e321) * right_dual.group9.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            (float4(right_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_dual.group6) + (right_dual.group9.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - float4((right_dual.group9.zxy * wedge.group9.yzx), right_dual.e1234 * wedge.e3215), 
            /* e423, e431, e412, 0 */
            float4((float3(right_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_dual.group7.xyz) + (float3(wedge.e1234) * right_dual.group9.xyz) - (float3(right_dual.e1234) * wedge.group9.xyz), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(right_dual.e12345) * wedge.group8.xyz) + (float3(right_dual.e3215) * wedge.group9.xyz) + (float3(wedge.e12345) * right_dual.group8.xyz) - (float3(wedge.e3215) * right_dual.group9.xyz), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            (float4(right_dual.e12345) * wedge.group9) + (float4(wedge.e12345) * right_dual.group9), 
            /* e1234, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e1234) + (right_dual.e1234 * wedge.e12345), 0.0, 0.0, 0.0)
        );
    }
}
extension Dipole: AntiRejectViaHorizonFrom<RoundPoint> {
    associatedtype Output = Dipole;
    func anti_reject_via_horizon_from(other: RoundPoint) -> Output {
        Circle wedge = Circle.from_groups(
            /* e423, e431, e412, 0 */
            float4((float3(other.e4) * this.group1.xyz) + (this.group0.xyz.yzx * other.group0.zxy) - (this.group0.xyz.zxy * other.group0.yzx), 0.0), 
            /* e415, e425, e435, e321 */
            float4((this.e41 * other.e5) + (this.e15 * other.e4), (this.e42 * other.e5) + (this.e25 * other.e4), (this.e43 * other.e5) + (this.e35 * other.e4), -(this.e31 * other.e2) - (this.e12 * other.e3)) - (this.group1.wwwx * other.group0.xyzx), 
            /* e235, e315, e125, 0 */
            float4((float3(other.e5) * this.group1.xyz) + (this.group2.xyz.zxy * other.group0.yzx) - (this.group2.xyz.yzx * other.group0.zxy), 0.0)
        );
        Sphere right_dual = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        return Dipole.from_groups(
            /* e41, e42, e43, 0 */
            float4((float3(right_dual.e1234) * wedge.group1.xyz) + (wedge.group0.xyz.zxy * right_dual.group0.yzx) - (wedge.group0.xyz.yzx * right_dual.group0.zxy), 0.0), 
            /* e23, e31, e12, e45 */
            float4((wedge.e423 * right_dual.e3215) + (wedge.e235 * right_dual.e1234), (wedge.e431 * right_dual.e3215) + (wedge.e315 * right_dual.e1234), (wedge.e412 * right_dual.e3215) + (wedge.e125 * right_dual.e1234), -(wedge.e425 * right_dual.e4315) - (wedge.e435 * right_dual.e4125)) - (wedge.group1.wwwx * right_dual.group0.xyzx), 
            /* e15, e25, e35, 0 */
            float4((float3(right_dual.e3215) * wedge.group1.xyz) + (wedge.group2.xyz.yzx * right_dual.group0.zxy) - (wedge.group2.xyz.zxy * right_dual.group0.yzx), 0.0)
        );
    }
}
extension Dipole: AntiRejectViaHorizonFrom<Scalar> {
    associatedtype Output = Dipole;
    func anti_reject_via_horizon_from(other: Scalar) -> Output {
        Dipole wedge = Dipole.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(other.scalar) * this.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(other.scalar) * this.group1, 
            /* e15, e25, e35, 0 */
            float4(float3(other.scalar) * this.group2.xyz, 0.0)
        );
        AntiScalar right_dual = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(other.scalar, 0.0, 0.0, 0.0)
        );
        return Dipole.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(right_dual.e12345) * wedge.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(right_dual.e12345) * wedge.group1, 
            /* e15, e25, e35, 0 */
            float4(float3(right_dual.e12345) * wedge.group2.xyz, 0.0)
        );
    }
}
extension Dipole: AntiRejectViaHorizonFrom<VersorEven> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: VersorEven) -> Output {
        CircleRotor wedge = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4((float3(other.e4) * this.group1.xyz) + (this.group0.xyz.yzx * other.group3.zxy) - (this.group0.xyz.zxy * other.group3.yzx), 0.0), 
            /* e415, e425, e435, e321 */
            float4((this.e41 * other.e5) + (this.e15 * other.e4), (this.e42 * other.e5) + (this.e25 * other.e4), (this.e43 * other.e5) + (this.e35 * other.e4), -(this.e31 * other.e2) - (this.e12 * other.e3)) - (this.group1.wwwx * other.group3.xyzx), 
            /* e235, e315, e125, e12345 */
            float4((this.e23 * other.e5) + (this.e35 * other.e2), (this.e31 * other.e5) + (this.e15 * other.e3), (this.e12 * other.e5) + (this.e25 * other.e1), -(this.e42 * other.e315) - (this.e43 * other.e125) - (this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435) - (this.e45 * other.e321) - (this.e15 * other.e423) - (this.e25 * other.e431) - (this.e35 * other.e412)) - float4((this.group2.xyz.yzx * other.group3.zxy), this.e41 * other.e235)
        );
        VersorOdd right_dual = VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            float4((wedge.e415 * right_dual.e1234) + (wedge.e12345 * right_dual.e41), (wedge.e425 * right_dual.e1234) + (wedge.e12345 * right_dual.e42), (wedge.e435 * right_dual.e1234) + (wedge.e12345 * right_dual.e43), -(wedge.e431 * right_dual.e25) - (wedge.e412 * right_dual.e35) - (wedge.e415 * right_dual.e23) - (wedge.e425 * right_dual.e31) - (wedge.e435 * right_dual.e12) - (wedge.e321 * right_dual.e45) - (wedge.e235 * right_dual.e41) - (wedge.e315 * right_dual.e42) - (wedge.e125 * right_dual.e43)) + float4((wedge.group0.xyz.zxy * right_dual.group3.yzx), wedge.e12345 * right_dual.scalar) - float4((wedge.group0.xyz.yzx * right_dual.group3.zxy), wedge.e423 * right_dual.e15), 
            /* e23, e31, e12, e45 */
            float4((wedge.e235 * right_dual.e1234) + (wedge.e12345 * right_dual.e23), (wedge.e315 * right_dual.e1234) + (wedge.e12345 * right_dual.e31), (wedge.e125 * right_dual.e1234) + (wedge.e12345 * right_dual.e12), -(wedge.e425 * right_dual.e4315) - (wedge.e435 * right_dual.e4125)) + float4((wedge.group0.xyz * right_dual.group3.www), wedge.e12345 * right_dual.e45) - (wedge.group1.wwwx * right_dual.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(wedge.e12345) * right_dual.group2.xyz) + (float3(right_dual.e3215) * wedge.group1.xyz) + (wedge.group2.yzx * right_dual.group3.zxy) - (wedge.group2.zxy * right_dual.group3.yzx)), wedge.e12345 * right_dual.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_dual.group3
        );
    }
}
extension Dipole: AntiRejectViaHorizonFrom<VersorOdd> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: VersorOdd) -> Output {
        DipoleInversion wedge = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(other.scalar) * this.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(other.scalar) * this.group1, 
            /* e15, e25, e35, e1234 */
            float4((float3(other.scalar) * this.group2.xyz), -(this.e41 * other.e23) - (this.e42 * other.e31) - (this.e43 * other.e12) - (this.e23 * other.e41) - (this.e31 * other.e42) - (this.e12 * other.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((this.e42 * other.e35) + (this.e23 * other.e45) + (this.e45 * other.e23) + (this.e35 * other.e42), (this.e43 * other.e15) + (this.e31 * other.e45) + (this.e45 * other.e31) + (this.e15 * other.e43), (this.e41 * other.e25) + (this.e12 * other.e45) + (this.e45 * other.e12) + (this.e25 * other.e41), -(this.e23 * other.e15) - (this.e31 * other.e25) - (this.e12 * other.e35) - (this.e35 * other.e12)) - float4((this.group0.xyz.zxy * other.group2.yzx), this.e15 * other.e23) - float4((this.group2.xyz.yzx * other.group0.zxy), this.e25 * other.e31)
        );
        VersorEven right_dual = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            (wedge.group3.yzxy * float4(right_dual.group0.zxy, right_dual.e2)) + float4(float3(0.0), (wedge.e4125 * right_dual.e3) + (wedge.e3215 * right_dual.e4) - (wedge.e42 * right_dual.e315) - (wedge.e43 * right_dual.e125) - (wedge.e23 * right_dual.e415) - (wedge.e31 * right_dual.e425) - (wedge.e12 * right_dual.e435) - (wedge.e45 * right_dual.e321) - (wedge.e15 * right_dual.e423) - (wedge.e25 * right_dual.e431) - (wedge.e35 * right_dual.e412)) + float4((wedge.group0.xyz * right_dual.group0.www), wedge.e1234 * right_dual.e5) + float4((wedge.group2.www * right_dual.group1.xyz), wedge.e4235 * right_dual.e1) - float4((wedge.group3.zxy * right_dual.group0.yzx), wedge.e41 * right_dual.e235), 
            /* e23, e31, e12, e45 */
            float4((wedge.e1234 * right_dual.e235) + (wedge.e3215 * right_dual.e423), (wedge.e1234 * right_dual.e315) + (wedge.e3215 * right_dual.e431), (wedge.e1234 * right_dual.e125) + (wedge.e3215 * right_dual.e412), -(wedge.e4315 * right_dual.e425) - (wedge.e4125 * right_dual.e435)) + (float4(right_dual.e12345) * wedge.group1) - (wedge.group3.xyzx * right_dual.group1.wwwx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(wedge.e3215) * right_dual.group1.xyz) + (float3(right_dual.e12345) * wedge.group2.xyz) + (wedge.group3.zxy * right_dual.group2.yzx) - (wedge.group3.yzx * right_dual.group2.zxy)), wedge.e1234 * right_dual.e12345), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * wedge.group3
        );
    }
}
extension DipoleInversion {
    // Fancy infix trick
    func operator/(_rhs: AntiRejectViaHorizonFromInfix) -> AntiRejectViaHorizonFromInfixPartial<DipoleInversion> {
        return AntiRejectViaHorizonFromInfixPartial { a: this };
    }
}
extension DipoleInversion: AntiRejectViaHorizonFrom<AntiCircleRotor> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: AntiCircleRotor) -> Output {
        DipoleInversion wedge = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(other.scalar) * this.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(other.scalar) * this.group1, 
            /* e15, e25, e35, e1234 */
            float4((other.group2.www * this.group2.xyz), (other.scalar * this.e1234) - (other.e41 * this.e23) - (other.e42 * this.e31) - (other.e43 * this.e12) - (other.e23 * this.e41) - (other.e31 * this.e42) - (other.e12 * this.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e23 * this.e45) + (other.e45 * this.e23) + (other.e35 * this.e42) + (other.scalar * this.e4235), (other.e31 * this.e45) + (other.e45 * this.e31) + (other.e15 * this.e43) + (other.scalar * this.e4315), (other.e12 * this.e45) + (other.e45 * this.e12) + (other.e25 * this.e41) + (other.scalar * this.e4125), -(other.e12 * this.e35) - (other.e15 * this.e23) - (other.e25 * this.e31) - (other.e35 * this.e12)) + float4((other.group0.xyz.yzx * this.group2.zxy), other.scalar * this.e3215) - (this.group2.yzxx * float4(other.group0.xyz.zxy, other.e23)) - float4((this.group0.xyz.zxy * other.group2.yzx), other.e31 * this.e25)
        );
        CircleRotor right_dual = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            float4((right_dual.e412 * wedge.e4315) + (right_dual.e415 * wedge.e1234) + (right_dual.e12345 * wedge.e41), (right_dual.e423 * wedge.e4125) + (right_dual.e425 * wedge.e1234) + (right_dual.e12345 * wedge.e42), (right_dual.e431 * wedge.e4235) + (right_dual.e435 * wedge.e1234) + (right_dual.e12345 * wedge.e43), -(right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e321 * wedge.e45) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43)) - float4((right_dual.group0.xyz.yzx * wedge.group3.zxy), right_dual.e423 * wedge.e15), 
            /* e23, e31, e12, e45 */
            float4((right_dual.e235 * wedge.e1234) + (right_dual.e12345 * wedge.e23), (right_dual.e315 * wedge.e1234) + (right_dual.e12345 * wedge.e31), (right_dual.e125 * wedge.e1234) + (right_dual.e12345 * wedge.e12), -(right_dual.e425 * wedge.e4315) - (right_dual.e435 * wedge.e4125)) + float4((right_dual.group0.xyz * wedge.group3.www), right_dual.e12345 * wedge.e45) - (right_dual.group1.wwwx * wedge.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_dual.e12345) * wedge.group2.xyz) + (float3(wedge.e3215) * right_dual.group1.xyz) + (right_dual.group2.yzx * wedge.group3.zxy) - (right_dual.group2.zxy * wedge.group3.yzx)), right_dual.e12345 * wedge.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * wedge.group3
        );
    }
}
extension DipoleInversion: AntiRejectViaHorizonFrom<AntiDipoleInversion> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: AntiDipoleInversion) -> Output {
        CircleRotor wedge = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4((float3(other.e4) * this.group1.xyz) + (this.group0.xyz.yzx * other.group3.zxy) - (this.group0.xyz.zxy * other.group3.yzx), 0.0), 
            /* e415, e425, e435, e321 */
            float4((other.e4 * this.e15) + (other.e5 * this.e41), (other.e4 * this.e25) + (other.e5 * this.e42), (other.e4 * this.e35) + (other.e5 * this.e43), -(other.e2 * this.e31) - (other.e3 * this.e12)) - (other.group3.xyzx * this.group1.wwwx), 
            /* e235, e315, e125, e12345 */
            (other.group3.wwwx * float4(this.group1.xyz, this.e4235)) + float4(float3(0.0), (other.e2 * this.e4315) + (other.e3 * this.e4125) + (other.e5 * this.e1234) - (other.e431 * this.e25) - (other.e412 * this.e35) - (other.e415 * this.e23) - (other.e425 * this.e31) - (other.e435 * this.e12) - (other.e321 * this.e45) - (other.e235 * this.e41) - (other.e315 * this.e42) - (other.e125 * this.e43)) + float4((other.group3.yzx * this.group2.zxy), other.e4 * this.e3215) - (this.group2.yzxx * float4(other.group3.zxy, other.e423))
        );
        DipoleInversion right_dual = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            float4((wedge.e412 * right_dual.e4315) + (wedge.e415 * right_dual.e1234) + (wedge.e12345 * right_dual.e41), (wedge.e423 * right_dual.e4125) + (wedge.e425 * right_dual.e1234) + (wedge.e12345 * right_dual.e42), (wedge.e431 * right_dual.e4235) + (wedge.e435 * right_dual.e1234) + (wedge.e12345 * right_dual.e43), -(wedge.e431 * right_dual.e25) - (wedge.e412 * right_dual.e35) - (wedge.e415 * right_dual.e23) - (wedge.e425 * right_dual.e31) - (wedge.e435 * right_dual.e12) - (wedge.e321 * right_dual.e45) - (wedge.e235 * right_dual.e41) - (wedge.e315 * right_dual.e42) - (wedge.e125 * right_dual.e43)) - float4((wedge.group0.xyz.yzx * right_dual.group3.zxy), wedge.e423 * right_dual.e15), 
            /* e23, e31, e12, e45 */
            float4((wedge.e235 * right_dual.e1234) + (wedge.e12345 * right_dual.e23), (wedge.e315 * right_dual.e1234) + (wedge.e12345 * right_dual.e31), (wedge.e125 * right_dual.e1234) + (wedge.e12345 * right_dual.e12), -(wedge.e425 * right_dual.e4315) - (wedge.e435 * right_dual.e4125)) + float4((wedge.group0.xyz * right_dual.group3.www), wedge.e12345 * right_dual.e45) - (wedge.group1.wwwx * right_dual.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(wedge.e12345) * right_dual.group2.xyz) + (float3(right_dual.e3215) * wedge.group1.xyz) + (wedge.group2.yzx * right_dual.group3.zxy) - (wedge.group2.zxy * right_dual.group3.yzx)), wedge.e12345 * right_dual.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_dual.group3
        );
    }
}
extension DipoleInversion: AntiRejectViaHorizonFrom<AntiDualNum> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: AntiDualNum) -> Output {
        DipoleInversion wedge = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(other.scalar) * this.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(other.scalar) * this.group1, 
            /* e15, e25, e35, e1234 */
            float4(other.scalar) * this.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar) * this.group3
        );
        DualNum right_dual = DualNum.from_groups(
            /* e5, e12345, 0, 0 */
            float4(other.group0.xy, 0.0, 0.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            float4(right_dual.group0.xy.yy, right_dual.e12345, right_dual.e5) * float4(wedge.group0.xyz, wedge.e1234), 
            /* e23, e31, e12, e45 */
            float4(right_dual.e12345) * wedge.group1, 
            /* e15, e25, e35, e1234 */
            float4(right_dual.e12345) * wedge.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * wedge.group3
        );
    }
}
extension DipoleInversion: AntiRejectViaHorizonFrom<AntiFlatPoint> {
    associatedtype Output = FlatPoint;
    func anti_reject_via_horizon_from(other: AntiFlatPoint) -> Output {
        return FlatPoint.from_groups(
            /* e15, e25, e35, e45 */
            float4(-(other.e235 * this.e41) - (other.e315 * this.e42) - (other.e125 * this.e43) - (other.e321 * this.e45)) * float4(other.group0.xyz, other.e321 * -1.0)
        );
    }
}
extension DipoleInversion: AntiRejectViaHorizonFrom<AntiFlector> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: AntiFlector) -> Output {
        CircleRotor wedge = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4((this.group0.xyz.yzx * other.group1.zxy) - (this.group0.xyz.zxy * other.group1.yzx), 0.0), 
            /* e415, e425, e435, e321 */
            float4(other.e5 * this.e41, other.e5 * this.e42, other.e5 * this.e43, -(other.e2 * this.e31) - (other.e3 * this.e12)) - (other.group1.xyzx * this.group1.wwwx), 
            /* e235, e315, e125, e12345 */
            (other.group1.yzxx * float4(this.group2.zxy, this.e4235)) + (other.group1.wwwy * float4(this.group1.xyz, this.e4315)) + float4(float3(0.0), (other.e3 * this.e4125) + (other.e5 * this.e1234) - (other.e315 * this.e42) - (other.e125 * this.e43) - (other.e321 * this.e45)) - float4((other.group1.zxy * this.group2.yzx), other.e235 * this.e41)
        );
        Flector right_dual = Flector.from_groups(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            float4(wedge.e412 * right_dual.e4315, wedge.e423 * right_dual.e4125, wedge.e431 * right_dual.e4235, -(wedge.e431 * right_dual.e25) - (wedge.e412 * right_dual.e35) - (wedge.e321 * right_dual.e45)) - float4((wedge.group0.xyz.yzx * right_dual.group1.zxy), wedge.e423 * right_dual.e15), 
            /* e23, e31, e12, e45 */
            float4(float3(0.0), -(wedge.e425 * right_dual.e4315) - (wedge.e435 * right_dual.e4125)) + float4((wedge.group0.xyz * right_dual.group1.www), wedge.e12345 * right_dual.e45) - (wedge.group1.wwwx * right_dual.group1.xyzx), 
            /* e15, e25, e35, e1234 */
            float4((float3(wedge.e12345) * right_dual.group0.xyz), 0.0) + float4((float3(right_dual.e3215) * wedge.group1.xyz), 0.0) + float4((wedge.group2.yzx * right_dual.group1.zxy), 0.0) - float4((wedge.group2.zxy * right_dual.group1.yzx), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_dual.group1
        );
    }
}
extension DipoleInversion: AntiRejectViaHorizonFrom<AntiLine> {
    associatedtype Output = Dipole;
    func anti_reject_via_horizon_from(other: AntiLine) -> Output {
        Sphere wedge = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4((other.e23 * this.e45) + (other.e35 * this.e42), (other.e31 * this.e45) + (other.e15 * this.e43), (other.e12 * this.e45) + (other.e25 * this.e41), -(other.e31 * this.e25) - (other.e12 * this.e35) - (other.e15 * this.e23) - (other.e25 * this.e31) - (other.e35 * this.e12)) - float4((other.group1.xyz.yzx * this.group0.xyz.zxy), other.e23 * this.e15), 
            /* e1234, 0, 0, 0 */
            float4(-(other.e23 * this.e41) - (other.e31 * this.e42) - (other.e12 * this.e43), 0.0, 0.0, 0.0)
        );
        Line right_dual = Line.from_groups(
            /* e415, e425, e435, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e235, e315, e125, 0 */
            float4(other.group1.xyz * float3(-1.0), 0.0)
        );
        return Dipole.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(wedge.e1234) * right_dual.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4((float3(wedge.e1234) * right_dual.group1.xyz), -(right_dual.e415 * wedge.e4235) - (right_dual.e425 * wedge.e4315) - (right_dual.e435 * wedge.e4125)), 
            /* e15, e25, e35, 0 */
            float4((float3(wedge.e3215) * right_dual.group0.xyz) + (right_dual.group1.xyz.yzx * wedge.group0.zxy) - (right_dual.group1.xyz.zxy * wedge.group0.yzx), 0.0)
        );
    }
}
extension DipoleInversion: AntiRejectViaHorizonFrom<AntiMotor> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: AntiMotor) -> Output {
        DipoleInversion wedge = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(other.scalar) * this.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(other.scalar) * this.group1, 
            /* e15, e25, e35, e1234 */
            float4((other.group0.www * this.group2.xyz), (other.scalar * this.e1234) - (other.e23 * this.e41) - (other.e31 * this.e42) - (other.e12 * this.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e23 * this.e45) + (other.scalar * this.e4235), (other.e31 * this.e45) + (other.scalar * this.e4315), (other.e12 * this.e45) + (other.scalar * this.e4125), -(other.e31 * this.e25) - (other.e12 * this.e35) - (other.e15 * this.e23) - (other.e25 * this.e31) - (other.e35 * this.e12)) + float4((this.group0.xyz.yzx * other.group1.zxy), other.scalar * this.e3215) - float4((this.group0.xyz.zxy * other.group1.yzx), other.e23 * this.e15)
        );
        Motor right_dual = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            float4(wedge.e1234 * right_dual.e415, wedge.e1234 * right_dual.e425, wedge.e1234 * right_dual.e435, -(wedge.e41 * right_dual.e235) - (wedge.e42 * right_dual.e315) - (wedge.e43 * right_dual.e125) - (wedge.e23 * right_dual.e415) - (wedge.e31 * right_dual.e425) - (wedge.e12 * right_dual.e435)) + float4((wedge.group0.xyz * right_dual.group0.www), wedge.e1234 * right_dual.e5), 
            /* e23, e31, e12, e45 */
            float4(wedge.e1234 * right_dual.e235, wedge.e1234 * right_dual.e315, wedge.e1234 * right_dual.e125, -(wedge.e4235 * right_dual.e415) - (wedge.e4315 * right_dual.e425) - (wedge.e4125 * right_dual.e435)) + (float4(right_dual.e12345) * wedge.group1), 
            /* e15, e25, e35, e1234 */
            float4(((float3(wedge.e3215) * right_dual.group0.xyz) + (float3(right_dual.e12345) * wedge.group2.xyz) + (wedge.group3.zxy * right_dual.group1.yzx) - (wedge.group3.yzx * right_dual.group1.zxy)), wedge.e1234 * right_dual.e12345), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * wedge.group3
        );
    }
}
extension DipoleInversion: AntiRejectViaHorizonFrom<AntiPlane> {
    associatedtype Output = DipoleInversion;
    func anti_reject_via_horizon_from(other: AntiPlane) -> Output {
        CircleRotor wedge = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4((this.group0.xyz.yzx * other.group0.zxy) - (this.group0.xyz.zxy * other.group0.yzx), 0.0), 
            /* e415, e425, e435, e321 */
            float4(other.e5 * this.e41, other.e5 * this.e42, other.e5 * this.e43, -(other.e2 * this.e31) - (other.e3 * this.e12)) - (other.group0.xyzx * this.group1.wwwx), 
            /* e235, e315, e125, e12345 */
            float4(other.e3 * this.e25 * -1.0, other.e1 * this.e35 * -1.0, other.e2 * this.e15 * -1.0, (other.e3 * this.e4125) + (other.e5 * this.e1234)) + (other.group0.yzxx * float4(this.group2.zxy, this.e4235)) + (other.group0.wwwy * float4(this.group1.xyz, this.e4315))
        );
        Plane right_dual = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4((wedge.group0.xyz.zxy * right_dual.group0.yzx) - (wedge.group0.xyz.yzx * right_dual.group0.zxy), 0.0), 
            /* e23, e31, e12, e45 */
            float4(wedge.e423 * right_dual.e3215, wedge.e431 * right_dual.e3215, wedge.e412 * right_dual.e3215, -(wedge.e425 * right_dual.e4315) - (wedge.e435 * right_dual.e4125)) - (wedge.group1.wwwx * right_dual.group0.xyzx), 
            /* e15, e25, e35, e1234 */
            float4((float3(right_dual.e3215) * wedge.group1.xyz), 0.0) + float4((wedge.group2.yzx * right_dual.group0.zxy), 0.0) - float4((wedge.group2.zxy * right_dual.group0.yzx), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_dual.group0
        );
    }
}
extension DipoleInversion: AntiRejectViaHorizonFrom<Circle> {
    associatedtype Output = Dipole;
    func anti_reject_via_horizon_from(other: Circle) -> Output {
        AntiScalar wedge = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(-(other.e423 * this.e15) - (other.e431 * this.e25) - (other.e412 * this.e35) - (other.e415 * this.e23) - (other.e425 * this.e31) - (other.e435 * this.e12) - (other.e321 * this.e45) - (other.e235 * this.e41) - (other.e315 * this.e42) - (other.e125 * this.e43), 0.0, 0.0, 0.0)
        );
        Dipole right_dual = Dipole.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, 0 */
            float4(other.group2.xyz, 0.0)
        );
        return Dipole.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(wedge.e12345) * right_dual.group1, 
            /* e15, e25, e35, 0 */
            float4(float3(wedge.e12345) * right_dual.group2.xyz, 0.0)
        );
    }
}
extension DipoleInversion: AntiRejectViaHorizonFrom<CircleRotor> {
    associatedtype Output = AntiCircleRotor;
    func anti_reject_via_horizon_from(other: CircleRotor) -> Output {
        AntiScalar wedge = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(-(other.e423 * this.e15) - (other.e431 * this.e25) - (other.e412 * this.e35) - (other.e415 * this.e23) - (other.e425 * this.e31) - (other.e435 * this.e12) - (other.e321 * this.e45) - (other.e235 * this.e41) - (other.e315 * this.e42) - (other.e125 * this.e43), 0.0, 0.0, 0.0)
        );
        AntiCircleRotor right_dual = AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(wedge.e12345) * right_dual.group1, 
            /* e15, e25, e35, scalar */
            float4(wedge.e12345) * right_dual.group2
        );
    }
}
extension DipoleInversion: AntiRejectViaHorizonFrom<Dipole> {
    associatedtype Output = Dipole;
    func anti_reject_via_horizon_from(other: Dipole) -> Output {
        Sphere wedge = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4((other.e42 * this.e35) + (other.e23 * this.e45) + (other.e45 * this.e23) + (other.e35 * this.e42), (other.e43 * this.e15) + (other.e31 * this.e45) + (other.e45 * this.e31) + (other.e15 * this.e43), (other.e41 * this.e25) + (other.e12 * this.e45) + (other.e45 * this.e12) + (other.e25 * this.e41), -(other.e23 * this.e15) - (other.e31 * this.e25) - (other.e12 * this.e35) - (other.e35 * this.e12)) - float4((other.group0.xyz.zxy * this.group2.yzx), other.e15 * this.e23) - float4((other.group2.xyz.yzx * this.group0.xyz.zxy), other.e25 * this.e31), 
            /* e1234, 0, 0, 0 */
            float4(-(other.e41 * this.e23) - (other.e42 * this.e31) - (other.e43 * this.e12) - (other.e23 * this.e41) - (other.e31 * this.e42) - (other.e12 * this.e43), 0.0, 0.0, 0.0)
        );
        Circle right_dual = Circle.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, 0 */
            float4(other.group2.xyz * float3(-1.0), 0.0)
        );
        return Dipole.from_groups(
            /* e41, e42, e43, 0 */
            float4((float3(wedge.e1234) * right_dual.group1.xyz) + (right_dual.group0.xyz.zxy * wedge.group0.yzx) - (right_dual.group0.xyz.yzx * wedge.group0.zxy), 0.0), 
            /* e23, e31, e12, e45 */
            float4((right_dual.e423 * wedge.e3215) + (right_dual.e235 * wedge.e1234), (right_dual.e431 * wedge.e3215) + (right_dual.e315 * wedge.e1234), (right_dual.e412 * wedge.e3215) + (right_dual.e125 * wedge.e1234), -(right_dual.e425 * wedge.e4315) - (right_dual.e435 * wedge.e4125)) - (right_dual.group1.wwwx * wedge.group0.xyzx), 
            /* e15, e25, e35, 0 */
            float4((float3(wedge.e3215) * right_dual.group1.xyz) + (right_dual.group2.xyz.yzx * wedge.group0.zxy) - (right_dual.group2.xyz.zxy * wedge.group0.yzx), 0.0)
        );
    }
}
extension DipoleInversion: AntiRejectViaHorizonFrom<DipoleInversion> {
    associatedtype Output = AntiCircleRotor;
    func anti_reject_via_horizon_from(other: DipoleInversion) -> Output {
        Sphere wedge = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4((other.e42 * this.e35) + (other.e23 * this.e45) + (other.e45 * this.e23) + (other.e35 * this.e42), (other.e43 * this.e15) + (other.e31 * this.e45) + (other.e45 * this.e31) + (other.e15 * this.e43), (other.e41 * this.e25) + (other.e12 * this.e45) + (other.e45 * this.e12) + (other.e25 * this.e41), -(other.e12 * this.e35) - (other.e15 * this.e23) - (other.e25 * this.e31) - (other.e35 * this.e12)) - (this.group2.yzxx * float4(other.group0.xyz.zxy, other.e23)) - float4((this.group0.xyz.zxy * other.group2.yzx), other.e31 * this.e25), 
            /* e1234, 0, 0, 0 */
            float4(-(other.e41 * this.e23) - (other.e42 * this.e31) - (other.e43 * this.e12) - (other.e23 * this.e41) - (other.e31 * this.e42) - (other.e12 * this.e43), 0.0, 0.0, 0.0)
        );
        AntiDipoleInversion right_dual = AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4((float3(wedge.e1234) * right_dual.group1.xyz) + (right_dual.group0.xyz.zxy * wedge.group0.yzx) - (right_dual.group0.xyz.yzx * wedge.group0.zxy), 0.0), 
            /* e23, e31, e12, e45 */
            float4((right_dual.e423 * wedge.e3215) + (right_dual.e235 * wedge.e1234), (right_dual.e431 * wedge.e3215) + (right_dual.e315 * wedge.e1234), (right_dual.e412 * wedge.e3215) + (right_dual.e125 * wedge.e1234), -(right_dual.e425 * wedge.e4315) - (right_dual.e435 * wedge.e4125)) - (right_dual.group1.wwwx * wedge.group0.xyzx), 
            /* e15, e25, e35, scalar */
            float4(right_dual.e125 * wedge.e4315 * -1.0, right_dual.e235 * wedge.e4125 * -1.0, right_dual.e315 * wedge.e4235 * -1.0, (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) + (right_dual.e5 * wedge.e1234)) + (float4(wedge.e3215) * float4(right_dual.group1.xyz, right_dual.e4)) + (wedge.group0.zxyx * float4(right_dual.group2.yzx, right_dual.e1))
        );
    }
}
extension DipoleInversion: AntiRejectViaHorizonFrom<DualNum> {
    associatedtype Output = AntiMotor;
    func anti_reject_via_horizon_from(other: DualNum) -> Output {
        Motor wedge = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4(other.e5) * float4(this.group0.xyz, this.e1234), 
            /* e235, e315, e125, e5 */
            float4(other.group0.xy.xx, other.e5, 0.0) * float4(float3(1.0), 0.0) * float4(this.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        AntiDualNum right_dual = AntiDualNum.from_groups(
            /* e3215, scalar, 0, 0 */
            float4(other.group0.xy * float2(-1.0), 0.0, 0.0)
        );
        return AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            float4(float3(0.0), right_dual.scalar * wedge.e12345), 
            /* e15, e25, e35, e3215 */
            float4(right_dual.e3215) * wedge.group0
        );
    }
}
extension DipoleInversion: AntiRejectViaHorizonFrom<FlatPoint> {
    associatedtype Output = AntiLine;
    func anti_reject_via_horizon_from(other: FlatPoint) -> Output {
        Plane wedge = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4((this.e42 * other.e35) + (this.e23 * other.e45), (this.e43 * other.e15) + (this.e31 * other.e45), (this.e41 * other.e25) + (this.e12 * other.e45), -(this.e31 * other.e25) - (this.e12 * other.e35)) - (other.group0.yzxx * float4(this.group0.xyz.zxy, this.e23))
        );
        AntiFlatPoint right_dual = AntiFlatPoint.from_groups(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiLine.from_groups(
            /* e23, e31, e12, 0 */
            float4(float3(right_dual.e321) * wedge.group0.xyz * float3(-1.0), 0.0), 
            /* e15, e25, e35, 0 */
            float4((right_dual.group0.yzx * wedge.group0.zxy) - (right_dual.group0.zxy * wedge.group0.yzx), 0.0)
        );
    }
}
extension DipoleInversion: AntiRejectViaHorizonFrom<Flector> {
    associatedtype Output = AntiMotor;
    func anti_reject_via_horizon_from(other: Flector) -> Output {
        Plane wedge = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4((this.e42 * other.e35) + (this.e23 * other.e45), (this.e43 * other.e15) + (this.e31 * other.e45), (this.e41 * other.e25) + (this.e12 * other.e45), -(this.e31 * other.e25) - (this.e12 * other.e35)) - (other.group0.yzxx * float4(this.group0.xyz.zxy, this.e23))
        );
        AntiFlector right_dual = AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            float4((right_dual.group0.www * wedge.group0.xyz * float3(-1.0)), (right_dual.e1 * wedge.e4235) + (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125)), 
            /* e15, e25, e35, e3215 */
            float4(((right_dual.group0.yzx * wedge.group0.zxy) - (right_dual.group0.zxy * wedge.group0.yzx)), 0.0)
        );
    }
}
extension DipoleInversion: AntiRejectViaHorizonFrom<Line> {
    associatedtype Output = AntiLine;
    func anti_reject_via_horizon_from(other: Line) -> Output {
        AntiScalar wedge = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(-(this.e41 * other.e235) - (this.e42 * other.e315) - (this.e43 * other.e125) - (this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435), 0.0, 0.0, 0.0)
        );
        AntiLine right_dual = AntiLine.from_groups(
            /* e23, e31, e12, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e15, e25, e35, 0 */
            float4(other.group1.xyz, 0.0)
        );
        return AntiLine.from_groups(
            /* e23, e31, e12, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e15, e25, e35, 0 */
            float4(float3(wedge.e12345) * right_dual.group1.xyz, 0.0)
        );
    }
}
extension DipoleInversion: AntiRejectViaHorizonFrom<Motor> {
    associatedtype Output = AntiMotor;
    func anti_reject_via_horizon_from(other: Motor) -> Output {
        Motor wedge = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4((float3(other.e5) * this.group0.xyz), (this.e1234 * other.e5) - (this.e41 * other.e235) - (this.e42 * other.e315) - (this.e43 * other.e125) - (this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435)), 
            /* e235, e315, e125, e5 */
            float4(float3(1.0), 0.0) * float4(other.group1.www, 0.0) * float4(this.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        AntiMotor right_dual = AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            float4((float3(wedge.e12345) * right_dual.group0.xyz), (right_dual.scalar * wedge.e12345) - (right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435)), 
            /* e15, e25, e35, e3215 */
            float4(((float3(right_dual.e3215) * wedge.group0.xyz) + (float3(wedge.e12345) * right_dual.group1.xyz)), right_dual.e3215 * wedge.e12345)
        );
    }
}
extension DipoleInversion: AntiRejectViaHorizonFrom<MultiVector> {
    associatedtype Output = MultiVector;
    func anti_reject_via_horizon_from(other: MultiVector) -> Output {
        MultiVector wedge = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(0.0, (this.e1234 * other.e5) + (this.e4235 * other.e1) + (this.e4315 * other.e2) + (this.e4125 * other.e3) + (this.e3215 * other.e4) - (this.e41 * other.e235) - (this.e42 * other.e315) - (this.e43 * other.e125) - (this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435) - (this.e45 * other.e321) - (this.e15 * other.e423) - (this.e25 * other.e431) - (this.e35 * other.e412)), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5, 0, 0, 0 */
            float4(0.0), 
            /* e15, e25, e35, e45 */
            float4(other.scalar) * float4(this.group2.xyz, this.e45), 
            /* e41, e42, e43, 0 */
            float4(float3(other.scalar) * this.group0.xyz, 0.0), 
            /* e23, e31, e12, 0 */
            float4(float3(other.scalar) * this.group1.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4((this.e41 * other.e5) + (this.e15 * other.e4), (this.e42 * other.e5) + (this.e25 * other.e4), (this.e43 * other.e5) + (this.e35 * other.e4), -(this.e31 * other.e2) - (this.e12 * other.e3)) - (this.group1.wwwx * other.group1.xyzx), 
            /* e423, e431, e412, 0 */
            float4((float3(other.e4) * this.group1.xyz) + (this.group0.xyz.yzx * other.group1.zxy) - (this.group0.xyz.zxy * other.group1.yzx), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(other.e5) * this.group1.xyz) + (this.group2.zxy * other.group1.yzx) - (this.group2.yzx * other.group1.zxy), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4((this.e42 * other.e35) + (this.e23 * other.e45) + (this.e45 * other.e23) + (this.e35 * other.e42), (this.e43 * other.e15) + (this.e31 * other.e45) + (this.e45 * other.e31) + (this.e15 * other.e43), (this.e41 * other.e25) + (this.e12 * other.e45) + (this.e45 * other.e12) + (this.e25 * other.e41), -(this.e23 * other.e15) - (this.e31 * other.e25) - (this.e12 * other.e35) - (this.e35 * other.e12)) + (float4(other.scalar) * this.group3) - (this.group2.yzxy * float4(other.group4.xyz.zxy, other.e31)) - float4((this.group0.xyz.zxy * other.group3.yzx), this.e15 * other.e23), 
            /* e1234, 0, 0, 0 */
            float4((this.e1234 * other.scalar) - (this.e41 * other.e23) - (this.e42 * other.e31) - (this.e43 * other.e12) - (this.e23 * other.e41) - (this.e31 * other.e42) - (this.e12 * other.e43), 0.0, 0.0, 0.0)
        );
        MultiVector right_dual = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(other.group0.xy.yx * float2(-1.0, 1.0), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5, 0, 0, 0 */
            float4(other.e3215, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43, 0 */
            float4(other.group7.xyz, 0.0), 
            /* e23, e31, e12, 0 */
            float4(other.group6.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412, 0 */
            float4(other.group4.xyz * float3(-1.0), 0.0), 
            /* e235, e315, e125, 0 */
            float4(other.group3.xyz * float3(-1.0), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        return MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2((right_dual.scalar * wedge.e12345) + (right_dual.e12345 * wedge.scalar) + (right_dual.e1 * wedge.e4235) + (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) + (right_dual.e4 * wedge.e3215) + (right_dual.e5 * wedge.e1234) + (right_dual.e4235 * wedge.e1) + (right_dual.e4315 * wedge.e2) + (right_dual.e4125 * wedge.e3) + (right_dual.e3215 * wedge.e4) + (right_dual.e1234 * wedge.e5) - (right_dual.e15 * wedge.e423) - (right_dual.e25 * wedge.e431) - (right_dual.e35 * wedge.e412) - (right_dual.e45 * wedge.e321) - (right_dual.e41 * wedge.e235) - (right_dual.e42 * wedge.e315) - (right_dual.e43 * wedge.e125) - (right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e321 * wedge.e45) - (right_dual.e423 * wedge.e15) - (right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43), right_dual.e12345 * wedge.e12345), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e15 * wedge.e1234) + (right_dual.e415 * wedge.e321) + (right_dual.e321 * wedge.e415) + (right_dual.e4125 * wedge.e31), (right_dual.e25 * wedge.e1234) + (right_dual.e425 * wedge.e321) + (right_dual.e321 * wedge.e425) + (right_dual.e4235 * wedge.e12), (right_dual.e35 * wedge.e1234) + (right_dual.e435 * wedge.e321) + (right_dual.e321 * wedge.e435) + (right_dual.e4315 * wedge.e23), -(right_dual.e415 * wedge.e423) - (right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412) - (right_dual.e1234 * wedge.e45)) + (float4(right_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_dual.group1) + (wedge.group9.yzxx * float4(right_dual.group5.xyz.zxy, right_dual.e41)) + float4((wedge.group4.xyz * right_dual.group9.www), right_dual.e45 * wedge.e1234) + float4((right_dual.group7.xyz.zxy * wedge.group8.xyz.yzx), right_dual.e42 * wedge.e4315) + float4((right_dual.group8.xyz.yzx * wedge.group7.xyz.zxy), right_dual.e43 * wedge.e4125) - (right_dual.group9.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((float3(right_dual.e1234) * wedge.group3.xyz), right_dual.e4125 * wedge.e43) - float4((right_dual.group4.xyz * wedge.group9.www), right_dual.e423 * wedge.e415) - float4((right_dual.group5.xyz.yzx * wedge.group9.zxy), right_dual.e431 * wedge.e425) - float4((right_dual.group7.xyz.yzx * wedge.group8.xyz.zxy), right_dual.e412 * wedge.e435) - float4((right_dual.group8.xyz.zxy * wedge.group7.xyz.yzx), right_dual.e4235 * wedge.e41), 
            /* e5, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e5) + (right_dual.e5 * wedge.e12345) + (right_dual.e4235 * wedge.e15) + (right_dual.e4315 * wedge.e25) + (right_dual.e4125 * wedge.e35) + (right_dual.e3215 * wedge.e45) - (right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125) - (right_dual.e45 * wedge.e3215) - (right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435), 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4((right_dual.e415 * wedge.e3215) + (right_dual.e315 * wedge.e4125) + (right_dual.e4125 * wedge.e315) + (right_dual.e3215 * wedge.e415), (right_dual.e425 * wedge.e3215) + (right_dual.e125 * wedge.e4235) + (right_dual.e4235 * wedge.e125) + (right_dual.e3215 * wedge.e425), (right_dual.e435 * wedge.e3215) + (right_dual.e235 * wedge.e4315) + (right_dual.e4315 * wedge.e235) + (right_dual.e3215 * wedge.e435), -(right_dual.e435 * wedge.e4125) - (right_dual.e4235 * wedge.e415) - (right_dual.e4315 * wedge.e425) - (right_dual.e4125 * wedge.e435)) + (float4(right_dual.e12345) * wedge.group3) + (float4(wedge.e12345) * right_dual.group3) - (wedge.group9.yzxx * float4(right_dual.group8.xyz.zxy, right_dual.e415)) - float4((wedge.group8.xyz.zxy * right_dual.group9.yzx), right_dual.e425 * wedge.e4315), 
            /* e41, e42, e43, 0 */
            float4((float3(right_dual.e12345) * wedge.group4.xyz) + (float3(right_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_dual.group4.xyz) + (float3(wedge.e1234) * right_dual.group6.xyz) + (right_dual.group7.xyz.zxy * wedge.group9.yzx) + (wedge.group7.xyz.zxy * right_dual.group9.yzx) - (right_dual.group7.xyz.yzx * wedge.group9.zxy) - (wedge.group7.xyz.yzx * right_dual.group9.zxy), 0.0), 
            /* e23, e31, e12, 0 */
            float4((float3(right_dual.e12345) * wedge.group5.xyz) + (float3(right_dual.e3215) * wedge.group7.xyz) + (float3(right_dual.e1234) * wedge.group8.xyz) + (float3(wedge.e12345) * right_dual.group5.xyz) + (float3(wedge.e3215) * right_dual.group7.xyz) + (float3(wedge.e1234) * right_dual.group8.xyz) - (float3(right_dual.e321) * wedge.group9.xyz) - (float3(wedge.e321) * right_dual.group9.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            (float4(right_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_dual.group6) + (right_dual.group9.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - float4((right_dual.group9.zxy * wedge.group9.yzx), right_dual.e1234 * wedge.e3215), 
            /* e423, e431, e412, 0 */
            float4((float3(right_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_dual.group7.xyz) + (float3(wedge.e1234) * right_dual.group9.xyz) - (float3(right_dual.e1234) * wedge.group9.xyz), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(right_dual.e12345) * wedge.group8.xyz) + (float3(right_dual.e3215) * wedge.group9.xyz) + (float3(wedge.e12345) * right_dual.group8.xyz) - (float3(wedge.e3215) * right_dual.group9.xyz), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            (float4(right_dual.e12345) * wedge.group9) + (float4(wedge.e12345) * right_dual.group9), 
            /* e1234, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e1234) + (right_dual.e1234 * wedge.e12345), 0.0, 0.0, 0.0)
        );
    }
}
extension DipoleInversion: AntiRejectViaHorizonFrom<RoundPoint> {
    associatedtype Output = DipoleInversion;
    func anti_reject_via_horizon_from(other: RoundPoint) -> Output {
        CircleRotor wedge = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4((float3(other.e4) * this.group1.xyz) + (this.group0.xyz.yzx * other.group0.zxy) - (this.group0.xyz.zxy * other.group0.yzx), 0.0), 
            /* e415, e425, e435, e321 */
            float4((this.e41 * other.e5) + (this.e15 * other.e4), (this.e42 * other.e5) + (this.e25 * other.e4), (this.e43 * other.e5) + (this.e35 * other.e4), -(this.e31 * other.e2) - (this.e12 * other.e3)) - (this.group1.wwwx * other.group0.xyzx), 
            /* e235, e315, e125, e12345 */
            float4(this.e25 * other.e3 * -1.0, this.e35 * other.e1 * -1.0, this.e15 * other.e2 * -1.0, (this.e4315 * other.e2) + (this.e4125 * other.e3) + (this.e3215 * other.e4)) + (float4(other.e5) * float4(this.group1.xyz, this.e1234)) + (other.group0.yzxx * float4(this.group2.zxy, this.e4235))
        );
        Sphere right_dual = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        return DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4((float3(right_dual.e1234) * wedge.group1.xyz) + (wedge.group0.xyz.zxy * right_dual.group0.yzx) - (wedge.group0.xyz.yzx * right_dual.group0.zxy), 0.0), 
            /* e23, e31, e12, e45 */
            float4((wedge.e423 * right_dual.e3215) + (wedge.e235 * right_dual.e1234), (wedge.e431 * right_dual.e3215) + (wedge.e315 * right_dual.e1234), (wedge.e412 * right_dual.e3215) + (wedge.e125 * right_dual.e1234), -(wedge.e425 * right_dual.e4315) - (wedge.e435 * right_dual.e4125)) - (wedge.group1.wwwx * right_dual.group0.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_dual.e3215) * wedge.group1.xyz) + (wedge.group2.yzx * right_dual.group0.zxy) - (wedge.group2.zxy * right_dual.group0.yzx)), wedge.e12345 * right_dual.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_dual.group0
        );
    }
}
extension DipoleInversion: AntiRejectViaHorizonFrom<Scalar> {
    associatedtype Output = DipoleInversion;
    func anti_reject_via_horizon_from(other: Scalar) -> Output {
        DipoleInversion wedge = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(other.scalar) * this.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(other.scalar) * this.group1, 
            /* e15, e25, e35, e1234 */
            float4(other.scalar) * this.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar) * this.group3
        );
        AntiScalar right_dual = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(other.scalar, 0.0, 0.0, 0.0)
        );
        return DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(right_dual.e12345) * wedge.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(right_dual.e12345) * wedge.group1, 
            /* e15, e25, e35, e1234 */
            float4(right_dual.e12345) * wedge.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * wedge.group3
        );
    }
}
extension DipoleInversion: AntiRejectViaHorizonFrom<VersorEven> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: VersorEven) -> Output {
        CircleRotor wedge = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4((float3(other.e4) * this.group1.xyz) + (this.group0.xyz.yzx * other.group3.zxy) - (this.group0.xyz.zxy * other.group3.yzx), 0.0), 
            /* e415, e425, e435, e321 */
            float4((this.e41 * other.e5) + (this.e15 * other.e4), (this.e42 * other.e5) + (this.e25 * other.e4), (this.e43 * other.e5) + (this.e35 * other.e4), -(this.e31 * other.e2) - (this.e12 * other.e3)) - (this.group1.wwwx * other.group3.xyzx), 
            /* e235, e315, e125, e12345 */
            (float4(other.e5) * float4(this.group1.xyz, this.e1234)) + (other.group3.yzxx * float4(this.group2.zxy, this.e4235)) + float4(float3(0.0), (this.e4315 * other.e2) + (this.e4125 * other.e3) + (this.e3215 * other.e4) - (this.e42 * other.e315) - (this.e43 * other.e125) - (this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435) - (this.e45 * other.e321) - (this.e15 * other.e423) - (this.e25 * other.e431) - (this.e35 * other.e412)) - float4((this.group2.yzx * other.group3.zxy), this.e41 * other.e235)
        );
        VersorOdd right_dual = VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            float4((wedge.e415 * right_dual.e1234) + (wedge.e12345 * right_dual.e41), (wedge.e425 * right_dual.e1234) + (wedge.e12345 * right_dual.e42), (wedge.e435 * right_dual.e1234) + (wedge.e12345 * right_dual.e43), -(wedge.e431 * right_dual.e25) - (wedge.e412 * right_dual.e35) - (wedge.e415 * right_dual.e23) - (wedge.e425 * right_dual.e31) - (wedge.e435 * right_dual.e12) - (wedge.e321 * right_dual.e45) - (wedge.e235 * right_dual.e41) - (wedge.e315 * right_dual.e42) - (wedge.e125 * right_dual.e43)) + float4((wedge.group0.xyz.zxy * right_dual.group3.yzx), wedge.e12345 * right_dual.scalar) - float4((wedge.group0.xyz.yzx * right_dual.group3.zxy), wedge.e423 * right_dual.e15), 
            /* e23, e31, e12, e45 */
            float4((wedge.e235 * right_dual.e1234) + (wedge.e12345 * right_dual.e23), (wedge.e315 * right_dual.e1234) + (wedge.e12345 * right_dual.e31), (wedge.e125 * right_dual.e1234) + (wedge.e12345 * right_dual.e12), -(wedge.e425 * right_dual.e4315) - (wedge.e435 * right_dual.e4125)) + float4((wedge.group0.xyz * right_dual.group3.www), wedge.e12345 * right_dual.e45) - (wedge.group1.wwwx * right_dual.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(wedge.e12345) * right_dual.group2.xyz) + (float3(right_dual.e3215) * wedge.group1.xyz) + (wedge.group2.yzx * right_dual.group3.zxy) - (wedge.group2.zxy * right_dual.group3.yzx)), wedge.e12345 * right_dual.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_dual.group3
        );
    }
}
extension DipoleInversion: AntiRejectViaHorizonFrom<VersorOdd> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: VersorOdd) -> Output {
        DipoleInversion wedge = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(other.scalar) * this.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(other.scalar) * this.group1, 
            /* e15, e25, e35, e1234 */
            float4((float3(other.scalar) * this.group2.xyz), (this.e1234 * other.scalar) - (this.e41 * other.e23) - (this.e42 * other.e31) - (this.e43 * other.e12) - (this.e23 * other.e41) - (this.e31 * other.e42) - (this.e12 * other.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((this.e23 * other.e45) + (this.e45 * other.e23) + (this.e35 * other.e42) + (this.e4235 * other.scalar), (this.e31 * other.e45) + (this.e45 * other.e31) + (this.e15 * other.e43) + (this.e4315 * other.scalar), (this.e12 * other.e45) + (this.e45 * other.e12) + (this.e25 * other.e41) + (this.e4125 * other.scalar), -(this.e12 * other.e35) - (this.e15 * other.e23) - (this.e25 * other.e31) - (this.e35 * other.e12)) + float4((this.group0.xyz.yzx * other.group2.zxy), this.e3215 * other.scalar) - (other.group2.yzxx * float4(this.group0.xyz.zxy, this.e23)) - float4((this.group2.yzx * other.group0.zxy), this.e31 * other.e25)
        );
        VersorEven right_dual = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            (wedge.group3.yzxy * float4(right_dual.group0.zxy, right_dual.e2)) + float4(float3(0.0), (wedge.e4125 * right_dual.e3) + (wedge.e3215 * right_dual.e4) - (wedge.e42 * right_dual.e315) - (wedge.e43 * right_dual.e125) - (wedge.e23 * right_dual.e415) - (wedge.e31 * right_dual.e425) - (wedge.e12 * right_dual.e435) - (wedge.e45 * right_dual.e321) - (wedge.e15 * right_dual.e423) - (wedge.e25 * right_dual.e431) - (wedge.e35 * right_dual.e412)) + float4((wedge.group0.xyz * right_dual.group0.www), wedge.e1234 * right_dual.e5) + float4((wedge.group2.www * right_dual.group1.xyz), wedge.e4235 * right_dual.e1) - float4((wedge.group3.zxy * right_dual.group0.yzx), wedge.e41 * right_dual.e235), 
            /* e23, e31, e12, e45 */
            float4((wedge.e1234 * right_dual.e235) + (wedge.e3215 * right_dual.e423), (wedge.e1234 * right_dual.e315) + (wedge.e3215 * right_dual.e431), (wedge.e1234 * right_dual.e125) + (wedge.e3215 * right_dual.e412), -(wedge.e4315 * right_dual.e425) - (wedge.e4125 * right_dual.e435)) + (float4(right_dual.e12345) * wedge.group1) - (wedge.group3.xyzx * right_dual.group1.wwwx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(wedge.e3215) * right_dual.group1.xyz) + (float3(right_dual.e12345) * wedge.group2.xyz) + (wedge.group3.zxy * right_dual.group2.yzx) - (wedge.group3.yzx * right_dual.group2.zxy)), wedge.e1234 * right_dual.e12345), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * wedge.group3
        );
    }
}
extension DualNum {
    // Fancy infix trick
    func operator/(_rhs: AntiRejectViaHorizonFromInfix) -> AntiRejectViaHorizonFromInfixPartial<DualNum> {
        return AntiRejectViaHorizonFromInfixPartial { a: this };
    }
}
extension DualNum: AntiRejectViaHorizonFrom<AntiCircleRotor> {
    associatedtype Output = VersorEven;
    func anti_reject_via_horizon_from(other: AntiCircleRotor) -> Output {
        Motor wedge = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4(this.group0.xy.xx, this.e5, this.e12345) * float4(other.group0.xyz, other.scalar), 
            /* e235, e315, e125, e5 */
            float4(this.e5) * float4(other.group1.xyz, other.scalar)
        );
        CircleRotor right_dual = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4(wedge.e12345) * float4(right_dual.group0.xyz, right_dual.e12345), 
            /* e415, e425, e435, e321 */
            float4(((float3(right_dual.e12345) * wedge.group0.xyz) + (float3(wedge.e12345) * right_dual.group1.xyz)), right_dual.e321 * wedge.e12345), 
            /* e235, e315, e125, e5 */
            float4(right_dual.e12345 * wedge.e235, right_dual.e12345 * wedge.e315, right_dual.e12345 * wedge.e125, -(right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435)) + (right_dual.group2 * float4(wedge.group0.www, wedge.e5)), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e412 * wedge.e315) + (right_dual.e321 * wedge.e415), (right_dual.e423 * wedge.e125) + (right_dual.e321 * wedge.e425), (right_dual.e431 * wedge.e235) + (right_dual.e321 * wedge.e435), -(right_dual.e431 * wedge.e425) - (right_dual.e412 * wedge.e435)) - float4((right_dual.group0.xyz.yzx * wedge.group1.zxy), right_dual.e423 * wedge.e415)
        );
    }
}
extension DualNum: AntiRejectViaHorizonFrom<AntiDipoleInversion> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: AntiDipoleInversion) -> Output {
        Flector wedge = Flector.from_groups(
            /* e15, e25, e35, e45 */
            float4(this.e5) * float4(other.group3.xyz, other.e4) * float4(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e5) * float4(other.group0.xyz, other.e321) * float4(-1.0)
        );
        DipoleInversion right_dual = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(right_dual.e1234) * wedge.group1.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            float4(((right_dual.group3.yzx * wedge.group1.zxy) - (right_dual.group3.zxy * wedge.group1.yzx)), right_dual.e1234 * wedge.e3215 * -1.0), 
            /* e235, e315, e125, e4 */
            (wedge.group1.xyzx * float4(right_dual.group3.www, right_dual.e41)) + float4(float3(0.0), (right_dual.e42 * wedge.e4315) + (right_dual.e43 * wedge.e4125)) - float4((wedge.group1.www * right_dual.group3.xyz), right_dual.e1234 * wedge.e45), 
            /* e1, e2, e3, e5 */
            float4(float3(0.0), (right_dual.e4315 * wedge.e25) + (right_dual.e4125 * wedge.e35) + (right_dual.e3215 * wedge.e45) - (right_dual.e35 * wedge.e4125)) + float4((right_dual.group1.zxy * wedge.group1.yzx), right_dual.e4235 * wedge.e15) - (float4(wedge.e3215) * float4(right_dual.group0.xyz, right_dual.e45)) - (right_dual.group2.wwwy * float4(wedge.group0.xyz, wedge.e4315)) - (wedge.group1.zxyx * float4(right_dual.group1.yzx, right_dual.e15))
        );
    }
}
extension DualNum: AntiRejectViaHorizonFrom<AntiDualNum> {
    associatedtype Output = DualNum;
    func anti_reject_via_horizon_from(other: AntiDualNum) -> Output {
        DualNum wedge = DualNum.from_groups(
            /* e5, e12345, 0, 0 */
            float4(float2(other.scalar) * this.group0.xy, 0.0, 0.0)
        );
        DualNum right_dual = DualNum.from_groups(
            /* e5, e12345, 0, 0 */
            float4(other.group0.xy, 0.0, 0.0)
        );
        return DualNum.from_groups(
            /* e5, e12345, 0, 0 */
            float4(float2((right_dual.e5 * wedge.e12345) + (right_dual.e12345 * wedge.e5), right_dual.e12345 * wedge.e12345), 0.0, 0.0)
        );
    }
}
extension DualNum: AntiRejectViaHorizonFrom<AntiFlatPoint> {
    associatedtype Output = DualNum;
    func anti_reject_via_horizon_from(other: AntiFlatPoint) -> Output {
        return DualNum.from_groups(
            /* e5, e12345, 0, 0 */
            float4(float2(float4(other.group0.xyz, other.e321 * -1.0)[3] * other.e321 * this.e5 * -1.0, 1.0) * float2(-1.0, 0.0), 0.0, 0.0)
        );
    }
}
extension DualNum: AntiRejectViaHorizonFrom<AntiFlector> {
    associatedtype Output = Motor;
    func anti_reject_via_horizon_from(other: AntiFlector) -> Output {
        Flector wedge = Flector.from_groups(
            /* e15, e25, e35, e45 */
            float4(this.group0.xy.xx, this.e5, 0.0) * float4(float3(1.0), 0.0) * float4(other.group1.xyz, 0.0) * float4(-1.0, -1.0, -1.0, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(float3(0.0), other.e321 * this.e5 * -1.0)
        );
        Flector right_dual = Flector.from_groups(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4(((right_dual.group1.yzx * wedge.group1.zxy) - (right_dual.group1.zxy * wedge.group1.yzx)), 0.0), 
            /* e235, e315, e125, e5 */
            (right_dual.group1.wwwx * float4(wedge.group1.xyz, wedge.e15)) + float4(float3(0.0), (right_dual.e4315 * wedge.e25) + (right_dual.e4125 * wedge.e35) + (right_dual.e3215 * wedge.e45) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125) - (right_dual.e45 * wedge.e3215)) - (wedge.group1.wwwx * float4(right_dual.group1.xyz, right_dual.e15))
        );
    }
}
extension DualNum: AntiRejectViaHorizonFrom<AntiLine> {
    associatedtype Output = DualNum;
    func anti_reject_via_horizon_from(other: AntiLine) -> Output {
        AntiFlatPoint wedge = AntiFlatPoint.from_groups(
            /* e235, e315, e125, e321 */
            float4(this.group0.xy.xx, this.e5, 0.0) * float4(float3(1.0), 0.0) * float4(other.group0.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        Line right_dual = Line.from_groups(
            /* e415, e425, e435, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e235, e315, e125, 0 */
            float4(other.group1.xyz * float3(-1.0), 0.0)
        );
        return DualNum.from_groups(
            /* e5, e12345, 0, 0 */
            float4(float2(-(wedge.e235 * right_dual.e415) - (wedge.e315 * right_dual.e425) - (wedge.e125 * right_dual.e435), 0.0), 0.0, 0.0)
        );
    }
}
extension DualNum: AntiRejectViaHorizonFrom<AntiMotor> {
    associatedtype Output = Motor;
    func anti_reject_via_horizon_from(other: AntiMotor) -> Output {
        Motor wedge = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4(float3(0.0), other.scalar * this.e12345), 
            /* e235, e315, e125, e5 */
            float4(this.e5) * other.group0
        );
        Motor right_dual = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4(((float3(right_dual.e12345) * wedge.group0.xyz) + (float3(wedge.e12345) * right_dual.group0.xyz)), right_dual.e12345 * wedge.e12345), 
            /* e235, e315, e125, e5 */
            (float4(right_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_dual.group1) + float4(float3(0.0), -(right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435))
        );
    }
}
extension DualNum: AntiRejectViaHorizonFrom<AntiPlane> {
    associatedtype Output = DualNum;
    func anti_reject_via_horizon_from(other: AntiPlane) -> Output {
        FlatPoint wedge = FlatPoint.from_groups(
            /* e15, e25, e35, e45 */
            float4(this.group0.xy.xx, this.e5, 0.0) * float4(float3(1.0), 0.0) * float4(other.group0.xyz, 0.0) * float4(-1.0, -1.0, -1.0, 0.0)
        );
        Plane right_dual = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return DualNum.from_groups(
            /* e5, e12345, 0, 0 */
            float4(float2((wedge.e15 * right_dual.e4235) + (wedge.e25 * right_dual.e4315) + (wedge.e35 * right_dual.e4125) + (wedge.e45 * right_dual.e3215), 0.0), 0.0, 0.0)
        );
    }
}
extension DualNum: AntiRejectViaHorizonFrom<Circle> {
    associatedtype Output = RoundPoint;
    func anti_reject_via_horizon_from(other: Circle) -> Output {
        Plane wedge = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(this.e5) * float4(other.group0.xyz, other.e321) * float4(-1.0)
        );
        Dipole right_dual = Dipole.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, 0 */
            float4(other.group2.xyz, 0.0)
        );
        return RoundPoint.from_groups(
            /* e1, e2, e3, e4 */
            float4(-(right_dual.e41 * wedge.e3215) - (right_dual.e31 * wedge.e4125), -(right_dual.e42 * wedge.e3215) - (right_dual.e12 * wedge.e4235), -(right_dual.e43 * wedge.e3215) - (right_dual.e23 * wedge.e4315), (right_dual.e42 * wedge.e4315) + (right_dual.e43 * wedge.e4125)) + (wedge.group0.yzxx * float4(right_dual.group1.zxy, right_dual.e41)), 
            /* e5, 0, 0, 0 */
            float4(-(right_dual.e45 * wedge.e3215) - (right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125), 0.0, 0.0, 0.0)
        );
    }
}
extension DualNum: AntiRejectViaHorizonFrom<CircleRotor> {
    associatedtype Output = RoundPoint;
    func anti_reject_via_horizon_from(other: CircleRotor) -> Output {
        Plane wedge = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(this.e5) * float4(other.group0.xyz, other.e321) * float4(-1.0)
        );
        AntiCircleRotor right_dual = AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return RoundPoint.from_groups(
            /* e1, e2, e3, e4 */
            float4(-(right_dual.e41 * wedge.e3215) - (right_dual.e31 * wedge.e4125), -(right_dual.e42 * wedge.e3215) - (right_dual.e12 * wedge.e4235), -(right_dual.e43 * wedge.e3215) - (right_dual.e23 * wedge.e4315), (right_dual.e42 * wedge.e4315) + (right_dual.e43 * wedge.e4125)) + (wedge.group0.yzxx * float4(right_dual.group1.zxy, right_dual.e41)), 
            /* e5, 0, 0, 0 */
            float4(-(right_dual.e45 * wedge.e3215) - (right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125), 0.0, 0.0, 0.0)
        );
    }
}
extension DualNum: AntiRejectViaHorizonFrom<Dipole> {
    associatedtype Output = RoundPoint;
    func anti_reject_via_horizon_from(other: Dipole) -> Output {
        Line wedge = Line.from_groups(
            /* e415, e425, e435, 0 */
            float4(float3(this.e5) * other.group0.xyz, 0.0), 
            /* e235, e315, e125, 0 */
            float4(float3(this.e5) * other.group1.xyz, 0.0)
        );
        Circle right_dual = Circle.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, 0 */
            float4(other.group2.xyz * float3(-1.0), 0.0)
        );
        return RoundPoint.from_groups(
            /* e1, e2, e3, e4 */
            float4((right_dual.e412 * wedge.e315) + (right_dual.e321 * wedge.e415), (right_dual.e423 * wedge.e125) + (right_dual.e321 * wedge.e425), (right_dual.e431 * wedge.e235) + (right_dual.e321 * wedge.e435), -(right_dual.e431 * wedge.e425) - (right_dual.e412 * wedge.e435)) - float4((right_dual.group0.xyz.yzx * wedge.group1.xyz.zxy), right_dual.e423 * wedge.e415), 
            /* e5, 0, 0, 0 */
            float4(-(right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435), 0.0, 0.0, 0.0)
        );
    }
}
extension DualNum: AntiRejectViaHorizonFrom<DipoleInversion> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: DipoleInversion) -> Output {
        Motor wedge = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4(this.e5) * float4(other.group0.xyz, other.e1234), 
            /* e235, e315, e125, e5 */
            float4(this.group0.xy.xx, this.e5, 0.0) * float4(float3(1.0), 0.0) * float4(other.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        AntiDipoleInversion right_dual = AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(wedge.e12345) * right_dual.group1, 
            /* e235, e315, e125, e4 */
            float4((float3(wedge.e12345) * right_dual.group2.xyz), (right_dual.e4 * wedge.e12345) - (right_dual.e423 * wedge.e415) - (right_dual.e431 * wedge.e425) - (right_dual.e412 * wedge.e435)), 
            /* e1, e2, e3, e5 */
            float4((right_dual.e321 * wedge.e415) + (right_dual.e1 * wedge.e12345), (right_dual.e321 * wedge.e425) + (right_dual.e2 * wedge.e12345), (right_dual.e321 * wedge.e435) + (right_dual.e3 * wedge.e12345), -(right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435)) + float4((right_dual.group0.xyz.zxy * wedge.group1.yzx), right_dual.e5 * wedge.e12345) - (wedge.group1.zxyx * float4(right_dual.group0.xyz.yzx, right_dual.e415))
        );
    }
}
extension DualNum: AntiRejectViaHorizonFrom<MultiVector> {
    associatedtype Output = MultiVector;
    func anti_reject_via_horizon_from(other: MultiVector) -> Output {
        MultiVector wedge = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(0.0, (this.e5 * other.e1234) + (this.e12345 * other.scalar)), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5, 0, 0, 0 */
            float4(this.e5 * other.scalar, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(this.e5) * other.group1 * float4(-1.0), 
            /* e41, e42, e43, 0 */
            float4(0.0), 
            /* e23, e31, e12, 0 */
            float4(0.0), 
            /* e415, e425, e435, e321 */
            float4(this.group0.xy.xx, this.e5, 0.0) * float4(float3(1.0), 0.0) * float4(other.group4.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e423, e431, e412, 0 */
            float4(0.0), 
            /* e235, e315, e125, 0 */
            float4(float3(this.e5) * other.group5.xyz, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e5) * float4(other.group7.xyz, other.e321) * float4(-1.0), 
            /* e1234, 0, 0, 0 */
            float4(0.0)
        );
        MultiVector right_dual = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(other.group0.xy.yx * float2(-1.0, 1.0), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5, 0, 0, 0 */
            float4(other.e3215, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43, 0 */
            float4(other.group7.xyz, 0.0), 
            /* e23, e31, e12, 0 */
            float4(other.group6.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412, 0 */
            float4(other.group4.xyz * float3(-1.0), 0.0), 
            /* e235, e315, e125, 0 */
            float4(other.group3.xyz * float3(-1.0), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        return MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2((right_dual.scalar * wedge.e12345) + (right_dual.e12345 * wedge.scalar) + (right_dual.e1 * wedge.e4235) + (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) + (right_dual.e4 * wedge.e3215) + (right_dual.e5 * wedge.e1234) + (right_dual.e4235 * wedge.e1) + (right_dual.e4315 * wedge.e2) + (right_dual.e4125 * wedge.e3) + (right_dual.e3215 * wedge.e4) + (right_dual.e1234 * wedge.e5) - (right_dual.e15 * wedge.e423) - (right_dual.e25 * wedge.e431) - (right_dual.e35 * wedge.e412) - (right_dual.e45 * wedge.e321) - (right_dual.e41 * wedge.e235) - (right_dual.e42 * wedge.e315) - (right_dual.e43 * wedge.e125) - (right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e321 * wedge.e45) - (right_dual.e423 * wedge.e15) - (right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43), right_dual.e12345 * wedge.e12345), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e15 * wedge.e1234) + (right_dual.e415 * wedge.e321) + (right_dual.e321 * wedge.e415) + (right_dual.e4125 * wedge.e31), (right_dual.e25 * wedge.e1234) + (right_dual.e425 * wedge.e321) + (right_dual.e321 * wedge.e425) + (right_dual.e4235 * wedge.e12), (right_dual.e35 * wedge.e1234) + (right_dual.e435 * wedge.e321) + (right_dual.e321 * wedge.e435) + (right_dual.e4315 * wedge.e23), -(right_dual.e415 * wedge.e423) - (right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412) - (right_dual.e1234 * wedge.e45)) + (float4(right_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_dual.group1) + (wedge.group9.yzxx * float4(right_dual.group5.xyz.zxy, right_dual.e41)) + float4((wedge.group4.xyz * right_dual.group9.www), right_dual.e45 * wedge.e1234) + float4((right_dual.group7.xyz.zxy * wedge.group8.xyz.yzx), right_dual.e42 * wedge.e4315) + float4((right_dual.group8.xyz.yzx * wedge.group7.xyz.zxy), right_dual.e43 * wedge.e4125) - (right_dual.group9.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((float3(right_dual.e1234) * wedge.group3.xyz), right_dual.e4125 * wedge.e43) - float4((right_dual.group4.xyz * wedge.group9.www), right_dual.e423 * wedge.e415) - float4((right_dual.group5.xyz.yzx * wedge.group9.zxy), right_dual.e431 * wedge.e425) - float4((right_dual.group7.xyz.yzx * wedge.group8.xyz.zxy), right_dual.e412 * wedge.e435) - float4((right_dual.group8.xyz.zxy * wedge.group7.xyz.yzx), right_dual.e4235 * wedge.e41), 
            /* e5, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e5) + (right_dual.e5 * wedge.e12345) + (right_dual.e4235 * wedge.e15) + (right_dual.e4315 * wedge.e25) + (right_dual.e4125 * wedge.e35) + (right_dual.e3215 * wedge.e45) - (right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125) - (right_dual.e45 * wedge.e3215) - (right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435), 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4((right_dual.e415 * wedge.e3215) + (right_dual.e315 * wedge.e4125) + (right_dual.e4125 * wedge.e315) + (right_dual.e3215 * wedge.e415), (right_dual.e425 * wedge.e3215) + (right_dual.e125 * wedge.e4235) + (right_dual.e4235 * wedge.e125) + (right_dual.e3215 * wedge.e425), (right_dual.e435 * wedge.e3215) + (right_dual.e235 * wedge.e4315) + (right_dual.e4315 * wedge.e235) + (right_dual.e3215 * wedge.e435), -(right_dual.e435 * wedge.e4125) - (right_dual.e4235 * wedge.e415) - (right_dual.e4315 * wedge.e425) - (right_dual.e4125 * wedge.e435)) + (float4(right_dual.e12345) * wedge.group3) + (float4(wedge.e12345) * right_dual.group3) - (wedge.group9.yzxx * float4(right_dual.group8.xyz.zxy, right_dual.e415)) - float4((wedge.group8.xyz.zxy * right_dual.group9.yzx), right_dual.e425 * wedge.e4315), 
            /* e41, e42, e43, 0 */
            float4((float3(right_dual.e12345) * wedge.group4.xyz) + (float3(right_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_dual.group4.xyz) + (float3(wedge.e1234) * right_dual.group6.xyz) + (right_dual.group7.xyz.zxy * wedge.group9.yzx) + (wedge.group7.xyz.zxy * right_dual.group9.yzx) - (right_dual.group7.xyz.yzx * wedge.group9.zxy) - (wedge.group7.xyz.yzx * right_dual.group9.zxy), 0.0), 
            /* e23, e31, e12, 0 */
            float4((float3(right_dual.e12345) * wedge.group5.xyz) + (float3(right_dual.e3215) * wedge.group7.xyz) + (float3(right_dual.e1234) * wedge.group8.xyz) + (float3(wedge.e12345) * right_dual.group5.xyz) + (float3(wedge.e3215) * right_dual.group7.xyz) + (float3(wedge.e1234) * right_dual.group8.xyz) - (float3(right_dual.e321) * wedge.group9.xyz) - (float3(wedge.e321) * right_dual.group9.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            (float4(right_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_dual.group6) + (right_dual.group9.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - float4((right_dual.group9.zxy * wedge.group9.yzx), right_dual.e1234 * wedge.e3215), 
            /* e423, e431, e412, 0 */
            float4((float3(right_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_dual.group7.xyz) + (float3(wedge.e1234) * right_dual.group9.xyz) - (float3(right_dual.e1234) * wedge.group9.xyz), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(right_dual.e12345) * wedge.group8.xyz) + (float3(right_dual.e3215) * wedge.group9.xyz) + (float3(wedge.e12345) * right_dual.group8.xyz) - (float3(wedge.e3215) * right_dual.group9.xyz), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            (float4(right_dual.e12345) * wedge.group9) + (float4(wedge.e12345) * right_dual.group9), 
            /* e1234, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e1234) + (right_dual.e1234 * wedge.e12345), 0.0, 0.0, 0.0)
        );
    }
}
extension DualNum: AntiRejectViaHorizonFrom<RoundPoint> {
    associatedtype Output = RoundPoint;
    func anti_reject_via_horizon_from(other: RoundPoint) -> Output {
        FlatPoint wedge = FlatPoint.from_groups(
            /* e15, e25, e35, e45 */
            float4(this.e5) * other.group0 * float4(-1.0)
        );
        Sphere right_dual = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        return RoundPoint.from_groups(
            /* e1, e2, e3, e4 */
            float4(right_dual.e1234) * wedge.group0 * float4(-1.0), 
            /* e5, 0, 0, 0 */
            float4((wedge.e15 * right_dual.e4235) + (wedge.e25 * right_dual.e4315) + (wedge.e35 * right_dual.e4125) + (wedge.e45 * right_dual.e3215), 0.0, 0.0, 0.0)
        );
    }
}
extension DualNum: AntiRejectViaHorizonFrom<Scalar> {
    associatedtype Output = DualNum;
    func anti_reject_via_horizon_from(other: Scalar) -> Output {
        return DualNum.from_groups(
            /* e5, e12345, 0, 0 */
            float4(float2(other.scalar) * float2(this.e5 * other.scalar, this.e12345 * other.scalar), 0.0, 0.0)
        );
    }
}
extension DualNum: AntiRejectViaHorizonFrom<Sphere> {
    associatedtype Output = RoundPoint;
    func anti_reject_via_horizon_from(other: Sphere) -> Output {
        AntiScalar wedge = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(this.e5 * other.e1234, 0.0, 0.0, 0.0)
        );
        RoundPoint right_dual = RoundPoint.from_groups(
            /* e1, e2, e3, e4 */
            float4(other.group0.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5, 0, 0, 0 */
            float4(other.e3215, 0.0, 0.0, 0.0)
        );
        return RoundPoint.from_groups(
            /* e1, e2, e3, e4 */
            float4(wedge.e12345) * right_dual.group0, 
            /* e5, 0, 0, 0 */
            float4(wedge.e12345 * right_dual.e5, 0.0, 0.0, 0.0)
        );
    }
}
extension DualNum: AntiRejectViaHorizonFrom<VersorEven> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: VersorEven) -> Output {
        Flector wedge = Flector.from_groups(
            /* e15, e25, e35, e45 */
            float4(this.e5) * other.group3 * float4(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(this.e5) * float4(other.group0.xyz, other.e321) * float4(-1.0)
        );
        VersorOdd right_dual = VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(right_dual.e1234) * wedge.group1.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            float4(((wedge.group1.zxy * right_dual.group3.yzx) - (wedge.group1.yzx * right_dual.group3.zxy)), wedge.e3215 * right_dual.e1234 * -1.0), 
            /* e235, e315, e125, e4 */
            (wedge.group1.xyzx * float4(right_dual.group3.www, right_dual.e41)) + float4(float3(0.0), (wedge.e4315 * right_dual.e42) + (wedge.e4125 * right_dual.e43)) - float4((wedge.group1.www * right_dual.group3.xyz), wedge.e45 * right_dual.e1234), 
            /* e1, e2, e3, e5 */
            float4(float3(0.0), (wedge.e25 * right_dual.e4315) + (wedge.e35 * right_dual.e4125) + (wedge.e45 * right_dual.e3215) - (wedge.e3215 * right_dual.e45)) + float4((wedge.group1.yzx * right_dual.group1.zxy), wedge.e15 * right_dual.e4235) - (wedge.group1.zxyy * float4(right_dual.group1.yzx, right_dual.e25)) - (wedge.group1.wwwz * float4(right_dual.group0.xyz, right_dual.e35)) - (right_dual.group2.wwwx * float4(wedge.group0.xyz, wedge.e4235))
        );
    }
}
extension DualNum: AntiRejectViaHorizonFrom<VersorOdd> {
    associatedtype Output = VersorEven;
    func anti_reject_via_horizon_from(other: VersorOdd) -> Output {
        Motor wedge = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4(this.group0.xy.xx, this.e5, (this.e5 * other.e1234) + (this.e12345 * other.scalar)) * float4(other.group0.xyz, 1.0), 
            /* e235, e315, e125, e5 */
            float4(this.e5) * float4(other.group1.xyz, other.scalar)
        );
        VersorEven right_dual = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4(wedge.e12345) * right_dual.group0, 
            /* e415, e425, e435, e321 */
            float4(((float3(wedge.e12345) * right_dual.group1.xyz) + (float3(right_dual.e12345) * wedge.group0.xyz)), wedge.e12345 * right_dual.e321), 
            /* e235, e315, e125, e5 */
            (float4(wedge.e12345) * right_dual.group2) + (float4(right_dual.e12345) * wedge.group1) + float4(float3(0.0), -(wedge.e415 * right_dual.e235) - (wedge.e425 * right_dual.e315) - (wedge.e435 * right_dual.e125) - (wedge.e235 * right_dual.e415) - (wedge.e315 * right_dual.e425) - (wedge.e125 * right_dual.e435)), 
            /* e1, e2, e3, e4 */
            float4((wedge.e12345 * right_dual.e1) + (wedge.e315 * right_dual.e412), (wedge.e12345 * right_dual.e2) + (wedge.e125 * right_dual.e423), (wedge.e12345 * right_dual.e3) + (wedge.e235 * right_dual.e431), -(wedge.e425 * right_dual.e431) - (wedge.e435 * right_dual.e412)) + (wedge.group0 * float4(right_dual.group1.www, right_dual.e4)) - (right_dual.group0.yzxx * float4(wedge.group1.zxy, wedge.e415))
        );
    }
}
extension FlatPoint {
    // Fancy infix trick
    func operator/(_rhs: AntiRejectViaHorizonFromInfix) -> AntiRejectViaHorizonFromInfixPartial<FlatPoint> {
        return AntiRejectViaHorizonFromInfixPartial { a: this };
    }
}
extension FlatPoint: AntiRejectViaHorizonFrom<AntiCircleRotor> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: AntiCircleRotor) -> Output {
        Flector wedge = Flector.from_groups(
            /* e15, e25, e35, e45 */
            float4(other.scalar) * this.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e42 * this.e35) + (other.e23 * this.e45), (other.e43 * this.e15) + (other.e31 * this.e45), (other.e41 * this.e25) + (other.e12 * this.e45), -(other.e31 * this.e25) - (other.e12 * this.e35)) - (this.group0.yzxx * float4(other.group0.xyz.zxy, other.e23))
        );
        CircleRotor right_dual = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            float4(right_dual.e412 * wedge.e4315, right_dual.e423 * wedge.e4125, right_dual.e431 * wedge.e4235, -(right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e321 * wedge.e45)) - float4((right_dual.group0.xyz.yzx * wedge.group1.zxy), right_dual.e423 * wedge.e15), 
            /* e23, e31, e12, e45 */
            float4(float3(0.0), -(right_dual.e425 * wedge.e4315) - (right_dual.e435 * wedge.e4125)) + float4((right_dual.group0.xyz * wedge.group1.www), right_dual.e12345 * wedge.e45) - (right_dual.group1.wwwx * wedge.group1.xyzx), 
            /* e15, e25, e35, e1234 */
            float4((float3(right_dual.e12345) * wedge.group0.xyz), 0.0) + float4((float3(wedge.e3215) * right_dual.group1.xyz), 0.0) + float4((right_dual.group2.yzx * wedge.group1.zxy), 0.0) - float4((right_dual.group2.zxy * wedge.group1.yzx), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * wedge.group1
        );
    }
}
extension FlatPoint: AntiRejectViaHorizonFrom<AntiDipoleInversion> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: AntiDipoleInversion) -> Output {
        Motor wedge = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4(other.e4 * this.e15, other.e4 * this.e25, other.e4 * this.e35, -(other.e431 * this.e25) - (other.e412 * this.e35) - (other.e321 * this.e45)) - (this.group0.wwwx * float4(other.group3.xyz, other.e423)), 
            /* e235, e315, e125, e5 */
            float4(((other.group3.yzx * this.group0.zxy) - (other.group3.zxy * this.group0.yzx)), 0.0)
        );
        DipoleInversion right_dual = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            float4(right_dual.e1234 * wedge.e415, right_dual.e1234 * wedge.e425, right_dual.e1234 * wedge.e435, -(right_dual.e41 * wedge.e235) - (right_dual.e42 * wedge.e315) - (right_dual.e43 * wedge.e125) - (right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435)) + float4((right_dual.group0.xyz * wedge.group0.www), right_dual.e1234 * wedge.e5), 
            /* e23, e31, e12, e45 */
            float4(right_dual.e1234 * wedge.e235, right_dual.e1234 * wedge.e315, right_dual.e1234 * wedge.e125, -(right_dual.e4235 * wedge.e415) - (right_dual.e4315 * wedge.e425) - (right_dual.e4125 * wedge.e435)) + (float4(wedge.e12345) * right_dual.group1), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_dual.e3215) * wedge.group0.xyz) + (float3(wedge.e12345) * right_dual.group2.xyz) + (right_dual.group3.zxy * wedge.group1.yzx) - (right_dual.group3.yzx * wedge.group1.zxy)), right_dual.e1234 * wedge.e12345), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_dual.group3
        );
    }
}
extension FlatPoint: AntiRejectViaHorizonFrom<AntiDualNum> {
    associatedtype Output = FlatPoint;
    func anti_reject_via_horizon_from(other: AntiDualNum) -> Output {
        return FlatPoint.from_groups(
            /* e15, e25, e35, e45 */
            float4(other.scalar) * float4(other.scalar * this.e15, other.scalar * this.e25, other.scalar * this.e35, other.scalar * this.e45)
        );
    }
}
extension FlatPoint: AntiRejectViaHorizonFrom<AntiFlatPoint> {
    associatedtype Output = FlatPoint;
    func anti_reject_via_horizon_from(other: AntiFlatPoint) -> Output {
        return FlatPoint.from_groups(
            /* e15, e25, e35, e45 */
            float4(other.e321 * this.e45 * -1.0) * float4(other.group0.xyz, other.e321 * -1.0)
        );
    }
}
extension FlatPoint: AntiRejectViaHorizonFrom<AntiFlector> {
    associatedtype Output = Flector;
    func anti_reject_via_horizon_from(other: AntiFlector) -> Output {
        Motor wedge = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4(this.e45) * float4(other.group1.xyz, other.e321) * float4(-1.0), 
            /* e235, e315, e125, e5 */
            float4(((other.group1.yzx * this.group0.zxy) - (other.group1.zxy * this.group0.yzx)), 0.0)
        );
        Flector right_dual = Flector.from_groups(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return Flector.from_groups(
            /* e15, e25, e35, e45 */
            float4((right_dual.e4125 * wedge.e315) + (right_dual.e3215 * wedge.e415), (right_dual.e4235 * wedge.e125) + (right_dual.e3215 * wedge.e425), (right_dual.e4315 * wedge.e235) + (right_dual.e3215 * wedge.e435), -(right_dual.e4315 * wedge.e425) - (right_dual.e4125 * wedge.e435)) + (float4(wedge.e12345) * right_dual.group0) - (right_dual.group1.yzxx * float4(wedge.group1.zxy, wedge.e415)), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_dual.group1
        );
    }
}
extension FlatPoint: AntiRejectViaHorizonFrom<AntiLine> {
    associatedtype Output = FlatPoint;
    func anti_reject_via_horizon_from(other: AntiLine) -> Output {
        Plane wedge = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4((float3(this.e45) * other.group0.xyz), -(other.e23 * this.e15) - (other.e31 * this.e25) - (other.e12 * this.e35))
        );
        Line right_dual = Line.from_groups(
            /* e415, e425, e435, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e235, e315, e125, 0 */
            float4(other.group1.xyz * float3(-1.0), 0.0)
        );
        return FlatPoint.from_groups(
            /* e15, e25, e35, e45 */
            float4((right_dual.e415 * wedge.e3215) + (right_dual.e315 * wedge.e4125), (right_dual.e425 * wedge.e3215) + (right_dual.e125 * wedge.e4235), (right_dual.e435 * wedge.e3215) + (right_dual.e235 * wedge.e4315), -(right_dual.e425 * wedge.e4315) - (right_dual.e435 * wedge.e4125)) - (wedge.group0.yzxx * float4(right_dual.group1.xyz.zxy, right_dual.e415))
        );
    }
}
extension FlatPoint: AntiRejectViaHorizonFrom<AntiMotor> {
    associatedtype Output = Flector;
    func anti_reject_via_horizon_from(other: AntiMotor) -> Output {
        Flector wedge = Flector.from_groups(
            /* e15, e25, e35, e45 */
            float4(other.scalar) * this.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4((float3(this.e45) * other.group0.xyz), -(other.e23 * this.e15) - (other.e31 * this.e25) - (other.e12 * this.e35))
        );
        Motor right_dual = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return Flector.from_groups(
            /* e15, e25, e35, e45 */
            float4((wedge.e4125 * right_dual.e315) + (wedge.e3215 * right_dual.e415), (wedge.e4235 * right_dual.e125) + (wedge.e3215 * right_dual.e425), (wedge.e4315 * right_dual.e235) + (wedge.e3215 * right_dual.e435), -(wedge.e4315 * right_dual.e425) - (wedge.e4125 * right_dual.e435)) + (float4(right_dual.e12345) * wedge.group0) - (wedge.group1.yzxx * float4(right_dual.group1.zxy, right_dual.e415)), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * wedge.group1
        );
    }
}
extension FlatPoint: AntiRejectViaHorizonFrom<AntiPlane> {
    associatedtype Output = FlatPoint;
    func anti_reject_via_horizon_from(other: AntiPlane) -> Output {
        Line wedge = Line.from_groups(
            /* e415, e425, e435, 0 */
            float4(float3(this.e45) * other.group0.xyz * float3(-1.0), 0.0), 
            /* e235, e315, e125, 0 */
            float4((other.group0.yzx * this.group0.zxy) - (other.group0.zxy * this.group0.yzx), 0.0)
        );
        Plane right_dual = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return FlatPoint.from_groups(
            /* e15, e25, e35, e45 */
            float4((wedge.e415 * right_dual.e3215) + (wedge.e315 * right_dual.e4125), (wedge.e425 * right_dual.e3215) + (wedge.e125 * right_dual.e4235), (wedge.e435 * right_dual.e3215) + (wedge.e235 * right_dual.e4315), -(wedge.e425 * right_dual.e4315) - (wedge.e435 * right_dual.e4125)) - (right_dual.group0.yzxx * float4(wedge.group1.xyz.zxy, wedge.e415))
        );
    }
}
extension FlatPoint: AntiRejectViaHorizonFrom<Circle> {
    associatedtype Output = Dipole;
    func anti_reject_via_horizon_from(other: Circle) -> Output {
        AntiScalar wedge = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(-(other.e423 * this.e15) - (other.e431 * this.e25) - (other.e412 * this.e35) - (other.e321 * this.e45), 0.0, 0.0, 0.0)
        );
        Dipole right_dual = Dipole.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, 0 */
            float4(other.group2.xyz, 0.0)
        );
        return Dipole.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(wedge.e12345) * right_dual.group1, 
            /* e15, e25, e35, 0 */
            float4(float3(wedge.e12345) * right_dual.group2.xyz, 0.0)
        );
    }
}
extension FlatPoint: AntiRejectViaHorizonFrom<CircleRotor> {
    associatedtype Output = AntiCircleRotor;
    func anti_reject_via_horizon_from(other: CircleRotor) -> Output {
        AntiScalar wedge = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(-(other.e423 * this.e15) - (other.e431 * this.e25) - (other.e412 * this.e35) - (other.e321 * this.e45), 0.0, 0.0, 0.0)
        );
        AntiCircleRotor right_dual = AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(wedge.e12345) * right_dual.group1, 
            /* e15, e25, e35, scalar */
            float4(wedge.e12345) * right_dual.group2
        );
    }
}
extension FlatPoint: AntiRejectViaHorizonFrom<Dipole> {
    associatedtype Output = Dipole;
    func anti_reject_via_horizon_from(other: Dipole) -> Output {
        Plane wedge = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4((other.e42 * this.e35) + (other.e23 * this.e45), (other.e43 * this.e15) + (other.e31 * this.e45), (other.e41 * this.e25) + (other.e12 * this.e45), -(other.e31 * this.e25) - (other.e12 * this.e35)) - (this.group0.yzxx * float4(other.group0.xyz.zxy, other.e23))
        );
        Circle right_dual = Circle.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, 0 */
            float4(other.group2.xyz * float3(-1.0), 0.0)
        );
        return Dipole.from_groups(
            /* e41, e42, e43, 0 */
            float4((right_dual.group0.xyz.zxy * wedge.group0.yzx) - (right_dual.group0.xyz.yzx * wedge.group0.zxy), 0.0), 
            /* e23, e31, e12, e45 */
            float4(right_dual.e423 * wedge.e3215, right_dual.e431 * wedge.e3215, right_dual.e412 * wedge.e3215, -(right_dual.e425 * wedge.e4315) - (right_dual.e435 * wedge.e4125)) - (right_dual.group1.wwwx * wedge.group0.xyzx), 
            /* e15, e25, e35, 0 */
            float4((float3(wedge.e3215) * right_dual.group1.xyz) + (right_dual.group2.xyz.yzx * wedge.group0.zxy) - (right_dual.group2.xyz.zxy * wedge.group0.yzx), 0.0)
        );
    }
}
extension FlatPoint: AntiRejectViaHorizonFrom<DipoleInversion> {
    associatedtype Output = AntiCircleRotor;
    func anti_reject_via_horizon_from(other: DipoleInversion) -> Output {
        Plane wedge = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4((other.e42 * this.e35) + (other.e23 * this.e45), (other.e43 * this.e15) + (other.e31 * this.e45), (other.e41 * this.e25) + (other.e12 * this.e45), -(other.e31 * this.e25) - (other.e12 * this.e35)) - (this.group0.yzxx * float4(other.group0.xyz.zxy, other.e23))
        );
        AntiDipoleInversion right_dual = AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4((right_dual.group0.xyz.zxy * wedge.group0.yzx) - (right_dual.group0.xyz.yzx * wedge.group0.zxy), 0.0), 
            /* e23, e31, e12, e45 */
            float4(right_dual.e423 * wedge.e3215, right_dual.e431 * wedge.e3215, right_dual.e412 * wedge.e3215, -(right_dual.e425 * wedge.e4315) - (right_dual.e435 * wedge.e4125)) - (right_dual.group1.wwwx * wedge.group0.xyzx), 
            /* e15, e25, e35, scalar */
            float4(right_dual.e125 * wedge.e4315 * -1.0, right_dual.e235 * wedge.e4125 * -1.0, right_dual.e315 * wedge.e4235 * -1.0, (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125)) + (float4(wedge.e3215) * float4(right_dual.group1.xyz, right_dual.e4)) + (wedge.group0.zxyx * float4(right_dual.group2.yzx, right_dual.e1))
        );
    }
}
extension FlatPoint: AntiRejectViaHorizonFrom<MultiVector> {
    associatedtype Output = MultiVector;
    func anti_reject_via_horizon_from(other: MultiVector) -> Output {
        MultiVector wedge = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(0.0, -(this.e15 * other.e423) - (this.e25 * other.e431) - (this.e35 * other.e412) - (this.e45 * other.e321)), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5, 0, 0, 0 */
            float4(0.0), 
            /* e15, e25, e35, e45 */
            float4(other.scalar) * this.group0, 
            /* e41, e42, e43, 0 */
            float4(0.0), 
            /* e23, e31, e12, 0 */
            float4(0.0), 
            /* e415, e425, e435, e321 */
            float4(((float3(other.e4) * this.group0.xyz) - (float3(this.e45) * other.group1.xyz)), 0.0), 
            /* e423, e431, e412, 0 */
            float4(0.0), 
            /* e235, e315, e125, 0 */
            float4((this.group0.zxy * other.group1.yzx) - (this.group0.yzx * other.group1.zxy), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4((this.e35 * other.e42) + (this.e45 * other.e23), (this.e15 * other.e43) + (this.e45 * other.e31), (this.e25 * other.e41) + (this.e45 * other.e12), -(this.e25 * other.e31) - (this.e35 * other.e12)) - (this.group0.yzxx * float4(other.group4.xyz.zxy, other.e23)), 
            /* e1234, 0, 0, 0 */
            float4(0.0)
        );
        MultiVector right_dual = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(other.group0.xy.yx * float2(-1.0, 1.0), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5, 0, 0, 0 */
            float4(other.e3215, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43, 0 */
            float4(other.group7.xyz, 0.0), 
            /* e23, e31, e12, 0 */
            float4(other.group6.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412, 0 */
            float4(other.group4.xyz * float3(-1.0), 0.0), 
            /* e235, e315, e125, 0 */
            float4(other.group3.xyz * float3(-1.0), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        return MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2((right_dual.scalar * wedge.e12345) + (right_dual.e12345 * wedge.scalar) + (right_dual.e1 * wedge.e4235) + (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) + (right_dual.e4 * wedge.e3215) + (right_dual.e5 * wedge.e1234) + (right_dual.e4235 * wedge.e1) + (right_dual.e4315 * wedge.e2) + (right_dual.e4125 * wedge.e3) + (right_dual.e3215 * wedge.e4) + (right_dual.e1234 * wedge.e5) - (right_dual.e15 * wedge.e423) - (right_dual.e25 * wedge.e431) - (right_dual.e35 * wedge.e412) - (right_dual.e45 * wedge.e321) - (right_dual.e41 * wedge.e235) - (right_dual.e42 * wedge.e315) - (right_dual.e43 * wedge.e125) - (right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e321 * wedge.e45) - (right_dual.e423 * wedge.e15) - (right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43), right_dual.e12345 * wedge.e12345), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e15 * wedge.e1234) + (right_dual.e415 * wedge.e321) + (right_dual.e321 * wedge.e415) + (right_dual.e4125 * wedge.e31), (right_dual.e25 * wedge.e1234) + (right_dual.e425 * wedge.e321) + (right_dual.e321 * wedge.e425) + (right_dual.e4235 * wedge.e12), (right_dual.e35 * wedge.e1234) + (right_dual.e435 * wedge.e321) + (right_dual.e321 * wedge.e435) + (right_dual.e4315 * wedge.e23), -(right_dual.e415 * wedge.e423) - (right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412) - (right_dual.e1234 * wedge.e45)) + (float4(right_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_dual.group1) + (wedge.group9.yzxx * float4(right_dual.group5.xyz.zxy, right_dual.e41)) + float4((wedge.group4.xyz * right_dual.group9.www), right_dual.e45 * wedge.e1234) + float4((right_dual.group7.xyz.zxy * wedge.group8.xyz.yzx), right_dual.e42 * wedge.e4315) + float4((right_dual.group8.xyz.yzx * wedge.group7.xyz.zxy), right_dual.e43 * wedge.e4125) - (right_dual.group9.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((float3(right_dual.e1234) * wedge.group3.xyz), right_dual.e4125 * wedge.e43) - float4((right_dual.group4.xyz * wedge.group9.www), right_dual.e423 * wedge.e415) - float4((right_dual.group5.xyz.yzx * wedge.group9.zxy), right_dual.e431 * wedge.e425) - float4((right_dual.group7.xyz.yzx * wedge.group8.xyz.zxy), right_dual.e412 * wedge.e435) - float4((right_dual.group8.xyz.zxy * wedge.group7.xyz.yzx), right_dual.e4235 * wedge.e41), 
            /* e5, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e5) + (right_dual.e5 * wedge.e12345) + (right_dual.e4235 * wedge.e15) + (right_dual.e4315 * wedge.e25) + (right_dual.e4125 * wedge.e35) + (right_dual.e3215 * wedge.e45) - (right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125) - (right_dual.e45 * wedge.e3215) - (right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435), 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4((right_dual.e415 * wedge.e3215) + (right_dual.e315 * wedge.e4125) + (right_dual.e4125 * wedge.e315) + (right_dual.e3215 * wedge.e415), (right_dual.e425 * wedge.e3215) + (right_dual.e125 * wedge.e4235) + (right_dual.e4235 * wedge.e125) + (right_dual.e3215 * wedge.e425), (right_dual.e435 * wedge.e3215) + (right_dual.e235 * wedge.e4315) + (right_dual.e4315 * wedge.e235) + (right_dual.e3215 * wedge.e435), -(right_dual.e435 * wedge.e4125) - (right_dual.e4235 * wedge.e415) - (right_dual.e4315 * wedge.e425) - (right_dual.e4125 * wedge.e435)) + (float4(right_dual.e12345) * wedge.group3) + (float4(wedge.e12345) * right_dual.group3) - (wedge.group9.yzxx * float4(right_dual.group8.xyz.zxy, right_dual.e415)) - float4((wedge.group8.xyz.zxy * right_dual.group9.yzx), right_dual.e425 * wedge.e4315), 
            /* e41, e42, e43, 0 */
            float4((float3(right_dual.e12345) * wedge.group4.xyz) + (float3(right_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_dual.group4.xyz) + (float3(wedge.e1234) * right_dual.group6.xyz) + (right_dual.group7.xyz.zxy * wedge.group9.yzx) + (wedge.group7.xyz.zxy * right_dual.group9.yzx) - (right_dual.group7.xyz.yzx * wedge.group9.zxy) - (wedge.group7.xyz.yzx * right_dual.group9.zxy), 0.0), 
            /* e23, e31, e12, 0 */
            float4((float3(right_dual.e12345) * wedge.group5.xyz) + (float3(right_dual.e3215) * wedge.group7.xyz) + (float3(right_dual.e1234) * wedge.group8.xyz) + (float3(wedge.e12345) * right_dual.group5.xyz) + (float3(wedge.e3215) * right_dual.group7.xyz) + (float3(wedge.e1234) * right_dual.group8.xyz) - (float3(right_dual.e321) * wedge.group9.xyz) - (float3(wedge.e321) * right_dual.group9.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            (float4(right_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_dual.group6) + (right_dual.group9.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - float4((right_dual.group9.zxy * wedge.group9.yzx), right_dual.e1234 * wedge.e3215), 
            /* e423, e431, e412, 0 */
            float4((float3(right_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_dual.group7.xyz) + (float3(wedge.e1234) * right_dual.group9.xyz) - (float3(right_dual.e1234) * wedge.group9.xyz), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(right_dual.e12345) * wedge.group8.xyz) + (float3(right_dual.e3215) * wedge.group9.xyz) + (float3(wedge.e12345) * right_dual.group8.xyz) - (float3(wedge.e3215) * right_dual.group9.xyz), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            (float4(right_dual.e12345) * wedge.group9) + (float4(wedge.e12345) * right_dual.group9), 
            /* e1234, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e1234) + (right_dual.e1234 * wedge.e12345), 0.0, 0.0, 0.0)
        );
    }
}
extension FlatPoint: AntiRejectViaHorizonFrom<RoundPoint> {
    associatedtype Output = Dipole;
    func anti_reject_via_horizon_from(other: RoundPoint) -> Output {
        Line wedge = Line.from_groups(
            /* e415, e425, e435, 0 */
            float4((float3(other.e4) * this.group0.xyz) - (float3(this.e45) * other.group0.xyz), 0.0), 
            /* e235, e315, e125, 0 */
            float4((this.group0.zxy * other.group0.yzx) - (this.group0.yzx * other.group0.zxy), 0.0)
        );
        Sphere right_dual = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        return Dipole.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(right_dual.e1234) * wedge.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4((float3(right_dual.e1234) * wedge.group1.xyz), -(wedge.e415 * right_dual.e4235) - (wedge.e425 * right_dual.e4315) - (wedge.e435 * right_dual.e4125)), 
            /* e15, e25, e35, 0 */
            float4((float3(right_dual.e3215) * wedge.group0.xyz) + (wedge.group1.xyz.yzx * right_dual.group0.zxy) - (wedge.group1.xyz.zxy * right_dual.group0.yzx), 0.0)
        );
    }
}
extension FlatPoint: AntiRejectViaHorizonFrom<Scalar> {
    associatedtype Output = FlatPoint;
    func anti_reject_via_horizon_from(other: Scalar) -> Output {
        return FlatPoint.from_groups(
            /* e15, e25, e35, e45 */
            float4(other.scalar) * float4(this.e15 * other.scalar, this.e25 * other.scalar, this.e35 * other.scalar, this.e45 * other.scalar)
        );
    }
}
extension FlatPoint: AntiRejectViaHorizonFrom<VersorEven> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: VersorEven) -> Output {
        Motor wedge = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4(this.e15 * other.e4, this.e25 * other.e4, this.e35 * other.e4, -(this.e25 * other.e431) - (this.e35 * other.e412) - (this.e45 * other.e321)) - (this.group0.wwwx * float4(other.group3.xyz, other.e423)), 
            /* e235, e315, e125, e5 */
            float4(((this.group0.zxy * other.group3.yzx) - (this.group0.yzx * other.group3.zxy)), 0.0)
        );
        VersorOdd right_dual = VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            (wedge.group0 * float4(right_dual.group2.www, right_dual.scalar)) + float4(float3(0.0), -(wedge.e415 * right_dual.e23) - (wedge.e425 * right_dual.e31) - (wedge.e435 * right_dual.e12) - (wedge.e235 * right_dual.e41) - (wedge.e315 * right_dual.e42) - (wedge.e125 * right_dual.e43)) + float4((wedge.group0.www * right_dual.group0.xyz), wedge.e5 * right_dual.e1234), 
            /* e23, e31, e12, e45 */
            float4(wedge.e235 * right_dual.e1234, wedge.e315 * right_dual.e1234, wedge.e125 * right_dual.e1234, -(wedge.e415 * right_dual.e4235) - (wedge.e425 * right_dual.e4315) - (wedge.e435 * right_dual.e4125)) + (float4(wedge.e12345) * right_dual.group1), 
            /* e15, e25, e35, e1234 */
            float4(((float3(wedge.e12345) * right_dual.group2.xyz) + (float3(right_dual.e3215) * wedge.group0.xyz) + (wedge.group1.yzx * right_dual.group3.zxy) - (wedge.group1.zxy * right_dual.group3.yzx)), wedge.e12345 * right_dual.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_dual.group3
        );
    }
}
extension FlatPoint: AntiRejectViaHorizonFrom<VersorOdd> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: VersorOdd) -> Output {
        Flector wedge = Flector.from_groups(
            /* e15, e25, e35, e45 */
            float4(other.scalar) * this.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4((this.e35 * other.e42) + (this.e45 * other.e23), (this.e15 * other.e43) + (this.e45 * other.e31), (this.e25 * other.e41) + (this.e45 * other.e12), -(this.e25 * other.e31) - (this.e35 * other.e12)) - (this.group0.yzxx * float4(other.group0.zxy, other.e23))
        );
        VersorEven right_dual = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            (wedge.group1.yzxx * float4(right_dual.group0.zxy, right_dual.e1)) + float4(float3(0.0), (wedge.e4315 * right_dual.e2) + (wedge.e4125 * right_dual.e3) + (wedge.e3215 * right_dual.e4) - (wedge.e25 * right_dual.e431) - (wedge.e35 * right_dual.e412) - (wedge.e45 * right_dual.e321)) - (right_dual.group0.yzxx * float4(wedge.group1.zxy, wedge.e15)), 
            /* e23, e31, e12, e45 */
            (right_dual.group0 * float4(wedge.group1.www, wedge.e45)) + float4(float3(0.0), -(wedge.e4315 * right_dual.e425) - (wedge.e4125 * right_dual.e435)) - (wedge.group1.xyzx * right_dual.group1.wwwx), 
            /* e15, e25, e35, e1234 */
            float4((float3(wedge.e3215) * right_dual.group1.xyz), 0.0) + float4((float3(right_dual.e12345) * wedge.group0.xyz), 0.0) + float4((wedge.group1.zxy * right_dual.group2.yzx), 0.0) - float4((wedge.group1.yzx * right_dual.group2.zxy), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * wedge.group1
        );
    }
}
extension Flector {
    // Fancy infix trick
    func operator/(_rhs: AntiRejectViaHorizonFromInfix) -> AntiRejectViaHorizonFromInfixPartial<Flector> {
        return AntiRejectViaHorizonFromInfixPartial { a: this };
    }
}
extension Flector: AntiRejectViaHorizonFrom<AntiCircleRotor> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: AntiCircleRotor) -> Output {
        Flector wedge = Flector.from_groups(
            /* e15, e25, e35, e45 */
            float4(other.scalar) * this.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e23 * this.e45) + (other.scalar * this.e4235), (other.e31 * this.e45) + (other.scalar * this.e4315), (other.e12 * this.e45) + (other.scalar * this.e4125), -(other.e31 * this.e25) - (other.e12 * this.e35)) + float4((other.group0.xyz.yzx * this.group0.zxy), other.scalar * this.e3215) - (this.group0.yzxx * float4(other.group0.xyz.zxy, other.e23))
        );
        CircleRotor right_dual = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            float4(right_dual.e412 * wedge.e4315, right_dual.e423 * wedge.e4125, right_dual.e431 * wedge.e4235, -(right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e321 * wedge.e45)) - float4((right_dual.group0.xyz.yzx * wedge.group1.zxy), right_dual.e423 * wedge.e15), 
            /* e23, e31, e12, e45 */
            float4(float3(0.0), -(right_dual.e425 * wedge.e4315) - (right_dual.e435 * wedge.e4125)) + float4((right_dual.group0.xyz * wedge.group1.www), right_dual.e12345 * wedge.e45) - (right_dual.group1.wwwx * wedge.group1.xyzx), 
            /* e15, e25, e35, e1234 */
            float4((float3(right_dual.e12345) * wedge.group0.xyz), 0.0) + float4((float3(wedge.e3215) * right_dual.group1.xyz), 0.0) + float4((right_dual.group2.yzx * wedge.group1.zxy), 0.0) - float4((right_dual.group2.zxy * wedge.group1.yzx), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * wedge.group1
        );
    }
}
extension Flector: AntiRejectViaHorizonFrom<AntiDipoleInversion> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: AntiDipoleInversion) -> Output {
        Motor wedge = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            (float4(other.e4) * float4(this.group0.xyz, this.e3215)) + float4(float3(0.0), (other.e1 * this.e4235) + (other.e2 * this.e4315) + (other.e3 * this.e4125) - (other.e431 * this.e25) - (other.e412 * this.e35) - (other.e321 * this.e45)) - (this.group0.wwwx * float4(other.group3.xyz, other.e423)), 
            /* e235, e315, e125, e5 */
            float4(((other.group3.yzx * this.group0.zxy) - (other.group3.zxy * this.group0.yzx)), 0.0)
        );
        DipoleInversion right_dual = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            float4(right_dual.e1234 * wedge.e415, right_dual.e1234 * wedge.e425, right_dual.e1234 * wedge.e435, -(right_dual.e41 * wedge.e235) - (right_dual.e42 * wedge.e315) - (right_dual.e43 * wedge.e125) - (right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435)) + float4((right_dual.group0.xyz * wedge.group0.www), right_dual.e1234 * wedge.e5), 
            /* e23, e31, e12, e45 */
            float4(right_dual.e1234 * wedge.e235, right_dual.e1234 * wedge.e315, right_dual.e1234 * wedge.e125, -(right_dual.e4235 * wedge.e415) - (right_dual.e4315 * wedge.e425) - (right_dual.e4125 * wedge.e435)) + (float4(wedge.e12345) * right_dual.group1), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_dual.e3215) * wedge.group0.xyz) + (float3(wedge.e12345) * right_dual.group2.xyz) + (right_dual.group3.zxy * wedge.group1.yzx) - (right_dual.group3.yzx * wedge.group1.zxy)), right_dual.e1234 * wedge.e12345), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_dual.group3
        );
    }
}
extension Flector: AntiRejectViaHorizonFrom<AntiDualNum> {
    associatedtype Output = Flector;
    func anti_reject_via_horizon_from(other: AntiDualNum) -> Output {
        Flector wedge = Flector.from_groups(
            /* e15, e25, e35, e45 */
            float4(other.scalar) * this.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar) * this.group1
        );
        DualNum right_dual = DualNum.from_groups(
            /* e5, e12345, 0, 0 */
            float4(other.group0.xy, 0.0, 0.0)
        );
        return Flector.from_groups(
            /* e15, e25, e35, e45 */
            float4(right_dual.e12345) * wedge.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * wedge.group1
        );
    }
}
extension Flector: AntiRejectViaHorizonFrom<AntiFlatPoint> {
    associatedtype Output = FlatPoint;
    func anti_reject_via_horizon_from(other: AntiFlatPoint) -> Output {
        return FlatPoint.from_groups(
            /* e15, e25, e35, e45 */
            float4(other.e321 * this.e45 * -1.0) * float4(other.group0.xyz, other.e321 * -1.0)
        );
    }
}
extension Flector: AntiRejectViaHorizonFrom<AntiFlector> {
    associatedtype Output = Flector;
    func anti_reject_via_horizon_from(other: AntiFlector) -> Output {
        Motor wedge = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4((float3(this.e45) * other.group1.xyz * float3(-1.0)), (other.e1 * this.e4235) + (other.e2 * this.e4315) + (other.e3 * this.e4125) - (other.e321 * this.e45)), 
            /* e235, e315, e125, e5 */
            float4(((other.group1.yzx * this.group0.zxy) - (other.group1.zxy * this.group0.yzx)), 0.0)
        );
        Flector right_dual = Flector.from_groups(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return Flector.from_groups(
            /* e15, e25, e35, e45 */
            float4((right_dual.e4125 * wedge.e315) + (right_dual.e3215 * wedge.e415), (right_dual.e4235 * wedge.e125) + (right_dual.e3215 * wedge.e425), (right_dual.e4315 * wedge.e235) + (right_dual.e3215 * wedge.e435), -(right_dual.e4315 * wedge.e425) - (right_dual.e4125 * wedge.e435)) + (float4(wedge.e12345) * right_dual.group0) - (right_dual.group1.yzxx * float4(wedge.group1.zxy, wedge.e415)), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_dual.group1
        );
    }
}
extension Flector: AntiRejectViaHorizonFrom<AntiLine> {
    associatedtype Output = FlatPoint;
    func anti_reject_via_horizon_from(other: AntiLine) -> Output {
        Plane wedge = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4((float3(this.e45) * other.group0.xyz), -(other.e23 * this.e15) - (other.e31 * this.e25) - (other.e12 * this.e35))
        );
        Line right_dual = Line.from_groups(
            /* e415, e425, e435, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e235, e315, e125, 0 */
            float4(other.group1.xyz * float3(-1.0), 0.0)
        );
        return FlatPoint.from_groups(
            /* e15, e25, e35, e45 */
            float4((right_dual.e415 * wedge.e3215) + (right_dual.e315 * wedge.e4125), (right_dual.e425 * wedge.e3215) + (right_dual.e125 * wedge.e4235), (right_dual.e435 * wedge.e3215) + (right_dual.e235 * wedge.e4315), -(right_dual.e425 * wedge.e4315) - (right_dual.e435 * wedge.e4125)) - (wedge.group0.yzxx * float4(right_dual.group1.xyz.zxy, right_dual.e415))
        );
    }
}
extension Flector: AntiRejectViaHorizonFrom<AntiMotor> {
    associatedtype Output = Flector;
    func anti_reject_via_horizon_from(other: AntiMotor) -> Output {
        Flector wedge = Flector.from_groups(
            /* e15, e25, e35, e45 */
            float4(other.scalar) * this.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar * this.e4235, other.scalar * this.e4315, other.scalar * this.e4125, -(other.e23 * this.e15) - (other.e31 * this.e25) - (other.e12 * this.e35)) + (other.group0 * float4(this.group0.www, this.e3215))
        );
        Motor right_dual = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return Flector.from_groups(
            /* e15, e25, e35, e45 */
            float4((wedge.e4125 * right_dual.e315) + (wedge.e3215 * right_dual.e415), (wedge.e4235 * right_dual.e125) + (wedge.e3215 * right_dual.e425), (wedge.e4315 * right_dual.e235) + (wedge.e3215 * right_dual.e435), -(wedge.e4315 * right_dual.e425) - (wedge.e4125 * right_dual.e435)) + (float4(right_dual.e12345) * wedge.group0) - (wedge.group1.yzxx * float4(right_dual.group1.zxy, right_dual.e415)), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * wedge.group1
        );
    }
}
extension Flector: AntiRejectViaHorizonFrom<AntiPlane> {
    associatedtype Output = Flector;
    func anti_reject_via_horizon_from(other: AntiPlane) -> Output {
        Motor wedge = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4((float3(this.e45) * other.group0.xyz * float3(-1.0)), (other.e1 * this.e4235) + (other.e2 * this.e4315) + (other.e3 * this.e4125)), 
            /* e235, e315, e125, e5 */
            float4(((other.group0.yzx * this.group0.zxy) - (other.group0.zxy * this.group0.yzx)), 0.0)
        );
        Plane right_dual = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return Flector.from_groups(
            /* e15, e25, e35, e45 */
            float4((wedge.e415 * right_dual.e3215) + (wedge.e315 * right_dual.e4125), (wedge.e425 * right_dual.e3215) + (wedge.e125 * right_dual.e4235), (wedge.e435 * right_dual.e3215) + (wedge.e235 * right_dual.e4315), -(wedge.e425 * right_dual.e4315) - (wedge.e435 * right_dual.e4125)) - (right_dual.group0.yzxx * float4(wedge.group1.zxy, wedge.e415)), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_dual.group0
        );
    }
}
extension Flector: AntiRejectViaHorizonFrom<Circle> {
    associatedtype Output = Dipole;
    func anti_reject_via_horizon_from(other: Circle) -> Output {
        AntiScalar wedge = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(-(other.e423 * this.e15) - (other.e431 * this.e25) - (other.e412 * this.e35) - (other.e321 * this.e45), 0.0, 0.0, 0.0)
        );
        Dipole right_dual = Dipole.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, 0 */
            float4(other.group2.xyz, 0.0)
        );
        return Dipole.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(wedge.e12345) * right_dual.group1, 
            /* e15, e25, e35, 0 */
            float4(float3(wedge.e12345) * right_dual.group2.xyz, 0.0)
        );
    }
}
extension Flector: AntiRejectViaHorizonFrom<CircleRotor> {
    associatedtype Output = AntiCircleRotor;
    func anti_reject_via_horizon_from(other: CircleRotor) -> Output {
        AntiScalar wedge = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(-(other.e423 * this.e15) - (other.e431 * this.e25) - (other.e412 * this.e35) - (other.e321 * this.e45), 0.0, 0.0, 0.0)
        );
        AntiCircleRotor right_dual = AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(wedge.e12345) * right_dual.group1, 
            /* e15, e25, e35, scalar */
            float4(wedge.e12345) * right_dual.group2
        );
    }
}
extension Flector: AntiRejectViaHorizonFrom<Dipole> {
    associatedtype Output = Dipole;
    func anti_reject_via_horizon_from(other: Dipole) -> Output {
        Plane wedge = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4((other.e42 * this.e35) + (other.e23 * this.e45), (other.e43 * this.e15) + (other.e31 * this.e45), (other.e41 * this.e25) + (other.e12 * this.e45), -(other.e31 * this.e25) - (other.e12 * this.e35)) - (this.group0.yzxx * float4(other.group0.xyz.zxy, other.e23))
        );
        Circle right_dual = Circle.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, 0 */
            float4(other.group2.xyz * float3(-1.0), 0.0)
        );
        return Dipole.from_groups(
            /* e41, e42, e43, 0 */
            float4((right_dual.group0.xyz.zxy * wedge.group0.yzx) - (right_dual.group0.xyz.yzx * wedge.group0.zxy), 0.0), 
            /* e23, e31, e12, e45 */
            float4(right_dual.e423 * wedge.e3215, right_dual.e431 * wedge.e3215, right_dual.e412 * wedge.e3215, -(right_dual.e425 * wedge.e4315) - (right_dual.e435 * wedge.e4125)) - (right_dual.group1.wwwx * wedge.group0.xyzx), 
            /* e15, e25, e35, 0 */
            float4((float3(wedge.e3215) * right_dual.group1.xyz) + (right_dual.group2.xyz.yzx * wedge.group0.zxy) - (right_dual.group2.xyz.zxy * wedge.group0.yzx), 0.0)
        );
    }
}
extension Flector: AntiRejectViaHorizonFrom<DipoleInversion> {
    associatedtype Output = AntiCircleRotor;
    func anti_reject_via_horizon_from(other: DipoleInversion) -> Output {
        Plane wedge = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4((other.e42 * this.e35) + (other.e23 * this.e45), (other.e43 * this.e15) + (other.e31 * this.e45), (other.e41 * this.e25) + (other.e12 * this.e45), -(other.e31 * this.e25) - (other.e12 * this.e35)) - (this.group0.yzxx * float4(other.group0.xyz.zxy, other.e23))
        );
        AntiDipoleInversion right_dual = AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4((right_dual.group0.xyz.zxy * wedge.group0.yzx) - (right_dual.group0.xyz.yzx * wedge.group0.zxy), 0.0), 
            /* e23, e31, e12, e45 */
            float4(right_dual.e423 * wedge.e3215, right_dual.e431 * wedge.e3215, right_dual.e412 * wedge.e3215, -(right_dual.e425 * wedge.e4315) - (right_dual.e435 * wedge.e4125)) - (right_dual.group1.wwwx * wedge.group0.xyzx), 
            /* e15, e25, e35, scalar */
            float4(right_dual.e125 * wedge.e4315 * -1.0, right_dual.e235 * wedge.e4125 * -1.0, right_dual.e315 * wedge.e4235 * -1.0, (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125)) + (float4(wedge.e3215) * float4(right_dual.group1.xyz, right_dual.e4)) + (wedge.group0.zxyx * float4(right_dual.group2.yzx, right_dual.e1))
        );
    }
}
extension Flector: AntiRejectViaHorizonFrom<MultiVector> {
    associatedtype Output = MultiVector;
    func anti_reject_via_horizon_from(other: MultiVector) -> Output {
        MultiVector wedge = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(0.0, (this.e4235 * other.e1) + (this.e4315 * other.e2) + (this.e4125 * other.e3) + (this.e3215 * other.e4) - (this.e15 * other.e423) - (this.e25 * other.e431) - (this.e35 * other.e412) - (this.e45 * other.e321)), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5, 0, 0, 0 */
            float4(0.0), 
            /* e15, e25, e35, e45 */
            float4(other.scalar) * this.group0, 
            /* e41, e42, e43, 0 */
            float4(0.0), 
            /* e23, e31, e12, 0 */
            float4(0.0), 
            /* e415, e425, e435, e321 */
            float4(((float3(other.e4) * this.group0.xyz) - (float3(this.e45) * other.group1.xyz)), 0.0), 
            /* e423, e431, e412, 0 */
            float4(0.0), 
            /* e235, e315, e125, 0 */
            float4((this.group0.zxy * other.group1.yzx) - (this.group0.yzx * other.group1.zxy), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4((this.e35 * other.e42) + (this.e45 * other.e23), (this.e15 * other.e43) + (this.e45 * other.e31), (this.e25 * other.e41) + (this.e45 * other.e12), -(this.e25 * other.e31) - (this.e35 * other.e12)) + (float4(other.scalar) * this.group1) - (this.group0.yzxx * float4(other.group4.xyz.zxy, other.e23)), 
            /* e1234, 0, 0, 0 */
            float4(0.0)
        );
        MultiVector right_dual = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(other.group0.xy.yx * float2(-1.0, 1.0), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5, 0, 0, 0 */
            float4(other.e3215, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43, 0 */
            float4(other.group7.xyz, 0.0), 
            /* e23, e31, e12, 0 */
            float4(other.group6.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412, 0 */
            float4(other.group4.xyz * float3(-1.0), 0.0), 
            /* e235, e315, e125, 0 */
            float4(other.group3.xyz * float3(-1.0), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        return MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2((right_dual.scalar * wedge.e12345) + (right_dual.e12345 * wedge.scalar) + (right_dual.e1 * wedge.e4235) + (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) + (right_dual.e4 * wedge.e3215) + (right_dual.e5 * wedge.e1234) + (right_dual.e4235 * wedge.e1) + (right_dual.e4315 * wedge.e2) + (right_dual.e4125 * wedge.e3) + (right_dual.e3215 * wedge.e4) + (right_dual.e1234 * wedge.e5) - (right_dual.e15 * wedge.e423) - (right_dual.e25 * wedge.e431) - (right_dual.e35 * wedge.e412) - (right_dual.e45 * wedge.e321) - (right_dual.e41 * wedge.e235) - (right_dual.e42 * wedge.e315) - (right_dual.e43 * wedge.e125) - (right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e321 * wedge.e45) - (right_dual.e423 * wedge.e15) - (right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43), right_dual.e12345 * wedge.e12345), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e15 * wedge.e1234) + (right_dual.e415 * wedge.e321) + (right_dual.e321 * wedge.e415) + (right_dual.e4125 * wedge.e31), (right_dual.e25 * wedge.e1234) + (right_dual.e425 * wedge.e321) + (right_dual.e321 * wedge.e425) + (right_dual.e4235 * wedge.e12), (right_dual.e35 * wedge.e1234) + (right_dual.e435 * wedge.e321) + (right_dual.e321 * wedge.e435) + (right_dual.e4315 * wedge.e23), -(right_dual.e415 * wedge.e423) - (right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412) - (right_dual.e1234 * wedge.e45)) + (float4(right_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_dual.group1) + (wedge.group9.yzxx * float4(right_dual.group5.xyz.zxy, right_dual.e41)) + float4((wedge.group4.xyz * right_dual.group9.www), right_dual.e45 * wedge.e1234) + float4((right_dual.group7.xyz.zxy * wedge.group8.xyz.yzx), right_dual.e42 * wedge.e4315) + float4((right_dual.group8.xyz.yzx * wedge.group7.xyz.zxy), right_dual.e43 * wedge.e4125) - (right_dual.group9.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((float3(right_dual.e1234) * wedge.group3.xyz), right_dual.e4125 * wedge.e43) - float4((right_dual.group4.xyz * wedge.group9.www), right_dual.e423 * wedge.e415) - float4((right_dual.group5.xyz.yzx * wedge.group9.zxy), right_dual.e431 * wedge.e425) - float4((right_dual.group7.xyz.yzx * wedge.group8.xyz.zxy), right_dual.e412 * wedge.e435) - float4((right_dual.group8.xyz.zxy * wedge.group7.xyz.yzx), right_dual.e4235 * wedge.e41), 
            /* e5, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e5) + (right_dual.e5 * wedge.e12345) + (right_dual.e4235 * wedge.e15) + (right_dual.e4315 * wedge.e25) + (right_dual.e4125 * wedge.e35) + (right_dual.e3215 * wedge.e45) - (right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125) - (right_dual.e45 * wedge.e3215) - (right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435), 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4((right_dual.e415 * wedge.e3215) + (right_dual.e315 * wedge.e4125) + (right_dual.e4125 * wedge.e315) + (right_dual.e3215 * wedge.e415), (right_dual.e425 * wedge.e3215) + (right_dual.e125 * wedge.e4235) + (right_dual.e4235 * wedge.e125) + (right_dual.e3215 * wedge.e425), (right_dual.e435 * wedge.e3215) + (right_dual.e235 * wedge.e4315) + (right_dual.e4315 * wedge.e235) + (right_dual.e3215 * wedge.e435), -(right_dual.e435 * wedge.e4125) - (right_dual.e4235 * wedge.e415) - (right_dual.e4315 * wedge.e425) - (right_dual.e4125 * wedge.e435)) + (float4(right_dual.e12345) * wedge.group3) + (float4(wedge.e12345) * right_dual.group3) - (wedge.group9.yzxx * float4(right_dual.group8.xyz.zxy, right_dual.e415)) - float4((wedge.group8.xyz.zxy * right_dual.group9.yzx), right_dual.e425 * wedge.e4315), 
            /* e41, e42, e43, 0 */
            float4((float3(right_dual.e12345) * wedge.group4.xyz) + (float3(right_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_dual.group4.xyz) + (float3(wedge.e1234) * right_dual.group6.xyz) + (right_dual.group7.xyz.zxy * wedge.group9.yzx) + (wedge.group7.xyz.zxy * right_dual.group9.yzx) - (right_dual.group7.xyz.yzx * wedge.group9.zxy) - (wedge.group7.xyz.yzx * right_dual.group9.zxy), 0.0), 
            /* e23, e31, e12, 0 */
            float4((float3(right_dual.e12345) * wedge.group5.xyz) + (float3(right_dual.e3215) * wedge.group7.xyz) + (float3(right_dual.e1234) * wedge.group8.xyz) + (float3(wedge.e12345) * right_dual.group5.xyz) + (float3(wedge.e3215) * right_dual.group7.xyz) + (float3(wedge.e1234) * right_dual.group8.xyz) - (float3(right_dual.e321) * wedge.group9.xyz) - (float3(wedge.e321) * right_dual.group9.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            (float4(right_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_dual.group6) + (right_dual.group9.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - float4((right_dual.group9.zxy * wedge.group9.yzx), right_dual.e1234 * wedge.e3215), 
            /* e423, e431, e412, 0 */
            float4((float3(right_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_dual.group7.xyz) + (float3(wedge.e1234) * right_dual.group9.xyz) - (float3(right_dual.e1234) * wedge.group9.xyz), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(right_dual.e12345) * wedge.group8.xyz) + (float3(right_dual.e3215) * wedge.group9.xyz) + (float3(wedge.e12345) * right_dual.group8.xyz) - (float3(wedge.e3215) * right_dual.group9.xyz), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            (float4(right_dual.e12345) * wedge.group9) + (float4(wedge.e12345) * right_dual.group9), 
            /* e1234, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e1234) + (right_dual.e1234 * wedge.e12345), 0.0, 0.0, 0.0)
        );
    }
}
extension Flector: AntiRejectViaHorizonFrom<RoundPoint> {
    associatedtype Output = DipoleInversion;
    func anti_reject_via_horizon_from(other: RoundPoint) -> Output {
        Motor wedge = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4(this.e45 * other.e1 * -1.0, this.e45 * other.e2 * -1.0, this.e45 * other.e3 * -1.0, (this.e4315 * other.e2) + (this.e4125 * other.e3) + (this.e3215 * other.e4)) + (other.group0.wwwx * float4(this.group0.xyz, this.e4235)), 
            /* e235, e315, e125, e5 */
            float4(((this.group0.zxy * other.group0.yzx) - (this.group0.yzx * other.group0.zxy)), 0.0)
        );
        Sphere right_dual = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        return DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(right_dual.e1234) * wedge.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4((float3(right_dual.e1234) * wedge.group1.xyz), -(wedge.e415 * right_dual.e4235) - (wedge.e425 * right_dual.e4315) - (wedge.e435 * right_dual.e4125)), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_dual.e3215) * wedge.group0.xyz) + (wedge.group1.yzx * right_dual.group0.zxy) - (wedge.group1.zxy * right_dual.group0.yzx)), wedge.e12345 * right_dual.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_dual.group0
        );
    }
}
extension Flector: AntiRejectViaHorizonFrom<Scalar> {
    associatedtype Output = Flector;
    func anti_reject_via_horizon_from(other: Scalar) -> Output {
        Flector wedge = Flector.from_groups(
            /* e15, e25, e35, e45 */
            float4(other.scalar) * this.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar) * this.group1
        );
        AntiScalar right_dual = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(other.scalar, 0.0, 0.0, 0.0)
        );
        return Flector.from_groups(
            /* e15, e25, e35, e45 */
            float4(right_dual.e12345) * wedge.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * wedge.group1
        );
    }
}
extension Flector: AntiRejectViaHorizonFrom<VersorEven> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: VersorEven) -> Output {
        Motor wedge = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            (other.group3.wwwx * float4(this.group0.xyz, this.e4235)) + float4(float3(0.0), (this.e4315 * other.e2) + (this.e4125 * other.e3) + (this.e3215 * other.e4) - (this.e25 * other.e431) - (this.e35 * other.e412) - (this.e45 * other.e321)) - (this.group0.wwwx * float4(other.group3.xyz, other.e423)), 
            /* e235, e315, e125, e5 */
            float4(((this.group0.zxy * other.group3.yzx) - (this.group0.yzx * other.group3.zxy)), 0.0)
        );
        VersorOdd right_dual = VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            (wedge.group0 * float4(right_dual.group2.www, right_dual.scalar)) + float4(float3(0.0), -(wedge.e415 * right_dual.e23) - (wedge.e425 * right_dual.e31) - (wedge.e435 * right_dual.e12) - (wedge.e235 * right_dual.e41) - (wedge.e315 * right_dual.e42) - (wedge.e125 * right_dual.e43)) + float4((wedge.group0.www * right_dual.group0.xyz), wedge.e5 * right_dual.e1234), 
            /* e23, e31, e12, e45 */
            float4(wedge.e235 * right_dual.e1234, wedge.e315 * right_dual.e1234, wedge.e125 * right_dual.e1234, -(wedge.e415 * right_dual.e4235) - (wedge.e425 * right_dual.e4315) - (wedge.e435 * right_dual.e4125)) + (float4(wedge.e12345) * right_dual.group1), 
            /* e15, e25, e35, e1234 */
            float4(((float3(wedge.e12345) * right_dual.group2.xyz) + (float3(right_dual.e3215) * wedge.group0.xyz) + (wedge.group1.yzx * right_dual.group3.zxy) - (wedge.group1.zxy * right_dual.group3.yzx)), wedge.e12345 * right_dual.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_dual.group3
        );
    }
}
extension Flector: AntiRejectViaHorizonFrom<VersorOdd> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: VersorOdd) -> Output {
        Flector wedge = Flector.from_groups(
            /* e15, e25, e35, e45 */
            float4(other.scalar) * this.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4((this.e45 * other.e23) + (this.e4235 * other.scalar), (this.e45 * other.e31) + (this.e4315 * other.scalar), (this.e45 * other.e12) + (this.e4125 * other.scalar), -(this.e25 * other.e31) - (this.e35 * other.e12)) + (other.group0.yzxw * float4(this.group0.zxy, this.e3215)) - (this.group0.yzxx * float4(other.group0.zxy, other.e23))
        );
        VersorEven right_dual = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            (wedge.group1.yzxx * float4(right_dual.group0.zxy, right_dual.e1)) + float4(float3(0.0), (wedge.e4315 * right_dual.e2) + (wedge.e4125 * right_dual.e3) + (wedge.e3215 * right_dual.e4) - (wedge.e25 * right_dual.e431) - (wedge.e35 * right_dual.e412) - (wedge.e45 * right_dual.e321)) - (right_dual.group0.yzxx * float4(wedge.group1.zxy, wedge.e15)), 
            /* e23, e31, e12, e45 */
            (right_dual.group0 * float4(wedge.group1.www, wedge.e45)) + float4(float3(0.0), -(wedge.e4315 * right_dual.e425) - (wedge.e4125 * right_dual.e435)) - (wedge.group1.xyzx * right_dual.group1.wwwx), 
            /* e15, e25, e35, e1234 */
            float4((float3(wedge.e3215) * right_dual.group1.xyz), 0.0) + float4((float3(right_dual.e12345) * wedge.group0.xyz), 0.0) + float4((wedge.group1.zxy * right_dual.group2.yzx), 0.0) - float4((wedge.group1.yzx * right_dual.group2.zxy), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * wedge.group1
        );
    }
}
extension Line {
    // Fancy infix trick
    func operator/(_rhs: AntiRejectViaHorizonFromInfix) -> AntiRejectViaHorizonFromInfixPartial<Line> {
        return AntiRejectViaHorizonFromInfixPartial { a: this };
    }
}
extension Line: AntiRejectViaHorizonFrom<AntiCircleRotor> {
    associatedtype Output = VersorEven;
    func anti_reject_via_horizon_from(other: AntiCircleRotor) -> Output {
        Motor wedge = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4((float3(other.scalar) * this.group0.xyz), -(other.e41 * this.e235) - (other.e42 * this.e315) - (other.e43 * this.e125) - (other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435)), 
            /* e235, e315, e125, e5 */
            float4(float3(1.0), 0.0) * float4(this.group1.xyz, 0.0) * float4(other.group2.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        CircleRotor right_dual = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4(wedge.e12345) * float4(right_dual.group0.xyz, right_dual.e12345), 
            /* e415, e425, e435, e321 */
            float4(((float3(right_dual.e12345) * wedge.group0.xyz) + (float3(wedge.e12345) * right_dual.group1.xyz)), right_dual.e321 * wedge.e12345), 
            /* e235, e315, e125, e5 */
            float4(right_dual.e12345 * wedge.e235, right_dual.e12345 * wedge.e315, right_dual.e12345 * wedge.e125, -(right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435)) + (right_dual.group2 * float4(wedge.group0.www, wedge.e5)), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e412 * wedge.e315) + (right_dual.e321 * wedge.e415), (right_dual.e423 * wedge.e125) + (right_dual.e321 * wedge.e425), (right_dual.e431 * wedge.e235) + (right_dual.e321 * wedge.e435), -(right_dual.e431 * wedge.e425) - (right_dual.e412 * wedge.e435)) - float4((right_dual.group0.xyz.yzx * wedge.group1.zxy), right_dual.e423 * wedge.e415)
        );
    }
}
extension Line: AntiRejectViaHorizonFrom<AntiDipoleInversion> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: AntiDipoleInversion) -> Output {
        Plane wedge = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(-(other.e4 * this.e235) - (other.e3 * this.e425), -(other.e4 * this.e315) - (other.e1 * this.e435), -(other.e4 * this.e125) - (other.e2 * this.e415), (other.e2 * this.e315) + (other.e3 * this.e125)) + (other.group3.yzxx * float4(this.group0.xyz.zxy, this.e235))
        );
        DipoleInversion right_dual = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(right_dual.e1234) * wedge.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            float4(((right_dual.group3.yzx * wedge.group0.zxy) - (right_dual.group3.zxy * wedge.group0.yzx)), right_dual.e1234 * wedge.e3215 * -1.0), 
            /* e235, e315, e125, e4 */
            float4(right_dual.e4235 * wedge.e3215 * -1.0, right_dual.e4315 * wedge.e3215 * -1.0, right_dual.e4125 * wedge.e3215 * -1.0, (right_dual.e42 * wedge.e4315) + (right_dual.e43 * wedge.e4125)) + (wedge.group0.xyzx * float4(right_dual.group3.www, right_dual.e41)), 
            /* e1, e2, e3, e5 */
            float4(right_dual.e12 * wedge.e4315, right_dual.e23 * wedge.e4125, right_dual.e31 * wedge.e4235, -(right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125)) - (float4(wedge.e3215) * float4(right_dual.group0.xyz, right_dual.e45)) - (wedge.group0.zxyx * float4(right_dual.group1.yzx, right_dual.e15))
        );
    }
}
extension Line: AntiRejectViaHorizonFrom<AntiDualNum> {
    associatedtype Output = Line;
    func anti_reject_via_horizon_from(other: AntiDualNum) -> Output {
        Line wedge = Line.from_groups(
            /* e415, e425, e435, 0 */
            float4(float3(other.scalar) * this.group0.xyz, 0.0), 
            /* e235, e315, e125, 0 */
            float4(float3(other.scalar) * this.group1.xyz, 0.0)
        );
        DualNum right_dual = DualNum.from_groups(
            /* e5, e12345, 0, 0 */
            float4(other.group0.xy, 0.0, 0.0)
        );
        return Line.from_groups(
            /* e415, e425, e435, 0 */
            float4(float3(right_dual.e12345) * wedge.group0.xyz, 0.0), 
            /* e235, e315, e125, 0 */
            float4(float3(right_dual.e12345) * wedge.group1.xyz, 0.0)
        );
    }
}
extension Line: AntiRejectViaHorizonFrom<AntiFlector> {
    associatedtype Output = Motor;
    func anti_reject_via_horizon_from(other: AntiFlector) -> Output {
        Plane wedge = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(other.e3 * this.e425 * -1.0, other.e1 * this.e435 * -1.0, other.e2 * this.e415 * -1.0, (other.e2 * this.e315) + (other.e3 * this.e125)) + (other.group1.yzxx * float4(this.group0.xyz.zxy, this.e235))
        );
        Flector right_dual = Flector.from_groups(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4(((right_dual.group1.yzx * wedge.group0.zxy) - (right_dual.group1.zxy * wedge.group0.yzx)), 0.0), 
            /* e235, e315, e125, e5 */
            float4(right_dual.e3215 * wedge.e4235, right_dual.e3215 * wedge.e4315, right_dual.e3215 * wedge.e4125, -(right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125) - (right_dual.e45 * wedge.e3215)) - (wedge.group0.wwwx * float4(right_dual.group1.xyz, right_dual.e15))
        );
    }
}
extension Line: AntiRejectViaHorizonFrom<AntiLine> {
    associatedtype Output = Line;
    func anti_reject_via_horizon_from(other: AntiLine) -> Output {
        AntiScalar wedge = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(-(other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435), 0.0, 0.0, 0.0)
        );
        Line right_dual = Line.from_groups(
            /* e415, e425, e435, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e235, e315, e125, 0 */
            float4(other.group1.xyz * float3(-1.0), 0.0)
        );
        return Line.from_groups(
            /* e415, e425, e435, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e235, e315, e125, 0 */
            float4(float3(wedge.e12345) * right_dual.group1.xyz, 0.0)
        );
    }
}
extension Line: AntiRejectViaHorizonFrom<AntiMotor> {
    associatedtype Output = Motor;
    func anti_reject_via_horizon_from(other: AntiMotor) -> Output {
        Motor wedge = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4((float3(other.scalar) * this.group0.xyz), -(other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435)), 
            /* e235, e315, e125, e5 */
            float4(float3(1.0), 0.0) * float4(this.group1.xyz, 0.0) * float4(other.group0.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        Motor right_dual = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4(((float3(right_dual.e12345) * wedge.group0.xyz) + (float3(wedge.e12345) * right_dual.group0.xyz)), right_dual.e12345 * wedge.e12345), 
            /* e235, e315, e125, e5 */
            (float4(right_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_dual.group1) + float4(float3(0.0), -(right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435))
        );
    }
}
extension Line: AntiRejectViaHorizonFrom<AntiPlane> {
    associatedtype Output = Line;
    func anti_reject_via_horizon_from(other: AntiPlane) -> Output {
        Plane wedge = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(other.e3 * this.e425 * -1.0, other.e1 * this.e435 * -1.0, other.e2 * this.e415 * -1.0, (other.e2 * this.e315) + (other.e3 * this.e125)) + (other.group0.yzxx * float4(this.group0.xyz.zxy, this.e235))
        );
        Plane right_dual = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return Line.from_groups(
            /* e415, e425, e435, 0 */
            float4((right_dual.group0.yzx * wedge.group0.zxy) - (right_dual.group0.zxy * wedge.group0.yzx), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(right_dual.e3215) * wedge.group0.xyz) - (float3(wedge.e3215) * right_dual.group0.xyz), 0.0)
        );
    }
}
extension Line: AntiRejectViaHorizonFrom<Dipole> {
    associatedtype Output = Circle;
    func anti_reject_via_horizon_from(other: Dipole) -> Output {
        AntiScalar wedge = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(-(other.e41 * this.e235) - (other.e42 * this.e315) - (other.e43 * this.e125) - (other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435), 0.0, 0.0, 0.0)
        );
        Circle right_dual = Circle.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, 0 */
            float4(other.group2.xyz * float3(-1.0), 0.0)
        );
        return Circle.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(wedge.e12345) * right_dual.group1, 
            /* e235, e315, e125, 0 */
            float4(float3(wedge.e12345) * right_dual.group2.xyz, 0.0)
        );
    }
}
extension Line: AntiRejectViaHorizonFrom<DipoleInversion> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: DipoleInversion) -> Output {
        AntiScalar wedge = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(-(other.e41 * this.e235) - (other.e42 * this.e315) - (other.e43 * this.e125) - (other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435), 0.0, 0.0, 0.0)
        );
        AntiDipoleInversion right_dual = AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(wedge.e12345) * right_dual.group1, 
            /* e235, e315, e125, e4 */
            float4(wedge.e12345) * right_dual.group2, 
            /* e1, e2, e3, e5 */
            float4(wedge.e12345) * right_dual.group3
        );
    }
}
extension Line: AntiRejectViaHorizonFrom<MultiVector> {
    associatedtype Output = MultiVector;
    func anti_reject_via_horizon_from(other: MultiVector) -> Output {
        MultiVector wedge = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(0.0, -(this.e415 * other.e23) - (this.e425 * other.e31) - (this.e435 * other.e12) - (this.e235 * other.e41) - (this.e315 * other.e42) - (this.e125 * other.e43)), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5, 0, 0, 0 */
            float4(0.0), 
            /* e15, e25, e35, e45 */
            float4(0.0), 
            /* e41, e42, e43, 0 */
            float4(0.0), 
            /* e23, e31, e12, 0 */
            float4(0.0), 
            /* e415, e425, e435, e321 */
            float4(other.group0.xy.xx, other.scalar, 0.0) * float4(float3(1.0), 0.0) * float4(this.group0.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e423, e431, e412, 0 */
            float4(0.0), 
            /* e235, e315, e125, 0 */
            float4(float3(other.scalar) * this.group1.xyz, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(-(this.e425 * other.e3) - (this.e235 * other.e4), -(this.e435 * other.e1) - (this.e315 * other.e4), -(this.e415 * other.e2) - (this.e125 * other.e4), (this.e315 * other.e2) + (this.e125 * other.e3)) + (other.group1.yzxx * float4(this.group0.xyz.zxy, this.e235)), 
            /* e1234, 0, 0, 0 */
            float4(0.0)
        );
        MultiVector right_dual = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(other.group0.xy.yx * float2(-1.0, 1.0), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5, 0, 0, 0 */
            float4(other.e3215, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43, 0 */
            float4(other.group7.xyz, 0.0), 
            /* e23, e31, e12, 0 */
            float4(other.group6.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412, 0 */
            float4(other.group4.xyz * float3(-1.0), 0.0), 
            /* e235, e315, e125, 0 */
            float4(other.group3.xyz * float3(-1.0), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        return MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2((right_dual.scalar * wedge.e12345) + (right_dual.e12345 * wedge.scalar) + (right_dual.e1 * wedge.e4235) + (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) + (right_dual.e4 * wedge.e3215) + (right_dual.e5 * wedge.e1234) + (right_dual.e4235 * wedge.e1) + (right_dual.e4315 * wedge.e2) + (right_dual.e4125 * wedge.e3) + (right_dual.e3215 * wedge.e4) + (right_dual.e1234 * wedge.e5) - (right_dual.e15 * wedge.e423) - (right_dual.e25 * wedge.e431) - (right_dual.e35 * wedge.e412) - (right_dual.e45 * wedge.e321) - (right_dual.e41 * wedge.e235) - (right_dual.e42 * wedge.e315) - (right_dual.e43 * wedge.e125) - (right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e321 * wedge.e45) - (right_dual.e423 * wedge.e15) - (right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43), right_dual.e12345 * wedge.e12345), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e15 * wedge.e1234) + (right_dual.e415 * wedge.e321) + (right_dual.e321 * wedge.e415) + (right_dual.e4125 * wedge.e31), (right_dual.e25 * wedge.e1234) + (right_dual.e425 * wedge.e321) + (right_dual.e321 * wedge.e425) + (right_dual.e4235 * wedge.e12), (right_dual.e35 * wedge.e1234) + (right_dual.e435 * wedge.e321) + (right_dual.e321 * wedge.e435) + (right_dual.e4315 * wedge.e23), -(right_dual.e415 * wedge.e423) - (right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412) - (right_dual.e1234 * wedge.e45)) + (float4(right_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_dual.group1) + (wedge.group9.yzxx * float4(right_dual.group5.xyz.zxy, right_dual.e41)) + float4((wedge.group4.xyz * right_dual.group9.www), right_dual.e45 * wedge.e1234) + float4((right_dual.group7.xyz.zxy * wedge.group8.xyz.yzx), right_dual.e42 * wedge.e4315) + float4((right_dual.group8.xyz.yzx * wedge.group7.xyz.zxy), right_dual.e43 * wedge.e4125) - (right_dual.group9.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((float3(right_dual.e1234) * wedge.group3.xyz), right_dual.e4125 * wedge.e43) - float4((right_dual.group4.xyz * wedge.group9.www), right_dual.e423 * wedge.e415) - float4((right_dual.group5.xyz.yzx * wedge.group9.zxy), right_dual.e431 * wedge.e425) - float4((right_dual.group7.xyz.yzx * wedge.group8.xyz.zxy), right_dual.e412 * wedge.e435) - float4((right_dual.group8.xyz.zxy * wedge.group7.xyz.yzx), right_dual.e4235 * wedge.e41), 
            /* e5, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e5) + (right_dual.e5 * wedge.e12345) + (right_dual.e4235 * wedge.e15) + (right_dual.e4315 * wedge.e25) + (right_dual.e4125 * wedge.e35) + (right_dual.e3215 * wedge.e45) - (right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125) - (right_dual.e45 * wedge.e3215) - (right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435), 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4((right_dual.e415 * wedge.e3215) + (right_dual.e315 * wedge.e4125) + (right_dual.e4125 * wedge.e315) + (right_dual.e3215 * wedge.e415), (right_dual.e425 * wedge.e3215) + (right_dual.e125 * wedge.e4235) + (right_dual.e4235 * wedge.e125) + (right_dual.e3215 * wedge.e425), (right_dual.e435 * wedge.e3215) + (right_dual.e235 * wedge.e4315) + (right_dual.e4315 * wedge.e235) + (right_dual.e3215 * wedge.e435), -(right_dual.e435 * wedge.e4125) - (right_dual.e4235 * wedge.e415) - (right_dual.e4315 * wedge.e425) - (right_dual.e4125 * wedge.e435)) + (float4(right_dual.e12345) * wedge.group3) + (float4(wedge.e12345) * right_dual.group3) - (wedge.group9.yzxx * float4(right_dual.group8.xyz.zxy, right_dual.e415)) - float4((wedge.group8.xyz.zxy * right_dual.group9.yzx), right_dual.e425 * wedge.e4315), 
            /* e41, e42, e43, 0 */
            float4((float3(right_dual.e12345) * wedge.group4.xyz) + (float3(right_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_dual.group4.xyz) + (float3(wedge.e1234) * right_dual.group6.xyz) + (right_dual.group7.xyz.zxy * wedge.group9.yzx) + (wedge.group7.xyz.zxy * right_dual.group9.yzx) - (right_dual.group7.xyz.yzx * wedge.group9.zxy) - (wedge.group7.xyz.yzx * right_dual.group9.zxy), 0.0), 
            /* e23, e31, e12, 0 */
            float4((float3(right_dual.e12345) * wedge.group5.xyz) + (float3(right_dual.e3215) * wedge.group7.xyz) + (float3(right_dual.e1234) * wedge.group8.xyz) + (float3(wedge.e12345) * right_dual.group5.xyz) + (float3(wedge.e3215) * right_dual.group7.xyz) + (float3(wedge.e1234) * right_dual.group8.xyz) - (float3(right_dual.e321) * wedge.group9.xyz) - (float3(wedge.e321) * right_dual.group9.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            (float4(right_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_dual.group6) + (right_dual.group9.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - float4((right_dual.group9.zxy * wedge.group9.yzx), right_dual.e1234 * wedge.e3215), 
            /* e423, e431, e412, 0 */
            float4((float3(right_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_dual.group7.xyz) + (float3(wedge.e1234) * right_dual.group9.xyz) - (float3(right_dual.e1234) * wedge.group9.xyz), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(right_dual.e12345) * wedge.group8.xyz) + (float3(right_dual.e3215) * wedge.group9.xyz) + (float3(wedge.e12345) * right_dual.group8.xyz) - (float3(wedge.e3215) * right_dual.group9.xyz), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            (float4(right_dual.e12345) * wedge.group9) + (float4(wedge.e12345) * right_dual.group9), 
            /* e1234, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e1234) + (right_dual.e1234 * wedge.e12345), 0.0, 0.0, 0.0)
        );
    }
}
extension Line: AntiRejectViaHorizonFrom<RoundPoint> {
    associatedtype Output = Circle;
    func anti_reject_via_horizon_from(other: RoundPoint) -> Output {
        Plane wedge = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(-(this.e425 * other.e3) - (this.e235 * other.e4), -(this.e435 * other.e1) - (this.e315 * other.e4), -(this.e415 * other.e2) - (this.e125 * other.e4), (this.e315 * other.e2) + (this.e125 * other.e3)) + (other.group0.yzxx * float4(this.group0.xyz.zxy, this.e235))
        );
        Sphere right_dual = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        return Circle.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(right_dual.e1234) * wedge.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            float4(((wedge.group0.zxy * right_dual.group0.yzx) - (wedge.group0.yzx * right_dual.group0.zxy)), wedge.e3215 * right_dual.e1234 * -1.0), 
            /* e235, e315, e125, 0 */
            float4((float3(right_dual.e3215) * wedge.group0.xyz) - (float3(wedge.e3215) * right_dual.group0.xyz), 0.0)
        );
    }
}
extension Line: AntiRejectViaHorizonFrom<Scalar> {
    associatedtype Output = Line;
    func anti_reject_via_horizon_from(other: Scalar) -> Output {
        Line wedge = Line.from_groups(
            /* e415, e425, e435, 0 */
            float4(float3(other.scalar) * this.group0.xyz, 0.0), 
            /* e235, e315, e125, 0 */
            float4(float3(other.scalar) * this.group1.xyz, 0.0)
        );
        AntiScalar right_dual = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(other.scalar, 0.0, 0.0, 0.0)
        );
        return Line.from_groups(
            /* e415, e425, e435, 0 */
            float4(float3(right_dual.e12345) * wedge.group0.xyz, 0.0), 
            /* e235, e315, e125, 0 */
            float4(float3(right_dual.e12345) * wedge.group1.xyz, 0.0)
        );
    }
}
extension Line: AntiRejectViaHorizonFrom<VersorEven> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: VersorEven) -> Output {
        Plane wedge = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(-(this.e425 * other.e3) - (this.e235 * other.e4), -(this.e435 * other.e1) - (this.e315 * other.e4), -(this.e415 * other.e2) - (this.e125 * other.e4), (this.e315 * other.e2) + (this.e125 * other.e3)) + (other.group3.yzxx * float4(this.group0.xyz.zxy, this.e235))
        );
        VersorOdd right_dual = VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(right_dual.e1234) * wedge.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            float4(((wedge.group0.zxy * right_dual.group3.yzx) - (wedge.group0.yzx * right_dual.group3.zxy)), wedge.e3215 * right_dual.e1234 * -1.0), 
            /* e235, e315, e125, e4 */
            float4(wedge.e3215 * right_dual.e4235 * -1.0, wedge.e3215 * right_dual.e4315 * -1.0, wedge.e3215 * right_dual.e4125 * -1.0, (wedge.e4315 * right_dual.e42) + (wedge.e4125 * right_dual.e43)) + (wedge.group0.xyzx * float4(right_dual.group3.www, right_dual.e41)), 
            /* e1, e2, e3, e5 */
            float4(wedge.e4315 * right_dual.e12, wedge.e4125 * right_dual.e23, wedge.e4235 * right_dual.e31, -(wedge.e4125 * right_dual.e35) - (wedge.e3215 * right_dual.e45)) - (wedge.group0.zxyx * float4(right_dual.group1.yzx, right_dual.e15)) - (wedge.group0.wwwy * float4(right_dual.group0.xyz, right_dual.e25))
        );
    }
}
extension Line: AntiRejectViaHorizonFrom<VersorOdd> {
    associatedtype Output = VersorEven;
    func anti_reject_via_horizon_from(other: VersorOdd) -> Output {
        Motor wedge = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4((float3(other.scalar) * this.group0.xyz), -(this.e415 * other.e23) - (this.e425 * other.e31) - (this.e435 * other.e12) - (this.e235 * other.e41) - (this.e315 * other.e42) - (this.e125 * other.e43)), 
            /* e235, e315, e125, e5 */
            float4(float3(1.0), 0.0) * float4(this.group1.xyz, 0.0) * float4(other.group0.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        VersorEven right_dual = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4(wedge.e12345) * right_dual.group0, 
            /* e415, e425, e435, e321 */
            float4(((float3(wedge.e12345) * right_dual.group1.xyz) + (float3(right_dual.e12345) * wedge.group0.xyz)), wedge.e12345 * right_dual.e321), 
            /* e235, e315, e125, e5 */
            (float4(wedge.e12345) * right_dual.group2) + (float4(right_dual.e12345) * wedge.group1) + float4(float3(0.0), -(wedge.e415 * right_dual.e235) - (wedge.e425 * right_dual.e315) - (wedge.e435 * right_dual.e125) - (wedge.e235 * right_dual.e415) - (wedge.e315 * right_dual.e425) - (wedge.e125 * right_dual.e435)), 
            /* e1, e2, e3, e4 */
            float4((wedge.e12345 * right_dual.e1) + (wedge.e315 * right_dual.e412), (wedge.e12345 * right_dual.e2) + (wedge.e125 * right_dual.e423), (wedge.e12345 * right_dual.e3) + (wedge.e235 * right_dual.e431), -(wedge.e425 * right_dual.e431) - (wedge.e435 * right_dual.e412)) + (wedge.group0 * float4(right_dual.group1.www, right_dual.e4)) - (right_dual.group0.yzxx * float4(wedge.group1.zxy, wedge.e415))
        );
    }
}
extension Motor {
    // Fancy infix trick
    func operator/(_rhs: AntiRejectViaHorizonFromInfix) -> AntiRejectViaHorizonFromInfixPartial<Motor> {
        return AntiRejectViaHorizonFromInfixPartial { a: this };
    }
}
extension Motor: AntiRejectViaHorizonFrom<AntiCircleRotor> {
    associatedtype Output = VersorEven;
    func anti_reject_via_horizon_from(other: AntiCircleRotor) -> Output {
        Motor wedge = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4(other.scalar * this.e415, other.scalar * this.e425, other.scalar * this.e435, -(other.e41 * this.e235) - (other.e42 * this.e315) - (other.e43 * this.e125) - (other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435)) + float4((other.group0.xyz * this.group1.www), other.scalar * this.e12345), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.scalar) * this.group1.xyz) + (float3(this.e5) * other.group1.xyz)), other.scalar * this.e5)
        );
        CircleRotor right_dual = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4(wedge.e12345) * float4(right_dual.group0.xyz, right_dual.e12345), 
            /* e415, e425, e435, e321 */
            float4(((float3(right_dual.e12345) * wedge.group0.xyz) + (float3(wedge.e12345) * right_dual.group1.xyz)), right_dual.e321 * wedge.e12345), 
            /* e235, e315, e125, e5 */
            float4(right_dual.e12345 * wedge.e235, right_dual.e12345 * wedge.e315, right_dual.e12345 * wedge.e125, -(right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435)) + (right_dual.group2 * float4(wedge.group0.www, wedge.e5)), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e412 * wedge.e315) + (right_dual.e321 * wedge.e415), (right_dual.e423 * wedge.e125) + (right_dual.e321 * wedge.e425), (right_dual.e431 * wedge.e235) + (right_dual.e321 * wedge.e435), -(right_dual.e431 * wedge.e425) - (right_dual.e412 * wedge.e435)) - float4((right_dual.group0.xyz.yzx * wedge.group1.zxy), right_dual.e423 * wedge.e415)
        );
    }
}
extension Motor: AntiRejectViaHorizonFrom<AntiDipoleInversion> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: AntiDipoleInversion) -> Output {
        Flector wedge = Flector.from_groups(
            /* e15, e25, e35, e45 */
            float4(this.e5) * float4(other.group3.xyz, other.e4) * float4(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(-(other.e4 * this.e235) - (other.e3 * this.e425), -(other.e4 * this.e315) - (other.e1 * this.e435), -(other.e4 * this.e125) - (other.e2 * this.e415), (other.e2 * this.e315) + (other.e3 * this.e125)) + (other.group3.yzxx * float4(this.group0.zxy, this.e235)) - (float4(this.e5) * float4(other.group0.xyz, other.e321))
        );
        DipoleInversion right_dual = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(right_dual.e1234) * wedge.group1.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            float4(((right_dual.group3.yzx * wedge.group1.zxy) - (right_dual.group3.zxy * wedge.group1.yzx)), right_dual.e1234 * wedge.e3215 * -1.0), 
            /* e235, e315, e125, e4 */
            (wedge.group1.xyzx * float4(right_dual.group3.www, right_dual.e41)) + float4(float3(0.0), (right_dual.e42 * wedge.e4315) + (right_dual.e43 * wedge.e4125)) - float4((wedge.group1.www * right_dual.group3.xyz), right_dual.e1234 * wedge.e45), 
            /* e1, e2, e3, e5 */
            float4(float3(0.0), (right_dual.e4315 * wedge.e25) + (right_dual.e4125 * wedge.e35) + (right_dual.e3215 * wedge.e45) - (right_dual.e35 * wedge.e4125)) + float4((right_dual.group1.zxy * wedge.group1.yzx), right_dual.e4235 * wedge.e15) - (float4(wedge.e3215) * float4(right_dual.group0.xyz, right_dual.e45)) - (right_dual.group2.wwwy * float4(wedge.group0.xyz, wedge.e4315)) - (wedge.group1.zxyx * float4(right_dual.group1.yzx, right_dual.e15))
        );
    }
}
extension Motor: AntiRejectViaHorizonFrom<AntiDualNum> {
    associatedtype Output = Motor;
    func anti_reject_via_horizon_from(other: AntiDualNum) -> Output {
        Motor wedge = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4(other.scalar) * this.group0, 
            /* e235, e315, e125, e5 */
            float4(other.scalar) * this.group1
        );
        DualNum right_dual = DualNum.from_groups(
            /* e5, e12345, 0, 0 */
            float4(other.group0.xy, 0.0, 0.0)
        );
        return Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4(right_dual.e12345) * wedge.group0, 
            /* e235, e315, e125, e5 */
            float4(right_dual.group0.xy.yy, right_dual.e12345, (right_dual.e5 * wedge.e12345) + (right_dual.e12345 * wedge.e5)) * float4(wedge.group1.xyz, 1.0)
        );
    }
}
extension Motor: AntiRejectViaHorizonFrom<AntiFlatPoint> {
    associatedtype Output = DualNum;
    func anti_reject_via_horizon_from(other: AntiFlatPoint) -> Output {
        return DualNum.from_groups(
            /* e5, e12345, 0, 0 */
            float4(float2(float4(other.group0.xyz, other.e321 * -1.0)[3] * other.e321 * this.e5 * -1.0, 1.0) * float2(-1.0, 0.0), 0.0, 0.0)
        );
    }
}
extension Motor: AntiRejectViaHorizonFrom<AntiFlector> {
    associatedtype Output = Motor;
    func anti_reject_via_horizon_from(other: AntiFlector) -> Output {
        Flector wedge = Flector.from_groups(
            /* e15, e25, e35, e45 */
            float4(float3(1.0), 0.0) * float4(this.group1.www, 0.0) * float4(other.group1.xyz, 0.0) * float4(-1.0, -1.0, -1.0, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            (other.group1.yzxx * float4(this.group0.zxy, this.e235)) + float4(float3(0.0), (other.e2 * this.e315) + (other.e3 * this.e125)) - float4((other.group1.zxy * this.group0.yzx), other.e321 * this.e5)
        );
        Flector right_dual = Flector.from_groups(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4(((right_dual.group1.yzx * wedge.group1.zxy) - (right_dual.group1.zxy * wedge.group1.yzx)), 0.0), 
            /* e235, e315, e125, e5 */
            (right_dual.group1.wwwx * float4(wedge.group1.xyz, wedge.e15)) + float4(float3(0.0), (right_dual.e4315 * wedge.e25) + (right_dual.e4125 * wedge.e35) + (right_dual.e3215 * wedge.e45) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125) - (right_dual.e45 * wedge.e3215)) - (wedge.group1.wwwx * float4(right_dual.group1.xyz, right_dual.e15))
        );
    }
}
extension Motor: AntiRejectViaHorizonFrom<AntiLine> {
    associatedtype Output = Motor;
    func anti_reject_via_horizon_from(other: AntiLine) -> Output {
        Motor wedge = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4(float3(0.0), -(other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435)), 
            /* e235, e315, e125, e5 */
            float4(float3(1.0), 0.0) * float4(other.group0.xyz, 0.0) * float4(this.group1.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        Line right_dual = Line.from_groups(
            /* e415, e425, e435, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e235, e315, e125, 0 */
            float4(other.group1.xyz * float3(-1.0), 0.0)
        );
        return Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4(float3(1.0), 0.0) * float4(right_dual.group0.xyz, 0.0) * float4(wedge.group0.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e235, e315, e125, e5 */
            float4((float3(wedge.e12345) * right_dual.group1.xyz), -(right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435))
        );
    }
}
extension Motor: AntiRejectViaHorizonFrom<AntiMotor> {
    associatedtype Output = Motor;
    func anti_reject_via_horizon_from(other: AntiMotor) -> Output {
        Motor wedge = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4((other.group0.www * this.group0.xyz), (other.scalar * this.e12345) - (other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435)), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.scalar) * this.group1.xyz) + (float3(this.e5) * other.group0.xyz)), other.scalar * this.e5)
        );
        Motor right_dual = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4(((float3(right_dual.e12345) * wedge.group0.xyz) + (float3(wedge.e12345) * right_dual.group0.xyz)), right_dual.e12345 * wedge.e12345), 
            /* e235, e315, e125, e5 */
            (float4(right_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_dual.group1) + float4(float3(0.0), -(right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435))
        );
    }
}
extension Motor: AntiRejectViaHorizonFrom<AntiPlane> {
    associatedtype Output = Motor;
    func anti_reject_via_horizon_from(other: AntiPlane) -> Output {
        Flector wedge = Flector.from_groups(
            /* e15, e25, e35, e45 */
            float4(float3(1.0), 0.0) * float4(this.group1.www, 0.0) * float4(other.group0.xyz, 0.0) * float4(-1.0, -1.0, -1.0, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.e3 * this.e425 * -1.0, other.e1 * this.e435 * -1.0, other.e2 * this.e415 * -1.0, (other.e2 * this.e315) + (other.e3 * this.e125)) + (other.group0.yzxx * float4(this.group0.zxy, this.e235))
        );
        Plane right_dual = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4(((wedge.group1.zxy * right_dual.group0.yzx) - (wedge.group1.yzx * right_dual.group0.zxy)), 0.0), 
            /* e235, e315, e125, e5 */
            float4(wedge.e3215 * right_dual.e4235 * -1.0, wedge.e3215 * right_dual.e4315 * -1.0, wedge.e3215 * right_dual.e4125 * -1.0, (wedge.e25 * right_dual.e4315) + (wedge.e35 * right_dual.e4125) + (wedge.e45 * right_dual.e3215)) + (right_dual.group0.wwwx * float4(wedge.group1.xyz, wedge.e15))
        );
    }
}
extension Motor: AntiRejectViaHorizonFrom<Circle> {
    associatedtype Output = RoundPoint;
    func anti_reject_via_horizon_from(other: Circle) -> Output {
        Plane wedge = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(this.e5) * float4(other.group0.xyz, other.e321) * float4(-1.0)
        );
        Dipole right_dual = Dipole.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, 0 */
            float4(other.group2.xyz, 0.0)
        );
        return RoundPoint.from_groups(
            /* e1, e2, e3, e4 */
            float4(-(right_dual.e41 * wedge.e3215) - (right_dual.e31 * wedge.e4125), -(right_dual.e42 * wedge.e3215) - (right_dual.e12 * wedge.e4235), -(right_dual.e43 * wedge.e3215) - (right_dual.e23 * wedge.e4315), (right_dual.e42 * wedge.e4315) + (right_dual.e43 * wedge.e4125)) + (wedge.group0.yzxx * float4(right_dual.group1.zxy, right_dual.e41)), 
            /* e5, 0, 0, 0 */
            float4(-(right_dual.e45 * wedge.e3215) - (right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125), 0.0, 0.0, 0.0)
        );
    }
}
extension Motor: AntiRejectViaHorizonFrom<CircleRotor> {
    associatedtype Output = RoundPoint;
    func anti_reject_via_horizon_from(other: CircleRotor) -> Output {
        Plane wedge = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(this.e5) * float4(other.group0.xyz, other.e321) * float4(-1.0)
        );
        AntiCircleRotor right_dual = AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return RoundPoint.from_groups(
            /* e1, e2, e3, e4 */
            float4(-(right_dual.e41 * wedge.e3215) - (right_dual.e31 * wedge.e4125), -(right_dual.e42 * wedge.e3215) - (right_dual.e12 * wedge.e4235), -(right_dual.e43 * wedge.e3215) - (right_dual.e23 * wedge.e4315), (right_dual.e42 * wedge.e4315) + (right_dual.e43 * wedge.e4125)) + (wedge.group0.yzxx * float4(right_dual.group1.zxy, right_dual.e41)), 
            /* e5, 0, 0, 0 */
            float4(-(right_dual.e45 * wedge.e3215) - (right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125), 0.0, 0.0, 0.0)
        );
    }
}
extension Motor: AntiRejectViaHorizonFrom<Dipole> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: Dipole) -> Output {
        Motor wedge = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4((float3(this.e5) * other.group0.xyz), -(other.e41 * this.e235) - (other.e42 * this.e315) - (other.e43 * this.e125) - (other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435)), 
            /* e235, e315, e125, e5 */
            float4(float3(1.0), 0.0) * float4(this.group1.www, 0.0) * float4(other.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        Circle right_dual = Circle.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, 0 */
            float4(other.group2.xyz * float3(-1.0), 0.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(wedge.e12345) * right_dual.group1, 
            /* e235, e315, e125, e4 */
            float4((float3(wedge.e12345) * right_dual.group2.xyz), -(right_dual.e423 * wedge.e415) - (right_dual.e431 * wedge.e425) - (right_dual.e412 * wedge.e435)), 
            /* e1, e2, e3, e5 */
            float4((right_dual.e412 * wedge.e315) + (right_dual.e321 * wedge.e415), (right_dual.e423 * wedge.e125) + (right_dual.e321 * wedge.e425), (right_dual.e431 * wedge.e235) + (right_dual.e321 * wedge.e435), -(right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435)) - float4((right_dual.group0.xyz.yzx * wedge.group1.zxy), right_dual.e235 * wedge.e415)
        );
    }
}
extension Motor: AntiRejectViaHorizonFrom<DipoleInversion> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: DipoleInversion) -> Output {
        Motor wedge = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4((float3(this.e5) * other.group0.xyz), (other.e1234 * this.e5) - (other.e41 * this.e235) - (other.e42 * this.e315) - (other.e43 * this.e125) - (other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435)), 
            /* e235, e315, e125, e5 */
            float4(float3(1.0), 0.0) * float4(this.group1.www, 0.0) * float4(other.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        AntiDipoleInversion right_dual = AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(wedge.e12345) * right_dual.group1, 
            /* e235, e315, e125, e4 */
            float4((float3(wedge.e12345) * right_dual.group2.xyz), (right_dual.e4 * wedge.e12345) - (right_dual.e423 * wedge.e415) - (right_dual.e431 * wedge.e425) - (right_dual.e412 * wedge.e435)), 
            /* e1, e2, e3, e5 */
            float4((right_dual.e321 * wedge.e415) + (right_dual.e1 * wedge.e12345), (right_dual.e321 * wedge.e425) + (right_dual.e2 * wedge.e12345), (right_dual.e321 * wedge.e435) + (right_dual.e3 * wedge.e12345), -(right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435)) + float4((right_dual.group0.xyz.zxy * wedge.group1.yzx), right_dual.e5 * wedge.e12345) - (wedge.group1.zxyx * float4(right_dual.group0.xyz.yzx, right_dual.e415))
        );
    }
}
extension Motor: AntiRejectViaHorizonFrom<MultiVector> {
    associatedtype Output = MultiVector;
    func anti_reject_via_horizon_from(other: MultiVector) -> Output {
        MultiVector wedge = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(0.0, (this.e12345 * other.scalar) + (this.e5 * other.e1234) - (this.e415 * other.e23) - (this.e425 * other.e31) - (this.e435 * other.e12) - (this.e235 * other.e41) - (this.e315 * other.e42) - (this.e125 * other.e43)), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5, 0, 0, 0 */
            float4(this.e5 * other.scalar, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(this.e5) * other.group1 * float4(-1.0), 
            /* e41, e42, e43, 0 */
            float4(0.0), 
            /* e23, e31, e12, 0 */
            float4(0.0), 
            /* e415, e425, e435, e321 */
            float4(((float3(this.e5) * other.group4.xyz) + (float3(other.scalar) * this.group0.xyz)), 0.0), 
            /* e423, e431, e412, 0 */
            float4(0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(this.e5) * other.group5.xyz) + (float3(other.scalar) * this.group1.xyz), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(-(this.e425 * other.e3) - (this.e235 * other.e4), -(this.e435 * other.e1) - (this.e315 * other.e4), -(this.e415 * other.e2) - (this.e125 * other.e4), (this.e315 * other.e2) + (this.e125 * other.e3)) + (other.group1.yzxx * float4(this.group0.zxy, this.e235)) - float4((other.group7.xyz * this.group1.www), this.e5 * other.e321), 
            /* e1234, 0, 0, 0 */
            float4(0.0)
        );
        MultiVector right_dual = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(other.group0.xy.yx * float2(-1.0, 1.0), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5, 0, 0, 0 */
            float4(other.e3215, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43, 0 */
            float4(other.group7.xyz, 0.0), 
            /* e23, e31, e12, 0 */
            float4(other.group6.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412, 0 */
            float4(other.group4.xyz * float3(-1.0), 0.0), 
            /* e235, e315, e125, 0 */
            float4(other.group3.xyz * float3(-1.0), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        return MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2((right_dual.scalar * wedge.e12345) + (right_dual.e12345 * wedge.scalar) + (right_dual.e1 * wedge.e4235) + (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) + (right_dual.e4 * wedge.e3215) + (right_dual.e5 * wedge.e1234) + (right_dual.e4235 * wedge.e1) + (right_dual.e4315 * wedge.e2) + (right_dual.e4125 * wedge.e3) + (right_dual.e3215 * wedge.e4) + (right_dual.e1234 * wedge.e5) - (right_dual.e15 * wedge.e423) - (right_dual.e25 * wedge.e431) - (right_dual.e35 * wedge.e412) - (right_dual.e45 * wedge.e321) - (right_dual.e41 * wedge.e235) - (right_dual.e42 * wedge.e315) - (right_dual.e43 * wedge.e125) - (right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e321 * wedge.e45) - (right_dual.e423 * wedge.e15) - (right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43), right_dual.e12345 * wedge.e12345), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e15 * wedge.e1234) + (right_dual.e415 * wedge.e321) + (right_dual.e321 * wedge.e415) + (right_dual.e4125 * wedge.e31), (right_dual.e25 * wedge.e1234) + (right_dual.e425 * wedge.e321) + (right_dual.e321 * wedge.e425) + (right_dual.e4235 * wedge.e12), (right_dual.e35 * wedge.e1234) + (right_dual.e435 * wedge.e321) + (right_dual.e321 * wedge.e435) + (right_dual.e4315 * wedge.e23), -(right_dual.e415 * wedge.e423) - (right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412) - (right_dual.e1234 * wedge.e45)) + (float4(right_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_dual.group1) + (wedge.group9.yzxx * float4(right_dual.group5.xyz.zxy, right_dual.e41)) + float4((wedge.group4.xyz * right_dual.group9.www), right_dual.e45 * wedge.e1234) + float4((right_dual.group7.xyz.zxy * wedge.group8.xyz.yzx), right_dual.e42 * wedge.e4315) + float4((right_dual.group8.xyz.yzx * wedge.group7.xyz.zxy), right_dual.e43 * wedge.e4125) - (right_dual.group9.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((float3(right_dual.e1234) * wedge.group3.xyz), right_dual.e4125 * wedge.e43) - float4((right_dual.group4.xyz * wedge.group9.www), right_dual.e423 * wedge.e415) - float4((right_dual.group5.xyz.yzx * wedge.group9.zxy), right_dual.e431 * wedge.e425) - float4((right_dual.group7.xyz.yzx * wedge.group8.xyz.zxy), right_dual.e412 * wedge.e435) - float4((right_dual.group8.xyz.zxy * wedge.group7.xyz.yzx), right_dual.e4235 * wedge.e41), 
            /* e5, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e5) + (right_dual.e5 * wedge.e12345) + (right_dual.e4235 * wedge.e15) + (right_dual.e4315 * wedge.e25) + (right_dual.e4125 * wedge.e35) + (right_dual.e3215 * wedge.e45) - (right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125) - (right_dual.e45 * wedge.e3215) - (right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435), 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4((right_dual.e415 * wedge.e3215) + (right_dual.e315 * wedge.e4125) + (right_dual.e4125 * wedge.e315) + (right_dual.e3215 * wedge.e415), (right_dual.e425 * wedge.e3215) + (right_dual.e125 * wedge.e4235) + (right_dual.e4235 * wedge.e125) + (right_dual.e3215 * wedge.e425), (right_dual.e435 * wedge.e3215) + (right_dual.e235 * wedge.e4315) + (right_dual.e4315 * wedge.e235) + (right_dual.e3215 * wedge.e435), -(right_dual.e435 * wedge.e4125) - (right_dual.e4235 * wedge.e415) - (right_dual.e4315 * wedge.e425) - (right_dual.e4125 * wedge.e435)) + (float4(right_dual.e12345) * wedge.group3) + (float4(wedge.e12345) * right_dual.group3) - (wedge.group9.yzxx * float4(right_dual.group8.xyz.zxy, right_dual.e415)) - float4((wedge.group8.xyz.zxy * right_dual.group9.yzx), right_dual.e425 * wedge.e4315), 
            /* e41, e42, e43, 0 */
            float4((float3(right_dual.e12345) * wedge.group4.xyz) + (float3(right_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_dual.group4.xyz) + (float3(wedge.e1234) * right_dual.group6.xyz) + (right_dual.group7.xyz.zxy * wedge.group9.yzx) + (wedge.group7.xyz.zxy * right_dual.group9.yzx) - (right_dual.group7.xyz.yzx * wedge.group9.zxy) - (wedge.group7.xyz.yzx * right_dual.group9.zxy), 0.0), 
            /* e23, e31, e12, 0 */
            float4((float3(right_dual.e12345) * wedge.group5.xyz) + (float3(right_dual.e3215) * wedge.group7.xyz) + (float3(right_dual.e1234) * wedge.group8.xyz) + (float3(wedge.e12345) * right_dual.group5.xyz) + (float3(wedge.e3215) * right_dual.group7.xyz) + (float3(wedge.e1234) * right_dual.group8.xyz) - (float3(right_dual.e321) * wedge.group9.xyz) - (float3(wedge.e321) * right_dual.group9.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            (float4(right_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_dual.group6) + (right_dual.group9.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - float4((right_dual.group9.zxy * wedge.group9.yzx), right_dual.e1234 * wedge.e3215), 
            /* e423, e431, e412, 0 */
            float4((float3(right_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_dual.group7.xyz) + (float3(wedge.e1234) * right_dual.group9.xyz) - (float3(right_dual.e1234) * wedge.group9.xyz), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(right_dual.e12345) * wedge.group8.xyz) + (float3(right_dual.e3215) * wedge.group9.xyz) + (float3(wedge.e12345) * right_dual.group8.xyz) - (float3(wedge.e3215) * right_dual.group9.xyz), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            (float4(right_dual.e12345) * wedge.group9) + (float4(wedge.e12345) * right_dual.group9), 
            /* e1234, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e1234) + (right_dual.e1234 * wedge.e12345), 0.0, 0.0, 0.0)
        );
    }
}
extension Motor: AntiRejectViaHorizonFrom<RoundPoint> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: RoundPoint) -> Output {
        Flector wedge = Flector.from_groups(
            /* e15, e25, e35, e45 */
            float4(this.e5) * other.group0 * float4(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(-(this.e425 * other.e3) - (this.e235 * other.e4), -(this.e435 * other.e1) - (this.e315 * other.e4), -(this.e415 * other.e2) - (this.e125 * other.e4), (this.e315 * other.e2) + (this.e125 * other.e3)) + (other.group0.yzxx * float4(this.group0.zxy, this.e235))
        );
        Sphere right_dual = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(right_dual.e1234) * wedge.group1.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            float4(((wedge.group1.zxy * right_dual.group0.yzx) - (wedge.group1.yzx * right_dual.group0.zxy)), wedge.e3215 * right_dual.e1234 * -1.0), 
            /* e235, e315, e125, e4 */
            float4(((float3(right_dual.e3215) * wedge.group1.xyz) - (float3(wedge.e3215) * right_dual.group0.xyz)), wedge.e45 * right_dual.e1234 * -1.0), 
            /* e1, e2, e3, e5 */
            float4((float3(right_dual.e1234) * wedge.group0.xyz * float3(-1.0)), (wedge.e15 * right_dual.e4235) + (wedge.e25 * right_dual.e4315) + (wedge.e35 * right_dual.e4125) + (wedge.e45 * right_dual.e3215))
        );
    }
}
extension Motor: AntiRejectViaHorizonFrom<Scalar> {
    associatedtype Output = Motor;
    func anti_reject_via_horizon_from(other: Scalar) -> Output {
        Motor wedge = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4(other.scalar) * this.group0, 
            /* e235, e315, e125, e5 */
            float4(other.scalar) * this.group1
        );
        AntiScalar right_dual = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(other.scalar, 0.0, 0.0, 0.0)
        );
        return Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4(right_dual.e12345) * wedge.group0, 
            /* e235, e315, e125, e5 */
            float4(right_dual.e12345) * wedge.group1
        );
    }
}
extension Motor: AntiRejectViaHorizonFrom<Sphere> {
    associatedtype Output = RoundPoint;
    func anti_reject_via_horizon_from(other: Sphere) -> Output {
        AntiScalar wedge = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(this.e5 * other.e1234, 0.0, 0.0, 0.0)
        );
        RoundPoint right_dual = RoundPoint.from_groups(
            /* e1, e2, e3, e4 */
            float4(other.group0.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5, 0, 0, 0 */
            float4(other.e3215, 0.0, 0.0, 0.0)
        );
        return RoundPoint.from_groups(
            /* e1, e2, e3, e4 */
            float4(wedge.e12345) * right_dual.group0, 
            /* e5, 0, 0, 0 */
            float4(wedge.e12345 * right_dual.e5, 0.0, 0.0, 0.0)
        );
    }
}
extension Motor: AntiRejectViaHorizonFrom<VersorEven> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: VersorEven) -> Output {
        Flector wedge = Flector.from_groups(
            /* e15, e25, e35, e45 */
            float4(this.e5) * other.group3 * float4(-1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(-(this.e235 * other.e4) - (this.e5 * other.e423), -(this.e315 * other.e4) - (this.e5 * other.e431), -(this.e125 * other.e4) - (this.e5 * other.e412), (this.e315 * other.e2) + (this.e125 * other.e3)) + (other.group3.yzxx * float4(this.group0.zxy, this.e235)) - float4((this.group0.yzx * other.group3.zxy), this.e5 * other.e321)
        );
        VersorOdd right_dual = VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(right_dual.e1234) * wedge.group1.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            float4(((wedge.group1.zxy * right_dual.group3.yzx) - (wedge.group1.yzx * right_dual.group3.zxy)), wedge.e3215 * right_dual.e1234 * -1.0), 
            /* e235, e315, e125, e4 */
            (wedge.group1.xyzx * float4(right_dual.group3.www, right_dual.e41)) + float4(float3(0.0), (wedge.e4315 * right_dual.e42) + (wedge.e4125 * right_dual.e43)) - float4((wedge.group1.www * right_dual.group3.xyz), wedge.e45 * right_dual.e1234), 
            /* e1, e2, e3, e5 */
            float4(float3(0.0), (wedge.e25 * right_dual.e4315) + (wedge.e35 * right_dual.e4125) + (wedge.e45 * right_dual.e3215) - (wedge.e3215 * right_dual.e45)) + float4((wedge.group1.yzx * right_dual.group1.zxy), wedge.e15 * right_dual.e4235) - (wedge.group1.zxyy * float4(right_dual.group1.yzx, right_dual.e25)) - (wedge.group1.wwwz * float4(right_dual.group0.xyz, right_dual.e35)) - (right_dual.group2.wwwx * float4(wedge.group0.xyz, wedge.e4235))
        );
    }
}
extension Motor: AntiRejectViaHorizonFrom<VersorOdd> {
    associatedtype Output = VersorEven;
    func anti_reject_via_horizon_from(other: VersorOdd) -> Output {
        Motor wedge = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            (float4(this.e5) * float4(other.group0.xyz, other.e1234)) + (float4(other.scalar) * this.group0) + float4(float3(0.0), -(this.e415 * other.e23) - (this.e425 * other.e31) - (this.e435 * other.e12) - (this.e235 * other.e41) - (this.e315 * other.e42) - (this.e125 * other.e43)), 
            /* e235, e315, e125, e5 */
            float4(((float3(this.e5) * other.group1.xyz) + (float3(other.scalar) * this.group1.xyz)), this.e5 * other.scalar)
        );
        VersorEven right_dual = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4(wedge.e12345) * right_dual.group0, 
            /* e415, e425, e435, e321 */
            float4(((float3(wedge.e12345) * right_dual.group1.xyz) + (float3(right_dual.e12345) * wedge.group0.xyz)), wedge.e12345 * right_dual.e321), 
            /* e235, e315, e125, e5 */
            (float4(wedge.e12345) * right_dual.group2) + (float4(right_dual.e12345) * wedge.group1) + float4(float3(0.0), -(wedge.e415 * right_dual.e235) - (wedge.e425 * right_dual.e315) - (wedge.e435 * right_dual.e125) - (wedge.e235 * right_dual.e415) - (wedge.e315 * right_dual.e425) - (wedge.e125 * right_dual.e435)), 
            /* e1, e2, e3, e4 */
            float4((wedge.e12345 * right_dual.e1) + (wedge.e315 * right_dual.e412), (wedge.e12345 * right_dual.e2) + (wedge.e125 * right_dual.e423), (wedge.e12345 * right_dual.e3) + (wedge.e235 * right_dual.e431), -(wedge.e425 * right_dual.e431) - (wedge.e435 * right_dual.e412)) + (wedge.group0 * float4(right_dual.group1.www, right_dual.e4)) - (right_dual.group0.yzxx * float4(wedge.group1.zxy, wedge.e415))
        );
    }
}
extension MultiVector {
    // Fancy infix trick
    func operator/(_rhs: AntiRejectViaHorizonFromInfix) -> AntiRejectViaHorizonFromInfixPartial<MultiVector> {
        return AntiRejectViaHorizonFromInfixPartial { a: this };
    }
}
extension MultiVector: AntiRejectViaHorizonFrom<AntiCircleRotor> {
    associatedtype Output = MultiVector;
    func anti_reject_via_horizon_from(other: AntiCircleRotor) -> Output {
        MultiVector wedge = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(other.scalar * this.scalar, (other.scalar * this.e12345) - (other.e41 * this.e235) - (other.e42 * this.e315) - (other.e43 * this.e125) - (other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435) - (other.e45 * this.e321) - (other.e15 * this.e423) - (other.e25 * this.e431) - (other.e35 * this.e412)), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * this.group1, 
            /* e5, 0, 0, 0 */
            float4(other.scalar * this.e5, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            (float4(other.scalar) * this.group3) + (float4(this.scalar) * float4(other.group2.xyz, other.e45)), 
            /* e41, e42, e43, 0 */
            float4((float3(other.scalar) * this.group4.xyz) + (float3(this.scalar) * other.group0.xyz), 0.0), 
            /* e23, e31, e12, 0 */
            float4((float3(other.scalar) * this.group5.xyz) + (float3(this.scalar) * other.group1.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            float4((other.e15 * this.e4) + (other.scalar * this.e415), (other.e25 * this.e4) + (other.scalar * this.e425), (other.e35 * this.e4) + (other.scalar * this.e435), -(other.e31 * this.e2) - (other.e12 * this.e3)) + float4((float3(this.e5) * other.group0.xyz), other.scalar * this.e321) - (other.group1.wwwx * this.group1.xyzx), 
            /* e423, e431, e412, 0 */
            float4((float3(other.scalar) * this.group7.xyz) + (float3(this.e4) * other.group1.xyz) + (other.group0.xyz.yzx * this.group1.zxy) - (other.group0.xyz.zxy * this.group1.yzx), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(other.scalar) * this.group8.xyz) + (float3(this.e5) * other.group1.xyz) + (other.group2.zxy * this.group1.yzx) - (other.group2.yzx * this.group1.zxy), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e23 * this.e45) + (other.e45 * this.e23) + (other.e35 * this.e42) + (other.scalar * this.e4235), (other.e31 * this.e45) + (other.e45 * this.e31) + (other.e15 * this.e43) + (other.scalar * this.e4315), (other.e12 * this.e45) + (other.e45 * this.e12) + (other.e25 * this.e41) + (other.scalar * this.e4125), -(other.e23 * this.e15) - (other.e31 * this.e25) - (other.e12 * this.e35) - (other.e35 * this.e12)) + float4((other.group0.xyz.yzx * this.group3.zxy), other.scalar * this.e3215) - (other.group2.yzxy * float4(this.group4.xyz.zxy, this.e31)) - float4((other.group0.xyz.zxy * this.group3.yzx), other.e15 * this.e23), 
            /* e1234, 0, 0, 0 */
            float4((other.scalar * this.e1234) - (other.e41 * this.e23) - (other.e42 * this.e31) - (other.e43 * this.e12) - (other.e23 * this.e41) - (other.e31 * this.e42) - (other.e12 * this.e43), 0.0, 0.0, 0.0)
        );
        CircleRotor right_dual = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2((right_dual.e12345 * wedge.scalar) - (right_dual.e423 * wedge.e15) - (right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e321 * wedge.e45) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43), right_dual.e12345 * wedge.e12345), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e415 * wedge.e321) + (right_dual.e321 * wedge.e415) + (right_dual.e315 * wedge.e412) + (right_dual.e12345 * wedge.e1), (right_dual.e425 * wedge.e321) + (right_dual.e321 * wedge.e425) + (right_dual.e125 * wedge.e423) + (right_dual.e12345 * wedge.e2), (right_dual.e435 * wedge.e321) + (right_dual.e321 * wedge.e435) + (right_dual.e235 * wedge.e431) + (right_dual.e12345 * wedge.e3), -(right_dual.e412 * wedge.e435) - (right_dual.e415 * wedge.e423) - (right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412)) + float4((right_dual.group0.xyz.zxy * wedge.group8.xyz.yzx), right_dual.e12345 * wedge.e4) - float4((right_dual.group0.xyz.yzx * wedge.group8.xyz.zxy), right_dual.e423 * wedge.e415) - float4((wedge.group7.xyz.yzx * right_dual.group2.zxy), right_dual.e431 * wedge.e425), 
            /* e5, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e5) - (right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435), 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4((right_dual.e315 * wedge.e4125) + (right_dual.e12345 * wedge.e15), (right_dual.e125 * wedge.e4235) + (right_dual.e12345 * wedge.e25), (right_dual.e235 * wedge.e4315) + (right_dual.e12345 * wedge.e35), -(right_dual.e425 * wedge.e4315) - (right_dual.e435 * wedge.e4125)) + float4((wedge.group9.www * right_dual.group1.xyz), right_dual.e12345 * wedge.e45) - (wedge.group9.yzxx * float4(right_dual.group2.zxy, right_dual.e415)), 
            /* e41, e42, e43, 0 */
            float4((float3(right_dual.e12345) * wedge.group4.xyz) + (float3(wedge.e1234) * right_dual.group1.xyz) + (right_dual.group0.xyz.zxy * wedge.group9.yzx) - (right_dual.group0.xyz.yzx * wedge.group9.zxy), 0.0), 
            /* e23, e31, e12, 0 */
            float4((float3(right_dual.e12345) * wedge.group5.xyz) + (float3(wedge.e3215) * right_dual.group0.xyz) + (float3(wedge.e1234) * right_dual.group2.xyz) - (float3(right_dual.e321) * wedge.group9.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            (float4(right_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_dual.group1), 
            /* e423, e431, e412, 0 */
            float4((float3(right_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_dual.group0.xyz), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(right_dual.e12345) * wedge.group8.xyz) + (float3(wedge.e12345) * right_dual.group2.xyz), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * wedge.group9, 
            /* e1234, 0, 0, 0 */
            float4(right_dual.e12345 * wedge.e1234, 0.0, 0.0, 0.0)
        );
    }
}
extension MultiVector: AntiRejectViaHorizonFrom<AntiDipoleInversion> {
    associatedtype Output = MultiVector;
    func anti_reject_via_horizon_from(other: AntiDipoleInversion) -> Output {
        MultiVector wedge = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(0.0, (other.e4 * this.e3215) + (other.e1 * this.e4235) + (other.e2 * this.e4315) + (other.e3 * this.e4125) + (other.e5 * this.e1234) - (other.e423 * this.e15) - (other.e431 * this.e25) - (other.e412 * this.e35) - (other.e415 * this.e23) - (other.e425 * this.e31) - (other.e435 * this.e12) - (other.e321 * this.e45) - (other.e235 * this.e41) - (other.e315 * this.e42) - (other.e125 * this.e43)), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(this.scalar) * float4(other.group3.xyz, other.e4), 
            /* e5, 0, 0, 0 */
            float4(other.e5 * this.scalar, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            (float4(other.e5) * this.group1) - (float4(this.e5) * float4(other.group3.xyz, other.e4)), 
            /* e41, e42, e43, 0 */
            float4((float3(this.e4) * other.group3.xyz) - (float3(other.e4) * this.group1.xyz), 0.0), 
            /* e23, e31, e12, 0 */
            float4((other.group3.zxy * this.group1.yzx) - (other.group3.yzx * this.group1.zxy), 0.0), 
            /* e415, e425, e435, e321 */
            float4((other.e4 * this.e15) + (other.e5 * this.e41), (other.e4 * this.e25) + (other.e5 * this.e42), (other.e4 * this.e35) + (other.e5 * this.e43), -(other.e2 * this.e31) - (other.e3 * this.e12)) + (float4(this.scalar) * other.group1) - float4((this.group3.www * other.group3.xyz), other.e1 * this.e23), 
            /* e423, e431, e412, 0 */
            float4((float3(other.e4) * this.group5.xyz) + (float3(this.scalar) * other.group0.xyz) + (this.group4.xyz.yzx * other.group3.zxy) - (this.group4.xyz.zxy * other.group3.yzx), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(other.e5) * this.group5.xyz) + (float3(this.scalar) * other.group2.xyz) + (other.group3.yzx * this.group3.zxy) - (other.group3.zxy * this.group3.yzx), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            (other.group3.yzxw * this.group6.zxyw) + (other.group3.wwwx * float4(this.group7.xyz, this.e235)) + float4((other.group1.yzx * this.group1.zxy), other.e2 * this.e315) + float4((this.group1.www * other.group2.xyz), other.e3 * this.e125) - (float4(this.e5) * float4(other.group0.xyz, other.e321)) - (this.group1.yzxy * float4(other.group1.zxy, other.e315)) - float4((this.group8.xyz * other.group2.www), other.e235 * this.e1) - float4((other.group3.zxy * this.group6.yzx), other.e125 * this.e3), 
            /* e1234, 0, 0, 0 */
            float4((other.e423 * this.e1) + (other.e431 * this.e2) + (other.e412 * this.e3) + (other.e321 * this.e4) - (other.e4 * this.e321) - (other.e1 * this.e423) - (other.e2 * this.e431) - (other.e3 * this.e412), 0.0, 0.0, 0.0)
        );
        DipoleInversion right_dual = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2((right_dual.e1234 * wedge.e5) + (right_dual.e4235 * wedge.e1) + (right_dual.e4315 * wedge.e2) + (right_dual.e4125 * wedge.e3) + (right_dual.e3215 * wedge.e4) - (right_dual.e41 * wedge.e235) - (right_dual.e42 * wedge.e315) - (right_dual.e43 * wedge.e125) - (right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435) - (right_dual.e45 * wedge.e321) - (right_dual.e15 * wedge.e423) - (right_dual.e25 * wedge.e431) - (right_dual.e35 * wedge.e412), 0.0), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            (float4(wedge.e1234) * float4(right_dual.group2.xyz, right_dual.e45)) + (wedge.group9.yzxz * float4(right_dual.group1.zxy, right_dual.e43)) + float4((wedge.group4.xyz * right_dual.group3.www), right_dual.e41 * wedge.e4235) + float4((wedge.group5.xyz.yzx * right_dual.group3.zxy), right_dual.e42 * wedge.e4315) - (float4(right_dual.e1234) * wedge.group3) - (right_dual.group3.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((right_dual.group0.xyz * wedge.group9.www), right_dual.e4235 * wedge.e41) - float4((right_dual.group1.yzx * wedge.group9.zxy), right_dual.e4125 * wedge.e43), 
            /* e5, 0, 0, 0 */
            float4((right_dual.e4235 * wedge.e15) + (right_dual.e4315 * wedge.e25) + (right_dual.e4125 * wedge.e35) + (right_dual.e3215 * wedge.e45) - (right_dual.e45 * wedge.e3215) - (right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125), 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4((right_dual.e4125 * wedge.e315) + (right_dual.e3215 * wedge.e415), (right_dual.e4235 * wedge.e125) + (right_dual.e3215 * wedge.e425), (right_dual.e4315 * wedge.e235) + (right_dual.e3215 * wedge.e435), -(right_dual.e4315 * wedge.e425) - (right_dual.e4125 * wedge.e435)) + (float4(wedge.e12345) * float4(right_dual.group2.xyz, right_dual.e45)) - float4((wedge.group8.xyz.zxy * right_dual.group3.yzx), right_dual.e4235 * wedge.e415), 
            /* e41, e42, e43, 0 */
            float4((float3(right_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_dual.group0.xyz) + (wedge.group7.xyz.zxy * right_dual.group3.yzx) - (wedge.group7.xyz.yzx * right_dual.group3.zxy), 0.0), 
            /* e23, e31, e12, 0 */
            float4((float3(right_dual.e1234) * wedge.group8.xyz) + (float3(right_dual.e3215) * wedge.group7.xyz) + (float3(wedge.e12345) * right_dual.group1.xyz) - (float3(wedge.e321) * right_dual.group3.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            (right_dual.group3.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - (wedge.group9.yzxw * float4(right_dual.group3.zxy, right_dual.e1234)), 
            /* e423, e431, e412, 0 */
            float4((float3(wedge.e1234) * right_dual.group3.xyz) - (float3(right_dual.e1234) * wedge.group9.xyz), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(right_dual.e3215) * wedge.group9.xyz) - (float3(wedge.e3215) * right_dual.group3.xyz), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_dual.group3, 
            /* e1234, 0, 0, 0 */
            float4(right_dual.e1234 * wedge.e12345, 0.0, 0.0, 0.0)
        );
    }
}
extension MultiVector: AntiRejectViaHorizonFrom<AntiDualNum> {
    associatedtype Output = MultiVector;
    func anti_reject_via_horizon_from(other: AntiDualNum) -> Output {
        MultiVector wedge = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(other.scalar * this.scalar, (other.e3215 * this.e4) + (other.scalar * this.e12345)), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * this.group1, 
            /* e5, 0, 0, 0 */
            float4(other.scalar * this.e5, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(other.scalar) * this.group3, 
            /* e41, e42, e43, 0 */
            float4(float3(other.scalar) * this.group4.xyz, 0.0), 
            /* e23, e31, e12, 0 */
            float4(float3(other.scalar) * this.group5.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(other.scalar) * this.group6, 
            /* e423, e431, e412, 0 */
            float4(float3(other.scalar) * this.group7.xyz, 0.0), 
            /* e235, e315, e125, 0 */
            float4(float3(other.scalar) * this.group8.xyz, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xy.yy, other.scalar, (other.e3215 * this.scalar) + (other.scalar * this.e3215)) * float4(this.group9.xyz, 1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.scalar * this.e1234, 0.0, 0.0, 0.0)
        );
        DualNum right_dual = DualNum.from_groups(
            /* e5, e12345, 0, 0 */
            float4(other.group0.xy, 0.0, 0.0)
        );
        return MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2((right_dual.e5 * wedge.e1234) + (right_dual.e12345 * wedge.scalar), right_dual.e12345 * wedge.e12345), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(right_dual.e12345) * wedge.group1, 
            /* e5, 0, 0, 0 */
            float4((right_dual.e5 * wedge.e12345) + (right_dual.e12345 * wedge.e5), 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(right_dual.e12345) * wedge.group3, 
            /* e41, e42, e43, 0 */
            float4(float3(right_dual.e12345) * wedge.group4.xyz, 0.0), 
            /* e23, e31, e12, 0 */
            float4(float3(right_dual.e12345) * wedge.group5.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(right_dual.e12345) * wedge.group6, 
            /* e423, e431, e412, 0 */
            float4(float3(right_dual.e12345) * wedge.group7.xyz, 0.0), 
            /* e235, e315, e125, 0 */
            float4(float3(right_dual.e12345) * wedge.group8.xyz, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * wedge.group9, 
            /* e1234, 0, 0, 0 */
            float4(right_dual.e12345 * wedge.e1234, 0.0, 0.0, 0.0)
        );
    }
}
extension MultiVector: AntiRejectViaHorizonFrom<AntiFlatPoint> {
    associatedtype Output = MultiVector;
    func anti_reject_via_horizon_from(other: AntiFlatPoint) -> Output {
        MultiVector wedge = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(0.0, -(other.e235 * this.e41) - (other.e315 * this.e42) - (other.e125 * this.e43) - (other.e321 * this.e45)), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5, 0, 0, 0 */
            float4(0.0), 
            /* e15, e25, e35, e45 */
            float4(0.0), 
            /* e41, e42, e43, 0 */
            float4(0.0), 
            /* e23, e31, e12, 0 */
            float4(0.0), 
            /* e415, e425, e435, e321 */
            float4(float3(0.0), other.e321 * this.scalar), 
            /* e423, e431, e412, 0 */
            float4(0.0), 
            /* e235, e315, e125, 0 */
            float4(float3(this.scalar) * other.group0.xyz, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4((float3(this.e4) * other.group0.xyz), -(other.e235 * this.e1) - (other.e315 * this.e2) - (other.e125 * this.e3) - (other.e321 * this.e5)), 
            /* e1234, 0, 0, 0 */
            float4(other.e321 * this.e4, 0.0, 0.0, 0.0)
        );
        FlatPoint right_dual = FlatPoint.from_groups(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(-(right_dual.e15 * wedge.e423) - (right_dual.e25 * wedge.e431) - (right_dual.e35 * wedge.e412) - (right_dual.e45 * wedge.e321), 0.0), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(wedge.e1234) * right_dual.group0, 
            /* e5, 0, 0, 0 */
            float4(-(right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125) - (right_dual.e45 * wedge.e3215), 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(wedge.e12345) * right_dual.group0, 
            /* e41, e42, e43, 0 */
            float4(0.0), 
            /* e23, e31, e12, 0 */
            float4(0.0), 
            /* e415, e425, e435, e321 */
            float4(0.0), 
            /* e423, e431, e412, 0 */
            float4(0.0), 
            /* e235, e315, e125, 0 */
            float4(0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(0.0), 
            /* e1234, 0, 0, 0 */
            float4(0.0)
        );
    }
}
extension MultiVector: AntiRejectViaHorizonFrom<AntiFlector> {
    associatedtype Output = MultiVector;
    func anti_reject_via_horizon_from(other: AntiFlector) -> Output {
        MultiVector wedge = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(0.0, (other.e1 * this.e4235) + (other.e2 * this.e4315) + (other.e3 * this.e4125) + (other.e5 * this.e1234) - (other.e235 * this.e41) - (other.e315 * this.e42) - (other.e125 * this.e43) - (other.e321 * this.e45)), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(this.group0.xy.xx, this.scalar, 0.0) * float4(float3(1.0), 0.0) * float4(other.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e5, 0, 0, 0 */
            float4(other.e5 * this.scalar, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(((float3(other.e5) * this.group1.xyz) - (float3(this.e5) * other.group1.xyz)), other.e5 * this.e4), 
            /* e41, e42, e43, 0 */
            float4(float3(this.e4) * other.group1.xyz, 0.0), 
            /* e23, e31, e12, 0 */
            float4((other.group1.zxy * this.group1.yzx) - (other.group1.yzx * this.group1.zxy), 0.0), 
            /* e415, e425, e435, e321 */
            float4(float3(0.0), -(other.e2 * this.e31) - (other.e3 * this.e12)) + float4((this.group4.xyz * other.group1.www), other.e321 * this.scalar) - float4((this.group3.www * other.group1.xyz), other.e1 * this.e23), 
            /* e423, e431, e412, 0 */
            float4((this.group4.xyz.yzx * other.group1.zxy) - (this.group4.xyz.zxy * other.group1.yzx), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(other.e5) * this.group5.xyz) + (float3(this.scalar) * other.group0.xyz) + (other.group1.yzx * this.group3.zxy) - (other.group1.zxy * this.group3.yzx), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            (other.group1.wwwx * float4(this.group7.xyz, this.e235)) + float4(float3(0.0), (other.e5 * this.e321) - (other.e315 * this.e2) - (other.e125 * this.e3) - (other.e321 * this.e5)) + float4((other.group1.yzx * this.group6.zxy), other.e3 * this.e125) + float4((this.group1.www * other.group0.xyz), other.e2 * this.e315) - float4((other.group1.zxy * this.group6.yzx), other.e235 * this.e1), 
            /* e1234, 0, 0, 0 */
            float4((other.e321 * this.e4) - (other.e1 * this.e423) - (other.e2 * this.e431) - (other.e3 * this.e412), 0.0, 0.0, 0.0)
        );
        Flector right_dual = Flector.from_groups(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2((right_dual.e4235 * wedge.e1) + (right_dual.e4315 * wedge.e2) + (right_dual.e4125 * wedge.e3) + (right_dual.e3215 * wedge.e4) - (right_dual.e15 * wedge.e423) - (right_dual.e25 * wedge.e431) - (right_dual.e35 * wedge.e412) - (right_dual.e45 * wedge.e321), 0.0), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e15 * wedge.e1234) + (right_dual.e4125 * wedge.e31), (right_dual.e25 * wedge.e1234) + (right_dual.e4235 * wedge.e12), (right_dual.e35 * wedge.e1234) + (right_dual.e4315 * wedge.e23), -(right_dual.e4315 * wedge.e42) - (right_dual.e4125 * wedge.e43)) + float4((wedge.group4.xyz * right_dual.group1.www), right_dual.e45 * wedge.e1234) - (right_dual.group1.yzxx * float4(wedge.group5.xyz.zxy, wedge.e41)), 
            /* e5, 0, 0, 0 */
            float4((right_dual.e4235 * wedge.e15) + (right_dual.e4315 * wedge.e25) + (right_dual.e4125 * wedge.e35) + (right_dual.e3215 * wedge.e45) - (right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125) - (right_dual.e45 * wedge.e3215), 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4((right_dual.e4125 * wedge.e315) + (right_dual.e3215 * wedge.e415), (right_dual.e4235 * wedge.e125) + (right_dual.e3215 * wedge.e425), (right_dual.e4315 * wedge.e235) + (right_dual.e3215 * wedge.e435), -(right_dual.e4315 * wedge.e425) - (right_dual.e4125 * wedge.e435)) + (float4(wedge.e12345) * right_dual.group0) - float4((wedge.group8.xyz.zxy * right_dual.group1.yzx), right_dual.e4235 * wedge.e415), 
            /* e41, e42, e43, 0 */
            float4((wedge.group7.xyz.zxy * right_dual.group1.yzx) - (wedge.group7.xyz.yzx * right_dual.group1.zxy), 0.0), 
            /* e23, e31, e12, 0 */
            float4((float3(right_dual.e3215) * wedge.group7.xyz) - (float3(wedge.e321) * right_dual.group1.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            float4(((right_dual.group1.yzx * wedge.group9.zxy) - (right_dual.group1.zxy * wedge.group9.yzx)), right_dual.e3215 * wedge.e1234), 
            /* e423, e431, e412, 0 */
            float4(float3(wedge.e1234) * right_dual.group1.xyz, 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(right_dual.e3215) * wedge.group9.xyz) - (float3(wedge.e3215) * right_dual.group1.xyz), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_dual.group1, 
            /* e1234, 0, 0, 0 */
            float4(0.0)
        );
    }
}
extension MultiVector: AntiRejectViaHorizonFrom<AntiLine> {
    associatedtype Output = MultiVector;
    func anti_reject_via_horizon_from(other: AntiLine) -> Output {
        MultiVector wedge = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(0.0, -(other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435) - (other.e15 * this.e423) - (other.e25 * this.e431) - (other.e35 * this.e412)), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5, 0, 0, 0 */
            float4(0.0), 
            /* e15, e25, e35, e45 */
            float4(this.group0.xy.xx, this.scalar, 0.0) * float4(float3(1.0), 0.0) * float4(other.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e41, e42, e43, 0 */
            float4(0.0), 
            /* e23, e31, e12, 0 */
            float4(float3(this.scalar) * other.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4((float3(this.e4) * other.group1.xyz), -(other.e23 * this.e1) - (other.e31 * this.e2) - (other.e12 * this.e3)), 
            /* e423, e431, e412, 0 */
            float4(float3(this.e4) * other.group0.xyz, 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(this.e5) * other.group0.xyz) + (other.group1.xyz.zxy * this.group1.yzx) - (other.group1.xyz.yzx * this.group1.zxy), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e23 * this.e45) + (other.e35 * this.e42), (other.e31 * this.e45) + (other.e15 * this.e43), (other.e12 * this.e45) + (other.e25 * this.e41), -(other.e31 * this.e25) - (other.e12 * this.e35) - (other.e15 * this.e23) - (other.e25 * this.e31) - (other.e35 * this.e12)) - float4((other.group1.xyz.yzx * this.group4.xyz.zxy), other.e23 * this.e15), 
            /* e1234, 0, 0, 0 */
            float4(-(other.e23 * this.e41) - (other.e31 * this.e42) - (other.e12 * this.e43), 0.0, 0.0, 0.0)
        );
        Line right_dual = Line.from_groups(
            /* e415, e425, e435, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e235, e315, e125, 0 */
            float4(other.group1.xyz * float3(-1.0), 0.0)
        );
        return MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(-(right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43), 0.0), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e415 * wedge.e321) + (right_dual.e315 * wedge.e412), (right_dual.e425 * wedge.e321) + (right_dual.e125 * wedge.e423), (right_dual.e435 * wedge.e321) + (right_dual.e235 * wedge.e431), -(right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412)) - float4((right_dual.group1.xyz.zxy * wedge.group7.xyz.yzx), right_dual.e415 * wedge.e423), 
            /* e5, 0, 0, 0 */
            float4(-(right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435), 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4((right_dual.e415 * wedge.e3215) + (right_dual.e315 * wedge.e4125), (right_dual.e425 * wedge.e3215) + (right_dual.e125 * wedge.e4235), (right_dual.e435 * wedge.e3215) + (right_dual.e235 * wedge.e4315), -(right_dual.e425 * wedge.e4315) - (right_dual.e435 * wedge.e4125)) - (wedge.group9.yzxx * float4(right_dual.group1.xyz.zxy, right_dual.e415)), 
            /* e41, e42, e43, 0 */
            float4(float3(wedge.e1234) * right_dual.group0.xyz, 0.0), 
            /* e23, e31, e12, 0 */
            float4(float3(wedge.e1234) * right_dual.group1.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(wedge.group0.xy.yy, wedge.e12345, 0.0) * float4(float3(1.0), 0.0) * float4(right_dual.group0.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e423, e431, e412, 0 */
            float4(0.0), 
            /* e235, e315, e125, 0 */
            float4(float3(wedge.e12345) * right_dual.group1.xyz, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(0.0), 
            /* e1234, 0, 0, 0 */
            float4(0.0)
        );
    }
}
extension MultiVector: AntiRejectViaHorizonFrom<AntiMotor> {
    associatedtype Output = MultiVector;
    func anti_reject_via_horizon_from(other: AntiMotor) -> Output {
        MultiVector wedge = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(other.scalar * this.scalar, (other.scalar * this.e12345) + (other.e3215 * this.e4) - (other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435) - (other.e15 * this.e423) - (other.e25 * this.e431) - (other.e35 * this.e412)), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * this.group1, 
            /* e5, 0, 0, 0 */
            float4(other.scalar * this.e5, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(((float3(other.scalar) * this.group3.xyz) + (float3(this.scalar) * other.group1.xyz)), other.scalar * this.e45), 
            /* e41, e42, e43, 0 */
            float4(float3(other.scalar) * this.group4.xyz, 0.0), 
            /* e23, e31, e12, 0 */
            float4((float3(other.scalar) * this.group5.xyz) + (float3(this.scalar) * other.group0.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            float4(other.e15 * this.e4, other.e25 * this.e4, other.e35 * this.e4, -(other.e23 * this.e1) - (other.e31 * this.e2) - (other.e12 * this.e3)) + (float4(other.scalar) * this.group6), 
            /* e423, e431, e412, 0 */
            float4((float3(other.scalar) * this.group7.xyz) + (float3(this.e4) * other.group0.xyz), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(other.scalar) * this.group8.xyz) + (float3(this.e5) * other.group0.xyz) + (other.group1.zxy * this.group1.yzx) - (other.group1.yzx * this.group1.zxy), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar * this.e4235, other.scalar * this.e4315, other.scalar * this.e4125, -(other.e23 * this.e15) - (other.e31 * this.e25) - (other.e12 * this.e35) - (other.e25 * this.e31) - (other.e35 * this.e12)) + (other.group0 * float4(this.group3.www, this.e3215)) + (other.group1.zxyw * float4(this.group4.xyz.yzx, this.scalar)) - (other.group1.yzxx * float4(this.group4.xyz.zxy, this.e23)), 
            /* e1234, 0, 0, 0 */
            float4((other.scalar * this.e1234) - (other.e23 * this.e41) - (other.e31 * this.e42) - (other.e12 * this.e43), 0.0, 0.0, 0.0)
        );
        Motor right_dual = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2((right_dual.e12345 * wedge.scalar) + (right_dual.e5 * wedge.e1234) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43), right_dual.e12345 * wedge.e12345), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e415 * wedge.e321) + (right_dual.e12345 * wedge.e1), (right_dual.e425 * wedge.e321) + (right_dual.e12345 * wedge.e2), (right_dual.e435 * wedge.e321) + (right_dual.e12345 * wedge.e3), -(right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412)) + float4((wedge.group7.xyz.zxy * right_dual.group1.yzx), right_dual.e12345 * wedge.e4) - float4((wedge.group7.xyz.yzx * right_dual.group1.zxy), right_dual.e415 * wedge.e423), 
            /* e5, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e5) + (right_dual.e5 * wedge.e12345) - (right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435), 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4((right_dual.e12345 * wedge.e15) + (right_dual.e315 * wedge.e4125), (right_dual.e12345 * wedge.e25) + (right_dual.e125 * wedge.e4235), (right_dual.e12345 * wedge.e35) + (right_dual.e235 * wedge.e4315), -(right_dual.e425 * wedge.e4315) - (right_dual.e435 * wedge.e4125)) + (right_dual.group0 * float4(wedge.group9.www, wedge.e45)) - (wedge.group9.yzxx * float4(right_dual.group1.zxy, right_dual.e415)), 
            /* e41, e42, e43, 0 */
            float4((float3(right_dual.e12345) * wedge.group4.xyz) + (float3(wedge.e1234) * right_dual.group0.xyz), 0.0), 
            /* e23, e31, e12, 0 */
            float4((float3(right_dual.e12345) * wedge.group5.xyz) + (float3(wedge.e1234) * right_dual.group1.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            float4(((float3(right_dual.e12345) * wedge.group6.xyz) + (float3(wedge.e12345) * right_dual.group0.xyz)), right_dual.e12345 * wedge.e321), 
            /* e423, e431, e412, 0 */
            float4(float3(right_dual.e12345) * wedge.group7.xyz, 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(right_dual.e12345) * wedge.group8.xyz) + (float3(wedge.e12345) * right_dual.group1.xyz), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * wedge.group9, 
            /* e1234, 0, 0, 0 */
            float4(right_dual.e12345 * wedge.e1234, 0.0, 0.0, 0.0)
        );
    }
}
extension MultiVector: AntiRejectViaHorizonFrom<AntiPlane> {
    associatedtype Output = MultiVector;
    func anti_reject_via_horizon_from(other: AntiPlane) -> Output {
        MultiVector wedge = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(0.0, (other.e1 * this.e4235) + (other.e2 * this.e4315) + (other.e3 * this.e4125) + (other.e5 * this.e1234)), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(this.group0.xy.xx, this.scalar, 0.0) * float4(float3(1.0), 0.0) * float4(other.group0.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e5, 0, 0, 0 */
            float4(other.e5 * this.scalar, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(((float3(other.e5) * this.group1.xyz) - (float3(this.e5) * other.group0.xyz)), other.e5 * this.e4), 
            /* e41, e42, e43, 0 */
            float4(float3(this.e4) * other.group0.xyz, 0.0), 
            /* e23, e31, e12, 0 */
            float4((other.group0.zxy * this.group1.yzx) - (other.group0.yzx * this.group1.zxy), 0.0), 
            /* e415, e425, e435, e321 */
            float4(other.e5 * this.e41, other.e5 * this.e42, other.e5 * this.e43, -(other.e2 * this.e31) - (other.e3 * this.e12)) - float4((this.group3.www * other.group0.xyz), other.e1 * this.e23), 
            /* e423, e431, e412, 0 */
            float4((this.group4.xyz.yzx * other.group0.zxy) - (this.group4.xyz.zxy * other.group0.yzx), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(other.e5) * this.group5.xyz) + (other.group0.yzx * this.group3.zxy) - (other.group0.zxy * this.group3.yzx), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.e3 * this.e425 * -1.0, other.e1 * this.e435 * -1.0, other.e2 * this.e415 * -1.0, (other.e3 * this.e125) + (other.e5 * this.e321)) + (other.group0.wwwx * float4(this.group7.xyz, this.e235)) + float4((other.group0.yzx * this.group6.zxy), other.e2 * this.e315), 
            /* e1234, 0, 0, 0 */
            float4(-(other.e1 * this.e423) - (other.e2 * this.e431) - (other.e3 * this.e412), 0.0, 0.0, 0.0)
        );
        Plane right_dual = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2((wedge.e1 * right_dual.e4235) + (wedge.e2 * right_dual.e4315) + (wedge.e3 * right_dual.e4125) + (wedge.e4 * right_dual.e3215), 0.0), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4((wedge.e41 * right_dual.e3215) + (wedge.e31 * right_dual.e4125), (wedge.e42 * right_dual.e3215) + (wedge.e12 * right_dual.e4235), (wedge.e43 * right_dual.e3215) + (wedge.e23 * right_dual.e4315), -(wedge.e42 * right_dual.e4315) - (wedge.e43 * right_dual.e4125)) - (right_dual.group0.yzxx * float4(wedge.group5.xyz.zxy, wedge.e41)), 
            /* e5, 0, 0, 0 */
            float4((wedge.e15 * right_dual.e4235) + (wedge.e25 * right_dual.e4315) + (wedge.e35 * right_dual.e4125) + (wedge.e45 * right_dual.e3215), 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4((wedge.e415 * right_dual.e3215) + (wedge.e315 * right_dual.e4125), (wedge.e425 * right_dual.e3215) + (wedge.e125 * right_dual.e4235), (wedge.e435 * right_dual.e3215) + (wedge.e235 * right_dual.e4315), -(wedge.e425 * right_dual.e4315) - (wedge.e435 * right_dual.e4125)) - (right_dual.group0.yzxx * float4(wedge.group8.xyz.zxy, wedge.e415)), 
            /* e41, e42, e43, 0 */
            float4((wedge.group7.xyz.zxy * right_dual.group0.yzx) - (wedge.group7.xyz.yzx * right_dual.group0.zxy), 0.0), 
            /* e23, e31, e12, 0 */
            float4((float3(right_dual.e3215) * wedge.group7.xyz) - (float3(wedge.e321) * right_dual.group0.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            float4(((wedge.group9.zxy * right_dual.group0.yzx) - (wedge.group9.yzx * right_dual.group0.zxy)), wedge.e1234 * right_dual.e3215), 
            /* e423, e431, e412, 0 */
            float4(float3(wedge.e1234) * right_dual.group0.xyz, 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(right_dual.e3215) * wedge.group9.xyz) - (float3(wedge.e3215) * right_dual.group0.xyz), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_dual.group0, 
            /* e1234, 0, 0, 0 */
            float4(0.0)
        );
    }
}
extension MultiVector: AntiRejectViaHorizonFrom<AntiScalar> {
    associatedtype Output = Scalar;
    func anti_reject_via_horizon_from(other: AntiScalar) -> Output {
        return Scalar.from_groups(
            /* scalar, 0, 0, 0 */
            float4(powi(other.e12345, 2) * this.scalar * -1.0, 0.0, 0.0, 0.0)
        );
    }
}
extension MultiVector: AntiRejectViaHorizonFrom<Circle> {
    associatedtype Output = MultiVector;
    func anti_reject_via_horizon_from(other: Circle) -> Output {
        MultiVector wedge = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(0.0, -(other.e423 * this.e15) - (other.e431 * this.e25) - (other.e412 * this.e35) - (other.e415 * this.e23) - (other.e425 * this.e31) - (other.e435 * this.e12) - (other.e321 * this.e45) - (other.e235 * this.e41) - (other.e315 * this.e42) - (other.e125 * this.e43)), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5, 0, 0, 0 */
            float4(0.0), 
            /* e15, e25, e35, e45 */
            float4(0.0), 
            /* e41, e42, e43, 0 */
            float4(0.0), 
            /* e23, e31, e12, 0 */
            float4(0.0), 
            /* e415, e425, e435, e321 */
            float4(this.scalar) * other.group1, 
            /* e423, e431, e412, 0 */
            float4(float3(this.scalar) * other.group0.xyz, 0.0), 
            /* e235, e315, e125, 0 */
            float4(float3(this.scalar) * other.group2.xyz, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e425 * this.e3) + (other.e235 * this.e4), (other.e435 * this.e1) + (other.e315 * this.e4), (other.e415 * this.e2) + (other.e125 * this.e4), -(other.e321 * this.e5) - (other.e125 * this.e3)) - (this.group1.yzxy * float4(other.group1.zxy, other.e315)) - float4((float3(this.e5) * other.group0.xyz), other.e235 * this.e1), 
            /* e1234, 0, 0, 0 */
            float4((other.e423 * this.e1) + (other.e431 * this.e2) + (other.e412 * this.e3) + (other.e321 * this.e4), 0.0, 0.0, 0.0)
        );
        Dipole right_dual = Dipole.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, 0 */
            float4(other.group2.xyz, 0.0)
        );
        return MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(-(right_dual.e41 * wedge.e235) - (right_dual.e42 * wedge.e315) - (right_dual.e43 * wedge.e125) - (right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435) - (right_dual.e45 * wedge.e321) - (right_dual.e15 * wedge.e423) - (right_dual.e25 * wedge.e431) - (right_dual.e35 * wedge.e412), 0.0), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(-(right_dual.e41 * wedge.e3215) - (right_dual.e31 * wedge.e4125), -(right_dual.e42 * wedge.e3215) - (right_dual.e12 * wedge.e4235), -(right_dual.e43 * wedge.e3215) - (right_dual.e23 * wedge.e4315), (right_dual.e43 * wedge.e4125) + (right_dual.e45 * wedge.e1234)) + (wedge.group9.yzxy * float4(right_dual.group1.zxy, right_dual.e42)) + float4((float3(wedge.e1234) * right_dual.group2.xyz), right_dual.e41 * wedge.e4235), 
            /* e5, 0, 0, 0 */
            float4(-(right_dual.e45 * wedge.e3215) - (right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125), 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(wedge.e12345) * float4(right_dual.group2.xyz, right_dual.e45), 
            /* e41, e42, e43, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e23, e31, e12, 0 */
            float4(float3(wedge.e12345) * right_dual.group1.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(0.0), 
            /* e423, e431, e412, 0 */
            float4(0.0), 
            /* e235, e315, e125, 0 */
            float4(0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(0.0), 
            /* e1234, 0, 0, 0 */
            float4(0.0)
        );
    }
}
extension MultiVector: AntiRejectViaHorizonFrom<CircleRotor> {
    associatedtype Output = MultiVector;
    func anti_reject_via_horizon_from(other: CircleRotor) -> Output {
        MultiVector wedge = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(0.0, (other.e12345 * this.scalar) - (other.e423 * this.e15) - (other.e431 * this.e25) - (other.e412 * this.e35) - (other.e415 * this.e23) - (other.e425 * this.e31) - (other.e435 * this.e12) - (other.e321 * this.e45) - (other.e235 * this.e41) - (other.e315 * this.e42) - (other.e125 * this.e43)), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5, 0, 0, 0 */
            float4(0.0), 
            /* e15, e25, e35, e45 */
            float4(0.0), 
            /* e41, e42, e43, 0 */
            float4(0.0), 
            /* e23, e31, e12, 0 */
            float4(0.0), 
            /* e415, e425, e435, e321 */
            float4(this.scalar) * other.group1, 
            /* e423, e431, e412, 0 */
            float4(float3(this.scalar) * other.group0.xyz, 0.0), 
            /* e235, e315, e125, 0 */
            float4(float3(this.scalar) * other.group2.xyz, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e425 * this.e3) + (other.e235 * this.e4), (other.e435 * this.e1) + (other.e315 * this.e4), (other.e415 * this.e2) + (other.e125 * this.e4), -(other.e315 * this.e2) - (other.e125 * this.e3)) - (float4(this.e5) * float4(other.group0.xyz, other.e321)) - (this.group1.yzxx * float4(other.group1.zxy, other.e235)), 
            /* e1234, 0, 0, 0 */
            float4((other.e423 * this.e1) + (other.e431 * this.e2) + (other.e412 * this.e3) + (other.e321 * this.e4), 0.0, 0.0, 0.0)
        );
        AntiCircleRotor right_dual = AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2((right_dual.scalar * wedge.e12345) - (right_dual.e41 * wedge.e235) - (right_dual.e42 * wedge.e315) - (right_dual.e43 * wedge.e125) - (right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435) - (right_dual.e45 * wedge.e321) - (right_dual.e15 * wedge.e423) - (right_dual.e25 * wedge.e431) - (right_dual.e35 * wedge.e412), 0.0), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(-(right_dual.e41 * wedge.e3215) - (right_dual.e31 * wedge.e4125), -(right_dual.e42 * wedge.e3215) - (right_dual.e12 * wedge.e4235), -(right_dual.e43 * wedge.e3215) - (right_dual.e23 * wedge.e4315), (right_dual.e43 * wedge.e4125) + (right_dual.e45 * wedge.e1234)) + (wedge.group9.yzxx * float4(right_dual.group1.zxy, right_dual.e41)) + float4((float3(wedge.e1234) * right_dual.group2.xyz), right_dual.e42 * wedge.e4315), 
            /* e5, 0, 0, 0 */
            float4(-(right_dual.e45 * wedge.e3215) - (right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125), 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(wedge.e12345) * float4(right_dual.group2.xyz, right_dual.e45), 
            /* e41, e42, e43, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e23, e31, e12, 0 */
            float4(float3(wedge.e12345) * right_dual.group1.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(0.0), 
            /* e423, e431, e412, 0 */
            float4(0.0), 
            /* e235, e315, e125, 0 */
            float4(0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(0.0), 
            /* e1234, 0, 0, 0 */
            float4(0.0)
        );
    }
}
extension MultiVector: AntiRejectViaHorizonFrom<Dipole> {
    associatedtype Output = MultiVector;
    func anti_reject_via_horizon_from(other: Dipole) -> Output {
        MultiVector wedge = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(0.0, -(other.e41 * this.e235) - (other.e42 * this.e315) - (other.e43 * this.e125) - (other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435) - (other.e45 * this.e321) - (other.e15 * this.e423) - (other.e25 * this.e431) - (other.e35 * this.e412)), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5, 0, 0, 0 */
            float4(0.0), 
            /* e15, e25, e35, e45 */
            float4(this.scalar) * float4(other.group2.xyz, other.e45), 
            /* e41, e42, e43, 0 */
            float4(float3(this.scalar) * other.group0.xyz, 0.0), 
            /* e23, e31, e12, 0 */
            float4(float3(this.scalar) * other.group1.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4((other.e41 * this.e5) + (other.e15 * this.e4), (other.e42 * this.e5) + (other.e25 * this.e4), (other.e43 * this.e5) + (other.e35 * this.e4), -(other.e31 * this.e2) - (other.e12 * this.e3)) - (other.group1.wwwx * this.group1.xyzx), 
            /* e423, e431, e412, 0 */
            float4((float3(this.e4) * other.group1.xyz) + (other.group0.xyz.yzx * this.group1.zxy) - (other.group0.xyz.zxy * this.group1.yzx), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(this.e5) * other.group1.xyz) + (other.group2.xyz.zxy * this.group1.yzx) - (other.group2.xyz.yzx * this.group1.zxy), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e42 * this.e35) + (other.e23 * this.e45) + (other.e45 * this.e23) + (other.e35 * this.e42), (other.e43 * this.e15) + (other.e31 * this.e45) + (other.e45 * this.e31) + (other.e15 * this.e43), (other.e41 * this.e25) + (other.e12 * this.e45) + (other.e45 * this.e12) + (other.e25 * this.e41), -(other.e23 * this.e15) - (other.e31 * this.e25) - (other.e12 * this.e35) - (other.e35 * this.e12)) - float4((other.group0.xyz.zxy * this.group3.yzx), other.e15 * this.e23) - float4((other.group2.xyz.yzx * this.group4.xyz.zxy), other.e25 * this.e31), 
            /* e1234, 0, 0, 0 */
            float4(-(other.e41 * this.e23) - (other.e42 * this.e31) - (other.e43 * this.e12) - (other.e23 * this.e41) - (other.e31 * this.e42) - (other.e12 * this.e43), 0.0, 0.0, 0.0)
        );
        Circle right_dual = Circle.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, 0 */
            float4(other.group2.xyz * float3(-1.0), 0.0)
        );
        return MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(-(right_dual.e423 * wedge.e15) - (right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e321 * wedge.e45) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43), 0.0), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e412 * wedge.e315) + (right_dual.e415 * wedge.e321) + (right_dual.e321 * wedge.e415) + (right_dual.e315 * wedge.e412), (right_dual.e423 * wedge.e125) + (right_dual.e425 * wedge.e321) + (right_dual.e321 * wedge.e425) + (right_dual.e125 * wedge.e423), (right_dual.e431 * wedge.e235) + (right_dual.e435 * wedge.e321) + (right_dual.e321 * wedge.e435) + (right_dual.e235 * wedge.e431), -(right_dual.e412 * wedge.e435) - (right_dual.e415 * wedge.e423) - (right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412)) - float4((right_dual.group0.xyz.yzx * wedge.group8.xyz.zxy), right_dual.e423 * wedge.e415) - float4((right_dual.group2.xyz.zxy * wedge.group7.xyz.yzx), right_dual.e431 * wedge.e425), 
            /* e5, 0, 0, 0 */
            float4(-(right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435), 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4((right_dual.e415 * wedge.e3215) + (right_dual.e315 * wedge.e4125), (right_dual.e425 * wedge.e3215) + (right_dual.e125 * wedge.e4235), (right_dual.e435 * wedge.e3215) + (right_dual.e235 * wedge.e4315), -(right_dual.e425 * wedge.e4315) - (right_dual.e435 * wedge.e4125)) - (wedge.group9.yzxx * float4(right_dual.group2.xyz.zxy, right_dual.e415)), 
            /* e41, e42, e43, 0 */
            float4((float3(wedge.e1234) * right_dual.group1.xyz) + (right_dual.group0.xyz.zxy * wedge.group9.yzx) - (right_dual.group0.xyz.yzx * wedge.group9.zxy), 0.0), 
            /* e23, e31, e12, 0 */
            float4((float3(wedge.e3215) * right_dual.group0.xyz) + (float3(wedge.e1234) * right_dual.group2.xyz) - (float3(right_dual.e321) * wedge.group9.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            float4(wedge.e12345) * right_dual.group1, 
            /* e423, e431, e412, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e235, e315, e125, 0 */
            float4(float3(wedge.e12345) * right_dual.group2.xyz, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(0.0), 
            /* e1234, 0, 0, 0 */
            float4(0.0)
        );
    }
}
extension MultiVector: AntiRejectViaHorizonFrom<DipoleInversion> {
    associatedtype Output = MultiVector;
    func anti_reject_via_horizon_from(other: DipoleInversion) -> Output {
        MultiVector wedge = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(0.0, (other.e1234 * this.e5) + (other.e4235 * this.e1) + (other.e4315 * this.e2) + (other.e4125 * this.e3) + (other.e3215 * this.e4) - (other.e41 * this.e235) - (other.e42 * this.e315) - (other.e43 * this.e125) - (other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435) - (other.e45 * this.e321) - (other.e15 * this.e423) - (other.e25 * this.e431) - (other.e35 * this.e412)), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5, 0, 0, 0 */
            float4(0.0), 
            /* e15, e25, e35, e45 */
            float4(this.scalar) * float4(other.group2.xyz, other.e45), 
            /* e41, e42, e43, 0 */
            float4(float3(this.scalar) * other.group0.xyz, 0.0), 
            /* e23, e31, e12, 0 */
            float4(float3(this.scalar) * other.group1.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4((other.e41 * this.e5) + (other.e15 * this.e4), (other.e42 * this.e5) + (other.e25 * this.e4), (other.e43 * this.e5) + (other.e35 * this.e4), -(other.e31 * this.e2) - (other.e12 * this.e3)) - (other.group1.wwwx * this.group1.xyzx), 
            /* e423, e431, e412, 0 */
            float4((float3(this.e4) * other.group1.xyz) + (other.group0.xyz.yzx * this.group1.zxy) - (other.group0.xyz.zxy * this.group1.yzx), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(this.e5) * other.group1.xyz) + (other.group2.zxy * this.group1.yzx) - (other.group2.yzx * this.group1.zxy), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e42 * this.e35) + (other.e23 * this.e45) + (other.e45 * this.e23) + (other.e35 * this.e42), (other.e43 * this.e15) + (other.e31 * this.e45) + (other.e45 * this.e31) + (other.e15 * this.e43), (other.e41 * this.e25) + (other.e12 * this.e45) + (other.e45 * this.e12) + (other.e25 * this.e41), -(other.e23 * this.e15) - (other.e31 * this.e25) - (other.e12 * this.e35) - (other.e35 * this.e12)) + (float4(this.scalar) * other.group3) - (other.group2.yzxy * float4(this.group4.xyz.zxy, this.e31)) - float4((other.group0.xyz.zxy * this.group3.yzx), other.e15 * this.e23), 
            /* e1234, 0, 0, 0 */
            float4((other.e1234 * this.scalar) - (other.e41 * this.e23) - (other.e42 * this.e31) - (other.e43 * this.e12) - (other.e23 * this.e41) - (other.e31 * this.e42) - (other.e12 * this.e43), 0.0, 0.0, 0.0)
        );
        AntiDipoleInversion right_dual = AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2((right_dual.e4 * wedge.e3215) + (right_dual.e1 * wedge.e4235) + (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) + (right_dual.e5 * wedge.e1234) - (right_dual.e423 * wedge.e15) - (right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e321 * wedge.e45) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43), 0.0), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e412 * wedge.e315) + (right_dual.e415 * wedge.e321) + (right_dual.e321 * wedge.e415) + (right_dual.e315 * wedge.e412), (right_dual.e423 * wedge.e125) + (right_dual.e425 * wedge.e321) + (right_dual.e321 * wedge.e425) + (right_dual.e125 * wedge.e423), (right_dual.e431 * wedge.e235) + (right_dual.e435 * wedge.e321) + (right_dual.e321 * wedge.e435) + (right_dual.e235 * wedge.e431), -(right_dual.e412 * wedge.e435) - (right_dual.e415 * wedge.e423) - (right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412)) + (float4(wedge.e12345) * float4(right_dual.group3.xyz, right_dual.e4)) - float4((right_dual.group0.xyz.yzx * wedge.group8.xyz.zxy), right_dual.e423 * wedge.e415) - float4((wedge.group7.xyz.yzx * right_dual.group2.zxy), right_dual.e431 * wedge.e425), 
            /* e5, 0, 0, 0 */
            float4((right_dual.e5 * wedge.e12345) - (right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435), 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4((right_dual.e415 * wedge.e3215) + (right_dual.e315 * wedge.e4125), (right_dual.e425 * wedge.e3215) + (right_dual.e125 * wedge.e4235), (right_dual.e435 * wedge.e3215) + (right_dual.e235 * wedge.e4315), -(right_dual.e425 * wedge.e4315) - (right_dual.e435 * wedge.e4125)) - (wedge.group9.yzxx * float4(right_dual.group2.zxy, right_dual.e415)), 
            /* e41, e42, e43, 0 */
            float4((float3(wedge.e1234) * right_dual.group1.xyz) + (right_dual.group0.xyz.zxy * wedge.group9.yzx) - (right_dual.group0.xyz.yzx * wedge.group9.zxy), 0.0), 
            /* e23, e31, e12, 0 */
            float4((float3(wedge.e3215) * right_dual.group0.xyz) + (float3(wedge.e1234) * right_dual.group2.xyz) - (float3(right_dual.e321) * wedge.group9.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            float4(wedge.e12345) * right_dual.group1, 
            /* e423, e431, e412, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e235, e315, e125, 0 */
            float4(float3(wedge.e12345) * right_dual.group2.xyz, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(0.0), 
            /* e1234, 0, 0, 0 */
            float4(0.0)
        );
    }
}
extension MultiVector: AntiRejectViaHorizonFrom<DualNum> {
    associatedtype Output = MultiVector;
    func anti_reject_via_horizon_from(other: DualNum) -> Output {
        MultiVector wedge = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(0.0, (other.e5 * this.e1234) + (other.e12345 * this.scalar)), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5, 0, 0, 0 */
            float4(other.e5 * this.scalar, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(other.e5) * this.group1, 
            /* e41, e42, e43, 0 */
            float4(0.0), 
            /* e23, e31, e12, 0 */
            float4(0.0), 
            /* e415, e425, e435, e321 */
            float4(other.group0.xy.xx, other.e5, 0.0) * float4(float3(1.0), 0.0) * float4(this.group4.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e423, e431, e412, 0 */
            float4(0.0), 
            /* e235, e315, e125, 0 */
            float4(float3(other.e5) * this.group5.xyz, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.e5) * float4(this.group7.xyz, this.e321), 
            /* e1234, 0, 0, 0 */
            float4(0.0)
        );
        AntiDualNum right_dual = AntiDualNum.from_groups(
            /* e3215, scalar, 0, 0 */
            float4(other.group0.xy * float2(-1.0), 0.0, 0.0)
        );
        return MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2((right_dual.e3215 * wedge.e4) + (right_dual.scalar * wedge.e12345), 0.0), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5, 0, 0, 0 */
            float4(right_dual.e3215 * wedge.e45, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(right_dual.group0.xy.xx, right_dual.e3215, 0.0) * float4(float3(1.0), 0.0) * float4(wedge.group6.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e41, e42, e43, 0 */
            float4(0.0), 
            /* e23, e31, e12, 0 */
            float4(0.0), 
            /* e415, e425, e435, e321 */
            float4(0.0), 
            /* e423, e431, e412, 0 */
            float4(0.0), 
            /* e235, e315, e125, 0 */
            float4(float3(right_dual.e3215) * wedge.group9.xyz, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(float3(0.0), right_dual.e3215 * wedge.e12345), 
            /* e1234, 0, 0, 0 */
            float4(0.0)
        );
    }
}
extension MultiVector: AntiRejectViaHorizonFrom<FlatPoint> {
    associatedtype Output = MultiVector;
    func anti_reject_via_horizon_from(other: FlatPoint) -> Output {
        MultiVector wedge = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(0.0, -(other.e15 * this.e423) - (other.e25 * this.e431) - (other.e35 * this.e412) - (other.e45 * this.e321)), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5, 0, 0, 0 */
            float4(0.0), 
            /* e15, e25, e35, e45 */
            float4(this.scalar) * other.group0, 
            /* e41, e42, e43, 0 */
            float4(0.0), 
            /* e23, e31, e12, 0 */
            float4(0.0), 
            /* e415, e425, e435, e321 */
            float4(((float3(this.e4) * other.group0.xyz) - (float3(other.e45) * this.group1.xyz)), 0.0), 
            /* e423, e431, e412, 0 */
            float4(0.0), 
            /* e235, e315, e125, 0 */
            float4((other.group0.zxy * this.group1.yzx) - (other.group0.yzx * this.group1.zxy), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e35 * this.e42) + (other.e45 * this.e23), (other.e15 * this.e43) + (other.e45 * this.e31), (other.e25 * this.e41) + (other.e45 * this.e12), -(other.e25 * this.e31) - (other.e35 * this.e12)) - (other.group0.yzxx * float4(this.group4.xyz.zxy, this.e23)), 
            /* e1234, 0, 0, 0 */
            float4(0.0)
        );
        AntiFlatPoint right_dual = AntiFlatPoint.from_groups(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(-(right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43) - (right_dual.e321 * wedge.e45), 0.0), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4((float3(right_dual.e321) * wedge.group6.xyz), 0.0) + float4((wedge.group7.xyz.zxy * right_dual.group0.yzx), 0.0) - float4((wedge.group7.xyz.yzx * right_dual.group0.zxy), 0.0), 
            /* e5, 0, 0, 0 */
            float4(-(right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435), 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(((right_dual.group0.yzx * wedge.group9.zxy) - (right_dual.group0.zxy * wedge.group9.yzx)), 0.0), 
            /* e41, e42, e43, 0 */
            float4(0.0), 
            /* e23, e31, e12, 0 */
            float4((float3(wedge.e1234) * right_dual.group0.xyz) - (float3(right_dual.e321) * wedge.group9.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            float4(float3(0.0), right_dual.e321 * wedge.e12345), 
            /* e423, e431, e412, 0 */
            float4(0.0), 
            /* e235, e315, e125, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(0.0), 
            /* e1234, 0, 0, 0 */
            float4(0.0)
        );
    }
}
extension MultiVector: AntiRejectViaHorizonFrom<Flector> {
    associatedtype Output = MultiVector;
    func anti_reject_via_horizon_from(other: Flector) -> Output {
        MultiVector wedge = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(0.0, (other.e4235 * this.e1) + (other.e4315 * this.e2) + (other.e4125 * this.e3) + (other.e3215 * this.e4) - (other.e15 * this.e423) - (other.e25 * this.e431) - (other.e35 * this.e412) - (other.e45 * this.e321)), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5, 0, 0, 0 */
            float4(0.0), 
            /* e15, e25, e35, e45 */
            float4(this.scalar) * other.group0, 
            /* e41, e42, e43, 0 */
            float4(0.0), 
            /* e23, e31, e12, 0 */
            float4(0.0), 
            /* e415, e425, e435, e321 */
            float4(((float3(this.e4) * other.group0.xyz) - (float3(other.e45) * this.group1.xyz)), 0.0), 
            /* e423, e431, e412, 0 */
            float4(0.0), 
            /* e235, e315, e125, 0 */
            float4((other.group0.zxy * this.group1.yzx) - (other.group0.yzx * this.group1.zxy), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e35 * this.e42) + (other.e45 * this.e23), (other.e15 * this.e43) + (other.e45 * this.e31), (other.e25 * this.e41) + (other.e45 * this.e12), -(other.e25 * this.e31) - (other.e35 * this.e12)) + (float4(this.scalar) * other.group1) - (other.group0.yzxx * float4(this.group4.xyz.zxy, this.e23)), 
            /* e1234, 0, 0, 0 */
            float4(0.0)
        );
        AntiFlector right_dual = AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2((right_dual.e1 * wedge.e4235) + (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) + (right_dual.e5 * wedge.e1234) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43) - (right_dual.e321 * wedge.e45), 0.0), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4((float3(right_dual.e321) * wedge.group6.xyz), 0.0) + float4((float3(wedge.e12345) * right_dual.group1.xyz), 0.0) + float4((wedge.group7.xyz.zxy * right_dual.group0.yzx), 0.0) - float4((wedge.group7.xyz.yzx * right_dual.group0.zxy), 0.0), 
            /* e5, 0, 0, 0 */
            float4((right_dual.e5 * wedge.e12345) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435), 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(((right_dual.group0.yzx * wedge.group9.zxy) - (right_dual.group0.zxy * wedge.group9.yzx)), 0.0), 
            /* e41, e42, e43, 0 */
            float4(0.0), 
            /* e23, e31, e12, 0 */
            float4((float3(wedge.e1234) * right_dual.group0.xyz) - (float3(right_dual.e321) * wedge.group9.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            float4(float3(0.0), right_dual.e321 * wedge.e12345), 
            /* e423, e431, e412, 0 */
            float4(0.0), 
            /* e235, e315, e125, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(0.0), 
            /* e1234, 0, 0, 0 */
            float4(0.0)
        );
    }
}
extension MultiVector: AntiRejectViaHorizonFrom<Line> {
    associatedtype Output = MultiVector;
    func anti_reject_via_horizon_from(other: Line) -> Output {
        MultiVector wedge = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(0.0, -(other.e415 * this.e23) - (other.e425 * this.e31) - (other.e435 * this.e12) - (other.e235 * this.e41) - (other.e315 * this.e42) - (other.e125 * this.e43)), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5, 0, 0, 0 */
            float4(0.0), 
            /* e15, e25, e35, e45 */
            float4(0.0), 
            /* e41, e42, e43, 0 */
            float4(0.0), 
            /* e23, e31, e12, 0 */
            float4(0.0), 
            /* e415, e425, e435, e321 */
            float4(this.group0.xy.xx, this.scalar, 0.0) * float4(float3(1.0), 0.0) * float4(other.group0.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e423, e431, e412, 0 */
            float4(0.0), 
            /* e235, e315, e125, 0 */
            float4(float3(this.scalar) * other.group1.xyz, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e425 * this.e3) + (other.e235 * this.e4), (other.e435 * this.e1) + (other.e315 * this.e4), (other.e415 * this.e2) + (other.e125 * this.e4), -(other.e315 * this.e2) - (other.e125 * this.e3)) - (this.group1.yzxx * float4(other.group0.xyz.zxy, other.e235)), 
            /* e1234, 0, 0, 0 */
            float4(0.0)
        );
        AntiLine right_dual = AntiLine.from_groups(
            /* e23, e31, e12, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e15, e25, e35, 0 */
            float4(other.group1.xyz, 0.0)
        );
        return MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(-(right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435) - (right_dual.e15 * wedge.e423) - (right_dual.e25 * wedge.e431) - (right_dual.e35 * wedge.e412), 0.0), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4((float3(wedge.e1234) * right_dual.group1.xyz), 0.0) + float4((right_dual.group0.xyz.zxy * wedge.group9.yzx), 0.0) - float4((right_dual.group0.xyz.yzx * wedge.group9.zxy), 0.0), 
            /* e5, 0, 0, 0 */
            float4(-(right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125), 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(wedge.group0.xy.yy, wedge.e12345, 0.0) * float4(float3(1.0), 0.0) * float4(right_dual.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e41, e42, e43, 0 */
            float4(0.0), 
            /* e23, e31, e12, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(0.0), 
            /* e423, e431, e412, 0 */
            float4(0.0), 
            /* e235, e315, e125, 0 */
            float4(0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(0.0), 
            /* e1234, 0, 0, 0 */
            float4(0.0)
        );
    }
}
extension MultiVector: AntiRejectViaHorizonFrom<Motor> {
    associatedtype Output = MultiVector;
    func anti_reject_via_horizon_from(other: Motor) -> Output {
        MultiVector wedge = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(0.0, (other.e12345 * this.scalar) + (other.e5 * this.e1234) - (other.e415 * this.e23) - (other.e425 * this.e31) - (other.e435 * this.e12) - (other.e235 * this.e41) - (other.e315 * this.e42) - (other.e125 * this.e43)), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5, 0, 0, 0 */
            float4(other.e5 * this.scalar, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(other.e5) * this.group1, 
            /* e41, e42, e43, 0 */
            float4(0.0), 
            /* e23, e31, e12, 0 */
            float4(0.0), 
            /* e415, e425, e435, e321 */
            float4(((float3(other.e5) * this.group4.xyz) + (float3(this.scalar) * other.group0.xyz)), 0.0), 
            /* e423, e431, e412, 0 */
            float4(0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(other.e5) * this.group5.xyz) + (float3(this.scalar) * other.group1.xyz), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e425 * this.e3) + (other.e235 * this.e4), (other.e435 * this.e1) + (other.e315 * this.e4), (other.e415 * this.e2) + (other.e125 * this.e4), -(other.e315 * this.e2) - (other.e125 * this.e3)) + float4((this.group7.xyz * other.group1.www), other.e5 * this.e321) - (this.group1.yzxx * float4(other.group0.zxy, other.e235)), 
            /* e1234, 0, 0, 0 */
            float4(0.0)
        );
        AntiMotor right_dual = AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2((right_dual.scalar * wedge.e12345) + (right_dual.e3215 * wedge.e4) - (right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435) - (right_dual.e15 * wedge.e423) - (right_dual.e25 * wedge.e431) - (right_dual.e35 * wedge.e412), 0.0), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4((float3(right_dual.e3215) * wedge.group4.xyz), 0.0) + float4((float3(wedge.e1234) * right_dual.group1.xyz), 0.0) + float4((right_dual.group0.zxy * wedge.group9.yzx), 0.0) - float4((right_dual.group0.yzx * wedge.group9.zxy), 0.0), 
            /* e5, 0, 0, 0 */
            float4((right_dual.e3215 * wedge.e45) - (right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125), 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(((float3(right_dual.e3215) * wedge.group6.xyz) + (float3(wedge.e12345) * right_dual.group1.xyz)), 0.0), 
            /* e41, e42, e43, 0 */
            float4(0.0), 
            /* e23, e31, e12, 0 */
            float4((float3(right_dual.e3215) * wedge.group7.xyz) + (float3(wedge.e12345) * right_dual.group0.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            float4(0.0), 
            /* e423, e431, e412, 0 */
            float4(0.0), 
            /* e235, e315, e125, 0 */
            float4(float3(right_dual.e3215) * wedge.group9.xyz, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(float3(0.0), right_dual.e3215 * wedge.e12345), 
            /* e1234, 0, 0, 0 */
            float4(0.0)
        );
    }
}
extension MultiVector: AntiRejectViaHorizonFrom<MultiVector> {
    associatedtype Output = MultiVector;
    func anti_reject_via_horizon_from(other: MultiVector) -> Output {
        MultiVector wedge = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(other.scalar * this.scalar, (other.scalar * this.e12345) + (other.e12345 * this.scalar) + (other.e1 * this.e4235) + (other.e2 * this.e4315) + (other.e3 * this.e4125) + (other.e4 * this.e3215) + (other.e5 * this.e1234) + (other.e4235 * this.e1) + (other.e4315 * this.e2) + (other.e4125 * this.e3) + (other.e3215 * this.e4) + (other.e1234 * this.e5) - (other.e15 * this.e423) - (other.e25 * this.e431) - (other.e35 * this.e412) - (other.e45 * this.e321) - (other.e41 * this.e235) - (other.e42 * this.e315) - (other.e43 * this.e125) - (other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435) - (other.e415 * this.e23) - (other.e425 * this.e31) - (other.e435 * this.e12) - (other.e321 * this.e45) - (other.e423 * this.e15) - (other.e431 * this.e25) - (other.e412 * this.e35) - (other.e235 * this.e41) - (other.e315 * this.e42) - (other.e125 * this.e43)), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            (float4(other.scalar) * this.group1) + (float4(this.scalar) * other.group1), 
            /* e5, 0, 0, 0 */
            float4((other.scalar * this.e5) + (other.e5 * this.scalar), 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            (float4(other.scalar) * this.group3) + (float4(other.e5) * this.group1) + (float4(this.scalar) * other.group3) - (float4(this.e5) * other.group1), 
            /* e41, e42, e43, 0 */
            float4((float3(other.scalar) * this.group4.xyz) + (float3(this.scalar) * other.group4.xyz) + (float3(this.e4) * other.group1.xyz) - (float3(other.e4) * this.group1.xyz), 0.0), 
            /* e23, e31, e12, 0 */
            float4((float3(other.scalar) * this.group5.xyz) + (float3(this.scalar) * other.group5.xyz) + (other.group1.zxy * this.group1.yzx) - (other.group1.yzx * this.group1.zxy), 0.0), 
            /* e415, e425, e435, e321 */
            float4((other.e4 * this.e15) + (other.e5 * this.e41) + (other.e15 * this.e4) + (other.e41 * this.e5), (other.e4 * this.e25) + (other.e5 * this.e42) + (other.e25 * this.e4) + (other.e42 * this.e5), (other.e4 * this.e35) + (other.e5 * this.e43) + (other.e35 * this.e4) + (other.e43 * this.e5), -(other.e1 * this.e23) - (other.e2 * this.e31) - (other.e3 * this.e12) - (other.e12 * this.e3)) + (float4(other.scalar) * this.group6) + (float4(this.scalar) * other.group6) - (this.group1.xyzy * float4(other.group3.www, other.e31)) - float4((this.group3.www * other.group1.xyz), other.e23 * this.e1), 
            /* e423, e431, e412, 0 */
            float4((float3(other.scalar) * this.group7.xyz) + (float3(other.e4) * this.group5.xyz) + (float3(this.scalar) * other.group7.xyz) + (float3(this.e4) * other.group5.xyz) + (other.group4.xyz.yzx * this.group1.zxy) + (this.group4.xyz.yzx * other.group1.zxy) - (other.group4.xyz.zxy * this.group1.yzx) - (this.group4.xyz.zxy * other.group1.yzx), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(other.scalar) * this.group8.xyz) + (float3(other.e5) * this.group5.xyz) + (float3(this.scalar) * other.group8.xyz) + (float3(this.e5) * other.group5.xyz) + (other.group1.yzx * this.group3.zxy) + (other.group3.zxy * this.group1.yzx) - (other.group1.zxy * this.group3.yzx) - (other.group3.yzx * this.group1.zxy), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e2 * this.e435) + (other.e5 * this.e423) + (other.e45 * this.e23) + (other.e425 * this.e3), (other.e3 * this.e415) + (other.e5 * this.e431) + (other.e45 * this.e31) + (other.e435 * this.e1), (other.e1 * this.e425) + (other.e5 * this.e412) + (other.e45 * this.e12) + (other.e415 * this.e2), -(other.e15 * this.e23) - (other.e25 * this.e31) - (other.e35 * this.e12) - (other.e321 * this.e5)) + (float4(other.scalar) * this.group9) + (float4(this.scalar) * other.group9) + float4((other.group5.xyz * this.group3.www), other.e2 * this.e315) + float4((other.group8.xyz * this.group1.www), other.e3 * this.e125) + float4((other.group4.xyz.yzx * this.group3.zxy), other.e1 * this.e235) + float4((this.group4.xyz.yzx * other.group3.zxy), other.e5 * this.e321) - (this.group1.yzxz * float4(other.group6.zxy, other.e125)) - (this.group3.yzxx * float4(other.group4.xyz.zxy, other.e23)) - float4((float3(this.e5) * other.group7.xyz), other.e31 * this.e25) - float4((this.group8.xyz * other.group1.www), other.e235 * this.e1) - float4((this.group4.xyz.zxy * other.group3.yzx), other.e12 * this.e35) - float4((other.group1.zxy * this.group6.yzx), other.e315 * this.e2), 
            /* e1234, 0, 0, 0 */
            float4((other.scalar * this.e1234) + (other.e321 * this.e4) + (other.e423 * this.e1) + (other.e431 * this.e2) + (other.e412 * this.e3) + (other.e1234 * this.scalar) - (other.e1 * this.e423) - (other.e2 * this.e431) - (other.e3 * this.e412) - (other.e4 * this.e321) - (other.e41 * this.e23) - (other.e42 * this.e31) - (other.e43 * this.e12) - (other.e23 * this.e41) - (other.e31 * this.e42) - (other.e12 * this.e43), 0.0, 0.0, 0.0)
        );
        MultiVector right_dual = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(other.group0.xy.yx * float2(-1.0, 1.0), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5, 0, 0, 0 */
            float4(other.e3215, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43, 0 */
            float4(other.group7.xyz, 0.0), 
            /* e23, e31, e12, 0 */
            float4(other.group6.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412, 0 */
            float4(other.group4.xyz * float3(-1.0), 0.0), 
            /* e235, e315, e125, 0 */
            float4(other.group3.xyz * float3(-1.0), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        return MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2((right_dual.scalar * wedge.e12345) + (right_dual.e12345 * wedge.scalar) + (right_dual.e1 * wedge.e4235) + (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) + (right_dual.e4 * wedge.e3215) + (right_dual.e5 * wedge.e1234) + (right_dual.e4235 * wedge.e1) + (right_dual.e4315 * wedge.e2) + (right_dual.e4125 * wedge.e3) + (right_dual.e3215 * wedge.e4) + (right_dual.e1234 * wedge.e5) - (right_dual.e15 * wedge.e423) - (right_dual.e25 * wedge.e431) - (right_dual.e35 * wedge.e412) - (right_dual.e45 * wedge.e321) - (right_dual.e41 * wedge.e235) - (right_dual.e42 * wedge.e315) - (right_dual.e43 * wedge.e125) - (right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e321 * wedge.e45) - (right_dual.e423 * wedge.e15) - (right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43), right_dual.e12345 * wedge.e12345), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e15 * wedge.e1234) + (right_dual.e415 * wedge.e321) + (right_dual.e321 * wedge.e415) + (right_dual.e4125 * wedge.e31), (right_dual.e25 * wedge.e1234) + (right_dual.e425 * wedge.e321) + (right_dual.e321 * wedge.e425) + (right_dual.e4235 * wedge.e12), (right_dual.e35 * wedge.e1234) + (right_dual.e435 * wedge.e321) + (right_dual.e321 * wedge.e435) + (right_dual.e4315 * wedge.e23), -(right_dual.e415 * wedge.e423) - (right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412) - (right_dual.e1234 * wedge.e45)) + (float4(right_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_dual.group1) + (wedge.group9.yzxx * float4(right_dual.group5.xyz.zxy, right_dual.e41)) + float4((wedge.group4.xyz * right_dual.group9.www), right_dual.e45 * wedge.e1234) + float4((right_dual.group7.xyz.zxy * wedge.group8.xyz.yzx), right_dual.e42 * wedge.e4315) + float4((right_dual.group8.xyz.yzx * wedge.group7.xyz.zxy), right_dual.e43 * wedge.e4125) - (right_dual.group9.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((float3(right_dual.e1234) * wedge.group3.xyz), right_dual.e4125 * wedge.e43) - float4((right_dual.group4.xyz * wedge.group9.www), right_dual.e423 * wedge.e415) - float4((right_dual.group5.xyz.yzx * wedge.group9.zxy), right_dual.e431 * wedge.e425) - float4((right_dual.group7.xyz.yzx * wedge.group8.xyz.zxy), right_dual.e412 * wedge.e435) - float4((right_dual.group8.xyz.zxy * wedge.group7.xyz.yzx), right_dual.e4235 * wedge.e41), 
            /* e5, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e5) + (right_dual.e5 * wedge.e12345) + (right_dual.e4235 * wedge.e15) + (right_dual.e4315 * wedge.e25) + (right_dual.e4125 * wedge.e35) + (right_dual.e3215 * wedge.e45) - (right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125) - (right_dual.e45 * wedge.e3215) - (right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435), 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4((right_dual.e415 * wedge.e3215) + (right_dual.e315 * wedge.e4125) + (right_dual.e4125 * wedge.e315) + (right_dual.e3215 * wedge.e415), (right_dual.e425 * wedge.e3215) + (right_dual.e125 * wedge.e4235) + (right_dual.e4235 * wedge.e125) + (right_dual.e3215 * wedge.e425), (right_dual.e435 * wedge.e3215) + (right_dual.e235 * wedge.e4315) + (right_dual.e4315 * wedge.e235) + (right_dual.e3215 * wedge.e435), -(right_dual.e435 * wedge.e4125) - (right_dual.e4235 * wedge.e415) - (right_dual.e4315 * wedge.e425) - (right_dual.e4125 * wedge.e435)) + (float4(right_dual.e12345) * wedge.group3) + (float4(wedge.e12345) * right_dual.group3) - (wedge.group9.yzxx * float4(right_dual.group8.xyz.zxy, right_dual.e415)) - float4((wedge.group8.xyz.zxy * right_dual.group9.yzx), right_dual.e425 * wedge.e4315), 
            /* e41, e42, e43, 0 */
            float4((float3(right_dual.e12345) * wedge.group4.xyz) + (float3(right_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_dual.group4.xyz) + (float3(wedge.e1234) * right_dual.group6.xyz) + (right_dual.group7.xyz.zxy * wedge.group9.yzx) + (wedge.group7.xyz.zxy * right_dual.group9.yzx) - (right_dual.group7.xyz.yzx * wedge.group9.zxy) - (wedge.group7.xyz.yzx * right_dual.group9.zxy), 0.0), 
            /* e23, e31, e12, 0 */
            float4((float3(right_dual.e12345) * wedge.group5.xyz) + (float3(right_dual.e3215) * wedge.group7.xyz) + (float3(right_dual.e1234) * wedge.group8.xyz) + (float3(wedge.e12345) * right_dual.group5.xyz) + (float3(wedge.e3215) * right_dual.group7.xyz) + (float3(wedge.e1234) * right_dual.group8.xyz) - (float3(right_dual.e321) * wedge.group9.xyz) - (float3(wedge.e321) * right_dual.group9.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            (float4(right_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_dual.group6) + (right_dual.group9.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - float4((right_dual.group9.zxy * wedge.group9.yzx), right_dual.e1234 * wedge.e3215), 
            /* e423, e431, e412, 0 */
            float4((float3(right_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_dual.group7.xyz) + (float3(wedge.e1234) * right_dual.group9.xyz) - (float3(right_dual.e1234) * wedge.group9.xyz), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(right_dual.e12345) * wedge.group8.xyz) + (float3(right_dual.e3215) * wedge.group9.xyz) + (float3(wedge.e12345) * right_dual.group8.xyz) - (float3(wedge.e3215) * right_dual.group9.xyz), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            (float4(right_dual.e12345) * wedge.group9) + (float4(wedge.e12345) * right_dual.group9), 
            /* e1234, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e1234) + (right_dual.e1234 * wedge.e12345), 0.0, 0.0, 0.0)
        );
    }
}
extension MultiVector: AntiRejectViaHorizonFrom<Plane> {
    associatedtype Output = MultiVector;
    func anti_reject_via_horizon_from(other: Plane) -> Output {
        MultiVector wedge = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(0.0, (this.e1 * other.e4235) + (this.e2 * other.e4315) + (this.e3 * other.e4125) + (this.e4 * other.e3215)), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5, 0, 0, 0 */
            float4(0.0), 
            /* e15, e25, e35, e45 */
            float4(0.0), 
            /* e41, e42, e43, 0 */
            float4(0.0), 
            /* e23, e31, e12, 0 */
            float4(0.0), 
            /* e415, e425, e435, e321 */
            float4(0.0), 
            /* e423, e431, e412, 0 */
            float4(0.0), 
            /* e235, e315, e125, 0 */
            float4(0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(this.scalar) * other.group0, 
            /* e1234, 0, 0, 0 */
            float4(0.0)
        );
        AntiPlane right_dual = AntiPlane.from_groups(
            /* e1, e2, e3, e5 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2((right_dual.e1 * wedge.e4235) + (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) + (right_dual.e5 * wedge.e1234), 0.0), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(wedge.group0.xy.yy, wedge.e12345, 0.0) * float4(float3(1.0), 0.0) * float4(right_dual.group0.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e5, 0, 0, 0 */
            float4(right_dual.e5 * wedge.e12345, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(0.0), 
            /* e41, e42, e43, 0 */
            float4(0.0), 
            /* e23, e31, e12, 0 */
            float4(0.0), 
            /* e415, e425, e435, e321 */
            float4(0.0), 
            /* e423, e431, e412, 0 */
            float4(0.0), 
            /* e235, e315, e125, 0 */
            float4(0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(0.0), 
            /* e1234, 0, 0, 0 */
            float4(0.0)
        );
    }
}
extension MultiVector: AntiRejectViaHorizonFrom<RoundPoint> {
    associatedtype Output = MultiVector;
    func anti_reject_via_horizon_from(other: RoundPoint) -> Output {
        MultiVector wedge = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(0.0, (this.e4235 * other.e1) + (this.e4315 * other.e2) + (this.e4125 * other.e3) + (this.e3215 * other.e4) + (this.e1234 * other.e5)), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(this.scalar) * other.group0, 
            /* e5, 0, 0, 0 */
            float4(this.scalar * other.e5, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            (float4(other.e5) * this.group1) - (float4(this.e5) * other.group0), 
            /* e41, e42, e43, 0 */
            float4((float3(this.e4) * other.group0.xyz) - (float3(other.e4) * this.group1.xyz), 0.0), 
            /* e23, e31, e12, 0 */
            float4((this.group1.yzx * other.group0.zxy) - (this.group1.zxy * other.group0.yzx), 0.0), 
            /* e415, e425, e435, e321 */
            float4((this.e15 * other.e4) + (this.e41 * other.e5), (this.e25 * other.e4) + (this.e42 * other.e5), (this.e35 * other.e4) + (this.e43 * other.e5), -(this.e31 * other.e2) - (this.e12 * other.e3)) - (other.group0.xyzx * float4(this.group3.www, this.e23)), 
            /* e423, e431, e412, 0 */
            float4((float3(other.e4) * this.group5.xyz) + (this.group4.xyz.yzx * other.group0.zxy) - (this.group4.xyz.zxy * other.group0.yzx), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(other.e5) * this.group5.xyz) + (this.group3.zxy * other.group0.yzx) - (this.group3.yzx * other.group0.zxy), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(-(this.e425 * other.e3) - (this.e235 * other.e4), -(this.e435 * other.e1) - (this.e315 * other.e4), -(this.e415 * other.e2) - (this.e125 * other.e4), (this.e321 * other.e5) + (this.e125 * other.e3)) + (other.group0.yzxy * float4(this.group6.zxy, this.e315)) + float4((float3(other.e5) * this.group7.xyz), this.e235 * other.e1), 
            /* e1234, 0, 0, 0 */
            float4(-(this.e321 * other.e4) - (this.e423 * other.e1) - (this.e431 * other.e2) - (this.e412 * other.e3), 0.0, 0.0, 0.0)
        );
        Sphere right_dual = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        return MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2((wedge.e1 * right_dual.e4235) + (wedge.e2 * right_dual.e4315) + (wedge.e3 * right_dual.e4125) + (wedge.e4 * right_dual.e3215) + (wedge.e5 * right_dual.e1234), 0.0), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4((wedge.e41 * right_dual.e3215) + (wedge.e31 * right_dual.e4125), (wedge.e42 * right_dual.e3215) + (wedge.e12 * right_dual.e4235), (wedge.e43 * right_dual.e3215) + (wedge.e23 * right_dual.e4315), -(wedge.e45 * right_dual.e1234) - (wedge.e43 * right_dual.e4125)) - (right_dual.group0.yzxx * float4(wedge.group5.xyz.zxy, wedge.e41)) - float4((float3(right_dual.e1234) * wedge.group3.xyz), wedge.e42 * right_dual.e4315), 
            /* e5, 0, 0, 0 */
            float4((wedge.e15 * right_dual.e4235) + (wedge.e25 * right_dual.e4315) + (wedge.e35 * right_dual.e4125) + (wedge.e45 * right_dual.e3215), 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4((wedge.e415 * right_dual.e3215) + (wedge.e315 * right_dual.e4125), (wedge.e425 * right_dual.e3215) + (wedge.e125 * right_dual.e4235), (wedge.e435 * right_dual.e3215) + (wedge.e235 * right_dual.e4315), -(wedge.e425 * right_dual.e4315) - (wedge.e435 * right_dual.e4125)) - (right_dual.group0.yzxx * float4(wedge.group8.xyz.zxy, wedge.e415)), 
            /* e41, e42, e43, 0 */
            float4((float3(right_dual.e1234) * wedge.group6.xyz) + (wedge.group7.xyz.zxy * right_dual.group0.yzx) - (wedge.group7.xyz.yzx * right_dual.group0.zxy), 0.0), 
            /* e23, e31, e12, 0 */
            float4((float3(right_dual.e3215) * wedge.group7.xyz) + (float3(right_dual.e1234) * wedge.group8.xyz) - (float3(wedge.e321) * right_dual.group0.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            float4((wedge.group9.zxy * right_dual.group0.yzx), wedge.e1234 * right_dual.e3215) - (wedge.group9.yzxw * float4(right_dual.group0.zxy, right_dual.e1234)), 
            /* e423, e431, e412, 0 */
            float4((float3(wedge.e1234) * right_dual.group0.xyz) - (float3(right_dual.e1234) * wedge.group9.xyz), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(right_dual.e3215) * wedge.group9.xyz) - (float3(wedge.e3215) * right_dual.group0.xyz), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_dual.group0, 
            /* e1234, 0, 0, 0 */
            float4(wedge.e12345 * right_dual.e1234, 0.0, 0.0, 0.0)
        );
    }
}
extension MultiVector: AntiRejectViaHorizonFrom<Scalar> {
    associatedtype Output = MultiVector;
    func anti_reject_via_horizon_from(other: Scalar) -> Output {
        MultiVector wedge = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(other.scalar) * this.group0.xy, 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * this.group1, 
            /* e5, 0, 0, 0 */
            float4(this.e5 * other.scalar, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(other.scalar) * this.group3, 
            /* e41, e42, e43, 0 */
            float4(float3(other.scalar) * this.group4.xyz, 0.0), 
            /* e23, e31, e12, 0 */
            float4(float3(other.scalar) * this.group5.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(other.scalar) * this.group6, 
            /* e423, e431, e412, 0 */
            float4(float3(other.scalar) * this.group7.xyz, 0.0), 
            /* e235, e315, e125, 0 */
            float4(float3(other.scalar) * this.group8.xyz, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar) * this.group9, 
            /* e1234, 0, 0, 0 */
            float4(this.e1234 * other.scalar, 0.0, 0.0, 0.0)
        );
        AntiScalar right_dual = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(other.scalar, 0.0, 0.0, 0.0)
        );
        return MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(right_dual.e12345) * wedge.group0.xy, 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(right_dual.e12345) * wedge.group1, 
            /* e5, 0, 0, 0 */
            float4(right_dual.e12345 * wedge.e5, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(right_dual.e12345) * wedge.group3, 
            /* e41, e42, e43, 0 */
            float4(float3(right_dual.e12345) * wedge.group4.xyz, 0.0), 
            /* e23, e31, e12, 0 */
            float4(float3(right_dual.e12345) * wedge.group5.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(right_dual.e12345) * wedge.group6, 
            /* e423, e431, e412, 0 */
            float4(float3(right_dual.e12345) * wedge.group7.xyz, 0.0), 
            /* e235, e315, e125, 0 */
            float4(float3(right_dual.e12345) * wedge.group8.xyz, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * wedge.group9, 
            /* e1234, 0, 0, 0 */
            float4(right_dual.e12345 * wedge.e1234, 0.0, 0.0, 0.0)
        );
    }
}
extension MultiVector: AntiRejectViaHorizonFrom<Sphere> {
    associatedtype Output = MultiVector;
    func anti_reject_via_horizon_from(other: Sphere) -> Output {
        MultiVector wedge = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(0.0, (this.e1 * other.e4235) + (this.e2 * other.e4315) + (this.e3 * other.e4125) + (this.e4 * other.e3215) + (this.e5 * other.e1234)), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5, 0, 0, 0 */
            float4(0.0), 
            /* e15, e25, e35, e45 */
            float4(0.0), 
            /* e41, e42, e43, 0 */
            float4(0.0), 
            /* e23, e31, e12, 0 */
            float4(0.0), 
            /* e415, e425, e435, e321 */
            float4(0.0), 
            /* e423, e431, e412, 0 */
            float4(0.0), 
            /* e235, e315, e125, 0 */
            float4(0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(this.scalar) * other.group0, 
            /* e1234, 0, 0, 0 */
            float4(this.scalar * other.e1234, 0.0, 0.0, 0.0)
        );
        RoundPoint right_dual = RoundPoint.from_groups(
            /* e1, e2, e3, e4 */
            float4(other.group0.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5, 0, 0, 0 */
            float4(other.e3215, 0.0, 0.0, 0.0)
        );
        return MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2((wedge.e4235 * right_dual.e1) + (wedge.e4315 * right_dual.e2) + (wedge.e4125 * right_dual.e3) + (wedge.e3215 * right_dual.e4) + (wedge.e1234 * right_dual.e5), 0.0), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(wedge.e12345) * right_dual.group0, 
            /* e5, 0, 0, 0 */
            float4(wedge.e12345 * right_dual.e5, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(0.0), 
            /* e41, e42, e43, 0 */
            float4(0.0), 
            /* e23, e31, e12, 0 */
            float4(0.0), 
            /* e415, e425, e435, e321 */
            float4(0.0), 
            /* e423, e431, e412, 0 */
            float4(0.0), 
            /* e235, e315, e125, 0 */
            float4(0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(0.0), 
            /* e1234, 0, 0, 0 */
            float4(0.0)
        );
    }
}
extension MultiVector: AntiRejectViaHorizonFrom<VersorEven> {
    associatedtype Output = MultiVector;
    func anti_reject_via_horizon_from(other: VersorEven) -> Output {
        MultiVector wedge = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(0.0, (this.scalar * other.e12345) + (this.e4235 * other.e1) + (this.e4315 * other.e2) + (this.e4125 * other.e3) + (this.e3215 * other.e4) + (this.e1234 * other.e5) - (this.e15 * other.e423) - (this.e25 * other.e431) - (this.e35 * other.e412) - (this.e45 * other.e321) - (this.e41 * other.e235) - (this.e42 * other.e315) - (this.e43 * other.e125) - (this.e23 * other.e415) - (this.e31 * other.e425) - (this.e12 * other.e435)), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(this.scalar) * other.group3, 
            /* e5, 0, 0, 0 */
            float4(this.scalar * other.e5, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            (float4(other.e5) * this.group1) - (float4(this.e5) * other.group3), 
            /* e41, e42, e43, 0 */
            float4((float3(this.e4) * other.group3.xyz) - (float3(other.e4) * this.group1.xyz), 0.0), 
            /* e23, e31, e12, 0 */
            float4((this.group1.yzx * other.group3.zxy) - (this.group1.zxy * other.group3.yzx), 0.0), 
            /* e415, e425, e435, e321 */
            float4((this.e15 * other.e4) + (this.e41 * other.e5), (this.e25 * other.e4) + (this.e42 * other.e5), (this.e35 * other.e4) + (this.e43 * other.e5), -(this.e31 * other.e2) - (this.e12 * other.e3)) + (float4(this.scalar) * other.group1) - (other.group3.xyzx * float4(this.group3.www, this.e23)), 
            /* e423, e431, e412, 0 */
            float4((float3(this.scalar) * other.group0.xyz) + (float3(other.e4) * this.group5.xyz) + (this.group4.xyz.yzx * other.group3.zxy) - (this.group4.xyz.zxy * other.group3.yzx), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(this.scalar) * other.group2.xyz) + (float3(other.e5) * this.group5.xyz) + (this.group3.zxy * other.group3.yzx) - (this.group3.yzx * other.group3.zxy), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            (this.group6.zxyw * float4(other.group3.yzx, other.e5)) + float4((this.group7.xyz * other.group2.www), this.e235 * other.e1) + float4((this.group1.zxy * other.group1.yzx), this.e315 * other.e2) + float4((this.group1.www * other.group2.xyz), this.e125 * other.e3) - (float4(this.e5) * float4(other.group0.xyz, other.e321)) - (this.group1.yzxy * float4(other.group1.zxy, other.e315)) - float4((this.group8.xyz * other.group3.www), this.e1 * other.e235) - float4((this.group6.yzx * other.group3.zxy), this.e3 * other.e125), 
            /* e1234, 0, 0, 0 */
            float4((this.e1 * other.e423) + (this.e2 * other.e431) + (this.e3 * other.e412) + (this.e4 * other.e321) - (this.e321 * other.e4) - (this.e423 * other.e1) - (this.e431 * other.e2) - (this.e412 * other.e3), 0.0, 0.0, 0.0)
        );
        VersorOdd right_dual = VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        return MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2((wedge.e12345 * right_dual.scalar) + (wedge.e1 * right_dual.e4235) + (wedge.e2 * right_dual.e4315) + (wedge.e3 * right_dual.e4125) + (wedge.e4 * right_dual.e3215) + (wedge.e5 * right_dual.e1234) - (wedge.e415 * right_dual.e23) - (wedge.e425 * right_dual.e31) - (wedge.e435 * right_dual.e12) - (wedge.e321 * right_dual.e45) - (wedge.e423 * right_dual.e15) - (wedge.e431 * right_dual.e25) - (wedge.e412 * right_dual.e35) - (wedge.e235 * right_dual.e41) - (wedge.e315 * right_dual.e42) - (wedge.e125 * right_dual.e43), 0.0), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            (float4(wedge.e1234) * float4(right_dual.group2.xyz, right_dual.e45)) + (wedge.group9.yzxz * float4(right_dual.group1.zxy, right_dual.e43)) + float4((wedge.group4.xyz * right_dual.group3.www), wedge.e4235 * right_dual.e41) + float4((wedge.group5.xyz.yzx * right_dual.group3.zxy), wedge.e4315 * right_dual.e42) - (right_dual.group3.yzxx * float4(wedge.group5.xyz.zxy, wedge.e41)) - float4((wedge.group9.zxy * right_dual.group1.yzx), wedge.e43 * right_dual.e4125) - float4((wedge.group9.www * right_dual.group0.xyz), wedge.e45 * right_dual.e1234) - float4((right_dual.group2.www * wedge.group3.xyz), wedge.e42 * right_dual.e4315), 
            /* e5, 0, 0, 0 */
            float4((wedge.e15 * right_dual.e4235) + (wedge.e25 * right_dual.e4315) + (wedge.e35 * right_dual.e4125) + (wedge.e45 * right_dual.e3215) - (wedge.e4235 * right_dual.e15) - (wedge.e4315 * right_dual.e25) - (wedge.e4125 * right_dual.e35) - (wedge.e3215 * right_dual.e45), 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4((wedge.e415 * right_dual.e3215) + (wedge.e315 * right_dual.e4125), (wedge.e425 * right_dual.e3215) + (wedge.e125 * right_dual.e4235), (wedge.e435 * right_dual.e3215) + (wedge.e235 * right_dual.e4315), -(wedge.e425 * right_dual.e4315) - (wedge.e435 * right_dual.e4125)) + (float4(wedge.e12345) * float4(right_dual.group2.xyz, right_dual.e45)) - (right_dual.group3.yzxx * float4(wedge.group8.xyz.zxy, wedge.e415)), 
            /* e41, e42, e43, 0 */
            float4((float3(wedge.e12345) * right_dual.group0.xyz) + (float3(right_dual.e1234) * wedge.group6.xyz) + (wedge.group7.xyz.zxy * right_dual.group3.yzx) - (wedge.group7.xyz.yzx * right_dual.group3.zxy), 0.0), 
            /* e23, e31, e12, 0 */
            float4((float3(wedge.e12345) * right_dual.group1.xyz) + (float3(right_dual.e1234) * wedge.group8.xyz) + (float3(right_dual.e3215) * wedge.group7.xyz) - (float3(wedge.e321) * right_dual.group3.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            float4((wedge.group9.zxy * right_dual.group3.yzx), wedge.e1234 * right_dual.e3215) - (wedge.group9.yzxw * float4(right_dual.group3.zxy, right_dual.e1234)), 
            /* e423, e431, e412, 0 */
            float4((float3(wedge.e1234) * right_dual.group3.xyz) - (float3(right_dual.e1234) * wedge.group9.xyz), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(right_dual.e3215) * wedge.group9.xyz) - (float3(wedge.e3215) * right_dual.group3.xyz), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_dual.group3, 
            /* e1234, 0, 0, 0 */
            float4(wedge.e12345 * right_dual.e1234, 0.0, 0.0, 0.0)
        );
    }
}
extension MultiVector: AntiRejectViaHorizonFrom<VersorOdd> {
    associatedtype Output = MultiVector;
    func anti_reject_via_horizon_from(other: VersorOdd) -> Output {
        MultiVector wedge = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(this.scalar * other.scalar, (this.e12345 * other.scalar) + (this.e1 * other.e4235) + (this.e2 * other.e4315) + (this.e3 * other.e4125) + (this.e4 * other.e3215) + (this.e5 * other.e1234) - (this.e415 * other.e23) - (this.e425 * other.e31) - (this.e435 * other.e12) - (this.e321 * other.e45) - (this.e423 * other.e15) - (this.e431 * other.e25) - (this.e412 * other.e35) - (this.e235 * other.e41) - (this.e315 * other.e42) - (this.e125 * other.e43)), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * this.group1, 
            /* e5, 0, 0, 0 */
            float4(this.e5 * other.scalar, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            (float4(this.scalar) * float4(other.group2.xyz, other.e45)) + (float4(other.scalar) * this.group3), 
            /* e41, e42, e43, 0 */
            float4((float3(this.scalar) * other.group0.xyz) + (float3(other.scalar) * this.group4.xyz), 0.0), 
            /* e23, e31, e12, 0 */
            float4((float3(this.scalar) * other.group1.xyz) + (float3(other.scalar) * this.group5.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            float4((this.e5 * other.e41) + (this.e415 * other.scalar), (this.e5 * other.e42) + (this.e425 * other.scalar), (this.e5 * other.e43) + (this.e435 * other.scalar), -(this.e2 * other.e31) - (this.e3 * other.e12)) + float4((this.group1.www * other.group2.xyz), this.e321 * other.scalar) - (this.group1.xyzx * other.group1.wwwx), 
            /* e423, e431, e412, 0 */
            float4((float3(this.e4) * other.group1.xyz) + (float3(other.scalar) * this.group7.xyz) + (this.group1.zxy * other.group0.yzx) - (this.group1.yzx * other.group0.zxy), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(this.e5) * other.group1.xyz) + (float3(other.scalar) * this.group8.xyz) + (this.group1.yzx * other.group2.zxy) - (this.group1.zxy * other.group2.yzx), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4((this.e35 * other.e42) + (this.e45 * other.e23) + (this.e23 * other.e45) + (this.e4235 * other.scalar), (this.e15 * other.e43) + (this.e45 * other.e31) + (this.e31 * other.e45) + (this.e4315 * other.scalar), (this.e25 * other.e41) + (this.e45 * other.e12) + (this.e12 * other.e45) + (this.e4125 * other.scalar), -(this.e15 * other.e23) - (this.e25 * other.e31) - (this.e35 * other.e12) - (this.e12 * other.e35)) + (float4(this.scalar) * other.group3) + float4((this.group4.xyz.yzx * other.group2.zxy), this.e3215 * other.scalar) - (other.group2.yzxx * float4(this.group4.xyz.zxy, this.e23)) - float4((this.group3.yzx * other.group0.zxy), this.e31 * other.e25), 
            /* e1234, 0, 0, 0 */
            float4((this.scalar * other.e1234) + (this.e1234 * other.scalar) - (this.e41 * other.e23) - (this.e42 * other.e31) - (this.e43 * other.e12) - (this.e23 * other.e41) - (this.e31 * other.e42) - (this.e12 * other.e43), 0.0, 0.0, 0.0)
        );
        VersorEven right_dual = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2((wedge.scalar * right_dual.e12345) + (wedge.e4235 * right_dual.e1) + (wedge.e4315 * right_dual.e2) + (wedge.e4125 * right_dual.e3) + (wedge.e3215 * right_dual.e4) + (wedge.e1234 * right_dual.e5) - (wedge.e15 * right_dual.e423) - (wedge.e25 * right_dual.e431) - (wedge.e35 * right_dual.e412) - (wedge.e45 * right_dual.e321) - (wedge.e41 * right_dual.e235) - (wedge.e42 * right_dual.e315) - (wedge.e43 * right_dual.e125) - (wedge.e23 * right_dual.e415) - (wedge.e31 * right_dual.e425) - (wedge.e12 * right_dual.e435), wedge.e12345 * right_dual.e12345), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4((wedge.e1 * right_dual.e12345) + (wedge.e415 * right_dual.e321) + (wedge.e321 * right_dual.e415) + (wedge.e315 * right_dual.e412), (wedge.e2 * right_dual.e12345) + (wedge.e425 * right_dual.e321) + (wedge.e321 * right_dual.e425) + (wedge.e125 * right_dual.e423), (wedge.e3 * right_dual.e12345) + (wedge.e435 * right_dual.e321) + (wedge.e321 * right_dual.e435) + (wedge.e235 * right_dual.e431), -(wedge.e415 * right_dual.e423) - (wedge.e425 * right_dual.e431) - (wedge.e435 * right_dual.e412) - (wedge.e412 * right_dual.e435)) + (float4(wedge.e12345) * right_dual.group3) + float4((wedge.group7.xyz.zxy * right_dual.group2.yzx), wedge.e4 * right_dual.e12345) - float4((wedge.group7.xyz.yzx * right_dual.group2.zxy), wedge.e423 * right_dual.e415) - float4((wedge.group8.xyz.zxy * right_dual.group0.yzx), wedge.e431 * right_dual.e425), 
            /* e5, 0, 0, 0 */
            float4((wedge.e12345 * right_dual.e5) + (wedge.e5 * right_dual.e12345) - (wedge.e415 * right_dual.e235) - (wedge.e425 * right_dual.e315) - (wedge.e435 * right_dual.e125) - (wedge.e235 * right_dual.e415) - (wedge.e315 * right_dual.e425) - (wedge.e125 * right_dual.e435), 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4((wedge.e4125 * right_dual.e315) + (wedge.e3215 * right_dual.e415), (wedge.e4235 * right_dual.e125) + (wedge.e3215 * right_dual.e425), (wedge.e4315 * right_dual.e235) + (wedge.e3215 * right_dual.e435), -(wedge.e4315 * right_dual.e425) - (wedge.e4125 * right_dual.e435)) + (float4(right_dual.e12345) * wedge.group3) - (wedge.group9.yzxx * float4(right_dual.group2.zxy, right_dual.e415)), 
            /* e41, e42, e43, 0 */
            float4((float3(wedge.e1234) * right_dual.group1.xyz) + (float3(right_dual.e12345) * wedge.group4.xyz) + (wedge.group9.yzx * right_dual.group0.zxy) - (wedge.group9.zxy * right_dual.group0.yzx), 0.0), 
            /* e23, e31, e12, 0 */
            float4((float3(wedge.e3215) * right_dual.group0.xyz) + (float3(wedge.e1234) * right_dual.group2.xyz) + (float3(right_dual.e12345) * wedge.group5.xyz) - (float3(right_dual.e321) * wedge.group9.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            (float4(wedge.e12345) * right_dual.group1) + (float4(right_dual.e12345) * wedge.group6), 
            /* e423, e431, e412, 0 */
            float4((float3(wedge.e12345) * right_dual.group0.xyz) + (float3(right_dual.e12345) * wedge.group7.xyz), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(wedge.e12345) * right_dual.group2.xyz) + (float3(right_dual.e12345) * wedge.group8.xyz), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * wedge.group9, 
            /* e1234, 0, 0, 0 */
            float4(wedge.e1234 * right_dual.e12345, 0.0, 0.0, 0.0)
        );
    }
}
extension Plane {
    // Fancy infix trick
    func operator/(_rhs: AntiRejectViaHorizonFromInfix) -> AntiRejectViaHorizonFromInfixPartial<Plane> {
        return AntiRejectViaHorizonFromInfixPartial { a: this };
    }
}
extension Plane: AntiRejectViaHorizonFrom<AntiCircleRotor> {
    associatedtype Output = DipoleInversion;
    func anti_reject_via_horizon_from(other: AntiCircleRotor) -> Output {
        Plane wedge = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar) * this.group0
        );
        CircleRotor right_dual = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4((right_dual.group0.xyz.zxy * wedge.group0.yzx) - (right_dual.group0.xyz.yzx * wedge.group0.zxy), 0.0), 
            /* e23, e31, e12, e45 */
            float4(right_dual.e423 * wedge.e3215, right_dual.e431 * wedge.e3215, right_dual.e412 * wedge.e3215, -(right_dual.e425 * wedge.e4315) - (right_dual.e435 * wedge.e4125)) - (right_dual.group1.wwwx * wedge.group0.xyzx), 
            /* e15, e25, e35, e1234 */
            float4((float3(wedge.e3215) * right_dual.group1.xyz), 0.0) + float4((right_dual.group2.yzx * wedge.group0.zxy), 0.0) - float4((right_dual.group2.zxy * wedge.group0.yzx), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * wedge.group0
        );
    }
}
extension Plane: AntiRejectViaHorizonFrom<AntiDipoleInversion> {
    associatedtype Output = DipoleInversion;
    func anti_reject_via_horizon_from(other: AntiDipoleInversion) -> Output {
        AntiScalar wedge = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4((other.e4 * this.e3215) + (other.e1 * this.e4235) + (other.e2 * this.e4315) + (other.e3 * this.e4125), 0.0, 0.0, 0.0)
        );
        DipoleInversion right_dual = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(wedge.e12345) * right_dual.group1, 
            /* e15, e25, e35, e1234 */
            float4(wedge.e12345) * right_dual.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_dual.group3
        );
    }
}
extension Plane: AntiRejectViaHorizonFrom<AntiDualNum> {
    associatedtype Output = Plane;
    func anti_reject_via_horizon_from(other: AntiDualNum) -> Output {
        return Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar) * float4(other.scalar * this.e4235, other.scalar * this.e4315, other.scalar * this.e4125, other.scalar * this.e3215)
        );
    }
}
extension Plane: AntiRejectViaHorizonFrom<AntiFlector> {
    associatedtype Output = Flector;
    func anti_reject_via_horizon_from(other: AntiFlector) -> Output {
        AntiScalar wedge = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4((other.e1 * this.e4235) + (other.e2 * this.e4315) + (other.e3 * this.e4125), 0.0, 0.0, 0.0)
        );
        Flector right_dual = Flector.from_groups(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return Flector.from_groups(
            /* e15, e25, e35, e45 */
            float4(wedge.e12345) * right_dual.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_dual.group1
        );
    }
}
extension Plane: AntiRejectViaHorizonFrom<AntiMotor> {
    associatedtype Output = Flector;
    func anti_reject_via_horizon_from(other: AntiMotor) -> Output {
        Plane wedge = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar) * this.group0
        );
        Motor right_dual = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return Flector.from_groups(
            /* e15, e25, e35, e45 */
            float4((right_dual.e415 * wedge.e3215) + (right_dual.e315 * wedge.e4125), (right_dual.e425 * wedge.e3215) + (right_dual.e125 * wedge.e4235), (right_dual.e435 * wedge.e3215) + (right_dual.e235 * wedge.e4315), -(right_dual.e425 * wedge.e4315) - (right_dual.e435 * wedge.e4125)) - (wedge.group0.yzxx * float4(right_dual.group1.zxy, right_dual.e415)), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * wedge.group0
        );
    }
}
extension Plane: AntiRejectViaHorizonFrom<AntiPlane> {
    associatedtype Output = Plane;
    func anti_reject_via_horizon_from(other: AntiPlane) -> Output {
        return Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4((other.e1 * this.e4235) + (other.e2 * this.e4315) + (other.e3 * this.e4125)) * float4(other.group0.xyz, other.e5 * -1.0)
        );
    }
}
extension Plane: AntiRejectViaHorizonFrom<MultiVector> {
    associatedtype Output = MultiVector;
    func anti_reject_via_horizon_from(other: MultiVector) -> Output {
        MultiVector wedge = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(0.0, (other.e1 * this.e4235) + (other.e2 * this.e4315) + (other.e3 * this.e4125) + (other.e4 * this.e3215)), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5, 0, 0, 0 */
            float4(0.0), 
            /* e15, e25, e35, e45 */
            float4(0.0), 
            /* e41, e42, e43, 0 */
            float4(0.0), 
            /* e23, e31, e12, 0 */
            float4(0.0), 
            /* e415, e425, e435, e321 */
            float4(0.0), 
            /* e423, e431, e412, 0 */
            float4(0.0), 
            /* e235, e315, e125, 0 */
            float4(0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar) * this.group0, 
            /* e1234, 0, 0, 0 */
            float4(0.0)
        );
        MultiVector right_dual = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(other.group0.xy.yx * float2(-1.0, 1.0), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5, 0, 0, 0 */
            float4(other.e3215, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43, 0 */
            float4(other.group7.xyz, 0.0), 
            /* e23, e31, e12, 0 */
            float4(other.group6.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412, 0 */
            float4(other.group4.xyz * float3(-1.0), 0.0), 
            /* e235, e315, e125, 0 */
            float4(other.group3.xyz * float3(-1.0), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        return MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2((right_dual.scalar * wedge.e12345) + (right_dual.e12345 * wedge.scalar) + (right_dual.e1 * wedge.e4235) + (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) + (right_dual.e4 * wedge.e3215) + (right_dual.e5 * wedge.e1234) + (right_dual.e4235 * wedge.e1) + (right_dual.e4315 * wedge.e2) + (right_dual.e4125 * wedge.e3) + (right_dual.e3215 * wedge.e4) + (right_dual.e1234 * wedge.e5) - (right_dual.e15 * wedge.e423) - (right_dual.e25 * wedge.e431) - (right_dual.e35 * wedge.e412) - (right_dual.e45 * wedge.e321) - (right_dual.e41 * wedge.e235) - (right_dual.e42 * wedge.e315) - (right_dual.e43 * wedge.e125) - (right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e321 * wedge.e45) - (right_dual.e423 * wedge.e15) - (right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43), right_dual.e12345 * wedge.e12345), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e15 * wedge.e1234) + (right_dual.e415 * wedge.e321) + (right_dual.e321 * wedge.e415) + (right_dual.e4125 * wedge.e31), (right_dual.e25 * wedge.e1234) + (right_dual.e425 * wedge.e321) + (right_dual.e321 * wedge.e425) + (right_dual.e4235 * wedge.e12), (right_dual.e35 * wedge.e1234) + (right_dual.e435 * wedge.e321) + (right_dual.e321 * wedge.e435) + (right_dual.e4315 * wedge.e23), -(right_dual.e415 * wedge.e423) - (right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412) - (right_dual.e1234 * wedge.e45)) + (float4(right_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_dual.group1) + (wedge.group9.yzxx * float4(right_dual.group5.xyz.zxy, right_dual.e41)) + float4((wedge.group4.xyz * right_dual.group9.www), right_dual.e45 * wedge.e1234) + float4((right_dual.group7.xyz.zxy * wedge.group8.xyz.yzx), right_dual.e42 * wedge.e4315) + float4((right_dual.group8.xyz.yzx * wedge.group7.xyz.zxy), right_dual.e43 * wedge.e4125) - (right_dual.group9.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((float3(right_dual.e1234) * wedge.group3.xyz), right_dual.e4125 * wedge.e43) - float4((right_dual.group4.xyz * wedge.group9.www), right_dual.e423 * wedge.e415) - float4((right_dual.group5.xyz.yzx * wedge.group9.zxy), right_dual.e431 * wedge.e425) - float4((right_dual.group7.xyz.yzx * wedge.group8.xyz.zxy), right_dual.e412 * wedge.e435) - float4((right_dual.group8.xyz.zxy * wedge.group7.xyz.yzx), right_dual.e4235 * wedge.e41), 
            /* e5, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e5) + (right_dual.e5 * wedge.e12345) + (right_dual.e4235 * wedge.e15) + (right_dual.e4315 * wedge.e25) + (right_dual.e4125 * wedge.e35) + (right_dual.e3215 * wedge.e45) - (right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125) - (right_dual.e45 * wedge.e3215) - (right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435), 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4((right_dual.e415 * wedge.e3215) + (right_dual.e315 * wedge.e4125) + (right_dual.e4125 * wedge.e315) + (right_dual.e3215 * wedge.e415), (right_dual.e425 * wedge.e3215) + (right_dual.e125 * wedge.e4235) + (right_dual.e4235 * wedge.e125) + (right_dual.e3215 * wedge.e425), (right_dual.e435 * wedge.e3215) + (right_dual.e235 * wedge.e4315) + (right_dual.e4315 * wedge.e235) + (right_dual.e3215 * wedge.e435), -(right_dual.e435 * wedge.e4125) - (right_dual.e4235 * wedge.e415) - (right_dual.e4315 * wedge.e425) - (right_dual.e4125 * wedge.e435)) + (float4(right_dual.e12345) * wedge.group3) + (float4(wedge.e12345) * right_dual.group3) - (wedge.group9.yzxx * float4(right_dual.group8.xyz.zxy, right_dual.e415)) - float4((wedge.group8.xyz.zxy * right_dual.group9.yzx), right_dual.e425 * wedge.e4315), 
            /* e41, e42, e43, 0 */
            float4((float3(right_dual.e12345) * wedge.group4.xyz) + (float3(right_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_dual.group4.xyz) + (float3(wedge.e1234) * right_dual.group6.xyz) + (right_dual.group7.xyz.zxy * wedge.group9.yzx) + (wedge.group7.xyz.zxy * right_dual.group9.yzx) - (right_dual.group7.xyz.yzx * wedge.group9.zxy) - (wedge.group7.xyz.yzx * right_dual.group9.zxy), 0.0), 
            /* e23, e31, e12, 0 */
            float4((float3(right_dual.e12345) * wedge.group5.xyz) + (float3(right_dual.e3215) * wedge.group7.xyz) + (float3(right_dual.e1234) * wedge.group8.xyz) + (float3(wedge.e12345) * right_dual.group5.xyz) + (float3(wedge.e3215) * right_dual.group7.xyz) + (float3(wedge.e1234) * right_dual.group8.xyz) - (float3(right_dual.e321) * wedge.group9.xyz) - (float3(wedge.e321) * right_dual.group9.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            (float4(right_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_dual.group6) + (right_dual.group9.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - float4((right_dual.group9.zxy * wedge.group9.yzx), right_dual.e1234 * wedge.e3215), 
            /* e423, e431, e412, 0 */
            float4((float3(right_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_dual.group7.xyz) + (float3(wedge.e1234) * right_dual.group9.xyz) - (float3(right_dual.e1234) * wedge.group9.xyz), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(right_dual.e12345) * wedge.group8.xyz) + (float3(right_dual.e3215) * wedge.group9.xyz) + (float3(wedge.e12345) * right_dual.group8.xyz) - (float3(wedge.e3215) * right_dual.group9.xyz), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            (float4(right_dual.e12345) * wedge.group9) + (float4(wedge.e12345) * right_dual.group9), 
            /* e1234, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e1234) + (right_dual.e1234 * wedge.e12345), 0.0, 0.0, 0.0)
        );
    }
}
extension Plane: AntiRejectViaHorizonFrom<RoundPoint> {
    associatedtype Output = Sphere;
    func anti_reject_via_horizon_from(other: RoundPoint) -> Output {
        AntiScalar wedge = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4((this.e4235 * other.e1) + (this.e4315 * other.e2) + (this.e4125 * other.e3) + (this.e3215 * other.e4), 0.0, 0.0, 0.0)
        );
        Sphere right_dual = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        return Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_dual.group0, 
            /* e1234, 0, 0, 0 */
            float4(wedge.e12345 * right_dual.e1234, 0.0, 0.0, 0.0)
        );
    }
}
extension Plane: AntiRejectViaHorizonFrom<Scalar> {
    associatedtype Output = Plane;
    func anti_reject_via_horizon_from(other: Scalar) -> Output {
        return Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar) * float4(this.e4235 * other.scalar, this.e4315 * other.scalar, this.e4125 * other.scalar, this.e3215 * other.scalar)
        );
    }
}
extension Plane: AntiRejectViaHorizonFrom<VersorEven> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: VersorEven) -> Output {
        AntiScalar wedge = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4((this.e4235 * other.e1) + (this.e4315 * other.e2) + (this.e4125 * other.e3) + (this.e3215 * other.e4), 0.0, 0.0, 0.0)
        );
        VersorOdd right_dual = VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            float4(wedge.e12345) * right_dual.group0, 
            /* e23, e31, e12, e45 */
            float4(wedge.e12345) * right_dual.group1, 
            /* e15, e25, e35, e1234 */
            float4(wedge.e12345) * right_dual.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_dual.group3
        );
    }
}
extension Plane: AntiRejectViaHorizonFrom<VersorOdd> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: VersorOdd) -> Output {
        Plane wedge = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar) * this.group0
        );
        VersorEven right_dual = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            float4(wedge.e4125 * right_dual.e431 * -1.0, wedge.e4235 * right_dual.e412 * -1.0, wedge.e4315 * right_dual.e423 * -1.0, (wedge.e4315 * right_dual.e2) + (wedge.e4125 * right_dual.e3) + (wedge.e3215 * right_dual.e4)) + (wedge.group0.yzxx * float4(right_dual.group0.zxy, right_dual.e1)), 
            /* e23, e31, e12, e45 */
            float4(wedge.e3215 * right_dual.e423, wedge.e3215 * right_dual.e431, wedge.e3215 * right_dual.e412, -(wedge.e4315 * right_dual.e425) - (wedge.e4125 * right_dual.e435)) - (wedge.group0.xyzx * right_dual.group1.wwwx), 
            /* e15, e25, e35, e1234 */
            float4((float3(wedge.e3215) * right_dual.group1.xyz), 0.0) + float4((wedge.group0.zxy * right_dual.group2.yzx), 0.0) - float4((wedge.group0.yzx * right_dual.group2.zxy), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * wedge.group0
        );
    }
}
extension RoundPoint {
    // Fancy infix trick
    func operator/(_rhs: AntiRejectViaHorizonFromInfix) -> AntiRejectViaHorizonFromInfixPartial<RoundPoint> {
        return AntiRejectViaHorizonFromInfixPartial { a: this };
    }
}
extension RoundPoint: AntiRejectViaHorizonFrom<AntiCircleRotor> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: AntiCircleRotor) -> Output {
        AntiDipoleInversion wedge = AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4((float3(this.e4) * other.group1.xyz) + (other.group0.xyz.yzx * this.group0.zxy) - (other.group0.xyz.zxy * this.group0.yzx), 0.0), 
            /* e415, e425, e435, e321 */
            float4((other.e41 * this.e5) + (other.e15 * this.e4), (other.e42 * this.e5) + (other.e25 * this.e4), (other.e43 * this.e5) + (other.e35 * this.e4), -(other.e31 * this.e2) - (other.e12 * this.e3)) - (other.group1.wwwx * this.group0.xyzx), 
            /* e235, e315, e125, e4 */
            float4(((float3(this.e5) * other.group1.xyz) + (other.group2.zxy * this.group0.yzx) - (other.group2.yzx * this.group0.zxy)), other.scalar * this.e4), 
            /* e1, e2, e3, e5 */
            float4(other.scalar) * float4(this.group0.xyz, this.e5)
        );
        CircleRotor right_dual = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(right_dual.e12345) * wedge.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(right_dual.e12345) * wedge.group1, 
            /* e235, e315, e125, e4 */
            float4((float3(right_dual.e12345) * wedge.group2.xyz), (wedge.e4 * right_dual.e12345) - (wedge.e423 * right_dual.e415) - (wedge.e431 * right_dual.e425) - (wedge.e412 * right_dual.e435) - (wedge.e415 * right_dual.e423) - (wedge.e425 * right_dual.e431) - (wedge.e435 * right_dual.e412)), 
            /* e1, e2, e3, e5 */
            float4((wedge.e415 * right_dual.e321) + (wedge.e321 * right_dual.e415) + (wedge.e315 * right_dual.e412) + (wedge.e1 * right_dual.e12345), (wedge.e425 * right_dual.e321) + (wedge.e321 * right_dual.e425) + (wedge.e125 * right_dual.e423) + (wedge.e2 * right_dual.e12345), (wedge.e435 * right_dual.e321) + (wedge.e321 * right_dual.e435) + (wedge.e235 * right_dual.e431) + (wedge.e3 * right_dual.e12345), -(wedge.e435 * right_dual.e125) - (wedge.e235 * right_dual.e415) - (wedge.e315 * right_dual.e425) - (wedge.e125 * right_dual.e435)) + (right_dual.group2.yzxw * float4(wedge.group0.xyz.zxy, wedge.e5)) - (right_dual.group2.zxyx * float4(wedge.group0.xyz.yzx, wedge.e415)) - float4((right_dual.group0.xyz.yzx * wedge.group2.zxy), wedge.e425 * right_dual.e315)
        );
    }
}
extension RoundPoint: AntiRejectViaHorizonFrom<AntiDipoleInversion> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: AntiDipoleInversion) -> Output {
        DipoleInversion wedge = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4((float3(this.e4) * other.group3.xyz) - (float3(other.e4) * this.group0.xyz), 0.0), 
            /* e23, e31, e12, e45 */
            (other.group3.zxyw * this.group0.yzxw) - float4((other.group3.yzx * this.group0.zxy), other.e4 * this.e5), 
            /* e15, e25, e35, e1234 */
            float4(other.e1 * this.e5 * -1.0, other.e2 * this.e5 * -1.0, other.e3 * this.e5 * -1.0, (other.e431 * this.e2) + (other.e412 * this.e3) + (other.e321 * this.e4)) + (this.group0.xyzx * float4(other.group3.www, other.e423)), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e425 * this.e3) + (other.e235 * this.e4), (other.e435 * this.e1) + (other.e315 * this.e4), (other.e415 * this.e2) + (other.e125 * this.e4), -(other.e315 * this.e2) - (other.e125 * this.e3)) - (float4(this.e5) * float4(other.group0.xyz, other.e321)) - (this.group0.yzxx * float4(other.group1.zxy, other.e235))
        );
        DipoleInversion right_dual = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4((float3(wedge.e1234) * right_dual.group3.xyz) - (float3(right_dual.e1234) * wedge.group3.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            (right_dual.group3.yzxw * float4(wedge.group3.zxy, wedge.e1234)) - (wedge.group3.yzxw * float4(right_dual.group3.zxy, right_dual.e1234)), 
            /* e235, e315, e125, e4 */
            (wedge.group3.xyzx * float4(right_dual.group3.www, right_dual.e41)) + float4(float3(0.0), (right_dual.e42 * wedge.e4315) + (right_dual.e43 * wedge.e4125) + (right_dual.e45 * wedge.e1234) - (right_dual.e1234 * wedge.e45) - (right_dual.e4315 * wedge.e42) - (right_dual.e4125 * wedge.e43)) - float4((wedge.group3.www * right_dual.group3.xyz), right_dual.e4235 * wedge.e41), 
            /* e1, e2, e3, e5 */
            (right_dual.group3.zxyw * wedge.group1.yzxw) + (wedge.group2.wwwz * float4(right_dual.group2.xyz, right_dual.e4125)) + float4((wedge.group0.xyz * right_dual.group3.www), right_dual.e4235 * wedge.e15) + float4((right_dual.group1.zxy * wedge.group3.yzx), right_dual.e4315 * wedge.e25) - (float4(wedge.e3215) * float4(right_dual.group0.xyz, right_dual.e45)) - (right_dual.group2.wwwy * float4(wedge.group2.xyz, wedge.e4315)) - (wedge.group3.zxyx * float4(right_dual.group1.yzx, right_dual.e15)) - float4((right_dual.group3.yzx * wedge.group1.zxy), right_dual.e35 * wedge.e4125)
        );
    }
}
extension RoundPoint: AntiRejectViaHorizonFrom<AntiDualNum> {
    associatedtype Output = VersorEven;
    func anti_reject_via_horizon_from(other: AntiDualNum) -> Output {
        VersorEven wedge = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4(float3(0.0), other.e3215 * this.e4), 
            /* e415, e425, e435, e321 */
            float4(0.0), 
            /* e235, e315, e125, e5 */
            float4(float3(0.0), other.scalar * this.e5), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * this.group0
        );
        DualNum right_dual = DualNum.from_groups(
            /* e5, e12345, 0, 0 */
            float4(other.group0.xy, 0.0, 0.0)
        );
        return VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4(right_dual.e12345) * wedge.group0, 
            /* e415, e425, e435, e321 */
            float4(0.0), 
            /* e235, e315, e125, e5 */
            float4(right_dual.group0.xy.yy, right_dual.e12345, (right_dual.e5 * wedge.e12345) + (right_dual.e12345 * wedge.e5)) * float4(wedge.group2.xyz, 1.0), 
            /* e1, e2, e3, e4 */
            float4(right_dual.e12345) * wedge.group3
        );
    }
}
extension RoundPoint: AntiRejectViaHorizonFrom<AntiFlatPoint> {
    associatedtype Output = RoundPoint;
    func anti_reject_via_horizon_from(other: AntiFlatPoint) -> Output {
        Sphere wedge = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4((float3(this.e4) * other.group0.xyz), -(other.e235 * this.e1) - (other.e315 * this.e2) - (other.e125 * this.e3) - (other.e321 * this.e5)), 
            /* e1234, 0, 0, 0 */
            float4(other.e321 * this.e4, 0.0, 0.0, 0.0)
        );
        FlatPoint right_dual = FlatPoint.from_groups(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return RoundPoint.from_groups(
            /* e1, e2, e3, e4 */
            float4(wedge.e1234) * right_dual.group0, 
            /* e5, 0, 0, 0 */
            float4(-(right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125) - (right_dual.e45 * wedge.e3215), 0.0, 0.0, 0.0)
        );
    }
}
extension RoundPoint: AntiRejectViaHorizonFrom<AntiFlector> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: AntiFlector) -> Output {
        DipoleInversion wedge = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(this.e4) * other.group1.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(((other.group1.zxy * this.group0.yzx) - (other.group1.yzx * this.group0.zxy)), other.e5 * this.e4), 
            /* e15, e25, e35, e1234 */
            float4(((float3(other.e5) * this.group0.xyz) - (float3(this.e5) * other.group1.xyz)), other.e321 * this.e4), 
            /* e4235, e4315, e4125, e3215 */
            float4((float3(this.e4) * other.group0.xyz), -(other.e235 * this.e1) - (other.e315 * this.e2) - (other.e125 * this.e3) - (other.e321 * this.e5))
        );
        Flector right_dual = Flector.from_groups(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(wedge.e1234) * right_dual.group1.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(((wedge.group3.zxy * right_dual.group1.yzx) - (wedge.group3.yzx * right_dual.group1.zxy)), wedge.e1234 * right_dual.e3215), 
            /* e235, e315, e125, e4 */
            float4(float3(0.0), -(wedge.e42 * right_dual.e4315) - (wedge.e43 * right_dual.e4125)) + float4((right_dual.group1.www * wedge.group3.xyz), wedge.e1234 * right_dual.e45) - (right_dual.group1.xyzx * float4(wedge.group3.www, wedge.e41)), 
            /* e1, e2, e3, e5 */
            (float4(right_dual.e3215) * float4(wedge.group0.xyz, wedge.e45)) + (wedge.group2.wwwy * float4(right_dual.group0.xyz, right_dual.e4315)) + (right_dual.group1.zxyx * float4(wedge.group1.yzx, wedge.e15)) + float4(float3(0.0), (wedge.e35 * right_dual.e4125) - (wedge.e4315 * right_dual.e25) - (wedge.e4125 * right_dual.e35) - (wedge.e3215 * right_dual.e45)) - float4((wedge.group1.zxy * right_dual.group1.yzx), wedge.e4235 * right_dual.e15)
        );
    }
}
extension RoundPoint: AntiRejectViaHorizonFrom<AntiLine> {
    associatedtype Output = RoundPoint;
    func anti_reject_via_horizon_from(other: AntiLine) -> Output {
        Circle wedge = Circle.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(this.e4) * other.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4((float3(this.e4) * other.group1.xyz), -(other.e23 * this.e1) - (other.e31 * this.e2) - (other.e12 * this.e3)), 
            /* e235, e315, e125, 0 */
            float4((float3(this.e5) * other.group0.xyz) + (other.group1.xyz.zxy * this.group0.yzx) - (other.group1.xyz.yzx * this.group0.zxy), 0.0)
        );
        Line right_dual = Line.from_groups(
            /* e415, e425, e435, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e235, e315, e125, 0 */
            float4(other.group1.xyz * float3(-1.0), 0.0)
        );
        return RoundPoint.from_groups(
            /* e1, e2, e3, e4 */
            float4((wedge.e412 * right_dual.e315) + (wedge.e321 * right_dual.e415), (wedge.e423 * right_dual.e125) + (wedge.e321 * right_dual.e425), (wedge.e431 * right_dual.e235) + (wedge.e321 * right_dual.e435), -(wedge.e431 * right_dual.e425) - (wedge.e412 * right_dual.e435)) - float4((wedge.group0.xyz.yzx * right_dual.group1.xyz.zxy), wedge.e423 * right_dual.e415), 
            /* e5, 0, 0, 0 */
            float4(-(wedge.e415 * right_dual.e235) - (wedge.e425 * right_dual.e315) - (wedge.e435 * right_dual.e125) - (wedge.e235 * right_dual.e415) - (wedge.e315 * right_dual.e425) - (wedge.e125 * right_dual.e435), 0.0, 0.0, 0.0)
        );
    }
}
extension RoundPoint: AntiRejectViaHorizonFrom<AntiMotor> {
    associatedtype Output = VersorEven;
    func anti_reject_via_horizon_from(other: AntiMotor) -> Output {
        VersorEven wedge = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4(this.e4) * float4(other.group0.xyz, other.e3215), 
            /* e415, e425, e435, e321 */
            float4((float3(this.e4) * other.group1.xyz), -(other.e23 * this.e1) - (other.e31 * this.e2) - (other.e12 * this.e3)), 
            /* e235, e315, e125, e5 */
            float4(((float3(this.e5) * other.group0.xyz) + (other.group1.zxy * this.group0.yzx) - (other.group1.yzx * this.group0.zxy)), other.scalar * this.e5), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * this.group0
        );
        Motor right_dual = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4(right_dual.e12345) * wedge.group0, 
            /* e415, e425, e435, e321 */
            float4(((float3(right_dual.e12345) * wedge.group1.xyz) + (float3(wedge.e12345) * right_dual.group0.xyz)), right_dual.e12345 * wedge.e321), 
            /* e235, e315, e125, e5 */
            (float4(right_dual.e12345) * wedge.group2) + (float4(wedge.e12345) * right_dual.group1) + float4(float3(0.0), -(right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435)), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e12345 * wedge.e1) + (right_dual.e315 * wedge.e412), (right_dual.e12345 * wedge.e2) + (right_dual.e125 * wedge.e423), (right_dual.e12345 * wedge.e3) + (right_dual.e235 * wedge.e431), -(right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412)) + (right_dual.group0 * float4(wedge.group1.www, wedge.e4)) - (wedge.group0.yzxx * float4(right_dual.group1.zxy, right_dual.e415))
        );
    }
}
extension RoundPoint: AntiRejectViaHorizonFrom<AntiPlane> {
    associatedtype Output = RoundPoint;
    func anti_reject_via_horizon_from(other: AntiPlane) -> Output {
        Dipole wedge = Dipole.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(this.e4) * other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(((other.group0.zxy * this.group0.yzx) - (other.group0.yzx * this.group0.zxy)), other.e5 * this.e4), 
            /* e15, e25, e35, 0 */
            float4((float3(other.e5) * this.group0.xyz) - (float3(this.e5) * other.group0.xyz), 0.0)
        );
        Plane right_dual = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return RoundPoint.from_groups(
            /* e1, e2, e3, e4 */
            float4((wedge.e41 * right_dual.e3215) + (wedge.e31 * right_dual.e4125), (wedge.e42 * right_dual.e3215) + (wedge.e12 * right_dual.e4235), (wedge.e43 * right_dual.e3215) + (wedge.e23 * right_dual.e4315), -(wedge.e42 * right_dual.e4315) - (wedge.e43 * right_dual.e4125)) - (right_dual.group0.yzxx * float4(wedge.group1.zxy, wedge.e41)), 
            /* e5, 0, 0, 0 */
            float4((wedge.e45 * right_dual.e3215) + (wedge.e15 * right_dual.e4235) + (wedge.e25 * right_dual.e4315) + (wedge.e35 * right_dual.e4125), 0.0, 0.0, 0.0)
        );
    }
}
extension RoundPoint: AntiRejectViaHorizonFrom<Circle> {
    associatedtype Output = RoundPoint;
    func anti_reject_via_horizon_from(other: Circle) -> Output {
        Sphere wedge = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4((other.e425 * this.e3) + (other.e235 * this.e4), (other.e435 * this.e1) + (other.e315 * this.e4), (other.e415 * this.e2) + (other.e125 * this.e4), -(other.e321 * this.e5) - (other.e125 * this.e3)) - (this.group0.yzxy * float4(other.group1.zxy, other.e315)) - float4((float3(this.e5) * other.group0.xyz), other.e235 * this.e1), 
            /* e1234, 0, 0, 0 */
            float4((other.e423 * this.e1) + (other.e431 * this.e2) + (other.e412 * this.e3) + (other.e321 * this.e4), 0.0, 0.0, 0.0)
        );
        Dipole right_dual = Dipole.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, 0 */
            float4(other.group2.xyz, 0.0)
        );
        return RoundPoint.from_groups(
            /* e1, e2, e3, e4 */
            float4(-(right_dual.e41 * wedge.e3215) - (right_dual.e31 * wedge.e4125), -(right_dual.e42 * wedge.e3215) - (right_dual.e12 * wedge.e4235), -(right_dual.e43 * wedge.e3215) - (right_dual.e23 * wedge.e4315), (right_dual.e43 * wedge.e4125) + (right_dual.e45 * wedge.e1234)) + (wedge.group0.yzxy * float4(right_dual.group1.zxy, right_dual.e42)) + float4((float3(wedge.e1234) * right_dual.group2.xyz), right_dual.e41 * wedge.e4235), 
            /* e5, 0, 0, 0 */
            float4(-(right_dual.e45 * wedge.e3215) - (right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125), 0.0, 0.0, 0.0)
        );
    }
}
extension RoundPoint: AntiRejectViaHorizonFrom<CircleRotor> {
    associatedtype Output = RoundPoint;
    func anti_reject_via_horizon_from(other: CircleRotor) -> Output {
        Sphere wedge = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4((other.e425 * this.e3) + (other.e235 * this.e4), (other.e435 * this.e1) + (other.e315 * this.e4), (other.e415 * this.e2) + (other.e125 * this.e4), -(other.e315 * this.e2) - (other.e125 * this.e3)) - (float4(this.e5) * float4(other.group0.xyz, other.e321)) - (this.group0.yzxx * float4(other.group1.zxy, other.e235)), 
            /* e1234, 0, 0, 0 */
            float4((other.e423 * this.e1) + (other.e431 * this.e2) + (other.e412 * this.e3) + (other.e321 * this.e4), 0.0, 0.0, 0.0)
        );
        AntiCircleRotor right_dual = AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return RoundPoint.from_groups(
            /* e1, e2, e3, e4 */
            float4(-(right_dual.e41 * wedge.e3215) - (right_dual.e31 * wedge.e4125), -(right_dual.e42 * wedge.e3215) - (right_dual.e12 * wedge.e4235), -(right_dual.e43 * wedge.e3215) - (right_dual.e23 * wedge.e4315), (right_dual.e43 * wedge.e4125) + (right_dual.e45 * wedge.e1234)) + (wedge.group0.yzxx * float4(right_dual.group1.zxy, right_dual.e41)) + float4((float3(wedge.e1234) * right_dual.group2.xyz), right_dual.e42 * wedge.e4315), 
            /* e5, 0, 0, 0 */
            float4(-(right_dual.e45 * wedge.e3215) - (right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125), 0.0, 0.0, 0.0)
        );
    }
}
extension RoundPoint: AntiRejectViaHorizonFrom<Dipole> {
    associatedtype Output = RoundPoint;
    func anti_reject_via_horizon_from(other: Dipole) -> Output {
        Circle wedge = Circle.from_groups(
            /* e423, e431, e412, 0 */
            float4((float3(this.e4) * other.group1.xyz) + (other.group0.xyz.yzx * this.group0.zxy) - (other.group0.xyz.zxy * this.group0.yzx), 0.0), 
            /* e415, e425, e435, e321 */
            float4((other.e41 * this.e5) + (other.e15 * this.e4), (other.e42 * this.e5) + (other.e25 * this.e4), (other.e43 * this.e5) + (other.e35 * this.e4), -(other.e31 * this.e2) - (other.e12 * this.e3)) - (other.group1.wwwx * this.group0.xyzx), 
            /* e235, e315, e125, 0 */
            float4((float3(this.e5) * other.group1.xyz) + (other.group2.xyz.zxy * this.group0.yzx) - (other.group2.xyz.yzx * this.group0.zxy), 0.0)
        );
        Circle right_dual = Circle.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, 0 */
            float4(other.group2.xyz * float3(-1.0), 0.0)
        );
        return RoundPoint.from_groups(
            /* e1, e2, e3, e4 */
            float4((right_dual.e412 * wedge.e315) + (right_dual.e415 * wedge.e321) + (right_dual.e321 * wedge.e415) + (right_dual.e315 * wedge.e412), (right_dual.e423 * wedge.e125) + (right_dual.e425 * wedge.e321) + (right_dual.e321 * wedge.e425) + (right_dual.e125 * wedge.e423), (right_dual.e431 * wedge.e235) + (right_dual.e435 * wedge.e321) + (right_dual.e321 * wedge.e435) + (right_dual.e235 * wedge.e431), -(right_dual.e412 * wedge.e435) - (right_dual.e415 * wedge.e423) - (right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412)) - float4((right_dual.group0.xyz.yzx * wedge.group2.xyz.zxy), right_dual.e423 * wedge.e415) - float4((right_dual.group2.xyz.zxy * wedge.group0.xyz.yzx), right_dual.e431 * wedge.e425), 
            /* e5, 0, 0, 0 */
            float4(-(right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435), 0.0, 0.0, 0.0)
        );
    }
}
extension RoundPoint: AntiRejectViaHorizonFrom<DipoleInversion> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: DipoleInversion) -> Output {
        CircleRotor wedge = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4((float3(this.e4) * other.group1.xyz) + (other.group0.xyz.yzx * this.group0.zxy) - (other.group0.xyz.zxy * this.group0.yzx), 0.0), 
            /* e415, e425, e435, e321 */
            float4((other.e41 * this.e5) + (other.e15 * this.e4), (other.e42 * this.e5) + (other.e25 * this.e4), (other.e43 * this.e5) + (other.e35 * this.e4), -(other.e31 * this.e2) - (other.e12 * this.e3)) - (other.group1.wwwx * this.group0.xyzx), 
            /* e235, e315, e125, e12345 */
            float4(other.e25 * this.e3 * -1.0, other.e35 * this.e1 * -1.0, other.e15 * this.e2 * -1.0, (other.e4315 * this.e2) + (other.e4125 * this.e3) + (other.e3215 * this.e4)) + (float4(this.e5) * float4(other.group1.xyz, other.e1234)) + (this.group0.yzxx * float4(other.group2.zxy, other.e4235))
        );
        AntiDipoleInversion right_dual = AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(wedge.e12345) * right_dual.group1, 
            /* e235, e315, e125, e4 */
            float4((float3(wedge.e12345) * right_dual.group2.xyz), (right_dual.e4 * wedge.e12345) - (right_dual.e423 * wedge.e415) - (right_dual.e431 * wedge.e425) - (right_dual.e412 * wedge.e435) - (right_dual.e415 * wedge.e423) - (right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412)), 
            /* e1, e2, e3, e5 */
            float4((right_dual.e415 * wedge.e321) + (right_dual.e321 * wedge.e415) + (right_dual.e315 * wedge.e412) + (right_dual.e1 * wedge.e12345), (right_dual.e425 * wedge.e321) + (right_dual.e321 * wedge.e425) + (right_dual.e125 * wedge.e423) + (right_dual.e2 * wedge.e12345), (right_dual.e435 * wedge.e321) + (right_dual.e321 * wedge.e435) + (right_dual.e235 * wedge.e431) + (right_dual.e3 * wedge.e12345), -(right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435)) + (wedge.group2.yzxw * float4(right_dual.group0.xyz.zxy, right_dual.e5)) - (wedge.group2.zxyx * float4(right_dual.group0.xyz.yzx, right_dual.e415)) - float4((wedge.group0.xyz.yzx * right_dual.group2.zxy), right_dual.e425 * wedge.e315)
        );
    }
}
extension RoundPoint: AntiRejectViaHorizonFrom<DualNum> {
    associatedtype Output = DualNum;
    func anti_reject_via_horizon_from(other: DualNum) -> Output {
        return DualNum.from_groups(
            /* e5, e12345, 0, 0 */
            float4(float2(powi(other.e5, 2) * this.e4 * -1.0, 1.0) * float2(1.0, 0.0), 0.0, 0.0)
        );
    }
}
extension RoundPoint: AntiRejectViaHorizonFrom<FlatPoint> {
    associatedtype Output = AntiPlane;
    func anti_reject_via_horizon_from(other: FlatPoint) -> Output {
        Line wedge = Line.from_groups(
            /* e415, e425, e435, 0 */
            float4((float3(this.e4) * other.group0.xyz) - (float3(other.e45) * this.group0.xyz), 0.0), 
            /* e235, e315, e125, 0 */
            float4((other.group0.zxy * this.group0.yzx) - (other.group0.yzx * this.group0.zxy), 0.0)
        );
        AntiFlatPoint right_dual = AntiFlatPoint.from_groups(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiPlane.from_groups(
            /* e1, e2, e3, e5 */
            float4((float3(right_dual.e321) * wedge.group0.xyz), -(right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435))
        );
    }
}
extension RoundPoint: AntiRejectViaHorizonFrom<Flector> {
    associatedtype Output = AntiFlector;
    func anti_reject_via_horizon_from(other: Flector) -> Output {
        Motor wedge = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4(other.e45 * this.e1 * -1.0, other.e45 * this.e2 * -1.0, other.e45 * this.e3 * -1.0, (other.e4315 * this.e2) + (other.e4125 * this.e3) + (other.e3215 * this.e4)) + (this.group0.wwwx * float4(other.group0.xyz, other.e4235)), 
            /* e235, e315, e125, e5 */
            float4(((other.group0.zxy * this.group0.yzx) - (other.group0.yzx * this.group0.zxy)), 0.0)
        );
        AntiFlector right_dual = AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            float4(wedge.e12345) * right_dual.group0, 
            /* e1, e2, e3, e5 */
            float4(right_dual.e1 * wedge.e12345, right_dual.e2 * wedge.e12345, right_dual.e3 * wedge.e12345, -(right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435)) + (wedge.group0 * float4(right_dual.group0.www, right_dual.e5))
        );
    }
}
extension RoundPoint: AntiRejectViaHorizonFrom<Line> {
    associatedtype Output = AntiPlane;
    func anti_reject_via_horizon_from(other: Line) -> Output {
        Plane wedge = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4((other.e425 * this.e3) + (other.e235 * this.e4), (other.e435 * this.e1) + (other.e315 * this.e4), (other.e415 * this.e2) + (other.e125 * this.e4), -(other.e315 * this.e2) - (other.e125 * this.e3)) - (this.group0.yzxx * float4(other.group0.xyz.zxy, other.e235))
        );
        AntiLine right_dual = AntiLine.from_groups(
            /* e23, e31, e12, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e15, e25, e35, 0 */
            float4(other.group1.xyz, 0.0)
        );
        return AntiPlane.from_groups(
            /* e1, e2, e3, e5 */
            float4(right_dual.e12 * wedge.e4315, right_dual.e23 * wedge.e4125, right_dual.e31 * wedge.e4235, -(right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125)) - (wedge.group0.zxyx * float4(right_dual.group0.xyz.yzx, right_dual.e15))
        );
    }
}
extension RoundPoint: AntiRejectViaHorizonFrom<Motor> {
    associatedtype Output = AntiFlector;
    func anti_reject_via_horizon_from(other: Motor) -> Output {
        Flector wedge = Flector.from_groups(
            /* e15, e25, e35, e45 */
            float4(other.e5) * this.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e425 * this.e3) + (other.e235 * this.e4), (other.e435 * this.e1) + (other.e315 * this.e4), (other.e415 * this.e2) + (other.e125 * this.e4), -(other.e315 * this.e2) - (other.e125 * this.e3)) - (this.group0.yzxx * float4(other.group0.zxy, other.e235))
        );
        AntiMotor right_dual = AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            float4(float3(1.0), 0.0) * float4(right_dual.group1.www, 0.0) * float4(wedge.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e1, e2, e3, e5 */
            float4(float3(0.0), -(right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125)) + float4((right_dual.group0.zxy * wedge.group1.yzx), right_dual.e3215 * wedge.e45) - (wedge.group1.zxyx * float4(right_dual.group0.yzx, right_dual.e15))
        );
    }
}
extension RoundPoint: AntiRejectViaHorizonFrom<MultiVector> {
    associatedtype Output = MultiVector;
    func anti_reject_via_horizon_from(other: MultiVector) -> Output {
        MultiVector wedge = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(0.0, (other.e4235 * this.e1) + (other.e4315 * this.e2) + (other.e4125 * this.e3) + (other.e3215 * this.e4) + (other.e1234 * this.e5)), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * this.group0, 
            /* e5, 0, 0, 0 */
            float4(other.scalar * this.e5, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            (float4(other.e5) * this.group0) - (float4(this.e5) * other.group1), 
            /* e41, e42, e43, 0 */
            float4((float3(this.e4) * other.group1.xyz) - (float3(other.e4) * this.group0.xyz), 0.0), 
            /* e23, e31, e12, 0 */
            float4((other.group1.zxy * this.group0.yzx) - (other.group1.yzx * this.group0.zxy), 0.0), 
            /* e415, e425, e435, e321 */
            float4((other.e15 * this.e4) + (other.e41 * this.e5), (other.e25 * this.e4) + (other.e42 * this.e5), (other.e35 * this.e4) + (other.e43 * this.e5), -(other.e31 * this.e2) - (other.e12 * this.e3)) - (this.group0.xyzx * float4(other.group3.www, other.e23)), 
            /* e423, e431, e412, 0 */
            float4((float3(this.e4) * other.group5.xyz) + (other.group4.xyz.yzx * this.group0.zxy) - (other.group4.xyz.zxy * this.group0.yzx), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(this.e5) * other.group5.xyz) + (other.group3.zxy * this.group0.yzx) - (other.group3.yzx * this.group0.zxy), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e425 * this.e3) + (other.e235 * this.e4), (other.e435 * this.e1) + (other.e315 * this.e4), (other.e415 * this.e2) + (other.e125 * this.e4), -(other.e321 * this.e5) - (other.e125 * this.e3)) - (this.group0.yzxy * float4(other.group6.zxy, other.e315)) - float4((float3(this.e5) * other.group7.xyz), other.e235 * this.e1), 
            /* e1234, 0, 0, 0 */
            float4((other.e321 * this.e4) + (other.e423 * this.e1) + (other.e431 * this.e2) + (other.e412 * this.e3), 0.0, 0.0, 0.0)
        );
        MultiVector right_dual = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(other.group0.xy.yx * float2(-1.0, 1.0), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5, 0, 0, 0 */
            float4(other.e3215, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43, 0 */
            float4(other.group7.xyz, 0.0), 
            /* e23, e31, e12, 0 */
            float4(other.group6.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412, 0 */
            float4(other.group4.xyz * float3(-1.0), 0.0), 
            /* e235, e315, e125, 0 */
            float4(other.group3.xyz * float3(-1.0), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        return MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2((right_dual.scalar * wedge.e12345) + (right_dual.e12345 * wedge.scalar) + (right_dual.e1 * wedge.e4235) + (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) + (right_dual.e4 * wedge.e3215) + (right_dual.e5 * wedge.e1234) + (right_dual.e4235 * wedge.e1) + (right_dual.e4315 * wedge.e2) + (right_dual.e4125 * wedge.e3) + (right_dual.e3215 * wedge.e4) + (right_dual.e1234 * wedge.e5) - (right_dual.e15 * wedge.e423) - (right_dual.e25 * wedge.e431) - (right_dual.e35 * wedge.e412) - (right_dual.e45 * wedge.e321) - (right_dual.e41 * wedge.e235) - (right_dual.e42 * wedge.e315) - (right_dual.e43 * wedge.e125) - (right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e321 * wedge.e45) - (right_dual.e423 * wedge.e15) - (right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43), right_dual.e12345 * wedge.e12345), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e15 * wedge.e1234) + (right_dual.e415 * wedge.e321) + (right_dual.e321 * wedge.e415) + (right_dual.e4125 * wedge.e31), (right_dual.e25 * wedge.e1234) + (right_dual.e425 * wedge.e321) + (right_dual.e321 * wedge.e425) + (right_dual.e4235 * wedge.e12), (right_dual.e35 * wedge.e1234) + (right_dual.e435 * wedge.e321) + (right_dual.e321 * wedge.e435) + (right_dual.e4315 * wedge.e23), -(right_dual.e415 * wedge.e423) - (right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412) - (right_dual.e1234 * wedge.e45)) + (float4(right_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_dual.group1) + (wedge.group9.yzxx * float4(right_dual.group5.xyz.zxy, right_dual.e41)) + float4((wedge.group4.xyz * right_dual.group9.www), right_dual.e45 * wedge.e1234) + float4((right_dual.group7.xyz.zxy * wedge.group8.xyz.yzx), right_dual.e42 * wedge.e4315) + float4((right_dual.group8.xyz.yzx * wedge.group7.xyz.zxy), right_dual.e43 * wedge.e4125) - (right_dual.group9.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((float3(right_dual.e1234) * wedge.group3.xyz), right_dual.e4125 * wedge.e43) - float4((right_dual.group4.xyz * wedge.group9.www), right_dual.e423 * wedge.e415) - float4((right_dual.group5.xyz.yzx * wedge.group9.zxy), right_dual.e431 * wedge.e425) - float4((right_dual.group7.xyz.yzx * wedge.group8.xyz.zxy), right_dual.e412 * wedge.e435) - float4((right_dual.group8.xyz.zxy * wedge.group7.xyz.yzx), right_dual.e4235 * wedge.e41), 
            /* e5, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e5) + (right_dual.e5 * wedge.e12345) + (right_dual.e4235 * wedge.e15) + (right_dual.e4315 * wedge.e25) + (right_dual.e4125 * wedge.e35) + (right_dual.e3215 * wedge.e45) - (right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125) - (right_dual.e45 * wedge.e3215) - (right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435), 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4((right_dual.e415 * wedge.e3215) + (right_dual.e315 * wedge.e4125) + (right_dual.e4125 * wedge.e315) + (right_dual.e3215 * wedge.e415), (right_dual.e425 * wedge.e3215) + (right_dual.e125 * wedge.e4235) + (right_dual.e4235 * wedge.e125) + (right_dual.e3215 * wedge.e425), (right_dual.e435 * wedge.e3215) + (right_dual.e235 * wedge.e4315) + (right_dual.e4315 * wedge.e235) + (right_dual.e3215 * wedge.e435), -(right_dual.e435 * wedge.e4125) - (right_dual.e4235 * wedge.e415) - (right_dual.e4315 * wedge.e425) - (right_dual.e4125 * wedge.e435)) + (float4(right_dual.e12345) * wedge.group3) + (float4(wedge.e12345) * right_dual.group3) - (wedge.group9.yzxx * float4(right_dual.group8.xyz.zxy, right_dual.e415)) - float4((wedge.group8.xyz.zxy * right_dual.group9.yzx), right_dual.e425 * wedge.e4315), 
            /* e41, e42, e43, 0 */
            float4((float3(right_dual.e12345) * wedge.group4.xyz) + (float3(right_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_dual.group4.xyz) + (float3(wedge.e1234) * right_dual.group6.xyz) + (right_dual.group7.xyz.zxy * wedge.group9.yzx) + (wedge.group7.xyz.zxy * right_dual.group9.yzx) - (right_dual.group7.xyz.yzx * wedge.group9.zxy) - (wedge.group7.xyz.yzx * right_dual.group9.zxy), 0.0), 
            /* e23, e31, e12, 0 */
            float4((float3(right_dual.e12345) * wedge.group5.xyz) + (float3(right_dual.e3215) * wedge.group7.xyz) + (float3(right_dual.e1234) * wedge.group8.xyz) + (float3(wedge.e12345) * right_dual.group5.xyz) + (float3(wedge.e3215) * right_dual.group7.xyz) + (float3(wedge.e1234) * right_dual.group8.xyz) - (float3(right_dual.e321) * wedge.group9.xyz) - (float3(wedge.e321) * right_dual.group9.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            (float4(right_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_dual.group6) + (right_dual.group9.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - float4((right_dual.group9.zxy * wedge.group9.yzx), right_dual.e1234 * wedge.e3215), 
            /* e423, e431, e412, 0 */
            float4((float3(right_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_dual.group7.xyz) + (float3(wedge.e1234) * right_dual.group9.xyz) - (float3(right_dual.e1234) * wedge.group9.xyz), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(right_dual.e12345) * wedge.group8.xyz) + (float3(right_dual.e3215) * wedge.group9.xyz) + (float3(wedge.e12345) * right_dual.group8.xyz) - (float3(wedge.e3215) * right_dual.group9.xyz), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            (float4(right_dual.e12345) * wedge.group9) + (float4(wedge.e12345) * right_dual.group9), 
            /* e1234, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e1234) + (right_dual.e1234 * wedge.e12345), 0.0, 0.0, 0.0)
        );
    }
}
extension RoundPoint: AntiRejectViaHorizonFrom<Plane> {
    associatedtype Output = AntiPlane;
    func anti_reject_via_horizon_from(other: Plane) -> Output {
        return AntiPlane.from_groups(
            /* e1, e2, e3, e5 */
            float4((other.e4235 * this.e1) + (other.e4315 * this.e2) + (other.e4125 * this.e3) + (other.e3215 * this.e4)) * float4(other.e4235 * -1.0, other.e4315 * -1.0, other.e4125 * -1.0, other.e3215)
        );
    }
}
extension RoundPoint: AntiRejectViaHorizonFrom<RoundPoint> {
    associatedtype Output = RoundPoint;
    func anti_reject_via_horizon_from(other: RoundPoint) -> Output {
        Dipole wedge = Dipole.from_groups(
            /* e41, e42, e43, 0 */
            float4((float3(this.e4) * other.group0.xyz) - (float3(other.e4) * this.group0.xyz), 0.0), 
            /* e23, e31, e12, e45 */
            float4((other.group0.zxy * this.group0.yzx), other.e5 * this.e4) - (other.group0.yzxw * float4(this.group0.zxy, this.e5)), 
            /* e15, e25, e35, 0 */
            float4((float3(other.e5) * this.group0.xyz) - (float3(this.e5) * other.group0.xyz), 0.0)
        );
        Sphere right_dual = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        return RoundPoint.from_groups(
            /* e1, e2, e3, e4 */
            float4((wedge.e41 * right_dual.e3215) + (wedge.e31 * right_dual.e4125), (wedge.e42 * right_dual.e3215) + (wedge.e12 * right_dual.e4235), (wedge.e43 * right_dual.e3215) + (wedge.e23 * right_dual.e4315), -(wedge.e43 * right_dual.e4125) - (wedge.e45 * right_dual.e1234)) - (right_dual.group0.yzxy * float4(wedge.group1.zxy, wedge.e42)) - float4((float3(right_dual.e1234) * wedge.group2.xyz), wedge.e41 * right_dual.e4235), 
            /* e5, 0, 0, 0 */
            float4((wedge.e45 * right_dual.e3215) + (wedge.e15 * right_dual.e4235) + (wedge.e25 * right_dual.e4315) + (wedge.e35 * right_dual.e4125), 0.0, 0.0, 0.0)
        );
    }
}
extension RoundPoint: AntiRejectViaHorizonFrom<Scalar> {
    associatedtype Output = RoundPoint;
    func anti_reject_via_horizon_from(other: Scalar) -> Output {
        RoundPoint wedge = RoundPoint.from_groups(
            /* e1, e2, e3, e4 */
            float4(other.scalar) * this.group0, 
            /* e5, 0, 0, 0 */
            float4(this.e5 * other.scalar, 0.0, 0.0, 0.0)
        );
        AntiScalar right_dual = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(other.scalar, 0.0, 0.0, 0.0)
        );
        return RoundPoint.from_groups(
            /* e1, e2, e3, e4 */
            float4(right_dual.e12345) * wedge.group0, 
            /* e5, 0, 0, 0 */
            float4(right_dual.e12345 * wedge.e5, 0.0, 0.0, 0.0)
        );
    }
}
extension RoundPoint: AntiRejectViaHorizonFrom<Sphere> {
    associatedtype Output = RoundPoint;
    func anti_reject_via_horizon_from(other: Sphere) -> Output {
        AntiScalar wedge = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4((this.e1 * other.e4235) + (this.e2 * other.e4315) + (this.e3 * other.e4125) + (this.e4 * other.e3215) + (this.e5 * other.e1234), 0.0, 0.0, 0.0)
        );
        RoundPoint right_dual = RoundPoint.from_groups(
            /* e1, e2, e3, e4 */
            float4(other.group0.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5, 0, 0, 0 */
            float4(other.e3215, 0.0, 0.0, 0.0)
        );
        return RoundPoint.from_groups(
            /* e1, e2, e3, e4 */
            float4(wedge.e12345) * right_dual.group0, 
            /* e5, 0, 0, 0 */
            float4(wedge.e12345 * right_dual.e5, 0.0, 0.0, 0.0)
        );
    }
}
extension RoundPoint: AntiRejectViaHorizonFrom<VersorEven> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: VersorEven) -> Output {
        DipoleInversion wedge = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4((float3(this.e4) * other.group3.xyz) - (float3(other.e4) * this.group0.xyz), 0.0), 
            /* e23, e31, e12, e45 */
            (this.group0.yzxw * float4(other.group3.zxy, other.e5)) - float4((this.group0.zxy * other.group3.yzx), this.e5 * other.e4), 
            /* e15, e25, e35, e1234 */
            float4(this.e5 * other.e1 * -1.0, this.e5 * other.e2 * -1.0, this.e5 * other.e3 * -1.0, (this.e2 * other.e431) + (this.e3 * other.e412) + (this.e4 * other.e321)) + (this.group0.xyzx * float4(other.group2.www, other.e423)), 
            /* e4235, e4315, e4125, e3215 */
            float4((this.e3 * other.e425) + (this.e4 * other.e235), (this.e1 * other.e435) + (this.e4 * other.e315), (this.e2 * other.e415) + (this.e4 * other.e125), -(this.e3 * other.e125) - (this.e5 * other.e321)) - (this.group0.yzxx * float4(other.group1.zxy, other.e235)) - float4((float3(this.e5) * other.group0.xyz), this.e2 * other.e315)
        );
        VersorOdd right_dual = VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4((float3(wedge.e1234) * right_dual.group3.xyz) - (float3(right_dual.e1234) * wedge.group3.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            (right_dual.group3.yzxw * float4(wedge.group3.zxy, wedge.e1234)) - (wedge.group3.yzxw * float4(right_dual.group3.zxy, right_dual.e1234)), 
            /* e235, e315, e125, e4 */
            float4(float3(0.0), (wedge.e4235 * right_dual.e41) + (wedge.e4315 * right_dual.e42) + (wedge.e4125 * right_dual.e43) - (wedge.e42 * right_dual.e4315) - (wedge.e43 * right_dual.e4125) - (wedge.e45 * right_dual.e1234)) + float4((right_dual.group3.www * wedge.group3.xyz), wedge.e1234 * right_dual.e45) - (right_dual.group3.xyzx * float4(wedge.group3.www, wedge.e41)), 
            /* e1, e2, e3, e5 */
            (float4(right_dual.e3215) * float4(wedge.group0.xyz, wedge.e45)) + (wedge.group2.wwwy * float4(right_dual.group2.xyz, right_dual.e4315)) + (right_dual.group3.zxyx * float4(wedge.group1.yzx, wedge.e15)) + float4((wedge.group3.yzx * right_dual.group1.zxy), wedge.e35 * right_dual.e4125) - (float4(wedge.e3215) * float4(right_dual.group0.xyz, right_dual.e45)) - (wedge.group3.zxyz * float4(right_dual.group1.yzx, right_dual.e35)) - (right_dual.group2.wwwy * float4(wedge.group2.xyz, wedge.e4315)) - float4((wedge.group1.zxy * right_dual.group3.yzx), wedge.e4235 * right_dual.e15)
        );
    }
}
extension RoundPoint: AntiRejectViaHorizonFrom<VersorOdd> {
    associatedtype Output = VersorEven;
    func anti_reject_via_horizon_from(other: VersorOdd) -> Output {
        VersorEven wedge = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4(this.e2 * other.e43 * -1.0, this.e3 * other.e41 * -1.0, this.e1 * other.e42 * -1.0, (this.e3 * other.e4125) + (this.e4 * other.e3215) + (this.e5 * other.e1234)) + (this.group0.zxyx * float4(other.group0.yzx, other.e4235)) + (this.group0.wwwy * float4(other.group1.xyz, other.e4315)), 
            /* e415, e425, e435, e321 */
            float4((this.e4 * other.e15) + (this.e5 * other.e41), (this.e4 * other.e25) + (this.e5 * other.e42), (this.e4 * other.e35) + (this.e5 * other.e43), -(this.e2 * other.e31) - (this.e3 * other.e12)) - (this.group0.xyzx * other.group1.wwwx), 
            /* e235, e315, e125, e5 */
            float4(((float3(this.e5) * other.group1.xyz) + (this.group0.yzx * other.group2.zxy) - (this.group0.zxy * other.group2.yzx)), this.e5 * other.scalar), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * this.group0
        );
        VersorEven right_dual = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4(((float3(right_dual.e12345) * wedge.group0.xyz) + (float3(wedge.e12345) * right_dual.group0.xyz)), right_dual.e12345 * wedge.e12345), 
            /* e415, e425, e435, e321 */
            (float4(right_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_dual.group1), 
            /* e235, e315, e125, e5 */
            (float4(right_dual.e12345) * wedge.group2) + (float4(wedge.e12345) * right_dual.group2) + float4(float3(0.0), -(right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435)), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e415 * wedge.e321) + (right_dual.e321 * wedge.e415) + (right_dual.e315 * wedge.e412) + (right_dual.e1 * wedge.e12345), (right_dual.e425 * wedge.e321) + (right_dual.e321 * wedge.e425) + (right_dual.e125 * wedge.e423) + (right_dual.e2 * wedge.e12345), (right_dual.e435 * wedge.e321) + (right_dual.e321 * wedge.e435) + (right_dual.e235 * wedge.e431) + (right_dual.e3 * wedge.e12345), -(right_dual.e412 * wedge.e435) - (right_dual.e415 * wedge.e423) - (right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412)) + (right_dual.group0.zxyw * float4(wedge.group2.yzx, wedge.e4)) + float4((right_dual.group0.www * wedge.group3.xyz), right_dual.e4 * wedge.e12345) - (right_dual.group0.yzxx * float4(wedge.group2.zxy, wedge.e415)) - float4((right_dual.group2.zxy * wedge.group0.yzx), right_dual.e431 * wedge.e425)
        );
    }
}
extension Scalar {
    // Fancy infix trick
    func operator/(_rhs: AntiRejectViaHorizonFromInfix) -> AntiRejectViaHorizonFromInfixPartial<Scalar> {
        return AntiRejectViaHorizonFromInfixPartial { a: this };
    }
}
extension Scalar: AntiRejectViaHorizonFrom<AntiCircleRotor> {
    associatedtype Output = AntiCircleRotor;
    func anti_reject_via_horizon_from(other: AntiCircleRotor) -> Output {
        AntiCircleRotor wedge = AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(this.scalar) * other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(this.scalar) * other.group1, 
            /* e15, e25, e35, scalar */
            float4(this.scalar) * other.group2
        );
        CircleRotor right_dual = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(right_dual.e12345) * wedge.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(right_dual.e12345) * wedge.group1, 
            /* e15, e25, e35, scalar */
            float4((float3(right_dual.e12345) * wedge.group2.xyz), (wedge.scalar * right_dual.e12345) - (wedge.e41 * right_dual.e235) - (wedge.e42 * right_dual.e315) - (wedge.e43 * right_dual.e125) - (wedge.e23 * right_dual.e415) - (wedge.e31 * right_dual.e425) - (wedge.e12 * right_dual.e435) - (wedge.e45 * right_dual.e321) - (wedge.e15 * right_dual.e423) - (wedge.e25 * right_dual.e431) - (wedge.e35 * right_dual.e412))
        );
    }
}
extension Scalar: AntiRejectViaHorizonFrom<AntiDipoleInversion> {
    associatedtype Output = AntiCircleRotor;
    func anti_reject_via_horizon_from(other: AntiDipoleInversion) -> Output {
        AntiDipoleInversion wedge = AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(this.scalar) * other.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(this.scalar) * other.group1, 
            /* e235, e315, e125, e4 */
            float4(this.scalar) * other.group2, 
            /* e1, e2, e3, e5 */
            float4(this.scalar) * other.group3
        );
        DipoleInversion right_dual = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4((float3(right_dual.e1234) * wedge.group1.xyz) + (wedge.group0.xyz.zxy * right_dual.group3.yzx) - (wedge.group0.xyz.yzx * right_dual.group3.zxy), 0.0), 
            /* e23, e31, e12, e45 */
            float4((wedge.e423 * right_dual.e3215) + (wedge.e235 * right_dual.e1234), (wedge.e431 * right_dual.e3215) + (wedge.e315 * right_dual.e1234), (wedge.e412 * right_dual.e3215) + (wedge.e125 * right_dual.e1234), -(wedge.e425 * right_dual.e4315) - (wedge.e435 * right_dual.e4125)) - (wedge.group1.wwwx * right_dual.group3.xyzx), 
            /* e15, e25, e35, scalar */
            (float4(right_dual.e3215) * float4(wedge.group1.xyz, wedge.e4)) + (right_dual.group3.zxyx * float4(wedge.group2.yzx, wedge.e1)) + float4(float3(0.0), (wedge.e2 * right_dual.e4315) + (wedge.e3 * right_dual.e4125) + (wedge.e5 * right_dual.e1234) - (wedge.e431 * right_dual.e25) - (wedge.e412 * right_dual.e35) - (wedge.e415 * right_dual.e23) - (wedge.e425 * right_dual.e31) - (wedge.e435 * right_dual.e12) - (wedge.e321 * right_dual.e45) - (wedge.e235 * right_dual.e41) - (wedge.e315 * right_dual.e42) - (wedge.e125 * right_dual.e43)) - float4((wedge.group2.zxy * right_dual.group3.yzx), wedge.e423 * right_dual.e15)
        );
    }
}
extension Scalar: AntiRejectViaHorizonFrom<AntiDualNum> {
    associatedtype Output = AntiDualNum;
    func anti_reject_via_horizon_from(other: AntiDualNum) -> Output {
        return AntiDualNum.from_groups(
            /* e3215, scalar, 0, 0 */
            float4(float2(other.scalar) * float2(other.e3215 * this.scalar, other.scalar * this.scalar), 0.0, 0.0)
        );
    }
}
extension Scalar: AntiRejectViaHorizonFrom<AntiFlatPoint> {
    associatedtype Output = Scalar;
    func anti_reject_via_horizon_from(other: AntiFlatPoint) -> Output {
        return Scalar.from_groups(
            /* scalar, 0, 0, 0 */
            float4(float4(other.group0.xyz, other.e321 * -1.0)[3] * other.e321 * this.scalar * -1.0, 0.0, 0.0, 0.0)
        );
    }
}
extension Scalar: AntiRejectViaHorizonFrom<AntiFlector> {
    associatedtype Output = AntiMotor;
    func anti_reject_via_horizon_from(other: AntiFlector) -> Output {
        AntiFlector wedge = AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            float4(this.scalar) * other.group0, 
            /* e1, e2, e3, e5 */
            float4(this.scalar) * other.group1
        );
        Flector right_dual = Flector.from_groups(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            float4((wedge.group0.www * right_dual.group1.xyz * float3(-1.0)), (wedge.e1 * right_dual.e4235) + (wedge.e2 * right_dual.e4315) + (wedge.e3 * right_dual.e4125) - (wedge.e321 * right_dual.e45)), 
            /* e15, e25, e35, e3215 */
            float4(((wedge.group0.yzx * right_dual.group1.zxy) - (wedge.group0.zxy * right_dual.group1.yzx)), 0.0)
        );
    }
}
extension Scalar: AntiRejectViaHorizonFrom<AntiLine> {
    associatedtype Output = Scalar;
    func anti_reject_via_horizon_from(other: AntiLine) -> Output {
        AntiLine wedge = AntiLine.from_groups(
            /* e23, e31, e12, 0 */
            float4(float3(this.scalar) * other.group0.xyz, 0.0), 
            /* e15, e25, e35, 0 */
            float4(float3(this.scalar) * other.group1.xyz, 0.0)
        );
        Line right_dual = Line.from_groups(
            /* e415, e425, e435, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e235, e315, e125, 0 */
            float4(other.group1.xyz * float3(-1.0), 0.0)
        );
        return Scalar.from_groups(
            /* scalar, 0, 0, 0 */
            float4(-(wedge.e23 * right_dual.e415) - (wedge.e31 * right_dual.e425) - (wedge.e12 * right_dual.e435), 0.0, 0.0, 0.0)
        );
    }
}
extension Scalar: AntiRejectViaHorizonFrom<AntiMotor> {
    associatedtype Output = AntiMotor;
    func anti_reject_via_horizon_from(other: AntiMotor) -> Output {
        AntiMotor wedge = AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            float4(this.scalar) * other.group0, 
            /* e15, e25, e35, e3215 */
            float4(this.scalar) * other.group1
        );
        Motor right_dual = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            float4((float3(right_dual.e12345) * wedge.group0.xyz), (wedge.scalar * right_dual.e12345) - (wedge.e23 * right_dual.e415) - (wedge.e31 * right_dual.e425) - (wedge.e12 * right_dual.e435)), 
            /* e15, e25, e35, e3215 */
            float4(((float3(wedge.e3215) * right_dual.group0.xyz) + (float3(right_dual.e12345) * wedge.group1.xyz)), wedge.e3215 * right_dual.e12345)
        );
    }
}
extension Scalar: AntiRejectViaHorizonFrom<AntiPlane> {
    associatedtype Output = Scalar;
    func anti_reject_via_horizon_from(other: AntiPlane) -> Output {
        AntiPlane wedge = AntiPlane.from_groups(
            /* e1, e2, e3, e5 */
            float4(this.scalar) * other.group0
        );
        Plane right_dual = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return Scalar.from_groups(
            /* scalar, 0, 0, 0 */
            float4((wedge.e1 * right_dual.e4235) + (wedge.e2 * right_dual.e4315) + (wedge.e3 * right_dual.e4125), 0.0, 0.0, 0.0)
        );
    }
}
extension Scalar: AntiRejectViaHorizonFrom<AntiScalar> {
    associatedtype Output = Scalar;
    func anti_reject_via_horizon_from(other: AntiScalar) -> Output {
        return Scalar.from_groups(
            /* scalar, 0, 0, 0 */
            float4(powi(other.e12345, 2) * this.scalar * -1.0, 0.0, 0.0, 0.0)
        );
    }
}
extension Scalar: AntiRejectViaHorizonFrom<Circle> {
    associatedtype Output = Scalar;
    func anti_reject_via_horizon_from(other: Circle) -> Output {
        Circle wedge = Circle.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(this.scalar) * other.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(this.scalar) * other.group1, 
            /* e235, e315, e125, 0 */
            float4(float3(this.scalar) * other.group2.xyz, 0.0)
        );
        Dipole right_dual = Dipole.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, 0 */
            float4(other.group2.xyz, 0.0)
        );
        return Scalar.from_groups(
            /* scalar, 0, 0, 0 */
            float4(-(wedge.e423 * right_dual.e15) - (wedge.e431 * right_dual.e25) - (wedge.e412 * right_dual.e35) - (wedge.e415 * right_dual.e23) - (wedge.e425 * right_dual.e31) - (wedge.e435 * right_dual.e12) - (wedge.e321 * right_dual.e45) - (wedge.e235 * right_dual.e41) - (wedge.e315 * right_dual.e42) - (wedge.e125 * right_dual.e43), 0.0, 0.0, 0.0)
        );
    }
}
extension Scalar: AntiRejectViaHorizonFrom<CircleRotor> {
    associatedtype Output = AntiCircleRotor;
    func anti_reject_via_horizon_from(other: CircleRotor) -> Output {
        CircleRotor wedge = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(this.scalar) * other.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(this.scalar) * other.group1, 
            /* e235, e315, e125, e12345 */
            float4(this.scalar) * other.group2
        );
        AntiCircleRotor right_dual = AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(wedge.e12345) * right_dual.group1, 
            /* e15, e25, e35, scalar */
            float4((float3(wedge.e12345) * right_dual.group2.xyz), (right_dual.scalar * wedge.e12345) - (right_dual.e41 * wedge.e235) - (right_dual.e42 * wedge.e315) - (right_dual.e43 * wedge.e125) - (right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435) - (right_dual.e45 * wedge.e321) - (right_dual.e15 * wedge.e423) - (right_dual.e25 * wedge.e431) - (right_dual.e35 * wedge.e412))
        );
    }
}
extension Scalar: AntiRejectViaHorizonFrom<Dipole> {
    associatedtype Output = Scalar;
    func anti_reject_via_horizon_from(other: Dipole) -> Output {
        Dipole wedge = Dipole.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(this.scalar) * other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(this.scalar) * other.group1, 
            /* e15, e25, e35, 0 */
            float4(float3(this.scalar) * other.group2.xyz, 0.0)
        );
        Circle right_dual = Circle.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, 0 */
            float4(other.group2.xyz * float3(-1.0), 0.0)
        );
        return Scalar.from_groups(
            /* scalar, 0, 0, 0 */
            float4(-(right_dual.e423 * wedge.e15) - (right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e321 * wedge.e45) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43), 0.0, 0.0, 0.0)
        );
    }
}
extension Scalar: AntiRejectViaHorizonFrom<DipoleInversion> {
    associatedtype Output = AntiCircleRotor;
    func anti_reject_via_horizon_from(other: DipoleInversion) -> Output {
        DipoleInversion wedge = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(this.scalar) * other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(this.scalar) * other.group1, 
            /* e15, e25, e35, e1234 */
            float4(this.scalar) * other.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(this.scalar) * other.group3
        );
        AntiDipoleInversion right_dual = AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4((float3(wedge.e1234) * right_dual.group1.xyz) + (right_dual.group0.xyz.zxy * wedge.group3.yzx) - (right_dual.group0.xyz.yzx * wedge.group3.zxy), 0.0), 
            /* e23, e31, e12, e45 */
            float4((right_dual.e423 * wedge.e3215) + (right_dual.e235 * wedge.e1234), (right_dual.e431 * wedge.e3215) + (right_dual.e315 * wedge.e1234), (right_dual.e412 * wedge.e3215) + (right_dual.e125 * wedge.e1234), -(right_dual.e425 * wedge.e4315) - (right_dual.e435 * wedge.e4125)) - (right_dual.group1.wwwx * wedge.group3.xyzx), 
            /* e15, e25, e35, scalar */
            (float4(wedge.e3215) * float4(right_dual.group1.xyz, right_dual.e4)) + (wedge.group3.zxyx * float4(right_dual.group2.yzx, right_dual.e1)) + float4(float3(0.0), (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) + (right_dual.e5 * wedge.e1234) - (right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e321 * wedge.e45) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43)) - float4((right_dual.group2.zxy * wedge.group3.yzx), right_dual.e423 * wedge.e15)
        );
    }
}
extension Scalar: AntiRejectViaHorizonFrom<DualNum> {
    associatedtype Output = AntiDualNum;
    func anti_reject_via_horizon_from(other: DualNum) -> Output {
        return AntiDualNum.from_groups(
            /* e3215, scalar, 0, 0 */
            float4(float2(other.e12345 * this.scalar) * float2(other.e5 * -1.0, other.e12345 * -1.0), 0.0, 0.0)
        );
    }
}
extension Scalar: AntiRejectViaHorizonFrom<FlatPoint> {
    associatedtype Output = Scalar;
    func anti_reject_via_horizon_from(other: FlatPoint) -> Output {
        return Scalar.from_groups(
            /* scalar, 0, 0, 0 */
            float4(powi(other.e45, 2) * this.scalar * -1.0, 0.0, 0.0, 0.0)
        );
    }
}
extension Scalar: AntiRejectViaHorizonFrom<Flector> {
    associatedtype Output = AntiMotor;
    func anti_reject_via_horizon_from(other: Flector) -> Output {
        Flector wedge = Flector.from_groups(
            /* e15, e25, e35, e45 */
            float4(this.scalar) * other.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4(this.scalar) * other.group1
        );
        AntiFlector right_dual = AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            float4((right_dual.group0.www * wedge.group1.xyz * float3(-1.0)), (right_dual.e1 * wedge.e4235) + (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) - (right_dual.e321 * wedge.e45)), 
            /* e15, e25, e35, e3215 */
            float4(((right_dual.group0.yzx * wedge.group1.zxy) - (right_dual.group0.zxy * wedge.group1.yzx)), 0.0)
        );
    }
}
extension Scalar: AntiRejectViaHorizonFrom<Line> {
    associatedtype Output = Scalar;
    func anti_reject_via_horizon_from(other: Line) -> Output {
        Line wedge = Line.from_groups(
            /* e415, e425, e435, 0 */
            float4(float3(this.scalar) * other.group0.xyz, 0.0), 
            /* e235, e315, e125, 0 */
            float4(float3(this.scalar) * other.group1.xyz, 0.0)
        );
        AntiLine right_dual = AntiLine.from_groups(
            /* e23, e31, e12, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e15, e25, e35, 0 */
            float4(other.group1.xyz, 0.0)
        );
        return Scalar.from_groups(
            /* scalar, 0, 0, 0 */
            float4(-(right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435), 0.0, 0.0, 0.0)
        );
    }
}
extension Scalar: AntiRejectViaHorizonFrom<Motor> {
    associatedtype Output = AntiMotor;
    func anti_reject_via_horizon_from(other: Motor) -> Output {
        Motor wedge = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4(this.scalar) * other.group0, 
            /* e235, e315, e125, e5 */
            float4(this.scalar) * other.group1
        );
        AntiMotor right_dual = AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            float4((float3(wedge.e12345) * right_dual.group0.xyz), (right_dual.scalar * wedge.e12345) - (right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435)), 
            /* e15, e25, e35, e3215 */
            float4(((float3(right_dual.e3215) * wedge.group0.xyz) + (float3(wedge.e12345) * right_dual.group1.xyz)), right_dual.e3215 * wedge.e12345)
        );
    }
}
extension Scalar: AntiRejectViaHorizonFrom<MultiVector> {
    associatedtype Output = MultiVector;
    func anti_reject_via_horizon_from(other: MultiVector) -> Output {
        MultiVector wedge = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(this.scalar) * other.group0.xy, 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(this.scalar) * other.group1, 
            /* e5, 0, 0, 0 */
            float4(other.e5 * this.scalar, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(this.scalar) * other.group3, 
            /* e41, e42, e43, 0 */
            float4(float3(this.scalar) * other.group4.xyz, 0.0), 
            /* e23, e31, e12, 0 */
            float4(float3(this.scalar) * other.group5.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(this.scalar) * other.group6, 
            /* e423, e431, e412, 0 */
            float4(float3(this.scalar) * other.group7.xyz, 0.0), 
            /* e235, e315, e125, 0 */
            float4(float3(this.scalar) * other.group8.xyz, 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(this.scalar) * other.group9, 
            /* e1234, 0, 0, 0 */
            float4(other.e1234 * this.scalar, 0.0, 0.0, 0.0)
        );
        MultiVector right_dual = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(other.group0.xy.yx * float2(-1.0, 1.0), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5, 0, 0, 0 */
            float4(other.e3215, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43, 0 */
            float4(other.group7.xyz, 0.0), 
            /* e23, e31, e12, 0 */
            float4(other.group6.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412, 0 */
            float4(other.group4.xyz * float3(-1.0), 0.0), 
            /* e235, e315, e125, 0 */
            float4(other.group3.xyz * float3(-1.0), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        return MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2((right_dual.scalar * wedge.e12345) + (right_dual.e12345 * wedge.scalar) + (right_dual.e1 * wedge.e4235) + (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) + (right_dual.e4 * wedge.e3215) + (right_dual.e5 * wedge.e1234) + (right_dual.e4235 * wedge.e1) + (right_dual.e4315 * wedge.e2) + (right_dual.e4125 * wedge.e3) + (right_dual.e3215 * wedge.e4) + (right_dual.e1234 * wedge.e5) - (right_dual.e15 * wedge.e423) - (right_dual.e25 * wedge.e431) - (right_dual.e35 * wedge.e412) - (right_dual.e45 * wedge.e321) - (right_dual.e41 * wedge.e235) - (right_dual.e42 * wedge.e315) - (right_dual.e43 * wedge.e125) - (right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e321 * wedge.e45) - (right_dual.e423 * wedge.e15) - (right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43), right_dual.e12345 * wedge.e12345), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e15 * wedge.e1234) + (right_dual.e415 * wedge.e321) + (right_dual.e321 * wedge.e415) + (right_dual.e4125 * wedge.e31), (right_dual.e25 * wedge.e1234) + (right_dual.e425 * wedge.e321) + (right_dual.e321 * wedge.e425) + (right_dual.e4235 * wedge.e12), (right_dual.e35 * wedge.e1234) + (right_dual.e435 * wedge.e321) + (right_dual.e321 * wedge.e435) + (right_dual.e4315 * wedge.e23), -(right_dual.e415 * wedge.e423) - (right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412) - (right_dual.e1234 * wedge.e45)) + (float4(right_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_dual.group1) + (wedge.group9.yzxx * float4(right_dual.group5.xyz.zxy, right_dual.e41)) + float4((wedge.group4.xyz * right_dual.group9.www), right_dual.e45 * wedge.e1234) + float4((right_dual.group7.xyz.zxy * wedge.group8.xyz.yzx), right_dual.e42 * wedge.e4315) + float4((right_dual.group8.xyz.yzx * wedge.group7.xyz.zxy), right_dual.e43 * wedge.e4125) - (right_dual.group9.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((float3(right_dual.e1234) * wedge.group3.xyz), right_dual.e4125 * wedge.e43) - float4((right_dual.group4.xyz * wedge.group9.www), right_dual.e423 * wedge.e415) - float4((right_dual.group5.xyz.yzx * wedge.group9.zxy), right_dual.e431 * wedge.e425) - float4((right_dual.group7.xyz.yzx * wedge.group8.xyz.zxy), right_dual.e412 * wedge.e435) - float4((right_dual.group8.xyz.zxy * wedge.group7.xyz.yzx), right_dual.e4235 * wedge.e41), 
            /* e5, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e5) + (right_dual.e5 * wedge.e12345) + (right_dual.e4235 * wedge.e15) + (right_dual.e4315 * wedge.e25) + (right_dual.e4125 * wedge.e35) + (right_dual.e3215 * wedge.e45) - (right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125) - (right_dual.e45 * wedge.e3215) - (right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435), 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4((right_dual.e415 * wedge.e3215) + (right_dual.e315 * wedge.e4125) + (right_dual.e4125 * wedge.e315) + (right_dual.e3215 * wedge.e415), (right_dual.e425 * wedge.e3215) + (right_dual.e125 * wedge.e4235) + (right_dual.e4235 * wedge.e125) + (right_dual.e3215 * wedge.e425), (right_dual.e435 * wedge.e3215) + (right_dual.e235 * wedge.e4315) + (right_dual.e4315 * wedge.e235) + (right_dual.e3215 * wedge.e435), -(right_dual.e435 * wedge.e4125) - (right_dual.e4235 * wedge.e415) - (right_dual.e4315 * wedge.e425) - (right_dual.e4125 * wedge.e435)) + (float4(right_dual.e12345) * wedge.group3) + (float4(wedge.e12345) * right_dual.group3) - (wedge.group9.yzxx * float4(right_dual.group8.xyz.zxy, right_dual.e415)) - float4((wedge.group8.xyz.zxy * right_dual.group9.yzx), right_dual.e425 * wedge.e4315), 
            /* e41, e42, e43, 0 */
            float4((float3(right_dual.e12345) * wedge.group4.xyz) + (float3(right_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_dual.group4.xyz) + (float3(wedge.e1234) * right_dual.group6.xyz) + (right_dual.group7.xyz.zxy * wedge.group9.yzx) + (wedge.group7.xyz.zxy * right_dual.group9.yzx) - (right_dual.group7.xyz.yzx * wedge.group9.zxy) - (wedge.group7.xyz.yzx * right_dual.group9.zxy), 0.0), 
            /* e23, e31, e12, 0 */
            float4((float3(right_dual.e12345) * wedge.group5.xyz) + (float3(right_dual.e3215) * wedge.group7.xyz) + (float3(right_dual.e1234) * wedge.group8.xyz) + (float3(wedge.e12345) * right_dual.group5.xyz) + (float3(wedge.e3215) * right_dual.group7.xyz) + (float3(wedge.e1234) * right_dual.group8.xyz) - (float3(right_dual.e321) * wedge.group9.xyz) - (float3(wedge.e321) * right_dual.group9.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            (float4(right_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_dual.group6) + (right_dual.group9.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - float4((right_dual.group9.zxy * wedge.group9.yzx), right_dual.e1234 * wedge.e3215), 
            /* e423, e431, e412, 0 */
            float4((float3(right_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_dual.group7.xyz) + (float3(wedge.e1234) * right_dual.group9.xyz) - (float3(right_dual.e1234) * wedge.group9.xyz), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(right_dual.e12345) * wedge.group8.xyz) + (float3(right_dual.e3215) * wedge.group9.xyz) + (float3(wedge.e12345) * right_dual.group8.xyz) - (float3(wedge.e3215) * right_dual.group9.xyz), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            (float4(right_dual.e12345) * wedge.group9) + (float4(wedge.e12345) * right_dual.group9), 
            /* e1234, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e1234) + (right_dual.e1234 * wedge.e12345), 0.0, 0.0, 0.0)
        );
    }
}
extension Scalar: AntiRejectViaHorizonFrom<Plane> {
    associatedtype Output = Scalar;
    func anti_reject_via_horizon_from(other: Plane) -> Output {
        Plane wedge = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(this.scalar) * other.group0
        );
        AntiPlane right_dual = AntiPlane.from_groups(
            /* e1, e2, e3, e5 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return Scalar.from_groups(
            /* scalar, 0, 0, 0 */
            float4((right_dual.e1 * wedge.e4235) + (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125), 0.0, 0.0, 0.0)
        );
    }
}
extension Scalar: AntiRejectViaHorizonFrom<RoundPoint> {
    associatedtype Output = Scalar;
    func anti_reject_via_horizon_from(other: RoundPoint) -> Output {
        RoundPoint wedge = RoundPoint.from_groups(
            /* e1, e2, e3, e4 */
            float4(this.scalar) * other.group0, 
            /* e5, 0, 0, 0 */
            float4(other.e5 * this.scalar, 0.0, 0.0, 0.0)
        );
        Sphere right_dual = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        return Scalar.from_groups(
            /* scalar, 0, 0, 0 */
            float4((wedge.e1 * right_dual.e4235) + (wedge.e2 * right_dual.e4315) + (wedge.e3 * right_dual.e4125) + (wedge.e4 * right_dual.e3215) + (wedge.e5 * right_dual.e1234), 0.0, 0.0, 0.0)
        );
    }
}
extension Scalar: AntiRejectViaHorizonFrom<Scalar> {
    associatedtype Output = Scalar;
    func anti_reject_via_horizon_from(other: Scalar) -> Output {
        return Scalar.from_groups(
            /* scalar, 0, 0, 0 */
            float4(powi(other.scalar, 2) * this.scalar, 0.0, 0.0, 0.0)
        );
    }
}
extension Scalar: AntiRejectViaHorizonFrom<Sphere> {
    associatedtype Output = Scalar;
    func anti_reject_via_horizon_from(other: Sphere) -> Output {
        Sphere wedge = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(this.scalar) * other.group0, 
            /* e1234, 0, 0, 0 */
            float4(this.scalar * other.e1234, 0.0, 0.0, 0.0)
        );
        RoundPoint right_dual = RoundPoint.from_groups(
            /* e1, e2, e3, e4 */
            float4(other.group0.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5, 0, 0, 0 */
            float4(other.e3215, 0.0, 0.0, 0.0)
        );
        return Scalar.from_groups(
            /* scalar, 0, 0, 0 */
            float4((right_dual.e1 * wedge.e4235) + (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) + (right_dual.e4 * wedge.e3215) + (right_dual.e5 * wedge.e1234), 0.0, 0.0, 0.0)
        );
    }
}
extension Scalar: AntiRejectViaHorizonFrom<VersorEven> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: VersorEven) -> Output {
        VersorEven wedge = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4(this.scalar) * other.group0, 
            /* e415, e425, e435, e321 */
            float4(this.scalar) * other.group1, 
            /* e235, e315, e125, e5 */
            float4(this.scalar) * other.group2, 
            /* e1, e2, e3, e4 */
            float4(this.scalar) * other.group3
        );
        VersorOdd right_dual = VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            (wedge.group0.zxyw * float4(right_dual.group3.yzx, right_dual.scalar)) + float4(float3(0.0), (wedge.e2 * right_dual.e4315) + (wedge.e3 * right_dual.e4125) + (wedge.e4 * right_dual.e3215) - (wedge.e431 * right_dual.e25) - (wedge.e412 * right_dual.e35) - (wedge.e415 * right_dual.e23) - (wedge.e425 * right_dual.e31) - (wedge.e435 * right_dual.e12) - (wedge.e321 * right_dual.e45) - (wedge.e235 * right_dual.e41) - (wedge.e315 * right_dual.e42) - (wedge.e125 * right_dual.e43)) + float4((wedge.group0.www * right_dual.group0.xyz), wedge.e5 * right_dual.e1234) + float4((right_dual.group2.www * wedge.group1.xyz), wedge.e1 * right_dual.e4235) - (wedge.group0.yzxx * float4(right_dual.group3.zxy, right_dual.e15)), 
            /* e23, e31, e12, e45 */
            float4((wedge.e12345 * right_dual.e23) + (wedge.e235 * right_dual.e1234), (wedge.e12345 * right_dual.e31) + (wedge.e315 * right_dual.e1234), (wedge.e12345 * right_dual.e12) + (wedge.e125 * right_dual.e1234), -(wedge.e425 * right_dual.e4315) - (wedge.e435 * right_dual.e4125)) + (wedge.group0 * float4(right_dual.group3.www, right_dual.e45)) - (wedge.group1.wwwx * right_dual.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(wedge.e12345) * right_dual.group2.xyz) + (float3(right_dual.e3215) * wedge.group1.xyz) + (wedge.group2.yzx * right_dual.group3.zxy) - (wedge.group2.zxy * right_dual.group3.yzx)), wedge.e12345 * right_dual.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_dual.group3
        );
    }
}
extension Scalar: AntiRejectViaHorizonFrom<VersorOdd> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: VersorOdd) -> Output {
        VersorOdd wedge = VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            float4(this.scalar) * other.group0, 
            /* e23, e31, e12, e45 */
            float4(this.scalar) * other.group1, 
            /* e15, e25, e35, e1234 */
            float4(this.scalar) * other.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(this.scalar) * other.group3
        );
        VersorEven right_dual = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            (right_dual.group0.zxyw * float4(wedge.group3.yzx, wedge.scalar)) + float4(float3(0.0), (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) + (right_dual.e4 * wedge.e3215) - (right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e321 * wedge.e45) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43)) + float4((right_dual.group0.www * wedge.group0.xyz), right_dual.e5 * wedge.e1234) + float4((wedge.group2.www * right_dual.group1.xyz), right_dual.e1 * wedge.e4235) - (right_dual.group0.yzxx * float4(wedge.group3.zxy, wedge.e15)), 
            /* e23, e31, e12, e45 */
            float4((right_dual.e12345 * wedge.e23) + (right_dual.e235 * wedge.e1234), (right_dual.e12345 * wedge.e31) + (right_dual.e315 * wedge.e1234), (right_dual.e12345 * wedge.e12) + (right_dual.e125 * wedge.e1234), -(right_dual.e425 * wedge.e4315) - (right_dual.e435 * wedge.e4125)) + (right_dual.group0 * float4(wedge.group3.www, wedge.e45)) - (right_dual.group1.wwwx * wedge.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_dual.e12345) * wedge.group2.xyz) + (float3(wedge.e3215) * right_dual.group1.xyz) + (right_dual.group2.yzx * wedge.group3.zxy) - (right_dual.group2.zxy * wedge.group3.yzx)), right_dual.e12345 * wedge.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * wedge.group3
        );
    }
}
extension Sphere {
    // Fancy infix trick
    func operator/(_rhs: AntiRejectViaHorizonFromInfix) -> AntiRejectViaHorizonFromInfixPartial<Sphere> {
        return AntiRejectViaHorizonFromInfixPartial { a: this };
    }
}
extension Sphere: AntiRejectViaHorizonFrom<AntiCircleRotor> {
    associatedtype Output = DipoleInversion;
    func anti_reject_via_horizon_from(other: AntiCircleRotor) -> Output {
        Sphere wedge = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar) * this.group0, 
            /* e1234, 0, 0, 0 */
            float4(other.scalar * this.e1234, 0.0, 0.0, 0.0)
        );
        CircleRotor right_dual = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4((float3(wedge.e1234) * right_dual.group1.xyz) + (right_dual.group0.xyz.zxy * wedge.group0.yzx) - (right_dual.group0.xyz.yzx * wedge.group0.zxy), 0.0), 
            /* e23, e31, e12, e45 */
            float4((right_dual.e423 * wedge.e3215) + (right_dual.e235 * wedge.e1234), (right_dual.e431 * wedge.e3215) + (right_dual.e315 * wedge.e1234), (right_dual.e412 * wedge.e3215) + (right_dual.e125 * wedge.e1234), -(right_dual.e425 * wedge.e4315) - (right_dual.e435 * wedge.e4125)) - (right_dual.group1.wwwx * wedge.group0.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(wedge.e3215) * right_dual.group1.xyz) + (right_dual.group2.yzx * wedge.group0.zxy) - (right_dual.group2.zxy * wedge.group0.yzx)), right_dual.e12345 * wedge.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * wedge.group0
        );
    }
}
extension Sphere: AntiRejectViaHorizonFrom<AntiDipoleInversion> {
    associatedtype Output = DipoleInversion;
    func anti_reject_via_horizon_from(other: AntiDipoleInversion) -> Output {
        AntiScalar wedge = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4((other.e4 * this.e3215) + (other.e1 * this.e4235) + (other.e2 * this.e4315) + (other.e3 * this.e4125) + (other.e5 * this.e1234), 0.0, 0.0, 0.0)
        );
        DipoleInversion right_dual = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(wedge.e12345) * right_dual.group1, 
            /* e15, e25, e35, e1234 */
            float4(wedge.e12345) * right_dual.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_dual.group3
        );
    }
}
extension Sphere: AntiRejectViaHorizonFrom<AntiDualNum> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: AntiDualNum) -> Output {
        Sphere wedge = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar) * this.group0, 
            /* e1234, 0, 0, 0 */
            float4(other.scalar * this.e1234, 0.0, 0.0, 0.0)
        );
        DualNum right_dual = DualNum.from_groups(
            /* e5, e12345, 0, 0 */
            float4(other.group0.xy, 0.0, 0.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            float4(float3(0.0), right_dual.e5 * wedge.e1234), 
            /* e23, e31, e12, e45 */
            float4(0.0), 
            /* e15, e25, e35, e1234 */
            float4(float3(0.0), right_dual.e12345 * wedge.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * wedge.group0
        );
    }
}
extension Sphere: AntiRejectViaHorizonFrom<AntiFlector> {
    associatedtype Output = Flector;
    func anti_reject_via_horizon_from(other: AntiFlector) -> Output {
        AntiScalar wedge = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4((other.e1 * this.e4235) + (other.e2 * this.e4315) + (other.e3 * this.e4125) + (other.e5 * this.e1234), 0.0, 0.0, 0.0)
        );
        Flector right_dual = Flector.from_groups(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return Flector.from_groups(
            /* e15, e25, e35, e45 */
            float4(wedge.e12345) * right_dual.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_dual.group1
        );
    }
}
extension Sphere: AntiRejectViaHorizonFrom<AntiMotor> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: AntiMotor) -> Output {
        Sphere wedge = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar) * this.group0, 
            /* e1234, 0, 0, 0 */
            float4(other.scalar * this.e1234, 0.0, 0.0, 0.0)
        );
        Motor right_dual = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            float4(wedge.e1234) * float4(right_dual.group0.xyz, right_dual.e5), 
            /* e23, e31, e12, e45 */
            float4((float3(wedge.e1234) * right_dual.group1.xyz), -(right_dual.e415 * wedge.e4235) - (right_dual.e425 * wedge.e4315) - (right_dual.e435 * wedge.e4125)), 
            /* e15, e25, e35, e1234 */
            float4(((float3(wedge.e3215) * right_dual.group0.xyz) + (right_dual.group1.yzx * wedge.group0.zxy) - (right_dual.group1.zxy * wedge.group0.yzx)), right_dual.e12345 * wedge.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * wedge.group0
        );
    }
}
extension Sphere: AntiRejectViaHorizonFrom<AntiPlane> {
    associatedtype Output = Plane;
    func anti_reject_via_horizon_from(other: AntiPlane) -> Output {
        return Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4((other.e1 * this.e4235) + (other.e2 * this.e4315) + (other.e3 * this.e4125) + (other.e5 * this.e1234)) * float4(other.group0.xyz, other.e5 * -1.0)
        );
    }
}
extension Sphere: AntiRejectViaHorizonFrom<DualNum> {
    associatedtype Output = AntiDualNum;
    func anti_reject_via_horizon_from(other: DualNum) -> Output {
        return AntiDualNum.from_groups(
            /* e3215, scalar, 0, 0 */
            float4(float2(other.e5 * this.e1234) * float2(other.e5 * -1.0, other.e12345 * -1.0), 0.0, 0.0)
        );
    }
}
extension Sphere: AntiRejectViaHorizonFrom<Motor> {
    associatedtype Output = AntiMotor;
    func anti_reject_via_horizon_from(other: Motor) -> Output {
        AntiScalar wedge = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(other.e5 * this.e1234, 0.0, 0.0, 0.0)
        );
        AntiMotor right_dual = AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            float4(wedge.e12345) * right_dual.group0, 
            /* e15, e25, e35, e3215 */
            float4(wedge.e12345) * right_dual.group1
        );
    }
}
extension Sphere: AntiRejectViaHorizonFrom<MultiVector> {
    associatedtype Output = MultiVector;
    func anti_reject_via_horizon_from(other: MultiVector) -> Output {
        MultiVector wedge = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(0.0, (other.e1 * this.e4235) + (other.e2 * this.e4315) + (other.e3 * this.e4125) + (other.e4 * this.e3215) + (other.e5 * this.e1234)), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(0.0), 
            /* e5, 0, 0, 0 */
            float4(0.0), 
            /* e15, e25, e35, e45 */
            float4(0.0), 
            /* e41, e42, e43, 0 */
            float4(0.0), 
            /* e23, e31, e12, 0 */
            float4(0.0), 
            /* e415, e425, e435, e321 */
            float4(0.0), 
            /* e423, e431, e412, 0 */
            float4(0.0), 
            /* e235, e315, e125, 0 */
            float4(0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar) * this.group0, 
            /* e1234, 0, 0, 0 */
            float4(other.scalar * this.e1234, 0.0, 0.0, 0.0)
        );
        MultiVector right_dual = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(other.group0.xy.yx * float2(-1.0, 1.0), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5, 0, 0, 0 */
            float4(other.e3215, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43, 0 */
            float4(other.group7.xyz, 0.0), 
            /* e23, e31, e12, 0 */
            float4(other.group6.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412, 0 */
            float4(other.group4.xyz * float3(-1.0), 0.0), 
            /* e235, e315, e125, 0 */
            float4(other.group3.xyz * float3(-1.0), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        return MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2((right_dual.scalar * wedge.e12345) + (right_dual.e12345 * wedge.scalar) + (right_dual.e1 * wedge.e4235) + (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) + (right_dual.e4 * wedge.e3215) + (right_dual.e5 * wedge.e1234) + (right_dual.e4235 * wedge.e1) + (right_dual.e4315 * wedge.e2) + (right_dual.e4125 * wedge.e3) + (right_dual.e3215 * wedge.e4) + (right_dual.e1234 * wedge.e5) - (right_dual.e15 * wedge.e423) - (right_dual.e25 * wedge.e431) - (right_dual.e35 * wedge.e412) - (right_dual.e45 * wedge.e321) - (right_dual.e41 * wedge.e235) - (right_dual.e42 * wedge.e315) - (right_dual.e43 * wedge.e125) - (right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e321 * wedge.e45) - (right_dual.e423 * wedge.e15) - (right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43), right_dual.e12345 * wedge.e12345), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e15 * wedge.e1234) + (right_dual.e415 * wedge.e321) + (right_dual.e321 * wedge.e415) + (right_dual.e4125 * wedge.e31), (right_dual.e25 * wedge.e1234) + (right_dual.e425 * wedge.e321) + (right_dual.e321 * wedge.e425) + (right_dual.e4235 * wedge.e12), (right_dual.e35 * wedge.e1234) + (right_dual.e435 * wedge.e321) + (right_dual.e321 * wedge.e435) + (right_dual.e4315 * wedge.e23), -(right_dual.e415 * wedge.e423) - (right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412) - (right_dual.e1234 * wedge.e45)) + (float4(right_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_dual.group1) + (wedge.group9.yzxx * float4(right_dual.group5.xyz.zxy, right_dual.e41)) + float4((wedge.group4.xyz * right_dual.group9.www), right_dual.e45 * wedge.e1234) + float4((right_dual.group7.xyz.zxy * wedge.group8.xyz.yzx), right_dual.e42 * wedge.e4315) + float4((right_dual.group8.xyz.yzx * wedge.group7.xyz.zxy), right_dual.e43 * wedge.e4125) - (right_dual.group9.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((float3(right_dual.e1234) * wedge.group3.xyz), right_dual.e4125 * wedge.e43) - float4((right_dual.group4.xyz * wedge.group9.www), right_dual.e423 * wedge.e415) - float4((right_dual.group5.xyz.yzx * wedge.group9.zxy), right_dual.e431 * wedge.e425) - float4((right_dual.group7.xyz.yzx * wedge.group8.xyz.zxy), right_dual.e412 * wedge.e435) - float4((right_dual.group8.xyz.zxy * wedge.group7.xyz.yzx), right_dual.e4235 * wedge.e41), 
            /* e5, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e5) + (right_dual.e5 * wedge.e12345) + (right_dual.e4235 * wedge.e15) + (right_dual.e4315 * wedge.e25) + (right_dual.e4125 * wedge.e35) + (right_dual.e3215 * wedge.e45) - (right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125) - (right_dual.e45 * wedge.e3215) - (right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435), 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4((right_dual.e415 * wedge.e3215) + (right_dual.e315 * wedge.e4125) + (right_dual.e4125 * wedge.e315) + (right_dual.e3215 * wedge.e415), (right_dual.e425 * wedge.e3215) + (right_dual.e125 * wedge.e4235) + (right_dual.e4235 * wedge.e125) + (right_dual.e3215 * wedge.e425), (right_dual.e435 * wedge.e3215) + (right_dual.e235 * wedge.e4315) + (right_dual.e4315 * wedge.e235) + (right_dual.e3215 * wedge.e435), -(right_dual.e435 * wedge.e4125) - (right_dual.e4235 * wedge.e415) - (right_dual.e4315 * wedge.e425) - (right_dual.e4125 * wedge.e435)) + (float4(right_dual.e12345) * wedge.group3) + (float4(wedge.e12345) * right_dual.group3) - (wedge.group9.yzxx * float4(right_dual.group8.xyz.zxy, right_dual.e415)) - float4((wedge.group8.xyz.zxy * right_dual.group9.yzx), right_dual.e425 * wedge.e4315), 
            /* e41, e42, e43, 0 */
            float4((float3(right_dual.e12345) * wedge.group4.xyz) + (float3(right_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_dual.group4.xyz) + (float3(wedge.e1234) * right_dual.group6.xyz) + (right_dual.group7.xyz.zxy * wedge.group9.yzx) + (wedge.group7.xyz.zxy * right_dual.group9.yzx) - (right_dual.group7.xyz.yzx * wedge.group9.zxy) - (wedge.group7.xyz.yzx * right_dual.group9.zxy), 0.0), 
            /* e23, e31, e12, 0 */
            float4((float3(right_dual.e12345) * wedge.group5.xyz) + (float3(right_dual.e3215) * wedge.group7.xyz) + (float3(right_dual.e1234) * wedge.group8.xyz) + (float3(wedge.e12345) * right_dual.group5.xyz) + (float3(wedge.e3215) * right_dual.group7.xyz) + (float3(wedge.e1234) * right_dual.group8.xyz) - (float3(right_dual.e321) * wedge.group9.xyz) - (float3(wedge.e321) * right_dual.group9.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            (float4(right_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_dual.group6) + (right_dual.group9.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - float4((right_dual.group9.zxy * wedge.group9.yzx), right_dual.e1234 * wedge.e3215), 
            /* e423, e431, e412, 0 */
            float4((float3(right_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_dual.group7.xyz) + (float3(wedge.e1234) * right_dual.group9.xyz) - (float3(right_dual.e1234) * wedge.group9.xyz), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(right_dual.e12345) * wedge.group8.xyz) + (float3(right_dual.e3215) * wedge.group9.xyz) + (float3(wedge.e12345) * right_dual.group8.xyz) - (float3(wedge.e3215) * right_dual.group9.xyz), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            (float4(right_dual.e12345) * wedge.group9) + (float4(wedge.e12345) * right_dual.group9), 
            /* e1234, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e1234) + (right_dual.e1234 * wedge.e12345), 0.0, 0.0, 0.0)
        );
    }
}
extension Sphere: AntiRejectViaHorizonFrom<RoundPoint> {
    associatedtype Output = Sphere;
    func anti_reject_via_horizon_from(other: RoundPoint) -> Output {
        AntiScalar wedge = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4((other.e1 * this.e4235) + (other.e2 * this.e4315) + (other.e3 * this.e4125) + (other.e4 * this.e3215) + (other.e5 * this.e1234), 0.0, 0.0, 0.0)
        );
        Sphere right_dual = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        return Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_dual.group0, 
            /* e1234, 0, 0, 0 */
            float4(wedge.e12345 * right_dual.e1234, 0.0, 0.0, 0.0)
        );
    }
}
extension Sphere: AntiRejectViaHorizonFrom<Scalar> {
    associatedtype Output = Sphere;
    func anti_reject_via_horizon_from(other: Scalar) -> Output {
        Sphere wedge = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar) * this.group0, 
            /* e1234, 0, 0, 0 */
            float4(other.scalar * this.e1234, 0.0, 0.0, 0.0)
        );
        AntiScalar right_dual = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(other.scalar, 0.0, 0.0, 0.0)
        );
        return Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * wedge.group0, 
            /* e1234, 0, 0, 0 */
            float4(right_dual.e12345 * wedge.e1234, 0.0, 0.0, 0.0)
        );
    }
}
extension Sphere: AntiRejectViaHorizonFrom<VersorEven> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: VersorEven) -> Output {
        AntiScalar wedge = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4((this.e4235 * other.e1) + (this.e4315 * other.e2) + (this.e4125 * other.e3) + (this.e3215 * other.e4) + (this.e1234 * other.e5), 0.0, 0.0, 0.0)
        );
        VersorOdd right_dual = VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            float4(wedge.e12345) * right_dual.group0, 
            /* e23, e31, e12, e45 */
            float4(wedge.e12345) * right_dual.group1, 
            /* e15, e25, e35, e1234 */
            float4(wedge.e12345) * right_dual.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_dual.group3
        );
    }
}
extension Sphere: AntiRejectViaHorizonFrom<VersorOdd> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: VersorOdd) -> Output {
        Sphere wedge = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar) * this.group0, 
            /* e1234, 0, 0, 0 */
            float4(this.e1234 * other.scalar, 0.0, 0.0, 0.0)
        );
        VersorEven right_dual = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            float4(wedge.e4125 * right_dual.e431 * -1.0, wedge.e4235 * right_dual.e412 * -1.0, wedge.e4315 * right_dual.e423 * -1.0, (wedge.e4125 * right_dual.e3) + (wedge.e3215 * right_dual.e4) + (wedge.e1234 * right_dual.e5)) + (wedge.group0.yzxx * float4(right_dual.group0.zxy, right_dual.e1)) + float4((float3(wedge.e1234) * right_dual.group1.xyz), wedge.e4315 * right_dual.e2), 
            /* e23, e31, e12, e45 */
            float4((wedge.e3215 * right_dual.e423) + (wedge.e1234 * right_dual.e235), (wedge.e3215 * right_dual.e431) + (wedge.e1234 * right_dual.e315), (wedge.e3215 * right_dual.e412) + (wedge.e1234 * right_dual.e125), -(wedge.e4315 * right_dual.e425) - (wedge.e4125 * right_dual.e435)) - (wedge.group0.xyzx * right_dual.group1.wwwx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(wedge.e3215) * right_dual.group1.xyz) + (wedge.group0.zxy * right_dual.group2.yzx) - (wedge.group0.yzx * right_dual.group2.zxy)), wedge.e1234 * right_dual.e12345), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * wedge.group0
        );
    }
}
extension VersorEven {
    // Fancy infix trick
    func operator/(_rhs: AntiRejectViaHorizonFromInfix) -> AntiRejectViaHorizonFromInfixPartial<VersorEven> {
        return AntiRejectViaHorizonFromInfixPartial { a: this };
    }
}
extension VersorEven: AntiRejectViaHorizonFrom<AntiCircleRotor> {
    associatedtype Output = VersorEven;
    func anti_reject_via_horizon_from(other: AntiCircleRotor) -> Output {
        VersorEven wedge = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4((other.e23 * this.e4) + (other.scalar * this.e423), (other.e31 * this.e4) + (other.scalar * this.e431), (other.e12 * this.e4) + (other.scalar * this.e412), -(other.e42 * this.e315) - (other.e43 * this.e125) - (other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435) - (other.e45 * this.e321) - (other.e15 * this.e423) - (other.e25 * this.e431) - (other.e35 * this.e412)) + float4((other.group0.xyz.yzx * this.group3.zxy), other.scalar * this.e12345) - float4((other.group0.xyz.zxy * this.group3.yzx), other.e41 * this.e235), 
            /* e415, e425, e435, e321 */
            float4((other.e15 * this.e4) + (other.scalar * this.e415), (other.e25 * this.e4) + (other.scalar * this.e425), (other.e35 * this.e4) + (other.scalar * this.e435), -(other.e31 * this.e2) - (other.e12 * this.e3)) + float4((other.group0.xyz * this.group2.www), other.scalar * this.e321) - (other.group1.wwwx * this.group3.xyzx), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.scalar) * this.group2.xyz) + (float3(this.e5) * other.group1.xyz) + (other.group2.zxy * this.group3.yzx) - (other.group2.yzx * this.group3.zxy)), other.scalar * this.e5), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * this.group3
        );
        CircleRotor right_dual = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4(((float3(right_dual.e12345) * wedge.group0.xyz) + (float3(wedge.e12345) * right_dual.group0.xyz)), right_dual.e12345 * wedge.e12345), 
            /* e415, e425, e435, e321 */
            (float4(right_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_dual.group1), 
            /* e235, e315, e125, e5 */
            float4(right_dual.e12345 * wedge.e235, right_dual.e12345 * wedge.e315, right_dual.e12345 * wedge.e125, -(right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435)) + (right_dual.group2 * float4(wedge.group0.www, wedge.e5)), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e415 * wedge.e321) + (right_dual.e321 * wedge.e415) + (right_dual.e315 * wedge.e412) + (right_dual.e12345 * wedge.e1), (right_dual.e425 * wedge.e321) + (right_dual.e321 * wedge.e425) + (right_dual.e125 * wedge.e423) + (right_dual.e12345 * wedge.e2), (right_dual.e435 * wedge.e321) + (right_dual.e321 * wedge.e435) + (right_dual.e235 * wedge.e431) + (right_dual.e12345 * wedge.e3), -(right_dual.e412 * wedge.e435) - (right_dual.e415 * wedge.e423) - (right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412)) + float4((right_dual.group0.xyz.zxy * wedge.group2.yzx), right_dual.e12345 * wedge.e4) - float4((right_dual.group0.xyz.yzx * wedge.group2.zxy), right_dual.e423 * wedge.e415) - float4((right_dual.group2.zxy * wedge.group0.yzx), right_dual.e431 * wedge.e425)
        );
    }
}
extension VersorEven: AntiRejectViaHorizonFrom<AntiDipoleInversion> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: AntiDipoleInversion) -> Output {
        DipoleInversion wedge = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4((float3(this.e4) * other.group3.xyz) - (float3(other.e4) * this.group3.xyz), 0.0), 
            /* e23, e31, e12, e45 */
            (other.group3.zxyw * this.group3.yzxw) - float4((other.group3.yzx * this.group3.zxy), other.e4 * this.e5), 
            /* e15, e25, e35, e1234 */
            (this.group3.xyzx * float4(other.group3.www, other.e423)) + float4(float3(0.0), (other.e431 * this.e2) + (other.e412 * this.e3) + (other.e321 * this.e4) - (other.e1 * this.e423) - (other.e2 * this.e431) - (other.e3 * this.e412)) - float4((this.group2.www * other.group3.xyz), other.e4 * this.e321), 
            /* e4235, e4315, e4125, e3215 */
            (float4(other.e5) * float4(this.group0.xyz, this.e321)) + (other.group3.yzxz * float4(this.group1.zxy, this.e125)) + float4((other.group1.yzx * this.group3.zxy), other.e1 * this.e235) + float4((this.group3.www * other.group2.xyz), other.e2 * this.e315) - (float4(this.e5) * float4(other.group0.xyz, other.e321)) - (other.group2.wwwy * float4(this.group2.xyz, this.e2)) - (this.group3.yzxx * float4(other.group1.zxy, other.e235)) - float4((other.group3.zxy * this.group1.yzx), other.e125 * this.e3)
        );
        DipoleInversion right_dual = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4((float3(wedge.e1234) * right_dual.group3.xyz) - (float3(right_dual.e1234) * wedge.group3.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            (right_dual.group3.yzxw * float4(wedge.group3.zxy, wedge.e1234)) - (wedge.group3.yzxw * float4(right_dual.group3.zxy, right_dual.e1234)), 
            /* e235, e315, e125, e4 */
            (wedge.group3.xyzx * float4(right_dual.group3.www, right_dual.e41)) + float4(float3(0.0), (right_dual.e42 * wedge.e4315) + (right_dual.e43 * wedge.e4125) + (right_dual.e45 * wedge.e1234) - (right_dual.e1234 * wedge.e45) - (right_dual.e4315 * wedge.e42) - (right_dual.e4125 * wedge.e43)) - float4((wedge.group3.www * right_dual.group3.xyz), right_dual.e4235 * wedge.e41), 
            /* e1, e2, e3, e5 */
            (right_dual.group3.zxyw * wedge.group1.yzxw) + (wedge.group2.wwwz * float4(right_dual.group2.xyz, right_dual.e4125)) + float4((wedge.group0.xyz * right_dual.group3.www), right_dual.e4235 * wedge.e15) + float4((right_dual.group1.zxy * wedge.group3.yzx), right_dual.e4315 * wedge.e25) - (float4(wedge.e3215) * float4(right_dual.group0.xyz, right_dual.e45)) - (right_dual.group2.wwwy * float4(wedge.group2.xyz, wedge.e4315)) - (wedge.group3.zxyx * float4(right_dual.group1.yzx, right_dual.e15)) - float4((right_dual.group3.yzx * wedge.group1.zxy), right_dual.e35 * wedge.e4125)
        );
    }
}
extension VersorEven: AntiRejectViaHorizonFrom<AntiDualNum> {
    associatedtype Output = VersorEven;
    func anti_reject_via_horizon_from(other: AntiDualNum) -> Output {
        VersorEven wedge = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4(other.group0.xy.yy, other.scalar, (other.e3215 * this.e4) + (other.scalar * this.e12345)) * float4(this.group0.xyz, 1.0), 
            /* e415, e425, e435, e321 */
            float4(other.scalar) * this.group1, 
            /* e235, e315, e125, e5 */
            float4(other.scalar) * this.group2, 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * this.group3
        );
        DualNum right_dual = DualNum.from_groups(
            /* e5, e12345, 0, 0 */
            float4(other.group0.xy, 0.0, 0.0)
        );
        return VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4(right_dual.e12345) * wedge.group0, 
            /* e415, e425, e435, e321 */
            float4(right_dual.e12345) * wedge.group1, 
            /* e235, e315, e125, e5 */
            float4(right_dual.group0.xy.yy, right_dual.e12345, (right_dual.e5 * wedge.e12345) + (right_dual.e12345 * wedge.e5)) * float4(wedge.group2.xyz, 1.0), 
            /* e1, e2, e3, e4 */
            float4(right_dual.e12345) * wedge.group3
        );
    }
}
extension VersorEven: AntiRejectViaHorizonFrom<AntiFlatPoint> {
    associatedtype Output = RoundPoint;
    func anti_reject_via_horizon_from(other: AntiFlatPoint) -> Output {
        Sphere wedge = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4((float3(this.e4) * other.group0.xyz), -(other.e235 * this.e1) - (other.e315 * this.e2) - (other.e125 * this.e3) - (other.e321 * this.e5)), 
            /* e1234, 0, 0, 0 */
            float4(other.e321 * this.e4, 0.0, 0.0, 0.0)
        );
        FlatPoint right_dual = FlatPoint.from_groups(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return RoundPoint.from_groups(
            /* e1, e2, e3, e4 */
            float4(wedge.e1234) * right_dual.group0, 
            /* e5, 0, 0, 0 */
            float4(-(right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125) - (right_dual.e45 * wedge.e3215), 0.0, 0.0, 0.0)
        );
    }
}
extension VersorEven: AntiRejectViaHorizonFrom<AntiFlector> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: AntiFlector) -> Output {
        DipoleInversion wedge = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(this.e4) * other.group1.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(((other.group1.zxy * this.group3.yzx) - (other.group1.yzx * this.group3.zxy)), other.e5 * this.e4), 
            /* e15, e25, e35, e1234 */
            (this.group3 * float4(other.group1.www, other.e321)) + float4(float3(0.0), -(other.e2 * this.e431) - (other.e3 * this.e412)) - (other.group1.xyzx * float4(this.group2.www, this.e423)), 
            /* e4235, e4315, e4125, e3215 */
            (other.group1.yzxy * float4(this.group1.zxy, this.e315)) + (other.group1.wwwz * float4(this.group0.xyz, this.e125)) + float4(float3(0.0), (other.e5 * this.e321) - (other.e315 * this.e2) - (other.e125 * this.e3) - (other.e321 * this.e5)) + float4((this.group3.www * other.group0.xyz), other.e1 * this.e235) - float4((other.group1.zxy * this.group1.yzx), other.e235 * this.e1)
        );
        Flector right_dual = Flector.from_groups(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(wedge.e1234) * right_dual.group1.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(((wedge.group3.zxy * right_dual.group1.yzx) - (wedge.group3.yzx * right_dual.group1.zxy)), wedge.e1234 * right_dual.e3215), 
            /* e235, e315, e125, e4 */
            float4(float3(0.0), -(wedge.e42 * right_dual.e4315) - (wedge.e43 * right_dual.e4125)) + float4((right_dual.group1.www * wedge.group3.xyz), wedge.e1234 * right_dual.e45) - (right_dual.group1.xyzx * float4(wedge.group3.www, wedge.e41)), 
            /* e1, e2, e3, e5 */
            (float4(right_dual.e3215) * float4(wedge.group0.xyz, wedge.e45)) + (wedge.group2.wwwy * float4(right_dual.group0.xyz, right_dual.e4315)) + (right_dual.group1.zxyx * float4(wedge.group1.yzx, wedge.e15)) + float4(float3(0.0), (wedge.e35 * right_dual.e4125) - (wedge.e4315 * right_dual.e25) - (wedge.e4125 * right_dual.e35) - (wedge.e3215 * right_dual.e45)) - float4((wedge.group1.zxy * right_dual.group1.yzx), wedge.e4235 * right_dual.e15)
        );
    }
}
extension VersorEven: AntiRejectViaHorizonFrom<AntiLine> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: AntiLine) -> Output {
        CircleRotor wedge = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(this.e4) * other.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4((float3(this.e4) * other.group1.xyz), -(other.e23 * this.e1) - (other.e31 * this.e2) - (other.e12 * this.e3)), 
            /* e235, e315, e125, e12345 */
            float4((other.e23 * this.e5) + (other.e35 * this.e2), (other.e31 * this.e5) + (other.e15 * this.e3), (other.e12 * this.e5) + (other.e25 * this.e1), -(other.e31 * this.e425) - (other.e12 * this.e435) - (other.e15 * this.e423) - (other.e25 * this.e431) - (other.e35 * this.e412)) - float4((other.group1.xyz.yzx * this.group3.zxy), other.e23 * this.e415)
        );
        Line right_dual = Line.from_groups(
            /* e415, e425, e435, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e235, e315, e125, 0 */
            float4(other.group1.xyz * float3(-1.0), 0.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(0.0), 
            /* e415, e425, e435, e321 */
            float4(float3(1.0), 0.0) * float4(right_dual.group0.xyz, 0.0) * float4(wedge.group2.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e235, e315, e125, e4 */
            float4((float3(wedge.e12345) * right_dual.group1.xyz), -(wedge.e423 * right_dual.e415) - (wedge.e431 * right_dual.e425) - (wedge.e412 * right_dual.e435)), 
            /* e1, e2, e3, e5 */
            float4((wedge.e412 * right_dual.e315) + (wedge.e321 * right_dual.e415), (wedge.e423 * right_dual.e125) + (wedge.e321 * right_dual.e425), (wedge.e431 * right_dual.e235) + (wedge.e321 * right_dual.e435), -(wedge.e415 * right_dual.e235) - (wedge.e425 * right_dual.e315) - (wedge.e435 * right_dual.e125) - (wedge.e315 * right_dual.e425) - (wedge.e125 * right_dual.e435)) - float4((wedge.group0.xyz.yzx * right_dual.group1.xyz.zxy), wedge.e235 * right_dual.e415)
        );
    }
}
extension VersorEven: AntiRejectViaHorizonFrom<AntiMotor> {
    associatedtype Output = VersorEven;
    func anti_reject_via_horizon_from(other: AntiMotor) -> Output {
        VersorEven wedge = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            (other.group0 * float4(this.group3.www, this.e12345)) + float4(float3(0.0), -(other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435) - (other.e15 * this.e423) - (other.e25 * this.e431) - (other.e35 * this.e412)) + float4((other.group0.www * this.group0.xyz), other.e3215 * this.e4), 
            /* e415, e425, e435, e321 */
            float4(other.e15 * this.e4, other.e25 * this.e4, other.e35 * this.e4, -(other.e23 * this.e1) - (other.e31 * this.e2) - (other.e12 * this.e3)) + (float4(other.scalar) * this.group1), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.scalar) * this.group2.xyz) + (float3(this.e5) * other.group0.xyz) + (other.group1.zxy * this.group3.yzx) - (other.group1.yzx * this.group3.zxy)), other.scalar * this.e5), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * this.group3
        );
        Motor right_dual = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4(right_dual.e12345) * wedge.group0, 
            /* e415, e425, e435, e321 */
            float4(((float3(right_dual.e12345) * wedge.group1.xyz) + (float3(wedge.e12345) * right_dual.group0.xyz)), right_dual.e12345 * wedge.e321), 
            /* e235, e315, e125, e5 */
            (float4(right_dual.e12345) * wedge.group2) + (float4(wedge.e12345) * right_dual.group1) + float4(float3(0.0), -(right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435)), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e12345 * wedge.e1) + (right_dual.e315 * wedge.e412), (right_dual.e12345 * wedge.e2) + (right_dual.e125 * wedge.e423), (right_dual.e12345 * wedge.e3) + (right_dual.e235 * wedge.e431), -(right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412)) + (right_dual.group0 * float4(wedge.group1.www, wedge.e4)) - (wedge.group0.yzxx * float4(right_dual.group1.zxy, right_dual.e415))
        );
    }
}
extension VersorEven: AntiRejectViaHorizonFrom<AntiPlane> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: AntiPlane) -> Output {
        DipoleInversion wedge = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(this.e4) * other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(((other.group0.zxy * this.group3.yzx) - (other.group0.yzx * this.group3.zxy)), other.e5 * this.e4), 
            /* e15, e25, e35, e1234 */
            float4(other.e5 * this.e1, other.e5 * this.e2, other.e5 * this.e3, -(other.e2 * this.e431) - (other.e3 * this.e412)) - (other.group0.xyzx * float4(this.group2.www, this.e423)), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.e3 * this.e425 * -1.0, other.e1 * this.e435 * -1.0, other.e2 * this.e415 * -1.0, (other.e3 * this.e125) + (other.e5 * this.e321)) + (other.group0.yzxx * float4(this.group1.zxy, this.e235)) + (other.group0.wwwy * float4(this.group0.xyz, this.e315))
        );
        Plane right_dual = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(wedge.e1234) * right_dual.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(((wedge.group3.zxy * right_dual.group0.yzx) - (wedge.group3.yzx * right_dual.group0.zxy)), wedge.e1234 * right_dual.e3215), 
            /* e235, e315, e125, e4 */
            float4(wedge.e4235 * right_dual.e3215, wedge.e4315 * right_dual.e3215, wedge.e4125 * right_dual.e3215, -(wedge.e42 * right_dual.e4315) - (wedge.e43 * right_dual.e4125)) - (right_dual.group0.xyzx * float4(wedge.group3.www, wedge.e41)), 
            /* e1, e2, e3, e5 */
            float4(wedge.e12 * right_dual.e4315 * -1.0, wedge.e23 * right_dual.e4125 * -1.0, wedge.e31 * right_dual.e4235 * -1.0, (wedge.e25 * right_dual.e4315) + (wedge.e35 * right_dual.e4125)) + (float4(right_dual.e3215) * float4(wedge.group0.xyz, wedge.e45)) + (right_dual.group0.zxyx * float4(wedge.group1.yzx, wedge.e15))
        );
    }
}
extension VersorEven: AntiRejectViaHorizonFrom<Circle> {
    associatedtype Output = RoundPoint;
    func anti_reject_via_horizon_from(other: Circle) -> Output {
        Sphere wedge = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4((other.e425 * this.e3) + (other.e235 * this.e4), (other.e435 * this.e1) + (other.e315 * this.e4), (other.e415 * this.e2) + (other.e125 * this.e4), -(other.e321 * this.e5) - (other.e125 * this.e3)) - (this.group3.yzxy * float4(other.group1.zxy, other.e315)) - float4((other.group0.xyz * this.group2.www), other.e235 * this.e1), 
            /* e1234, 0, 0, 0 */
            float4((other.e423 * this.e1) + (other.e431 * this.e2) + (other.e412 * this.e3) + (other.e321 * this.e4), 0.0, 0.0, 0.0)
        );
        Dipole right_dual = Dipole.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, 0 */
            float4(other.group2.xyz, 0.0)
        );
        return RoundPoint.from_groups(
            /* e1, e2, e3, e4 */
            float4(-(right_dual.e41 * wedge.e3215) - (right_dual.e31 * wedge.e4125), -(right_dual.e42 * wedge.e3215) - (right_dual.e12 * wedge.e4235), -(right_dual.e43 * wedge.e3215) - (right_dual.e23 * wedge.e4315), (right_dual.e43 * wedge.e4125) + (right_dual.e45 * wedge.e1234)) + (wedge.group0.yzxy * float4(right_dual.group1.zxy, right_dual.e42)) + float4((float3(wedge.e1234) * right_dual.group2.xyz), right_dual.e41 * wedge.e4235), 
            /* e5, 0, 0, 0 */
            float4(-(right_dual.e45 * wedge.e3215) - (right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125), 0.0, 0.0, 0.0)
        );
    }
}
extension VersorEven: AntiRejectViaHorizonFrom<CircleRotor> {
    associatedtype Output = RoundPoint;
    func anti_reject_via_horizon_from(other: CircleRotor) -> Output {
        Sphere wedge = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4((other.e425 * this.e3) + (other.e235 * this.e4), (other.e435 * this.e1) + (other.e315 * this.e4), (other.e415 * this.e2) + (other.e125 * this.e4), -(other.e315 * this.e2) - (other.e125 * this.e3)) - (float4(this.e5) * float4(other.group0.xyz, other.e321)) - (this.group3.yzxx * float4(other.group1.zxy, other.e235)), 
            /* e1234, 0, 0, 0 */
            float4((other.e423 * this.e1) + (other.e431 * this.e2) + (other.e412 * this.e3) + (other.e321 * this.e4), 0.0, 0.0, 0.0)
        );
        AntiCircleRotor right_dual = AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return RoundPoint.from_groups(
            /* e1, e2, e3, e4 */
            float4(-(right_dual.e41 * wedge.e3215) - (right_dual.e31 * wedge.e4125), -(right_dual.e42 * wedge.e3215) - (right_dual.e12 * wedge.e4235), -(right_dual.e43 * wedge.e3215) - (right_dual.e23 * wedge.e4315), (right_dual.e43 * wedge.e4125) + (right_dual.e45 * wedge.e1234)) + (wedge.group0.yzxx * float4(right_dual.group1.zxy, right_dual.e41)) + float4((float3(wedge.e1234) * right_dual.group2.xyz), right_dual.e42 * wedge.e4315), 
            /* e5, 0, 0, 0 */
            float4(-(right_dual.e45 * wedge.e3215) - (right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125), 0.0, 0.0, 0.0)
        );
    }
}
extension VersorEven: AntiRejectViaHorizonFrom<Dipole> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: Dipole) -> Output {
        CircleRotor wedge = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4((float3(this.e4) * other.group1.xyz) + (other.group0.xyz.yzx * this.group3.zxy) - (other.group0.xyz.zxy * this.group3.yzx), 0.0), 
            /* e415, e425, e435, e321 */
            float4((other.e41 * this.e5) + (other.e15 * this.e4), (other.e42 * this.e5) + (other.e25 * this.e4), (other.e43 * this.e5) + (other.e35 * this.e4), -(other.e31 * this.e2) - (other.e12 * this.e3)) - (other.group1.wwwx * this.group3.xyzx), 
            /* e235, e315, e125, e12345 */
            float4((other.e23 * this.e5) + (other.e35 * this.e2), (other.e31 * this.e5) + (other.e15 * this.e3), (other.e12 * this.e5) + (other.e25 * this.e1), -(other.e42 * this.e315) - (other.e43 * this.e125) - (other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435) - (other.e45 * this.e321) - (other.e15 * this.e423) - (other.e25 * this.e431) - (other.e35 * this.e412)) - float4((other.group2.xyz.yzx * this.group3.zxy), other.e41 * this.e235)
        );
        Circle right_dual = Circle.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, 0 */
            float4(other.group2.xyz * float3(-1.0), 0.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(wedge.e12345) * right_dual.group1, 
            /* e235, e315, e125, e4 */
            float4((float3(wedge.e12345) * right_dual.group2.xyz), -(right_dual.e423 * wedge.e415) - (right_dual.e431 * wedge.e425) - (right_dual.e412 * wedge.e435) - (right_dual.e415 * wedge.e423) - (right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412)), 
            /* e1, e2, e3, e5 */
            float4((right_dual.e412 * wedge.e315) + (right_dual.e415 * wedge.e321) + (right_dual.e321 * wedge.e415) + (right_dual.e315 * wedge.e412), (right_dual.e423 * wedge.e125) + (right_dual.e425 * wedge.e321) + (right_dual.e321 * wedge.e425) + (right_dual.e125 * wedge.e423), (right_dual.e431 * wedge.e235) + (right_dual.e435 * wedge.e321) + (right_dual.e321 * wedge.e435) + (right_dual.e235 * wedge.e431), -(right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e125 * wedge.e435)) - float4((right_dual.group0.xyz.yzx * wedge.group2.zxy), right_dual.e235 * wedge.e415) - float4((right_dual.group2.xyz.zxy * wedge.group0.xyz.yzx), right_dual.e315 * wedge.e425)
        );
    }
}
extension VersorEven: AntiRejectViaHorizonFrom<DipoleInversion> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: DipoleInversion) -> Output {
        CircleRotor wedge = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4((float3(this.e4) * other.group1.xyz) + (other.group0.xyz.yzx * this.group3.zxy) - (other.group0.xyz.zxy * this.group3.yzx), 0.0), 
            /* e415, e425, e435, e321 */
            float4((other.e41 * this.e5) + (other.e15 * this.e4), (other.e42 * this.e5) + (other.e25 * this.e4), (other.e43 * this.e5) + (other.e35 * this.e4), -(other.e31 * this.e2) - (other.e12 * this.e3)) - (other.group1.wwwx * this.group3.xyzx), 
            /* e235, e315, e125, e12345 */
            (float4(this.e5) * float4(other.group1.xyz, other.e1234)) + (this.group3.yzxx * float4(other.group2.zxy, other.e4235)) + float4(float3(0.0), (other.e4315 * this.e2) + (other.e4125 * this.e3) + (other.e3215 * this.e4) - (other.e42 * this.e315) - (other.e43 * this.e125) - (other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435) - (other.e45 * this.e321) - (other.e15 * this.e423) - (other.e25 * this.e431) - (other.e35 * this.e412)) - float4((other.group2.yzx * this.group3.zxy), other.e41 * this.e235)
        );
        AntiDipoleInversion right_dual = AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(wedge.e12345) * right_dual.group1, 
            /* e235, e315, e125, e4 */
            float4((float3(wedge.e12345) * right_dual.group2.xyz), (right_dual.e4 * wedge.e12345) - (right_dual.e423 * wedge.e415) - (right_dual.e431 * wedge.e425) - (right_dual.e412 * wedge.e435) - (right_dual.e415 * wedge.e423) - (right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412)), 
            /* e1, e2, e3, e5 */
            float4((right_dual.e415 * wedge.e321) + (right_dual.e321 * wedge.e415) + (right_dual.e315 * wedge.e412) + (right_dual.e1 * wedge.e12345), (right_dual.e425 * wedge.e321) + (right_dual.e321 * wedge.e425) + (right_dual.e125 * wedge.e423) + (right_dual.e2 * wedge.e12345), (right_dual.e435 * wedge.e321) + (right_dual.e321 * wedge.e435) + (right_dual.e235 * wedge.e431) + (right_dual.e3 * wedge.e12345), -(right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435)) + (wedge.group2.yzxw * float4(right_dual.group0.xyz.zxy, right_dual.e5)) - (wedge.group2.zxyx * float4(right_dual.group0.xyz.yzx, right_dual.e415)) - float4((wedge.group0.xyz.yzx * right_dual.group2.zxy), right_dual.e425 * wedge.e315)
        );
    }
}
extension VersorEven: AntiRejectViaHorizonFrom<DualNum> {
    associatedtype Output = AntiFlector;
    func anti_reject_via_horizon_from(other: DualNum) -> Output {
        Flector wedge = Flector.from_groups(
            /* e15, e25, e35, e45 */
            float4(other.e5) * this.group3, 
            /* e4235, e4315, e4125, e3215 */
            float4(other.e5) * float4(this.group0.xyz, this.e321)
        );
        AntiDualNum right_dual = AntiDualNum.from_groups(
            /* e3215, scalar, 0, 0 */
            float4(other.group0.xy * float2(-1.0), 0.0, 0.0)
        );
        return AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            float4(right_dual.group0.xy.xx, right_dual.e3215, 0.0) * float4(float3(1.0), 0.0) * float4(wedge.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e1, e2, e3, e5 */
            float4(float3(0.0), right_dual.e3215 * wedge.e45)
        );
    }
}
extension VersorEven: AntiRejectViaHorizonFrom<FlatPoint> {
    associatedtype Output = AntiFlector;
    func anti_reject_via_horizon_from(other: FlatPoint) -> Output {
        Motor wedge = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4(other.e15 * this.e4, other.e25 * this.e4, other.e35 * this.e4, -(other.e25 * this.e431) - (other.e35 * this.e412) - (other.e45 * this.e321)) - (other.group0.wwwx * float4(this.group3.xyz, this.e423)), 
            /* e235, e315, e125, e5 */
            float4(((other.group0.zxy * this.group3.yzx) - (other.group0.yzx * this.group3.zxy)), 0.0)
        );
        AntiFlatPoint right_dual = AntiFlatPoint.from_groups(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            float4(wedge.e12345) * right_dual.group0, 
            /* e1, e2, e3, e5 */
            float4((right_dual.group0.www * wedge.group0.xyz), -(right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435))
        );
    }
}
extension VersorEven: AntiRejectViaHorizonFrom<Flector> {
    associatedtype Output = AntiFlector;
    func anti_reject_via_horizon_from(other: Flector) -> Output {
        Motor wedge = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            (this.group3.wwwx * float4(other.group0.xyz, other.e4235)) + float4(float3(0.0), (other.e4315 * this.e2) + (other.e4125 * this.e3) + (other.e3215 * this.e4) - (other.e25 * this.e431) - (other.e35 * this.e412) - (other.e45 * this.e321)) - (other.group0.wwwx * float4(this.group3.xyz, this.e423)), 
            /* e235, e315, e125, e5 */
            float4(((other.group0.zxy * this.group3.yzx) - (other.group0.yzx * this.group3.zxy)), 0.0)
        );
        AntiFlector right_dual = AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            float4(wedge.e12345) * right_dual.group0, 
            /* e1, e2, e3, e5 */
            float4(right_dual.e1 * wedge.e12345, right_dual.e2 * wedge.e12345, right_dual.e3 * wedge.e12345, -(right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435)) + (wedge.group0 * float4(right_dual.group0.www, right_dual.e5))
        );
    }
}
extension VersorEven: AntiRejectViaHorizonFrom<Line> {
    associatedtype Output = AntiPlane;
    func anti_reject_via_horizon_from(other: Line) -> Output {
        Plane wedge = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4((other.e425 * this.e3) + (other.e235 * this.e4), (other.e435 * this.e1) + (other.e315 * this.e4), (other.e415 * this.e2) + (other.e125 * this.e4), -(other.e315 * this.e2) - (other.e125 * this.e3)) - (this.group3.yzxx * float4(other.group0.xyz.zxy, other.e235))
        );
        AntiLine right_dual = AntiLine.from_groups(
            /* e23, e31, e12, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e15, e25, e35, 0 */
            float4(other.group1.xyz, 0.0)
        );
        return AntiPlane.from_groups(
            /* e1, e2, e3, e5 */
            float4(right_dual.e12 * wedge.e4315, right_dual.e23 * wedge.e4125, right_dual.e31 * wedge.e4235, -(right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125)) - (wedge.group0.zxyx * float4(right_dual.group0.xyz.yzx, right_dual.e15))
        );
    }
}
extension VersorEven: AntiRejectViaHorizonFrom<Motor> {
    associatedtype Output = AntiFlector;
    func anti_reject_via_horizon_from(other: Motor) -> Output {
        Flector wedge = Flector.from_groups(
            /* e15, e25, e35, e45 */
            float4(other.e5) * this.group3, 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e235 * this.e4) + (other.e5 * this.e423), (other.e315 * this.e4) + (other.e5 * this.e431), (other.e125 * this.e4) + (other.e5 * this.e412), -(other.e315 * this.e2) - (other.e125 * this.e3)) + float4((other.group0.yzx * this.group3.zxy), other.e5 * this.e321) - (this.group3.yzxx * float4(other.group0.zxy, other.e235))
        );
        AntiMotor right_dual = AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            float4(float3(1.0), 0.0) * float4(right_dual.group1.www, 0.0) * float4(wedge.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e1, e2, e3, e5 */
            float4(float3(0.0), -(right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125)) + float4((right_dual.group0.zxy * wedge.group1.yzx), right_dual.e3215 * wedge.e45) - (wedge.group1.zxyx * float4(right_dual.group0.yzx, right_dual.e15))
        );
    }
}
extension VersorEven: AntiRejectViaHorizonFrom<MultiVector> {
    associatedtype Output = MultiVector;
    func anti_reject_via_horizon_from(other: MultiVector) -> Output {
        MultiVector wedge = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(0.0, (other.scalar * this.e12345) + (other.e4235 * this.e1) + (other.e4315 * this.e2) + (other.e4125 * this.e3) + (other.e3215 * this.e4) + (other.e1234 * this.e5) - (other.e15 * this.e423) - (other.e25 * this.e431) - (other.e35 * this.e412) - (other.e45 * this.e321) - (other.e41 * this.e235) - (other.e42 * this.e315) - (other.e43 * this.e125) - (other.e23 * this.e415) - (other.e31 * this.e425) - (other.e12 * this.e435)), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * this.group3, 
            /* e5, 0, 0, 0 */
            float4(other.scalar * this.e5, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            (float4(other.e5) * this.group3) - (float4(this.e5) * other.group1), 
            /* e41, e42, e43, 0 */
            float4((float3(this.e4) * other.group1.xyz) - (float3(other.e4) * this.group3.xyz), 0.0), 
            /* e23, e31, e12, 0 */
            float4((other.group1.zxy * this.group3.yzx) - (other.group1.yzx * this.group3.zxy), 0.0), 
            /* e415, e425, e435, e321 */
            float4((other.e15 * this.e4) + (other.e41 * this.e5), (other.e25 * this.e4) + (other.e42 * this.e5), (other.e35 * this.e4) + (other.e43 * this.e5), -(other.e31 * this.e2) - (other.e12 * this.e3)) + (float4(other.scalar) * this.group1) - (this.group3.xyzx * float4(other.group3.www, other.e23)), 
            /* e423, e431, e412, 0 */
            float4((float3(other.scalar) * this.group0.xyz) + (float3(this.e4) * other.group5.xyz) + (other.group4.xyz.yzx * this.group3.zxy) - (other.group4.xyz.zxy * this.group3.yzx), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(other.scalar) * this.group2.xyz) + (float3(this.e5) * other.group5.xyz) + (other.group3.zxy * this.group3.yzx) - (other.group3.yzx * this.group3.zxy), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            (float4(other.e5) * float4(this.group0.xyz, this.e321)) + (other.group1.yzxy * float4(this.group1.zxy, this.e315)) + float4((other.group8.xyz * this.group3.www), other.e1 * this.e235) + float4((other.group6.yzx * this.group3.zxy), other.e3 * this.e125) - (other.group6.zxyw * float4(this.group3.yzx, this.e5)) - float4((other.group7.xyz * this.group2.www), other.e235 * this.e1) - float4((other.group1.zxy * this.group1.yzx), other.e315 * this.e2) - float4((other.group1.www * this.group2.xyz), other.e125 * this.e3), 
            /* e1234, 0, 0, 0 */
            float4((other.e321 * this.e4) + (other.e423 * this.e1) + (other.e431 * this.e2) + (other.e412 * this.e3) - (other.e1 * this.e423) - (other.e2 * this.e431) - (other.e3 * this.e412) - (other.e4 * this.e321), 0.0, 0.0, 0.0)
        );
        MultiVector right_dual = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(other.group0.xy.yx * float2(-1.0, 1.0), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5, 0, 0, 0 */
            float4(other.e3215, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43, 0 */
            float4(other.group7.xyz, 0.0), 
            /* e23, e31, e12, 0 */
            float4(other.group6.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412, 0 */
            float4(other.group4.xyz * float3(-1.0), 0.0), 
            /* e235, e315, e125, 0 */
            float4(other.group3.xyz * float3(-1.0), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        return MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2((right_dual.scalar * wedge.e12345) + (right_dual.e12345 * wedge.scalar) + (right_dual.e1 * wedge.e4235) + (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) + (right_dual.e4 * wedge.e3215) + (right_dual.e5 * wedge.e1234) + (right_dual.e4235 * wedge.e1) + (right_dual.e4315 * wedge.e2) + (right_dual.e4125 * wedge.e3) + (right_dual.e3215 * wedge.e4) + (right_dual.e1234 * wedge.e5) - (right_dual.e15 * wedge.e423) - (right_dual.e25 * wedge.e431) - (right_dual.e35 * wedge.e412) - (right_dual.e45 * wedge.e321) - (right_dual.e41 * wedge.e235) - (right_dual.e42 * wedge.e315) - (right_dual.e43 * wedge.e125) - (right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e321 * wedge.e45) - (right_dual.e423 * wedge.e15) - (right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43), right_dual.e12345 * wedge.e12345), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e15 * wedge.e1234) + (right_dual.e415 * wedge.e321) + (right_dual.e321 * wedge.e415) + (right_dual.e4125 * wedge.e31), (right_dual.e25 * wedge.e1234) + (right_dual.e425 * wedge.e321) + (right_dual.e321 * wedge.e425) + (right_dual.e4235 * wedge.e12), (right_dual.e35 * wedge.e1234) + (right_dual.e435 * wedge.e321) + (right_dual.e321 * wedge.e435) + (right_dual.e4315 * wedge.e23), -(right_dual.e415 * wedge.e423) - (right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412) - (right_dual.e1234 * wedge.e45)) + (float4(right_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_dual.group1) + (wedge.group9.yzxx * float4(right_dual.group5.xyz.zxy, right_dual.e41)) + float4((wedge.group4.xyz * right_dual.group9.www), right_dual.e45 * wedge.e1234) + float4((right_dual.group7.xyz.zxy * wedge.group8.xyz.yzx), right_dual.e42 * wedge.e4315) + float4((right_dual.group8.xyz.yzx * wedge.group7.xyz.zxy), right_dual.e43 * wedge.e4125) - (right_dual.group9.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((float3(right_dual.e1234) * wedge.group3.xyz), right_dual.e4125 * wedge.e43) - float4((right_dual.group4.xyz * wedge.group9.www), right_dual.e423 * wedge.e415) - float4((right_dual.group5.xyz.yzx * wedge.group9.zxy), right_dual.e431 * wedge.e425) - float4((right_dual.group7.xyz.yzx * wedge.group8.xyz.zxy), right_dual.e412 * wedge.e435) - float4((right_dual.group8.xyz.zxy * wedge.group7.xyz.yzx), right_dual.e4235 * wedge.e41), 
            /* e5, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e5) + (right_dual.e5 * wedge.e12345) + (right_dual.e4235 * wedge.e15) + (right_dual.e4315 * wedge.e25) + (right_dual.e4125 * wedge.e35) + (right_dual.e3215 * wedge.e45) - (right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125) - (right_dual.e45 * wedge.e3215) - (right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435), 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4((right_dual.e415 * wedge.e3215) + (right_dual.e315 * wedge.e4125) + (right_dual.e4125 * wedge.e315) + (right_dual.e3215 * wedge.e415), (right_dual.e425 * wedge.e3215) + (right_dual.e125 * wedge.e4235) + (right_dual.e4235 * wedge.e125) + (right_dual.e3215 * wedge.e425), (right_dual.e435 * wedge.e3215) + (right_dual.e235 * wedge.e4315) + (right_dual.e4315 * wedge.e235) + (right_dual.e3215 * wedge.e435), -(right_dual.e435 * wedge.e4125) - (right_dual.e4235 * wedge.e415) - (right_dual.e4315 * wedge.e425) - (right_dual.e4125 * wedge.e435)) + (float4(right_dual.e12345) * wedge.group3) + (float4(wedge.e12345) * right_dual.group3) - (wedge.group9.yzxx * float4(right_dual.group8.xyz.zxy, right_dual.e415)) - float4((wedge.group8.xyz.zxy * right_dual.group9.yzx), right_dual.e425 * wedge.e4315), 
            /* e41, e42, e43, 0 */
            float4((float3(right_dual.e12345) * wedge.group4.xyz) + (float3(right_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_dual.group4.xyz) + (float3(wedge.e1234) * right_dual.group6.xyz) + (right_dual.group7.xyz.zxy * wedge.group9.yzx) + (wedge.group7.xyz.zxy * right_dual.group9.yzx) - (right_dual.group7.xyz.yzx * wedge.group9.zxy) - (wedge.group7.xyz.yzx * right_dual.group9.zxy), 0.0), 
            /* e23, e31, e12, 0 */
            float4((float3(right_dual.e12345) * wedge.group5.xyz) + (float3(right_dual.e3215) * wedge.group7.xyz) + (float3(right_dual.e1234) * wedge.group8.xyz) + (float3(wedge.e12345) * right_dual.group5.xyz) + (float3(wedge.e3215) * right_dual.group7.xyz) + (float3(wedge.e1234) * right_dual.group8.xyz) - (float3(right_dual.e321) * wedge.group9.xyz) - (float3(wedge.e321) * right_dual.group9.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            (float4(right_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_dual.group6) + (right_dual.group9.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - float4((right_dual.group9.zxy * wedge.group9.yzx), right_dual.e1234 * wedge.e3215), 
            /* e423, e431, e412, 0 */
            float4((float3(right_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_dual.group7.xyz) + (float3(wedge.e1234) * right_dual.group9.xyz) - (float3(right_dual.e1234) * wedge.group9.xyz), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(right_dual.e12345) * wedge.group8.xyz) + (float3(right_dual.e3215) * wedge.group9.xyz) + (float3(wedge.e12345) * right_dual.group8.xyz) - (float3(wedge.e3215) * right_dual.group9.xyz), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            (float4(right_dual.e12345) * wedge.group9) + (float4(wedge.e12345) * right_dual.group9), 
            /* e1234, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e1234) + (right_dual.e1234 * wedge.e12345), 0.0, 0.0, 0.0)
        );
    }
}
extension VersorEven: AntiRejectViaHorizonFrom<Plane> {
    associatedtype Output = AntiPlane;
    func anti_reject_via_horizon_from(other: Plane) -> Output {
        return AntiPlane.from_groups(
            /* e1, e2, e3, e5 */
            float4((other.e4235 * this.e1) + (other.e4315 * this.e2) + (other.e4125 * this.e3) + (other.e3215 * this.e4)) * float4(other.e4235 * -1.0, other.e4315 * -1.0, other.e4125 * -1.0, other.e3215)
        );
    }
}
extension VersorEven: AntiRejectViaHorizonFrom<RoundPoint> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: RoundPoint) -> Output {
        DipoleInversion wedge = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4((float3(this.e4) * other.group0.xyz) - (float3(other.e4) * this.group3.xyz), 0.0), 
            /* e23, e31, e12, e45 */
            float4((other.group0.zxy * this.group3.yzx), other.e5 * this.e4) - (other.group0.yzxw * float4(this.group3.zxy, this.e5)), 
            /* e15, e25, e35, e1234 */
            float4(other.e5 * this.e1, other.e5 * this.e2, other.e5 * this.e3, -(other.e2 * this.e431) - (other.e3 * this.e412) - (other.e4 * this.e321)) - (other.group0.xyzx * float4(this.group2.www, this.e423)), 
            /* e4235, e4315, e4125, e3215 */
            float4(-(other.e3 * this.e425) - (other.e4 * this.e235), -(other.e1 * this.e435) - (other.e4 * this.e315), -(other.e2 * this.e415) - (other.e4 * this.e125), (other.e3 * this.e125) + (other.e5 * this.e321)) + (other.group0.yzxx * float4(this.group1.zxy, this.e235)) + float4((float3(other.e5) * this.group0.xyz), other.e2 * this.e315)
        );
        Sphere right_dual = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4((float3(wedge.e1234) * right_dual.group0.xyz) - (float3(right_dual.e1234) * wedge.group3.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            (right_dual.group0.yzxw * float4(wedge.group3.zxy, wedge.e1234)) - (wedge.group3.yzxw * float4(right_dual.group0.zxy, right_dual.e1234)), 
            /* e235, e315, e125, e4 */
            float4(wedge.e4235 * right_dual.e3215, wedge.e4315 * right_dual.e3215, wedge.e4125 * right_dual.e3215, -(wedge.e42 * right_dual.e4315) - (wedge.e43 * right_dual.e4125) - (wedge.e45 * right_dual.e1234)) - (right_dual.group0.xyzx * float4(wedge.group3.www, wedge.e41)), 
            /* e1, e2, e3, e5 */
            float4(-(wedge.e12 * right_dual.e4315) - (wedge.e15 * right_dual.e1234), -(wedge.e23 * right_dual.e4125) - (wedge.e25 * right_dual.e1234), -(wedge.e31 * right_dual.e4235) - (wedge.e35 * right_dual.e1234), (wedge.e25 * right_dual.e4315) + (wedge.e35 * right_dual.e4125)) + (float4(right_dual.e3215) * float4(wedge.group0.xyz, wedge.e45)) + (right_dual.group0.zxyx * float4(wedge.group1.yzx, wedge.e15))
        );
    }
}
extension VersorEven: AntiRejectViaHorizonFrom<Scalar> {
    associatedtype Output = VersorEven;
    func anti_reject_via_horizon_from(other: Scalar) -> Output {
        VersorEven wedge = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4(other.scalar) * this.group0, 
            /* e415, e425, e435, e321 */
            float4(other.scalar) * this.group1, 
            /* e235, e315, e125, e5 */
            float4(other.scalar) * this.group2, 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * this.group3
        );
        AntiScalar right_dual = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(other.scalar, 0.0, 0.0, 0.0)
        );
        return VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4(right_dual.e12345) * wedge.group0, 
            /* e415, e425, e435, e321 */
            float4(right_dual.e12345) * wedge.group1, 
            /* e235, e315, e125, e5 */
            float4(right_dual.e12345) * wedge.group2, 
            /* e1, e2, e3, e4 */
            float4(right_dual.e12345) * wedge.group3
        );
    }
}
extension VersorEven: AntiRejectViaHorizonFrom<Sphere> {
    associatedtype Output = RoundPoint;
    func anti_reject_via_horizon_from(other: Sphere) -> Output {
        AntiScalar wedge = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4((other.e4235 * this.e1) + (other.e4315 * this.e2) + (other.e4125 * this.e3) + (other.e3215 * this.e4) + (other.e1234 * this.e5), 0.0, 0.0, 0.0)
        );
        RoundPoint right_dual = RoundPoint.from_groups(
            /* e1, e2, e3, e4 */
            float4(other.group0.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5, 0, 0, 0 */
            float4(other.e3215, 0.0, 0.0, 0.0)
        );
        return RoundPoint.from_groups(
            /* e1, e2, e3, e4 */
            float4(wedge.e12345) * right_dual.group0, 
            /* e5, 0, 0, 0 */
            float4(wedge.e12345 * right_dual.e5, 0.0, 0.0, 0.0)
        );
    }
}
extension VersorEven: AntiRejectViaHorizonFrom<VersorEven> {
    associatedtype Output = AntiDipoleInversion;
    func anti_reject_via_horizon_from(other: VersorEven) -> Output {
        DipoleInversion wedge = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4((float3(this.e4) * other.group3.xyz) - (float3(other.e4) * this.group3.xyz), 0.0), 
            /* e23, e31, e12, e45 */
            (this.group3.yzxw * float4(other.group3.zxy, other.e5)) - (other.group3.yzxw * float4(this.group3.zxy, this.e5)), 
            /* e15, e25, e35, e1234 */
            (this.group3.xyzx * float4(other.group2.www, other.e423)) + float4(float3(0.0), (other.e431 * this.e2) + (other.e412 * this.e3) + (other.e321 * this.e4) - (other.e2 * this.e431) - (other.e3 * this.e412) - (other.e4 * this.e321)) - (other.group3.xyzx * float4(this.group2.www, this.e423)), 
            /* e4235, e4315, e4125, e3215 */
            (other.group3.yzxz * float4(this.group1.zxy, this.e125)) + float4((other.group1.yzx * this.group3.zxy), other.e5 * this.e321) + float4((other.group2.www * this.group0.xyz), other.e2 * this.e315) + float4((this.group3.www * other.group2.xyz), other.e1 * this.e235) - (float4(this.e5) * float4(other.group0.xyz, other.e321)) - (this.group3.yzxx * float4(other.group1.zxy, other.e235)) - float4((other.group3.zxy * this.group1.yzx), other.e315 * this.e2) - float4((other.group3.www * this.group2.xyz), other.e125 * this.e3)
        );
        VersorOdd right_dual = VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4((float3(wedge.e1234) * right_dual.group3.xyz) - (float3(right_dual.e1234) * wedge.group3.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            (right_dual.group3.yzxw * float4(wedge.group3.zxy, wedge.e1234)) - (wedge.group3.yzxw * float4(right_dual.group3.zxy, right_dual.e1234)), 
            /* e235, e315, e125, e4 */
            float4(float3(0.0), (wedge.e4235 * right_dual.e41) + (wedge.e4315 * right_dual.e42) + (wedge.e4125 * right_dual.e43) - (wedge.e42 * right_dual.e4315) - (wedge.e43 * right_dual.e4125) - (wedge.e45 * right_dual.e1234)) + float4((right_dual.group3.www * wedge.group3.xyz), wedge.e1234 * right_dual.e45) - (right_dual.group3.xyzx * float4(wedge.group3.www, wedge.e41)), 
            /* e1, e2, e3, e5 */
            (float4(right_dual.e3215) * float4(wedge.group0.xyz, wedge.e45)) + (wedge.group2.wwwy * float4(right_dual.group2.xyz, right_dual.e4315)) + (right_dual.group3.zxyx * float4(wedge.group1.yzx, wedge.e15)) + float4((wedge.group3.yzx * right_dual.group1.zxy), wedge.e35 * right_dual.e4125) - (float4(wedge.e3215) * float4(right_dual.group0.xyz, right_dual.e45)) - (wedge.group3.zxyz * float4(right_dual.group1.yzx, right_dual.e35)) - (right_dual.group2.wwwy * float4(wedge.group2.xyz, wedge.e4315)) - float4((wedge.group1.zxy * right_dual.group3.yzx), wedge.e4235 * right_dual.e15)
        );
    }
}
extension VersorEven: AntiRejectViaHorizonFrom<VersorOdd> {
    associatedtype Output = VersorEven;
    func anti_reject_via_horizon_from(other: VersorOdd) -> Output {
        VersorEven wedge = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            (float4(other.scalar) * this.group0) + (this.group3.wwwx * float4(other.group1.xyz, other.e4235)) + float4(float3(0.0), (this.e2 * other.e4315) + (this.e3 * other.e4125) + (this.e4 * other.e3215) - (this.e431 * other.e25) - (this.e412 * other.e35) - (this.e415 * other.e23) - (this.e425 * other.e31) - (this.e435 * other.e12) - (this.e321 * other.e45) - (this.e235 * other.e41) - (this.e315 * other.e42) - (this.e125 * other.e43)) + float4((this.group3.zxy * other.group0.yzx), this.e5 * other.e1234) - float4((this.group3.yzx * other.group0.zxy), this.e423 * other.e15), 
            /* e415, e425, e435, e321 */
            float4((this.e5 * other.e41) + (this.e4 * other.e15), (this.e5 * other.e42) + (this.e4 * other.e25), (this.e5 * other.e43) + (this.e4 * other.e35), -(this.e2 * other.e31) - (this.e3 * other.e12)) + (float4(other.scalar) * this.group1) - (this.group3.xyzx * other.group1.wwwx), 
            /* e235, e315, e125, e5 */
            float4(((float3(this.e5) * other.group1.xyz) + (float3(other.scalar) * this.group2.xyz) + (this.group3.yzx * other.group2.zxy) - (this.group3.zxy * other.group2.yzx)), this.e5 * other.scalar), 
            /* e1, e2, e3, e4 */
            float4(other.scalar) * this.group3
        );
        VersorEven right_dual = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4(((float3(right_dual.e12345) * wedge.group0.xyz) + (float3(wedge.e12345) * right_dual.group0.xyz)), right_dual.e12345 * wedge.e12345), 
            /* e415, e425, e435, e321 */
            (float4(right_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_dual.group1), 
            /* e235, e315, e125, e5 */
            (float4(right_dual.e12345) * wedge.group2) + (float4(wedge.e12345) * right_dual.group2) + float4(float3(0.0), -(right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435)), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e415 * wedge.e321) + (right_dual.e321 * wedge.e415) + (right_dual.e315 * wedge.e412) + (right_dual.e1 * wedge.e12345), (right_dual.e425 * wedge.e321) + (right_dual.e321 * wedge.e425) + (right_dual.e125 * wedge.e423) + (right_dual.e2 * wedge.e12345), (right_dual.e435 * wedge.e321) + (right_dual.e321 * wedge.e435) + (right_dual.e235 * wedge.e431) + (right_dual.e3 * wedge.e12345), -(right_dual.e412 * wedge.e435) - (right_dual.e415 * wedge.e423) - (right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412)) + (right_dual.group0.zxyw * float4(wedge.group2.yzx, wedge.e4)) + float4((right_dual.group0.www * wedge.group3.xyz), right_dual.e4 * wedge.e12345) - (right_dual.group0.yzxx * float4(wedge.group2.zxy, wedge.e415)) - float4((right_dual.group2.zxy * wedge.group0.yzx), right_dual.e431 * wedge.e425)
        );
    }
}
extension VersorOdd {
    // Fancy infix trick
    func operator/(_rhs: AntiRejectViaHorizonFromInfix) -> AntiRejectViaHorizonFromInfixPartial<VersorOdd> {
        return AntiRejectViaHorizonFromInfixPartial { a: this };
    }
}
extension VersorOdd: AntiRejectViaHorizonFrom<AntiCircleRotor> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: AntiCircleRotor) -> Output {
        VersorOdd wedge = VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            float4(((float3(other.scalar) * this.group0.xyz) + (float3(this.scalar) * other.group0.xyz)), other.scalar * this.scalar), 
            /* e23, e31, e12, e45 */
            (float4(other.scalar) * this.group1) + (float4(this.scalar) * other.group1), 
            /* e15, e25, e35, e1234 */
            float4(other.scalar * this.e15, other.scalar * this.e25, other.scalar * this.e35, -(other.e41 * this.e23) - (other.e42 * this.e31) - (other.e43 * this.e12) - (other.e23 * this.e41) - (other.e31 * this.e42) - (other.e12 * this.e43)) + (other.group2 * float4(this.group0.www, this.e1234)), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e23 * this.e45) + (other.e45 * this.e23) + (other.e35 * this.e42) + (other.scalar * this.e4235), (other.e31 * this.e45) + (other.e45 * this.e31) + (other.e15 * this.e43) + (other.scalar * this.e4315), (other.e12 * this.e45) + (other.e45 * this.e12) + (other.e25 * this.e41) + (other.scalar * this.e4125), -(other.e12 * this.e35) - (other.e15 * this.e23) - (other.e25 * this.e31) - (other.e35 * this.e12)) + float4((other.group0.xyz.yzx * this.group2.zxy), other.scalar * this.e3215) - (this.group2.yzxx * float4(other.group0.xyz.zxy, other.e23)) - float4((other.group2.yzx * this.group0.zxy), other.e31 * this.e25)
        );
        CircleRotor right_dual = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e12345 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            float4((right_dual.e415 * wedge.e1234) + (right_dual.e12345 * wedge.e41), (right_dual.e425 * wedge.e1234) + (right_dual.e12345 * wedge.e42), (right_dual.e435 * wedge.e1234) + (right_dual.e12345 * wedge.e43), -(right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e321 * wedge.e45) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43)) + float4((right_dual.group0.xyz.zxy * wedge.group3.yzx), right_dual.e12345 * wedge.scalar) - float4((right_dual.group0.xyz.yzx * wedge.group3.zxy), right_dual.e423 * wedge.e15), 
            /* e23, e31, e12, e45 */
            float4((right_dual.e235 * wedge.e1234) + (right_dual.e12345 * wedge.e23), (right_dual.e315 * wedge.e1234) + (right_dual.e12345 * wedge.e31), (right_dual.e125 * wedge.e1234) + (right_dual.e12345 * wedge.e12), -(right_dual.e425 * wedge.e4315) - (right_dual.e435 * wedge.e4125)) + float4((right_dual.group0.xyz * wedge.group3.www), right_dual.e12345 * wedge.e45) - (right_dual.group1.wwwx * wedge.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_dual.e12345) * wedge.group2.xyz) + (float3(wedge.e3215) * right_dual.group1.xyz) + (right_dual.group2.yzx * wedge.group3.zxy) - (right_dual.group2.zxy * wedge.group3.yzx)), right_dual.e12345 * wedge.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * wedge.group3
        );
    }
}
extension VersorOdd: AntiRejectViaHorizonFrom<AntiDipoleInversion> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: AntiDipoleInversion) -> Output {
        VersorEven wedge = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            (other.group3.zxyy * float4(this.group0.yzx, this.e4315)) + float4(float3(0.0), (other.e3 * this.e4125) + (other.e5 * this.e1234) - (other.e431 * this.e25) - (other.e412 * this.e35) - (other.e415 * this.e23) - (other.e425 * this.e31) - (other.e435 * this.e12) - (other.e321 * this.e45) - (other.e235 * this.e41) - (other.e315 * this.e42) - (other.e125 * this.e43)) + float4((other.group0.xyz * this.group0.www), other.e4 * this.e3215) + float4((other.group2.www * this.group1.xyz), other.e1 * this.e4235) - float4((other.group3.yzx * this.group0.zxy), other.e423 * this.e15), 
            /* e415, e425, e435, e321 */
            float4((other.e4 * this.e15) + (other.e5 * this.e41), (other.e4 * this.e25) + (other.e5 * this.e42), (other.e4 * this.e35) + (other.e5 * this.e43), -(other.e2 * this.e31) - (other.e3 * this.e12)) + (float4(this.scalar) * other.group1) - (other.group3.xyzx * this.group1.wwwx), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.e5) * this.group1.xyz) + (float3(this.scalar) * other.group2.xyz) + (other.group3.yzx * this.group2.zxy) - (other.group3.zxy * this.group2.yzx)), other.e5 * this.scalar), 
            /* e1, e2, e3, e4 */
            float4(this.scalar) * float4(other.group3.xyz, other.e4)
        );
        DipoleInversion right_dual = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group3 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            (right_dual.group3.yzxy * float4(wedge.group0.zxy, wedge.e2)) + float4(float3(0.0), (right_dual.e4125 * wedge.e3) + (right_dual.e3215 * wedge.e4) - (right_dual.e42 * wedge.e315) - (right_dual.e43 * wedge.e125) - (right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435) - (right_dual.e45 * wedge.e321) - (right_dual.e15 * wedge.e423) - (right_dual.e25 * wedge.e431) - (right_dual.e35 * wedge.e412)) + float4((right_dual.group0.xyz * wedge.group0.www), right_dual.e1234 * wedge.e5) + float4((right_dual.group2.www * wedge.group1.xyz), right_dual.e4235 * wedge.e1) - float4((right_dual.group3.zxy * wedge.group0.yzx), right_dual.e41 * wedge.e235), 
            /* e23, e31, e12, e45 */
            float4((right_dual.e1234 * wedge.e235) + (right_dual.e3215 * wedge.e423), (right_dual.e1234 * wedge.e315) + (right_dual.e3215 * wedge.e431), (right_dual.e1234 * wedge.e125) + (right_dual.e3215 * wedge.e412), -(right_dual.e4315 * wedge.e425) - (right_dual.e4125 * wedge.e435)) + (float4(wedge.e12345) * right_dual.group1) - (right_dual.group3.xyzx * wedge.group1.wwwx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_dual.e3215) * wedge.group1.xyz) + (float3(wedge.e12345) * right_dual.group2.xyz) + (right_dual.group3.zxy * wedge.group2.yzx) - (right_dual.group3.yzx * wedge.group2.zxy)), right_dual.e1234 * wedge.e12345), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_dual.group3
        );
    }
}
extension VersorOdd: AntiRejectViaHorizonFrom<AntiDualNum> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: AntiDualNum) -> Output {
        VersorOdd wedge = VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            float4(other.scalar) * this.group0, 
            /* e23, e31, e12, e45 */
            float4(other.scalar) * this.group1, 
            /* e15, e25, e35, e1234 */
            float4(other.scalar) * this.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xy.yy, other.scalar, (other.e3215 * this.scalar) + (other.scalar * this.e3215)) * float4(this.group3.xyz, 1.0)
        );
        DualNum right_dual = DualNum.from_groups(
            /* e5, e12345, 0, 0 */
            float4(other.group0.xy, 0.0, 0.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            float4(right_dual.group0.xy.yy, right_dual.e12345, (right_dual.e5 * wedge.e1234) + (right_dual.e12345 * wedge.scalar)) * float4(wedge.group0.xyz, 1.0), 
            /* e23, e31, e12, e45 */
            float4(right_dual.e12345) * wedge.group1, 
            /* e15, e25, e35, e1234 */
            float4(right_dual.e12345) * wedge.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * wedge.group3
        );
    }
}
extension VersorOdd: AntiRejectViaHorizonFrom<AntiFlatPoint> {
    associatedtype Output = AntiCircleRotor;
    func anti_reject_via_horizon_from(other: AntiFlatPoint) -> Output {
        CircleRotor wedge = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(0.0), 
            /* e415, e425, e435, e321 */
            float4(float3(0.0), other.e321 * this.scalar), 
            /* e235, e315, e125, e12345 */
            float4((float3(this.scalar) * other.group0.xyz), -(other.e235 * this.e41) - (other.e315 * this.e42) - (other.e125 * this.e43) - (other.e321 * this.e45))
        );
        FlatPoint right_dual = FlatPoint.from_groups(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4(0.0), 
            /* e23, e31, e12, e45 */
            float4(float3(0.0), wedge.e12345 * right_dual.e45), 
            /* e15, e25, e35, scalar */
            float4((wedge.group2.www * right_dual.group0.xyz), -(wedge.e423 * right_dual.e15) - (wedge.e431 * right_dual.e25) - (wedge.e412 * right_dual.e35) - (wedge.e321 * right_dual.e45))
        );
    }
}
extension VersorOdd: AntiRejectViaHorizonFrom<AntiFlector> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: AntiFlector) -> Output {
        VersorEven wedge = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            (other.group1.zxyx * float4(this.group0.yzx, this.e4235)) + float4(float3(0.0), (other.e2 * this.e4315) + (other.e3 * this.e4125) + (other.e5 * this.e1234) - (other.e315 * this.e42) - (other.e125 * this.e43) - (other.e321 * this.e45)) - (this.group0.zxyx * float4(other.group1.yzx, other.e235)), 
            /* e415, e425, e435, e321 */
            (this.group0 * float4(other.group1.www, other.e321)) + float4(float3(0.0), -(other.e2 * this.e31) - (other.e3 * this.e12)) - (other.group1.xyzx * this.group1.wwwx), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.e5) * this.group1.xyz) + (float3(this.scalar) * other.group0.xyz) + (other.group1.yzx * this.group2.zxy) - (other.group1.zxy * this.group2.yzx)), other.e5 * this.scalar), 
            /* e1, e2, e3, e4 */
            float4(float3(1.0), 0.0) * float4(this.group0.www, 0.0) * float4(other.group1.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        Flector right_dual = Flector.from_groups(
            /* e15, e25, e35, e45 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            (right_dual.group1.yzxx * float4(wedge.group0.zxy, wedge.e1)) + float4(float3(0.0), (right_dual.e4315 * wedge.e2) + (right_dual.e4125 * wedge.e3) + (right_dual.e3215 * wedge.e4) - (right_dual.e25 * wedge.e431) - (right_dual.e35 * wedge.e412) - (right_dual.e45 * wedge.e321)) - (wedge.group0.yzxx * float4(right_dual.group1.zxy, right_dual.e15)), 
            /* e23, e31, e12, e45 */
            (wedge.group0 * float4(right_dual.group1.www, right_dual.e45)) + float4(float3(0.0), -(right_dual.e4315 * wedge.e425) - (right_dual.e4125 * wedge.e435)) - (right_dual.group1.xyzx * wedge.group1.wwwx), 
            /* e15, e25, e35, e1234 */
            float4((float3(right_dual.e3215) * wedge.group1.xyz), 0.0) + float4((float3(wedge.e12345) * right_dual.group0.xyz), 0.0) + float4((right_dual.group1.zxy * wedge.group2.yzx), 0.0) - float4((right_dual.group1.yzx * wedge.group2.zxy), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_dual.group1
        );
    }
}
extension VersorOdd: AntiRejectViaHorizonFrom<AntiLine> {
    associatedtype Output = AntiCircleRotor;
    func anti_reject_via_horizon_from(other: AntiLine) -> Output {
        DipoleInversion wedge = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(0.0), 
            /* e23, e31, e12, e45 */
            float4(float3(1.0), 0.0) * float4(other.group0.xyz, 0.0) * float4(this.group0.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0), 
            /* e15, e25, e35, e1234 */
            float4((float3(this.scalar) * other.group1.xyz), -(other.e23 * this.e41) - (other.e31 * this.e42) - (other.e12 * this.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e23 * this.e45) + (other.e35 * this.e42), (other.e31 * this.e45) + (other.e15 * this.e43), (other.e12 * this.e45) + (other.e25 * this.e41), -(other.e31 * this.e25) - (other.e12 * this.e35) - (other.e15 * this.e23) - (other.e25 * this.e31) - (other.e35 * this.e12)) - float4((other.group1.xyz.yzx * this.group0.zxy), other.e23 * this.e15)
        );
        Line right_dual = Line.from_groups(
            /* e415, e425, e435, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e235, e315, e125, 0 */
            float4(other.group1.xyz * float3(-1.0), 0.0)
        );
        return AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(wedge.e1234) * right_dual.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4((float3(wedge.e1234) * right_dual.group1.xyz), -(wedge.e4235 * right_dual.e415) - (wedge.e4315 * right_dual.e425) - (wedge.e4125 * right_dual.e435)), 
            /* e15, e25, e35, scalar */
            float4((wedge.e4125 * right_dual.e315) + (wedge.e3215 * right_dual.e415), (wedge.e4235 * right_dual.e125) + (wedge.e3215 * right_dual.e425), (wedge.e4315 * right_dual.e235) + (wedge.e3215 * right_dual.e435), -(wedge.e42 * right_dual.e315) - (wedge.e43 * right_dual.e125) - (wedge.e23 * right_dual.e415) - (wedge.e31 * right_dual.e425) - (wedge.e12 * right_dual.e435)) - float4((right_dual.group1.xyz.zxy * wedge.group3.yzx), wedge.e41 * right_dual.e235)
        );
    }
}
extension VersorOdd: AntiRejectViaHorizonFrom<AntiMotor> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: AntiMotor) -> Output {
        VersorOdd wedge = VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            float4(other.scalar) * this.group0, 
            /* e23, e31, e12, e45 */
            float4(((float3(other.scalar) * this.group1.xyz) + (float3(this.scalar) * other.group0.xyz)), other.scalar * this.e45), 
            /* e15, e25, e35, e1234 */
            float4(other.e15 * this.scalar, other.e25 * this.scalar, other.e35 * this.scalar, -(other.e23 * this.e41) - (other.e31 * this.e42) - (other.e12 * this.e43)) + (float4(other.scalar) * this.group2), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.e35 * this.e42, other.e15 * this.e43, other.e25 * this.e41, -(other.e31 * this.e25) - (other.e12 * this.e35) - (other.e15 * this.e23) - (other.e25 * this.e31) - (other.e35 * this.e12)) + (other.group0 * float4(this.group1.www, this.e3215)) + float4((other.group0.www * this.group3.xyz), other.e3215 * this.scalar) - float4((other.group1.yzx * this.group0.zxy), other.e23 * this.e15)
        );
        Motor right_dual = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            (right_dual.group0 * float4(wedge.group2.www, wedge.scalar)) + float4(float3(0.0), -(right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43)) + float4((right_dual.group0.www * wedge.group0.xyz), right_dual.e5 * wedge.e1234), 
            /* e23, e31, e12, e45 */
            float4(right_dual.e235 * wedge.e1234, right_dual.e315 * wedge.e1234, right_dual.e125 * wedge.e1234, -(right_dual.e415 * wedge.e4235) - (right_dual.e425 * wedge.e4315) - (right_dual.e435 * wedge.e4125)) + (float4(right_dual.e12345) * wedge.group1), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_dual.e12345) * wedge.group2.xyz) + (float3(wedge.e3215) * right_dual.group0.xyz) + (right_dual.group1.yzx * wedge.group3.zxy) - (right_dual.group1.zxy * wedge.group3.yzx)), right_dual.e12345 * wedge.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * wedge.group3
        );
    }
}
extension VersorOdd: AntiRejectViaHorizonFrom<AntiPlane> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: AntiPlane) -> Output {
        VersorEven wedge = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4(other.e2 * this.e43 * -1.0, other.e3 * this.e41 * -1.0, other.e1 * this.e42 * -1.0, (other.e2 * this.e4315) + (other.e3 * this.e4125) + (other.e5 * this.e1234)) + (other.group0.zxyx * float4(this.group0.yzx, this.e4235)), 
            /* e415, e425, e435, e321 */
            float4(other.e5 * this.e41, other.e5 * this.e42, other.e5 * this.e43, -(other.e2 * this.e31) - (other.e3 * this.e12)) - (other.group0.xyzx * this.group1.wwwx), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.e5) * this.group1.xyz) + (other.group0.yzx * this.group2.zxy) - (other.group0.zxy * this.group2.yzx)), other.e5 * this.scalar), 
            /* e1, e2, e3, e4 */
            float4(float3(1.0), 0.0) * float4(this.group0.www, 0.0) * float4(other.group0.xyz, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        Plane right_dual = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            float4(right_dual.e4125 * wedge.e431 * -1.0, right_dual.e4235 * wedge.e412 * -1.0, right_dual.e4315 * wedge.e423 * -1.0, (right_dual.e4315 * wedge.e2) + (right_dual.e4125 * wedge.e3) + (right_dual.e3215 * wedge.e4)) + (right_dual.group0.yzxx * float4(wedge.group0.zxy, wedge.e1)), 
            /* e23, e31, e12, e45 */
            float4(right_dual.e3215 * wedge.e423, right_dual.e3215 * wedge.e431, right_dual.e3215 * wedge.e412, -(right_dual.e4315 * wedge.e425) - (right_dual.e4125 * wedge.e435)) - (right_dual.group0.xyzx * wedge.group1.wwwx), 
            /* e15, e25, e35, e1234 */
            float4((float3(right_dual.e3215) * wedge.group1.xyz), 0.0) + float4((right_dual.group0.zxy * wedge.group2.yzx), 0.0) - float4((right_dual.group0.yzx * wedge.group2.zxy), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_dual.group0
        );
    }
}
extension VersorOdd: AntiRejectViaHorizonFrom<AntiScalar> {
    associatedtype Output = Scalar;
    func anti_reject_via_horizon_from(other: AntiScalar) -> Output {
        return Scalar.from_groups(
            /* scalar, 0, 0, 0 */
            float4(powi(other.e12345, 2) * this.scalar * -1.0, 0.0, 0.0, 0.0)
        );
    }
}
extension VersorOdd: AntiRejectViaHorizonFrom<Circle> {
    associatedtype Output = AntiCircleRotor;
    func anti_reject_via_horizon_from(other: Circle) -> Output {
        CircleRotor wedge = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(this.scalar) * other.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(this.scalar) * other.group1, 
            /* e235, e315, e125, e12345 */
            float4((float3(this.scalar) * other.group2.xyz), -(other.e423 * this.e15) - (other.e431 * this.e25) - (other.e412 * this.e35) - (other.e415 * this.e23) - (other.e425 * this.e31) - (other.e435 * this.e12) - (other.e321 * this.e45) - (other.e235 * this.e41) - (other.e315 * this.e42) - (other.e125 * this.e43))
        );
        Dipole right_dual = Dipole.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, 0 */
            float4(other.group2.xyz, 0.0)
        );
        return AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(wedge.e12345) * right_dual.group1, 
            /* e15, e25, e35, scalar */
            float4((float3(wedge.e12345) * right_dual.group2.xyz), -(wedge.e423 * right_dual.e15) - (wedge.e431 * right_dual.e25) - (wedge.e412 * right_dual.e35) - (wedge.e415 * right_dual.e23) - (wedge.e425 * right_dual.e31) - (wedge.e435 * right_dual.e12) - (wedge.e321 * right_dual.e45) - (wedge.e235 * right_dual.e41) - (wedge.e315 * right_dual.e42) - (wedge.e125 * right_dual.e43))
        );
    }
}
extension VersorOdd: AntiRejectViaHorizonFrom<CircleRotor> {
    associatedtype Output = AntiCircleRotor;
    func anti_reject_via_horizon_from(other: CircleRotor) -> Output {
        CircleRotor wedge = CircleRotor.from_groups(
            /* e423, e431, e412, 0 */
            float4(float3(this.scalar) * other.group0.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(this.scalar) * other.group1, 
            /* e235, e315, e125, e12345 */
            float4((float3(this.scalar) * other.group2.xyz), (other.e12345 * this.scalar) - (other.e423 * this.e15) - (other.e431 * this.e25) - (other.e412 * this.e35) - (other.e415 * this.e23) - (other.e425 * this.e31) - (other.e435 * this.e12) - (other.e321 * this.e45) - (other.e235 * this.e41) - (other.e315 * this.e42) - (other.e125 * this.e43))
        );
        AntiCircleRotor right_dual = AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, scalar */
            other.group2 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(wedge.e12345) * right_dual.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(wedge.e12345) * right_dual.group1, 
            /* e15, e25, e35, scalar */
            float4((float3(wedge.e12345) * right_dual.group2.xyz), (right_dual.scalar * wedge.e12345) - (right_dual.e41 * wedge.e235) - (right_dual.e42 * wedge.e315) - (right_dual.e43 * wedge.e125) - (right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435) - (right_dual.e45 * wedge.e321) - (right_dual.e15 * wedge.e423) - (right_dual.e25 * wedge.e431) - (right_dual.e35 * wedge.e412))
        );
    }
}
extension VersorOdd: AntiRejectViaHorizonFrom<Dipole> {
    associatedtype Output = AntiCircleRotor;
    func anti_reject_via_horizon_from(other: Dipole) -> Output {
        DipoleInversion wedge = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(this.scalar) * other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(this.scalar) * other.group1, 
            /* e15, e25, e35, e1234 */
            float4((float3(this.scalar) * other.group2.xyz), -(other.e41 * this.e23) - (other.e42 * this.e31) - (other.e43 * this.e12) - (other.e23 * this.e41) - (other.e31 * this.e42) - (other.e12 * this.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e42 * this.e35) + (other.e23 * this.e45) + (other.e45 * this.e23) + (other.e35 * this.e42), (other.e43 * this.e15) + (other.e31 * this.e45) + (other.e45 * this.e31) + (other.e15 * this.e43), (other.e41 * this.e25) + (other.e12 * this.e45) + (other.e45 * this.e12) + (other.e25 * this.e41), -(other.e23 * this.e15) - (other.e31 * this.e25) - (other.e12 * this.e35) - (other.e35 * this.e12)) - float4((other.group0.xyz.zxy * this.group2.yzx), other.e15 * this.e23) - float4((other.group2.xyz.yzx * this.group0.zxy), other.e25 * this.e31)
        );
        Circle right_dual = Circle.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, 0 */
            float4(other.group2.xyz * float3(-1.0), 0.0)
        );
        return AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4((float3(wedge.e1234) * right_dual.group1.xyz) + (right_dual.group0.xyz.zxy * wedge.group3.yzx) - (right_dual.group0.xyz.yzx * wedge.group3.zxy), 0.0), 
            /* e23, e31, e12, e45 */
            float4((right_dual.e423 * wedge.e3215) + (right_dual.e235 * wedge.e1234), (right_dual.e431 * wedge.e3215) + (right_dual.e315 * wedge.e1234), (right_dual.e412 * wedge.e3215) + (right_dual.e125 * wedge.e1234), -(right_dual.e425 * wedge.e4315) - (right_dual.e435 * wedge.e4125)) - (right_dual.group1.wwwx * wedge.group3.xyzx), 
            /* e15, e25, e35, scalar */
            float4((right_dual.e415 * wedge.e3215) + (right_dual.e315 * wedge.e4125), (right_dual.e425 * wedge.e3215) + (right_dual.e125 * wedge.e4235), (right_dual.e435 * wedge.e3215) + (right_dual.e235 * wedge.e4315), -(right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e321 * wedge.e45) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43)) - float4((right_dual.group2.xyz.zxy * wedge.group3.yzx), right_dual.e423 * wedge.e15)
        );
    }
}
extension VersorOdd: AntiRejectViaHorizonFrom<DipoleInversion> {
    associatedtype Output = AntiCircleRotor;
    func anti_reject_via_horizon_from(other: DipoleInversion) -> Output {
        DipoleInversion wedge = DipoleInversion.from_groups(
            /* e41, e42, e43, 0 */
            float4(float3(this.scalar) * other.group0.xyz, 0.0), 
            /* e23, e31, e12, e45 */
            float4(this.scalar) * other.group1, 
            /* e15, e25, e35, e1234 */
            float4((float3(this.scalar) * other.group2.xyz), (other.e1234 * this.scalar) - (other.e41 * this.e23) - (other.e42 * this.e31) - (other.e43 * this.e12) - (other.e23 * this.e41) - (other.e31 * this.e42) - (other.e12 * this.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e23 * this.e45) + (other.e45 * this.e23) + (other.e35 * this.e42) + (other.e4235 * this.scalar), (other.e31 * this.e45) + (other.e45 * this.e31) + (other.e15 * this.e43) + (other.e4315 * this.scalar), (other.e12 * this.e45) + (other.e45 * this.e12) + (other.e25 * this.e41) + (other.e4125 * this.scalar), -(other.e12 * this.e35) - (other.e15 * this.e23) - (other.e25 * this.e31) - (other.e35 * this.e12)) + float4((other.group0.xyz.yzx * this.group2.zxy), other.e3215 * this.scalar) - (this.group2.yzxx * float4(other.group0.xyz.zxy, other.e23)) - float4((other.group2.yzx * this.group0.zxy), other.e31 * this.e25)
        );
        AntiDipoleInversion right_dual = AntiDipoleInversion.from_groups(
            /* e423, e431, e412, 0 */
            float4(other.group0.xyz * float3(-1.0), 0.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e4 */
            other.group2 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group3 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiCircleRotor.from_groups(
            /* e41, e42, e43, 0 */
            float4((float3(wedge.e1234) * right_dual.group1.xyz) + (right_dual.group0.xyz.zxy * wedge.group3.yzx) - (right_dual.group0.xyz.yzx * wedge.group3.zxy), 0.0), 
            /* e23, e31, e12, e45 */
            float4((right_dual.e423 * wedge.e3215) + (right_dual.e235 * wedge.e1234), (right_dual.e431 * wedge.e3215) + (right_dual.e315 * wedge.e1234), (right_dual.e412 * wedge.e3215) + (right_dual.e125 * wedge.e1234), -(right_dual.e425 * wedge.e4315) - (right_dual.e435 * wedge.e4125)) - (right_dual.group1.wwwx * wedge.group3.xyzx), 
            /* e15, e25, e35, scalar */
            (float4(wedge.e3215) * float4(right_dual.group1.xyz, right_dual.e4)) + (wedge.group3.zxyx * float4(right_dual.group2.yzx, right_dual.e1)) + float4(float3(0.0), (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) + (right_dual.e5 * wedge.e1234) - (right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e321 * wedge.e45) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43)) - float4((right_dual.group2.zxy * wedge.group3.yzx), right_dual.e423 * wedge.e15)
        );
    }
}
extension VersorOdd: AntiRejectViaHorizonFrom<DualNum> {
    associatedtype Output = AntiMotor;
    func anti_reject_via_horizon_from(other: DualNum) -> Output {
        Motor wedge = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4(other.group0.xy.xx, other.e5, (other.e5 * this.e1234) + (other.e12345 * this.scalar)) * float4(this.group0.xyz, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.e5) * float4(this.group1.xyz, this.scalar)
        );
        AntiDualNum right_dual = AntiDualNum.from_groups(
            /* e3215, scalar, 0, 0 */
            float4(other.group0.xy * float2(-1.0), 0.0, 0.0)
        );
        return AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            float4(float3(0.0), right_dual.scalar * wedge.e12345), 
            /* e15, e25, e35, e3215 */
            float4(right_dual.e3215) * wedge.group0
        );
    }
}
extension VersorOdd: AntiRejectViaHorizonFrom<FlatPoint> {
    associatedtype Output = AntiMotor;
    func anti_reject_via_horizon_from(other: FlatPoint) -> Output {
        Flector wedge = Flector.from_groups(
            /* e15, e25, e35, e45 */
            float4(this.scalar) * other.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e35 * this.e42) + (other.e45 * this.e23), (other.e15 * this.e43) + (other.e45 * this.e31), (other.e25 * this.e41) + (other.e45 * this.e12), -(other.e25 * this.e31) - (other.e35 * this.e12)) - (other.group0.yzxx * float4(this.group0.zxy, this.e23))
        );
        AntiFlatPoint right_dual = AntiFlatPoint.from_groups(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            float4(right_dual.e321) * float4(wedge.group1.xyz, wedge.e45) * float4(-1.0), 
            /* e15, e25, e35, e3215 */
            float4(((right_dual.group0.yzx * wedge.group1.zxy) - (right_dual.group0.zxy * wedge.group1.yzx)), 0.0)
        );
    }
}
extension VersorOdd: AntiRejectViaHorizonFrom<Flector> {
    associatedtype Output = AntiMotor;
    func anti_reject_via_horizon_from(other: Flector) -> Output {
        Flector wedge = Flector.from_groups(
            /* e15, e25, e35, e45 */
            float4(this.scalar) * other.group0, 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e45 * this.e23) + (other.e4235 * this.scalar), (other.e45 * this.e31) + (other.e4315 * this.scalar), (other.e45 * this.e12) + (other.e4125 * this.scalar), -(other.e25 * this.e31) - (other.e35 * this.e12)) + (this.group0.yzxw * float4(other.group0.zxy, other.e3215)) - (other.group0.yzxx * float4(this.group0.zxy, this.e23))
        );
        AntiFlector right_dual = AntiFlector.from_groups(
            /* e235, e315, e125, e321 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e5 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            float4((right_dual.group0.www * wedge.group1.xyz * float3(-1.0)), (right_dual.e1 * wedge.e4235) + (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) - (right_dual.e321 * wedge.e45)), 
            /* e15, e25, e35, e3215 */
            float4(((right_dual.group0.yzx * wedge.group1.zxy) - (right_dual.group0.zxy * wedge.group1.yzx)), 0.0)
        );
    }
}
extension VersorOdd: AntiRejectViaHorizonFrom<Line> {
    associatedtype Output = AntiMotor;
    func anti_reject_via_horizon_from(other: Line) -> Output {
        Motor wedge = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            float4((float3(this.scalar) * other.group0.xyz), -(other.e415 * this.e23) - (other.e425 * this.e31) - (other.e435 * this.e12) - (other.e235 * this.e41) - (other.e315 * this.e42) - (other.e125 * this.e43)), 
            /* e235, e315, e125, e5 */
            float4(float3(1.0), 0.0) * float4(other.group1.xyz, 0.0) * float4(this.group0.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
        AntiLine right_dual = AntiLine.from_groups(
            /* e23, e31, e12, 0 */
            float4(other.group0.xyz, 0.0), 
            /* e15, e25, e35, 0 */
            float4(other.group1.xyz, 0.0)
        );
        return AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            float4((float3(wedge.e12345) * right_dual.group0.xyz), -(right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435)), 
            /* e15, e25, e35, e3215 */
            float4(float3(1.0), 0.0) * float4(right_dual.group1.xyz, 0.0) * float4(wedge.group0.www, 0.0) * float4(1.0, 1.0, 1.0, 0.0)
        );
    }
}
extension VersorOdd: AntiRejectViaHorizonFrom<Motor> {
    associatedtype Output = AntiMotor;
    func anti_reject_via_horizon_from(other: Motor) -> Output {
        Motor wedge = Motor.from_groups(
            /* e415, e425, e435, e12345 */
            (float4(other.e5) * float4(this.group0.xyz, this.e1234)) + (float4(this.scalar) * other.group0) + float4(float3(0.0), -(other.e415 * this.e23) - (other.e425 * this.e31) - (other.e435 * this.e12) - (other.e235 * this.e41) - (other.e315 * this.e42) - (other.e125 * this.e43)), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.e5) * this.group1.xyz) + (float3(this.scalar) * other.group1.xyz)), other.e5 * this.scalar)
        );
        AntiMotor right_dual = AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e3215 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0)
        );
        return AntiMotor.from_groups(
            /* e23, e31, e12, scalar */
            float4((float3(wedge.e12345) * right_dual.group0.xyz), (right_dual.scalar * wedge.e12345) - (right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435)), 
            /* e15, e25, e35, e3215 */
            float4(((float3(right_dual.e3215) * wedge.group0.xyz) + (float3(wedge.e12345) * right_dual.group1.xyz)), right_dual.e3215 * wedge.e12345)
        );
    }
}
extension VersorOdd: AntiRejectViaHorizonFrom<MultiVector> {
    associatedtype Output = MultiVector;
    func anti_reject_via_horizon_from(other: MultiVector) -> Output {
        MultiVector wedge = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2(other.scalar * this.scalar, (other.e12345 * this.scalar) + (other.e1 * this.e4235) + (other.e2 * this.e4315) + (other.e3 * this.e4125) + (other.e4 * this.e3215) + (other.e5 * this.e1234) - (other.e415 * this.e23) - (other.e425 * this.e31) - (other.e435 * this.e12) - (other.e321 * this.e45) - (other.e423 * this.e15) - (other.e431 * this.e25) - (other.e412 * this.e35) - (other.e235 * this.e41) - (other.e315 * this.e42) - (other.e125 * this.e43)), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(this.scalar) * other.group1, 
            /* e5, 0, 0, 0 */
            float4(other.e5 * this.scalar, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            (float4(other.scalar) * float4(this.group2.xyz, this.e45)) + (float4(this.scalar) * other.group3), 
            /* e41, e42, e43, 0 */
            float4((float3(other.scalar) * this.group0.xyz) + (float3(this.scalar) * other.group4.xyz), 0.0), 
            /* e23, e31, e12, 0 */
            float4((float3(other.scalar) * this.group1.xyz) + (float3(this.scalar) * other.group5.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            float4((other.e5 * this.e41) + (other.e415 * this.scalar), (other.e5 * this.e42) + (other.e425 * this.scalar), (other.e5 * this.e43) + (other.e435 * this.scalar), -(other.e2 * this.e31) - (other.e3 * this.e12)) + float4((other.group1.www * this.group2.xyz), other.e321 * this.scalar) - (other.group1.xyzx * this.group1.wwwx), 
            /* e423, e431, e412, 0 */
            float4((float3(other.e4) * this.group1.xyz) + (float3(this.scalar) * other.group7.xyz) + (other.group1.zxy * this.group0.yzx) - (other.group1.yzx * this.group0.zxy), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(other.e5) * this.group1.xyz) + (float3(this.scalar) * other.group8.xyz) + (other.group1.yzx * this.group2.zxy) - (other.group1.zxy * this.group2.yzx), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e35 * this.e42) + (other.e45 * this.e23) + (other.e23 * this.e45) + (other.e4235 * this.scalar), (other.e15 * this.e43) + (other.e45 * this.e31) + (other.e31 * this.e45) + (other.e4315 * this.scalar), (other.e25 * this.e41) + (other.e45 * this.e12) + (other.e12 * this.e45) + (other.e4125 * this.scalar), -(other.e15 * this.e23) - (other.e25 * this.e31) - (other.e35 * this.e12) - (other.e12 * this.e35)) + (float4(other.scalar) * this.group3) + float4((other.group4.xyz.yzx * this.group2.zxy), other.e3215 * this.scalar) - (this.group2.yzxx * float4(other.group4.xyz.zxy, other.e23)) - float4((other.group3.yzx * this.group0.zxy), other.e31 * this.e25), 
            /* e1234, 0, 0, 0 */
            float4((other.scalar * this.e1234) + (other.e1234 * this.scalar) - (other.e41 * this.e23) - (other.e42 * this.e31) - (other.e43 * this.e12) - (other.e23 * this.e41) - (other.e31 * this.e42) - (other.e12 * this.e43), 0.0, 0.0, 0.0)
        );
        MultiVector right_dual = MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(other.group0.xy.yx * float2(-1.0, 1.0), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4(other.group9.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5, 0, 0, 0 */
            float4(other.e3215, 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4(other.group8.xyz, other.e321 * -1.0), 
            /* e41, e42, e43, 0 */
            float4(other.group7.xyz, 0.0), 
            /* e23, e31, e12, 0 */
            float4(other.group6.xyz, 0.0), 
            /* e415, e425, e435, e321 */
            float4(other.group5.xyz, other.e45) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e423, e431, e412, 0 */
            float4(other.group4.xyz * float3(-1.0), 0.0), 
            /* e235, e315, e125, 0 */
            float4(other.group3.xyz * float3(-1.0), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group1.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        return MultiVector.from_groups(
            /* scalar, e12345, 0, 0 */
            float4(float2((right_dual.scalar * wedge.e12345) + (right_dual.e12345 * wedge.scalar) + (right_dual.e1 * wedge.e4235) + (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) + (right_dual.e4 * wedge.e3215) + (right_dual.e5 * wedge.e1234) + (right_dual.e4235 * wedge.e1) + (right_dual.e4315 * wedge.e2) + (right_dual.e4125 * wedge.e3) + (right_dual.e3215 * wedge.e4) + (right_dual.e1234 * wedge.e5) - (right_dual.e15 * wedge.e423) - (right_dual.e25 * wedge.e431) - (right_dual.e35 * wedge.e412) - (right_dual.e45 * wedge.e321) - (right_dual.e41 * wedge.e235) - (right_dual.e42 * wedge.e315) - (right_dual.e43 * wedge.e125) - (right_dual.e23 * wedge.e415) - (right_dual.e31 * wedge.e425) - (right_dual.e12 * wedge.e435) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e321 * wedge.e45) - (right_dual.e423 * wedge.e15) - (right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43), right_dual.e12345 * wedge.e12345), 0.0, 0.0), 
            /* e1, e2, e3, e4 */
            float4((right_dual.e15 * wedge.e1234) + (right_dual.e415 * wedge.e321) + (right_dual.e321 * wedge.e415) + (right_dual.e4125 * wedge.e31), (right_dual.e25 * wedge.e1234) + (right_dual.e425 * wedge.e321) + (right_dual.e321 * wedge.e425) + (right_dual.e4235 * wedge.e12), (right_dual.e35 * wedge.e1234) + (right_dual.e435 * wedge.e321) + (right_dual.e321 * wedge.e435) + (right_dual.e4315 * wedge.e23), -(right_dual.e415 * wedge.e423) - (right_dual.e425 * wedge.e431) - (right_dual.e435 * wedge.e412) - (right_dual.e1234 * wedge.e45)) + (float4(right_dual.e12345) * wedge.group1) + (float4(wedge.e12345) * right_dual.group1) + (wedge.group9.yzxx * float4(right_dual.group5.xyz.zxy, right_dual.e41)) + float4((wedge.group4.xyz * right_dual.group9.www), right_dual.e45 * wedge.e1234) + float4((right_dual.group7.xyz.zxy * wedge.group8.xyz.yzx), right_dual.e42 * wedge.e4315) + float4((right_dual.group8.xyz.yzx * wedge.group7.xyz.zxy), right_dual.e43 * wedge.e4125) - (right_dual.group9.yzxy * float4(wedge.group5.xyz.zxy, wedge.e42)) - float4((float3(right_dual.e1234) * wedge.group3.xyz), right_dual.e4125 * wedge.e43) - float4((right_dual.group4.xyz * wedge.group9.www), right_dual.e423 * wedge.e415) - float4((right_dual.group5.xyz.yzx * wedge.group9.zxy), right_dual.e431 * wedge.e425) - float4((right_dual.group7.xyz.yzx * wedge.group8.xyz.zxy), right_dual.e412 * wedge.e435) - float4((right_dual.group8.xyz.zxy * wedge.group7.xyz.yzx), right_dual.e4235 * wedge.e41), 
            /* e5, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e5) + (right_dual.e5 * wedge.e12345) + (right_dual.e4235 * wedge.e15) + (right_dual.e4315 * wedge.e25) + (right_dual.e4125 * wedge.e35) + (right_dual.e3215 * wedge.e45) - (right_dual.e15 * wedge.e4235) - (right_dual.e25 * wedge.e4315) - (right_dual.e35 * wedge.e4125) - (right_dual.e45 * wedge.e3215) - (right_dual.e415 * wedge.e235) - (right_dual.e425 * wedge.e315) - (right_dual.e435 * wedge.e125) - (right_dual.e235 * wedge.e415) - (right_dual.e315 * wedge.e425) - (right_dual.e125 * wedge.e435), 0.0, 0.0, 0.0), 
            /* e15, e25, e35, e45 */
            float4((right_dual.e415 * wedge.e3215) + (right_dual.e315 * wedge.e4125) + (right_dual.e4125 * wedge.e315) + (right_dual.e3215 * wedge.e415), (right_dual.e425 * wedge.e3215) + (right_dual.e125 * wedge.e4235) + (right_dual.e4235 * wedge.e125) + (right_dual.e3215 * wedge.e425), (right_dual.e435 * wedge.e3215) + (right_dual.e235 * wedge.e4315) + (right_dual.e4315 * wedge.e235) + (right_dual.e3215 * wedge.e435), -(right_dual.e435 * wedge.e4125) - (right_dual.e4235 * wedge.e415) - (right_dual.e4315 * wedge.e425) - (right_dual.e4125 * wedge.e435)) + (float4(right_dual.e12345) * wedge.group3) + (float4(wedge.e12345) * right_dual.group3) - (wedge.group9.yzxx * float4(right_dual.group8.xyz.zxy, right_dual.e415)) - float4((wedge.group8.xyz.zxy * right_dual.group9.yzx), right_dual.e425 * wedge.e4315), 
            /* e41, e42, e43, 0 */
            float4((float3(right_dual.e12345) * wedge.group4.xyz) + (float3(right_dual.e1234) * wedge.group6.xyz) + (float3(wedge.e12345) * right_dual.group4.xyz) + (float3(wedge.e1234) * right_dual.group6.xyz) + (right_dual.group7.xyz.zxy * wedge.group9.yzx) + (wedge.group7.xyz.zxy * right_dual.group9.yzx) - (right_dual.group7.xyz.yzx * wedge.group9.zxy) - (wedge.group7.xyz.yzx * right_dual.group9.zxy), 0.0), 
            /* e23, e31, e12, 0 */
            float4((float3(right_dual.e12345) * wedge.group5.xyz) + (float3(right_dual.e3215) * wedge.group7.xyz) + (float3(right_dual.e1234) * wedge.group8.xyz) + (float3(wedge.e12345) * right_dual.group5.xyz) + (float3(wedge.e3215) * right_dual.group7.xyz) + (float3(wedge.e1234) * right_dual.group8.xyz) - (float3(right_dual.e321) * wedge.group9.xyz) - (float3(wedge.e321) * right_dual.group9.xyz), 0.0), 
            /* e415, e425, e435, e321 */
            (float4(right_dual.e12345) * wedge.group6) + (float4(wedge.e12345) * right_dual.group6) + (right_dual.group9.yzxw * float4(wedge.group9.zxy, wedge.e1234)) - float4((right_dual.group9.zxy * wedge.group9.yzx), right_dual.e1234 * wedge.e3215), 
            /* e423, e431, e412, 0 */
            float4((float3(right_dual.e12345) * wedge.group7.xyz) + (float3(wedge.e12345) * right_dual.group7.xyz) + (float3(wedge.e1234) * right_dual.group9.xyz) - (float3(right_dual.e1234) * wedge.group9.xyz), 0.0), 
            /* e235, e315, e125, 0 */
            float4((float3(right_dual.e12345) * wedge.group8.xyz) + (float3(right_dual.e3215) * wedge.group9.xyz) + (float3(wedge.e12345) * right_dual.group8.xyz) - (float3(wedge.e3215) * right_dual.group9.xyz), 0.0), 
            /* e4235, e4315, e4125, e3215 */
            (float4(right_dual.e12345) * wedge.group9) + (float4(wedge.e12345) * right_dual.group9), 
            /* e1234, 0, 0, 0 */
            float4((right_dual.e12345 * wedge.e1234) + (right_dual.e1234 * wedge.e12345), 0.0, 0.0, 0.0)
        );
    }
}
extension VersorOdd: AntiRejectViaHorizonFrom<Plane> {
    associatedtype Output = Scalar;
    func anti_reject_via_horizon_from(other: Plane) -> Output {
        Plane wedge = Plane.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(this.scalar) * other.group0
        );
        AntiPlane right_dual = AntiPlane.from_groups(
            /* e1, e2, e3, e5 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return Scalar.from_groups(
            /* scalar, 0, 0, 0 */
            float4((right_dual.e1 * wedge.e4235) + (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125), 0.0, 0.0, 0.0)
        );
    }
}
extension VersorOdd: AntiRejectViaHorizonFrom<RoundPoint> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: RoundPoint) -> Output {
        VersorEven wedge = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            float4(other.e2 * this.e43 * -1.0, other.e3 * this.e41 * -1.0, other.e1 * this.e42 * -1.0, (other.e3 * this.e4125) + (other.e4 * this.e3215) + (other.e5 * this.e1234)) + (other.group0.zxyx * float4(this.group0.yzx, this.e4235)) + (other.group0.wwwy * float4(this.group1.xyz, this.e4315)), 
            /* e415, e425, e435, e321 */
            float4((other.e4 * this.e15) + (other.e5 * this.e41), (other.e4 * this.e25) + (other.e5 * this.e42), (other.e4 * this.e35) + (other.e5 * this.e43), -(other.e2 * this.e31) - (other.e3 * this.e12)) - (other.group0.xyzx * this.group1.wwwx), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.e5) * this.group1.xyz) + (other.group0.yzx * this.group2.zxy) - (other.group0.zxy * this.group2.yzx)), other.e5 * this.scalar), 
            /* e1, e2, e3, e4 */
            float4(this.scalar) * other.group0
        );
        Sphere right_dual = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(other.group0.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e1234, 0, 0, 0 */
            float4(other.e4 * -1.0, 0.0, 0.0, 0.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            float4(right_dual.e4125 * wedge.e431 * -1.0, right_dual.e4235 * wedge.e412 * -1.0, right_dual.e4315 * wedge.e423 * -1.0, (right_dual.e4125 * wedge.e3) + (right_dual.e3215 * wedge.e4) + (right_dual.e1234 * wedge.e5)) + (right_dual.group0.yzxx * float4(wedge.group0.zxy, wedge.e1)) + float4((float3(right_dual.e1234) * wedge.group1.xyz), right_dual.e4315 * wedge.e2), 
            /* e23, e31, e12, e45 */
            float4((right_dual.e3215 * wedge.e423) + (right_dual.e1234 * wedge.e235), (right_dual.e3215 * wedge.e431) + (right_dual.e1234 * wedge.e315), (right_dual.e3215 * wedge.e412) + (right_dual.e1234 * wedge.e125), -(right_dual.e4315 * wedge.e425) - (right_dual.e4125 * wedge.e435)) - (right_dual.group0.xyzx * wedge.group1.wwwx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_dual.e3215) * wedge.group1.xyz) + (right_dual.group0.zxy * wedge.group2.yzx) - (right_dual.group0.yzx * wedge.group2.zxy)), right_dual.e1234 * wedge.e12345), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_dual.group0
        );
    }
}
extension VersorOdd: AntiRejectViaHorizonFrom<Scalar> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: Scalar) -> Output {
        VersorOdd wedge = VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            float4(other.scalar) * this.group0, 
            /* e23, e31, e12, e45 */
            float4(other.scalar) * this.group1, 
            /* e15, e25, e35, e1234 */
            float4(other.scalar) * this.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(other.scalar) * this.group3
        );
        AntiScalar right_dual = AntiScalar.from_groups(
            /* e12345, 0, 0, 0 */
            float4(other.scalar, 0.0, 0.0, 0.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            float4(right_dual.e12345) * wedge.group0, 
            /* e23, e31, e12, e45 */
            float4(right_dual.e12345) * wedge.group1, 
            /* e15, e25, e35, e1234 */
            float4(right_dual.e12345) * wedge.group2, 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * wedge.group3
        );
    }
}
extension VersorOdd: AntiRejectViaHorizonFrom<Sphere> {
    associatedtype Output = Scalar;
    func anti_reject_via_horizon_from(other: Sphere) -> Output {
        Sphere wedge = Sphere.from_groups(
            /* e4235, e4315, e4125, e3215 */
            float4(this.scalar) * other.group0, 
            /* e1234, 0, 0, 0 */
            float4(other.e1234 * this.scalar, 0.0, 0.0, 0.0)
        );
        RoundPoint right_dual = RoundPoint.from_groups(
            /* e1, e2, e3, e4 */
            float4(other.group0.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e5, 0, 0, 0 */
            float4(other.e3215, 0.0, 0.0, 0.0)
        );
        return Scalar.from_groups(
            /* scalar, 0, 0, 0 */
            float4((right_dual.e1 * wedge.e4235) + (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) + (right_dual.e4 * wedge.e3215) + (right_dual.e5 * wedge.e1234), 0.0, 0.0, 0.0)
        );
    }
}
extension VersorOdd: AntiRejectViaHorizonFrom<VersorEven> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: VersorEven) -> Output {
        VersorEven wedge = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            (float4(this.scalar) * other.group0) + (other.group3.wwwx * float4(this.group1.xyz, this.e4235)) + float4(float3(0.0), (other.e2 * this.e4315) + (other.e3 * this.e4125) + (other.e4 * this.e3215) - (other.e431 * this.e25) - (other.e412 * this.e35) - (other.e415 * this.e23) - (other.e425 * this.e31) - (other.e435 * this.e12) - (other.e321 * this.e45) - (other.e235 * this.e41) - (other.e315 * this.e42) - (other.e125 * this.e43)) + float4((other.group3.zxy * this.group0.yzx), other.e5 * this.e1234) - float4((other.group3.yzx * this.group0.zxy), other.e423 * this.e15), 
            /* e415, e425, e435, e321 */
            float4((other.e5 * this.e41) + (other.e4 * this.e15), (other.e5 * this.e42) + (other.e4 * this.e25), (other.e5 * this.e43) + (other.e4 * this.e35), -(other.e2 * this.e31) - (other.e3 * this.e12)) + (float4(this.scalar) * other.group1) - (other.group3.xyzx * this.group1.wwwx), 
            /* e235, e315, e125, e5 */
            float4(((float3(other.e5) * this.group1.xyz) + (float3(this.scalar) * other.group2.xyz) + (other.group3.yzx * this.group2.zxy) - (other.group3.zxy * this.group2.yzx)), other.e5 * this.scalar), 
            /* e1, e2, e3, e4 */
            float4(this.scalar) * other.group3
        );
        VersorOdd right_dual = VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            other.group0 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e23, e31, e12, e45 */
            other.group1 * float4(1.0, 1.0, 1.0, -1.0), 
            /* e15, e25, e35, e1234 */
            float4(other.group2.xyz, other.e4) * float4(1.0, 1.0, 1.0, -1.0), 
            /* e4235, e4315, e4125, e3215 */
            float4(other.group3.xyz, other.e5) * float4(1.0, 1.0, 1.0, -1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            (wedge.group0.zxyw * float4(right_dual.group3.yzx, right_dual.scalar)) + float4(float3(0.0), (wedge.e2 * right_dual.e4315) + (wedge.e3 * right_dual.e4125) + (wedge.e4 * right_dual.e3215) - (wedge.e431 * right_dual.e25) - (wedge.e412 * right_dual.e35) - (wedge.e415 * right_dual.e23) - (wedge.e425 * right_dual.e31) - (wedge.e435 * right_dual.e12) - (wedge.e321 * right_dual.e45) - (wedge.e235 * right_dual.e41) - (wedge.e315 * right_dual.e42) - (wedge.e125 * right_dual.e43)) + float4((wedge.group0.www * right_dual.group0.xyz), wedge.e5 * right_dual.e1234) + float4((right_dual.group2.www * wedge.group1.xyz), wedge.e1 * right_dual.e4235) - (wedge.group0.yzxx * float4(right_dual.group3.zxy, right_dual.e15)), 
            /* e23, e31, e12, e45 */
            float4((wedge.e12345 * right_dual.e23) + (wedge.e235 * right_dual.e1234), (wedge.e12345 * right_dual.e31) + (wedge.e315 * right_dual.e1234), (wedge.e12345 * right_dual.e12) + (wedge.e125 * right_dual.e1234), -(wedge.e425 * right_dual.e4315) - (wedge.e435 * right_dual.e4125)) + (wedge.group0 * float4(right_dual.group3.www, right_dual.e45)) - (wedge.group1.wwwx * right_dual.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(wedge.e12345) * right_dual.group2.xyz) + (float3(right_dual.e3215) * wedge.group1.xyz) + (wedge.group2.yzx * right_dual.group3.zxy) - (wedge.group2.zxy * right_dual.group3.yzx)), wedge.e12345 * right_dual.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(wedge.e12345) * right_dual.group3
        );
    }
}
extension VersorOdd: AntiRejectViaHorizonFrom<VersorOdd> {
    associatedtype Output = VersorOdd;
    func anti_reject_via_horizon_from(other: VersorOdd) -> Output {
        VersorOdd wedge = VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            float4(((float3(other.scalar) * this.group0.xyz) + (float3(this.scalar) * other.group0.xyz)), other.scalar * this.scalar), 
            /* e23, e31, e12, e45 */
            (float4(other.scalar) * this.group1) + (float4(this.scalar) * other.group1), 
            /* e15, e25, e35, e1234 */
            (float4(other.scalar) * this.group2) + (float4(this.scalar) * other.group2) + float4(float3(0.0), -(other.e41 * this.e23) - (other.e42 * this.e31) - (other.e43 * this.e12) - (other.e23 * this.e41) - (other.e31 * this.e42) - (other.e12 * this.e43)), 
            /* e4235, e4315, e4125, e3215 */
            float4((other.e23 * this.e45) + (other.e45 * this.e23) + (other.e35 * this.e42) + (other.e4235 * this.scalar), (other.e31 * this.e45) + (other.e45 * this.e31) + (other.e15 * this.e43) + (other.e4315 * this.scalar), (other.e12 * this.e45) + (other.e45 * this.e12) + (other.e25 * this.e41) + (other.e4125 * this.scalar), -(other.e12 * this.e35) - (other.e15 * this.e23) - (other.e25 * this.e31) - (other.e35 * this.e12)) + (other.group0.yzxw * float4(this.group2.zxy, this.e3215)) + float4((other.group0.www * this.group3.xyz), other.e3215 * this.scalar) - (this.group2.yzxx * float4(other.group0.zxy, other.e23)) - float4((other.group2.yzx * this.group0.zxy), other.e31 * this.e25)
        );
        VersorEven right_dual = VersorEven.from_groups(
            /* e423, e431, e412, e12345 */
            other.group0 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e415, e425, e435, e321 */
            other.group1 * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e235, e315, e125, e5 */
            float4(other.group2.xyz, other.e3215) * float4(-1.0, -1.0, -1.0, 1.0), 
            /* e1, e2, e3, e4 */
            float4(other.group3.xyz, other.e1234) * float4(-1.0, -1.0, -1.0, 1.0)
        );
        return VersorOdd.from_groups(
            /* e41, e42, e43, scalar */
            (right_dual.group0.zxyw * float4(wedge.group3.yzx, wedge.scalar)) + float4(float3(0.0), (right_dual.e2 * wedge.e4315) + (right_dual.e3 * wedge.e4125) + (right_dual.e4 * wedge.e3215) - (right_dual.e431 * wedge.e25) - (right_dual.e412 * wedge.e35) - (right_dual.e415 * wedge.e23) - (right_dual.e425 * wedge.e31) - (right_dual.e435 * wedge.e12) - (right_dual.e321 * wedge.e45) - (right_dual.e235 * wedge.e41) - (right_dual.e315 * wedge.e42) - (right_dual.e125 * wedge.e43)) + float4((right_dual.group0.www * wedge.group0.xyz), right_dual.e5 * wedge.e1234) + float4((wedge.group2.www * right_dual.group1.xyz), right_dual.e1 * wedge.e4235) - (right_dual.group0.yzxx * float4(wedge.group3.zxy, wedge.e15)), 
            /* e23, e31, e12, e45 */
            float4((right_dual.e12345 * wedge.e23) + (right_dual.e235 * wedge.e1234), (right_dual.e12345 * wedge.e31) + (right_dual.e315 * wedge.e1234), (right_dual.e12345 * wedge.e12) + (right_dual.e125 * wedge.e1234), -(right_dual.e425 * wedge.e4315) - (right_dual.e435 * wedge.e4125)) + (right_dual.group0 * float4(wedge.group3.www, wedge.e45)) - (right_dual.group1.wwwx * wedge.group3.xyzx), 
            /* e15, e25, e35, e1234 */
            float4(((float3(right_dual.e12345) * wedge.group2.xyz) + (float3(wedge.e3215) * right_dual.group1.xyz) + (right_dual.group2.yzx * wedge.group3.zxy) - (right_dual.group2.zxy * wedge.group3.yzx)), right_dual.e12345 * wedge.e1234), 
            /* e4235, e4315, e4125, e3215 */
            float4(right_dual.e12345) * wedge.group3
        );
    }
}
