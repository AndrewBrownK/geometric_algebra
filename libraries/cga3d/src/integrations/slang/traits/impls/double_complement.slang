implementing cga3d;
using traits;
public extension AntiCircleRotor {
    // Fancy postfix trick
    public AntiCircleRotor operator /(DoubleComplementPrefixOrPostfix rhs)  {
        return this.double_complement();
    }
}
public extension DoubleComplementPrefixOrPostfix {
    // Fancy prefix trick
    public AntiCircleRotor operator /(AntiCircleRotor rhs) {
        return rhs.double_complement();
    }
}
public extension AntiCircleRotor {
    public AntiCircleRotor double_complement() {
        return this;
    }
}
public extension AntiDipoleInversion {
    // Fancy postfix trick
    public AntiDipoleInversion operator /(DoubleComplementPrefixOrPostfix rhs)  {
        return this.double_complement();
    }
}
public extension DoubleComplementPrefixOrPostfix {
    // Fancy prefix trick
    public AntiDipoleInversion operator /(AntiDipoleInversion rhs) {
        return rhs.double_complement();
    }
}
public extension AntiDipoleInversion {
    public AntiDipoleInversion double_complement() {
        return this;
    }
}
public extension AntiDualNum {
    // Fancy postfix trick
    public AntiDualNum operator /(DoubleComplementPrefixOrPostfix rhs)  {
        return this.double_complement();
    }
}
public extension DoubleComplementPrefixOrPostfix {
    // Fancy prefix trick
    public AntiDualNum operator /(AntiDualNum rhs) {
        return rhs.double_complement();
    }
}
public extension AntiDualNum {
    public AntiDualNum double_complement() {
        return this;
    }
}
public extension AntiFlatPoint {
    // Fancy postfix trick
    public AntiFlatPoint operator /(DoubleComplementPrefixOrPostfix rhs)  {
        return this.double_complement();
    }
}
public extension DoubleComplementPrefixOrPostfix {
    // Fancy prefix trick
    public AntiFlatPoint operator /(AntiFlatPoint rhs) {
        return rhs.double_complement();
    }
}
public extension AntiFlatPoint {
    public AntiFlatPoint double_complement() {
        return this;
    }
}
public extension AntiFlector {
    // Fancy postfix trick
    public AntiFlector operator /(DoubleComplementPrefixOrPostfix rhs)  {
        return this.double_complement();
    }
}
public extension DoubleComplementPrefixOrPostfix {
    // Fancy prefix trick
    public AntiFlector operator /(AntiFlector rhs) {
        return rhs.double_complement();
    }
}
public extension AntiFlector {
    public AntiFlector double_complement() {
        return this;
    }
}
public extension AntiLine {
    // Fancy postfix trick
    public AntiLine operator /(DoubleComplementPrefixOrPostfix rhs)  {
        return this.double_complement();
    }
}
public extension DoubleComplementPrefixOrPostfix {
    // Fancy prefix trick
    public AntiLine operator /(AntiLine rhs) {
        return rhs.double_complement();
    }
}
public extension AntiLine {
    public AntiLine double_complement() {
        return this;
    }
}
public extension AntiMotor {
    // Fancy postfix trick
    public AntiMotor operator /(DoubleComplementPrefixOrPostfix rhs)  {
        return this.double_complement();
    }
}
public extension DoubleComplementPrefixOrPostfix {
    // Fancy prefix trick
    public AntiMotor operator /(AntiMotor rhs) {
        return rhs.double_complement();
    }
}
public extension AntiMotor {
    public AntiMotor double_complement() {
        return this;
    }
}
public extension AntiPlane {
    // Fancy postfix trick
    public AntiPlane operator /(DoubleComplementPrefixOrPostfix rhs)  {
        return this.double_complement();
    }
}
public extension DoubleComplementPrefixOrPostfix {
    // Fancy prefix trick
    public AntiPlane operator /(AntiPlane rhs) {
        return rhs.double_complement();
    }
}
public extension AntiPlane {
    public AntiPlane double_complement() {
        return this;
    }
}
public extension AntiScalar {
    // Fancy postfix trick
    public AntiScalar operator /(DoubleComplementPrefixOrPostfix rhs)  {
        return this.double_complement();
    }
}
public extension DoubleComplementPrefixOrPostfix {
    // Fancy prefix trick
    public AntiScalar operator /(AntiScalar rhs) {
        return rhs.double_complement();
    }
}
public extension AntiScalar {
    public AntiScalar double_complement() {
        return this;
    }
}
public extension Circle {
    // Fancy postfix trick
    public Circle operator /(DoubleComplementPrefixOrPostfix rhs)  {
        return this.double_complement();
    }
}
public extension DoubleComplementPrefixOrPostfix {
    // Fancy prefix trick
    public Circle operator /(Circle rhs) {
        return rhs.double_complement();
    }
}
public extension Circle {
    public Circle double_complement() {
        return this;
    }
}
public extension CircleRotor {
    // Fancy postfix trick
    public CircleRotor operator /(DoubleComplementPrefixOrPostfix rhs)  {
        return this.double_complement();
    }
}
public extension DoubleComplementPrefixOrPostfix {
    // Fancy prefix trick
    public CircleRotor operator /(CircleRotor rhs) {
        return rhs.double_complement();
    }
}
public extension CircleRotor {
    public CircleRotor double_complement() {
        return this;
    }
}
public extension Dipole {
    // Fancy postfix trick
    public Dipole operator /(DoubleComplementPrefixOrPostfix rhs)  {
        return this.double_complement();
    }
}
public extension DoubleComplementPrefixOrPostfix {
    // Fancy prefix trick
    public Dipole operator /(Dipole rhs) {
        return rhs.double_complement();
    }
}
public extension Dipole {
    public Dipole double_complement() {
        return this;
    }
}
public extension DipoleInversion {
    // Fancy postfix trick
    public DipoleInversion operator /(DoubleComplementPrefixOrPostfix rhs)  {
        return this.double_complement();
    }
}
public extension DoubleComplementPrefixOrPostfix {
    // Fancy prefix trick
    public DipoleInversion operator /(DipoleInversion rhs) {
        return rhs.double_complement();
    }
}
public extension DipoleInversion {
    public DipoleInversion double_complement() {
        return this;
    }
}
public extension DualNum {
    // Fancy postfix trick
    public DualNum operator /(DoubleComplementPrefixOrPostfix rhs)  {
        return this.double_complement();
    }
}
public extension DoubleComplementPrefixOrPostfix {
    // Fancy prefix trick
    public DualNum operator /(DualNum rhs) {
        return rhs.double_complement();
    }
}
public extension DualNum {
    public DualNum double_complement() {
        return this;
    }
}
public extension FlatPoint {
    // Fancy postfix trick
    public FlatPoint operator /(DoubleComplementPrefixOrPostfix rhs)  {
        return this.double_complement();
    }
}
public extension DoubleComplementPrefixOrPostfix {
    // Fancy prefix trick
    public FlatPoint operator /(FlatPoint rhs) {
        return rhs.double_complement();
    }
}
public extension FlatPoint {
    public FlatPoint double_complement() {
        return this;
    }
}
public extension Flector {
    // Fancy postfix trick
    public Flector operator /(DoubleComplementPrefixOrPostfix rhs)  {
        return this.double_complement();
    }
}
public extension DoubleComplementPrefixOrPostfix {
    // Fancy prefix trick
    public Flector operator /(Flector rhs) {
        return rhs.double_complement();
    }
}
public extension Flector {
    public Flector double_complement() {
        return this;
    }
}
public extension Line {
    // Fancy postfix trick
    public Line operator /(DoubleComplementPrefixOrPostfix rhs)  {
        return this.double_complement();
    }
}
public extension DoubleComplementPrefixOrPostfix {
    // Fancy prefix trick
    public Line operator /(Line rhs) {
        return rhs.double_complement();
    }
}
public extension Line {
    public Line double_complement() {
        return this;
    }
}
public extension Motor {
    // Fancy postfix trick
    public Motor operator /(DoubleComplementPrefixOrPostfix rhs)  {
        return this.double_complement();
    }
}
public extension DoubleComplementPrefixOrPostfix {
    // Fancy prefix trick
    public Motor operator /(Motor rhs) {
        return rhs.double_complement();
    }
}
public extension Motor {
    public Motor double_complement() {
        return this;
    }
}
public extension MultiVector {
    // Fancy postfix trick
    public MultiVector operator /(DoubleComplementPrefixOrPostfix rhs)  {
        return this.double_complement();
    }
}
public extension DoubleComplementPrefixOrPostfix {
    // Fancy prefix trick
    public MultiVector operator /(MultiVector rhs) {
        return rhs.double_complement();
    }
}
public extension MultiVector {
    public MultiVector double_complement() {
        return this;
    }
}
public extension Plane {
    // Fancy postfix trick
    public Plane operator /(DoubleComplementPrefixOrPostfix rhs)  {
        return this.double_complement();
    }
}
public extension DoubleComplementPrefixOrPostfix {
    // Fancy prefix trick
    public Plane operator /(Plane rhs) {
        return rhs.double_complement();
    }
}
public extension Plane {
    public Plane double_complement() {
        return this;
    }
}
public extension RoundPoint {
    // Fancy postfix trick
    public RoundPoint operator /(DoubleComplementPrefixOrPostfix rhs)  {
        return this.double_complement();
    }
}
public extension DoubleComplementPrefixOrPostfix {
    // Fancy prefix trick
    public RoundPoint operator /(RoundPoint rhs) {
        return rhs.double_complement();
    }
}
public extension RoundPoint {
    public RoundPoint double_complement() {
        return this;
    }
}
public extension Scalar {
    // Fancy postfix trick
    public Scalar operator /(DoubleComplementPrefixOrPostfix rhs)  {
        return this.double_complement();
    }
}
public extension DoubleComplementPrefixOrPostfix {
    // Fancy prefix trick
    public Scalar operator /(Scalar rhs) {
        return rhs.double_complement();
    }
}
public extension Scalar {
    public Scalar double_complement() {
        return this;
    }
}
public extension Sphere {
    // Fancy postfix trick
    public Sphere operator /(DoubleComplementPrefixOrPostfix rhs)  {
        return this.double_complement();
    }
}
public extension DoubleComplementPrefixOrPostfix {
    // Fancy prefix trick
    public Sphere operator /(Sphere rhs) {
        return rhs.double_complement();
    }
}
public extension Sphere {
    public Sphere double_complement() {
        return this;
    }
}
public extension VersorEven {
    // Fancy postfix trick
    public VersorEven operator /(DoubleComplementPrefixOrPostfix rhs)  {
        return this.double_complement();
    }
}
public extension DoubleComplementPrefixOrPostfix {
    // Fancy prefix trick
    public VersorEven operator /(VersorEven rhs) {
        return rhs.double_complement();
    }
}
public extension VersorEven {
    public VersorEven double_complement() {
        return this;
    }
}
public extension VersorOdd {
    // Fancy postfix trick
    public VersorOdd operator /(DoubleComplementPrefixOrPostfix rhs)  {
        return this.double_complement();
    }
}
public extension DoubleComplementPrefixOrPostfix {
    // Fancy prefix trick
    public VersorOdd operator /(VersorOdd rhs) {
        return rhs.double_complement();
    }
}
public extension VersorOdd {
    public VersorOdd double_complement() {
        return this;
    }
}
